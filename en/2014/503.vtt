WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.616 --> 00:00:14.186 A:middle
&gt;&gt; Welcome to "Mastering
Modern Media Playback".

00:00:15.056 --> 00:00:16.546 A:middle
My name is Stefan Hafeneger.

00:00:16.546 --> 00:00:18.226 A:middle
I'm an engineer on
the AVKit Team.

00:00:18.856 --> 00:00:21.686 A:middle
And if you are already using
or planning to adopt AVKit

00:00:21.686 --> 00:00:24.496 A:middle
or AVFoundation in your
iOS or OS X applications,

00:00:24.706 --> 00:00:25.916 A:middle
this is the right
session for you.

00:00:27.346 --> 00:00:29.846 A:middle
The goal of this session
is to show you how easy

00:00:29.846 --> 00:00:33.766 A:middle
and powerful media playback
is on iOS 8 and OS X Yosemite.

00:00:34.346 --> 00:00:36.996 A:middle
You have more sessions focused

00:00:36.996 --> 00:00:39.376 A:middle
on other major operations
later today and this week.

00:00:39.376 --> 00:00:42.036 A:middle
And we will refer you to
those at the end of this talk.

00:00:43.136 --> 00:00:45.096 A:middle
In the first part of this talk
I'm going to introduce you

00:00:45.096 --> 00:00:47.296 A:middle
to AVKit for iOS
and show you why

00:00:47.296 --> 00:00:49.196 A:middle
and how you should use
it your applications.

00:00:50.586 --> 00:00:52.196 A:middle
I'll also give you a
very brief overview

00:00:52.196 --> 00:00:53.876 A:middle
of the most important
API additions

00:00:53.876 --> 00:00:55.406 A:middle
and changes in your IM behavior.

00:00:56.076 --> 00:00:58.736 A:middle
We have for you this
year an AVKit for OS X.

00:00:59.436 --> 00:01:01.616 A:middle
In the second part of this talk,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.436 --> 00:01:01.616 A:middle
In the second part of this talk,

00:01:01.616 --> 00:01:05.056 A:middle
my colleague Shalini Sahoo
will teach you best practices

00:01:05.135 --> 00:01:07.546 A:middle
for using AVKit and
AVFoundation in your iOS

00:01:07.546 --> 00:01:08.586 A:middle
and OS X applications.

00:01:09.246 --> 00:01:13.316 A:middle
But before we dive in,
let's take a quick look

00:01:13.316 --> 00:01:14.856 A:middle
at our current Media
Stack on iOS.

00:01:16.696 --> 00:01:18.726 A:middle
On the lowest level, we have
the Core Media framework,

00:01:19.426 --> 00:01:21.026 A:middle
the core of our Modern
Media Stack.

00:01:21.276 --> 00:01:24.756 A:middle
On top of our Core
Media sits AVFoundation,

00:01:25.576 --> 00:01:27.296 A:middle
a powerful Objective-C framework

00:01:27.296 --> 00:01:30.326 A:middle
that provides you easy
access to our Media Stack.

00:01:30.956 --> 00:01:34.676 A:middle
Finally, on your iKit level, we
have the Media Player framework

00:01:34.926 --> 00:01:38.406 A:middle
with built-in UI, providing
you playback UI in the form

00:01:38.406 --> 00:01:41.776 A:middle
of MPMoviePlayerController.

00:01:42.956 --> 00:01:46.916 A:middle
This year in iOS 8 we're adding
a new framework called AVKit,

00:01:46.916 --> 00:01:48.666 A:middle
replacing parts of the
Media Player framework.

00:01:51.656 --> 00:01:55.236 A:middle
AVKit is our new high-level
media framework providing you

00:01:55.236 --> 00:01:56.776 A:middle
access to the rest
of the Media Stack.

00:01:56.776 --> 00:01:58.686 A:middle
And I'm going to show you

00:01:58.686 --> 00:02:00.386 A:middle
in this talk what
possibilities this opens


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.686 --> 00:02:00.386 A:middle
in this talk what
possibilities this opens

00:02:00.386 --> 00:02:01.826 A:middle
up for your iOS applications.

00:02:02.486 --> 00:02:05.736 A:middle
But to be clear,
we're not deprecating

00:02:05.776 --> 00:02:07.526 A:middle
MPMoviePlayerController
in iOS 8,

00:02:08.216 --> 00:02:10.336 A:middle
but we are strongly
encouraging you to adopt AVKit

00:02:10.336 --> 00:02:12.186 A:middle
for media playback instead.

00:02:14.016 --> 00:02:16.656 A:middle
So here you have it, our
Modern Media Stack on iOS.

00:02:16.656 --> 00:02:21.736 A:middle
For those of you with an OS
X background, you might see

00:02:21.736 --> 00:02:24.496 A:middle
that it's pretty similar
to our Media Stack on OS X.

00:02:24.496 --> 00:02:27.326 A:middle
And you're correct.

00:02:27.976 --> 00:02:30.916 A:middle
In fact, it's the same
now on both iOS and OS X

00:02:30.916 --> 00:02:32.676 A:middle
and will allow you to create

00:02:32.676 --> 00:02:36.436 A:middle
and maintain cross-platform
applications easier than ever.

00:02:37.496 --> 00:02:40.746 A:middle
And now, let me introduce
you to AVKit for iOS.

00:02:43.876 --> 00:02:46.206 A:middle
So up to now we've
provided you two options

00:02:46.206 --> 00:02:48.236 A:middle
for media playback on iOS.

00:02:48.556 --> 00:02:52.066 A:middle
MPMoviePlayerController and its
UIView controller companion,

00:02:52.066 --> 00:02:54.326 A:middle
MPMoviePlayerViewController
and AVFoundation.

00:02:55.106 --> 00:02:59.656 A:middle
So some of you might be
using MPMoviePlayerController

00:02:59.656 --> 00:03:00.446 A:middle
on your applications,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.656 --> 00:03:00.446 A:middle
on your applications,

00:03:01.306 --> 00:03:05.436 A:middle
which means you get standardized
playback UI, but you lack access

00:03:05.436 --> 00:03:08.596 A:middle
to the Media Stack, which
means you're limited

00:03:08.596 --> 00:03:10.466 A:middle
to basic media playback.

00:03:11.546 --> 00:03:13.576 A:middle
Or, you might be
using AVFoundation,

00:03:14.156 --> 00:03:15.626 A:middle
and thus have access
to the Media Stack,

00:03:15.626 --> 00:03:19.846 A:middle
and can do things beyond basic
media playback, but you have

00:03:19.846 --> 00:03:23.836 A:middle
to implement your own
playback user interface.

00:03:23.836 --> 00:03:26.676 A:middle
Finally, some of you in the
audience might be in the process

00:03:26.676 --> 00:03:28.276 A:middle
of adding media playback
to your applications.

00:03:28.326 --> 00:03:30.076 A:middle
And you might be torn
between these two options.

00:03:30.076 --> 00:03:33.966 A:middle
We want to make your life
as developers easier.

00:03:33.966 --> 00:03:40.036 A:middle
And that's why we have
something new for all of you.

00:03:40.176 --> 00:03:42.446 A:middle
AVKit provides you both
standardized playback controls

00:03:42.446 --> 00:03:45.146 A:middle
and behaviors by
giving you full access

00:03:45.146 --> 00:03:47.226 A:middle
to the Modern Media Stack
through AVFoundation.

00:03:47.816 --> 00:03:51.566 A:middle
Last year we introduced
AVKit in OS X.

00:03:52.666 --> 00:03:57.286 A:middle
This year we bring
AVKit over to iOS.

00:03:57.356 --> 00:03:59.696 A:middle
Our goal for AVKit in iOS
is to provide you view-

00:03:59.696 --> 00:04:02.506 A:middle
level facilities for
media operations on top


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.696 --> 00:04:02.506 A:middle
level facilities for
media operations on top

00:04:02.506 --> 00:04:04.806 A:middle
of AVFoundation and your iKit.

00:04:05.836 --> 00:04:08.046 A:middle
Media playback on
iOS is now easier

00:04:08.386 --> 00:04:12.986 A:middle
and more powerful than ever.

00:04:12.986 --> 00:04:15.406 A:middle
AVPlayerViewController
- sorry, AVKit on iOS,

00:04:15.636 --> 00:04:17.766 A:middle
which uses
AVPlayerViewController,

00:04:18.346 --> 00:04:21.555 A:middle
a state-of-the-art UV controller
subclass provides you the same

00:04:21.555 --> 00:04:23.276 A:middle
look and feel as our
video applications

00:04:23.366 --> 00:04:26.616 A:middle
and the existing
MPMoviePlayController API.

00:04:27.386 --> 00:04:28.996 A:middle
And we made it really
easy for you

00:04:28.996 --> 00:04:31.926 A:middle
to adopt AVPlayerViewController
in your iOS applications.

00:04:33.066 --> 00:04:37.736 A:middle
Let me show you the
necessary steps in a demo.

00:04:39.136 --> 00:04:41.256 A:middle
So in XCode, we create
a new iOS application

00:04:41.256 --> 00:04:42.986 A:middle
and we select the empty
application template.

00:04:43.716 --> 00:04:46.206 A:middle
And then press the Next button.

00:04:46.386 --> 00:04:49.616 A:middle
As the name, we enter
AVKitPlayer.

00:04:52.276 --> 00:04:53.456 A:middle
Press Next again.

00:04:55.006 --> 00:04:59.936 A:middle
Set the project on the desktop.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.056 --> 00:05:02.356 A:middle
Now we select the
AppDelegate implementation.

00:05:02.356 --> 00:05:04.956 A:middle
And the first thing
you have to do is

00:05:04.956 --> 00:05:07.846 A:middle
to import AVFoundation
and AVKit.

00:05:11.156 --> 00:05:14.396 A:middle
Then, an application
didFinishLaunchingWithOptions.

00:05:20.256 --> 00:05:22.316 A:middle
We first create an
AVPlayerViewController

00:05:22.876 --> 00:05:24.226 A:middle
by calling
AVPlayerViewController

00:05:24.226 --> 00:05:25.386 A:middle
alloc init.

00:05:26.196 --> 00:05:29.236 A:middle
And then we create
an AVPlayer object

00:05:29.296 --> 00:05:31.226 A:middle
by calling AVPlayerWithURL.

00:05:31.296 --> 00:05:34.366 A:middle
And then we use NSBundle
mainBundle,

00:05:34.516 --> 00:05:36.156 A:middle
URLForResource with extension.

00:05:36.936 --> 00:05:38.686 A:middle
The resource name is going
to be "longboarding",

00:05:38.916 --> 00:05:39.806 A:middle
and the extension .mov.

00:05:39.806 --> 00:05:43.516 A:middle
We set the player object on
the AVPlayerViewController.

00:05:43.706 --> 00:05:46.146 A:middle
And then we set the
AVPlayerViewController

00:05:46.146 --> 00:05:48.696 A:middle
as the rootViewController
of our window.

00:05:48.696 --> 00:05:53.226 A:middle
Finally, we add the
movie to our project.

00:05:53.956 --> 00:05:57.386 A:middle
And if we now build and run,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:04.316 --> 00:06:06.716 A:middle
you can see we have a fully
functional playback application.

00:06:10.876 --> 00:06:12.836 A:middle
And this was just three
lines of code, basically.

00:06:13.546 --> 00:06:16.826 A:middle
But this example is probably
not what your application would

00:06:16.826 --> 00:06:17.206 A:middle
look like.

00:06:17.626 --> 00:06:19.076 A:middle
So let's switch to
a different project.

00:06:19.726 --> 00:06:23.206 A:middle
Let me first run this
and show you what it is.

00:06:24.026 --> 00:06:29.416 A:middle
So this is a very simple
media playback application,

00:06:29.546 --> 00:06:31.826 A:middle
or media library, movie
library application.

00:06:32.676 --> 00:06:35.396 A:middle
And it's using the master
detailViewController template.

00:06:36.666 --> 00:06:38.726 A:middle
So in the master view here,
we have a list of movies.

00:06:39.746 --> 00:06:42.426 A:middle
And for each of the movies
we have the thumbnail,

00:06:42.826 --> 00:06:44.836 A:middle
the name of the file
and some information.

00:06:45.576 --> 00:06:46.906 A:middle
We will now click
one of the movies.

00:06:47.876 --> 00:06:50.336 A:middle
We see that in the detail
view we have some information

00:06:50.336 --> 00:06:52.056 A:middle
about the movie in
this gray box here.

00:06:53.226 --> 00:06:54.886 A:middle
So in the rest of this
demo, I'm now going

00:06:54.886 --> 00:06:58.386 A:middle
to add AVPlayerViewController
and show you how to hook it up.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.276 --> 00:07:02.656 A:middle
So we start by modifying
the main storyboard.

00:07:03.436 --> 00:07:06.336 A:middle
As you can see here, I
already have a container view.

00:07:06.336 --> 00:07:10.066 A:middle
So now in the object library,

00:07:11.076 --> 00:07:13.646 A:middle
we search for the
Player View Controller.

00:07:14.356 --> 00:07:17.266 A:middle
Drag in an instance
to our storyboard.

00:07:17.966 --> 00:07:20.256 A:middle
Move this over here a bit.

00:07:21.166 --> 00:07:26.126 A:middle
And then using a Control Drag,
and choose Embedded embed.

00:07:26.126 --> 00:07:28.546 A:middle
We can set the AP
Player View Controller

00:07:28.546 --> 00:07:29.556 A:middle
up for our container view.

00:07:30.366 --> 00:07:35.526 A:middle
Now we need to select the
segue in the inspector,

00:07:35.526 --> 00:07:36.576 A:middle
give it an identifier.

00:07:36.576 --> 00:07:38.676 A:middle
In this case we just
use showMovie.

00:07:40.626 --> 00:07:44.966 A:middle
Since we are using AV Player
View Controller in a storyboard,

00:07:44.966 --> 00:07:46.566 A:middle
you also have to manually link

00:07:46.986 --> 00:07:51.586 A:middle
against the AVKit
library a framework.

00:07:51.676 --> 00:07:53.186 A:middle
So for Linked Framework
and Libraries,

00:07:53.486 --> 00:07:54.466 A:middle
we add a new framework.

00:07:54.466 --> 00:08:00.856 A:middle
So we type in AVKit, select Add
and then press the Add button.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:54.466 --> 00:08:00.856 A:middle
So we type in AVKit, select Add
and then press the Add button.

00:08:00.916 --> 00:08:05.046 A:middle
And now we have to modify
the DetailViewController

00:08:05.046 --> 00:08:05.686 A:middle
implementation.

00:08:06.246 --> 00:08:10.016 A:middle
Again, the first thing we have

00:08:10.056 --> 00:08:12.306 A:middle
to do is import the
header files.

00:08:13.116 --> 00:08:15.916 A:middle
So do import AVFoundation
then add import AVKit.

00:08:15.916 --> 00:08:19.156 A:middle
And then we need to
implement the prepareForSegue

00:08:19.236 --> 00:08:20.376 A:middle
sender notation.

00:08:20.676 --> 00:08:26.336 A:middle
So first we check
for the identifier.

00:08:26.336 --> 00:08:27.796 A:middle
We want to make sure
that it is showMovie.

00:08:27.796 --> 00:08:32.436 A:middle
Then we get the
AVPlayerViewController,

00:08:32.436 --> 00:08:33.966 A:middle
which is the
destinationViewController

00:08:33.966 --> 00:08:34.436 A:middle
of the segue.

00:08:34.436 --> 00:08:38.035 A:middle
And then finally we create
an AVPlayer the same way

00:08:38.035 --> 00:08:39.936 A:middle
as we did before by
using playerWithURL.

00:08:40.676 --> 00:08:42.726 A:middle
And this detail view
controller has a movie property,

00:08:42.956 --> 00:08:44.106 A:middle
which itself has a URL.

00:08:44.206 --> 00:08:47.656 A:middle
And then we set this
AVPlayer and its player object

00:08:47.736 --> 00:08:48.836 A:middle
on the playerViewController.

00:08:49.496 --> 00:08:58.616 A:middle
We now build and run
and select a movie.

00:08:58.756 --> 00:09:01.266 A:middle
You can see that the
movie is loaded here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.756 --> 00:09:01.266 A:middle
You can see that the
movie is loaded here.

00:09:01.476 --> 00:09:02.246 A:middle
And we can press Play.

00:09:03.056 --> 00:09:06.246 A:middle
And we press the
fullscreen button.

00:09:06.606 --> 00:09:09.086 A:middle
It goes into fullscreen and
I can rotate to landscape.

00:09:09.086 --> 00:09:11.826 A:middle
And you can see it's
fully working.

00:09:15.166 --> 00:09:15.436 A:middle
All right?

00:09:16.046 --> 00:09:18.196 A:middle
So next I want to show you how
AVPlayerViewController works

00:09:18.196 --> 00:09:20.796 A:middle
in AVFoundation, especially for
those of you in the audience

00:09:20.796 --> 00:09:24.546 A:middle
that are new to AVFoundation.

00:09:24.546 --> 00:09:26.406 A:middle
AVPlayerViewController
has a strong reference

00:09:26.406 --> 00:09:27.296 A:middle
in AVPlayer object.

00:09:28.826 --> 00:09:30.116 A:middle
This object provides
the content.

00:09:30.526 --> 00:09:34.496 A:middle
And an AVPlayer object manages
an AVPlayerItem, which serves

00:09:34.496 --> 00:09:37.536 A:middle
as a mutable data structure
from an individual AVAsset.

00:09:37.866 --> 00:09:41.406 A:middle
This means in order
to provide content

00:09:41.406 --> 00:09:42.776 A:middle
from the AVPlayerViewController,

00:09:42.776 --> 00:09:44.836 A:middle
you have to do the
following steps.

00:09:47.166 --> 00:09:50.286 A:middle
First, you create an
AVAsset from an NSURL.

00:09:50.466 --> 00:09:54.406 A:middle
This URL can either be a local
file on disk or a remote URL.

00:09:55.676 --> 00:09:58.686 A:middle
With an AVAsset you then
create an AVPlayerItem.

00:09:58.826 --> 00:10:02.796 A:middle
Once you have an
AVPlayerItem you can create an


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.826 --> 00:10:02.796 A:middle
Once you have an
AVPlayerItem you can create an

00:10:02.796 --> 00:10:03.526 A:middle
AVPlayer object.

00:10:04.226 --> 00:10:07.646 A:middle
And finally, you
associate the AVPlayerObject

00:10:07.646 --> 00:10:08.696 A:middle
with the AVPlayerViewController.

00:10:09.446 --> 00:10:13.736 A:middle
But if you don't need to
inspect any properties yourself

00:10:13.736 --> 00:10:15.866 A:middle
of the content, and
just want to play

00:10:15.866 --> 00:10:18.486 A:middle
with AVPlayerViewController, you
can do all four steps at once.

00:10:19.196 --> 00:10:22.546 A:middle
As I've shown you in the demo,

00:10:22.836 --> 00:10:25.466 A:middle
you can directly create an
AVPlayer object from an NSURL

00:10:25.506 --> 00:10:27.546 A:middle
and then pass it to the
AVPlayerViewController.

00:10:28.236 --> 00:10:31.646 A:middle
And there's a chance that the
only reason why you inspected

00:10:31.646 --> 00:10:33.766 A:middle
the AVAsset so far was in order

00:10:33.766 --> 00:10:35.446 A:middle
to implement your own
playback user interface.

00:10:37.046 --> 00:10:38.966 A:middle
With AVKit you don't
have to do this anymore.

00:10:39.076 --> 00:10:40.946 A:middle
So if you would take a look

00:10:40.946 --> 00:10:43.656 A:middle
at the AVPlayerViewController
API you might notice

00:10:43.766 --> 00:10:45.406 A:middle
that besides the
player property,

00:10:45.406 --> 00:10:46.956 A:middle
there isn't really much more.

00:10:47.286 --> 00:10:51.196 A:middle
But there is so much stuff
you just get automatically

00:10:51.196 --> 00:10:52.676 A:middle
without any further setup.

00:10:52.916 --> 00:10:57.586 A:middle
Here's a list of the most
important AVPlayerViewController

00:10:57.636 --> 00:10:59.246 A:middle
features for your reference.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.276 --> 00:11:02.236 A:middle
You might notice that
it is mostly identical

00:11:02.236 --> 00:11:03.786 A:middle
to MPMoviePlayerController.

00:11:04.616 --> 00:11:06.276 A:middle
And there's a reason for that.

00:11:07.206 --> 00:11:10.086 A:middle
We want to make your transition
to AVKit as easy as possible.

00:11:10.746 --> 00:11:15.206 A:middle
For those of you not familiar
with MPMoviePlayerController,

00:11:15.266 --> 00:11:17.726 A:middle
let me show you what these
features actually look like.

00:11:19.496 --> 00:11:22.536 A:middle
AVPlayerViewController has
adaptive player controls.

00:11:22.536 --> 00:11:25.496 A:middle
This is different from
MPMoviePlayerController

00:11:25.496 --> 00:11:27.766 A:middle
and AVPlayerViewer on OS X.

00:11:28.456 --> 00:11:31.186 A:middle
Instead of setting a
certain control style,

00:11:31.186 --> 00:11:33.086 A:middle
AVPlayerViewController
automatically adapts

00:11:33.086 --> 00:11:34.276 A:middle
and controls that for you.

00:11:35.066 --> 00:11:38.356 A:middle
So as you saw in the demo,
when you show a movie embedded

00:11:38.356 --> 00:11:42.216 A:middle
in your application, and your
user taps the fullscreen button,

00:11:43.706 --> 00:11:45.446 A:middle
AVPlayerViewController
automatically switches

00:11:45.526 --> 00:11:46.596 A:middle
to the fullscreen
playback controls.

00:11:47.296 --> 00:11:52.956 A:middle
If you don't want it to
show any controls at all,

00:11:52.956 --> 00:11:56.566 A:middle
you still have the
option to hide them.

00:11:56.736 --> 00:11:59.006 A:middle
AVPlayerViewController also
has dynamic player controls.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.396 --> 00:12:02.946 A:middle
So for continuous chapters,
tapping this seek backward

00:12:02.946 --> 00:12:10.896 A:middle
or seek forward button seeks
the previous or next chapter.

00:12:11.116 --> 00:12:13.426 A:middle
For content with additional
languages or subtitles,

00:12:14.396 --> 00:12:17.216 A:middle
AVPlayerViewController adds a
media selection button allowing

00:12:19.356 --> 00:12:22.946 A:middle
the user to select a different
audio or subtitle track.

00:12:26.356 --> 00:12:27.616 A:middle
Dynamic also means

00:12:27.906 --> 00:12:29.996 A:middle
that AVPlayerViewController
automatically switches

00:12:29.996 --> 00:12:31.496 A:middle
to a different set
of playback controls

00:12:31.496 --> 00:12:32.516 A:middle
for live streaming content.

00:12:33.546 --> 00:12:38.016 A:middle
You don't have to do anything.

00:12:38.016 --> 00:12:40.826 A:middle
Finally, AVPlayerViewController
has built-in support

00:12:40.826 --> 00:12:42.526 A:middle
for both AirPlay and HDMI.

00:12:43.626 --> 00:12:47.596 A:middle
So when a user enables AirPlay
or plugs in an HDMI adapter,

00:12:47.686 --> 00:12:49.686 A:middle
the application will
automatically present the

00:12:49.686 --> 00:12:51.096 A:middle
content on the external screen

00:12:51.156 --> 00:12:53.646 A:middle
but keeping the player
controls on the iOS device.

00:12:53.776 --> 00:12:58.686 A:middle
So let's see how
AVPlayerViewController stands

00:12:58.686 --> 00:13:03.106 A:middle
up against
MPMoviePlayerController so far.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.686 --> 00:13:03.106 A:middle
up against
MPMoviePlayerController so far.

00:13:03.316 --> 00:13:05.636 A:middle
Every major feature is
available in AVKit as well.

00:13:05.636 --> 00:13:09.646 A:middle
But if you look closely, you
will notice one difference.

00:13:10.296 --> 00:13:14.166 A:middle
As I mentioned before,

00:13:14.166 --> 00:13:16.446 A:middle
AVPlayerViewController
automatically selects the

00:13:16.446 --> 00:13:17.376 A:middle
control style for you.

00:13:18.256 --> 00:13:21.006 A:middle
So there's less for
you to worry about.

00:13:22.276 --> 00:13:24.126 A:middle
But actually, there's
a lot more.

00:13:25.576 --> 00:13:29.916 A:middle
Let's take a look at an object
diagram from earlier for a bit.

00:13:30.086 --> 00:13:32.056 A:middle
If you want to replace
the current AVPlayerItem,

00:13:32.056 --> 00:13:34.076 A:middle
you typically use
replace current item

00:13:34.076 --> 00:13:35.456 A:middle
with player item on AVPlayer.

00:13:36.226 --> 00:13:37.926 A:middle
But if you already know

00:13:37.926 --> 00:13:39.786 A:middle
in advance what the next
item is going to be,

00:13:40.626 --> 00:13:43.116 A:middle
you can help AVFoundation
and AVFoundation can help you

00:13:43.116 --> 00:13:45.066 A:middle
to get smooth playback
when switching

00:13:45.066 --> 00:13:47.876 A:middle
to the next player item
using AVQueuePlayer.

00:13:47.876 --> 00:13:53.796 A:middle
AVQueuePlayer is a subclass
of AVPlayer that allows you

00:13:53.796 --> 00:13:55.856 A:middle
to enqueue a list
of AVPlayer items,

00:13:56.396 --> 00:13:58.606 A:middle
each of which is
backed by an AVAsset.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:00.176 --> 00:14:01.986 A:middle
Everything I'm showing you today

00:14:01.986 --> 00:14:04.016 A:middle
about AVPlayerViewController
works just fine

00:14:04.016 --> 00:14:05.046 A:middle
with AVQueuePlayer as well.

00:14:05.996 --> 00:14:08.306 A:middle
So far I've just talked
about basic media playback.

00:14:09.326 --> 00:14:14.006 A:middle
With AVFoundation you
can do a lot more.

00:14:14.206 --> 00:14:17.446 A:middle
AVComposition is a subclass
of AVAsset and allows you

00:14:17.446 --> 00:14:20.046 A:middle
to create multi-clip and
multi-track media compositions.

00:14:20.666 --> 00:14:24.996 A:middle
As a result, this is heavily
used in our and possibly some

00:14:24.996 --> 00:14:26.506 A:middle
of your video editing
applications.

00:14:27.196 --> 00:14:31.946 A:middle
It doesn't matter if you provide
AVPlayerViewController an

00:14:31.946 --> 00:14:33.876 A:middle
AVPlayerItem backed
by an AVAsset

00:14:34.136 --> 00:14:36.396 A:middle
or an AVComposition,
either works fine.

00:14:40.296 --> 00:14:42.236 A:middle
AVComposition is
also your entry point

00:14:42.336 --> 00:14:44.266 A:middle
to even more advanced features.

00:14:45.796 --> 00:14:48.466 A:middle
For instance, if your reader
composition allows you

00:14:48.466 --> 00:14:52.406 A:middle
to apply FN transforms
and simple transitions

00:14:52.716 --> 00:14:56.356 A:middle
for video content, but you can
even create your own custom

00:14:56.356 --> 00:15:00.296 A:middle
compositors to create all
kinds of video effects.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:56.356 --> 00:15:00.296 A:middle
compositors to create all
kinds of video effects.

00:15:00.776 --> 00:15:04.956 A:middle
AVAudioMix provides a similar
functionality for audio tracks.

00:15:05.756 --> 00:15:08.496 A:middle
AVVideoComposition,
AVAudioMix work in combination

00:15:08.496 --> 00:15:10.176 A:middle
with AVFoundation - I'm
sorry - with AVComposition.

00:15:10.836 --> 00:15:12.896 A:middle
If you want to analyze,

00:15:13.086 --> 00:15:16.156 A:middle
modify or visualize raw
audio data during playback,

00:15:16.156 --> 00:15:17.536 A:middle
you can use
MTAudioProcessingTap.

00:15:17.536 --> 00:15:22.466 A:middle
These are just a few classes
that AVFoundation provides you

00:15:22.606 --> 00:15:25.506 A:middle
for media operations
beyond basic media playback.

00:15:26.766 --> 00:15:28.806 A:middle
If you want to learn
more about this topic,

00:15:28.806 --> 00:15:31.386 A:middle
check out our previous WWDC
sessions, like this one

00:15:31.386 --> 00:15:33.436 A:middle
from last year, and
related sample code.

00:15:34.026 --> 00:15:38.586 A:middle
Let's take a look
again at our list

00:15:38.586 --> 00:15:39.856 A:middle
of AVPlayerViewController
features.

00:15:40.566 --> 00:15:44.086 A:middle
So as I've shown
you in this talk,

00:15:44.716 --> 00:15:47.106 A:middle
AVPlayerViewController features
the same features - sorry -

00:15:47.106 --> 00:15:49.756 A:middle
has the same features as
MPMoviePlayerController,

00:15:50.436 --> 00:15:52.496 A:middle
but due to the full access

00:15:52.496 --> 00:15:54.546 A:middle
to AVFoundation, you
get so much more.

00:15:59.776 --> 00:16:02.816 A:middle
Let me show you what you can
easily do now with AVFoundation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.776 --> 00:16:02.816 A:middle
Let me show you what you can
easily do now with AVFoundation,

00:16:02.816 --> 00:16:04.936 A:middle
AVKit in your own
iOS applications.

00:16:05.606 --> 00:16:10.696 A:middle
So this is an iPad version of
the movie library application

00:16:10.746 --> 00:16:12.006 A:middle
that I used earlier
to show you how

00:16:12.006 --> 00:16:13.206 A:middle
to use AVPlayerViewController.

00:16:14.686 --> 00:16:16.746 A:middle
In this demo I can now add
video effects to movies.

00:16:18.036 --> 00:16:21.376 A:middle
As you can see, I added the
Hue Curve effect to this movie.

00:16:22.586 --> 00:16:24.106 A:middle
Right now the effect
has zero impact.

00:16:25.396 --> 00:16:27.316 A:middle
But once I start dragging
handles up or down,

00:16:27.706 --> 00:16:35.756 A:middle
you can see how I can change
certain hue values in the movie.

00:16:35.926 --> 00:16:38.006 A:middle
Each handle represents a hue
value on the color wheel.

00:16:38.656 --> 00:16:40.696 A:middle
And changing a handle
modifies that color or shifts

00:16:40.696 --> 00:16:41.676 A:middle
that color to a different value.

00:16:42.496 --> 00:16:48.266 A:middle
I can structure any frame in
the movie to adjust the values.

00:16:48.936 --> 00:16:50.386 A:middle
So here, the helmet,
for instance.

00:16:50.656 --> 00:16:55.386 A:middle
Well, let's go back to the
beginning and start playing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.286 --> 00:17:03.186 A:middle
So as you can see, the video
effect is applied in real time.

00:17:04.776 --> 00:17:07.306 A:middle
And on the right, I even
added a digital volume meter

00:17:07.306 --> 00:17:08.965 A:middle
that shows the volume
for the left

00:17:08.965 --> 00:17:12.346 A:middle
and right audio channel
during playback.

00:17:13.435 --> 00:17:14.685 A:middle
In order to do all of this,

00:17:14.836 --> 00:17:16.766 A:middle
the application is using the
AVFoundationComposition API

00:17:16.766 --> 00:17:18.165 A:middle
that I mentioned before.

00:17:22.396 --> 00:17:25.965 A:middle
AVKit continues to manage the
user interface just as it does

00:17:25.965 --> 00:17:27.276 A:middle
for basic media playback cases.

00:17:32.266 --> 00:17:32.596 A:middle
Thank you.

00:17:33.516 --> 00:17:37.666 A:middle
[ Applause ]

00:17:38.166 --> 00:17:39.846 A:middle
So now that I have
shown you how easy it is

00:17:39.846 --> 00:17:42.236 A:middle
to adopt AVPlayerViewController
in a new application,

00:17:42.906 --> 00:17:44.666 A:middle
and what amazing things
you can do in combination

00:17:44.666 --> 00:17:47.056 A:middle
with AVFoundation, I
hope you can't wait

00:17:47.106 --> 00:17:49.286 A:middle
to adopt AVPlayerViewController
in your existing applications.

00:17:49.286 --> 00:17:53.016 A:middle
In order to help you
with the transition,

00:17:53.166 --> 00:17:54.606 A:middle
I'm going to highlight
the necessary steps

00:17:54.876 --> 00:17:55.896 A:middle
for the three common scenarios.

00:17:59.816 --> 00:18:02.326 A:middle
In the first scenario,
we're using AVPlayerLayer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.816 --> 00:18:02.326 A:middle
In the first scenario,
we're using AVPlayerLayer

00:18:02.406 --> 00:18:05.096 A:middle
and possibly implemented your
own playback user interface.

00:18:05.176 --> 00:18:09.236 A:middle
Start off by replacing
your AVPlayerLayer back

00:18:09.236 --> 00:18:11.236 A:middle
to your UIView and
your user interface -

00:18:11.236 --> 00:18:12.246 A:middle
or your playback user interface

00:18:13.206 --> 00:18:14.536 A:middle
with AVPlayerViewController's
view.

00:18:14.536 --> 00:18:17.886 A:middle
Then set the player property

00:18:17.886 --> 00:18:20.046 A:middle
on AVPlayerViewController
instead of AVPlayerLayer.

00:18:20.806 --> 00:18:23.006 A:middle
And there's a chance that most

00:18:23.006 --> 00:18:24.766 A:middle
of your remaining code
will stay unchanged,

00:18:25.656 --> 00:18:28.316 A:middle
unless you have some
special UI needs.

00:18:30.016 --> 00:18:32.086 A:middle
If you're using
MPMoviePlayerViewController,

00:18:32.086 --> 00:18:34.856 A:middle
just replace
MPMoviePlayerViewController

00:18:34.856 --> 00:18:36.566 A:middle
alloc init to content URL

00:18:37.356 --> 00:18:39.056 A:middle
by AVPlayerViewController
alloc init

00:18:39.156 --> 00:18:42.676 A:middle
and then create an
associated AVPlayer object

00:18:42.806 --> 00:18:46.106 A:middle
like I've shown you before.

00:18:46.106 --> 00:18:47.776 A:middle
However, if you are
also accessing the

00:18:47.776 --> 00:18:49.676 A:middle
MPMoviePlayerController
property,

00:18:50.586 --> 00:18:51.866 A:middle
the third scenario
also applies to you.

00:18:52.646 --> 00:18:56.586 A:middle
So if you're using
MPMoviePlayerController

00:18:56.586 --> 00:18:58.176 A:middle
on your applications,
you're dealing

00:18:58.176 --> 00:19:00.416 A:middle
with a couple more
properties and methods.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.176 --> 00:19:00.416 A:middle
with a couple more
properties and methods.

00:19:00.956 --> 00:19:01.816 A:middle
But don't worry,

00:19:01.956 --> 00:19:06.346 A:middle
the transition's actually
quite straightforward.

00:19:06.346 --> 00:19:08.846 A:middle
MPMoviePlayerController API can
be grouped into two classes,

00:19:10.126 --> 00:19:12.256 A:middle
view-specific API and
controller-specific API.

00:19:13.116 --> 00:19:16.146 A:middle
In the former case, you use
AVPlayerViewController API.

00:19:16.906 --> 00:19:20.316 A:middle
In the latter case, AVPlayer
and AVPlayerItem API.

00:19:21.276 --> 00:19:23.166 A:middle
Things like MPMovieErrorLog

00:19:23.166 --> 00:19:26.096 A:middle
and MPMovieAccessLog are
actually very [inaudible] object

00:19:26.096 --> 00:19:27.756 A:middle
around AVPlayerItemAccessLog

00:19:27.756 --> 00:19:30.186 A:middle
and AVPlayerItemErrorLog,
for instance.

00:19:31.016 --> 00:19:33.916 A:middle
There are two things which you
should watch out for, though.

00:19:34.326 --> 00:19:37.346 A:middle
As I mentioned before,

00:19:37.346 --> 00:19:39.086 A:middle
AVPlayerViewController's
control style is dynamic,

00:19:39.746 --> 00:19:41.756 A:middle
so there's no setting property.

00:19:42.906 --> 00:19:45.866 A:middle
Also, MPMoviePlayerController
auto plays by default.

00:19:46.956 --> 00:19:47.916 A:middle
AVPlayer does not do that.

00:19:48.726 --> 00:19:53.796 A:middle
If there's anything you cannot
do or do not know how to do

00:19:53.796 --> 00:19:56.256 A:middle
with AVKit and AVFoundation
when switching

00:19:56.256 --> 00:19:58.266 A:middle
over from
MPMoviePlayerController,

00:19:59.346 --> 00:20:01.856 A:middle
please talk to us in the labs or
ask us in the Developer Forums.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.346 --> 00:20:01.856 A:middle
please talk to us in the labs or
ask us in the Developer Forums.

00:20:01.856 --> 00:20:05.886 A:middle
So let's wrap up AVKit for iOS.

00:20:06.916 --> 00:20:10.086 A:middle
In iOS 8 we're bringing
AVKit over from OS X

00:20:10.086 --> 00:20:14.836 A:middle
as our new UI-level media
framework for AVFoundation.

00:20:14.836 --> 00:20:16.136 A:middle
AVPlayerViewController
provides you

00:20:16.136 --> 00:20:17.306 A:middle
with standardized
playback controls

00:20:17.356 --> 00:20:19.736 A:middle
and behavior while
giving you full access

00:20:19.736 --> 00:20:21.666 A:middle
to a powerful, modern
media stack.

00:20:22.476 --> 00:20:24.596 A:middle
So please consider adopting
AVPlayerViewController

00:20:24.596 --> 00:20:25.606 A:middle
in your iOS applications.

00:20:27.046 --> 00:20:33.376 A:middle
Finally, I want to give you a
brief update on AVKit for OS X.

00:20:33.616 --> 00:20:34.946 A:middle
As you saw yesterday
in the Keynote,

00:20:35.336 --> 00:20:38.406 A:middle
OS X Yosemite received a
UI refresh, and as a result

00:20:38.406 --> 00:20:40.436 A:middle
with a brand new UI
for AVKit as well.

00:20:41.196 --> 00:20:43.896 A:middle
If you are already
using AVPlayerView,

00:20:44.036 --> 00:20:46.436 A:middle
your applications will receive
the new UI automatically.

00:20:46.436 --> 00:20:49.406 A:middle
You won't have to
change a single line

00:20:49.406 --> 00:20:50.796 A:middle
of code or update any file.

00:20:51.456 --> 00:20:54.776 A:middle
If you're not using
AVPlayerViewer yet,

00:20:54.776 --> 00:20:55.776 A:middle
this might be a good
time to adopt.

00:20:55.776 --> 00:20:58.316 A:middle
With the introduction of AVKit

00:20:58.316 --> 00:21:01.736 A:middle
for iOS we're also updating some
user interfaces and behaviors


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.316 --> 00:21:01.736 A:middle
for iOS we're also updating some
user interfaces and behaviors

00:21:02.156 --> 00:21:04.796 A:middle
for AVPlayerView to match
AVPlayerViewController.

00:21:05.556 --> 00:21:10.706 A:middle
If you want to learn more
about how to use AVPlayerView,

00:21:11.066 --> 00:21:13.396 A:middle
please check out last
year's "Moving to AVKit

00:21:13.396 --> 00:21:14.616 A:middle
and AVFoundation" session.

00:21:15.256 --> 00:21:20.356 A:middle
And finally, we have
a brand new class

00:21:20.476 --> 00:21:22.286 A:middle
for you this year
in AVKit for OS X.

00:21:23.886 --> 00:21:26.446 A:middle
AVCaptureView provides you
view-level capture facilities

00:21:26.446 --> 00:21:28.066 A:middle
on top of AVFoundation
and AppKit.

00:21:29.566 --> 00:21:31.386 A:middle
I'm not going into any details
in this session, though.

00:21:32.326 --> 00:21:34.506 A:middle
Please come to the Camera
Capture talk tomorrow morning

00:21:35.136 --> 00:21:39.496 A:middle
or ask us in the labs if
this is interesting to you.

00:21:39.616 --> 00:21:42.396 A:middle
And now, let me hand over to
my fellow AVFoundation engineer

00:21:42.766 --> 00:21:44.796 A:middle
to show you how you can
get the most out of AVKit

00:21:44.796 --> 00:21:47.336 A:middle
and AVFoundation in your
iOS and OS X applications.

00:21:48.106 --> 00:21:48.326 A:middle
Thank you.

00:21:49.516 --> 00:21:55.546 A:middle
[ Applause ]

00:21:56.046 --> 00:21:56.576 A:middle
&gt;&gt; Thank you, Stefan.

00:21:57.306 --> 00:21:57.756 A:middle
Good morning.

00:21:58.156 --> 00:22:01.146 A:middle
I'm Shalini Sahoo, an engineer
on the AVFoundation team,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.156 --> 00:22:01.146 A:middle
I'm Shalini Sahoo, an engineer
on the AVFoundation team,

00:22:01.146 --> 00:22:03.906 A:middle
and I'm here to talk to you
today about best practices.

00:22:04.626 --> 00:22:06.836 A:middle
Before we get into the
details of these practices,

00:22:07.346 --> 00:22:08.726 A:middle
for a show of hands, how many

00:22:08.726 --> 00:22:10.666 A:middle
of you have used
AVFoundation before?

00:22:10.666 --> 00:22:12.876 A:middle
Lots of you.

00:22:13.076 --> 00:22:16.836 A:middle
For you, I would hope this
section serves as an update

00:22:16.916 --> 00:22:18.886 A:middle
or refresher on best practices.

00:22:18.886 --> 00:22:22.436 A:middle
As technology evolves with
time, so do best practices.

00:22:23.316 --> 00:22:26.656 A:middle
For those of you who are new to
AVFoundation, I hope this serves

00:22:26.656 --> 00:22:29.106 A:middle
as a guideline on how
to approach our APIs.

00:22:29.106 --> 00:22:32.356 A:middle
Let's get started by talking

00:22:32.356 --> 00:22:34.336 A:middle
about why you would
be interested

00:22:34.376 --> 00:22:35.956 A:middle
in adopting such practices.

00:22:36.126 --> 00:22:37.416 A:middle
What's the motivation?

00:22:37.626 --> 00:22:40.476 A:middle
These practices are designed
to make your application

00:22:40.806 --> 00:22:43.076 A:middle
as efficient and
performant as possible,

00:22:43.306 --> 00:22:45.476 A:middle
making it responsive
to your end-users.

00:22:46.446 --> 00:22:49.356 A:middle
They not only help with the
application's efficiency,

00:22:49.356 --> 00:22:51.056 A:middle
but also help make
your program -

00:22:51.346 --> 00:22:55.376 A:middle
help improve your program
correctness, making it robust

00:22:55.376 --> 00:22:59.256 A:middle
and preventing any sort
of hangs or crashes.

00:22:59.376 --> 00:23:01.466 A:middle
Media applications
sometimes make use


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.376 --> 00:23:01.466 A:middle
Media applications
sometimes make use

00:23:01.466 --> 00:23:03.646 A:middle
of expensive resources
like networks.

00:23:04.076 --> 00:23:05.886 A:middle
These best practices
are designed

00:23:05.946 --> 00:23:08.926 A:middle
so that you can make efficient
use of such resources.

00:23:09.676 --> 00:23:12.006 A:middle
And lastly, your
users will be thankful

00:23:12.056 --> 00:23:14.036 A:middle
for the improvement they
see in their battery life

00:23:14.036 --> 00:23:17.776 A:middle
as your application
uses very little power.

00:23:19.156 --> 00:23:21.336 A:middle
Here is our Modern
Media Stack we looked

00:23:21.336 --> 00:23:23.356 A:middle
at earlier in this talk.

00:23:23.356 --> 00:23:25.076 A:middle
AVFoundation sits
on top of Core Media

00:23:25.416 --> 00:23:26.566 A:middle
and its family of frameworks.

00:23:26.566 --> 00:23:29.606 A:middle
And on top is AVKit,
which provides you

00:23:29.606 --> 00:23:32.826 A:middle
with standard playback controls
with just a few lines of code.

00:23:33.906 --> 00:23:37.276 A:middle
The focus for this section today
is best practices, specifically

00:23:37.276 --> 00:23:40.056 A:middle
in the areas of inspection
and playback.

00:23:40.556 --> 00:23:43.886 A:middle
If you would like to gain more
information about AVFoundation

00:23:43.886 --> 00:23:48.426 A:middle
in general, you can look at
this talk from WWDC 2011 called

00:23:48.426 --> 00:23:50.006 A:middle
"Exploring AVFoundation".

00:23:50.596 --> 00:23:55.646 A:middle
Based on the two major
categories for today,

00:23:56.496 --> 00:23:59.426 A:middle
AVFoundation objects
are modeled separately.

00:23:59.846 --> 00:24:01.656 A:middle
For the first category,
which is inspection,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.846 --> 00:24:01.656 A:middle
For the first category,
which is inspection,

00:24:01.656 --> 00:24:03.696 A:middle
AVAsset is an example.

00:24:05.096 --> 00:24:08.756 A:middle
Within AVAsset, as a client
of this API, you are in charge

00:24:08.756 --> 00:24:11.756 A:middle
of loading values whenever you
need it in your application.

00:24:12.726 --> 00:24:14.066 A:middle
You can initiate I/O.

00:24:14.066 --> 00:24:18.496 A:middle
And when AVFoundation requests
- receives a request for I/O,

00:24:18.936 --> 00:24:21.996 A:middle
we go and do all the loading
work so you can get your value.

00:24:23.406 --> 00:24:26.856 A:middle
The best practice here is to
request values asynchronously.

00:24:27.176 --> 00:24:28.506 A:middle
Why asynchronous loading?

00:24:28.506 --> 00:24:30.206 A:middle
We'll answer that in
just a few slides.

00:24:31.076 --> 00:24:35.146 A:middle
For the other category,
which is playback, AVPlayer

00:24:35.146 --> 00:24:37.126 A:middle
and PlayerItem are the
controller objects.

00:24:37.986 --> 00:24:40.376 A:middle
All you have to do here
is create these items

00:24:40.376 --> 00:24:42.176 A:middle
and initiate playback.

00:24:42.586 --> 00:24:47.276 A:middle
AVFoundation and its underlying
machinery drives the playback

00:24:47.426 --> 00:24:50.556 A:middle
clock so that your users
see video frames on time.

00:24:51.896 --> 00:24:55.076 A:middle
So when you hit Play, we
drive the necessary machinery

00:24:55.076 --> 00:24:57.426 A:middle
so that your user can
experience a smooth playback.

00:24:57.426 --> 00:25:00.716 A:middle
As time progresses,
properties change.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.426 --> 00:25:00.716 A:middle
As time progresses,
properties change.

00:25:00.786 --> 00:25:04.186 A:middle
And if you would like to keep
our application state up-to-date

00:25:04.266 --> 00:25:05.816 A:middle
with the state of
the playback engine,

00:25:06.526 --> 00:25:08.566 A:middle
you can use NS key
value observing

00:25:08.836 --> 00:25:10.326 A:middle
to be notified of such changes.

00:25:10.326 --> 00:25:17.096 A:middle
NS key value observing
is also called NS KVO.

00:25:17.276 --> 00:25:19.876 A:middle
Here's a look at our
object diagram from earlier.

00:25:20.826 --> 00:25:23.826 A:middle
Stefan showed you in a demo
how to use these objects

00:25:23.826 --> 00:25:25.956 A:middle
and create a simple
media application.

00:25:26.446 --> 00:25:29.206 A:middle
Now let's use this as
a roadmap for talking

00:25:29.206 --> 00:25:32.206 A:middle
about best practices
class-by-class starting

00:25:32.206 --> 00:25:33.056 A:middle
with AVAsset.

00:25:33.876 --> 00:25:35.996 A:middle
As I mentioned earlier,

00:25:36.046 --> 00:25:40.766 A:middle
with AVAsset you can use
AVAsynchronousKeyValueLoading,

00:25:40.766 --> 00:25:41.996 A:middle
one of our protocol methods,

00:25:42.436 --> 00:25:45.166 A:middle
which lets you load
properties asynchronously before

00:25:45.246 --> 00:25:46.676 A:middle
accessing them.

00:25:47.536 --> 00:25:49.516 A:middle
For example, if you
are interested

00:25:49.516 --> 00:25:53.006 A:middle
in the precise duration of an
asset, you can ask AVFoundation

00:25:53.006 --> 00:25:56.376 A:middle
for the duration and we download
just about the right amount

00:25:56.376 --> 00:26:00.276 A:middle
of data to be able to tell
you what the duration is.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:56.376 --> 00:26:00.276 A:middle
of data to be able to tell
you what the duration is.

00:26:00.446 --> 00:26:02.436 A:middle
With some file formats
it's straightforward.

00:26:02.436 --> 00:26:04.696 A:middle
And there's some of that
information right overhead.

00:26:05.266 --> 00:26:07.146 A:middle
So we can download just
that piece of data.

00:26:07.796 --> 00:26:09.066 A:middle
But that's not always the case.

00:26:10.776 --> 00:26:12.946 A:middle
Sometimes when you
ask us for duration,

00:26:13.276 --> 00:26:15.716 A:middle
AVFoundation would have to
download the entire contents

00:26:15.716 --> 00:26:17.486 A:middle
of the media file, parse it,

00:26:17.546 --> 00:26:19.666 A:middle
decode it before we
can give you the value

00:26:19.706 --> 00:26:20.886 A:middle
for a precise duration.

00:26:21.716 --> 00:26:25.326 A:middle
You might ask why should
I load asynchronously

00:26:25.326 --> 00:26:28.526 A:middle
if AVFoundation has to do
all this work to load values,

00:26:28.696 --> 00:26:30.426 A:middle
or it takes time to load values?

00:26:31.136 --> 00:26:32.496 A:middle
Well, you really should.

00:26:33.476 --> 00:26:37.406 A:middle
On OS X, if you tried to
access a property synchronously

00:26:37.916 --> 00:26:41.666 A:middle
by accessing your getter
before loading the property,

00:26:41.896 --> 00:26:44.716 A:middle
you would be blocking your
main thread leading to a spin

00:26:44.776 --> 00:26:47.976 A:middle
and making your application
unresponsive to your end-user.

00:26:49.426 --> 00:26:52.026 A:middle
On OS X, however, you
can dispatch this work

00:26:52.106 --> 00:26:54.436 A:middle
to a background queue
to access the getter

00:26:54.436 --> 00:26:56.416 A:middle
and you won't see a spin.

00:26:57.736 --> 00:27:00.526 A:middle
Whereas, on iOS,
loading synchronously


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.736 --> 00:27:00.526 A:middle
Whereas, on iOS,
loading synchronously

00:27:00.526 --> 00:27:03.196 A:middle
from any thread would
block your application

00:27:03.416 --> 00:27:05.106 A:middle
and could lead to
a hang or crash.

00:27:06.576 --> 00:27:08.716 A:middle
This is because, as
you may already know,

00:27:09.036 --> 00:27:12.756 A:middle
on iOS we have a shared
daemon called mediaserver.d,

00:27:13.266 --> 00:27:16.726 A:middle
which services media requests
on behalf of your application.

00:27:18.166 --> 00:27:20.786 A:middle
If you tried to access a
property synchronously,

00:27:21.046 --> 00:27:23.916 A:middle
you would be tying mediaserver.d
or forcing mediaserver.d

00:27:23.916 --> 00:27:26.366 A:middle
to load a value, and
this might take time.

00:27:27.816 --> 00:27:31.056 A:middle
This leads to a timeout and
media services termination.

00:27:32.406 --> 00:27:34.286 A:middle
This not only affects
your application,

00:27:34.546 --> 00:27:36.596 A:middle
but every other application
on the system

00:27:36.866 --> 00:27:38.416 A:middle
which relies on media services.

00:27:39.006 --> 00:27:43.036 A:middle
So please don't do that.

00:27:43.266 --> 00:27:44.906 A:middle
Now that we looked
at a good reason

00:27:44.906 --> 00:27:46.996 A:middle
to use
AVAsynchronousKeyValueLoading,

00:27:46.996 --> 00:27:48.686 A:middle
there are two more
things to remember.

00:27:49.696 --> 00:27:52.746 A:middle
Firstly, only load those
properties you anticipate

00:27:52.746 --> 00:27:54.026 A:middle
to use in your application.

00:27:54.706 --> 00:27:57.566 A:middle
Every extra property
means more work.

00:27:57.566 --> 00:27:59.656 A:middle
If you intend to not use
a particular property,

00:27:59.826 --> 00:28:01.626 A:middle
do not encode the wasted work.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.826 --> 00:28:01.626 A:middle
do not encode the wasted work.

00:28:01.626 --> 00:28:06.206 A:middle
And the second thing is,
if you anticipate the use

00:28:06.206 --> 00:28:08.696 A:middle
of a particular property
later in your application,

00:28:09.026 --> 00:28:10.306 A:middle
you can still request all

00:28:10.306 --> 00:28:14.676 A:middle
of them together using
loadValuesAsynchronouslyForKeys

00:28:14.826 --> 00:28:15.906 A:middle
and completionHandler.

00:28:16.336 --> 00:28:17.946 A:middle
You can parse in
an array of keys

00:28:18.206 --> 00:28:20.556 A:middle
which AVFoundation
will load together

00:28:20.556 --> 00:28:24.316 A:middle
and your completionHandler is
called once you are done loading

00:28:24.806 --> 00:28:27.476 A:middle
these properties.

00:28:27.476 --> 00:28:30.196 A:middle
You no longer have to load
tracks before playback begins.

00:28:30.696 --> 00:28:32.616 A:middle
This has changed since
the last time we talked

00:28:32.616 --> 00:28:33.646 A:middle
about best practices.

00:28:34.056 --> 00:28:36.256 A:middle
In fact, this has
changed since iOS 5.

00:28:37.266 --> 00:28:39.706 A:middle
You really only need to load
those properties you would

00:28:39.706 --> 00:28:41.566 A:middle
directly use in your
application.

00:28:43.246 --> 00:28:43.926 A:middle
Now let's look

00:28:43.926 --> 00:28:46.296 A:middle
at how
AVAsynchronousKeyValueLoading

00:28:46.336 --> 00:28:48.016 A:middle
translates into code.

00:28:48.016 --> 00:28:51.686 A:middle
In this particular
example, I'm interested

00:28:51.686 --> 00:28:53.676 A:middle
in loading the property
"playable".

00:28:54.226 --> 00:28:57.126 A:middle
I pass in an array with
just playable in it

00:28:57.126 --> 00:28:58.706 A:middle
and I provide a completion
handler.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.536 --> 00:29:03.006 A:middle
In my completion
handler I first check

00:29:03.066 --> 00:29:04.946 A:middle
to make sure the
property is loaded.

00:29:04.946 --> 00:29:06.886 A:middle
Sometimes things go wrong,
like if you are relying

00:29:06.886 --> 00:29:10.546 A:middle
on the network resource and your
user device goes out of range,

00:29:10.546 --> 00:29:12.666 A:middle
asset loading can fail.

00:29:12.666 --> 00:29:15.326 A:middle
So this is a good place
to check for such errors.

00:29:16.456 --> 00:29:20.356 A:middle
Once you get the status, you
can see if it's already loaded.

00:29:20.356 --> 00:29:24.686 A:middle
And then you can update
your UI for the asset or,

00:29:24.806 --> 00:29:28.416 A:middle
if there's a failure, you can
report an appropriate error

00:29:28.566 --> 00:29:29.546 A:middle
to your end-user.

00:29:31.256 --> 00:29:34.606 A:middle
One more thing to remember
with completion handlers is,

00:29:34.916 --> 00:29:37.876 A:middle
if another module has
already loaded the keys you're

00:29:37.876 --> 00:29:40.486 A:middle
interested in, your
completion handler is called

00:29:40.486 --> 00:29:41.416 A:middle
back immediately.

00:29:42.286 --> 00:29:43.696 A:middle
Say, in this example,

00:29:43.696 --> 00:29:46.846 A:middle
if AVPlayer has already
loaded the playable property,

00:29:46.846 --> 00:29:49.686 A:middle
your completion handler
is called synchronously

00:29:49.686 --> 00:29:51.366 A:middle
on the same thread.

00:29:52.106 --> 00:29:55.196 A:middle
If you have code which relies
on loadValuesAsynchronously

00:29:55.226 --> 00:29:56.996 A:middle
for keys to return immediately,

00:29:57.226 --> 00:30:00.586 A:middle
that might not happen till the
completion handler has executed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:57.226 --> 00:30:00.586 A:middle
that might not happen till the
completion handler has executed.

00:30:01.126 --> 00:30:03.556 A:middle
So that's something to keep
in mind to prevent a deadlock.

00:30:03.556 --> 00:30:07.946 A:middle
To list the best
practices for AVAsset,

00:30:08.976 --> 00:30:10.876 A:middle
load only those keys
you are interesting

00:30:10.876 --> 00:30:12.266 A:middle
in using in your application.

00:30:12.266 --> 00:30:15.836 A:middle
You can use
AVAsynchronousKeyValueLoading

00:30:15.906 --> 00:30:18.266 A:middle
to list all these keys
together in an array.

00:30:18.266 --> 00:30:20.396 A:middle
And you can provide
a completion handler,

00:30:20.396 --> 00:30:22.886 A:middle
which is called once we are
done loading these properties.

00:30:23.796 --> 00:30:24.976 A:middle
In your completion handler,

00:30:25.046 --> 00:30:27.216 A:middle
check to make sure the
properties are loaded before you

00:30:27.426 --> 00:30:27.966 A:middle
access them.

00:30:29.126 --> 00:30:32.496 A:middle
And lastly, be prepared
for asynchronous callback.

00:30:32.496 --> 00:30:34.636 A:middle
If someone else has
already loaded the property

00:30:34.636 --> 00:30:36.696 A:middle
on your behalf, your
thread is called -

00:30:36.836 --> 00:30:39.376 A:middle
your completion handler is
called back immediately.

00:30:40.066 --> 00:30:43.166 A:middle
Those were best practices
for AVAsset.

00:30:43.766 --> 00:30:46.066 A:middle
Now let's look at
AVPlayer and AVPlayerItem.

00:30:46.066 --> 00:30:51.046 A:middle
As I mentioned earlier, with
AVPlayer and AVPlayerItem,

00:30:51.096 --> 00:30:53.366 A:middle
the playback engine on the -

00:30:53.406 --> 00:30:56.766 A:middle
the underlying playback engine
drives the machinery necessary

00:30:56.766 --> 00:30:59.086 A:middle
so that your user sees
video frames on time.

00:30:59.736 --> 00:31:03.616 A:middle
So all you have to do is use
NSKeyValueObserving or KVO


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.736 --> 00:31:03.616 A:middle
So all you have to do is use
NSKeyValueObserving or KVO

00:31:03.766 --> 00:31:05.306 A:middle
to be notified of such changes

00:31:05.306 --> 00:31:07.756 A:middle
so that you can update
your application state.

00:31:08.316 --> 00:31:09.306 A:middle
Here's an example.

00:31:09.986 --> 00:31:13.096 A:middle
If you have a progressive
download item on an HTTP server,

00:31:14.266 --> 00:31:17.696 A:middle
as AVFoundation downloads
some data, you get a callback

00:31:17.896 --> 00:31:18.866 A:middle
with the loaded range.

00:31:18.906 --> 00:31:22.146 A:middle
And as we buffer more data,
you get yet another callback

00:31:22.146 --> 00:31:24.066 A:middle
with the updated value
for the loaded range.

00:31:24.746 --> 00:31:28.526 A:middle
Let's take an example of
where KVO might come in handy,

00:31:28.926 --> 00:31:30.176 A:middle
is playback interruption.

00:31:31.606 --> 00:31:35.736 A:middle
If your user's device receives
a phone call or a FaceTime call

00:31:35.966 --> 00:31:38.286 A:middle
when your application is
playing a particular file,

00:31:38.806 --> 00:31:40.486 A:middle
your playback is interrupted

00:31:41.006 --> 00:31:42.676 A:middle
so that your user can
answer their call.

00:31:42.676 --> 00:31:47.656 A:middle
In this case, if you're using
KVO on the player's rate,

00:31:47.656 --> 00:31:49.696 A:middle
you would see it
transition to zero.

00:31:50.106 --> 00:31:54.496 A:middle
This is a good way for you to be
notified of such interruptions

00:31:54.496 --> 00:31:56.136 A:middle
so that you do not end

00:31:56.136 --> 00:31:58.416 A:middle
up waiting endlessly
for playback to end.

00:31:59.166 --> 00:32:03.496 A:middle
And the last example here
is media services reset.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.166 --> 00:32:03.496 A:middle
And the last example here
is media services reset.

00:32:03.496 --> 00:32:06.556 A:middle
As I mentioned earlier,
if your application

00:32:06.556 --> 00:32:09.216 A:middle
or some other application
wasn't paying attention

00:32:09.216 --> 00:32:11.806 A:middle
to AVAsynchronousKeyValueLoading
and tried

00:32:11.866 --> 00:32:13.926 A:middle
to access a property
synchronously,

00:32:14.256 --> 00:32:16.386 A:middle
you could have forced
mediaserver.d to terminate.

00:32:17.056 --> 00:32:19.236 A:middle
This affects your
application, too.

00:32:20.056 --> 00:32:21.486 A:middle
Your media services are reset.

00:32:21.486 --> 00:32:22.976 A:middle
And when this happens,

00:32:23.346 --> 00:32:26.076 A:middle
your player item status
transitions to failed.

00:32:26.526 --> 00:32:27.906 A:middle
And this is a good place for you

00:32:27.906 --> 00:32:30.786 A:middle
to throw away all your old
objects and rebuild your player

00:32:30.786 --> 00:32:33.606 A:middle
and PlayerItem to
continue playback.

00:32:37.426 --> 00:32:41.446 A:middle
Let's look at an example in code
where KVO might come in handy.

00:32:42.236 --> 00:32:46.156 A:middle
In this example I
would like to decide

00:32:46.156 --> 00:32:48.846 A:middle
when to show audio-only
UI in my application.

00:32:49.326 --> 00:32:51.616 A:middle
Here I first create a
player item with an asset.

00:32:52.916 --> 00:32:55.516 A:middle
Then I try to access the
track's property on item asset,

00:32:55.516 --> 00:32:57.166 A:middle
particularly of type video.

00:32:57.906 --> 00:33:00.676 A:middle
And then I check to make
sure that the video tracks -


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.906 --> 00:33:00.676 A:middle
And then I check to make
sure that the video tracks -

00:33:00.776 --> 00:33:03.516 A:middle
or there are no video
tracks before I update my UI

00:33:03.556 --> 00:33:05.226 A:middle
to audio-only.

00:33:06.356 --> 00:33:08.716 A:middle
This is not completely correct.

00:33:08.716 --> 00:33:12.096 A:middle
Firstly, we're trying to access
the tracks property on an asset

00:33:12.326 --> 00:33:13.916 A:middle
without prior loading it.

00:33:13.916 --> 00:33:15.256 A:middle
This could block
your main thread

00:33:15.256 --> 00:33:17.276 A:middle
and make your application
unresponsive.

00:33:17.386 --> 00:33:20.386 A:middle
And the second thing here
is an assumption that lack

00:33:20.386 --> 00:33:22.156 A:middle
of video tracks means
audio-only.

00:33:22.876 --> 00:33:24.886 A:middle
You can have non-video
visual tracks

00:33:25.146 --> 00:33:26.826 A:middle
like subtitles in your movies.

00:33:28.316 --> 00:33:31.336 A:middle
Now let's look at how I
can do this using KVO.

00:33:32.116 --> 00:33:33.626 A:middle
I add myself as an observer

00:33:33.626 --> 00:33:36.526 A:middle
for the presentation
size on a player item.

00:33:36.526 --> 00:33:40.236 A:middle
And once AVFoundation is done
loading the presentation size

00:33:40.346 --> 00:33:44.116 A:middle
and your observation callback,
first check to make sure

00:33:44.116 --> 00:33:46.396 A:middle
that your presentation
size is zero by zero.

00:33:46.576 --> 00:33:47.436 A:middle
This way you know none

00:33:47.436 --> 00:33:49.926 A:middle
of the tracks have a
non-zero presentation size.

00:33:49.926 --> 00:33:56.726 A:middle
And after that, make sure you
have at least one audio track.

00:33:57.126 --> 00:34:00.156 A:middle
To do that, you can look at
the underlying AVAsset tracks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.126 --> 00:34:00.156 A:middle
To do that, you can look at
the underlying AVAsset tracks

00:34:00.726 --> 00:34:03.096 A:middle
and make sure that there's
at least one of them

00:34:03.096 --> 00:34:06.226 A:middle
which has an
AVMediaCharacteristicAudible.

00:34:06.746 --> 00:34:09.646 A:middle
This is necessary because
sometimes you can have movie

00:34:09.646 --> 00:34:13.266 A:middle
files which have non - or
which have zero by zero

00:34:13.266 --> 00:34:14.485 A:middle
for the presentation size

00:34:14.755 --> 00:34:17.556 A:middle
but no audio tracks,
like timecode tracks.

00:34:18.275 --> 00:34:21.886 A:middle
The KVO recipe we just used,

00:34:22.096 --> 00:34:24.106 A:middle
we first create a player
item with an asset.

00:34:24.976 --> 00:34:27.565 A:middle
Then we register for key
value observing a property

00:34:27.565 --> 00:34:28.166 A:middle
of interest.

00:34:28.786 --> 00:34:31.606 A:middle
After that, we associate the
player item with the player.

00:34:31.606 --> 00:34:34.516 A:middle
And in your observation
callback, you can look

00:34:34.516 --> 00:34:37.896 A:middle
at the change dictionary to
know what the new value is.

00:34:38.926 --> 00:34:41.326 A:middle
This is the recipe when you
work with these objects.

00:34:42.156 --> 00:34:43.686 A:middle
But there are a few
more things to remember

00:34:44.235 --> 00:34:46.696 A:middle
when you're interacting with
these objects in general.

00:34:47.406 --> 00:34:50.516 A:middle
First, do not assume the
order in which events occur.

00:34:51.235 --> 00:34:54.186 A:middle
As soon as you associate a
player item with a player,

00:34:54.186 --> 00:34:57.366 A:middle
AVFoundation starts its
underlying machinery

00:34:57.366 --> 00:35:00.386 A:middle
so that your user can
experience a smooth playback.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.366 --> 00:35:00.386 A:middle
so that your user can
experience a smooth playback.

00:35:00.876 --> 00:35:04.756 A:middle
On iOS 7 we made an optimization
which changes the status

00:35:04.826 --> 00:35:06.696 A:middle
to ready-to-play
much more quickly.

00:35:07.486 --> 00:35:09.396 A:middle
So if you were to add
yourself as an observer

00:35:09.396 --> 00:35:12.026 A:middle
after you create a
player with a player item,

00:35:12.346 --> 00:35:14.056 A:middle
you could miss this
vital notification.

00:35:15.466 --> 00:35:17.486 A:middle
To fix this, you
can add yourself

00:35:17.486 --> 00:35:20.026 A:middle
as an observer before
associating a player item

00:35:20.026 --> 00:35:21.016 A:middle
with a player.

00:35:21.356 --> 00:35:24.196 A:middle
That way you won't
miss any notifications.

00:35:25.256 --> 00:35:27.616 A:middle
Or, sometimes in
your applications,

00:35:28.096 --> 00:35:30.626 A:middle
you might have a particular
scenario where you would

00:35:30.626 --> 00:35:34.546 A:middle
like to add yourself as an
observer only after an event,

00:35:34.956 --> 00:35:36.606 A:middle
say, if a user presses a button.

00:35:37.256 --> 00:35:40.886 A:middle
In such cases, you can
use NSKeyValueObserving

00:35:40.886 --> 00:35:41.806 A:middle
OptionInitial.

00:35:42.396 --> 00:35:44.906 A:middle
This flag lets you
access the initial value

00:35:44.906 --> 00:35:46.086 A:middle
as well as the new value.

00:35:46.916 --> 00:35:50.626 A:middle
The second thing to remember is

00:35:50.666 --> 00:35:54.216 A:middle
that AVFoundation serializes
the access to AVPlayer

00:35:54.216 --> 00:35:55.926 A:middle
and PlayerItem on
the main queue.

00:35:56.716 --> 00:36:01.826 A:middle
It's safe to access and register
and unregister for observers


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:56.716 --> 00:36:01.826 A:middle
It's safe to access and register
and unregister for observers

00:36:02.026 --> 00:36:03.516 A:middle
for these objects
on the main queue.

00:36:04.276 --> 00:36:07.016 A:middle
This was done to prevent
any possible race conditions

00:36:07.336 --> 00:36:09.976 A:middle
as multiple modules are
interacting with these objects.

00:36:10.056 --> 00:36:12.776 A:middle
And the main queue
was a natural choice,

00:36:12.776 --> 00:36:15.276 A:middle
as most of these
observation callbacks lead

00:36:15.276 --> 00:36:18.326 A:middle
to your application's
interaction with UIKit objects,

00:36:18.426 --> 00:36:19.766 A:middle
which also happen
on the main queue.

00:36:20.326 --> 00:36:23.426 A:middle
However, this does not mean

00:36:23.426 --> 00:36:25.336 A:middle
that we are doing our
work on our main queue.

00:36:25.336 --> 00:36:27.736 A:middle
We are not affecting the
end-user responsiveness.

00:36:28.386 --> 00:36:30.686 A:middle
All our loading and
playback-related work happens

00:36:30.686 --> 00:36:31.606 A:middle
on the background queue.

00:36:31.826 --> 00:36:34.706 A:middle
We only serialize the access to
these objects on the main queue.

00:36:36.226 --> 00:36:38.836 A:middle
If in your application you
have a particular scenario

00:36:39.206 --> 00:36:41.696 A:middle
for which you think this
requirement is a hindrance,

00:36:42.246 --> 00:36:43.816 A:middle
please come talk
to us in our labs

00:36:44.526 --> 00:36:45.956 A:middle
or file enhancement requests.

00:36:46.436 --> 00:36:47.966 A:middle
We are really interested
in listening

00:36:47.966 --> 00:36:48.956 A:middle
to your feedback on this.

00:36:49.646 --> 00:36:53.836 A:middle
And the last thing to
remember is wherever possible,

00:36:54.256 --> 00:36:57.166 A:middle
set up your player item before
associating it with the player.

00:36:57.166 --> 00:37:01.056 A:middle
As I mentioned earlier, as
soon as you create a player,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:57.166 --> 00:37:01.056 A:middle
As I mentioned earlier, as
soon as you create a player,

00:37:01.056 --> 00:37:03.226 A:middle
AVFoundation starts
driving its machinery

00:37:03.226 --> 00:37:05.396 A:middle
so that we can get
ready for playback.

00:37:06.226 --> 00:37:08.106 A:middle
For example, if you
have a streaming item,

00:37:08.106 --> 00:37:11.296 A:middle
as soon as you create a
player, we go over the network

00:37:11.296 --> 00:37:13.796 A:middle
and start downloading data
from the default time.

00:37:13.796 --> 00:37:17.706 A:middle
And after that, if you were
to issue a seek to time,

00:37:18.016 --> 00:37:20.476 A:middle
we would have to throw away
all the data we downloaded

00:37:20.786 --> 00:37:23.596 A:middle
and start reloading our
caches to begin playback.

00:37:24.676 --> 00:37:26.916 A:middle
In order to prevent
that wherever possible,

00:37:27.166 --> 00:37:30.416 A:middle
you can always configure your
player item before associating

00:37:30.416 --> 00:37:32.416 A:middle
it with the player.

00:37:32.416 --> 00:37:34.476 A:middle
Here's a few examples
of the kind

00:37:34.476 --> 00:37:36.136 A:middle
of configurations you can do.

00:37:36.476 --> 00:37:39.456 A:middle
This is definitely not the
exhaustive list, but just a few.

00:37:40.236 --> 00:37:41.116 A:middle
You can add outputs.

00:37:42.466 --> 00:37:45.016 A:middle
You can select media options
like audible and legible.

00:37:46.236 --> 00:37:49.096 A:middle
You can set forward and
reverse playback end times

00:37:49.096 --> 00:37:49.896 A:middle
or seek to time.

00:37:50.416 --> 00:37:52.416 A:middle
And after doing all
those changes,

00:37:52.836 --> 00:37:57.746 A:middle
I can associate my player
item with the player.

00:37:57.946 --> 00:38:01.226 A:middle
In summary, for AVPlayer
and PlayerItem,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.946 --> 00:38:01.226 A:middle
In summary, for AVPlayer
and PlayerItem,

00:38:01.226 --> 00:38:04.516 A:middle
use NSKeyValueObserving
to be notified of changes

00:38:04.516 --> 00:38:08.316 A:middle
as the playback engine
is driving the clock

00:38:08.456 --> 00:38:11.306 A:middle
so that your user can
experience a smooth playback.

00:38:12.506 --> 00:38:15.336 A:middle
Do not rely on the order
in which events occur.

00:38:15.486 --> 00:38:17.116 A:middle
If you really need
a particular value,

00:38:17.166 --> 00:38:19.426 A:middle
you can always use
NSKeyValueObserving

00:38:19.426 --> 00:38:21.836 A:middle
OptionInitial or add yourself

00:38:21.836 --> 00:38:25.646 A:middle
as observers before
you create the player.

00:38:25.826 --> 00:38:28.546 A:middle
Please serialize your access
to Player and PlayerItem

00:38:28.546 --> 00:38:31.296 A:middle
on the main queue to avoid
any possible race conditions.

00:38:31.646 --> 00:38:34.906 A:middle
And lastly, wherever possible,
set up your player item

00:38:34.906 --> 00:38:39.036 A:middle
with all configurations
before creating a player.

00:38:39.206 --> 00:38:42.426 A:middle
Those were the best practices
for AVPlayer and PlayerItem.

00:38:42.996 --> 00:38:44.136 A:middle
Most of the things we talked

00:38:44.136 --> 00:38:47.276 A:middle
about AVPlayer also
apply to AVQueuePlayer.

00:38:47.986 --> 00:38:49.616 A:middle
As you've seen earlier
in this talk,

00:38:49.616 --> 00:38:52.066 A:middle
AVQueuePlayer takes a
list of player items.

00:38:53.646 --> 00:38:56.576 A:middle
If in your application you
have an inspector window

00:38:56.896 --> 00:39:00.196 A:middle
for which you would like to
access a set of keys on each


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:56.896 --> 00:39:00.196 A:middle
for which you would like to
access a set of keys on each

00:39:00.196 --> 00:39:03.956 A:middle
of the player items, you can
use AVPlayerItem's convenient

00:39:03.956 --> 00:39:07.286 A:middle
initializer, which lets
you parse a set of keys

00:39:07.686 --> 00:39:12.836 A:middle
which AVQueuePlayer or AVPlayer
would load on your behalf.

00:39:12.996 --> 00:39:15.716 A:middle
You have an AVQueuePlayer
with a list of items.

00:39:16.096 --> 00:39:18.836 A:middle
And if you initialize each of
these items with a set of keys,

00:39:18.836 --> 00:39:22.826 A:middle
as AVQueuePlayer is getting
ready to initiate playback

00:39:22.986 --> 00:39:26.596 A:middle
for the particular item, we
load these keys in combination

00:39:26.596 --> 00:39:28.676 A:middle
with the keys we
require for playback.

00:39:28.676 --> 00:39:32.216 A:middle
And as playback progresses
and we reach the next item,

00:39:32.566 --> 00:39:34.706 A:middle
we load the second set
of keys you requested

00:39:34.706 --> 00:39:35.746 A:middle
for that particular item.

00:39:36.386 --> 00:39:39.796 A:middle
This is valid for
AVPlayer as well

00:39:39.796 --> 00:39:41.516 A:middle
if you are using
replaceCurrentItem

00:39:41.516 --> 00:39:42.726 A:middle
with playerItem.

00:39:43.146 --> 00:39:45.326 A:middle
You can use this as an alternate

00:39:45.326 --> 00:39:47.436 A:middle
to
AVAsynchronousKeyValueLoading.

00:39:47.666 --> 00:39:49.916 A:middle
Instead of using
AVAsynchronousKeyValueLoading

00:39:49.916 --> 00:39:52.486 A:middle
for each of your asset,
you can initialize each

00:39:52.486 --> 00:39:54.446 A:middle
of the player items
and we'll take care

00:39:54.446 --> 00:39:55.506 A:middle
of loading the properties.

00:39:55.626 --> 00:39:57.766 A:middle
And if you are using
this instead

00:39:57.766 --> 00:39:59.746 A:middle
of
AVAsynchronousKeyValueLoading,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.156 --> 00:40:03.746 A:middle
the best place to access
your properties would be

00:40:03.746 --> 00:40:06.516 A:middle
to KVO the playerItem status.

00:40:06.716 --> 00:40:09.096 A:middle
When you receive an observation
callback for the status,

00:40:10.376 --> 00:40:13.296 A:middle
and if the status
is ready to play,

00:40:13.296 --> 00:40:16.196 A:middle
your asset keys would
either be loaded or failed.

00:40:16.366 --> 00:40:18.676 A:middle
So then you can use
statusOfValueForKey

00:40:18.986 --> 00:40:20.346 A:middle
to access these properties.

00:40:21.026 --> 00:40:25.096 A:middle
And the last thing to
remember with AVQueuePlayer is

00:40:25.096 --> 00:40:27.686 A:middle
if AVFoundation encounters
an error

00:40:27.816 --> 00:40:30.566 A:middle
with a particular player item,
we'll skip that item and move

00:40:30.566 --> 00:40:33.906 A:middle
on so that your user experiences
uninterrupted playback.

00:40:35.276 --> 00:40:38.456 A:middle
However, if you would like to
be notified of such errors,

00:40:38.456 --> 00:40:41.846 A:middle
you can NSKeyValueObserve
AVQueuePlayer's current

00:40:41.846 --> 00:40:42.556 A:middle
item status.

00:40:47.046 --> 00:40:49.456 A:middle
Those were some tips
for using AVQueuePlayer.

00:40:49.456 --> 00:40:52.306 A:middle
Lastly, let's talk about
AVPlayerViewController.

00:40:52.306 --> 00:40:57.366 A:middle
With AVPlayerViewController on
iOS or AVPlayerView on OS X,

00:40:57.476 --> 00:41:00.236 A:middle
it's a good idea to
animate your view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.476 --> 00:41:00.236 A:middle
it's a good idea to
animate your view

00:41:00.236 --> 00:41:02.216 A:middle
into your view hierarchy only

00:41:02.216 --> 00:41:04.336 A:middle
when there's some viable
content to present.

00:41:04.956 --> 00:41:07.256 A:middle
Only if there's some
video frames you can show.

00:41:07.256 --> 00:41:11.356 A:middle
And to do that, you can key
value observeReadyForDisplay.

00:41:11.616 --> 00:41:14.276 A:middle
On iOS, you would observe on
the player view controller,

00:41:14.276 --> 00:41:16.436 A:middle
whereas on OS X you
observe on the player view.

00:41:16.516 --> 00:41:19.526 A:middle
You add yourself as an
observer for ready for display.

00:41:20.546 --> 00:41:22.816 A:middle
And in your observation
callback, you can check

00:41:22.816 --> 00:41:26.046 A:middle
to make sure ready for display
is Yes before animating your

00:41:26.046 --> 00:41:28.826 A:middle
view or before, like
showing your view.

00:41:29.356 --> 00:41:36.666 A:middle
New in iOS 8 and OS 10.10
is contentOverlayView.

00:41:37.576 --> 00:41:40.666 A:middle
With contentOverlayView, you
can do your custom drawings

00:41:40.666 --> 00:41:42.836 A:middle
and renderings over
the player view.

00:41:43.526 --> 00:41:45.166 A:middle
The contentOverlayView
is guaranteed

00:41:45.166 --> 00:41:47.246 A:middle
to have similar dimensions
as the player view.

00:41:47.246 --> 00:41:50.466 A:middle
And if you would like to
place your drawings relative

00:41:50.466 --> 00:41:53.816 A:middle
to the video frame, you can
access the videoBounds property

00:41:54.036 --> 00:41:55.236 A:middle
on the player view controller.

00:41:56.766 --> 00:41:59.196 A:middle
Here is a screenshot of
the demo we saw earlier.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.066 --> 00:42:01.236 A:middle
The digital volume meter

00:42:01.236 --> 00:42:04.536 A:middle
on the bottom right was rendered
using contentOverlayView.

00:42:04.846 --> 00:42:10.156 A:middle
And lastly, for chapter
navigation, as you may have seen

00:42:10.156 --> 00:42:12.936 A:middle
in QuickTime Player,
when you seek

00:42:12.936 --> 00:42:15.706 A:middle
through chapters using the
appropriate keyboard shortcuts

00:42:15.706 --> 00:42:18.916 A:middle
or menu items, QuickTime Player
briefly flashes the chapter

00:42:18.916 --> 00:42:19.666 A:middle
number and title.

00:42:19.666 --> 00:42:22.826 A:middle
And if you would like
to get similar behavior

00:42:22.826 --> 00:42:25.166 A:middle
in your applications,
which we highly recommend,

00:42:25.716 --> 00:42:29.546 A:middle
you can use this API of
AVPlayerView, This is only

00:42:29.546 --> 00:42:32.206 A:middle
on OS X, to flash
chapter number and title.

00:42:33.616 --> 00:42:36.526 A:middle
Ideally, you would do this
after the seek has completed

00:42:36.526 --> 00:42:38.256 A:middle
so you can place this code

00:42:38.256 --> 00:42:40.086 A:middle
in your completion
handler for seek to time.

00:42:40.236 --> 00:42:45.966 A:middle
So the best practices for
PlayerViewController is

00:42:46.026 --> 00:42:47.826 A:middle
to observe ready
for display to know

00:42:47.826 --> 00:42:49.716 A:middle
when to present your
view onscreen

00:42:49.716 --> 00:42:52.726 A:middle
so that your user doesn't
have to look at black screen.

00:42:54.216 --> 00:42:57.096 A:middle
Second, then we saw how to
use content overlay view

00:42:57.096 --> 00:42:59.526 A:middle
to do custom rendering
over the player view.

00:42:59.776 --> 00:43:02.296 A:middle
In Z-order, the player
view is below and above


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.776 --> 00:43:02.296 A:middle
In Z-order, the player
view is below and above

00:43:02.296 --> 00:43:05.986 A:middle
that is content overlay view
and the controls sit on top.

00:43:06.506 --> 00:43:10.376 A:middle
And lastly, we saw how
to flash chapter number

00:43:10.476 --> 00:43:14.796 A:middle
and title during chapter
navigation using AVPlayerView.

00:43:15.956 --> 00:43:19.856 A:middle
That brings us to the end of
our roadmap for best practices.

00:43:20.496 --> 00:43:23.826 A:middle
Let's wrap up.

00:43:24.086 --> 00:43:27.936 A:middle
We looked at why it's important
to load values asynchronously

00:43:27.966 --> 00:43:28.606 A:middle
and how to do

00:43:28.606 --> 00:43:31.066 A:middle
that
AVAsynchronousKeyValueLoading

00:43:31.116 --> 00:43:31.846 A:middle
for AVAsset.

00:43:32.956 --> 00:43:35.616 A:middle
With AVPlayer and
PlayerItem, all you have

00:43:35.616 --> 00:43:39.396 A:middle
to do is use NSKeyValueObserving
to be notified of changes.

00:43:39.396 --> 00:43:43.766 A:middle
And we looked at some tips
for using AVQueuePlayer.

00:43:44.786 --> 00:43:48.146 A:middle
We talked about how to
observe readyForDisplay to know

00:43:48.146 --> 00:43:50.546 A:middle
when to present your view
into your view hierarchy.

00:43:50.596 --> 00:43:54.106 A:middle
And then we looked at how to
customize your player view

00:43:54.396 --> 00:43:56.796 A:middle
by custom drawings in
content overlay view

00:43:56.976 --> 00:44:00.376 A:middle
and displaying chapter
numbers during navigation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:56.976 --> 00:44:00.376 A:middle
and displaying chapter
numbers during navigation.

00:44:01.346 --> 00:44:04.286 A:middle
That was best practices
for AVFoundation and AVKit,

00:44:04.286 --> 00:44:05.536 A:middle
our last topic for today.

00:44:07.116 --> 00:44:09.326 A:middle
In summary, AVKit
is now available

00:44:09.326 --> 00:44:11.306 A:middle
on iOS along with OS X.

00:44:12.466 --> 00:44:15.146 A:middle
AVKit provides you with
standard playback controls

00:44:15.146 --> 00:44:16.446 A:middle
with just a few lines of code.

00:44:17.576 --> 00:44:19.596 A:middle
If you've been using
AVKit on OS X,

00:44:20.106 --> 00:44:22.426 A:middle
you get the UI refresh for free.

00:44:22.426 --> 00:44:23.906 A:middle
You wouldn't have
to change anything.

00:44:23.906 --> 00:44:26.676 A:middle
We looked at the demo,

00:44:26.676 --> 00:44:29.396 A:middle
which shows how powerful
AVFoundation can be

00:44:29.396 --> 00:44:32.936 A:middle
in combination with AVKit to
provide you with an application

00:44:32.936 --> 00:44:34.436 A:middle
with standard playback controls

00:44:34.436 --> 00:44:37.236 A:middle
and to add effects
and visualizations.

00:44:37.936 --> 00:44:44.116 A:middle
We highly recommend you to adopt
our Modern Media frameworks

00:44:44.166 --> 00:44:47.536 A:middle
and to audit your current
applications to see

00:44:47.536 --> 00:44:50.716 A:middle
if they can stand to benefit by
adopting these best practices.

00:44:52.196 --> 00:44:55.816 A:middle
For more information, you can
contact our Evangelism Team

00:44:56.506 --> 00:44:59.326 A:middle
or visit or check out
our programming guide

00:44:59.326 --> 00:45:00.596 A:middle
on our developer Website,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.326 --> 00:45:00.596 A:middle
on our developer Website,

00:45:00.596 --> 00:45:02.646 A:middle
which covers both
AVFoundation and AVKit.

00:45:03.626 --> 00:45:06.026 A:middle
You can also consult us
on our developer forums.

00:45:06.776 --> 00:45:12.786 A:middle
We have some related sessions
lined up for you for the rest

00:45:12.786 --> 00:45:15.726 A:middle
of this week starting with
one this afternoon called

00:45:15.776 --> 00:45:18.096 A:middle
"Harnessing Metadata
in Audiovisual Media".

00:45:19.286 --> 00:45:21.856 A:middle
Tomorrow morning we
show you Camera Capture

00:45:21.856 --> 00:45:24.736 A:middle
with all its new features
and AVCaptureView,

00:45:24.736 --> 00:45:26.246 A:middle
we mentioned earlier
in this talk.

00:45:27.016 --> 00:45:30.326 A:middle
And on Thursday, we show you
how you can directly access our

00:45:30.326 --> 00:45:32.186 A:middle
media encoders and decoders.

00:45:33.356 --> 00:45:33.696 A:middle
That's it.

00:45:33.696 --> 00:45:35.096 A:middle
Thank you for coming.

00:45:35.176 --> 00:45:36.246 A:middle
Enjoy the rest of your week.

00:45:37.516 --> 00:45:42.480 A:middle
[ Applause ]

