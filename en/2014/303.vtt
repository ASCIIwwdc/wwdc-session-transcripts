WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.576 --> 00:00:12.426 A:middle
&gt;&gt; Good afternoon.

00:00:14.516 --> 00:00:18.706 A:middle
[ Applause ]

00:00:19.206 --> 00:00:19.716 A:middle
Thanks. Hi.

00:00:19.906 --> 00:00:21.166 A:middle
My name is James Wilson.

00:00:21.166 --> 00:00:23.336 A:middle
I'm an Engineering Manager
and one of the things

00:00:23.336 --> 00:00:25.866 A:middle
that my team works
on is the frameworks

00:00:25.866 --> 00:00:29.396 A:middle
that power the App Store
and the iBook store in OS X,

00:00:29.396 --> 00:00:31.186 A:middle
which of course includes
StoreKit.

00:00:32.326 --> 00:00:36.366 A:middle
And we've run a StoreKit session
at WWDC over the last few years,

00:00:36.816 --> 00:00:38.956 A:middle
pretty much since
we debuted StoreKit

00:00:38.956 --> 00:00:40.026 A:middle
for doing In-App Purchases.

00:00:41.306 --> 00:00:43.576 A:middle
But the session has typically
been aimed at beginners

00:00:43.576 --> 00:00:46.286 A:middle
and intermediate level for
developers to get a feel

00:00:46.286 --> 00:00:49.076 A:middle
for how they can implement
In-App Purchases using StoreKit.

00:00:50.116 --> 00:00:52.776 A:middle
We know obviously from the
absolutely massive uptake

00:00:52.886 --> 00:00:55.856 A:middle
of In-App Purchases that it's
time to move on from that.

00:00:56.766 --> 00:00:58.516 A:middle
So this year I wanted to
do something different.

00:00:58.756 --> 00:01:00.536 A:middle
What we're going to focus
on in this session is how


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.756 --> 00:01:00.536 A:middle
What we're going to focus
on in this session is how

00:01:00.536 --> 00:01:03.186 A:middle
to optimize your In-App
Purchase implementation.

00:01:03.866 --> 00:01:05.886 A:middle
And the kind of optimization
we are looking at is not

00:01:05.886 --> 00:01:08.536 A:middle
so much using less
memory, using less memory,

00:01:08.536 --> 00:01:09.836 A:middle
making it faster etcetera.

00:01:10.666 --> 00:01:12.206 A:middle
What we're specifically looking

00:01:12.206 --> 00:01:13.996 A:middle
at is optimizing
your implementation

00:01:13.996 --> 00:01:18.316 A:middle
to be trouble-free, reliable,
smooth, and a great experience

00:01:18.316 --> 00:01:20.436 A:middle
for the user every single time.

00:01:21.606 --> 00:01:23.706 A:middle
But if you're not
familiar with StoreKit,

00:01:24.296 --> 00:01:26.366 A:middle
here's the three key things
that StoreKit does for you.

00:01:27.276 --> 00:01:29.836 A:middle
Of course we all know and
love that StoreKit allows us

00:01:29.836 --> 00:01:31.586 A:middle
to do In-App Purchases
in our apps.

00:01:32.076 --> 00:01:34.366 A:middle
This is for both consumable
and non-consumable items,

00:01:34.656 --> 00:01:36.076 A:middle
as well as for subscriptions.

00:01:37.566 --> 00:01:39.856 A:middle
One other thing that StoreKit
does is it has this thing called

00:01:39.856 --> 00:01:41.796 A:middle
the StoreKit product
sheet, which is a way

00:01:41.796 --> 00:01:45.076 A:middle
in which you can sell apps and
other content from the iTunes

00:01:45.076 --> 00:01:47.626 A:middle
or the App Store
through your app.

00:01:47.626 --> 00:01:49.716 A:middle
And lastly it can be
used for receipt renewal.

00:01:49.826 --> 00:01:51.836 A:middle
Not receipts are a
really powerful way

00:01:52.146 --> 00:01:55.286 A:middle
that you can enforce your
business model, prevent piracy,

00:01:55.526 --> 00:01:58.936 A:middle
etcetera, right within your app
as well as within your service.

00:01:59.126 --> 00:02:00.556 A:middle
And StoreKit's involved
there as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.126 --> 00:02:00.556 A:middle
And StoreKit's involved
there as well.

00:02:02.036 --> 00:02:07.136 A:middle
Before we launch into optimizing
In-App Purchases using StoreKit,

00:02:07.186 --> 00:02:08.996 A:middle
I wanted to cover a few
things that are new this year.

00:02:09.586 --> 00:02:12.126 A:middle
The first is that that
StoreKit product sheet

00:02:12.126 --> 00:02:16.136 A:middle
that I just mentioned before,
it allows you sell content

00:02:16.136 --> 00:02:18.816 A:middle
from other developers or
other apps or content you have

00:02:18.816 --> 00:02:20.016 A:middle
in the store through your app.

00:02:20.976 --> 00:02:24.246 A:middle
That StoreKit product sheet now
supports the affiliate program.

00:02:25.306 --> 00:02:27.246 A:middle
This is really great
for you as a developer.

00:02:27.746 --> 00:02:30.626 A:middle
We debuted the product sheet,
I think it was last year.

00:02:31.306 --> 00:02:34.026 A:middle
But at that time it was simply a
means by which you could market

00:02:34.026 --> 00:02:36.526 A:middle
and sell those other product
and content through your app,

00:02:37.276 --> 00:02:39.866 A:middle
but now with the StoreKit
product sheet supporting the

00:02:39.866 --> 00:02:41.736 A:middle
affiliate program,
if you're part

00:02:41.736 --> 00:02:44.886 A:middle
of that affiliate program you
can get paid for those products

00:02:44.886 --> 00:02:47.446 A:middle
that you are selling
through your app.

00:02:48.336 --> 00:02:51.846 A:middle
The second new thing that
I wanted to call out is

00:02:51.846 --> 00:02:54.256 A:middle
that in StoreKit we're
introducing a new transaction

00:02:54.256 --> 00:02:57.446 A:middle
state called deferred and we'll
look at a bit more in a second,

00:02:57.446 --> 00:03:00.386 A:middle
but this has come about due
to the ask to buy feature


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.446 --> 00:03:00.386 A:middle
but this has come about due
to the ask to buy feature

00:03:00.386 --> 00:03:03.066 A:middle
that was implemented as part
of our family sharing feature.

00:03:04.016 --> 00:03:06.676 A:middle
So family sharing allows
you to add up to six members

00:03:06.676 --> 00:03:08.246 A:middle
of your family and
form a family,

00:03:09.196 --> 00:03:11.646 A:middle
and that family can share
purchases and a payment method.

00:03:12.346 --> 00:03:14.306 A:middle
And when you have children as
part of that family that are

00:03:14.306 --> 00:03:18.296 A:middle
under 18 you can enable ask to
buy on them so that they can ask

00:03:18.296 --> 00:03:20.286 A:middle
for permission to buy
things from the store,

00:03:20.286 --> 00:03:22.826 A:middle
as well as In-App
Purchases in your app.

00:03:23.436 --> 00:03:24.666 A:middle
And then the parent can approve

00:03:24.666 --> 00:03:26.476 A:middle
that purchase remotely
from their devices.

00:03:27.246 --> 00:03:29.766 A:middle
So when the transactions in
that state we call it deferred.

00:03:29.826 --> 00:03:32.356 A:middle
And that's why we introduced
this new transaction state.

00:03:33.766 --> 00:03:35.386 A:middle
We'll touch on this briefly
now and I'm going to look

00:03:35.386 --> 00:03:37.296 A:middle
at an example of how to
handle it and what sort

00:03:37.296 --> 00:03:39.006 A:middle
of things you should do
in your app later on.

00:03:39.006 --> 00:03:41.586 A:middle
But it's called
SKPaymentTransactions

00:03:41.586 --> 00:03:42.366 A:middle
StateDeferred.

00:03:43.326 --> 00:03:45.526 A:middle
What this means is when
you see a transaction

00:03:45.846 --> 00:03:49.256 A:middle
into the deferred state it
means it's neither purchased nor

00:03:49.256 --> 00:03:50.406 A:middle
failed, yet.

00:03:51.796 --> 00:03:54.486 A:middle
You will receive a further
update about this in the future

00:03:54.966 --> 00:03:57.346 A:middle
as in the transaction will
enter that final state

00:03:57.346 --> 00:03:58.496 A:middle
of either purchases or failed,

00:03:58.496 --> 00:04:01.466 A:middle
but it will be an
indeterminate time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.496 --> 00:04:01.466 A:middle
but it will be an
indeterminate time

00:04:01.656 --> 00:04:03.376 A:middle
between when the purchase begins

00:04:03.866 --> 00:04:05.466 A:middle
and when it enters
that final state.

00:04:06.616 --> 00:04:09.726 A:middle
The most important message
I want to get across for you

00:04:09.726 --> 00:04:12.846 A:middle
as app developers is
that to implement support

00:04:12.846 --> 00:04:15.576 A:middle
for handling this deferred
transactions state you need

00:04:15.576 --> 00:04:18.286 A:middle
to engineer it in a way that
your app can still be used

00:04:18.286 --> 00:04:20.946 A:middle
by the user while it's
in that deferred state.

00:04:22.146 --> 00:04:25.516 A:middle
It's also worth mentioning
that we do actually support

00:04:25.516 --> 00:04:28.086 A:middle
and allow you to repurchase
that item, that is attempt

00:04:28.086 --> 00:04:29.266 A:middle
to make subsequent purchases

00:04:29.266 --> 00:04:31.996 A:middle
for that item while the
permission is still pending,

00:04:31.996 --> 00:04:34.136 A:middle
or while the transaction's
in that deferred state.

00:04:37.206 --> 00:04:39.496 A:middle
Wherever possible though,
especially in regards

00:04:39.496 --> 00:04:40.896 A:middle
to the deferred transaction
state,

00:04:40.896 --> 00:04:43.356 A:middle
you should let StoreKit
handle the user interaction.

00:04:43.666 --> 00:04:46.016 A:middle
We'll handle a lot of the
messaging and dialogues

00:04:46.016 --> 00:04:48.116 A:middle
that are required for
the user in regards

00:04:48.116 --> 00:04:49.206 A:middle
to the Ask to Buy feature.

00:04:50.496 --> 00:04:52.576 A:middle
This is how ask to buy works,

00:04:52.576 --> 00:04:55.306 A:middle
so I've got a child device
here and a parent device.

00:04:56.056 --> 00:04:58.486 A:middle
When a child wants to
buy something such as one

00:04:58.486 --> 00:05:01.216 A:middle
of your In-App Purchases, they
attempt to make the purchase


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.486 --> 00:05:01.216 A:middle
of your In-App Purchases, they
attempt to make the purchase

00:05:01.216 --> 00:05:03.626 A:middle
by pressing the Buy button
and they'll be prompted

00:05:03.626 --> 00:05:05.656 A:middle
to ask permission for that item.

00:05:06.276 --> 00:05:08.876 A:middle
That causes a message to
be sent via the App Store

00:05:08.876 --> 00:05:11.356 A:middle
to the parent's device, in
fact all the parent devices

00:05:11.396 --> 00:05:12.506 A:middle
or approver's devices.

00:05:13.806 --> 00:05:15.116 A:middle
And they receive a notification

00:05:15.116 --> 00:05:17.076 A:middle
that this request has
been to buy this item.

00:05:17.076 --> 00:05:21.066 A:middle
When it enters that state,
that's when the transaction goes

00:05:21.066 --> 00:05:22.326 A:middle
into the deferred state.

00:05:23.176 --> 00:05:25.806 A:middle
So once the child has tapped
the button to say yes they want

00:05:25.806 --> 00:05:28.406 A:middle
to ask permission, and
the notification is sent

00:05:28.406 --> 00:05:29.676 A:middle
out to the approvers' devices,

00:05:30.136 --> 00:05:33.726 A:middle
that's when the transaction
becomes deferred.

00:05:33.726 --> 00:05:36.716 A:middle
Now once the parent
goes ahead and approves

00:05:36.716 --> 00:05:38.696 A:middle
or declines this
purchase request,

00:05:39.436 --> 00:05:41.666 A:middle
we'll send a message back
down to the child's device

00:05:41.666 --> 00:05:42.816 A:middle
or the requester's device.

00:05:43.316 --> 00:05:44.916 A:middle
And at that point, that's

00:05:44.916 --> 00:05:47.336 A:middle
when the transaction will
enter the familiar purchases,

00:05:47.336 --> 00:05:48.496 A:middle
or failed states.

00:05:48.736 --> 00:05:53.056 A:middle
Now let's talk about how

00:05:53.056 --> 00:05:55.526 A:middle
to optimize your In-App
Purchase implementation.

00:05:57.416 --> 00:06:00.286 A:middle
This next section is what I
call stock it in 60 seconds.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.416 --> 00:06:00.286 A:middle
This next section is what I
call stock it in 60 seconds.

00:06:00.286 --> 00:06:02.366 A:middle
It designed to give you a
really brief introduction

00:06:02.366 --> 00:06:03.606 A:middle
to the processes involved

00:06:03.746 --> 00:06:05.856 A:middle
in completing an In-App
Purchase using StoreKit.

00:06:06.796 --> 00:06:07.516 A:middle
The first thing you've got

00:06:07.516 --> 00:06:09.056 A:middle
to do is know what
you're going to sell.

00:06:09.186 --> 00:06:12.336 A:middle
You need to load those In-App
Purchase product identifiers.

00:06:13.286 --> 00:06:15.016 A:middle
Then once you know what
you're going to sell,

00:06:15.116 --> 00:06:16.826 A:middle
in terms of those
product identifiers,

00:06:17.296 --> 00:06:18.756 A:middle
you need to ask the App Store

00:06:18.756 --> 00:06:20.936 A:middle
for the localized information
about those products.

00:06:21.166 --> 00:06:22.896 A:middle
And we do that with
SKProduct request.

00:06:23.476 --> 00:06:25.706 A:middle
That gives us back a
bunch of SKProduct objects

00:06:25.706 --> 00:06:28.446 A:middle
that we can then go and draw
our really beautiful In-App

00:06:28.496 --> 00:06:29.076 A:middle
Purchase UI.

00:06:29.076 --> 00:06:32.836 A:middle
Once we've shown our beautiful
In-App Purchase store UI

00:06:33.046 --> 00:06:35.256 A:middle
and we've enticed the user
to make that purchase,

00:06:35.746 --> 00:06:37.706 A:middle
we proceed on to
converting that product

00:06:37.896 --> 00:06:40.286 A:middle
into an SK payment
object and adding

00:06:40.286 --> 00:06:41.426 A:middle
that into the payment queue.

00:06:43.016 --> 00:06:44.916 A:middle
The payment queue will then
give us updates about how

00:06:44.916 --> 00:06:48.326 A:middle
that transaction is progressing
and we will need to process

00:06:48.326 --> 00:06:51.236 A:middle
that transaction as it moves to
the purchase or failed state.

00:06:52.006 --> 00:06:54.826 A:middle
Assuming they purchase the
item, we then go ahead and make

00:06:54.826 --> 00:06:57.276 A:middle
that asset or that content and
feature available to the user.

00:06:57.276 --> 00:07:00.366 A:middle
And then lastly we
finish the transaction.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.276 --> 00:07:00.366 A:middle
And then lastly we
finish the transaction.

00:07:01.186 --> 00:07:02.066 A:middle
So that's it.

00:07:02.066 --> 00:07:03.496 A:middle
It's a pretty simple process

00:07:03.806 --> 00:07:05.676 A:middle
when you string it
together like that.

00:07:06.246 --> 00:07:08.366 A:middle
What we've noticed though
is though from all the apps

00:07:08.366 --> 00:07:11.536 A:middle
that we see submitted, from all
the apps I've used personally,

00:07:11.786 --> 00:07:13.866 A:middle
from the feedback we get from
developers and tech support,

00:07:13.866 --> 00:07:15.576 A:middle
as well as from meeting
a lot of developers here

00:07:15.576 --> 00:07:20.236 A:middle
at WWDC is we know that there
are definitely some danger zones

00:07:20.236 --> 00:07:20.626 A:middle
in here.

00:07:21.386 --> 00:07:25.716 A:middle
There's areas of this process
where the problems can crop up,

00:07:25.716 --> 00:07:27.656 A:middle
or there's common
pitfalls or got you's.

00:07:28.066 --> 00:07:30.676 A:middle
So the focus on this
session is to look at those,

00:07:30.676 --> 00:07:31.946 A:middle
and to help you get over those.

00:07:32.286 --> 00:07:34.706 A:middle
To really bring your In-App
Purchase implementation

00:07:34.796 --> 00:07:35.776 A:middle
up to the next level.

00:07:36.526 --> 00:07:38.186 A:middle
We want it to be as
smooth as possible,

00:07:38.416 --> 00:07:40.976 A:middle
a great experience
every single time.

00:07:41.586 --> 00:07:45.326 A:middle
To start off with let's
look at the user interaction

00:07:45.326 --> 00:07:47.736 A:middle
in particularly in
the pre-sales piece

00:07:47.736 --> 00:07:48.906 A:middle
of making an In-App Purchase.

00:07:49.256 --> 00:07:54.076 A:middle
That is when you're
showing your store UI.

00:07:54.116 --> 00:07:55.176 A:middle
Remember the first thing we have

00:07:55.226 --> 00:07:56.676 A:middle
to do is know what
we want to sell.

00:07:56.676 --> 00:07:59.486 A:middle
We need to load those In-App
Purchase product identifiers

00:07:59.486 --> 00:08:00.186 A:middle
from somewhere.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.486 --> 00:08:00.186 A:middle
from somewhere.

00:08:00.736 --> 00:08:03.156 A:middle
Now these are the product
identifiers that you set

00:08:03.156 --> 00:08:06.426 A:middle
up in iTunes Connect when you
defined your In-App Purchase

00:08:06.526 --> 00:08:07.496 A:middle
saleable items.

00:08:07.496 --> 00:08:10.186 A:middle
So there's two options for
how you can load these product

00:08:10.186 --> 00:08:11.176 A:middle
identifiers up.

00:08:11.976 --> 00:08:15.026 A:middle
One is if you've got a very
static catalog of items

00:08:15.026 --> 00:08:17.756 A:middle
that you're selling, that is
you might only have a handful

00:08:17.756 --> 00:08:19.626 A:middle
of things you're selling and
you know they won't change

00:08:19.626 --> 00:08:20.716 A:middle
throughout the lifetime
of the app,

00:08:21.426 --> 00:08:22.566 A:middle
then it might be
simple enough for you

00:08:22.566 --> 00:08:25.466 A:middle
to just bake those identifiers
directly into the apps binary,

00:08:25.766 --> 00:08:27.836 A:middle
or include it as a pay
list that's part of the app

00:08:27.836 --> 00:08:29.146 A:middle
that you submit to the store.

00:08:29.796 --> 00:08:31.306 A:middle
That's the simplest
implementation.

00:08:32.206 --> 00:08:34.166 A:middle
For a lot of developers though,

00:08:34.616 --> 00:08:36.966 A:middle
we know that that doesn't
suit you well enough in terms

00:08:36.966 --> 00:08:39.765 A:middle
of giving you enough flexibility
and what we see is that a lot

00:08:39.765 --> 00:08:42.246 A:middle
of developers, the first
thing that happens during

00:08:42.246 --> 00:08:44.706 A:middle
that In-App Purchase
flow is they make a call

00:08:44.706 --> 00:08:48.316 A:middle
to their own service to fetch
that list of product identifiers

00:08:48.316 --> 00:08:49.806 A:middle
that they're going to
display to the user.

00:08:50.486 --> 00:08:54.376 A:middle
Now if you're doing that, you
need to think really carefully

00:08:54.376 --> 00:08:56.376 A:middle
about how you're caching
and loading that data.

00:08:56.946 --> 00:09:00.106 A:middle
Because it's the first step
in making an In-App Purchase.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.946 --> 00:09:00.106 A:middle
Because it's the first step
in making an In-App Purchase.

00:09:00.426 --> 00:09:03.206 A:middle
And that In-App Purchase process
is such a fleeting moment

00:09:03.206 --> 00:09:06.336 A:middle
of trying to transform the
customer's intrigue and interest

00:09:06.806 --> 00:09:09.426 A:middle
into a sale that's
obviously a benefit to you,

00:09:09.426 --> 00:09:11.736 A:middle
but is also to help with
their enjoyment and usefulness

00:09:11.736 --> 00:09:12.796 A:middle
of the app that they're using.

00:09:13.796 --> 00:09:18.456 A:middle
Even more important is the
reliability of those servers

00:09:18.456 --> 00:09:20.156 A:middle
that are hosting
your list of products

00:09:20.156 --> 00:09:21.006 A:middle
that you're going to sell.

00:09:22.106 --> 00:09:23.826 A:middle
You've got to make sure that
if you're going to have them

00:09:23.826 --> 00:09:26.076 A:middle
on server and you're going
to make an HTTP request

00:09:26.076 --> 00:09:27.526 A:middle
or whatever it might
be to load them,

00:09:28.076 --> 00:09:30.966 A:middle
that you have a super
reliable, font tolerant,

00:09:31.016 --> 00:09:33.756 A:middle
really performant server
platform that is able

00:09:33.756 --> 00:09:36.816 A:middle
to issue those product codes
really, really quickly.

00:09:39.596 --> 00:09:45.026 A:middle
Because that's not the way
to start an In-App Purchase.

00:09:45.836 --> 00:09:48.946 A:middle
So often when, if I'm playing
games, or I'm using an app

00:09:49.106 --> 00:09:50.886 A:middle
and I'm enticed to make
an In-App Purchase,

00:09:50.886 --> 00:09:52.396 A:middle
probably because I'm not
doing very well at it,

00:09:53.376 --> 00:09:54.956 A:middle
I tap the button to
see what it's about

00:09:54.956 --> 00:09:56.336 A:middle
and I'm stuck at a spinner.

00:09:57.326 --> 00:09:58.406 A:middle
There's no need for that.

00:09:58.746 --> 00:10:01.066 A:middle
If you have to make a network
request in order to enter


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.746 --> 00:10:01.066 A:middle
If you have to make a network
request in order to enter

00:10:01.066 --> 00:10:03.246 A:middle
that In-App Purchase
flow, anticipate it

00:10:03.246 --> 00:10:03.976 A:middle
and do it ahead of time.

00:10:04.046 --> 00:10:06.886 A:middle
For most of you, you
know when it's likely

00:10:06.886 --> 00:10:08.196 A:middle
that the user is
going to be presented

00:10:08.196 --> 00:10:10.676 A:middle
with these In-App Purchase
offerings, so just ahead

00:10:10.676 --> 00:10:12.676 A:middle
of time do those
network requests you need

00:10:12.996 --> 00:10:15.306 A:middle
and avoid them getting stuck
at a spindle like this.

00:10:15.836 --> 00:10:19.966 A:middle
So how do we load that
product information?

00:10:20.376 --> 00:10:22.596 A:middle
You do that -- well sorry once
you've got those identifiers,

00:10:22.716 --> 00:10:24.726 A:middle
you've got to load the
product information about them.

00:10:25.076 --> 00:10:27.116 A:middle
This is when you transform
that simple identifier

00:10:27.116 --> 00:10:28.536 A:middle
that you defined
in iTunes connect

00:10:29.096 --> 00:10:31.896 A:middle
to getting the localized product
information, product price

00:10:32.076 --> 00:10:34.266 A:middle
from the app-store that
the user is signed into.

00:10:35.066 --> 00:10:37.086 A:middle
And you do that using
SKProduct request.

00:10:38.486 --> 00:10:41.196 A:middle
You pass into this the set of
identifiers for which you want

00:10:41.196 --> 00:10:44.346 A:middle
that localized product
information back.

00:10:44.346 --> 00:10:47.036 A:middle
Now when you do this, as I
said just before, always try

00:10:47.036 --> 00:10:48.476 A:middle
and anticipate the presentation.

00:10:48.946 --> 00:10:50.746 A:middle
This will be another
round trip on the network.

00:10:51.326 --> 00:10:54.606 A:middle
There's always, always going
to be some delay there.

00:10:54.726 --> 00:10:56.836 A:middle
So it's best if you
can anticipate this,

00:10:57.136 --> 00:11:00.726 A:middle
load it just ahead of time, or
at a point in time when you know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.136 --> 00:11:00.726 A:middle
load it just ahead of time, or
at a point in time when you know

00:11:00.726 --> 00:11:02.826 A:middle
that you can safely do that
without interrupting the user.

00:11:02.826 --> 00:11:05.966 A:middle
So that you can present that
in-app UI really quickly.

00:11:06.896 --> 00:11:09.326 A:middle
Now what you get
back when you make

00:11:09.326 --> 00:11:13.546 A:middle
that SKProduct request is a
bunch of SKProduct objects.

00:11:14.406 --> 00:11:17.376 A:middle
The SKProduct object will
contain the localized title

00:11:17.376 --> 00:11:19.946 A:middle
and description, the
price and locale,

00:11:20.626 --> 00:11:22.496 A:middle
and if you're hosting
In-App Purchases with us,

00:11:22.856 --> 00:11:25.166 A:middle
then you'll also get back
the content size and version.

00:11:25.886 --> 00:11:32.146 A:middle
The most important bit in the
SKProduct object you get back

00:11:32.146 --> 00:11:35.096 A:middle
in terms of making for a really
good In-App Purchase experience,

00:11:35.646 --> 00:11:38.936 A:middle
is that localized title, and the
localized pricing information.

00:11:40.566 --> 00:11:45.216 A:middle
You would be amazed at how
many different ways there are

00:11:45.216 --> 00:11:49.116 A:middle
to represent the simple concept
of currency around the world.

00:11:50.056 --> 00:11:52.646 A:middle
This is just a very
small subset of examples.

00:11:53.496 --> 00:11:57.496 A:middle
This is all different ways
to represent 1234 and56

00:11:58.236 --> 00:11:59.566 A:middle
in currencies around the world.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.476 --> 00:12:02.656 A:middle
Now currency is something that's
always near and dear to people,

00:12:02.656 --> 00:12:04.496 A:middle
especially when you're offering
them something for sale.

00:12:05.186 --> 00:12:07.166 A:middle
So make sure you can
present the currency

00:12:07.466 --> 00:12:09.426 A:middle
for what you're offering
through In-App Purchases

00:12:09.776 --> 00:12:12.526 A:middle
in a way that's comfortable
and familiar to that user.

00:12:12.866 --> 00:12:16.386 A:middle
It makes for a much, much
nicer experience to make

00:12:16.386 --> 00:12:19.416 A:middle
that user feel like they
are first-class experience

00:12:19.416 --> 00:12:20.816 A:middle
in your app, regardless

00:12:20.816 --> 00:12:22.686 A:middle
of wherever they are
around the world.

00:12:23.346 --> 00:12:25.736 A:middle
Here's a neat trick
for doing that.

00:12:26.666 --> 00:12:28.636 A:middle
You can show that you
can localize price using

00:12:28.636 --> 00:12:29.616 A:middle
NSNumber formatter.

00:12:30.456 --> 00:12:32.316 A:middle
Here I've created my
NSNumber formatter

00:12:33.096 --> 00:12:35.156 A:middle
and I've set the number
style to be in currency,

00:12:35.156 --> 00:12:36.376 A:middle
because that's what
we want to display,

00:12:36.896 --> 00:12:38.276 A:middle
but here's where
the magic starts.

00:12:39.106 --> 00:12:43.466 A:middle
I set the locale for that number
formatter, to the price locale

00:12:43.466 --> 00:12:45.626 A:middle
that I got back from
the SKProduct object.

00:12:46.216 --> 00:12:47.346 A:middle
I don't make any assumptions

00:12:47.346 --> 00:12:49.076 A:middle
about how the device
is configured,

00:12:49.986 --> 00:12:51.076 A:middle
I don't make any assumptions

00:12:51.076 --> 00:12:52.656 A:middle
about where the user
might be based

00:12:52.656 --> 00:12:56.166 A:middle
on any other criteria
whatsoever, because we want

00:12:56.166 --> 00:12:58.556 A:middle
to show the price that's
correct for the App Store

00:12:58.556 --> 00:12:59.796 A:middle
that they are signed into.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.336 --> 00:13:03.256 A:middle
And you get that by using the
price locale that you get back

00:13:03.256 --> 00:13:04.636 A:middle
from that SKProduct object.

00:13:05.306 --> 00:13:09.246 A:middle
Now the second piece to this
puzzle is when you go to create

00:13:09.246 --> 00:13:11.636 A:middle
that formatted string by
calling the string for number,

00:13:11.706 --> 00:13:15.026 A:middle
is you should pass into
that the price that you get

00:13:15.146 --> 00:13:17.476 A:middle
from that SKProduct object.

00:13:18.366 --> 00:13:20.896 A:middle
You see that SKProduct object
has everything you need

00:13:21.256 --> 00:13:23.866 A:middle
to present this item
perfectly suited

00:13:24.096 --> 00:13:25.866 A:middle
for the user no matter
what region

00:13:25.866 --> 00:13:26.826 A:middle
or what country they're in.

00:13:27.216 --> 00:13:29.496 A:middle
So use it to make sure that
it's the most comfortable

00:13:29.496 --> 00:13:31.156 A:middle
and familiar experience
for the user.

00:13:32.066 --> 00:13:36.686 A:middle
But really importantly is
this absolutely no need

00:13:36.686 --> 00:13:39.896 A:middle
and you definitely should
not be doing any currency

00:13:39.896 --> 00:13:40.926 A:middle
conversion yourself.

00:13:41.656 --> 00:13:44.066 A:middle
When the user signs into
the store with their account

00:13:44.166 --> 00:13:47.576 A:middle
in their region or country, the
App Store is automatically set

00:13:47.576 --> 00:13:50.226 A:middle
up to deliver you the pricing
information that is correct

00:13:50.356 --> 00:13:51.526 A:middle
for the region they're in.

00:13:52.006 --> 00:13:53.626 A:middle
Don't try to convert
currencies yourself.

00:13:56.536 --> 00:13:59.296 A:middle
Another thing that I often
see go wrong is how developers

00:13:59.296 --> 00:14:04.186 A:middle
handle errors especially during
this really important pre-sales


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.296 --> 00:14:04.186 A:middle
handle errors especially during
this really important pre-sales

00:14:04.276 --> 00:14:05.876 A:middle
part where you're making
the pitch to the user

00:14:05.876 --> 00:14:06.866 A:middle
about what they want to buy.

00:14:08.076 --> 00:14:10.776 A:middle
The important message here is
that not all errors are equal.

00:14:11.996 --> 00:14:13.256 A:middle
I really encourage you

00:14:13.256 --> 00:14:15.716 A:middle
to checkout either the In-App
Purchase programming guide,

00:14:15.716 --> 00:14:17.066 A:middle
or probably even better,

00:14:17.066 --> 00:14:19.026 A:middle
the StoreKit framework
reference guide.

00:14:19.366 --> 00:14:23.546 A:middle
Because it will have a fairly
small and easily digestible list

00:14:23.896 --> 00:14:26.186 A:middle
of error codes that the
framework may vend to you.

00:14:26.966 --> 00:14:29.216 A:middle
Now errors can happen at
a lot of different times.

00:14:30.256 --> 00:14:32.686 A:middle
And sometimes that error is
something you, the developer,

00:14:32.686 --> 00:14:35.846 A:middle
needs to deal with and message
to the customer, but more often

00:14:35.846 --> 00:14:39.576 A:middle
than not it's an error message
to just provide you feedback

00:14:39.576 --> 00:14:42.276 A:middle
at your apps level of
what happened during

00:14:42.276 --> 00:14:43.146 A:middle
that transaction.

00:14:43.776 --> 00:14:46.136 A:middle
More likely than not, we've
already told them what happened.

00:14:46.736 --> 00:14:48.556 A:middle
We've already presented
the dialogue to the user.

00:14:48.556 --> 00:14:50.526 A:middle
We're already trying to take
them through the process

00:14:50.526 --> 00:14:52.296 A:middle
of rectifying whatever
might have gone wrong.

00:14:53.376 --> 00:14:55.236 A:middle
So make sure you know what
those error codes are.

00:14:55.826 --> 00:14:59.726 A:middle
Check what the code is and know
for sure what errors you need

00:14:59.726 --> 00:15:03.236 A:middle
to message the user about
and what you can rely


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.726 --> 00:15:03.236 A:middle
to message the user about
and what you can rely

00:15:03.236 --> 00:15:05.146 A:middle
on StoreKit having
taken care of for you.

00:15:05.626 --> 00:15:08.556 A:middle
And the most popular example
that I see of this and the one

00:15:08.556 --> 00:15:11.446 A:middle
that gets me every single time
I use an app that it does this,

00:15:12.506 --> 00:15:14.636 A:middle
is when I'm seeing something
I want to buy in your app,

00:15:15.366 --> 00:15:17.266 A:middle
tap the Buy button, I'm
all excited about it.

00:15:17.856 --> 00:15:20.326 A:middle
Dialogue comes up to sign
into the store or touch ID.

00:15:20.746 --> 00:15:22.506 A:middle
I've done that and
then I get the dialogue

00:15:22.506 --> 00:15:23.846 A:middle
to confirm my purchase.

00:15:24.226 --> 00:15:26.376 A:middle
And maybe for whatever reason
I've got a bit of cold feet

00:15:26.376 --> 00:15:27.486 A:middle
and I hit the Cancel button.

00:15:28.856 --> 00:15:32.586 A:middle
So many apps I see then follow
that up with a second dialogue

00:15:32.586 --> 00:15:35.676 A:middle
that says purchase failed,
you cancelled the transaction.

00:15:37.536 --> 00:15:38.906 A:middle
I know I cancelled
the transaction.

00:15:39.546 --> 00:15:40.596 A:middle
I cancelled it.

00:15:40.656 --> 00:15:43.806 A:middle
Okay? Yes your app got an
NS error back that told you

00:15:43.806 --> 00:15:45.156 A:middle
that they cancelled
the transaction,

00:15:45.416 --> 00:15:47.896 A:middle
but you really don't need to go
reinforce the point to the user

00:15:47.896 --> 00:15:50.206 A:middle
that they got cold feet and
backed out of the transaction.

00:15:51.246 --> 00:15:55.046 A:middle
In fact, it can be really
damaging for your, you know,

00:15:55.046 --> 00:15:56.166 A:middle
possibility to keep

00:15:56.166 --> 00:15:58.186 A:middle
that momentum going
and make that sale.

00:15:58.866 --> 00:16:01.186 A:middle
Because if the first time
through a purchase I'm not sure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.866 --> 00:16:01.186 A:middle
Because if the first time
through a purchase I'm not sure

00:16:01.186 --> 00:16:02.726 A:middle
about it and I decide
to back out,

00:16:03.446 --> 00:16:06.096 A:middle
if my experience there wasn't
great, then I'll tell you what,

00:16:06.096 --> 00:16:09.346 A:middle
I'm really not convinced that
I should be spending my money

00:16:09.346 --> 00:16:11.096 A:middle
on this app if they
can't make a good job

00:16:11.326 --> 00:16:14.966 A:middle
of letting me back
out of a purchase.

00:16:15.966 --> 00:16:17.146 A:middle
So just being aware of that.

00:16:17.146 --> 00:16:19.876 A:middle
It's one of a really good
example of where it's important

00:16:19.876 --> 00:16:21.776 A:middle
to know exactly what
these error codes mean.

00:16:23.346 --> 00:16:25.286 A:middle
Wherever possible just let us --

00:16:25.286 --> 00:16:27.186 A:middle
let StockKit handle
the transaction flow

00:16:27.186 --> 00:16:28.026 A:middle
as much as possible.

00:16:29.716 --> 00:16:31.836 A:middle
We see an increasing
number of apps starting

00:16:31.836 --> 00:16:34.096 A:middle
to introduce dialogs
and messaging ahead

00:16:34.096 --> 00:16:35.306 A:middle
of the In-App Purchase flow.

00:16:35.826 --> 00:16:37.466 A:middle
If that's something
you feel you need to.

00:16:37.716 --> 00:16:40.106 A:middle
That's fine but I'd
strongly encourage you

00:16:40.106 --> 00:16:43.286 A:middle
to come along tomorrow to a
session given my Chris Espinosa

00:16:43.616 --> 00:16:45.806 A:middle
at 3:15 about apps and kids.

00:16:46.226 --> 00:16:48.456 A:middle
It has some really good
tips there about how

00:16:48.456 --> 00:16:49.956 A:middle
to handle this sort
of interaction.

00:16:52.656 --> 00:16:54.656 A:middle
So now let's move on
to making the purchase.

00:16:55.656 --> 00:16:57.306 A:middle
You have done a great job

00:16:57.306 --> 00:17:00.056 A:middle
of showing this glorious
In-App Purchase UI to the user.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.306 --> 00:17:00.056 A:middle
of showing this glorious
In-App Purchase UI to the user.

00:17:00.246 --> 00:17:02.336 A:middle
It was perfectly presented
to them, no rough edges,

00:17:02.336 --> 00:17:03.486 A:middle
no silly error messages.

00:17:03.906 --> 00:17:06.026 A:middle
They've tapped the Buy button
and they want to move forward.

00:17:06.955 --> 00:17:12.116 A:middle
So when you go and make that
purchase, this is when you start

00:17:12.116 --> 00:17:13.935 A:middle
to really get into
using StoreKit.

00:17:14.935 --> 00:17:20.126 A:middle
StoreKit revolves around and is
centered around a payment queue.

00:17:20.536 --> 00:17:22.945 A:middle
And the most important
thing you've got to do

00:17:22.945 --> 00:17:26.026 A:middle
with that payment queue
is observe it always.

00:17:27.326 --> 00:17:29.706 A:middle
The payment queue is where
you'll get all information

00:17:29.706 --> 00:17:31.526 A:middle
about how a transaction
is progressing,

00:17:32.276 --> 00:17:34.356 A:middle
whether it was purchased
or failed, whether it's

00:17:34.356 --> 00:17:36.446 A:middle
in progress, whether
it's deferred.

00:17:36.446 --> 00:17:37.386 A:middle
You'll also get information

00:17:37.386 --> 00:17:39.246 A:middle
about restored transactions,
etcetera.

00:17:40.066 --> 00:17:43.306 A:middle
It should be the center of your
In-App Purchase implementation

00:17:43.816 --> 00:17:46.606 A:middle
and it's the only
source of truth for state

00:17:46.606 --> 00:17:48.226 A:middle
about transactions
as they occur.

00:17:48.616 --> 00:17:52.596 A:middle
There's absolutely no need
for you as a developer to try

00:17:52.596 --> 00:17:55.356 A:middle
and integrate some sort of
complicated state machine,

00:17:55.356 --> 00:17:58.366 A:middle
or caching of state about
transactions that are in place,

00:17:59.216 --> 00:18:03.136 A:middle
because you can get all of that
from the payment queue itself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.216 --> 00:18:03.136 A:middle
because you can get all of that
from the payment queue itself.

00:18:03.706 --> 00:18:05.776 A:middle
You can get transactions
that are in progress.

00:18:06.056 --> 00:18:09.326 A:middle
You can know about the status of
a transaction as it progresses.

00:18:09.966 --> 00:18:12.376 A:middle
And if you're hosting In-App
Purchases with it, the queue is

00:18:12.376 --> 00:18:14.816 A:middle
where you'll also get that
download status information.

00:18:14.906 --> 00:18:20.026 A:middle
I think one of the most common
reasons I see developers attempt

00:18:20.026 --> 00:18:24.056 A:middle
to tack on a side cache of
state about In-App Purchases,

00:18:24.406 --> 00:18:27.206 A:middle
rather than just holy and
solely trusting the queue is

00:18:27.666 --> 00:18:30.826 A:middle
because they feel that in
order to update UI elements,

00:18:31.256 --> 00:18:33.566 A:middle
and you know, communicate
the progress

00:18:33.566 --> 00:18:35.966 A:middle
of the In-App Purchase flow
through the app that they need

00:18:35.966 --> 00:18:39.156 A:middle
to somehow stash that
payment object away or try

00:18:39.156 --> 00:18:42.716 A:middle
and tack some extra state on to
it somehow so that they can keep

00:18:42.716 --> 00:18:44.846 A:middle
that UI up-to-date
and congruous,

00:18:45.156 --> 00:18:48.586 A:middle
but in fact that's not true.

00:18:48.586 --> 00:18:50.146 A:middle
And we will see in one
of the examples I'm going

00:18:50.146 --> 00:18:51.646 A:middle
to give you how you
can harness the queue

00:18:51.886 --> 00:18:55.416 A:middle
and trust only the queue
and still achieve all that.

00:18:56.696 --> 00:18:59.056 A:middle
But just as you've got to
rely on the payment queue

00:18:59.056 --> 00:19:01.946 A:middle
for all those updates and all
those pieces of information,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.056 --> 00:19:01.946 A:middle
for all those updates and all
those pieces of information,

00:19:02.666 --> 00:19:05.536 A:middle
you also need to be aware
that any and all transactions

00:19:05.536 --> 00:19:08.286 A:middle
that appear in the queue
are real and valid.

00:19:09.586 --> 00:19:13.106 A:middle
Just because your app didn't
start a payment or your --

00:19:13.106 --> 00:19:15.376 A:middle
the running instance of your
app didn't start a payment

00:19:15.536 --> 00:19:18.526 A:middle
or for whatever reason
you don't think

00:19:18.526 --> 00:19:20.556 A:middle
for some reason this
transaction is valid,

00:19:21.466 --> 00:19:23.356 A:middle
then you are likely
leaving your customers

00:19:23.356 --> 00:19:25.586 A:middle
out from a real monetary
transaction

00:19:25.676 --> 00:19:26.676 A:middle
that has taken place.

00:19:27.596 --> 00:19:30.016 A:middle
So make sure you trust
the queue completely.

00:19:30.456 --> 00:19:32.236 A:middle
Any and all transactions
that you see in there,

00:19:32.236 --> 00:19:34.916 A:middle
any and all updates you
see are real and valid.

00:19:35.256 --> 00:19:37.096 A:middle
Now if you're concerned
about how to ensure

00:19:37.096 --> 00:19:38.636 A:middle
that they are not
an unauthorized

00:19:39.086 --> 00:19:41.936 A:middle
or a fraudulent transaction,
that's a different matter.

00:19:42.656 --> 00:19:45.106 A:middle
Please come along on
Friday morning at 10:15,

00:19:45.106 --> 00:19:45.886 A:middle
I'm doing a session

00:19:45.886 --> 00:19:48.706 A:middle
about preventing unauthorized
transactions using receipts

00:19:49.036 --> 00:19:51.516 A:middle
and you'll see that it's the
receipt that holds that source

00:19:51.516 --> 00:19:54.276 A:middle
of truth about whether
something was a real valid,

00:19:54.356 --> 00:19:55.386 A:middle
monetary transaction.

00:19:56.246 --> 00:19:57.416 A:middle
But otherwise for all intents

00:19:57.416 --> 00:19:58.976 A:middle
and purposes, we
trust the queue.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.056 --> 00:20:02.146 A:middle
And how do we do that?

00:20:02.316 --> 00:20:04.786 A:middle
On launch, as soon as possible,

00:20:04.786 --> 00:20:06.966 A:middle
ideally in your application
deep finish launching,

00:20:07.356 --> 00:20:09.686 A:middle
you should be calling
SKPaymetQueue

00:20:09.686 --> 00:20:11.026 A:middle
addTransactionObserver.

00:20:12.186 --> 00:20:14.946 A:middle
The object you add in there will
be your object that conforms

00:20:14.946 --> 00:20:18.236 A:middle
to the SKPaymentQueue observer
protocol and that's your object

00:20:18.236 --> 00:20:21.466 A:middle
that forms the center of your
In-App Purchase implementation.

00:20:21.906 --> 00:20:23.386 A:middle
It's going to receive
all the updates

00:20:23.386 --> 00:20:25.186 A:middle
about how payments are
progressing in the queue

00:20:25.256 --> 00:20:27.826 A:middle
and it's how you can handle
everything from dealing

00:20:27.826 --> 00:20:30.366 A:middle
with errors, to updating
UI, etcetera.

00:20:30.456 --> 00:20:34.866 A:middle
So I'm going to walk you
through a quick example here.

00:20:35.936 --> 00:20:38.186 A:middle
Not so much because you need
to get this beginner sort

00:20:38.186 --> 00:20:39.886 A:middle
of level information,
but because I want

00:20:40.046 --> 00:20:41.146 A:middle
to show you how it leads

00:20:41.146 --> 00:20:43.606 A:middle
into a really bad design
pattern and why that's wrong.

00:20:43.836 --> 00:20:46.326 A:middle
First thing we've got to do is

00:20:46.326 --> 00:20:50.046 A:middle
of course we make this call
making to SKProduct request

00:20:50.436 --> 00:20:52.756 A:middle
to get information about the
products we want to sell.

00:20:53.946 --> 00:20:57.346 A:middle
Now once we've done that and we
set our delegate and call start,

00:20:57.786 --> 00:20:59.726 A:middle
we're going to get that
product information back.

00:20:59.726 --> 00:21:01.926 A:middle
We're going to get a bunch
of SKProduct objects.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.726 --> 00:21:01.926 A:middle
We're going to get a bunch
of SKProduct objects.

00:21:02.506 --> 00:21:05.056 A:middle
When the user taps the Buy
button and wants to end

00:21:05.056 --> 00:21:09.366 A:middle
that purchase flow, we
take that SKProduct object,

00:21:09.466 --> 00:21:11.376 A:middle
and we transform
it into a payment

00:21:11.866 --> 00:21:13.856 A:middle
by calling SKPayment
payment with product.

00:21:14.696 --> 00:21:17.736 A:middle
One little thing to note here
is I've heard some feedback

00:21:17.736 --> 00:21:20.356 A:middle
from DTS in particular is
that they've seen a lot

00:21:20.356 --> 00:21:23.736 A:middle
of developers try and handcraft
their own SKProduct objects

00:21:24.176 --> 00:21:25.226 A:middle
to create the payment with.

00:21:25.816 --> 00:21:27.546 A:middle
That's totally not
the right thing to do.

00:21:28.146 --> 00:21:30.096 A:middle
What you need to do is
get your identifiers

00:21:30.096 --> 00:21:30.956 A:middle
of what you want to sell.

00:21:31.466 --> 00:21:34.376 A:middle
Use SKProduct request to get
that localized information

00:21:34.376 --> 00:21:35.836 A:middle
and the SKProduct objects.

00:21:36.386 --> 00:21:41.116 A:middle
Then you hand those SKProduct
objects into SKPayment

00:21:41.116 --> 00:21:42.096 A:middle
to get the payment object.

00:21:42.476 --> 00:21:43.616 A:middle
Don't try to craft your own.

00:21:43.616 --> 00:21:46.026 A:middle
You've got to use those
real live SKProduct objects.

00:21:47.266 --> 00:21:50.566 A:middle
So the first step was that
we call SKPayment payment

00:21:50.636 --> 00:21:51.186 A:middle
with product.

00:21:52.016 --> 00:21:54.396 A:middle
The next step is we take
that payment and we add it

00:21:54.396 --> 00:21:56.476 A:middle
into our payment queue
to start that process.

00:21:58.006 --> 00:22:02.716 A:middle
It's very, very deliberate that
there is no step three here.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.006 --> 00:22:02.716 A:middle
It's very, very deliberate that
there is no step three here.

00:22:03.436 --> 00:22:06.816 A:middle
Because at this point in time
you are completely hands-off

00:22:06.816 --> 00:22:09.696 A:middle
and you should step back and let
StoreKit handle this transaction

00:22:09.696 --> 00:22:10.076 A:middle
for you.

00:22:12.216 --> 00:22:14.106 A:middle
In fact the transaction
will take on a life

00:22:14.106 --> 00:22:16.216 A:middle
of its own completely
outside of your app.

00:22:16.496 --> 00:22:19.476 A:middle
StoreKit and its background
processes will handle the actual

00:22:19.476 --> 00:22:21.876 A:middle
purchasing process, the
dialogues, and the sign

00:22:21.876 --> 00:22:24.046 A:middle
in with the user
outside of your app.

00:22:24.866 --> 00:22:28.456 A:middle
That means that payment takes
on a life outside of your app,

00:22:28.456 --> 00:22:33.236 A:middle
even if your app crashes,
even if your app is quit,

00:22:33.786 --> 00:22:37.116 A:middle
or other circumstances
that cause a long delay

00:22:37.116 --> 00:22:40.856 A:middle
in that payment process
transacting, it will continue

00:22:40.856 --> 00:22:43.076 A:middle
to happen even if your
app's not running.

00:22:43.686 --> 00:22:47.946 A:middle
So what we need to do is
we've got to handle the events

00:22:47.946 --> 00:22:50.436 A:middle
from the queue to know
where this payment is at.

00:22:51.556 --> 00:22:54.506 A:middle
The most important
SKPaymentQueue observer method

00:22:54.736 --> 00:22:57.646 A:middle
to implement is payment
queue updated transactions.

00:22:58.166 --> 00:23:00.696 A:middle
This is what gets called
every time a payment starts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.166 --> 00:23:00.696 A:middle
This is what gets called
every time a payment starts

00:23:00.696 --> 00:23:02.006 A:middle
progressing through the process

00:23:02.006 --> 00:23:05.026 A:middle
of becoming an actual In-App
Purchase that is made.

00:23:06.586 --> 00:23:08.556 A:middle
And we can implement
this like this.

00:23:09.326 --> 00:23:11.306 A:middle
So here I've got a full
loop that loops over each

00:23:11.306 --> 00:23:13.536 A:middle
of those transactions that
I'm receiving an update for,

00:23:14.076 --> 00:23:16.376 A:middle
and for each transaction I
set up a switch statement

00:23:16.376 --> 00:23:17.866 A:middle
because I want to
particularly know

00:23:18.226 --> 00:23:20.026 A:middle
which state this
transaction is in.

00:23:20.916 --> 00:23:23.906 A:middle
Then I can do things like
looking for the state

00:23:23.906 --> 00:23:26.296 A:middle
of SKPayment transaction
purchased.

00:23:26.716 --> 00:23:28.466 A:middle
That means the purchase
has completed

00:23:28.466 --> 00:23:29.786 A:middle
and I can unlock
features and content.

00:23:29.786 --> 00:23:31.986 A:middle
I can go ahead and
check the receipt,

00:23:32.266 --> 00:23:34.296 A:middle
make sure it's a real
monetary transaction,

00:23:34.296 --> 00:23:35.716 A:middle
not a fraudulent
one that's occurred

00:23:35.966 --> 00:23:38.456 A:middle
and then unlock those features
and content accordingly.

00:23:39.926 --> 00:23:45.366 A:middle
But don't do this.

00:23:45.576 --> 00:23:48.106 A:middle
Don't set up that pay
statement to look for the state

00:23:48.106 --> 00:23:51.316 A:middle
of purchased and then try
and find a matching payment

00:23:51.316 --> 00:23:54.346 A:middle
in some side cache that
you've got of payments

00:23:54.346 --> 00:23:55.806 A:middle
that you thought
were in progress.

00:23:56.826 --> 00:23:59.396 A:middle
Because once you've created that
payment object and thrown it

00:23:59.396 --> 00:24:00.996 A:middle
in the payment queue
to start the process,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.396 --> 00:24:00.996 A:middle
in the payment queue
to start the process,

00:24:01.446 --> 00:24:03.076 A:middle
that object should
be dead to you.

00:24:03.076 --> 00:24:03.986 A:middle
You should forget about it.

00:24:04.876 --> 00:24:06.716 A:middle
You'll get information
about those payments

00:24:06.716 --> 00:24:08.296 A:middle
and those transactions
through the queue.

00:24:09.706 --> 00:24:12.756 A:middle
So if you did something
like this and tried to fetch

00:24:12.756 --> 00:24:14.926 A:middle
that payment out of some cache
that you were maintaining

00:24:14.926 --> 00:24:18.336 A:middle
of what you thought was in
progress, and then even worse,

00:24:18.936 --> 00:24:21.096 A:middle
did something like
this and said, "Huh?'

00:24:21.096 --> 00:24:24.226 A:middle
"I don't know this payment, I've
got no idea where it comes from.

00:24:24.266 --> 00:24:26.236 A:middle
I'm just going to ignore
it and skip over it."

00:24:27.746 --> 00:24:29.736 A:middle
You will have left
the customer out here.

00:24:30.076 --> 00:24:32.646 A:middle
Okay. If something
arrives in the queue,

00:24:32.646 --> 00:24:34.776 A:middle
it's because someone
bought something.

00:24:35.396 --> 00:24:37.766 A:middle
Even if you don't think it
originated from your app,

00:24:38.146 --> 00:24:40.876 A:middle
or the running instance of your
app, there's lots of reasons

00:24:40.876 --> 00:24:43.956 A:middle
of why a transaction can
suddenly appear in the queue.

00:24:44.266 --> 00:24:45.076 A:middle
They're always real.

00:24:45.076 --> 00:24:45.886 A:middle
They're always valid.

00:24:45.986 --> 00:24:48.126 A:middle
You should process them.

00:24:50.236 --> 00:24:51.166 A:middle
So why not?

00:24:51.226 --> 00:24:52.206 A:middle
Why wouldn't we do that?

00:24:52.546 --> 00:24:53.946 A:middle
Because what if your
app crashes?

00:24:54.336 --> 00:24:56.396 A:middle
Obviously then you've lost
your cache of information.

00:24:56.566 --> 00:24:59.486 A:middle
And not only will the user have
to endure a crash in your app,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.016 --> 00:25:01.196 A:middle
but next time when they launch

00:25:01.196 --> 00:25:03.176 A:middle
if you then ignore the
subsequent update you get

00:25:03.176 --> 00:25:06.106 A:middle
about the payment, then not only
have they put up with a crash,

00:25:06.446 --> 00:25:11.416 A:middle
they've missed out on
what you've sold them.

00:25:11.636 --> 00:25:12.456 A:middle
It's just as valid.

00:25:12.996 --> 00:25:14.686 A:middle
Always process those
transactions.

00:25:15.236 --> 00:25:18.836 A:middle
Now, getting back to what
we talked about before.

00:25:18.836 --> 00:25:22.356 A:middle
This new state of the
SKPayment transaction deferred.

00:25:23.316 --> 00:25:24.846 A:middle
Here's an example
of how to handle

00:25:25.296 --> 00:25:26.736 A:middle
that transaction being deferred.

00:25:26.996 --> 00:25:30.026 A:middle
So remember in this
state, a child that's part

00:25:30.026 --> 00:25:33.136 A:middle
of a family sharing unit
has asked permission

00:25:33.136 --> 00:25:34.306 A:middle
to buy something in your app.

00:25:34.306 --> 00:25:36.196 A:middle
And the transaction has moved

00:25:36.196 --> 00:25:39.086 A:middle
from SKPayment state
purchasing to deferred.

00:25:40.386 --> 00:25:42.556 A:middle
Now when you see
that status come

00:25:42.556 --> 00:25:45.186 A:middle
through as SKPaymentTransaction
StateDeferred,

00:25:45.996 --> 00:25:47.026 A:middle
here's what you should do.

00:25:48.086 --> 00:25:51.316 A:middle
There's three important things
that we'd really encourage you

00:25:51.316 --> 00:25:53.866 A:middle
as developers to do in your
handling of this situation.

00:25:54.656 --> 00:25:57.606 A:middle
The first is allow the
user to keep using the app.

00:25:58.286 --> 00:26:00.986 A:middle
It would be an absolute
buzz-kill for the kids


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.286 --> 00:26:00.986 A:middle
It would be an absolute
buzz-kill for the kids

00:26:01.536 --> 00:26:04.516 A:middle
if they are sitting there in
the app, absolutely delighted

00:26:04.516 --> 00:26:07.836 A:middle
about the possibility that
mom or dad might just say yes

00:26:07.936 --> 00:26:09.196 A:middle
to this purchase
they've asked for,

00:26:09.196 --> 00:26:12.146 A:middle
but all the while they
have to sit there waiting.

00:26:12.466 --> 00:26:13.466 A:middle
Spinners up.

00:26:13.616 --> 00:26:14.906 A:middle
Waiting for permission.

00:26:15.216 --> 00:26:16.456 A:middle
They're going to quit.

00:26:16.456 --> 00:26:18.146 A:middle
They're going to
go to another app.

00:26:18.196 --> 00:26:18.906 A:middle
You're going to lose them.

00:26:19.666 --> 00:26:22.316 A:middle
Okay. Make sure they can keep
using the app in some way.

00:26:23.316 --> 00:26:25.466 A:middle
Because it may be
some time before

00:26:25.466 --> 00:26:26.786 A:middle
that transaction is updated.

00:26:27.376 --> 00:26:29.586 A:middle
It could be up to 24
hours before the approval

00:26:29.586 --> 00:26:31.456 A:middle
or decline comes
through from the parents.

00:26:33.406 --> 00:26:36.566 A:middle
So really don't get them stuck
in that modal purchasing state

00:26:36.566 --> 00:26:38.576 A:middle
where they can't do
anything with your app.

00:26:38.636 --> 00:26:40.256 A:middle
In fact one way to think

00:26:40.256 --> 00:26:43.056 A:middle
of it is you've got a
very captive audience

00:26:43.056 --> 00:26:43.936 A:middle
at this point in time.

00:26:44.226 --> 00:26:45.946 A:middle
Someone wants something
in your app

00:26:45.946 --> 00:26:47.546 A:middle
and they're waiting
for approval for it.

00:26:48.406 --> 00:26:49.366 A:middle
Make use of that time.

00:26:49.906 --> 00:26:57.406 A:middle
But at the end of any
transaction you perform

00:26:57.406 --> 00:26:59.716 A:middle
with StoreKit, whether it
gets purchased or failed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.086 --> 00:27:04.286 A:middle
You always must call
FinishTransaction.

00:27:05.556 --> 00:27:08.356 A:middle
When you call FinishTransaction
that tells the App Store

00:27:08.356 --> 00:27:09.786 A:middle
that you're done with
this transaction.

00:27:09.876 --> 00:27:11.506 A:middle
You've seen it, you've
processed it,

00:27:11.666 --> 00:27:13.066 A:middle
you don't need to see it again.

00:27:13.666 --> 00:27:16.406 A:middle
It removes it from the
queue and then it makes sure

00:27:16.406 --> 00:27:19.436 A:middle
that we don't keep calling the
Updated Transaction Method each

00:27:19.436 --> 00:27:23.016 A:middle
time on launch or at other
points when your app is running.

00:27:23.786 --> 00:27:28.066 A:middle
Now this is most common cause
that I see for bad app behavior

00:27:28.066 --> 00:27:32.316 A:middle
on launch, especially things
like really slow launch time,

00:27:32.986 --> 00:27:34.526 A:middle
or a launch time
where it launches,

00:27:34.526 --> 00:27:36.116 A:middle
then it's hanging
there for a while.

00:27:36.706 --> 00:27:39.396 A:middle
Or worst of all when the app
launches and I'm presented

00:27:39.396 --> 00:27:41.706 A:middle
with a series of dialogues that
just don't make sense to me

00:27:42.496 --> 00:27:45.946 A:middle
because in fact what's happening
is because you didn't remove

00:27:45.946 --> 00:27:50.906 A:middle
that transaction from the queue,
when your app launches we get --

00:27:50.906 --> 00:27:53.086 A:middle
and you add that
transaction queue observer

00:27:53.086 --> 00:27:56.206 A:middle
in the first thing we do is
go and look at the history

00:27:56.286 --> 00:27:57.796 A:middle
of transactions that
are still pending

00:27:57.796 --> 00:27:59.816 A:middle
and haven't had Transaction
Finished called on them,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:00.246 --> 00:28:02.466 A:middle
and we'll go and
replay all those update

00:28:02.466 --> 00:28:03.496 A:middle
through to your app.

00:28:04.276 --> 00:28:07.066 A:middle
So if you then start
processing them and have reason

00:28:07.066 --> 00:28:09.246 A:middle
to message something to
the user and still fail

00:28:09.246 --> 00:28:10.516 A:middle
to call FinishTransaction

00:28:10.516 --> 00:28:14.726 A:middle
that means every single
time your app launches,

00:28:15.236 --> 00:28:16.816 A:middle
it's going to go
through this process.

00:28:17.696 --> 00:28:19.296 A:middle
It's a bad user experience
and it's one

00:28:19.296 --> 00:28:22.076 A:middle
that gets worse the more
the user uses your app.

00:28:22.466 --> 00:28:24.326 A:middle
So always call FinishTransaction

00:28:24.646 --> 00:28:26.066 A:middle
to get those items
out of the queue.

00:28:27.336 --> 00:28:31.476 A:middle
Two tips about the
SKPaymentQueue object itself.

00:28:31.956 --> 00:28:34.006 A:middle
One is going back to this notion

00:28:34.006 --> 00:28:36.436 A:middle
that the SKPaymentQueue is
your single source of truth.

00:28:37.036 --> 00:28:39.156 A:middle
It has a property on
it called transactions.

00:28:39.616 --> 00:28:42.866 A:middle
And you can call that property
and get the list of transactions

00:28:42.866 --> 00:28:43.886 A:middle
that are currently inflight.

00:28:44.566 --> 00:28:47.216 A:middle
So for example, if
you wanted to --

00:28:47.416 --> 00:28:49.646 A:middle
when you show your In-App
Purchase UI make sure

00:28:49.646 --> 00:28:52.416 A:middle
that you correctly
represented any items

00:28:52.416 --> 00:28:53.426 A:middle
that are still purchasing.

00:28:54.046 --> 00:28:55.916 A:middle
You could call transactions
to get the list

00:28:56.106 --> 00:28:57.366 A:middle
of payments in progress.

00:28:58.056 --> 00:29:00.846 A:middle
As opposed to trying to track
that state yourself on the side.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.056 --> 00:29:00.846 A:middle
As opposed to trying to track
that state yourself on the side.

00:29:01.856 --> 00:29:04.526 A:middle
The other one is keep in mind

00:29:04.526 --> 00:29:07.166 A:middle
that in-app purchasing can
be disabled on the device.

00:29:07.816 --> 00:29:10.766 A:middle
And it's a really bad experience
for the user if they're enticed

00:29:10.986 --> 00:29:13.806 A:middle
to play your game or use
your app enough to want

00:29:13.806 --> 00:29:16.356 A:middle
to make an In-App
Purchase then only to find

00:29:16.356 --> 00:29:17.926 A:middle
that they get some error
message telling them

00:29:17.926 --> 00:29:18.966 A:middle
that that's been disabled.

00:29:20.136 --> 00:29:22.146 A:middle
So you can call it
can make payments

00:29:22.496 --> 00:29:25.096 A:middle
on SKPyament queue it's a class
method for returning a BOOL

00:29:25.096 --> 00:29:28.726 A:middle
to know whether or not In-App
Purchase can actually be made.

00:29:28.726 --> 00:29:33.866 A:middle
Now I want to give you a
quick demo of a few things

00:29:33.866 --> 00:29:34.806 A:middle
that we've just talked about.

00:29:44.646 --> 00:29:49.166 A:middle
Okay. I have here a very,
very simple app for OS X

00:29:49.166 --> 00:29:50.986 A:middle
that does an In-App Purchase.

00:29:51.756 --> 00:29:53.216 A:middle
Everything I talk
about in this session,

00:29:53.216 --> 00:29:55.976 A:middle
including this demo applies
equally to iOS and OS X.

00:29:56.396 --> 00:29:58.386 A:middle
StoreKit is the same
on both platforms.

00:29:58.576 --> 00:30:00.976 A:middle
But in this app a few
things to call out.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.576 --> 00:30:00.976 A:middle
But in this app a few
things to call out.

00:30:01.166 --> 00:30:03.446 A:middle
In my application
deep finish launching,

00:30:03.976 --> 00:30:06.436 A:middle
first thing I'm doing
is I'm adding an object

00:30:06.436 --> 00:30:07.616 A:middle
in to observe the queue.

00:30:09.156 --> 00:30:12.386 A:middle
And down here you'll see I will
have implemented my payment

00:30:12.426 --> 00:30:14.196 A:middle
queue updated transaction
method.

00:30:15.066 --> 00:30:18.076 A:middle
It's in here that I start
inspecting and dealing

00:30:18.076 --> 00:30:19.356 A:middle
with all those events
that happen

00:30:19.716 --> 00:30:21.926 A:middle
as purchases progress
through the queue.

00:30:22.426 --> 00:30:24.786 A:middle
I deal with things like
entering the purchasing state,

00:30:24.786 --> 00:30:28.116 A:middle
when things first start,
when it gets purchased,

00:30:28.536 --> 00:30:29.696 A:middle
where it's failed or restored.

00:30:29.696 --> 00:30:33.226 A:middle
So for the sake of this demo,

00:30:33.226 --> 00:30:36.106 A:middle
I'm going to run my
really, really simple app.

00:30:36.486 --> 00:30:39.086 A:middle
All it does is it sells
a .99 cent banana via an

00:30:39.086 --> 00:30:39.816 A:middle
In-App Purchase.

00:30:40.116 --> 00:30:40.926 A:middle
Really exciting.

00:30:41.166 --> 00:30:43.396 A:middle
I'm going to go ahead
and purchase that.

00:30:44.516 --> 00:30:46.276 A:middle
Now as soon as I hit
the Purchase button,

00:30:47.076 --> 00:30:48.746 A:middle
before any other
user interaction,

00:30:49.056 --> 00:30:52.196 A:middle
I straightaway my
breakpoint was hit that I set

00:30:52.456 --> 00:30:54.796 A:middle
in my payment queue
updated transactions method.

00:30:55.906 --> 00:30:57.256 A:middle
So that's really
important to know,

00:30:57.256 --> 00:31:00.236 A:middle
because if you were thinking you
had to track UI state yourself,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.256 --> 00:31:00.236 A:middle
because if you were thinking you
had to track UI state yourself,

00:31:00.746 --> 00:31:01.886 A:middle
this demonstrates you don't.

00:31:02.276 --> 00:31:04.006 A:middle
As soon as that button
was clicked -- bang.

00:31:04.496 --> 00:31:07.056 A:middle
We're into the payment queue and
observing an event occurring.

00:31:07.646 --> 00:31:10.396 A:middle
And in fact the event that
we're observing is the fact

00:31:10.396 --> 00:31:13.696 A:middle
that this payment or this
transaction has entered the

00:31:13.696 --> 00:31:14.886 A:middle
state of purchasing.

00:31:15.306 --> 00:31:17.296 A:middle
So this would be a time when I
could go and update the state

00:31:17.296 --> 00:31:21.026 A:middle
of my Buy buttons whatever else
I need to do to inform the user

00:31:21.026 --> 00:31:23.056 A:middle
that yes this transaction
is underway.

00:31:23.156 --> 00:31:25.276 A:middle
I'm going to take that
breakpoint out because

00:31:25.276 --> 00:31:26.166 A:middle
that can get a big noisy.

00:31:26.166 --> 00:31:28.466 A:middle
But let's let the app continue
and see what happens here.

00:31:29.356 --> 00:31:31.156 A:middle
So I've been prompted
to sign in.

00:31:31.866 --> 00:31:34.396 A:middle
Now one thing to note is
because this is a test app,

00:31:34.966 --> 00:31:38.216 A:middle
I'm using the App
Store test environment.

00:31:38.756 --> 00:31:40.416 A:middle
That is I have my app signed

00:31:40.786 --> 00:31:42.956 A:middle
with my development
certificate as we see here.

00:31:44.276 --> 00:31:45.506 A:middle
Scroll down to the code sign.

00:31:45.506 --> 00:31:47.666 A:middle
Sometimes it's easy to just
search here for code signing.

00:31:48.656 --> 00:31:51.946 A:middle
Of course you need to
set it all and combine.

00:31:54.036 --> 00:31:56.336 A:middle
See here my code
signing identity is set

00:31:56.336 --> 00:31:57.286 A:middle
to Mac developer.

00:31:58.006 --> 00:32:01.256 A:middle
This makes sure that my app is
development-signed when it runs.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.006 --> 00:32:01.256 A:middle
This makes sure that my app is
development-signed when it runs.

00:32:01.256 --> 00:32:03.346 A:middle
That means that when we
start using StoreKit,

00:32:03.626 --> 00:32:05.646 A:middle
StoreKit can inspect
our code signature --

00:32:05.646 --> 00:32:08.376 A:middle
the code signature of
this app and it can know

00:32:08.376 --> 00:32:10.516 A:middle
that because it's
development-signed it needs

00:32:10.516 --> 00:32:13.486 A:middle
to talk to the test environment,
not the production App store.

00:32:13.866 --> 00:32:16.316 A:middle
And that allows us to test our
In-App Purchase implementation

00:32:16.316 --> 00:32:17.856 A:middle
before we have anything
on the store.

00:32:17.856 --> 00:32:21.406 A:middle
So I'm going to go ahead
here and enter my password.

00:32:23.416 --> 00:32:24.296 A:middle
Cool, yep.

00:32:24.296 --> 00:32:27.356 A:middle
I definitely want
to buy this banana.

00:32:27.446 --> 00:32:28.706 A:middle
And I've already purchased it.

00:32:29.066 --> 00:32:30.336 A:middle
I've done this demo
a few times now.

00:32:31.336 --> 00:32:34.406 A:middle
And see here when we
get the final thank you

00:32:34.406 --> 00:32:36.736 A:middle
through form StoreKit
and from the App store,

00:32:37.166 --> 00:32:39.136 A:middle
we're already back
in in our app,

00:32:39.276 --> 00:32:40.636 A:middle
we've got our breakpoint fired

00:32:40.916 --> 00:32:43.906 A:middle
in the SKPayment
transaction state purchased.

00:32:44.766 --> 00:32:47.236 A:middle
This is where we can then go
ahead and inspect what it was

00:32:47.236 --> 00:32:49.986 A:middle
that was bought by looking at
the receipt, unlocking features

00:32:49.986 --> 00:32:52.766 A:middle
and content, and then whatever
else we need to do based

00:32:52.766 --> 00:32:54.106 A:middle
on this purchase
having occurred.

00:32:56.556 --> 00:33:00.496 A:middle
But right now, at this point
because of the breakpoint,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:56.556 --> 00:33:00.496 A:middle
But right now, at this point
because of the breakpoint,

00:33:01.336 --> 00:33:02.566 A:middle
notice that I have not

00:33:02.656 --> 00:33:07.086 A:middle
yet called FinishTransaction
I've made breakpoint right

00:33:07.086 --> 00:33:08.176 A:middle
at the point when
I would normally go

00:33:08.176 --> 00:33:10.046 A:middle
and check the receipt
to know what they bought

00:33:10.936 --> 00:33:12.996 A:middle
and unlock those features
and content accordingly.

00:33:14.276 --> 00:33:17.156 A:middle
But what if I hit
the Stop button

00:33:17.156 --> 00:33:18.636 A:middle
up here in my app in X code?

00:33:19.276 --> 00:33:22.016 A:middle
This is just like what would
happen if my app crashed midway

00:33:22.016 --> 00:33:24.436 A:middle
through the In-App
Purchase, or what would happen

00:33:24.436 --> 00:33:25.496 A:middle
if user killed your app,

00:33:25.496 --> 00:33:27.236 A:middle
or quite your app
during the purchase.

00:33:27.236 --> 00:33:28.446 A:middle
Or maybe something
else happened,

00:33:28.446 --> 00:33:30.086 A:middle
lost network, whatever
it may be.

00:33:31.086 --> 00:33:32.386 A:middle
The important thing is here --

00:33:32.876 --> 00:33:36.836 A:middle
let's put this breakpoint back
on, when my app next launches

00:33:36.836 --> 00:33:40.146 A:middle
and this applies to iOS and
OS X, watch what happens,

00:33:40.676 --> 00:33:45.626 A:middle
on launch I was immediately
taken again

00:33:46.056 --> 00:33:48.316 A:middle
into Payment Queue
Updated Transactions.

00:33:48.986 --> 00:33:52.276 A:middle
Why? Because that transaction
hadn't finished yet.

00:33:52.756 --> 00:33:54.656 A:middle
Your app crashed
midway through handling

00:33:54.656 --> 00:33:58.976 A:middle
that even though the user had
paid for what they've bought.

00:33:58.976 --> 00:34:01.486 A:middle
So this is why it's so important
to always observe the queue


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.976 --> 00:34:01.486 A:middle
So this is why it's so important
to always observe the queue

00:34:01.486 --> 00:34:03.626 A:middle
and handle any and every
transaction that occurs

00:34:03.626 --> 00:34:05.676 A:middle
through here in a
way that doesn't rely

00:34:05.676 --> 00:34:07.396 A:middle
on you tracking any
state yourself.

00:34:08.666 --> 00:34:10.366 A:middle
So this time I'm going
to let this go through.

00:34:10.426 --> 00:34:12.826 A:middle
And it goes through
and make sure

00:34:12.826 --> 00:34:14.606 A:middle
that we do actually
finish that transaction.

00:34:17.126 --> 00:34:18.886 A:middle
One thing I did want to
note, we mentioned before

00:34:18.886 --> 00:34:20.166 A:middle
about the updating of UI.

00:34:20.806 --> 00:34:22.346 A:middle
Let's go through
this process again.

00:34:22.346 --> 00:34:24.045 A:middle
I'm going to set
a breakpoint here

00:34:24.045 --> 00:34:26.106 A:middle
on transaction state purchasing.

00:34:27.196 --> 00:34:30.866 A:middle
Now when I run this
lets buy a banana again.

00:34:31.335 --> 00:34:35.545 A:middle
Just take note of the
fact that this time

00:34:35.545 --> 00:34:41.766 A:middle
around my breakpoint here was
called on the main thread.

00:34:42.376 --> 00:34:45.176 A:middle
But you shouldn't necessarily
make any assumptions

00:34:45.246 --> 00:34:47.656 A:middle
about which thread you
will get the call backs on.

00:34:48.466 --> 00:34:50.426 A:middle
So if you're updating
UI elements in here

00:34:50.426 --> 00:34:53.005 A:middle
such as setting the button
state, graying things out,

00:34:53.005 --> 00:34:54.456 A:middle
anything in UI kit or app kit,

00:34:54.926 --> 00:34:56.886 A:middle
make sure you don't make an
assumption about which thread

00:34:56.886 --> 00:35:00.006 A:middle
that message comes in on and
dispatch it to main if you have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:56.886 --> 00:35:00.006 A:middle
that message comes in on and
dispatch it to main if you have

00:35:00.096 --> 00:35:02.246 A:middle
to to work safely with
App Kit and UI kit.

00:35:02.246 --> 00:35:06.386 A:middle
Okay, let's go back
to the slides.

00:35:06.386 --> 00:35:14.056 A:middle
Let's move on to the
post sales experience.

00:35:14.956 --> 00:35:17.216 A:middle
So we showed a beautiful
UI to the user,

00:35:17.656 --> 00:35:18.716 A:middle
we enticed them to buy.

00:35:19.296 --> 00:35:21.296 A:middle
The buy process was
smooth and seamless.

00:35:21.936 --> 00:35:24.886 A:middle
Now you've got to make good
on what they've paid for.

00:35:26.376 --> 00:35:29.756 A:middle
In particular you need to
process the transaction

00:35:30.286 --> 00:35:31.206 A:middle
through the payment queue.

00:35:32.246 --> 00:35:34.916 A:middle
Then you need to make that asset
or content or feature available

00:35:34.916 --> 00:35:36.556 A:middle
and this may mean
downloading content.

00:35:37.276 --> 00:35:39.686 A:middle
And then of course
finish the transaction.

00:35:40.666 --> 00:35:43.476 A:middle
Now in the post-sale experience
there's three key things you're

00:35:43.476 --> 00:35:44.356 A:middle
going to want to do.

00:35:45.136 --> 00:35:48.776 A:middle
The first is validate the
purchase, verify the receipt

00:35:48.776 --> 00:35:51.756 A:middle
from that transaction and
you can verify that on device

00:35:51.826 --> 00:35:53.616 A:middle
or on a server to server
level if you're handing

00:35:53.616 --> 00:35:54.816 A:middle
out content from servers.

00:35:55.466 --> 00:35:57.036 A:middle
And that is your way to confirm

00:35:57.036 --> 00:36:00.646 A:middle
that it was a real monetary
transaction that is authentic


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:57.036 --> 00:36:00.646 A:middle
that it was a real monetary
transaction that is authentic

00:36:00.646 --> 00:36:03.476 A:middle
and trusted and occurred with
the production App store.

00:36:04.416 --> 00:36:06.776 A:middle
Again, 10:15 Friday come along

00:36:06.776 --> 00:36:09.206 A:middle
and let me tell you
all about that.

00:36:10.046 --> 00:36:13.476 A:middle
The next thing you want to do
is give them what they paid for.

00:36:13.476 --> 00:36:14.646 A:middle
And especially if you have

00:36:14.706 --> 00:36:16.566 A:middle
to download content
for that feature.

00:36:17.016 --> 00:36:19.056 A:middle
Obviously as apps
become more and more rich

00:36:19.056 --> 00:36:21.546 A:middle
in the features they
offer, it often makes sense

00:36:21.636 --> 00:36:25.196 A:middle
to have a smaller binary
for the actual app itself

00:36:25.266 --> 00:36:27.106 A:middle
and then download extra content

00:36:27.106 --> 00:36:28.616 A:middle
as those In-App Purchases
are made.

00:36:29.296 --> 00:36:32.226 A:middle
You can host that with us, or
you could have it self-hosted.

00:36:32.626 --> 00:36:35.416 A:middle
And then lastly,
depending on the type

00:36:35.416 --> 00:36:38.036 A:middle
of transaction there may
be a need to persist state

00:36:38.226 --> 00:36:40.936 A:middle
about the transaction
having occurred or be able

00:36:40.936 --> 00:36:42.886 A:middle
to handle the situation
where the user needs

00:36:42.886 --> 00:36:45.066 A:middle
to restore the previous
transactions

00:36:45.066 --> 00:36:45.996 A:middle
that they have made.

00:36:47.956 --> 00:36:49.616 A:middle
So a quick word on
receipt validation.

00:36:50.686 --> 00:36:52.806 A:middle
When you do the on-device
validation of the receipt,

00:36:52.806 --> 00:36:55.106 A:middle
that is confirming that there
was a real monetary transaction

00:36:55.106 --> 00:36:57.626 A:middle
with the store, you can then
go and unlock those features

00:36:57.626 --> 00:36:59.376 A:middle
and content within
the app itself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.726 --> 00:37:03.746 A:middle
But increasingly, like I said we
see developers hosting content

00:37:03.746 --> 00:37:06.366 A:middle
either with us or on their
own server infrastructure

00:37:06.746 --> 00:37:09.466 A:middle
that is downloaded when
the purchase takes place.

00:37:10.176 --> 00:37:13.696 A:middle
If you have your own servers
that are issuing that content

00:37:13.926 --> 00:37:15.936 A:middle
out to your users based
on In-App Purchases,

00:37:16.526 --> 00:37:19.086 A:middle
of course you want to make sure
that those servers only hand

00:37:19.086 --> 00:37:22.416 A:middle
that content out to
real paying customers.

00:37:23.526 --> 00:37:26.076 A:middle
And in fact you can to
server to server validation

00:37:26.076 --> 00:37:29.026 A:middle
of receipts using Apple's
online validation service.

00:37:29.556 --> 00:37:32.686 A:middle
And that will allow you to
restrict that access and be sure

00:37:32.686 --> 00:37:34.586 A:middle
that you only hand out
those valuable assets

00:37:35.356 --> 00:37:36.186 A:middle
to people who have paid.

00:37:37.426 --> 00:37:41.666 A:middle
But what you definitely don't
want to do is try and use

00:37:41.666 --> 00:37:44.776 A:middle
that online validation service
directly from the device.

00:37:45.326 --> 00:37:46.786 A:middle
Now there was a time
a little while ago

00:37:46.786 --> 00:37:48.936 A:middle
when that was kind
of okay to do.

00:37:50.166 --> 00:37:53.636 A:middle
But when we introduced iOS 7
we introduce the grand unified

00:37:53.636 --> 00:37:54.486 A:middle
receipt format.

00:37:55.266 --> 00:37:58.796 A:middle
That unified the receipt format
that we use on iOS and OS X.

00:37:58.796 --> 00:38:02.186 A:middle
And it empowered you as the
developer to be able to validate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.796 --> 00:38:02.186 A:middle
And it empowered you as the
developer to be able to validate

00:38:02.186 --> 00:38:04.016 A:middle
that receipt on the
device itself.

00:38:04.806 --> 00:38:07.176 A:middle
That way there was no need
for your app to be calling

00:38:07.176 --> 00:38:08.866 A:middle
out to Apple's validation
service

00:38:09.716 --> 00:38:11.706 A:middle
to get back the information
about that receipt

00:38:11.706 --> 00:38:12.606 A:middle
to know if it was valid.

00:38:13.986 --> 00:38:15.486 A:middle
So you should no longer be using

00:38:15.666 --> 00:38:18.046 A:middle
that validation service
directly from your device.

00:38:19.536 --> 00:38:21.346 A:middle
It's okay to do it
from your service

00:38:21.736 --> 00:38:22.966 A:middle
to the validation service.

00:38:23.326 --> 00:38:25.436 A:middle
But as far as your app
running on a device,

00:38:25.886 --> 00:38:27.806 A:middle
it should either validate
the receipt locally,

00:38:28.216 --> 00:38:30.746 A:middle
or pass that receipt up
to your service first,

00:38:30.856 --> 00:38:34.496 A:middle
then your service can talk to
the Apple validation service

00:38:34.756 --> 00:38:35.976 A:middle
to know if the receipt is valid.

00:38:37.206 --> 00:38:41.176 A:middle
And those iOS 6 APIs they
are in fact deprecated now,

00:38:41.596 --> 00:38:45.986 A:middle
so you really need to
move away from those.

00:38:47.416 --> 00:38:49.866 A:middle
Downloading content,
especially in terms

00:38:49.866 --> 00:38:52.546 A:middle
of ensuring a very
hassle-free, smooth,

00:38:53.026 --> 00:38:55.516 A:middle
and great In-App Purchase
experience every time,

00:38:55.906 --> 00:38:58.806 A:middle
downloading content is a really
important area to focus on.

00:38:59.486 --> 00:39:01.346 A:middle
At this point in time
the user has paid


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.486 --> 00:39:01.346 A:middle
At this point in time
the user has paid

00:39:01.346 --> 00:39:03.316 A:middle
for what you're offering right?

00:39:03.396 --> 00:39:05.236 A:middle
They've done their side of
the bargain they've paid you.

00:39:06.056 --> 00:39:08.816 A:middle
Now it's up to you to deliver
what they've paid for as quickly

00:39:08.816 --> 00:39:11.416 A:middle
and reliably as possible
every single time.

00:39:12.386 --> 00:39:14.536 A:middle
One of the great ways
you can do that is

00:39:14.536 --> 00:39:16.776 A:middle
by using Apple's hosted
In-App Purchase feature.

00:39:17.436 --> 00:39:20.096 A:middle
That allows you to host In-App
Purchase content with us,

00:39:20.426 --> 00:39:21.786 A:middle
it's hosted on our servers,

00:39:21.786 --> 00:39:24.036 A:middle
which are very scalable,
very reliable.

00:39:25.486 --> 00:39:28.006 A:middle
We can download that content
for you in the background,

00:39:28.006 --> 00:39:29.266 A:middle
even when your apps not running.

00:39:29.496 --> 00:39:31.636 A:middle
So once that purchase is
made, the user can switch

00:39:31.636 --> 00:39:34.056 A:middle
around to doing lots of
other things and then

00:39:34.056 --> 00:39:35.686 A:middle
when they get back to your app,

00:39:35.686 --> 00:39:36.936 A:middle
the content's there
and waiting for them.

00:39:36.936 --> 00:39:38.096 A:middle
Great experience for them.

00:39:38.636 --> 00:39:42.276 A:middle
And you can have up to 2 GB
per In-App purchasable product.

00:39:42.636 --> 00:39:44.696 A:middle
That's not 2 gig total per app.

00:39:44.926 --> 00:39:46.906 A:middle
That's 2 gig per
item you are selling

00:39:46.906 --> 00:39:47.926 A:middle
through In-App Purchases.

00:39:48.146 --> 00:39:52.716 A:middle
Now if you're using the hosted
content it's so simple to use.

00:39:53.956 --> 00:39:55.936 A:middle
We're back now in our
payment queue updated

00:39:55.936 --> 00:39:56.946 A:middle
transaction method.

00:39:57.336 --> 00:39:59.886 A:middle
Looping over our transactions
we're receiving updates for.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.646 --> 00:40:03.446 A:middle
If you see a transaction
with a downloads property

00:40:03.446 --> 00:40:05.886 A:middle
and that download property
contains one or more download

00:40:06.496 --> 00:40:07.696 A:middle
and you want to start
downloading

00:40:07.696 --> 00:40:10.926 A:middle
that content, watch
this, simple.

00:40:11.886 --> 00:40:14.276 A:middle
You simply call SKPaymentQueue
start download

00:40:14.276 --> 00:40:16.176 A:middle
and hand those downloads
over to us.

00:40:16.666 --> 00:40:18.826 A:middle
StoreKit in the background
process then takes care

00:40:18.826 --> 00:40:21.806 A:middle
of downloading that content and
gets it to the user as quickly

00:40:21.806 --> 00:40:23.016 A:middle
and seamlessly as possible.

00:40:24.086 --> 00:40:26.296 A:middle
When a download progresses,

00:40:26.676 --> 00:40:30.066 A:middle
you'll also receive updates
via the SKPaymentQueue Observer

00:40:30.066 --> 00:40:32.676 A:middle
Method, payment queue
updated downloads.

00:40:32.776 --> 00:40:35.026 A:middle
This will tell you things like
progress and time remaining,

00:40:35.346 --> 00:40:36.536 A:middle
as well as state and error.

00:40:37.296 --> 00:40:40.696 A:middle
And when it's finished,
you will get a content URL

00:40:40.696 --> 00:40:44.846 A:middle
where you can locate where that
content has been downloaded to.

00:40:45.466 --> 00:40:47.666 A:middle
Now of course there may be many
reason why you want to host

00:40:47.666 --> 00:40:49.856 A:middle
that In-App Purchase content
yourself and that's okay,

00:40:50.676 --> 00:40:52.936 A:middle
but make sure you use the
background download APIs

00:40:52.936 --> 00:40:55.606 A:middle
to download that for
all the same reasons.

00:40:56.486 --> 00:41:00.406 A:middle
If you're using the standard
old NS URL connection


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:56.486 --> 00:41:00.406 A:middle
If you're using the standard
old NS URL connection

00:41:00.746 --> 00:41:02.496 A:middle
to download this
content, there's going

00:41:02.496 --> 00:41:06.326 A:middle
to be some serious limitations
that you run into particularly

00:41:06.326 --> 00:41:08.486 A:middle
around the fact that you can't
guarantee the download will

00:41:08.486 --> 00:41:10.906 A:middle
start straight away depending
on the network conditions,

00:41:11.796 --> 00:41:13.826 A:middle
and the user would
have to sit there

00:41:13.826 --> 00:41:16.556 A:middle
in your app while
the download happens

00:41:16.556 --> 00:41:17.846 A:middle
to guarantee it completes.

00:41:18.496 --> 00:41:19.206 A:middle
That's not good.

00:41:19.606 --> 00:41:23.926 A:middle
But what you can do is
you can us NS URL session

00:41:24.276 --> 00:41:26.226 A:middle
to do the background
download for you.

00:41:27.026 --> 00:41:28.706 A:middle
There's lots of great
documentation available

00:41:28.706 --> 00:41:30.256 A:middle
for this online, but
here's a quick run

00:41:30.256 --> 00:41:31.216 A:middle
through of how this works.

00:41:31.706 --> 00:41:34.506 A:middle
You create your NS URL
session configuration

00:41:34.506 --> 00:41:37.326 A:middle
by giving it a name, I've called
here my background download --

00:41:37.406 --> 00:41:38.326 A:middle
my background session.

00:41:38.886 --> 00:41:41.326 A:middle
And then when we've got
our session configured,

00:41:41.326 --> 00:41:43.486 A:middle
we create the session itself
and we give it a delegate

00:41:43.546 --> 00:41:46.316 A:middle
to get updates about how the
download's going and a queue

00:41:46.316 --> 00:41:47.856 A:middle
on which to receive
those updates.

00:41:48.116 --> 00:41:49.066 A:middle
That's a dispatch queue.

00:41:50.736 --> 00:41:52.166 A:middle
This will be familiar
with anyone that's work

00:41:52.166 --> 00:41:53.736 A:middle
with NS URL connection before.

00:41:54.136 --> 00:41:57.206 A:middle
You create an NS URL request, in
this case I've just created it

00:41:57.206 --> 00:41:58.846 A:middle
with the URL that
I want to download.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.776 --> 00:42:04.396 A:middle
Then simple as this, I create
the download task using

00:42:04.396 --> 00:42:06.396 A:middle
that request and the
download session.

00:42:07.056 --> 00:42:07.846 A:middle
You see what we did there?

00:42:08.166 --> 00:42:09.886 A:middle
We setup a session to
go and download this

00:42:09.886 --> 00:42:10.836 A:middle
for us in the background.

00:42:11.356 --> 00:42:13.826 A:middle
We told it what we wanted to
go and get and then we went

00:42:13.826 --> 00:42:15.166 A:middle
and created the download task.

00:42:15.306 --> 00:42:18.556 A:middle
And now the OS is taking care of
that for us in the background.

00:42:19.376 --> 00:42:22.116 A:middle
You will get updates
via the delegate method

00:42:22.466 --> 00:42:23.846 A:middle
as to how the download
is progressing

00:42:23.846 --> 00:42:25.256 A:middle
so you can update your UI.

00:42:26.276 --> 00:42:28.326 A:middle
But because these can continue

00:42:28.326 --> 00:42:30.116 A:middle
to happen while your
app's not running,

00:42:30.786 --> 00:42:33.566 A:middle
when your app launches you need
to reconnect to any sessions

00:42:33.566 --> 00:42:34.866 A:middle
that might be in progress

00:42:35.136 --> 00:42:37.066 A:middle
or might have finished while
your app wasn't running.

00:42:37.566 --> 00:42:39.026 A:middle
And this is how you do that.

00:42:39.496 --> 00:42:42.276 A:middle
In your application delegate
you should implement application

00:42:42.276 --> 00:42:44.316 A:middle
handle events for
background URL session.

00:42:44.316 --> 00:42:47.396 A:middle
That will get called on
launch so you can re-establish

00:42:47.396 --> 00:42:49.866 A:middle
that session configuration,
get the session itself,

00:42:50.206 --> 00:42:51.276 A:middle
set your delegate again,

00:42:51.606 --> 00:42:53.526 A:middle
and then get those
same progress updates

00:42:53.526 --> 00:42:54.886 A:middle
about how the download is going.

00:42:56.296 --> 00:42:59.056 A:middle
But no matter how you
download the content,

00:42:59.686 --> 00:43:01.386 A:middle
whether you download
it yourself,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.686 --> 00:43:01.386 A:middle
whether you download
it yourself,

00:43:01.566 --> 00:43:04.286 A:middle
whether you download it
via host In-App Purchases,

00:43:05.096 --> 00:43:07.476 A:middle
you must always call
finishTransaction of course,

00:43:07.916 --> 00:43:11.496 A:middle
but you must do that once you've
completely downloaded the asset

00:43:11.836 --> 00:43:13.406 A:middle
and made it available
to the user.

00:43:15.106 --> 00:43:16.616 A:middle
One thing that can
go horribly wrong

00:43:16.616 --> 00:43:18.606 A:middle
from the user's perspective is

00:43:18.606 --> 00:43:20.656 A:middle
if you call finishTransaction
earlier,

00:43:21.826 --> 00:43:23.146 A:middle
before the download is done,

00:43:23.226 --> 00:43:25.316 A:middle
and then something happens
during the download,

00:43:25.876 --> 00:43:27.706 A:middle
they may have no
way to get back,

00:43:28.256 --> 00:43:30.356 A:middle
or get to that purchase
they've just made.

00:43:31.316 --> 00:43:33.646 A:middle
So you call the
finishTransaction once the

00:43:33.646 --> 00:43:35.706 A:middle
content's downloaded and
you've made it available.

00:43:36.066 --> 00:43:37.896 A:middle
That way only then does
it go out of the queue

00:43:37.996 --> 00:43:40.036 A:middle
and only then will you not
receive further updates

00:43:40.036 --> 00:43:41.846 A:middle
about it.

00:43:43.016 --> 00:43:45.476 A:middle
Now restoring transactions,
this is something you have

00:43:45.476 --> 00:43:46.676 A:middle
to offer -- excuse me.

00:43:46.676 --> 00:43:48.576 A:middle
This is something
you have to offer

00:43:49.256 --> 00:43:51.946 A:middle
if you are selling
non-consumable items

00:43:51.946 --> 00:43:53.376 A:middle
or order renewal subscriptions.

00:43:54.336 --> 00:43:57.326 A:middle
Now, non-consumable items,
they're things like game levels

00:43:57.326 --> 00:44:01.276 A:middle
of maps, or run off purchases
that are designed to be used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:57.326 --> 00:44:01.276 A:middle
of maps, or run off purchases
that are designed to be used

00:44:01.276 --> 00:44:02.616 A:middle
across multiple devices.

00:44:03.926 --> 00:44:06.876 A:middle
Order renewal subscriptions,
they're like your periodicals

00:44:07.216 --> 00:44:09.366 A:middle
where you are setting up
a subscription payment

00:44:09.366 --> 00:44:11.256 A:middle
for ongoing delivery
of new content.

00:44:11.426 --> 00:44:13.536 A:middle
If you're offering
either of those,

00:44:14.306 --> 00:44:16.356 A:middle
you have to make sure
you can offer the ability

00:44:16.596 --> 00:44:18.536 A:middle
to restore previous
transactions.

00:44:18.536 --> 00:44:19.426 A:middle
That is allow the user

00:44:19.426 --> 00:44:21.556 A:middle
to get back what they've
bought before through your app.

00:44:22.146 --> 00:44:25.296 A:middle
Especially if they buy a
new device or otherwise need

00:44:25.296 --> 00:44:27.076 A:middle
to get back what
they've already paid for.

00:44:27.996 --> 00:44:31.196 A:middle
But if you're offering
consumables

00:44:31.196 --> 00:44:32.546 A:middle
and non-renewing subscriptions,

00:44:32.546 --> 00:44:34.566 A:middle
so a consumable might
be something like gas

00:44:34.566 --> 00:44:38.126 A:middle
in a racecar track, gems,
or coins, or currency,

00:44:38.126 --> 00:44:40.726 A:middle
generally an item that's
purchased, then used up,

00:44:40.726 --> 00:44:43.436 A:middle
and ideally purchased
again, and again, and again.

00:44:43.816 --> 00:44:47.006 A:middle
If you're offering
those sorts of items

00:44:47.006 --> 00:44:50.716 A:middle
through In-App Purchase, then
it's up to you, the developer,

00:44:50.716 --> 00:44:51.886 A:middle
to persist that state.

00:44:52.446 --> 00:44:53.756 A:middle
You can't restore those.

00:44:54.666 --> 00:44:56.356 A:middle
Now this comes back to what
I was just saying before

00:44:56.356 --> 00:44:58.266 A:middle
about making sure you
call finishTransaction

00:44:58.266 --> 00:44:59.346 A:middle
at the right point and time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:00.086 --> 00:45:02.156 A:middle
Because you get one
shot at a consumable

00:45:02.156 --> 00:45:03.516 A:middle
and non-renewing subscription.

00:45:04.386 --> 00:45:06.736 A:middle
You have to make sure your
app handles the transaction

00:45:06.736 --> 00:45:08.956 A:middle
properly, makes it
available to the user,

00:45:09.396 --> 00:45:11.656 A:middle
and only then calls
finishTransaction,

00:45:11.656 --> 00:45:12.936 A:middle
because you can't restore those.

00:45:12.936 --> 00:45:15.936 A:middle
But for the content
types you can restore,

00:45:16.456 --> 00:45:18.476 A:middle
you call SKPaymentQueue
default queue

00:45:18.746 --> 00:45:20.456 A:middle
restoreCompletedTransactions.

00:45:21.376 --> 00:45:23.506 A:middle
Now what happens
here, is of course,

00:45:23.656 --> 00:45:24.826 A:middle
you need to observe the queue

00:45:25.696 --> 00:45:28.156 A:middle
because you will receive these
delegate callback methods

00:45:28.376 --> 00:45:30.246 A:middle
such as
restorCompletedTransaction

00:45:30.246 --> 00:45:32.216 A:middle
FailedWithError if
things don't go well,

00:45:33.126 --> 00:45:36.026 A:middle
or paymentQueueRestoreCompleted
TransactionFinished.

00:45:36.916 --> 00:45:38.996 A:middle
At that point you can go
and inspect the receipt

00:45:38.996 --> 00:45:42.666 A:middle
to know what purchases were
restored, unlock those features

00:45:42.666 --> 00:45:49.446 A:middle
and content, but, note that this
requires a network connection

00:45:49.536 --> 00:45:53.316 A:middle
and the user will be prompted to
sign into the store if we have

00:45:53.316 --> 00:45:56.466 A:middle
to verify their identity so that
we know exactly what they've

00:45:56.466 --> 00:45:59.896 A:middle
paid for to get you that list
of restored transactions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:02.076 --> 00:46:06.026 A:middle
Now just because your app has
to offer restore transactions,

00:46:06.206 --> 00:46:08.666 A:middle
it doesn't mean you should
call it all the time.

00:46:09.486 --> 00:46:10.916 A:middle
Because it requires
a network connection

00:46:10.916 --> 00:46:13.746 A:middle
and because it will
require the user to sign in,

00:46:14.306 --> 00:46:17.436 A:middle
it should be something you do
only when the user asks you to.

00:46:18.266 --> 00:46:20.346 A:middle
I know a lot of developers
think it would make sense

00:46:20.346 --> 00:46:22.496 A:middle
to just call restore
transactions every time the app

00:46:22.496 --> 00:46:25.056 A:middle
launches, because
don't they always want

00:46:25.056 --> 00:46:26.196 A:middle
to get back what
they've paid for?

00:46:27.326 --> 00:46:30.796 A:middle
Yes, but when they
have to sign in to do

00:46:30.796 --> 00:46:34.126 A:middle
that it becomes too much of a
heavy-weight process on launch.

00:46:34.736 --> 00:46:37.126 A:middle
So let the app launch and
offer a graceful way for them

00:46:37.126 --> 00:46:39.896 A:middle
to restore transactions if
you have to do that based

00:46:39.896 --> 00:46:41.296 A:middle
on the content types
you're selling.

00:46:43.656 --> 00:46:45.456 A:middle
So let's wrap this
up with a summary.

00:46:46.686 --> 00:46:49.656 A:middle
This is my recipe for
trouble-free In-App Purchases.

00:46:51.976 --> 00:46:56.276 A:middle
So, when you are loading up
your In-App Purchase product

00:46:56.276 --> 00:46:59.246 A:middle
identifiers, the list of product
identifiers that you're going

00:46:59.246 --> 00:47:03.096 A:middle
to sell or offer to the
user, be very careful


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.246 --> 00:47:03.096 A:middle
to sell or offer to the
user, be very careful

00:47:03.096 --> 00:47:05.836 A:middle
about how you choose to host
them and where you host them

00:47:05.836 --> 00:47:07.846 A:middle
if you're not going to bake
them into your app yourself.

00:47:08.546 --> 00:47:11.086 A:middle
Because if that first experience
is a spinner while you want

00:47:11.086 --> 00:47:13.306 A:middle
for that to load, or
even worse an error

00:47:13.306 --> 00:47:14.706 A:middle
because the server
can't be reached,

00:47:15.246 --> 00:47:17.876 A:middle
that totally derails
your sales experience.

00:47:18.896 --> 00:47:21.436 A:middle
Cache appropriately if
you can and avoid delay

00:47:21.436 --> 00:47:24.136 A:middle
in presenting these products
by fetching just ahead of time

00:47:24.136 --> 00:47:25.116 A:middle
if you can anticipate.

00:47:25.546 --> 00:47:28.766 A:middle
A great example of this is if
you've got a racing car game

00:47:28.766 --> 00:47:32.096 A:middle
for example, there's probably
just a lot of conditions

00:47:32.096 --> 00:47:34.226 A:middle
that you can anticipate
around when you're going

00:47:34.226 --> 00:47:35.356 A:middle
to offer In-App Purchases.

00:47:35.356 --> 00:47:37.196 A:middle
Let's say I'm going to
offer an In-App Purchase

00:47:37.756 --> 00:47:39.466 A:middle
that allows the user
to go faster

00:47:39.466 --> 00:47:40.856 A:middle
around the track
next time around,

00:47:41.146 --> 00:47:42.546 A:middle
or somehow upgrades their car.

00:47:42.546 --> 00:47:44.456 A:middle
When are we going to offer that?

00:47:44.886 --> 00:47:47.186 A:middle
Well probably when they come
in dead last in the race,

00:47:47.266 --> 00:47:48.386 A:middle
when they finish last.

00:47:49.086 --> 00:47:52.146 A:middle
So those sorts of things we
could anticipate in code right?

00:47:52.786 --> 00:47:55.486 A:middle
If we know they are about
to cross the finish line

00:47:55.486 --> 00:47:57.336 A:middle
and we know that they're
in a bad position,

00:47:58.396 --> 00:48:00.986 A:middle
just ahead of time go and
grab that product information


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.396 --> 00:48:00.986 A:middle
just ahead of time go and
grab that product information

00:48:02.006 --> 00:48:03.446 A:middle
and make sure you've
got it on hand

00:48:03.656 --> 00:48:06.266 A:middle
for when they cross the
finish line in last place

00:48:06.266 --> 00:48:09.056 A:middle
and then you can offer them a
great way to beat their friends

00:48:09.056 --> 00:48:10.776 A:middle
and finish in first
place next time around.

00:48:12.676 --> 00:48:14.856 A:middle
Likewise, the same applies
when you go and fetch

00:48:14.856 --> 00:48:15.956 A:middle
that product information,

00:48:15.956 --> 00:48:18.156 A:middle
the localized product
information from the App Store.

00:48:18.566 --> 00:48:21.196 A:middle
Fetch only the products
you need.

00:48:22.356 --> 00:48:24.996 A:middle
Sure a lot of you have got 10s,
and 10s, maybe even hundreds

00:48:24.996 --> 00:48:27.176 A:middle
of In-App Purchase
identifiers in your app,

00:48:28.496 --> 00:48:32.336 A:middle
but you're probably only going
to offer 3, 4, 5, maybe 6 items

00:48:32.336 --> 00:48:33.876 A:middle
to the user at any
one point in time.

00:48:34.526 --> 00:48:36.886 A:middle
And because this involves a
round trip to the App Store

00:48:36.886 --> 00:48:40.166 A:middle
and network, you only want to
fetch just the products you need

00:48:40.166 --> 00:48:41.996 A:middle
so that this happens
as quickly as possible.

00:48:42.946 --> 00:48:45.426 A:middle
So fetch it just ahead of time,
just like we said before try

00:48:45.426 --> 00:48:47.286 A:middle
and anticipate when you're
going to display this,

00:48:47.636 --> 00:48:49.996 A:middle
fetch just ahead of time
to avoid any delay there.

00:48:50.306 --> 00:48:52.956 A:middle
It just makes for such a smooth
In-App Purchase experience

00:48:53.416 --> 00:48:55.896 A:middle
if the user can go directly
from the point in time

00:48:55.896 --> 00:48:58.506 A:middle
when they may be enticed to buy
something to being able to tap

00:48:58.576 --> 00:48:59.756 A:middle
that Buy button straightaway.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:01.066 --> 00:49:05.016 A:middle
Now when you show your beautiful
In-App Purchase UI and I've got

00:49:05.016 --> 00:49:07.386 A:middle
to mention earlier today there
was a really great session

00:49:07.386 --> 00:49:09.676 A:middle
called Designing a Great
In-App Purchase experience.

00:49:09.676 --> 00:49:11.416 A:middle
You should really check
out the video of that.

00:49:11.416 --> 00:49:14.656 A:middle
Because it goes far more in
depth about design techniques

00:49:14.656 --> 00:49:17.166 A:middle
about how to provide a great
In-App Purchase experience.

00:49:17.756 --> 00:49:20.366 A:middle
But from a code level make sure

00:49:20.366 --> 00:49:22.746 A:middle
that you ensure proper
localization.

00:49:23.716 --> 00:49:25.736 A:middle
We deal with a global
marketplace.

00:49:26.106 --> 00:49:28.116 A:middle
And just because we're
familiar with a particular way

00:49:28.116 --> 00:49:29.386 A:middle
of representing currency

00:49:29.716 --> 00:49:32.866 A:middle
or a particular display style
doesn't mean everyone else will

00:49:32.866 --> 00:49:35.926 A:middle
like that, let alone want to buy
your app if you get it wrong.

00:49:36.686 --> 00:49:39.386 A:middle
So take care to ensure
great localization.

00:49:39.676 --> 00:49:42.086 A:middle
It makes users feel comfortable
and it makes them feel happy

00:49:42.256 --> 00:49:44.776 A:middle
that the customs they're
familiar with are being enticed

00:49:44.776 --> 00:49:45.916 A:middle
and enjoyed by your app.

00:49:47.406 --> 00:49:48.786 A:middle
Do not convert the
currencies though.

00:49:49.466 --> 00:49:53.356 A:middle
Everything you get back in the
SKProduct object will be correct

00:49:53.356 --> 00:49:55.306 A:middle
for the store that the
user is signed into.

00:49:55.836 --> 00:50:01.316 A:middle
And when they make the
purchase, that is you take


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:55.836 --> 00:50:01.316 A:middle
And when they make the
purchase, that is you take

00:50:01.316 --> 00:50:03.646 A:middle
that SKProduct object,
make and SKPayment throw it

00:50:03.646 --> 00:50:06.636 A:middle
in the payment queue, once
you've added it to the queue,

00:50:06.726 --> 00:50:07.976 A:middle
step back, and be hands-off.

00:50:08.516 --> 00:50:09.796 A:middle
There's no step three, remember?

00:50:10.096 --> 00:50:12.696 A:middle
Create the payment, add it
to the queue, that's it.

00:50:12.696 --> 00:50:16.046 A:middle
Let the payment queue then
drive the further updates.

00:50:16.316 --> 00:50:19.336 A:middle
And then process those updates.

00:50:20.246 --> 00:50:21.776 A:middle
Make sure you verify the receipt

00:50:21.776 --> 00:50:23.696 A:middle
to make sure it's a real
monetary transaction

00:50:23.696 --> 00:50:24.666 A:middle
that happened with the App Store

00:50:24.666 --> 00:50:25.956 A:middle
and that nothing
funny's going on.

00:50:26.476 --> 00:50:28.226 A:middle
Unlock those features
and content as soon

00:50:28.226 --> 00:50:30.436 A:middle
as you possibly can
for a great experience.

00:50:31.126 --> 00:50:34.376 A:middle
And avoid deprecated APIs and
unsafe receipt verification

00:50:34.566 --> 00:50:35.516 A:middle
that could leave you opened

00:50:35.516 --> 00:50:37.426 A:middle
to unauthorized transactions
occurring.

00:50:38.306 --> 00:50:40.506 A:middle
If you've got to
download content

00:50:40.506 --> 00:50:43.626 A:middle
to make a feature available,
get that asset as reliably

00:50:43.626 --> 00:50:44.746 A:middle
and quickly as possible.

00:50:44.946 --> 00:50:46.456 A:middle
Use our In-App Purchases
if you can.

00:50:46.926 --> 00:50:49.106 A:middle
If not, if you're going
to download it yourself.

00:50:49.586 --> 00:50:52.886 A:middle
Make sure you use those
background download APIs.

00:50:54.546 --> 00:50:58.776 A:middle
And lastly make sure you
finish the transaction.

00:50:59.976 --> 00:51:03.476 A:middle
If you need more
information, there is --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.976 --> 00:51:03.476 A:middle
If you need more
information, there is --

00:51:03.476 --> 00:51:05.856 A:middle
we an evangelist mailing list
setup that you're welcome

00:51:05.856 --> 00:51:08.386 A:middle
to email to get help from our
wonderful evangelist team.

00:51:09.136 --> 00:51:11.276 A:middle
There is also the In-App
Purchase programming guide

00:51:11.276 --> 00:51:13.966 A:middle
available online and also the
StoreKit framework reference.

00:51:14.496 --> 00:51:16.006 A:middle
And there's the Apple
developer forums

00:51:16.006 --> 00:51:18.256 A:middle
that are great resources
wealth for discussion and help.

00:51:19.116 --> 00:51:21.416 A:middle
There are some related
session that I mentioned,

00:51:21.846 --> 00:51:23.286 A:middle
Preventing Unauthorized
Purchases

00:51:23.286 --> 00:51:25.236 A:middle
with Receipt that's me
again on Friday morning

00:51:25.416 --> 00:51:26.486 A:middle
up in Pacific Heights.

00:51:27.306 --> 00:51:29.446 A:middle
That's where we'll take you
through how to make sure

00:51:29.446 --> 00:51:30.706 A:middle
that your revenue is protected

00:51:30.996 --> 00:51:32.656 A:middle
and your business
model is enforced

00:51:32.656 --> 00:51:34.216 A:middle
in your app and your service.

00:51:34.446 --> 00:51:36.316 A:middle
If you care about your
revenue come along

00:51:36.316 --> 00:51:38.986 A:middle
and let's talk about it.

00:51:39.066 --> 00:51:41.026 A:middle
Also, designing a great
In-App Purchase experience.

00:51:41.026 --> 00:51:43.536 A:middle
Rachel did an amazing
job this morning in here,

00:51:43.666 --> 00:51:44.776 A:middle
telling developers how

00:51:44.776 --> 00:51:47.316 A:middle
to structure their
In-App Purchase UI

00:51:47.396 --> 00:51:49.086 A:middle
to deliver a great
experience every time.

00:51:49.336 --> 00:51:50.826 A:middle
The video should be
available shortly.

00:51:51.436 --> 00:51:54.176 A:middle
And lastly, Chris Espinosa's
session tomorrow, or Thursday.

00:51:54.556 --> 00:51:57.806 A:middle
He's really good if your app in
particular is targeted at kids.

00:51:58.246 --> 00:51:59.416 A:middle
Thank you very much.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.516 --> 00:52:07.550 A:middle
[ Applause ]

