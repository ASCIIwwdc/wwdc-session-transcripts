WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:13.536 --> 00:00:14.126 A:middle
&gt;&gt; All right.

00:00:14.166 --> 00:00:15.086 A:middle
Good morning, everyone.

00:00:15.356 --> 00:00:17.046 A:middle
Good to see you all
here bright and early.

00:00:17.256 --> 00:00:20.216 A:middle
We're here today to talk to
you about internationalization.

00:00:21.786 --> 00:00:24.046 A:middle
Now if you've been
following along

00:00:24.046 --> 00:00:25.346 A:middle
with our previous years' talks

00:00:25.346 --> 00:00:26.836 A:middle
on international
support then you know

00:00:26.836 --> 00:00:28.836 A:middle
that the App Store
is available in many,

00:00:28.836 --> 00:00:31.936 A:middle
many countries worldwide,
more than 150 by last count.

00:00:32.646 --> 00:00:35.476 A:middle
So I'm sure you've all
made your apps localizable,

00:00:35.476 --> 00:00:37.496 A:middle
so you can send them
out to localizers

00:00:37.496 --> 00:00:40.126 A:middle
and make them available
in multiple languages.

00:00:41.246 --> 00:00:42.456 A:middle
Is that sufficient though?

00:00:42.726 --> 00:00:44.676 A:middle
Well, not necessarily.

00:00:45.166 --> 00:00:48.956 A:middle
You need to take some care with
regard to internationalization,

00:00:49.426 --> 00:00:53.056 A:middle
otherwise you might end up
with complaints like say,

00:00:54.176 --> 00:00:57.676 A:middle
half of the contact names show
up backwards in their app.

00:00:57.676 --> 00:01:00.326 A:middle
Or, the dates in this
application are unreadable.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.676 --> 00:01:00.326 A:middle
Or, the dates in this
application are unreadable.

00:01:00.326 --> 00:01:02.146 A:middle
Or, my text is all messed up.

00:01:03.176 --> 00:01:06.546 A:middle
Working in this area we've seen
problems like this occur many,

00:01:06.546 --> 00:01:09.406 A:middle
many times, and we're here today
to tell you how to fix them.

00:01:09.406 --> 00:01:13.436 A:middle
What we're going to
do is, first of all,

00:01:13.876 --> 00:01:15.936 A:middle
we'll run through what
we have that's new

00:01:15.936 --> 00:01:18.906 A:middle
in international support
in Yosemite and iOS 8.

00:01:19.446 --> 00:01:22.266 A:middle
Then we'll go into
detail about language

00:01:22.266 --> 00:01:23.536 A:middle
and locale when you use what.

00:01:23.666 --> 00:01:25.166 A:middle
And then we're going
to run through a number

00:01:25.166 --> 00:01:28.136 A:middle
of case studies,
problems that we've seen

00:01:28.456 --> 00:01:32.736 A:middle
in internationalization
and how to fix them.

00:01:32.976 --> 00:01:36.016 A:middle
So let's start off with what's
new in internationalization

00:01:36.386 --> 00:01:38.486 A:middle
and the latest releases
of our operating systems.

00:01:38.486 --> 00:01:41.686 A:middle
We have a number of nice, new
features, both at the user level

00:01:41.906 --> 00:01:44.076 A:middle
and in APIs at the
developer level.

00:01:44.076 --> 00:01:46.886 A:middle
So at the user level
we have for iOS,

00:01:46.886 --> 00:01:51.446 A:middle
a number of new localizations
and some new keyboards.

00:01:51.736 --> 00:01:54.616 A:middle
We've redone the iOS
language and region settings.

00:01:55.916 --> 00:01:58.466 A:middle
And we have some
new improvements

00:01:58.466 --> 00:01:59.736 A:middle
to lunar Calendar support.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.266 --> 00:02:04.346 A:middle
Then in API at the developer
level, we have an API

00:02:04.346 --> 00:02:05.946 A:middle
for string encoding detection.

00:02:06.806 --> 00:02:08.765 A:middle
We have some interesting
new formatters

00:02:08.846 --> 00:02:11.926 A:middle
and something new called
formatting context,

00:02:11.926 --> 00:02:13.336 A:middle
which I'll go into
in a few minutes.

00:02:14.736 --> 00:02:16.546 A:middle
So let's start with
the new localizations

00:02:16.546 --> 00:02:18.036 A:middle
and keyboards we have for iOS.

00:02:18.036 --> 00:02:21.126 A:middle
We have new localizations for
Hindi, for Indian English,

00:02:21.126 --> 00:02:25.786 A:middle
Canadian French, and Hong Kong
Chinese, and some new keyboards.

00:02:25.786 --> 00:02:29.856 A:middle
First of all, for three Indic
languages, Bengali, Marathi

00:02:29.856 --> 00:02:32.936 A:middle
and Urdu, to go along
with our existing Hindi

00:02:32.936 --> 00:02:34.116 A:middle
and Tamil keyboards.

00:02:34.116 --> 00:02:36.516 A:middle
And we also have keyboards
for Indian English,

00:02:36.516 --> 00:02:38.066 A:middle
Filipino and Slovenian.

00:02:38.766 --> 00:02:42.866 A:middle
And there are a number of
other new things like new fonts

00:02:43.136 --> 00:02:44.906 A:middle
for various scripts worldwide.

00:02:47.106 --> 00:02:48.776 A:middle
Second, so you may recall

00:02:48.776 --> 00:02:50.686 A:middle
that in Mavericks we
redid the language

00:02:50.686 --> 00:02:52.046 A:middle
and region settings for OS X.

00:02:52.046 --> 00:02:54.636 A:middle
Well this time around,
it's the turn of iOS.

00:02:54.636 --> 00:02:57.826 A:middle
And in iOS 8, we've redone the
language and region settings,

00:02:58.316 --> 00:03:00.936 A:middle
and they look something
like this now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.316 --> 00:03:00.936 A:middle
and they look something
like this now.

00:03:01.316 --> 00:03:04.386 A:middle
So you can still as always
specify the primary language

00:03:04.386 --> 00:03:05.146 A:middle
for localization.

00:03:06.336 --> 00:03:09.536 A:middle
But now in addition, in
iOS you can also specify,

00:03:09.576 --> 00:03:11.836 A:middle
users can specify the whole list

00:03:11.836 --> 00:03:13.606 A:middle
of their preferred
languages in order.

00:03:14.186 --> 00:03:18.506 A:middle
So one thing this allows you
to do is to localize your apps

00:03:18.836 --> 00:03:22.616 A:middle
into localizations for which
Apple does not provide a primary

00:03:22.696 --> 00:03:26.376 A:middle
OS localization simply because
the users can specify those

00:03:26.376 --> 00:03:28.666 A:middle
ahead of one of the
localizations

00:03:28.666 --> 00:03:30.346 A:middle
that Apple provides, and
then your app will run

00:03:30.346 --> 00:03:34.406 A:middle
in those languages for
the users who need that.

00:03:34.616 --> 00:03:36.336 A:middle
There also is an
advanced setting

00:03:36.336 --> 00:03:38.746 A:middle
that allows specifying
the language

00:03:38.746 --> 00:03:40.466 A:middle
of the region format
independently

00:03:40.876 --> 00:03:41.996 A:middle
of the localization.

00:03:43.316 --> 00:03:45.486 A:middle
We make them the
same by default,

00:03:45.486 --> 00:03:47.466 A:middle
but users can change
them if they like.

00:03:47.466 --> 00:03:50.336 A:middle
And we'll go into that
in more detail later on.

00:03:51.456 --> 00:03:54.176 A:middle
We have some improvements to
our support for lunar calendars.

00:03:54.626 --> 00:03:59.186 A:middle
So in our Calendar applications,
we now have the support

00:03:59.186 --> 00:04:03.586 A:middle
for turning on, as an
overlay, lunar calendar dates


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.186 --> 00:04:03.586 A:middle
for turning on, as an
overlay, lunar calendar dates

00:04:03.586 --> 00:04:05.806 A:middle
in addition to Gregorian dates.

00:04:06.196 --> 00:04:09.096 A:middle
We also have a couple
of new Calendar options.

00:04:09.096 --> 00:04:11.066 A:middle
These are variants on
the Islamic calendar.

00:04:11.366 --> 00:04:13.976 A:middle
Let's take a little
closer look at what the,

00:04:13.976 --> 00:04:18.716 A:middle
so this is Calendar app
with Chinese calendar,

00:04:19.036 --> 00:04:20.666 A:middle
lunar calendar dates, turned on.

00:04:20.666 --> 00:04:23.716 A:middle
You see, they show up as an
overlay underneath the Gregorian

00:04:23.716 --> 00:04:24.156 A:middle
dates here.

00:04:24.156 --> 00:04:27.426 A:middle
It's very useful for
Chinese customers.

00:04:28.596 --> 00:04:30.636 A:middle
And here's what this
looks like in OS X.

00:04:31.996 --> 00:04:33.986 A:middle
And see here the
Gregorian dates on the right

00:04:33.986 --> 00:04:35.966 A:middle
and the lunar calendar
dates on the left.

00:04:36.836 --> 00:04:41.996 A:middle
At the API level, these
are APIs available

00:04:41.996 --> 00:04:46.386 A:middle
at the foundation level
on both iOS and OS X.

00:04:46.386 --> 00:04:48.986 A:middle
So you may recall from some
previous years' text sessions,

00:04:48.986 --> 00:04:51.736 A:middle
we talked about the unfortunate
situation that can occur

00:04:52.076 --> 00:04:55.996 A:middle
when you have a TXT file or some
other chunk of external text

00:04:56.356 --> 00:04:58.966 A:middle
and you don't happen to
know what encoding it's in.

00:04:59.556 --> 00:05:03.516 A:middle
Well, in that case, you may
have no other option but to try


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.556 --> 00:05:03.516 A:middle
Well, in that case, you may
have no other option but to try

00:05:03.516 --> 00:05:05.806 A:middle
to guess the encoding
from the text.

00:05:06.346 --> 00:05:10.676 A:middle
We now have a specific API to do
that automatically for you based

00:05:10.676 --> 00:05:12.886 A:middle
on all the evidence that's
available from the text.

00:05:14.086 --> 00:05:15.386 A:middle
And it's very handy.

00:05:15.386 --> 00:05:16.566 A:middle
There are lots of options.

00:05:16.886 --> 00:05:20.186 A:middle
You can have it do the whole
conversion for you once,

00:05:20.186 --> 00:05:22.286 A:middle
or just tell you what it
thinks the encoding is.

00:05:23.426 --> 00:05:26.286 A:middle
You can have lossy or
non-lossy conversion.

00:05:26.586 --> 00:05:29.286 A:middle
And if you happen to think you
known what encoding it's likely

00:05:29.286 --> 00:05:32.696 A:middle
to be in, you can specify those,
or you can require it to be one

00:05:32.696 --> 00:05:34.516 A:middle
of a certain list of encodings.

00:05:36.586 --> 00:05:38.806 A:middle
We also have a number
of nice, new formatters.

00:05:39.536 --> 00:05:42.076 A:middle
So NSDateFormatter is great
if the thing you're trying

00:05:42.076 --> 00:05:46.056 A:middle
to format is a date, a
particular moment in time.

00:05:46.676 --> 00:05:49.946 A:middle
But what if what you're trying
to format is more like an amount

00:05:49.946 --> 00:05:51.446 A:middle
of time, extent, or an interval.

00:05:52.466 --> 00:05:54.616 A:middle
We have
NSDateComponentsFormatter

00:05:54.996 --> 00:05:59.966 A:middle
for displaying durations or
amounts of time, number of hours

00:05:59.966 --> 00:06:01.736 A:middle
or minutes or weeks
or what have you.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.966 --> 00:06:01.736 A:middle
or minutes or weeks
or what have you.

00:06:03.266 --> 00:06:06.146 A:middle
You can specify the amount
of time either as a start

00:06:06.146 --> 00:06:09.426 A:middle
and an end date or a time
interval, or you can specify all

00:06:09.426 --> 00:06:11.036 A:middle
of the components
individually if you like.

00:06:12.006 --> 00:06:14.086 A:middle
Then you can specify how
it's supposed to be formatted

00:06:14.366 --> 00:06:17.666 A:middle
with one of a list of
date and time styles.

00:06:18.086 --> 00:06:20.676 A:middle
And you can also get
to specify exactly

00:06:20.756 --> 00:06:22.896 A:middle
which of the components
you want displayed.

00:06:24.376 --> 00:06:26.066 A:middle
And there are some
interesting things too.

00:06:26.476 --> 00:06:29.296 A:middle
You can turn on, in a
locale-sensitive way,

00:06:29.296 --> 00:06:33.826 A:middle
you can add language to it that
says "about" a certain amount

00:06:33.826 --> 00:06:35.426 A:middle
of time, if this is
an approximate time.

00:06:35.566 --> 00:06:39.616 A:middle
Or the locale-sensitive
way of saying "remaining".

00:06:39.616 --> 00:06:42.266 A:middle
For example, if this is a sort
of countdown of some sort.

00:06:42.836 --> 00:06:46.236 A:middle
So here are some examples of
this in various languages.

00:06:46.606 --> 00:06:49.346 A:middle
You can as I say,
choose various styles,

00:06:49.346 --> 00:06:52.406 A:middle
either a lengthy spell-out kind
of style, something shorter,

00:06:52.406 --> 00:06:53.916 A:middle
something very short
and numerical only.

00:06:54.286 --> 00:06:56.866 A:middle
And the last line shows
the "about" option.

00:06:57.806 --> 00:07:01.986 A:middle
Now one thing I want you
to notice here is that some


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.806 --> 00:07:01.986 A:middle
Now one thing I want you
to notice here is that some

00:07:01.986 --> 00:07:05.126 A:middle
of these have their
first word capitalized.

00:07:05.486 --> 00:07:06.406 A:middle
Well that's appropriate

00:07:06.406 --> 00:07:07.886 A:middle
since they're showing
up in the table here.

00:07:08.786 --> 00:07:12.946 A:middle
But there are other contexts
where you might want these not

00:07:12.946 --> 00:07:14.096 A:middle
to have the first
word capitalized,

00:07:14.096 --> 00:07:16.376 A:middle
say if they were showing up
in the middle of a sentence.

00:07:17.016 --> 00:07:19.746 A:middle
And I'll talk about that
more in just a minute.

00:07:19.746 --> 00:07:25.076 A:middle
Another new formatter,
NSDateIntervalFormatter,

00:07:25.596 --> 00:07:29.226 A:middle
if what you're trying to
display is a range of times

00:07:30.026 --> 00:07:33.836 A:middle
from some beginning time or
date to some end time or date,

00:07:34.236 --> 00:07:37.366 A:middle
you might want in
this case to say,

00:07:37.706 --> 00:07:41.346 A:middle
not to shown only once
the pieces that are common

00:07:41.446 --> 00:07:43.026 A:middle
to the start and end date.

00:07:43.026 --> 00:07:44.856 A:middle
NSDateIntervalFormatter
will do that for you.

00:07:45.746 --> 00:07:47.556 A:middle
You provide the start
date and the end date.

00:07:48.666 --> 00:07:53.286 A:middle
You can specify again any of
a list of date or time styles

00:07:53.586 --> 00:07:57.766 A:middle
or a template for full control
over which pieces get displayed.

00:07:58.846 --> 00:08:00.366 A:middle
So here are some
examples of this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.846 --> 00:08:00.366 A:middle
So here are some
examples of this.

00:08:00.516 --> 00:08:01.966 A:middle
And again, in various languages,

00:08:02.286 --> 00:08:05.046 A:middle
so you can see it can
show a range of dates,

00:08:05.046 --> 00:08:07.836 A:middle
or a range of times, or a
range of dates and times,

00:08:08.306 --> 00:08:12.306 A:middle
and appropriately the pieces
that are common to the start

00:08:12.306 --> 00:08:14.506 A:middle
and end are only shown once.

00:08:16.796 --> 00:08:22.376 A:middle
We also have some specific
formatters for particular kinds

00:08:22.416 --> 00:08:24.166 A:middle
of quantities: energy,
length and mass.

00:08:25.146 --> 00:08:26.576 A:middle
That's NSEnergyFormatter,

00:08:26.576 --> 00:08:28.206 A:middle
NSLengthFormatter,
NSMassFormatter.

00:08:28.446 --> 00:08:31.376 A:middle
This is very useful, for
example, if you're working

00:08:31.376 --> 00:08:34.395 A:middle
with HealthKit and you're
trying to display, say,

00:08:35.066 --> 00:08:36.905 A:middle
the number of calories
a person has consumed,

00:08:36.905 --> 00:08:38.885 A:middle
or how tall they are,
how far they run,

00:08:38.885 --> 00:08:40.216 A:middle
or how much they weigh.

00:08:42.056 --> 00:08:46.276 A:middle
And it will show these numeric
parts plus a localized unit.

00:08:46.746 --> 00:08:48.836 A:middle
You can specify the
exact unit you want,

00:08:48.836 --> 00:08:51.746 A:middle
or you can request
locale-appropriate unit,

00:08:51.746 --> 00:08:53.886 A:middle
whatever's standard in
that particular locale.

00:08:54.356 --> 00:08:56.326 A:middle
There's a number
formatter attached to it,

00:08:56.566 --> 00:08:58.546 A:middle
so you can use all the
number formatter options

00:08:58.546 --> 00:08:59.856 A:middle
for formatting the numeric part.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.986 --> 00:09:03.016 A:middle
And there's a special
option you can check

00:09:03.386 --> 00:09:05.796 A:middle
if that mass is particularly
for a person's weight

00:09:05.796 --> 00:09:07.206 A:middle
or if the energy is
particularly for food

00:09:07.206 --> 00:09:11.466 A:middle
because there may be particular
standards for displaying those.

00:09:12.106 --> 00:09:18.016 A:middle
So here are some examples of
that in various languages.

00:09:18.056 --> 00:09:24.206 A:middle
You can see that the units
vary, and the numbers,

00:09:24.456 --> 00:09:29.056 A:middle
you can choose an
appropriate format for those.

00:09:29.836 --> 00:09:31.716 A:middle
Finally, formatting context.

00:09:32.006 --> 00:09:34.816 A:middle
Now remember as I mentioned
before, you may need

00:09:34.816 --> 00:09:37.826 A:middle
to have a piece of
text that's formatted.

00:09:37.826 --> 00:09:39.946 A:middle
You might want to capitalize
differently depending

00:09:39.946 --> 00:09:41.036 A:middle
on where it's showing up.

00:09:41.906 --> 00:09:44.556 A:middle
And for some languages there
are other transformations

00:09:44.556 --> 00:09:48.826 A:middle
that may need to apply depending
on where it shows up in your UI.

00:09:49.136 --> 00:09:52.296 A:middle
So we have a new property of
formatting context available

00:09:52.296 --> 00:09:54.886 A:middle
for date and number formatter
and date components formatter

00:09:54.886 --> 00:09:56.276 A:middle
and byte count formatter
currently.

00:09:57.226 --> 00:09:59.136 A:middle
It's the formatting
context property.

00:09:59.336 --> 00:10:02.706 A:middle
It's one of an enumerated
set of values to specify


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.336 --> 00:10:02.706 A:middle
It's one of an enumerated
set of values to specify

00:10:03.066 --> 00:10:05.226 A:middle
where this formatted
thing is supposed to end

00:10:06.106 --> 00:10:07.676 A:middle
up so it can be capitalized

00:10:07.676 --> 00:10:11.596 A:middle
or otherwise appropriately
changed for its context.

00:10:12.166 --> 00:10:14.466 A:middle
You can choose the standalone
context, for example,

00:10:14.466 --> 00:10:16.526 A:middle
if it's going to appear
by itself in a field.

00:10:17.446 --> 00:10:18.896 A:middle
So that might be capitalized.

00:10:19.366 --> 00:10:22.146 A:middle
The list item context, say,
if it's going to be in a menu

00:10:22.146 --> 00:10:23.036 A:middle
or something like that.

00:10:24.216 --> 00:10:25.636 A:middle
The beginning of
sentence context,

00:10:26.046 --> 00:10:27.876 A:middle
again usually capitalized.

00:10:28.946 --> 00:10:32.176 A:middle
And the middle of the sentence
context probably will not

00:10:32.176 --> 00:10:33.076 A:middle
be capitalized.

00:10:33.446 --> 00:10:38.136 A:middle
But, it may happen that your
formatted result is going

00:10:38.136 --> 00:10:40.166 A:middle
to show up, it's
going to be inserted

00:10:40.166 --> 00:10:43.126 A:middle
into a localized string, and
you don't know a priority

00:10:43.126 --> 00:10:45.746 A:middle
without having that localized
string yet whether it's going

00:10:45.746 --> 00:10:47.296 A:middle
to be at the start or
somewhere in the middle.

00:10:48.046 --> 00:10:50.966 A:middle
So we have another
value, the dynamic value.

00:10:51.256 --> 00:10:54.246 A:middle
You just specify that and
then once it's inserted

00:10:54.296 --> 00:10:58.296 A:middle
into that format string,
it gets automatically,

00:10:58.486 --> 00:11:01.276 A:middle
it automatically detects whether
it's a start or in the middle,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.486 --> 00:11:01.276 A:middle
it automatically detects whether
it's a start or in the middle,

00:11:01.276 --> 00:11:02.676 A:middle
and it will capitalize it

00:11:02.676 --> 00:11:06.536 A:middle
or otherwise change it
appropriately automatically.

00:11:08.186 --> 00:11:09.186 A:middle
So that's what new.

00:11:09.736 --> 00:11:12.546 A:middle
And now I'm going to bring up
my colleague, Deborah Goldsmith

00:11:12.626 --> 00:11:16.756 A:middle
to go into detail about
languages and locales.

00:11:17.606 --> 00:11:18.846 A:middle
&gt;&gt; Thanks, Doug.

00:11:20.236 --> 00:11:21.316 A:middle
Hi, everybody.

00:11:21.596 --> 00:11:25.156 A:middle
Today we're going to talk
about languages and locales,

00:11:25.256 --> 00:11:27.906 A:middle
the differences between
them, and how to use them.

00:11:29.316 --> 00:11:31.526 A:middle
So Doug just showed
us the new language

00:11:31.526 --> 00:11:33.556 A:middle
and region settings in iOS 8.

00:11:34.066 --> 00:11:35.666 A:middle
Here you can see an example.

00:11:35.666 --> 00:11:38.216 A:middle
On the left there's
the language settings.

00:11:38.456 --> 00:11:41.296 A:middle
And you can see there's a list
of three languages, English,

00:11:41.356 --> 00:11:43.746 A:middle
simplified Chinese, and
traditional Chinese.

00:11:44.366 --> 00:11:46.866 A:middle
On the right, you see the
Region or Locale setting,

00:11:47.346 --> 00:11:50.286 A:middle
and that's showing a region
of United States which,

00:11:50.286 --> 00:11:53.346 A:middle
together with English, makes
a locale of U.S. English.

00:11:54.206 --> 00:11:56.836 A:middle
So, why are there
two preferences?

00:11:56.836 --> 00:11:57.726 A:middle
What are they used for?

00:11:58.436 --> 00:12:00.636 A:middle
Well, the language
setting keeps track


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.436 --> 00:12:00.636 A:middle
Well, the language
setting keeps track

00:12:00.636 --> 00:12:03.656 A:middle
of which languages the
user prefers to use.

00:12:04.246 --> 00:12:07.086 A:middle
The Region or Locale
setting keeps track

00:12:07.086 --> 00:12:09.686 A:middle
of which regional conventions
they want to follow.

00:12:10.496 --> 00:12:12.206 A:middle
It's worth pointing
out that neither

00:12:12.206 --> 00:12:15.936 A:middle
of these indicates the language
that users use in documents.

00:12:15.936 --> 00:12:17.556 A:middle
That might be the same language,

00:12:17.586 --> 00:12:19.516 A:middle
but it might be something
completely different.

00:12:19.696 --> 00:12:22.136 A:middle
And we'll talk more about
that a little later on.

00:12:24.416 --> 00:12:26.916 A:middle
So, let's look a
little more closely

00:12:26.916 --> 00:12:28.676 A:middle
at the preferred language list.

00:12:30.316 --> 00:12:31.076 A:middle
What uses it?

00:12:31.646 --> 00:12:33.366 A:middle
Well, probably the
most important thing

00:12:33.366 --> 00:12:35.856 A:middle
that uses the preferred
language list is NSBundle.

00:12:36.306 --> 00:12:39.566 A:middle
It uses that information
to pick the localization

00:12:40.036 --> 00:12:42.026 A:middle
that your app uses when it runs.

00:12:43.376 --> 00:12:45.096 A:middle
But it's also used by NSString.

00:12:45.436 --> 00:12:49.476 A:middle
NSString has several
language-sensitive operations

00:12:49.476 --> 00:12:53.316 A:middle
such as localized string
comparison or breaking text

00:12:53.316 --> 00:12:54.846 A:middle
into words or sentences.

00:12:55.306 --> 00:12:59.106 A:middle
And NSString uses the preferred
language list to determine

00:12:59.106 --> 00:13:00.536 A:middle
which language to use for that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.106 --> 00:13:00.536 A:middle
which language to use for that.

00:13:01.496 --> 00:13:02.976 A:middle
It's also used by WebKit.

00:13:03.536 --> 00:13:06.666 A:middle
Every time WebKit sends a
request to a web server,

00:13:07.246 --> 00:13:11.166 A:middle
it includes in the HTTP header
a field called Accept-Language,

00:13:11.416 --> 00:13:13.666 A:middle
which is essentially the
preferred language list.

00:13:14.076 --> 00:13:16.856 A:middle
The web server looks at
that information and uses it

00:13:16.856 --> 00:13:21.386 A:middle
to decide which language to
use for the page it sends back.

00:13:23.156 --> 00:13:25.286 A:middle
The list is in preference order

00:13:25.646 --> 00:13:27.766 A:middle
from the user's most
preferred language

00:13:27.766 --> 00:13:29.806 A:middle
to the one they want
to see last.

00:13:30.346 --> 00:13:33.256 A:middle
Any languages that the
user is not interested

00:13:33.256 --> 00:13:34.916 A:middle
in don't appear in
the list at all.

00:13:35.896 --> 00:13:38.776 A:middle
So, effectively, it's a little
more complicated than this,

00:13:38.806 --> 00:13:41.986 A:middle
but effectively what apps
and websites do is step

00:13:41.986 --> 00:13:44.646 A:middle
through the list in
order, and they look

00:13:44.646 --> 00:13:46.806 A:middle
for the first language
that they support.

00:13:47.596 --> 00:13:49.776 A:middle
And then they use that
as their localization.

00:13:50.176 --> 00:13:52.416 A:middle
If they don't find a
language that they support,

00:13:52.966 --> 00:13:55.146 A:middle
then they'll use a
default that depends

00:13:55.146 --> 00:13:57.396 A:middle
on the particular
application or website.

00:13:58.206 --> 00:14:02.226 A:middle
By contrast, NSString will
use the very first language


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.206 --> 00:14:02.226 A:middle
By contrast, NSString will
use the very first language

00:14:02.226 --> 00:14:04.476 A:middle
in the list always
as the language

00:14:04.476 --> 00:14:06.606 A:middle
for language-sensitive
operations.

00:14:07.976 --> 00:14:10.376 A:middle
It's worth pointing out that

00:14:11.026 --> 00:14:13.246 A:middle
when the user changes
the language preference,

00:14:13.856 --> 00:14:16.606 A:middle
apps don't pick it up until
the next time they restart.

00:14:16.656 --> 00:14:20.106 A:middle
So, they'll keep using the old
setting until that happens.

00:14:21.916 --> 00:14:25.266 A:middle
So now let's talk about the
Locale or Region setting

00:14:25.266 --> 00:14:28.676 A:middle
in a little bit more detail
and see what it's used for.

00:14:30.296 --> 00:14:33.796 A:middle
Well, most importantly,
it's used for the locale,

00:14:33.796 --> 00:14:35.416 A:middle
in particular, the
current locale.

00:14:35.516 --> 00:14:37.806 A:middle
It determines the
properties of that locale,

00:14:38.366 --> 00:14:39.926 A:middle
many different properties

00:14:39.926 --> 00:14:42.606 A:middle
that determine the
regional conventions.

00:14:43.886 --> 00:14:46.896 A:middle
In turn, that controls the
behavior of formatters,

00:14:46.896 --> 00:14:50.826 A:middle
both the familiar daytime and
number formatters that have been

00:14:50.826 --> 00:14:54.146 A:middle
around for a while, and
also all the new formatters

00:14:54.146 --> 00:14:55.366 A:middle
that Doug just talked about.

00:14:56.346 --> 00:14:59.966 A:middle
It controls the behavior of
calendars, both the calendar

00:14:59.966 --> 00:15:01.706 A:middle
that you're using, for example,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.966 --> 00:15:01.706 A:middle
that you're using, for example,

00:15:02.066 --> 00:15:05.456 A:middle
you might use the Gregorian
calendar in one country

00:15:05.806 --> 00:15:07.296 A:middle
or the Thai Buddhist calendar.

00:15:08.086 --> 00:15:10.776 A:middle
But it also controls
other calendar aspects

00:15:10.776 --> 00:15:13.076 A:middle
such as what's the
first day of the week?

00:15:13.076 --> 00:15:15.156 A:middle
Is it Monday, Sunday
or something else?

00:15:15.786 --> 00:15:19.496 A:middle
Now in contrast to the
language preference,

00:15:20.666 --> 00:15:23.336 A:middle
when the user changes
the locale preference,

00:15:23.736 --> 00:15:25.406 A:middle
apps don't need to restart.

00:15:25.406 --> 00:15:27.906 A:middle
They're supposed to pick up
that new setting right away.

00:15:28.296 --> 00:15:33.486 A:middle
And we'll talk a little bit
more later on on how to do that.

00:15:34.006 --> 00:15:36.046 A:middle
So, what is the locale anyway?

00:15:36.646 --> 00:15:39.756 A:middle
Earlier we saw one example
of the U.S. English locale.

00:15:40.096 --> 00:15:42.326 A:middle
There was a language,
and there was a region.

00:15:42.956 --> 00:15:46.116 A:middle
But locales can have
many more attributes.

00:15:46.416 --> 00:15:48.186 A:middle
There can be an optional script.

00:15:48.286 --> 00:15:51.056 A:middle
For example, you might need
to indicate whether you want

00:15:51.056 --> 00:15:54.716 A:middle
to use Arabic or Cyrillic script
with a particular language.

00:15:55.486 --> 00:15:57.786 A:middle
There can also be keywords added

00:15:57.786 --> 00:16:00.196 A:middle
which fine-tune the
behavior of the locale.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.786 --> 00:16:00.196 A:middle
which fine-tune the
behavior of the locale.

00:16:00.926 --> 00:16:03.226 A:middle
So let's look at one
hypothetical example.

00:16:03.776 --> 00:16:06.566 A:middle
Let's look at a particular
user's current locale

00:16:06.946 --> 00:16:08.976 A:middle
and print out its identifier.

00:16:10.146 --> 00:16:11.006 A:middle
There it is.

00:16:11.526 --> 00:16:15.186 A:middle
So, let's pick it apart and
see what each part means.

00:16:16.086 --> 00:16:17.786 A:middle
So the first part
is the language.

00:16:17.886 --> 00:16:19.316 A:middle
That's Urdu, in this case.

00:16:20.046 --> 00:16:24.456 A:middle
The region is India, so what
the user is saying is they want

00:16:24.456 --> 00:16:28.646 A:middle
to see their dates, times and
so forth in the Urdu language

00:16:28.646 --> 00:16:31.216 A:middle
and following the regional
conventions of India.

00:16:32.546 --> 00:16:35.656 A:middle
But the user also has some
keywords to do some overrides

00:16:35.656 --> 00:16:38.496 A:middle
of the default for
that particular locale.

00:16:38.936 --> 00:16:41.756 A:middle
For example, the
default calendar

00:16:41.756 --> 00:16:44.246 A:middle
in India is the Gregorian
calendar.

00:16:44.626 --> 00:16:47.436 A:middle
But this user wants to
use the Islamic calendar.

00:16:47.846 --> 00:16:49.206 A:middle
Perhaps they do a
lot of business

00:16:49.206 --> 00:16:50.446 A:middle
with people in the Middle East.

00:16:51.916 --> 00:16:55.026 A:middle
In addition, the default
currency for India is the Rupee,

00:16:55.296 --> 00:16:58.376 A:middle
but this user says they
want to use the U.S. dollar

00:16:58.376 --> 00:16:59.566 A:middle
as their default currency.

00:16:59.806 --> 00:17:02.766 A:middle
Again, perhaps because they do
a lot of international business.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.806 --> 00:17:02.766 A:middle
Again, perhaps because they do
a lot of international business.

00:17:05.556 --> 00:17:08.056 A:middle
So locales have a lot
of information in them,

00:17:08.236 --> 00:17:10.566 A:middle
but you shouldn't get
all the information

00:17:10.566 --> 00:17:11.986 A:middle
that you need out of the locale.

00:17:12.445 --> 00:17:14.336 A:middle
There are some things you
should get from elsewhere.

00:17:15.316 --> 00:17:18.796 A:middle
So, you might think that because
there's a region in the locale

00:17:19.126 --> 00:17:20.806 A:middle
that that's where
the user is located.

00:17:21.326 --> 00:17:23.516 A:middle
But the region just
indicates their preference

00:17:23.516 --> 00:17:24.526 A:middle
for certain things.

00:17:24.816 --> 00:17:26.746 A:middle
It doesn't mean that that's
where they actually are.

00:17:27.455 --> 00:17:29.876 A:middle
I can have my region
setting as India.

00:17:29.876 --> 00:17:31.296 A:middle
That doesn't mean
that I'm in India.

00:17:31.976 --> 00:17:35.066 A:middle
So if you need to know where
the user is located or,

00:17:35.066 --> 00:17:37.456 A:middle
more precisely, where
their device is located,

00:17:37.456 --> 00:17:38.606 A:middle
use CoreLocation.

00:17:38.966 --> 00:17:44.436 A:middle
Again, the locale has a
language associated with it.

00:17:44.816 --> 00:17:47.056 A:middle
But that's not necessarily
the language

00:17:47.056 --> 00:17:48.786 A:middle
that your application
is running in.

00:17:49.376 --> 00:17:52.206 A:middle
So if you need to ask
localization questions,

00:17:52.386 --> 00:17:54.766 A:middle
use NSBundle, not NSLocale.

00:17:55.726 --> 00:17:59.056 A:middle
As I mentioned earlier,
the language the user uses

00:17:59.056 --> 00:18:01.946 A:middle
in their documents may
not be the same languages


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.056 --> 00:18:01.946 A:middle
in their documents may
not be the same languages

00:18:01.946 --> 00:18:05.216 A:middle
as either the locale or
the localization language.

00:18:06.036 --> 00:18:08.756 A:middle
Typically you don't need
to know what language is

00:18:08.756 --> 00:18:10.606 A:middle
in a user document
but, if you do,

00:18:10.826 --> 00:18:12.776 A:middle
you can use NSLinguisticTagger.

00:18:16.236 --> 00:18:19.516 A:middle
Again, the region and the
locale is just a preference.

00:18:19.896 --> 00:18:22.586 A:middle
It's not something you
should use for regulatory

00:18:22.586 --> 00:18:26.786 A:middle
or legal purposes or
determining which kind

00:18:27.496 --> 00:18:29.186 A:middle
of credit card to
use or whatever.

00:18:29.186 --> 00:18:31.126 A:middle
For that you'll have
to use other means,

00:18:31.506 --> 00:18:33.096 A:middle
probably talking to a server.

00:18:33.576 --> 00:18:40.286 A:middle
Again, if you're doing financial
or commercial transactions,

00:18:40.656 --> 00:18:43.066 A:middle
they'll be in some
particular currency.

00:18:43.496 --> 00:18:46.656 A:middle
But that's not necessarily
the currency that's indicated

00:18:46.656 --> 00:18:47.716 A:middle
by the current locale.

00:18:48.206 --> 00:18:49.426 A:middle
You should use some other means,

00:18:49.466 --> 00:18:52.206 A:middle
probably having your server
tell you which currency to use.

00:18:52.946 --> 00:18:54.746 A:middle
Now if you know the currency,

00:18:55.166 --> 00:18:57.006 A:middle
if you know the three
letter ISO code,

00:18:57.356 --> 00:18:59.366 A:middle
you can set that on
a number formatter,

00:18:59.766 --> 00:19:01.346 A:middle
and it will then format amounts


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.766 --> 00:19:01.346 A:middle
and it will then format amounts

00:19:01.346 --> 00:19:03.876 A:middle
in that currency using
the user's preferences.

00:19:04.316 --> 00:19:06.276 A:middle
It won't do conversion
between currencies though.

00:19:06.276 --> 00:19:07.926 A:middle
You'll have to handle
that yourself.

00:19:09.366 --> 00:19:11.166 A:middle
Now we've discussed
some of the differences

00:19:11.166 --> 00:19:13.246 A:middle
between languages and locales.

00:19:13.446 --> 00:19:15.296 A:middle
So how do you read
those preferences?

00:19:16.606 --> 00:19:18.136 A:middle
Well, typically you
don't have to.

00:19:18.136 --> 00:19:19.816 A:middle
The system handles this for you.

00:19:20.486 --> 00:19:23.246 A:middle
All of the formatter objects,
including the new ones,

00:19:23.316 --> 00:19:23.986 A:middle
calendars,

00:19:23.986 --> 00:19:28.636 A:middle
locale objects-they'll all use
the user's locale preference

00:19:28.716 --> 00:19:29.366 A:middle
by default.

00:19:29.766 --> 00:19:31.016 A:middle
You don't have to do anything.

00:19:31.896 --> 00:19:35.686 A:middle
If you're doing localization,
use NSBundle,

00:19:35.686 --> 00:19:37.836 A:middle
and that will use the
user's preferences for you.

00:19:37.836 --> 00:19:39.356 A:middle
You don't need to
read them directly.

00:19:40.016 --> 00:19:42.836 A:middle
And again, if you're doing
language-sensitive operations

00:19:42.836 --> 00:19:46.446 A:middle
using NSString, like localized
comparisons for sorting

00:19:46.446 --> 00:19:49.716 A:middle
or searching, NSString will
do the right thing by default.

00:19:50.316 --> 00:19:56.046 A:middle
But you say, "I have
some application in mind.

00:19:56.046 --> 00:19:59.196 A:middle
I have some kind of
decision I need to make

00:19:59.196 --> 00:20:01.416 A:middle
about behavior of
my application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.196 --> 00:20:01.416 A:middle
about behavior of
my application.

00:20:01.736 --> 00:20:04.976 A:middle
Or I need to get localized
resources that are elsewhere.

00:20:05.416 --> 00:20:07.606 A:middle
So I really need to
read these preferences."

00:20:08.516 --> 00:20:11.946 A:middle
Well, even in that case, you
don't need to quite often.

00:20:12.506 --> 00:20:15.616 A:middle
So for example, you might
think you need the language

00:20:15.616 --> 00:20:19.186 A:middle
that your application is running
in in order to control behavior.

00:20:19.706 --> 00:20:22.996 A:middle
Say you wanted to do something
when it's running in English,

00:20:23.026 --> 00:20:25.726 A:middle
but you don't want it to do that
when it's running in Japanese.

00:20:26.646 --> 00:20:28.756 A:middle
Well you don't need to read
the preference for that.

00:20:29.496 --> 00:20:32.096 A:middle
You can use NSBundle to
make this decision for you.

00:20:32.096 --> 00:20:34.826 A:middle
If you wanted to do something
when it's running in English

00:20:34.826 --> 00:20:37.536 A:middle
but not Japanese, put
a localized resource

00:20:37.536 --> 00:20:41.286 A:middle
in your bundle, which has the
value "yes" for English but "no"

00:20:41.286 --> 00:20:44.636 A:middle
for Japanese, and your
application will pick

00:20:44.636 --> 00:20:46.376 A:middle
up the right behavior
automatically.

00:20:47.346 --> 00:20:50.366 A:middle
Now if you are getting
localized information

00:20:50.596 --> 00:20:54.136 A:middle
from outside your
application, then you might need

00:20:54.136 --> 00:20:56.436 A:middle
to know the language you're
running in, and we'll talk

00:20:56.436 --> 00:20:59.836 A:middle
about that in a little bit.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.056 --> 00:21:03.676 A:middle
Similarly, if you have a
set of language resources

00:21:03.886 --> 00:21:06.816 A:middle
from elsewhere, say, they're
stored on a server and you need

00:21:06.816 --> 00:21:09.176 A:middle
to pick the right one,
you might think you'd need

00:21:09.176 --> 00:21:10.936 A:middle
to read the user's
preferred languages.

00:21:11.246 --> 00:21:13.216 A:middle
But NSBundle can
handle this for you.

00:21:13.806 --> 00:21:16.956 A:middle
There's a class method,
preferredLocalizationsFromArray.

00:21:17.536 --> 00:21:21.796 A:middle
You hand it an array, which is
a list of language identifiers

00:21:22.686 --> 00:21:26.236 A:middle
which represent your localized
resources, and it will match

00:21:26.236 --> 00:21:28.036 A:middle
that against the
user's preferences

00:21:28.406 --> 00:21:30.136 A:middle
and pick the right
one for you to use.

00:21:30.136 --> 00:21:32.086 A:middle
You don't need to read
the preferences directly.

00:21:32.086 --> 00:21:35.226 A:middle
And this will use the same
logic that NSBundle uses

00:21:35.596 --> 00:21:38.226 A:middle
when picking localized
resources out of a bundle.

00:21:42.156 --> 00:21:46.026 A:middle
And again, if you need to
know the language content

00:21:46.026 --> 00:21:50.186 A:middle
of a document, which is
unusual but sometimes necessary,

00:21:50.296 --> 00:21:52.056 A:middle
you can use NSLinguisticTagger.

00:21:52.706 --> 00:21:54.486 A:middle
One thing to keep in mind is

00:21:54.486 --> 00:21:57.366 A:middle
that a single document can
have more than one language.

00:21:57.726 --> 00:22:00.426 A:middle
And in fact, you can have
different languages appearing


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.726 --> 00:22:00.426 A:middle
And in fact, you can have
different languages appearing

00:22:00.426 --> 00:22:03.036 A:middle
even in the same
paragraph or sentence.

00:22:06.136 --> 00:22:09.916 A:middle
So, suppose you do need to
get some localized information

00:22:09.916 --> 00:22:12.086 A:middle
from outside your
application's bundle.

00:22:12.486 --> 00:22:14.276 A:middle
How do you go about doing that?

00:22:14.466 --> 00:22:15.736 A:middle
Well, the first thing you need

00:22:15.736 --> 00:22:18.876 A:middle
to know is what language
your application is running

00:22:18.876 --> 00:22:19.616 A:middle
in right now.

00:22:19.966 --> 00:22:21.806 A:middle
That's actually pretty
straightforward.

00:22:21.806 --> 00:22:23.126 A:middle
You just get your main bundle.

00:22:23.476 --> 00:22:25.826 A:middle
You ask it for its
preferred localizations,

00:22:26.176 --> 00:22:29.626 A:middle
and the first object in that
array will be the language code

00:22:29.836 --> 00:22:33.596 A:middle
for the language your
application is using right now.

00:22:34.166 --> 00:22:35.406 A:middle
So, what's an example

00:22:35.406 --> 00:22:36.986 A:middle
of something you
might use that for?

00:22:38.496 --> 00:22:41.886 A:middle
Say your application displays
the names of currencies.

00:22:42.686 --> 00:22:45.366 A:middle
You could ask your localizers
to localize the names

00:22:45.366 --> 00:22:47.606 A:middle
of all the currencies
for you and put it

00:22:47.606 --> 00:22:48.756 A:middle
in your application bundle.

00:22:48.756 --> 00:22:52.056 A:middle
But that's unnecessary, and
NSLocale has that information.

00:22:53.476 --> 00:22:57.666 A:middle
So you can ask a locale for the
localized name of a currency,

00:22:58.126 --> 00:23:01.246 A:middle
but if you do that with the
current locale, you'll get it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.126 --> 00:23:01.246 A:middle
but if you do that with the
current locale, you'll get it

00:23:01.436 --> 00:23:03.406 A:middle
in the language of
the current locale

00:23:03.736 --> 00:23:05.476 A:middle
which may not be
the same language

00:23:05.476 --> 00:23:06.946 A:middle
that your application
is running in.

00:23:06.946 --> 00:23:10.246 A:middle
And then you'll have a mismatch
where the UI of your app is

00:23:10.356 --> 00:23:12.776 A:middle
in one language, but the
currency names are showing

00:23:12.776 --> 00:23:13.376 A:middle
up in another.

00:23:14.256 --> 00:23:18.916 A:middle
So to avoid that, what we do
is we make a locale using the

00:23:18.916 --> 00:23:21.646 A:middle
language ID that we computed
in the previous slide.

00:23:22.286 --> 00:23:24.526 A:middle
So we take the language
ID our app is running in.

00:23:24.566 --> 00:23:25.776 A:middle
We make a locale from it.

00:23:26.026 --> 00:23:29.386 A:middle
And then we ask that locale
what the localized name

00:23:29.386 --> 00:23:30.356 A:middle
of a currency is.

00:23:31.186 --> 00:23:33.006 A:middle
So here's an example
of what you'll get

00:23:33.006 --> 00:23:34.706 A:middle
for three different
localizations

00:23:34.996 --> 00:23:41.836 A:middle
for the ISO currency code CNY:
English, French and Chinese.

00:23:46.196 --> 00:23:49.726 A:middle
Similarly, NSLocale can
give you localized beginning

00:23:49.726 --> 00:23:50.526 A:middle
and end quotes.

00:23:51.366 --> 00:23:55.286 A:middle
And if you want those
quotes to match the language

00:23:55.286 --> 00:23:57.356 A:middle
that your application
is running in, again,

00:23:57.736 --> 00:24:00.806 A:middle
you make a locale using that
language and then query it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.736 --> 00:24:00.806 A:middle
you make a locale using that
language and then query it

00:24:00.806 --> 00:24:02.116 A:middle
for the beginning
and end quotes.

00:24:02.646 --> 00:24:05.566 A:middle
If you wanted the quotes to
match a different language,

00:24:05.896 --> 00:24:07.996 A:middle
say you've retrieved
a webpage and you want

00:24:07.996 --> 00:24:11.796 A:middle
to insert quote marks in it,
then you would use that language

00:24:11.796 --> 00:24:15.096 A:middle
to create the locale and
query it for the quote marks.

00:24:15.606 --> 00:24:17.876 A:middle
So here again is an
example of what you'll get

00:24:17.876 --> 00:24:19.586 A:middle
for three different
localizations:

00:24:20.146 --> 00:24:22.486 A:middle
English, French and Japanese.

00:24:26.916 --> 00:24:30.206 A:middle
So I mentioned a few slides back

00:24:30.386 --> 00:24:32.726 A:middle
that the user can change
their locale preference,

00:24:32.756 --> 00:24:35.736 A:middle
their Region setting, and
apps don't need to restart

00:24:35.736 --> 00:24:36.916 A:middle
for that to take effect.

00:24:36.976 --> 00:24:38.566 A:middle
Apps are supposed
to react to it.

00:24:39.136 --> 00:24:41.076 A:middle
So let me show you
what a lot of apps do

00:24:41.076 --> 00:24:43.386 A:middle
when the user changes
the locale.

00:24:45.216 --> 00:24:47.856 A:middle
Well, unfortunately,
they don't react to it.

00:24:48.276 --> 00:24:52.276 A:middle
And the user is forced to quit
the app and restart it in order

00:24:52.276 --> 00:24:53.596 A:middle
for the change to take effect.

00:24:54.976 --> 00:24:57.576 A:middle
So let's talk about how we're
supposed to handle this.

00:24:58.496 --> 00:25:01.346 A:middle
So the first thing you
need to do is listen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.496 --> 00:25:01.346 A:middle
So the first thing you
need to do is listen

00:25:01.346 --> 00:25:03.996 A:middle
for the notification which
is NSCurrentLocaleDid

00:25:03.996 --> 00:25:05.236 A:middle
ChangeNotification.

00:25:06.246 --> 00:25:08.916 A:middle
. If you have objects
around that use the locale

00:25:08.916 --> 00:25:11.616 A:middle
like formatters or
locale objects,

00:25:12.306 --> 00:25:15.156 A:middle
you'll need to update
their locale property.

00:25:15.926 --> 00:25:17.616 A:middle
But there's a workaround
for this.

00:25:17.616 --> 00:25:20.246 A:middle
If you set up the
object in the first place

00:25:20.246 --> 00:25:23.926 A:middle
to use the auto-updating
variant of the current locale,

00:25:24.416 --> 00:25:25.616 A:middle
you don't need to do anything.

00:25:25.746 --> 00:25:27.166 A:middle
They'll be updated
automatically.

00:25:28.166 --> 00:25:30.146 A:middle
But there's still some
work that needs to be done.

00:25:30.716 --> 00:25:32.886 A:middle
If you have a date
formatter, for example,

00:25:33.176 --> 00:25:35.456 A:middle
that is using template formats,

00:25:35.726 --> 00:25:38.506 A:middle
you'll need to regenerate
those based on the new locale.

00:25:39.406 --> 00:25:40.866 A:middle
And, of course, any strings

00:25:40.866 --> 00:25:43.646 A:middle
that you formatted using
your formatters need

00:25:43.646 --> 00:25:46.456 A:middle
to be created again to
reflect the new locale.

00:25:46.506 --> 00:25:51.756 A:middle
And, finally, if you want
the change in the locale

00:25:51.756 --> 00:25:55.396 A:middle
to be reflected on the display,
you need to invalidate any views

00:25:55.396 --> 00:25:57.906 A:middle
that are showing that
kind of information.

00:25:59.916 --> 00:26:02.246 A:middle
So here's a very simple example.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.916 --> 00:26:02.246 A:middle
So here's a very simple example.

00:26:03.956 --> 00:26:05.256 A:middle
First, we set up a listener

00:26:05.406 --> 00:26:08.476 A:middle
for the NSCurrentLocaleDid
ChangeNotification.

00:26:08.946 --> 00:26:11.056 A:middle
. And when the user
changes their preference,

00:26:11.616 --> 00:26:12.536 A:middle
here's what we do.

00:26:12.786 --> 00:26:14.416 A:middle
So assume there's
a date formatter.

00:26:14.786 --> 00:26:18.486 A:middle
The first thing I'm going to do
is update the locale property

00:26:18.546 --> 00:26:20.546 A:middle
with the new value of
the current locale.

00:26:20.986 --> 00:26:23.756 A:middle
Now again, if I set
that locale property

00:26:23.756 --> 00:26:27.166 A:middle
with the auto-updating current
locale, I could skip this step.

00:26:28.226 --> 00:26:32.236 A:middle
This particular date formatter
is using a date format generated

00:26:32.236 --> 00:26:33.046 A:middle
from a template.

00:26:33.556 --> 00:26:36.456 A:middle
And since that generation
depends on the locale,

00:26:36.456 --> 00:26:37.766 A:middle
I have to do it over again.

00:26:38.296 --> 00:26:41.406 A:middle
So I call the class
method on NSDateFormatter,

00:26:41.836 --> 00:26:43.866 A:middle
pass it the new locale
of the formatter

00:26:43.866 --> 00:26:45.506 A:middle
and regenerate the date format.

00:26:46.306 --> 00:26:48.526 A:middle
Finally, I mark myView dirty

00:26:48.916 --> 00:26:51.086 A:middle
so that everything
gets redisplayed.

00:26:51.086 --> 00:26:53.706 A:middle
And in this case, I'm
assuming that the draw method

00:26:53.706 --> 00:26:55.966 A:middle
of the view will
call the formatters

00:26:55.966 --> 00:26:59.476 A:middle
to regenerate all the strings
for dates, times and so on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.836 --> 00:27:04.506 A:middle
And now I'd like to ask Karan
Misra to come up to talk

00:27:04.506 --> 00:27:05.756 A:middle
about some case studies.

00:27:06.516 --> 00:27:07.076 A:middle
Karan.

00:27:07.516 --> 00:27:10.586 A:middle
&gt;&gt; Thank you, Debbie.

00:27:10.766 --> 00:27:15.056 A:middle
Hello. I'm Karan Misra and I'd
like to talk to you a little bit

00:27:15.056 --> 00:27:19.186 A:middle
about making your app work
for international customers.

00:27:20.336 --> 00:27:26.116 A:middle
Now this is a very normal
looking time string.

00:27:26.116 --> 00:27:28.616 A:middle
And this is a time that's
appropriately formatted

00:27:28.616 --> 00:27:30.186 A:middle
for U.S. English.

00:27:30.926 --> 00:27:34.116 A:middle
What you might not have
seen before is that iOS

00:27:34.116 --> 00:27:36.026 A:middle
and OS actually support
dates and times

00:27:36.026 --> 00:27:37.046 A:middle
in many different languages.

00:27:37.156 --> 00:27:39.616 A:middle
And here are just a few of
them to show you the variety.

00:27:40.116 --> 00:27:41.916 A:middle
So some of the differences
are, of course,

00:27:42.066 --> 00:27:44.616 A:middle
you might not even
have an AM/PM marker

00:27:44.616 --> 00:27:45.916 A:middle
because it is 24-hour time.

00:27:46.296 --> 00:27:48.926 A:middle
But, of course, even if
that marker is there,

00:27:48.926 --> 00:27:50.766 A:middle
it can take many
different shapes and sizes

00:27:50.766 --> 00:27:51.836 A:middle
and go in different places.

00:27:52.576 --> 00:27:54.486 A:middle
So what do you need to
keep in mind about this?

00:27:55.156 --> 00:27:56.796 A:middle
Well, let's take two examples.

00:27:57.736 --> 00:27:59.966 A:middle
On the left, you
have U.S. English.

00:27:59.966 --> 00:28:02.426 A:middle
And, on the right, you
have simplified Chinese


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.966 --> 00:28:02.426 A:middle
And, on the right, you
have simplified Chinese

00:28:02.426 --> 00:28:04.166 A:middle
as spoken in mainland China.

00:28:06.576 --> 00:28:08.996 A:middle
This is a common problem
that we see in many apps,

00:28:09.056 --> 00:28:13.746 A:middle
which is that a format for U.S.
English is applied to Chinese.

00:28:14.286 --> 00:28:16.476 A:middle
To a Chinese user,
this looks very wrong.

00:28:18.796 --> 00:28:21.966 A:middle
Similarly, here's a perfectly
formatted date for U.S. English.

00:28:22.446 --> 00:28:25.956 A:middle
This is not a perfectly
formatted date in Chinese.

00:28:26.036 --> 00:28:27.316 A:middle
In fact, it looks like nonsense.

00:28:28.046 --> 00:28:32.286 A:middle
The date on the right is what
a Chinese user would expect

00:28:32.286 --> 00:28:33.076 A:middle
to see instead.

00:28:33.076 --> 00:28:37.206 A:middle
And, just to turn
the tables around,

00:28:37.956 --> 00:28:40.426 A:middle
here's a date that's well
formatted for Chinese

00:28:40.426 --> 00:28:42.216 A:middle
with the day, month and year.

00:28:42.216 --> 00:28:44.986 A:middle
Of course, in Chinese,
it's year, month, day.

00:28:45.696 --> 00:28:48.396 A:middle
And here's what happens
if you take that order

00:28:48.396 --> 00:28:50.016 A:middle
and apply it to an English date.

00:28:50.016 --> 00:28:52.656 A:middle
As you can see, what you would
expect to see is something

00:28:52.656 --> 00:28:53.576 A:middle
on the right-hand side.

00:28:53.576 --> 00:28:55.666 A:middle
And when you see
something on the left,

00:28:55.666 --> 00:28:56.766 A:middle
it doesn't just look wrong,

00:28:56.766 --> 00:28:59.186 A:middle
it looks blatantly
wrong like it's broken.

00:28:59.996 --> 00:29:03.446 A:middle
So how do we avoid
making these faux pas?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.996 --> 00:29:03.446 A:middle
So how do we avoid
making these faux pas?

00:29:03.856 --> 00:29:08.186 A:middle
Well, the first thing is,
don't use a fixed format.

00:29:08.186 --> 00:29:11.016 A:middle
Fixed formats will work for
a fixed language and not work

00:29:11.016 --> 00:29:11.796 A:middle
for all the languages.

00:29:12.586 --> 00:29:16.806 A:middle
So, now you might look
at the English UK example

00:29:16.886 --> 00:29:19.706 A:middle
in the second row and say,
"Well, that looks fine.

00:29:19.706 --> 00:29:21.146 A:middle
It's English and
it makes sense".

00:29:21.826 --> 00:29:23.926 A:middle
But what you might
not imagine is,

00:29:24.466 --> 00:29:26.066 A:middle
even if you just
cross the Atlantic,

00:29:26.236 --> 00:29:28.046 A:middle
the formats change
pretty drastically.

00:29:28.306 --> 00:29:32.126 A:middle
So in UK English, for example,
it's 3 June instead of June 3,

00:29:32.736 --> 00:29:35.366 A:middle
and they use 24-hour
time by default,

00:29:35.366 --> 00:29:36.886 A:middle
so you don't have
the AM/PM marker.

00:29:37.986 --> 00:29:40.036 A:middle
So what's the right way to
do this at the API level?

00:29:40.036 --> 00:29:45.626 A:middle
Well, localizedStringFromDate
is going to get you a date

00:29:45.626 --> 00:29:48.176 A:middle
that is properly formatted
for the current locale.

00:29:48.396 --> 00:29:50.956 A:middle
And you pass in a
dateStyle and a timeStyle,

00:29:51.276 --> 00:29:54.486 A:middle
and that determines how succinct

00:29:54.486 --> 00:29:56.406 A:middle
or verbose you want your
dates and times to be.

00:29:57.556 --> 00:29:59.676 A:middle
And it formats the
date appropriately

00:29:59.676 --> 00:30:00.616 A:middle
for all your locales.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.676 --> 00:30:00.616 A:middle
for all your locales.

00:30:01.246 --> 00:30:03.096 A:middle
Now you might come back
to me and say, "Well,

00:30:03.096 --> 00:30:04.456 A:middle
that's not working for me.

00:30:04.736 --> 00:30:05.906 A:middle
I need something more custom."

00:30:06.726 --> 00:30:09.506 A:middle
So, the first step
on your journey

00:30:09.506 --> 00:30:11.186 A:middle
to custom dates should
be looking

00:30:11.186 --> 00:30:12.976 A:middle
at dateFormatFromTemplate.

00:30:13.576 --> 00:30:16.396 A:middle
Now this allows you to
specify a template and,

00:30:16.396 --> 00:30:19.066 A:middle
within the template, the
template contains information

00:30:19.066 --> 00:30:21.336 A:middle
about exactly what
elements of the date

00:30:21.336 --> 00:30:22.276 A:middle
and time you want to show.

00:30:22.276 --> 00:30:26.716 A:middle
And then you pass in a
locale so that the template,

00:30:26.716 --> 00:30:29.716 A:middle
it gives you a format
back from the template.

00:30:29.776 --> 00:30:32.876 A:middle
And then that format is
appropriately, is appropriate

00:30:32.926 --> 00:30:34.266 A:middle
for the locale that
you passed in.

00:30:34.506 --> 00:30:37.276 A:middle
And then finally you set
that format on the formatter

00:30:37.276 --> 00:30:39.646 A:middle
to get your dates and times.

00:30:40.056 --> 00:30:42.806 A:middle
Now of course, you might still
come back to me and say, "Well,

00:30:42.806 --> 00:30:45.156 A:middle
none of the preset
styles work for me,

00:30:45.446 --> 00:30:48.886 A:middle
and none of the template
formats they work for me.

00:30:48.886 --> 00:30:49.676 A:middle
So what should I do?"

00:30:50.496 --> 00:30:52.946 A:middle
Well, it becomes a little more
complicated as you can see.

00:30:53.056 --> 00:30:57.646 A:middle
But the basic idea is you
might have a custom format

00:30:57.986 --> 00:31:01.766 A:middle
but you probably have not
considered every possible locale


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.986 --> 00:31:01.766 A:middle
but you probably have not
considered every possible locale

00:31:01.766 --> 00:31:02.266 A:middle
in the world.

00:31:02.856 --> 00:31:05.756 A:middle
So, don't apply your
custom format

00:31:05.756 --> 00:31:07.176 A:middle
to every possible
locale in the world.

00:31:07.346 --> 00:31:09.826 A:middle
If you have a custom
format for U.S. English,

00:31:10.416 --> 00:31:14.426 A:middle
check for English U.S. and
apply just to English U.S..

00:31:14.526 --> 00:31:15.936 A:middle
And, of course, if you
have custom formats

00:31:15.936 --> 00:31:18.786 A:middle
for other locales, check
for those specific locales

00:31:18.786 --> 00:31:21.986 A:middle
and make sure to fall back to
the default in your else case.

00:31:23.396 --> 00:31:25.766 A:middle
And that's all there
is to dates and times.

00:31:25.836 --> 00:31:27.246 A:middle
Next, let's move on to names.

00:31:28.316 --> 00:31:30.136 A:middle
Now very similar
to dates and times,

00:31:30.386 --> 00:31:32.476 A:middle
names come in many
different languages

00:31:32.476 --> 00:31:34.526 A:middle
and scripts and formats.

00:31:34.826 --> 00:31:40.196 A:middle
And here is what happens if you
apply a name format intended

00:31:40.196 --> 00:31:41.996 A:middle
for Chinese to an English name.

00:31:42.156 --> 00:31:43.476 A:middle
It doesn't look very good.

00:31:45.086 --> 00:31:48.916 A:middle
And believe me that this Chinese
name looks just as awkward

00:31:49.296 --> 00:31:51.756 A:middle
to a Chinese user because it's
using an English name format.

00:31:52.756 --> 00:31:54.376 A:middle
So, what's wrong here?

00:31:55.466 --> 00:31:57.626 A:middle
Well, most commonly
what we see is

00:31:57.626 --> 00:32:01.016 A:middle
that a fixed format
has been hard coded.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.626 --> 00:32:01.016 A:middle
that a fixed format
has been hard coded.

00:32:01.546 --> 00:32:04.516 A:middle
And when you use a fixed
format, it's only going

00:32:04.516 --> 00:32:05.366 A:middle
to work for some names.

00:32:05.366 --> 00:32:07.346 A:middle
So clearly, this is
not the right approach.

00:32:07.846 --> 00:32:11.136 A:middle
Now what might not
be super intuitive is

00:32:11.136 --> 00:32:13.666 A:middle
that even using a
format obtained

00:32:13.826 --> 00:32:17.676 A:middle
from the current localization
will not give you the right

00:32:17.676 --> 00:32:18.596 A:middle
formatting every time.

00:32:18.986 --> 00:32:21.896 A:middle
Why? Now, if you're
living in the US,

00:32:21.896 --> 00:32:23.766 A:middle
most of your contacts
might be in English.

00:32:24.096 --> 00:32:27.216 A:middle
But a lot of customers,
especially those in Asia,

00:32:27.796 --> 00:32:29.876 A:middle
most often have contacts

00:32:29.966 --> 00:32:32.096 A:middle
in at least two languages,
if not more.

00:32:32.216 --> 00:32:34.336 A:middle
Say Chinese and English
or Japanese and English.

00:32:35.506 --> 00:32:37.876 A:middle
So with the fixed
format obtained

00:32:37.876 --> 00:32:40.926 A:middle
from the current localization,
you might format, say,

00:32:40.926 --> 00:32:42.166 A:middle
all Chinese names right.

00:32:42.466 --> 00:32:44.316 A:middle
But you might then get all
the English names wrong.

00:32:44.506 --> 00:32:46.156 A:middle
So that's just not
a good experience.

00:32:47.296 --> 00:32:48.066 A:middle
So what should you do?

00:32:48.456 --> 00:32:52.296 A:middle
Well, there's a great API called
ABRecordCopyCompositeName.

00:32:53.066 --> 00:32:55.506 A:middle
You pass it a record
from Address Book.

00:32:55.766 --> 00:32:57.256 A:middle
It'll give you back
the name to display.

00:32:57.536 --> 00:32:58.546 A:middle
It's that simple.

00:32:59.646 --> 00:33:00.766 A:middle
There's no code underneath.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.646 --> 00:33:00.766 A:middle
There's no code underneath.

00:33:01.136 --> 00:33:06.576 A:middle
And this API, of course, it
encapsulates a lot of logic

00:33:06.746 --> 00:33:10.266 A:middle
that we have designed that
takes into account the language

00:33:10.266 --> 00:33:12.176 A:middle
of the contact, the
user settings,

00:33:12.366 --> 00:33:14.726 A:middle
and of course it has a lot
of language-specific logic

00:33:14.726 --> 00:33:17.206 A:middle
to then find the right format
to show the contact in.

00:33:17.546 --> 00:33:18.816 A:middle
But you don't need
to worry about that.

00:33:18.876 --> 00:33:19.606 A:middle
Just use this API.

00:33:20.816 --> 00:33:23.836 A:middle
Of course you might say,
my contacts don't come

00:33:23.836 --> 00:33:25.396 A:middle
from the Address Book, they
come from somewhere else.

00:33:26.026 --> 00:33:26.526 A:middle
That's fine.

00:33:27.216 --> 00:33:29.166 A:middle
You can take the name
information that you get

00:33:29.166 --> 00:33:32.456 A:middle
from another source,
create a temporary ABRecord,

00:33:32.456 --> 00:33:36.326 A:middle
assign these values, and then
ask for the display name again.

00:33:37.266 --> 00:33:40.226 A:middle
And of course, if
you're using OS X,

00:33:40.726 --> 00:33:42.856 A:middle
then there's a displayName
API there too.

00:33:43.636 --> 00:33:45.166 A:middle
And that's really all
there is to names.

00:33:45.526 --> 00:33:47.116 A:middle
Just use these APIs,
and it'll be all right.

00:33:49.256 --> 00:33:52.426 A:middle
Next, I'd like to talk to
you about right-to-left text.

00:33:52.426 --> 00:33:56.156 A:middle
So, first of all,
don't think that just

00:33:56.156 --> 00:33:58.686 A:middle
because you don't have a
right-to-left localization,

00:33:58.816 --> 00:34:00.576 A:middle
like Arabic or Hebrew, that
you can stop listening.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.816 --> 00:34:00.576 A:middle
like Arabic or Hebrew, that
you can stop listening.

00:34:00.576 --> 00:34:03.946 A:middle
This is important even if
you localize just in English.

00:34:05.006 --> 00:34:06.686 A:middle
So what's different
about these languages?

00:34:07.036 --> 00:34:10.275 A:middle
Well, they run right-to-left.

00:34:10.275 --> 00:34:10.956 A:middle
That's what's different.

00:34:11.255 --> 00:34:13.686 A:middle
And that actually
causes a lot of issues.

00:34:15.275 --> 00:34:17.315 A:middle
So, there are two
main topics here.

00:34:17.616 --> 00:34:20.076 A:middle
One is alignment, and the
other is directionality.

00:34:20.156 --> 00:34:21.646 A:middle
Let me talk about
alignment first.

00:34:22.876 --> 00:34:25.366 A:middle
This looks like a
perfectly innocuous line

00:34:25.456 --> 00:34:27.216 A:middle
of code, set alignment left.

00:34:27.216 --> 00:34:29.406 A:middle
I mean, what's the alignment
for if not for setting it?

00:34:30.025 --> 00:34:32.626 A:middle
Well, it works fine
for English text.

00:34:33.176 --> 00:34:36.496 A:middle
But if you set Arabic
text in left alignment,

00:34:36.926 --> 00:34:40.525 A:middle
it's kind of like setting
English text in right alignment.

00:34:40.676 --> 00:34:44.206 A:middle
You might do it for a heading
or for some special cases,

00:34:44.206 --> 00:34:46.755 A:middle
but you don't format
entire paragraphs of text

00:34:47.386 --> 00:34:48.585 A:middle
in right alignment for English.

00:34:49.116 --> 00:34:52.596 A:middle
So that text is not
very easy to read.

00:34:52.735 --> 00:34:53.585 A:middle
What's the answer?

00:34:53.846 --> 00:34:56.795 A:middle
Well, the answer is you
should use natural alignment.

00:34:57.096 --> 00:35:01.166 A:middle
Now this lets the underlying
frameworks determine what the


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.096 --> 00:35:01.166 A:middle
Now this lets the underlying
frameworks determine what the

00:35:01.166 --> 00:35:04.356 A:middle
appropriate alignment is
left to right depending

00:35:04.386 --> 00:35:05.316 A:middle
on the language and use.

00:35:05.916 --> 00:35:09.386 A:middle
And if you use this, you'll get
nice left alignment for English

00:35:09.386 --> 00:35:10.666 A:middle
and other left-to-right
languages.

00:35:10.666 --> 00:35:13.346 A:middle
And you'll get nice right
alignment for Arabic

00:35:13.346 --> 00:35:14.486 A:middle
and other right-to-left
languages.

00:35:15.226 --> 00:35:15.806 A:middle
So that's easy.

00:35:17.096 --> 00:35:19.256 A:middle
Let's move on to something
less easy, directionality.

00:35:19.726 --> 00:35:23.996 A:middle
Now, directionality, in
contrast to alignment,

00:35:24.286 --> 00:35:28.186 A:middle
determines what the logical
order and the visual order

00:35:28.186 --> 00:35:30.496 A:middle
of the words is within
a given run of text,

00:35:30.496 --> 00:35:31.706 A:middle
like within a single sentence.

00:35:32.316 --> 00:35:36.056 A:middle
So what we see most
commonly going wrong is

00:35:36.056 --> 00:35:39.126 A:middle
that someone is trying
actually to be helpful,

00:35:39.126 --> 00:35:42.476 A:middle
and they take the fact that
the app is running in Arabic

00:35:42.476 --> 00:35:47.086 A:middle
or Hebrew, and they hard-code
the base writing direction

00:35:47.086 --> 00:35:49.096 A:middle
to right-to-left.

00:35:49.746 --> 00:35:50.506 A:middle
Why is this wrong?

00:35:50.666 --> 00:35:54.796 A:middle
Well, this is wrong because user
content can be in any language,

00:35:54.856 --> 00:35:56.406 A:middle
as Debbie mentioned before.

00:35:56.586 --> 00:35:59.096 A:middle
And you cannot assume the
language of user content.

00:35:59.556 --> 00:36:01.956 A:middle
Now this is a sentence that's
supposed to be in English,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.556 --> 00:36:01.956 A:middle
Now this is a sentence that's
supposed to be in English,

00:36:02.426 --> 00:36:04.656 A:middle
with one Urdu word
in the middle.

00:36:04.656 --> 00:36:07.296 A:middle
So it's supposed to say,
"WWDC is a fun conference."

00:36:07.636 --> 00:36:09.066 A:middle
It's not really saying
that right now

00:36:09.206 --> 00:36:12.596 A:middle
because it's using right-to-left
text directionality,

00:36:13.146 --> 00:36:16.686 A:middle
and that doesn't make sense.

00:36:16.686 --> 00:36:18.556 A:middle
So, what should you do?

00:36:18.816 --> 00:36:20.986 A:middle
Well, for any text
view or text field

00:36:20.986 --> 00:36:23.176 A:middle
in which you expect the
user to type content,

00:36:23.916 --> 00:36:26.226 A:middle
set the writing direction
to natural.

00:36:26.536 --> 00:36:30.286 A:middle
Now again, that lets the
underlying frameworks determine

00:36:30.586 --> 00:36:34.546 A:middle
what a good best guess for
the writing direction is.

00:36:35.256 --> 00:36:38.326 A:middle
In this case, it will take a
look at the first few letters

00:36:38.326 --> 00:36:40.836 A:middle
of the string, which is WWDC,

00:36:41.256 --> 00:36:43.336 A:middle
and since those are
left-to-right characters,

00:36:43.716 --> 00:36:46.626 A:middle
it will take a guess that this
string should go left-to-right.

00:36:46.626 --> 00:36:51.166 A:middle
And in this case, that produces
the expected sentence, which is,

00:36:51.166 --> 00:36:53.086 A:middle
"WWDC is a must conference."

00:36:55.156 --> 00:37:00.456 A:middle
So, of course, as I
mentioned, it's a best guess.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:55.156 --> 00:37:00.456 A:middle
So, of course, as I
mentioned, it's a best guess.

00:37:00.686 --> 00:37:03.496 A:middle
And so you might have
a sentence like this.

00:37:03.706 --> 00:37:06.916 A:middle
Now since you saw it animate
in, you can see the order.

00:37:07.066 --> 00:37:08.706 A:middle
So you can see it one more time.

00:37:09.196 --> 00:37:10.696 A:middle
So Safari first, then
[foreign language]

00:37:10.696 --> 00:37:13.216 A:middle
in Arabic, and then Mac.

00:37:13.856 --> 00:37:18.096 A:middle
So, you might be able to tell,
if you saw it being typed,

00:37:18.426 --> 00:37:20.666 A:middle
that the user wants to
say, "Safari on Mac."

00:37:21.186 --> 00:37:23.456 A:middle
But because it started
with Latin letters

00:37:23.456 --> 00:37:24.506 A:middle
that would go left-to-right,

00:37:24.896 --> 00:37:28.166 A:middle
the directionality was
assumed as left-to-right.

00:37:28.166 --> 00:37:30.976 A:middle
And so, you have the opposite
sentence, "Mac on Safari."

00:37:33.266 --> 00:37:35.236 A:middle
So how do you fix this?

00:37:35.486 --> 00:37:40.106 A:middle
Well, this is the
sentence you want to get.

00:37:40.516 --> 00:37:45.966 A:middle
And in order to get this order
of the words, what you need

00:37:45.966 --> 00:37:49.226 A:middle
to do is you need to
insert a right-to-left mark

00:37:49.426 --> 00:37:51.516 A:middle
at the beginning
of the sentence.

00:37:51.866 --> 00:37:55.306 A:middle
This is an invisible
character that you insert

00:37:55.826 --> 00:37:58.836 A:middle
to control the directionality
of the string.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:00.756 --> 00:38:05.326 A:middle
And, of course, you might have
a case that is the opposite,

00:38:05.326 --> 00:38:08.476 A:middle
in fact, in which you start
with, say, an Arabic word,

00:38:08.756 --> 00:38:11.006 A:middle
which is right-to-left,
and the OS will guess

00:38:11.126 --> 00:38:12.736 A:middle
that the whole sentence
is supposed

00:38:12.736 --> 00:38:13.756 A:middle
to flow from right-to-left.

00:38:13.756 --> 00:38:17.996 A:middle
But what you intended
was for the sentence

00:38:18.186 --> 00:38:19.406 A:middle
to flow from left-to-right.

00:38:19.406 --> 00:38:20.966 A:middle
And, if you have
a translation app,

00:38:20.966 --> 00:38:23.296 A:middle
you might actually have already
encountered a case like this.

00:38:24.646 --> 00:38:27.186 A:middle
And, in this case,
the solution is

00:38:27.256 --> 00:38:28.466 A:middle
to insert a left-to-right mark.

00:38:29.646 --> 00:38:32.816 A:middle
So, what you're probably
thinking is, "Well,

00:38:32.816 --> 00:38:34.636 A:middle
that's great, but who's supposed

00:38:34.636 --> 00:38:36.736 A:middle
to insert these marks
into the strings?"

00:38:36.786 --> 00:38:38.996 A:middle
because you might not
have heard about them.

00:38:39.726 --> 00:38:42.466 A:middle
So the answer is,
well it is you.

00:38:43.046 --> 00:38:46.226 A:middle
But, probably not exactly you.

00:38:46.476 --> 00:38:49.226 A:middle
What you need to do is to
talk to your localizers.

00:38:49.776 --> 00:38:53.426 A:middle
Your localizers, and not just
your right-to-left language

00:38:53.426 --> 00:38:55.776 A:middle
localizers like localizers
for Arabic and Hebrew,

00:38:55.896 --> 00:38:58.986 A:middle
all of your localizers need to
understand how these marks work.

00:38:59.446 --> 00:39:02.456 A:middle
Because they need to insert
these in, for example,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.446 --> 00:39:02.456 A:middle
Because they need to insert
these in, for example,

00:39:02.456 --> 00:39:05.626 A:middle
if there's a localizable
string that starts

00:39:05.626 --> 00:39:07.226 A:middle
with a format argument.

00:39:07.966 --> 00:39:12.306 A:middle
Now, when the user
content comes in,

00:39:12.306 --> 00:39:15.406 A:middle
that format argument could be
replaced by an English word

00:39:15.406 --> 00:39:17.926 A:middle
or an Arabic word or a
Hebrew word or a French word,

00:39:18.326 --> 00:39:21.366 A:middle
so you don't know at compile
time what it's going to be.

00:39:21.586 --> 00:39:24.816 A:middle
So you need to insert, if you're
in a left-to-right localization

00:39:24.816 --> 00:39:26.196 A:middle
like English or French
or German,

00:39:26.476 --> 00:39:29.566 A:middle
you need to have a left-to-right
mark there to tell it that even

00:39:29.566 --> 00:39:31.596 A:middle
if an Arabic word comes
in, I want the sentence

00:39:31.596 --> 00:39:32.446 A:middle
to flow left-to-right.

00:39:32.446 --> 00:39:35.116 A:middle
And the same and the opposite
for right-to-left localizations.

00:39:37.186 --> 00:39:40.866 A:middle
Of course, this is just
a brief introduction

00:39:41.326 --> 00:39:45.126 A:middle
to handling right-to-left
text, or actually,

00:39:45.126 --> 00:39:48.716 A:middle
mixed text I should say,
and you should check our

00:39:48.716 --> 00:39:50.536 A:middle
internationalization
and localization guide

00:39:50.916 --> 00:39:53.756 A:middle
for more details about
handling more advanced cases.

00:39:55.316 --> 00:39:58.616 A:middle
Lastly, for right-to-left,
I should mention

00:39:59.696 --> 00:40:01.696 A:middle
that Xcode 6 has a
great new feature


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.696 --> 00:40:01.696 A:middle
that Xcode 6 has a
great new feature

00:40:01.696 --> 00:40:04.396 A:middle
which lets you simulate a
right-to-left localization

00:40:04.656 --> 00:40:07.146 A:middle
so you can run in English
but in right-to-left

00:40:07.146 --> 00:40:09.896 A:middle
and see how your layout flows
in a right-to-left localization.

00:40:10.416 --> 00:40:11.966 A:middle
And of course, I
highly encourage you

00:40:11.966 --> 00:40:14.696 A:middle
to attend the Localizing
with Xcode session

00:40:14.696 --> 00:40:17.596 A:middle
which is later today to
learn more about Xcode 6

00:40:17.596 --> 00:40:18.856 A:middle
and what it brings
for localization.

00:40:20.966 --> 00:40:23.206 A:middle
Next, let me talk
about the keyboard.

00:40:24.106 --> 00:40:25.906 A:middle
Now this is the U.S.
English keyboard.

00:40:25.906 --> 00:40:29.046 A:middle
And, as you probably
know from yesterday,

00:40:29.596 --> 00:40:30.716 A:middle
we now have predictive typing.

00:40:31.736 --> 00:40:34.646 A:middle
So, what does this mean
for you as a developer?

00:40:35.456 --> 00:40:40.636 A:middle
Well, even more than before, you
need to keep track of the height

00:40:40.636 --> 00:40:41.796 A:middle
and size of the keyboard.

00:40:42.446 --> 00:40:44.496 A:middle
So, I first of all
hope that none

00:40:44.496 --> 00:40:45.876 A:middle
of you have hard-coded the size

00:40:45.876 --> 00:40:48.416 A:middle
of the keyboard anywhere
in your apps.

00:40:49.026 --> 00:40:51.806 A:middle
And now, of course, if
you do that, you're going

00:40:51.806 --> 00:40:53.206 A:middle
to get a lot of one
star ratings.

00:40:54.096 --> 00:40:57.436 A:middle
So, first of all
notice that even

00:40:57.436 --> 00:41:00.956 A:middle
when predictive typing
is off, like on the left,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.436 --> 00:41:00.956 A:middle
when predictive typing
is off, like on the left,

00:41:01.506 --> 00:41:03.156 A:middle
there's still a thin bar
on top of the keyboard.

00:41:03.156 --> 00:41:04.696 A:middle
So the height of the
keyboard is still different

00:41:04.696 --> 00:41:05.516 A:middle
from what it used to be.

00:41:06.316 --> 00:41:08.216 A:middle
But, not all the keyboards

00:41:08.216 --> 00:41:11.236 A:middle
on iOS are predictive
typing enabled.

00:41:11.636 --> 00:41:13.286 A:middle
So you still might
have a keyboard

00:41:13.286 --> 00:41:15.596 A:middle
like the Bengali keyboard,
which is new in iOS 8,

00:41:16.096 --> 00:41:18.116 A:middle
which does not have even
the thin bar on top.

00:41:18.116 --> 00:41:21.046 A:middle
So already you have
three different sizes.

00:41:21.656 --> 00:41:26.596 A:middle
Then we also have keyboards like
Japanese and Chinese in which,

00:41:26.776 --> 00:41:29.586 A:middle
before the user starts
typing, it's the short height.

00:41:29.586 --> 00:41:31.846 A:middle
And, once they start
typing, there's a bar on top

00:41:31.846 --> 00:41:33.096 A:middle
and it becomes a tall height.

00:41:33.096 --> 00:41:34.096 A:middle
So, your app needs

00:41:34.096 --> 00:41:36.106 A:middle
to accommodate these
size changes on the fly.

00:41:36.106 --> 00:41:38.276 A:middle
And, of course, users
will switch back and forth

00:41:38.326 --> 00:41:39.236 A:middle
between these keyboards.

00:41:41.036 --> 00:41:43.696 A:middle
Not only that, but this is
something you're probably aware

00:41:43.776 --> 00:41:47.676 A:middle
of for sure is that when the
keyboard comes up, your UI needs

00:41:47.676 --> 00:41:49.256 A:middle
to move away if you
don't want it

00:41:49.256 --> 00:41:50.426 A:middle
to get hidden behind
the keyboard.

00:41:51.506 --> 00:41:52.556 A:middle
So how do we do all of this?

00:41:53.256 --> 00:41:56.316 A:middle
Well, helpfully, the
keyboard lets you know

00:41:56.316 --> 00:41:59.136 A:middle
when it's coming in, going
out, or changing size.

00:41:59.596 --> 00:42:01.556 A:middle
So all you need to do is
watch for those notifications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.596 --> 00:42:01.556 A:middle
So all you need to do is
watch for those notifications.

00:42:02.956 --> 00:42:04.916 A:middle
Now, what can you do with these?

00:42:05.186 --> 00:42:07.856 A:middle
Well, here's an example
of Safari.

00:42:08.886 --> 00:42:11.756 A:middle
When the keyboard comes
in, as you can see,

00:42:11.906 --> 00:42:14.546 A:middle
the search field shrinks.

00:42:15.356 --> 00:42:17.566 A:middle
And I'll play it
again so you can see

00:42:17.846 --> 00:42:21.436 A:middle
that these two animations are
actually happening in tandem.

00:42:22.106 --> 00:42:24.206 A:middle
So how do you make this
happen in your apps?

00:42:25.166 --> 00:42:28.256 A:middle
Well, the keyboard will show,

00:42:28.476 --> 00:42:30.926 A:middle
notification actually
contains a lot of information.

00:42:31.146 --> 00:42:33.416 A:middle
First of all, it contains
information about the frame,

00:42:33.666 --> 00:42:34.756 A:middle
where the keyboard will start

00:42:34.756 --> 00:42:36.686 A:middle
and where the keyboard
will end its animation.

00:42:38.006 --> 00:42:39.556 A:middle
It also contains information

00:42:39.666 --> 00:42:41.796 A:middle
about the animation
duration and curve.

00:42:42.146 --> 00:42:44.716 A:middle
So actually you can
use these two pieces

00:42:44.716 --> 00:42:48.736 A:middle
of information together and make
sure that your UI moves away

00:42:48.736 --> 00:42:51.806 A:middle
from the keyboard and also moves
in tandem with the keyboard

00:42:51.806 --> 00:42:55.916 A:middle
so it gives a very smooth
experience to the user.

00:42:56.076 --> 00:42:57.646 A:middle
We also have hardware keyboards.

00:42:58.196 --> 00:43:02.336 A:middle
So, iOS, any iOS device can
attach to a hardware keyboard


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.196 --> 00:43:02.336 A:middle
So, iOS, any iOS device can
attach to a hardware keyboard

00:43:02.336 --> 00:43:03.086 A:middle
if you have Bluetooth.

00:43:03.426 --> 00:43:05.056 A:middle
And of course if you
want to simulate it,

00:43:05.056 --> 00:43:07.816 A:middle
there's an optional
Simulator to do that as well.

00:43:07.816 --> 00:43:10.446 A:middle
So what does this
mean for your apps?

00:43:10.856 --> 00:43:14.106 A:middle
Well, if you have an app like
this, which has a toolbar

00:43:14.106 --> 00:43:17.896 A:middle
above the keyboard, the
important thing to keep

00:43:17.896 --> 00:43:20.416 A:middle
in mind is that there's
functionality like Choose Font

00:43:20.416 --> 00:43:23.306 A:middle
in this case, which you
don't want the user to lose

00:43:23.306 --> 00:43:24.976 A:middle
when they attach a
hardware keyboard.

00:43:25.806 --> 00:43:27.876 A:middle
So, this is not what you want

00:43:27.986 --> 00:43:29.066 A:middle
when a hardware keyboard
is attached.

00:43:30.246 --> 00:43:33.316 A:middle
What you want is this
in which the toolbar

00:43:33.316 --> 00:43:34.446 A:middle
at the bottom remains,

00:43:34.446 --> 00:43:36.196 A:middle
even though a hardware
keyboard is attached.

00:43:37.076 --> 00:43:38.246 A:middle
So how do you make this happen?

00:43:38.846 --> 00:43:41.396 A:middle
Well, if you do have a
view that just goes on top

00:43:41.396 --> 00:43:45.736 A:middle
of the keyboard, it's a one
line code change, which is,

00:43:45.966 --> 00:43:47.466 A:middle
to use inputAccessoryView.

00:43:48.316 --> 00:43:51.456 A:middle
inputAccessoryView allows
you to specify the view,

00:43:51.866 --> 00:43:53.986 A:middle
and that view is stuck
on top of the keyboard.

00:43:54.036 --> 00:43:56.216 A:middle
And the keyboard takes
care of animating it in,

00:43:56.216 --> 00:43:58.876 A:middle
animating it out, and making
sure it docks at the bottom

00:43:59.026 --> 00:44:01.376 A:middle
when the hardware
keyboard is attached.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.026 --> 00:44:01.376 A:middle
when the hardware
keyboard is attached.

00:44:01.376 --> 00:44:05.036 A:middle
Moving on to another
keyboard topic: keyboard type.

00:44:06.586 --> 00:44:10.396 A:middle
Now keyboard types
basically allow you to specify

00:44:10.396 --> 00:44:13.976 A:middle
within the same keyboard
different, specific,

00:44:14.036 --> 00:44:15.436 A:middle
optimized keyboard types.

00:44:15.436 --> 00:44:18.096 A:middle
So for example, here we have
the email type which is meant

00:44:18.096 --> 00:44:21.296 A:middle
for email addresses, user
names, etc. And as you can see,

00:44:21.526 --> 00:44:24.486 A:middle
it has the @ and full-stop
keys on the first plane

00:44:24.696 --> 00:44:25.856 A:middle
to let you easily type those.

00:44:27.016 --> 00:44:30.766 A:middle
Of course, the punctuation
planes are also optimized

00:44:30.766 --> 00:44:32.326 A:middle
for email address typing.

00:44:32.846 --> 00:44:35.646 A:middle
And so you have more
frequently used symbols there.

00:44:36.996 --> 00:44:39.826 A:middle
What you might not know
is that in the keyboards

00:44:39.826 --> 00:44:43.896 A:middle
for many languages, like
simplified Chinese, Arabic,

00:44:43.896 --> 00:44:47.606 A:middle
etc. many of the commonly
used punctuation symbols

00:44:47.936 --> 00:44:51.216 A:middle
for other languages are not
the same symbols that are used

00:44:51.216 --> 00:44:53.796 A:middle
for email address or URLs.

00:44:53.966 --> 00:44:58.386 A:middle
And so the problem is that,
if you expect a certain kind

00:44:58.386 --> 00:44:59.586 A:middle
of input in your text field

00:44:59.586 --> 00:45:01.146 A:middle
and you don't specify
the right type,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.586 --> 00:45:01.146 A:middle
and you don't specify
the right type,

00:45:01.586 --> 00:45:04.266 A:middle
the user might actually be
forced to switch keyboards just

00:45:04.266 --> 00:45:05.836 A:middle
to type an email
address or username.

00:45:05.836 --> 00:45:07.136 A:middle
And that's not a
very good experience.

00:45:07.996 --> 00:45:10.216 A:middle
So, make sure to specify
the right keyboard type.

00:45:10.216 --> 00:45:11.936 A:middle
And, of course, we have
more than just email.

00:45:12.026 --> 00:45:14.636 A:middle
We have URL, Twitter, NumberPad.

00:45:15.266 --> 00:45:17.586 A:middle
In fact, we have a whole host
of different keyboard types.

00:45:18.146 --> 00:45:20.576 A:middle
And another one I would
like to call your attention

00:45:20.576 --> 00:45:21.876 A:middle
to is ASCIICapable.

00:45:22.396 --> 00:45:24.086 A:middle
Now if you have a
textField or textView

00:45:24.086 --> 00:45:26.936 A:middle
in which you are expecting
content that is only in ASCII,

00:45:27.476 --> 00:45:29.566 A:middle
go ahead and specify
the ASCIICapable type.

00:45:29.676 --> 00:45:32.226 A:middle
That'll make sure that the
user's keyboard is switched,

00:45:32.226 --> 00:45:36.576 A:middle
for example, from Chinese to an
ASCII keyboard automatically.

00:45:37.316 --> 00:45:41.996 A:middle
And they don't have to manually
switch keyboards to do that.

00:45:42.226 --> 00:45:44.306 A:middle
You should also know about
the autocorrection type.

00:45:44.656 --> 00:45:46.546 A:middle
So, for some of your
textViews and textFields,

00:45:46.926 --> 00:45:48.296 A:middle
autocorrection might
not be useful.

00:45:48.296 --> 00:45:50.606 A:middle
In fact, it might
actually hamper user input.

00:45:50.606 --> 00:45:53.006 A:middle
So, make sure to turn
autocorrection off

00:45:53.096 --> 00:45:53.876 A:middle
where appropriate.

00:45:55.506 --> 00:46:00.596 A:middle
Similarly, auto-capitalization
has four options


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:55.506 --> 00:46:00.596 A:middle
Similarly, auto-capitalization
has four options

00:46:00.596 --> 00:46:02.756 A:middle
which are very useful
for different contexts.

00:46:02.756 --> 00:46:05.106 A:middle
And these are all
also language aware.

00:46:05.106 --> 00:46:07.886 A:middle
So you should use these
appropriately depending

00:46:07.886 --> 00:46:09.276 A:middle
on what kind of input
you're expecting

00:46:09.276 --> 00:46:10.786 A:middle
in a certain textView
or textField.

00:46:14.616 --> 00:46:17.806 A:middle
And lastly, I want to
talk about mark text.

00:46:18.486 --> 00:46:20.776 A:middle
Now you might never
have seen this

00:46:20.776 --> 00:46:23.266 A:middle
if you've never used a
Chinese or Japanese keyboard.

00:46:23.686 --> 00:46:26.946 A:middle
But for these languages,
when the user types,

00:46:27.096 --> 00:46:30.046 A:middle
they do not directly type
the output characters

00:46:30.046 --> 00:46:30.986 A:middle
like they do in English.

00:46:31.246 --> 00:46:34.076 A:middle
But they first type usually
a phonetic or other kind

00:46:34.076 --> 00:46:38.676 A:middle
of input string and then
they choose a candidate

00:46:38.676 --> 00:46:39.586 A:middle
from the bar below.

00:46:39.586 --> 00:46:40.866 A:middle
Or it's above the keyboard.

00:46:42.436 --> 00:46:44.976 A:middle
So what does this mean
for you as a developer?

00:46:46.086 --> 00:46:51.056 A:middle
The important thing to know
here is when a textView

00:46:51.056 --> 00:46:52.986 A:middle
or textField has
marked text in it.

00:46:53.806 --> 00:46:56.026 A:middle
Because when it does
have marked text in it,

00:46:56.526 --> 00:46:58.686 A:middle
the number one thing
you want to make sure is

00:46:58.686 --> 00:47:02.226 A:middle
to not edit the content of
that textView or textField.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.686 --> 00:47:02.226 A:middle
to not edit the content of
that textView or textField.

00:47:02.556 --> 00:47:04.166 A:middle
Why? Because if you do that,

00:47:04.556 --> 00:47:07.846 A:middle
their marked text will get
committed to the document.

00:47:09.596 --> 00:47:11.796 A:middle
Pretty much no user
wants that to happen

00:47:11.796 --> 00:47:13.716 A:middle
because that is not the text
they were trying to type.

00:47:13.716 --> 00:47:16.196 A:middle
And you're going to have
some very frustrated users

00:47:16.196 --> 00:47:16.796 A:middle
if you do that.

00:47:18.166 --> 00:47:23.136 A:middle
And of course, while the marked
text is there, you can use it

00:47:23.216 --> 00:47:25.136 A:middle
for other things
like autocompletion

00:47:25.136 --> 00:47:28.716 A:middle
or showing some predictions
to the user.

00:47:28.716 --> 00:47:31.026 A:middle
But what you should remember is

00:47:31.026 --> 00:47:32.806 A:middle
that this is not
their final text.

00:47:33.066 --> 00:47:35.126 A:middle
And often the marked
text is not going

00:47:35.126 --> 00:47:37.776 A:middle
to contain meaningful
linguistic content

00:47:37.776 --> 00:47:40.756 A:middle
because it's just the input
codes for that input method.

00:47:41.406 --> 00:47:44.706 A:middle
So, use it for live
search if you'd like,

00:47:44.916 --> 00:47:48.586 A:middle
but note that it might not
be the user's final content.

00:47:50.496 --> 00:47:56.696 A:middle
And that is really all, well,
that's not all, but I would say

00:47:56.696 --> 00:47:59.046 A:middle
that those are the most common
things you should keep in mind.

00:47:59.986 --> 00:48:03.896 A:middle
And let me just reiterate some
of the items that we talked


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.986 --> 00:48:03.896 A:middle
And let me just reiterate some
of the items that we talked

00:48:03.896 --> 00:48:08.466 A:middle
about earlier that will help
prevent you getting a one-star

00:48:08.466 --> 00:48:11.176 A:middle
rating from someone in
Asia or the Middle East.

00:48:12.266 --> 00:48:18.316 A:middle
So, first of all, localize your
app into tons of languages.

00:48:18.886 --> 00:48:23.716 A:middle
Of course, iOS and OS X both
support a lot of languages,

00:48:23.716 --> 00:48:26.226 A:middle
and we added new ones
for both platforms.

00:48:27.336 --> 00:48:32.586 A:middle
And, starting in iOS 8, you can
localize into many languages

00:48:32.586 --> 00:48:38.566 A:middle
that Apple doesn't localize
into, so don't let us stop you.

00:48:38.566 --> 00:48:41.206 A:middle
Secondly, understand the
differences between language

00:48:41.206 --> 00:48:42.926 A:middle
and locale and when to use them

00:48:42.926 --> 00:48:46.686 A:middle
and when you don't
need to use them.

00:48:47.446 --> 00:48:50.956 A:middle
Of course, format dates,
times and names correctly.

00:48:50.956 --> 00:48:55.296 A:middle
As you saw, it's
really easy to do.

00:48:56.566 --> 00:49:00.126 A:middle
And, note that there are a lot


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:56.566 --> 00:49:00.126 A:middle
And, note that there are a lot

00:49:00.126 --> 00:49:02.946 A:middle
of right-to-left users
on both iOS and OS X.

00:49:02.946 --> 00:49:05.626 A:middle
In fact, it's one of the
most popular languages

00:49:05.626 --> 00:49:08.206 A:middle
for input on iOS and OS X.

00:49:08.206 --> 00:49:12.786 A:middle
So, regardless of whether you
localize into Arabic or Hebrew

00:49:12.786 --> 00:49:14.126 A:middle
or another right-to-left
language or not,

00:49:14.336 --> 00:49:16.676 A:middle
make sure that you're
not breaking text input

00:49:16.926 --> 00:49:17.716 A:middle
for these users.

00:49:18.876 --> 00:49:23.526 A:middle
Keyboards, of course, come
in many different shapes

00:49:23.526 --> 00:49:28.026 A:middle
and sizes and-well actually,
one shape, many sizes-and,

00:49:28.886 --> 00:49:31.436 A:middle
of course, they come in
new sizes with iOS 8.

00:49:31.436 --> 00:49:33.346 A:middle
So make sure you
keep that in mind.

00:49:34.166 --> 00:49:37.806 A:middle
Of course, choose the right
keyboard type for the context

00:49:37.946 --> 00:49:42.496 A:middle
so that you make the input
experience smooth and easy.

00:49:42.686 --> 00:49:47.616 A:middle
And don't touch the marked text
if-don't touch the document

00:49:47.696 --> 00:49:53.426 A:middle
while there's marked
text in the document.

00:49:53.426 --> 00:49:55.066 A:middle
For more information, of course,

00:49:55.066 --> 00:49:59.056 A:middle
you can contact Jake who's
our App Frameworks Evangelist.

00:49:59.556 --> 00:50:01.686 A:middle
And we also have the
Internationalization


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.556 --> 00:50:01.686 A:middle
And we also have the
Internationalization

00:50:01.686 --> 00:50:03.676 A:middle
and Localization Guide
that I mentioned previously

00:50:03.856 --> 00:50:08.146 A:middle
up on our website that you
should really check out.

00:50:09.386 --> 00:50:13.266 A:middle
We also have two sessions that
you should definitely check out.

00:50:13.266 --> 00:50:16.376 A:middle
One is Localizing with Xcode
6, which is later this morning.

00:50:17.006 --> 00:50:21.246 A:middle
And, actually, we covered a
lot of new material this year

00:50:21.246 --> 00:50:23.366 A:middle
and we didn't actually
repeat a lot of the material

00:50:23.366 --> 00:50:26.816 A:middle
from previous years'
internationalization talks,

00:50:27.096 --> 00:50:29.956 A:middle
which are actually still
relevant for your apps today.

00:50:30.116 --> 00:50:33.296 A:middle
So definitely go ahead and check
out Making Your App World-Ready,

00:50:33.296 --> 00:50:35.476 A:middle
which is last year's
internationalization session.

00:50:36.186 --> 00:50:37.016 A:middle
Thank you very much.

