00:00:11.145 --> 00:00:11.894
      >> Hello, everyone.       

00:00:12.646 --> 00:00:13.562
        I'm Tim Hatcher.        

00:00:14.482 --> 00:00:14.797
         Good morning.          

00:00:15.116 --> 00:00:15.748
       Thanks for coming.       

00:00:16.384 --> 00:00:18.634
          [ Applause ]          

00:00:20.888 --> 00:00:22.054
    So I'm going to talk to     
    you about Web Inspector     

00:00:23.224 --> 00:00:25.358
     and Modern JavaScript.     

00:00:27.495 --> 00:00:29.779
  But first, I'm going to just  
 talk about Modern JavaScript.  

00:00:32.066 --> 00:00:33.999
      So, what exactly is       
       Modern JavaScript?       

00:00:35.936 --> 00:00:37.703
  Well, let's go through some   
  of the history of JavaScript  

00:00:39.473 --> 00:00:41.190
      which is also known       
         as ECMAScript          

00:00:42.910 --> 00:00:43.943
    as some of you may know.    

00:00:44.979 --> 00:00:45.795
  But it's had a long history.  

00:00:46.614 --> 00:00:47.830
It's been around since the '90s.

00:00:49.050 --> 00:00:51.033
      And it had a lot of       
   momentum back in the '90s    

00:00:53.020 --> 00:00:54.920
     when it was first part     
      of the browser wars,      

00:00:56.824 --> 00:00:58.157
    but it kind of sputtered    
          and stalled.          

00:00:59.493 --> 00:01:01.060
    But JavaScript is alive     
       and well nowadays.       

00:01:02.630 --> 00:01:05.164
 Everyone is using it from web  
  apps to server applications,  

00:01:07.701 --> 00:01:10.486
and some of the standards bodies
  have been battling over some  

00:01:13.274 --> 00:01:15.825
 of what should be included in  
the next version of JavaScript. 

00:01:18.379 --> 00:01:21.497
 And I'm happy to say that they 
finally started coming together 

00:01:24.618 --> 00:01:28.137
   and started releasing what   
   is known as ECMAScript 6.    

00:01:31.659 --> 00:01:34.076
     And the sixth edition      
  brings a lot of cool things   

00:01:36.497 --> 00:01:37.813
and it's really just JavaScript 

00:01:39.133 --> 00:01:41.050
       and that's how I'm       
     going to refer to it.      

00:01:42.970 --> 00:01:45.321
In this modern JavaScript world,
 there's a lot of great things. 

00:01:47.675 --> 00:01:48.407
 And this is just some of them. 

00:01:49.143 --> 00:01:51.460
  There's some destructuring,   
        maps, promises.         

00:01:53.781 --> 00:01:54.763
     And let's go over some     
     of these new features      

00:01:55.749 --> 00:01:59.818
  that are also now available   
  in iOS 8 and OS X Yosemite.   

00:02:03.891 --> 00:02:06.525
  So when they're available, I  
mean, you can use them in Safari

00:02:09.163 --> 00:02:11.413
  or your iOS applications or   
 Mac applications and not just  

00:02:13.667 --> 00:02:15.784
    in web views but also a     
    JavaScriptCore context.     

00:02:17.905 --> 00:02:20.389
       So let's talk over       
         some of these.         

00:02:22.877 --> 00:02:24.393
     Let's first talk about     
      some math additions.      

00:02:25.913 --> 00:02:28.514
JavaScript has had a math object
   pretty much since day one.   

00:02:31.118 --> 00:02:34.503
But JavaScript nowadays is super
 fast, with the modern LLVM JIT 

00:02:37.892 --> 00:02:39.959
      that we have in iOS       
      8 and OS X Yosemite.      

00:02:42.029 --> 00:02:43.929
 You need these super fast math 
 functions to do complex things 

00:02:45.833 --> 00:02:48.784
     like WebGL or complex      
    scientific calculations.    

00:02:51.739 --> 00:02:53.889
 And most of you will recognize 
  a lot of things in this list  

00:02:56.043 --> 00:02:57.993
  that you've used in the past  
   for your own applications.   

00:02:59.947 --> 00:03:01.463
   And they're now available    
     in Modern JavaScript.      

00:03:02.983 --> 00:03:05.084
 So that's the math additions.  

00:03:07.188 --> 00:03:09.138
      Now let's talk about      
         maps and sets.         

00:03:11.091 --> 00:03:12.875
       So, what do I mean       
       by maps and sets?        

00:03:14.662 --> 00:03:17.229
    Well, in JavaScript, you    
 might think of this as a map.  

00:03:19.800 --> 00:03:21.900
   This is something that you   
   create as a generic object   

00:03:24.004 --> 00:03:25.053
      and it's really just      
        a property bag.         

00:03:26.106 --> 00:03:27.539
     You can throw whatever     
    you want on this object.    

00:03:28.976 --> 00:03:31.810
 You can set simple strings and 
  any object can be the value.  

00:03:34.648 --> 00:03:36.765
       And you can remove       
     things from that map.      

00:03:38.886 --> 00:03:40.219
     Well, these maps have      
       some limitations.        

00:03:41.555 --> 00:03:43.455
  There's string coercion when  
you're-when it comes to the key.

00:03:45.359 --> 00:03:46.942
Everything that is the key needs
  to be coerced into a string,  

00:03:48.529 --> 00:03:49.778
   so it's not going to give    
   you exactly what you want.   

00:03:51.031 --> 00:03:51.597
     If you want to use it      

00:03:52.166 --> 00:03:54.066
       for a property bag       
   that's tracking some node,   

00:03:55.970 --> 00:03:57.803
         it won't work.         

00:03:59.640 --> 00:04:01.523
   Well in Modern JavaScript,   
   there's now a map object.    

00:04:03.410 --> 00:04:04.493
       And it does pretty       
      much the same thing       

00:04:05.579 --> 00:04:07.012
       that you would do        
        with an object.         

00:04:08.449 --> 00:04:10.165
      It has a little bit       
   different syntax and API,    

00:04:11.885 --> 00:04:12.818
      but it's pretty much      
         all the same.          

00:04:13.754 --> 00:04:14.853
       The most powerful        
        thing you can do        

00:04:15.956 --> 00:04:18.657
   with the map object is you   
 can use any value as the key.  

00:04:21.362 --> 00:04:23.445
    And a lot of people will    
  use this to track DOM nodes   

00:04:25.532 --> 00:04:27.332
  that they have in the page,   
  adding some additional data   

00:04:29.136 --> 00:04:31.537
 on the side instead of tacking 
  it onto the DOM node itself.  

00:04:33.941 --> 00:04:35.524
    So it really allows you     
    to compartmentalize data    

00:04:37.111 --> 00:04:38.077
      that you're tracking      
          on the page.          

00:04:39.046 --> 00:04:40.996
       But there are some       
       issues with that.        

00:04:42.950 --> 00:04:44.283
      If you add it to the      
     map, that map is going     

00:04:45.619 --> 00:04:46.468
 to hold a hard reference to it 

00:04:47.321 --> 00:04:49.188
     and that's why Modern      
   JavaScript has a WeakMap.    

00:04:51.058 --> 00:04:53.692
    And that means whenever     
       the key disappears       

00:04:56.330 --> 00:04:58.130
   or gets garbage collected,   
it's also removed from the map. 

00:04:59.933 --> 00:05:02.150
   So in this case, I have a    
  node in my WeakMap and when   

00:05:04.371 --> 00:05:06.872
 that node is removed by doing  
 a remove call or a removeChild 

00:05:09.376 --> 00:05:10.893
     in that page, it would     
    no longer be in the map     

00:05:12.413 --> 00:05:13.178
 and the data that's associated 

00:05:13.947 --> 00:05:15.163
     with it will also get      
       garbage collected.       

00:05:16.383 --> 00:05:18.467
    So that's maps and sets.    

00:05:20.554 --> 00:05:22.204
     And there's also a set     
   object that I didn't cover   

00:05:23.857 --> 00:05:24.539
but it's pretty straightforward.

00:05:25.225 --> 00:05:28.076
     It only allows the key     
    to be added to the set.     

00:05:30.931 --> 00:05:32.347
       So now let's talk        
      about Destructuring.      

00:05:35.502 --> 00:05:37.352
 If you got excited about some  
 of the new features in Swift,  

00:05:39.206 --> 00:05:41.857
   this will be right up your   
alley as far as JavaScript goes.

00:05:44.511 --> 00:05:46.762
  It allows you to return like  
 multiple objects in an array.  

00:05:49.016 --> 00:05:51.333
    In this case, I have an     
   array of two numbers here.   

00:05:53.654 --> 00:05:54.770
      And traditionally, I      
     would have to collect      

00:05:55.889 --> 00:05:57.022
    that in a result object.    

00:05:58.158 --> 00:06:00.642
   And I would have to break    
 each piece off from that array 

00:06:03.130 --> 00:06:04.780
    to use it in a separate     
 variable that made more sense  

00:06:06.433 --> 00:06:08.066
in the scope I was using it in. 

00:06:09.703 --> 00:06:12.104
 But with destructuring, we can 
 break that down into one line. 

00:06:14.508 --> 00:06:16.825
     Now my function that's     
     returning two results      

00:06:19.146 --> 00:06:20.028
       that maybe didn't        
      make sense as array,      

00:06:20.914 --> 00:06:23.298
 but it was what I could use to 
return multiple things at once, 

00:06:25.686 --> 00:06:27.286
      I can now save those      
         into the alpha         

00:06:28.889 --> 00:06:31.340
       and beta variables       
    right there in one line.    

00:06:33.794 --> 00:06:35.978
  And this might look like an   
array but when it's on-when it's

00:06:38.165 --> 00:06:41.200
on the left side, we're dealing 
 with the destructuring syntax. 

00:06:45.205 --> 00:06:46.621
 And it's not just for arrays.  

00:06:48.041 --> 00:06:49.141
  You can destructure objects.  

00:06:50.244 --> 00:06:51.894
  And this is when it becomes   
  more of a pattern matching.   

00:06:53.547 --> 00:06:55.747
     So in my example here,     
   say I have a point object.   

00:06:57.951 --> 00:06:59.835
   And normally, I would have   
  to save it off into a result  

00:07:01.722 --> 00:07:02.654
      and break each piece      
        out if I wanted         

00:07:03.590 --> 00:07:06.008
    to use some more concise    
  syntax for those variables.   

00:07:08.429 --> 00:07:11.664
     But now, I have object     
  destructuring in this case.   

00:07:14.902 --> 00:07:17.036
  And if I'd want a different   
variable name than the property,

00:07:19.173 --> 00:07:21.056
 I can separate them by colons, 
so x is the value that's coming 

00:07:22.943 --> 00:07:24.309
       out of the object        
        pattern matching        

00:07:25.679 --> 00:07:27.963
 and my x is the variable name  
in the local scope in this case.

00:07:30.250 --> 00:07:31.633
        But if I want to        
       use the same name,       

00:07:33.020 --> 00:07:34.586
    I could omit the second     
     piece and just use y.      

00:07:36.156 --> 00:07:37.856
      And y is now a local      
    variable in this scope.     

00:07:39.560 --> 00:07:41.894
      And you can do some       
      really fancy things       

00:07:44.231 --> 00:07:44.913
   that I don't examples for.   

00:07:45.599 --> 00:07:47.349
 But you can deeply nest these  
  pattern matches and objects   

00:07:49.102 --> 00:07:49.968
  with arrays and vice versa.   

00:07:50.838 --> 00:07:51.970
       So you can really        
    break apart your object     

00:07:53.106 --> 00:07:54.840
     if that-if that's what     
  works for your application.   

00:07:57.911 --> 00:07:58.727
    So that's destructuring.    

00:07:59.546 --> 00:08:02.347
   Now let's talk about what    
  we call the Spread Operator.  

00:08:05.152 --> 00:08:07.369
 And this is something that is  
 borrowed from many languages,  

00:08:09.590 --> 00:08:12.574
   but it comes in very, very   
   handy and I love using it.   

00:08:15.562 --> 00:08:17.779
   It's-It really takes away    
   some of the common idioms    

00:08:20.000 --> 00:08:22.367
  that you would do before if   
  you're building up arguments  

00:08:24.738 --> 00:08:26.405
    that you want to call in    
    a function as an array,     

00:08:28.075 --> 00:08:30.375
    before you would have to    
   resort to .call or .apply    

00:08:32.679 --> 00:08:34.412
  and pass in those arguments.  

00:08:36.149 --> 00:08:37.799
    But now, with the Spread    
 Operator which is represented  

00:08:39.453 --> 00:08:41.570
    by three dots prefixing     
           an object.           

00:08:43.690 --> 00:08:45.123
        And in this case        
      it's-it's an array.       

00:08:46.560 --> 00:08:48.493
    But secretly, the Spread    
  Operator works on anything.   

00:08:50.430 --> 00:08:51.229
     It even works on maps.     

00:08:52.032 --> 00:08:54.583
    And it will break it out    
    in key value sequences.     

00:08:57.137 --> 00:08:58.887
So, anything that's has support 
 for iteration, which I'll talk 

00:09:00.641 --> 00:09:01.507
 about in a bit, can be spread. 

00:09:02.376 --> 00:09:04.143
  And this will spread it out   
    and call my function foo    

00:09:05.913 --> 00:09:08.230
    with the three arguments    
     that are in the array.     

00:09:10.551 --> 00:09:11.917
    One thing that you could    
     never do in JavaScript     

00:09:13.287 --> 00:09:15.137
  and you can only do now with  
the Spread Operator is called a 

00:09:16.990 --> 00:09:19.841
   constructor with an array    
     input or a map input.      

00:09:22.696 --> 00:09:24.830
  You can now take your parts   
   of a date and spread them    

00:09:26.967 --> 00:09:28.433
  across the date constructor   
       instead of having        

00:09:29.903 --> 00:09:33.105
   to manually do 0, 1, 2 and   
    break it out like that.     

00:09:39.012 --> 00:09:40.445
      The Spread Operator       
         is also useful         

00:09:41.882 --> 00:09:43.465
      in the construction       
       of array literals.       

00:09:45.052 --> 00:09:46.435
     Say you have something     
   that's pretty repetitious.   

00:09:47.821 --> 00:09:49.504
  You want to have a separate   
   form and a combined form.    

00:09:51.191 --> 00:09:53.091
  Normally you have to either   
repeat the data or push and pop 

00:09:54.995 --> 00:09:57.362
      and add everything,       
concatenate everything together.

00:09:59.733 --> 00:10:01.900
  But with the Spread Operator  
you can just spread those other 

00:10:04.071 --> 00:10:05.888
 arrays right out into the new  
array that you're constructing. 

00:10:07.708 --> 00:10:10.309
  So this is a handy way to do  
 pretty complex concatenation.  

00:10:12.913 --> 00:10:14.146
     And you can understand     
        what it's doing         

00:10:15.382 --> 00:10:17.099
       without having the       
     parse different calls      

00:10:18.819 --> 00:10:19.918
 to different array functions.  

00:10:21.021 --> 00:10:22.704
 So that's the Spread Operator. 

00:10:24.391 --> 00:10:25.907
      Now let's talk about      
         something new.         

00:10:27.427 --> 00:10:29.761
     A new For loop that's      
    available in JavaScript.    

00:10:32.099 --> 00:10:33.899
   JavaScript has traditional   
  loops, which you can iterate  

00:10:35.702 --> 00:10:37.419
     over an array by doing     
     an index and a length.     

00:10:39.139 --> 00:10:41.089
    And you still might need    
    to use this if you care     

00:10:43.043 --> 00:10:43.892
 about the index or the length. 

00:10:44.745 --> 00:10:47.162
 And you're doing some complex  
   operation based on those.    

00:10:49.583 --> 00:10:53.919
 Some people have avoided this  
   syntax because it's ugly.    

00:10:58.258 --> 00:11:00.559
     And they use something     
 for-called forEach on an array 

00:11:02.863 --> 00:11:04.296
     that lets you iterate      
     over individual items      

00:11:05.732 --> 00:11:07.432
      and you handily get       
      the item right there      

00:11:09.136 --> 00:11:09.918
    that you can work with.     

00:11:10.704 --> 00:11:11.653
  But this creates a closure.   

00:11:12.606 --> 00:11:14.623
    It does a lot of complex    
 things that you might not want 

00:11:16.643 --> 00:11:17.909
  to deal with overhead-wise.   

00:11:20.514 --> 00:11:22.798
  Well, with the new For loop   
  that's in modern JavaScript,  

00:11:25.085 --> 00:11:27.202
 this is all you have to write  
   to iterate over an array.    

00:11:29.322 --> 00:11:31.523
   And this will iterate over   
    every item in the array     

00:11:33.727 --> 00:11:34.643
      if you break early,       
         it will stop.          

00:11:35.562 --> 00:11:36.711
But it starts at the first item.

00:11:37.864 --> 00:11:39.547
 But it's not just for arrays.  

00:11:41.234 --> 00:11:42.784
    Say you have a set, you     
   can iterate over that set.   

00:11:44.337 --> 00:11:46.988
 And if you have a map you can  
iterate over the key and value. 

00:11:49.643 --> 00:11:51.193
      Very similar to what      
      you can do in Swift.      

00:11:52.746 --> 00:11:54.863
So now you have the key in value
  right there to process both   

00:11:56.983 --> 00:11:58.166
    at the same time instead    
      of doing extra lines      

00:11:59.352 --> 00:12:00.735
 of code using the for-in loop  

00:12:02.122 --> 00:12:02.737
       which is available       
         on JavaScript.         

00:12:03.356 --> 00:12:05.106
       Now you can do it        
    right here with for-of.     

00:12:06.860 --> 00:12:08.360
       And for-of is the        
      only way to iterate       

00:12:09.863 --> 00:12:11.446
over the keys in values in maps.

00:12:13.033 --> 00:12:14.216
       For-in will not do       
        what you expect         

00:12:15.402 --> 00:12:17.536
    and that-for reasons I'm    
     not going to go into.      

00:12:19.673 --> 00:12:21.356
     But maybe you want to      
    iterate over a WeakMap.     

00:12:23.043 --> 00:12:24.126
     That's not supported.      

00:12:25.212 --> 00:12:27.496
    For reasons that involve    
    the garbage collection,     

00:12:29.783 --> 00:12:31.466
  you cannot iterate over the   
 keys and values of the WeakMap 

00:12:33.153 --> 00:12:37.689
 and this is part of the spec.  
    So, that's for-of loops.    

00:12:43.430 --> 00:12:45.080
      Now, one of the new       
  things in modern JavaScript   

00:12:46.733 --> 00:12:48.733
    that I'm really excited     
       about is Promises.       

00:12:50.737 --> 00:12:52.570
  And it solves a longstanding  
     problem of JavaScript.     

00:12:54.407 --> 00:12:55.256
      Now that JavaScript       
         is moving more         

00:12:56.109 --> 00:12:58.059
and more asynchronous everything
is asynchronous, you don't want 

00:13:00.013 --> 00:13:01.346
to be blocking your application.

00:13:02.682 --> 00:13:05.483
And say you have a function that
you've written that loads a URL,

00:13:08.288 --> 00:13:10.255
  maybe it does an XHR behind   
   the scenes for you to wrap   

00:13:12.225 --> 00:13:13.525
      up all the different      
   browser incompatibilities    

00:13:14.828 --> 00:13:15.510
      that are out there.       

00:13:16.196 --> 00:13:18.480
    So this will load a URL     
    and that's all it'll do.    

00:13:20.767 --> 00:13:21.666
    You can't get the data.     

00:13:22.569 --> 00:13:24.436
 To get the data, you might be  
 inclined to do a return result 

00:13:26.306 --> 00:13:27.822
       that gives you the       
     data that was loaded.      

00:13:29.342 --> 00:13:30.191
    But this is synchronous.    

00:13:31.044 --> 00:13:32.844
    You can't get away with     
   this in a shipping product   

00:13:34.648 --> 00:13:36.832
        without blocking        
      your user interface.      

00:13:39.019 --> 00:13:40.569
     So, you have to resort     
    to a callback function.     

00:13:42.122 --> 00:13:43.755
      And JavaScript makes      
        this real easy.         

00:13:45.392 --> 00:13:46.675
       I do this everyday       
         in JavaScript:         

00:13:47.961 --> 00:13:48.860
  pass in a callback function.  

00:13:49.763 --> 00:13:52.664
   And it works and it's very   
  usable and it's very handy.   

00:13:55.569 --> 00:13:57.969
    But when it gets deeply     
   nested and you're passing    

00:14:00.373 --> 00:14:01.422
    in multiple information     

00:14:02.475 --> 00:14:04.008
   and it just gets confusing   
      and hard to follow.       

00:14:05.545 --> 00:14:07.078
    You have all these load     
      calls in this case.       

00:14:08.615 --> 00:14:10.081
     Which one is handling      
       which information?       

00:14:11.551 --> 00:14:13.501
       Well, this is what       
        Promises solved.        

00:14:15.455 --> 00:14:17.288
     With Promises you can      
   write something like this    

00:14:19.125 --> 00:14:21.326
      where the first load      
       returns a promise.       

00:14:23.530 --> 00:14:24.529
       And immediately on       
    returning that promise,     

00:14:25.532 --> 00:14:26.481
 I can call the .then function. 

00:14:27.434 --> 00:14:28.400
     And that's pretty much     
     the only API you need      

00:14:29.369 --> 00:14:30.785
     to be concerned about      
         with Promises.         

00:14:32.205 --> 00:14:33.872
    And you can pass a call     
  back to that .then function   

00:14:35.542 --> 00:14:37.959
   which will get called when   
   that promise is fulfilled.   

00:14:40.380 --> 00:14:43.315
     And that callback can      
    return another promise.     

00:14:46.253 --> 00:14:47.169
  And this where it's magical,  

00:14:48.088 --> 00:14:49.855
       you can chain-keep       
      chaining along that.      

00:14:51.625 --> 00:14:54.092
 So these callbacks are in line 
 here just for clarity for you. 

00:14:56.563 --> 00:14:58.013
       But they might be        
        named functions         

00:14:59.466 --> 00:15:00.398
 that you have somewhere else.  

00:15:01.334 --> 00:15:04.285
And it makes it very clear that 
this is the order of operations.

00:15:08.508 --> 00:15:09.758
      So that's Promises.       

00:15:11.011 --> 00:15:13.929
And taking it to the next level 
 you can then use another API,  

00:15:16.850 --> 00:15:18.817
   a global API, Promise.all.   

00:15:20.787 --> 00:15:23.655
 And what this does is you can  
 pass in an array of promises.  

00:15:26.526 --> 00:15:28.710
    And it will return a new    
  promise and that new promise  

00:15:30.897 --> 00:15:34.115
that it returns is dependent on 
all of those promises finishing.

00:15:37.337 --> 00:15:38.453
   If any of them error out,    

00:15:39.572 --> 00:15:41.039
     your "then" object can     
     get past the callback      

00:15:42.509 --> 00:15:43.408
  that gets called for errors.  

00:15:44.311 --> 00:15:46.244
    But in this case, "done"    
 will get called when only all  

00:15:48.181 --> 00:15:50.598
       of those promises        
     succeed or fulfilled.      

00:15:54.487 --> 00:15:55.620
    But maybe you only care     
      about the first one.      

00:15:56.756 --> 00:15:57.405
You're loading a bunch of images

00:15:58.058 --> 00:15:59.374
      and once you got one      
   image you're ready to go.    

00:16:00.694 --> 00:16:01.743
   That's where Promise.race    
           comes in.            

00:16:02.796 --> 00:16:05.330
       It will call your        
  callback when the first one   

00:16:07.867 --> 00:16:08.950
of those promises is fulfilled. 

00:16:10.036 --> 00:16:12.003
       So that's a quick        
      glance of Promises.       

00:16:13.974 --> 00:16:16.525
  So that pretty much wraps it  
   up with Modern JavaScript,   

00:16:19.079 --> 00:16:20.428
    at least the parts that     
   we've already implemented    

00:16:21.781 --> 00:16:23.081
        and decided were        
     ready for consumption.     

00:16:24.384 --> 00:16:25.116
There's a lot that's being done 

00:16:25.852 --> 00:16:27.502
      in ECMAScript 6 that      
         is not ready.          

00:16:29.155 --> 00:16:30.371
      And it's going to be      
   coming down the pipeline.    

00:16:31.591 --> 00:16:32.841
    But these pieces we feel    
    that you're ready to use    

00:16:34.094 --> 00:16:37.829
    in your application, in     
  browsers that support them.   

00:16:41.568 --> 00:16:43.118
    So now let's talk about     
       the Web Inspector.       

00:16:45.905 --> 00:16:47.889
   So if you're not familiar    
    with the Web Inspector,     

00:16:49.876 --> 00:16:51.276
  this is what it looks like.   

00:16:52.679 --> 00:16:54.529
  And we've had this UI for a   
  while but we've done a lot.   

00:16:56.383 --> 00:16:57.132
   We've fixed a lot of bugs.   

00:16:57.884 --> 00:16:59.350
 We've added a lot of features. 

00:17:00.820 --> 00:17:02.453
 But the main thing we've done  
   this year is make the Web    

00:17:04.090 --> 00:17:05.623
      Inspector available       
        in more places.         

00:17:07.160 --> 00:17:08.643
     We've listened to your     
feedback and you want to be able

00:17:10.130 --> 00:17:11.146
to inspect your Mac application.

00:17:12.165 --> 00:17:13.798
 You want to be able to inspect 
  your JavaScriptCore context.  

00:17:15.435 --> 00:17:18.653
And that's exactly what you can 
do with iOS 8 and OS X Yosemite.

00:17:21.875 --> 00:17:25.443
  So with Safari, you've been   
 able to inspect your iOS apps  

00:17:29.015 --> 00:17:31.349
  and iOS Safari by tethering   
      up to your computer.      

00:17:33.686 --> 00:17:38.222
  But now you can inspect your  
Mac application and right there 

00:17:43.963 --> 00:17:45.096
     from Safari see a list     
   of your Mac applications.    

00:17:46.232 --> 00:17:47.582
   So what's that look like?    

00:17:48.935 --> 00:17:50.101
But first, like I said, you want

00:17:51.271 --> 00:17:52.804
 to inspect your JavaScriptCore 
            context.            

00:17:54.340 --> 00:17:56.090
      But Web Inspector is      
       all about the web.       

00:17:57.844 --> 00:17:59.978
And it's only been able to work 
with WebKit up until this point.

00:18:02.115 --> 00:18:03.231
     But now Web Inspector      
          can connect           

00:18:04.350 --> 00:18:05.783
  to your JavaScriptCore-based  
         applications.          

00:18:07.220 --> 00:18:08.453
       So even if you're        
      not using a web view      

00:18:09.689 --> 00:18:11.639
but you're using JavaScriptCore 
  for some logic in your game,  

00:18:13.593 --> 00:18:15.093
       you can now debug        
     that JavaScript right      

00:18:16.596 --> 00:18:18.129
      in the Web Inspector      
     and it's really great.     

00:18:19.666 --> 00:18:21.182
      So let's-let's show       
    you what it looks like.     

00:18:22.702 --> 00:18:25.770
 So, Mac App inspection, like I 
 said, will show up right next  

00:18:28.842 --> 00:18:30.375
      to your iOS devices       
      in the Develop menu.      

00:18:31.911 --> 00:18:34.278
  In this case, I have two Mac  
 Apps and the second one here,  

00:18:36.649 --> 00:18:38.149
JSPong, is a JavaScriptCore app.

00:18:39.652 --> 00:18:40.485
  The first one is a web view   

00:18:41.321 --> 00:18:42.370
       but they're right        
      there side by side.       

00:18:43.423 --> 00:18:44.355
 They're first class citizens.  

00:18:45.291 --> 00:18:46.958
      And like I said, you      
     can also still connect     

00:18:48.628 --> 00:18:50.194
    to your iOS applications    
         and iOS Safari         

00:18:51.764 --> 00:18:52.730
  from the same Develop menu.   

00:18:53.700 --> 00:18:56.251
   But for Mac App inspection   
         we require you         

00:18:58.805 --> 00:19:00.622
     to add an entitlement      
          to your app.          

00:19:02.442 --> 00:19:03.908
   You don't want anyone else   
   debugging your JavaScript    

00:19:05.378 --> 00:19:06.644
      context or stealing       
      your JavaScript code      

00:19:07.914 --> 00:19:09.497
   from your Mac Application    
 that you've worked so hard on. 

00:19:11.084 --> 00:19:13.201
 So we require you to have this 
entitlement on your applications

00:19:15.321 --> 00:19:16.604
that you're developing locally. 

00:19:17.891 --> 00:19:19.691
   And it's very simple to do   
    and I'll give you a demo    

00:19:21.494 --> 00:19:22.610
  of it here in a little bit.   

00:19:23.730 --> 00:19:24.963
 But what about JavaScriptCore  
          inspection?           

00:19:26.199 --> 00:19:27.482
     What's that look like?     

00:19:28.768 --> 00:19:30.752
      Well, it looks just       
    like the Web Inspector.     

00:19:32.739 --> 00:19:34.305
 This is the same Web Inspector 
 that you saw a little bit ago. 

00:19:35.875 --> 00:19:36.958
       The other one was        
       for the web view.        

00:19:38.044 --> 00:19:39.193
 This one is for JavaScriptCore 
            context.            

00:19:40.346 --> 00:19:41.996
There's a couple of buttons that
  are missing that don't apply  

00:19:43.650 --> 00:19:44.399
to JavaScriptCore context like, 

00:19:45.151 --> 00:19:46.668
       styles and the DOM       
     and things like that.      

00:19:48.188 --> 00:19:49.821
     But for the most part      
    it's everything you need    

00:19:51.457 --> 00:19:52.874
  to debug your JavaScriptCore  
          application.          

00:19:54.294 --> 00:19:56.344
 And you have the full console. 

00:19:58.398 --> 00:20:00.748
  You can do a REPL, evaluate   
JavaScript or see console.logs. 

00:20:03.102 --> 00:20:05.503
Console.log is now available in 
your JavaScriptCore application.

00:20:07.907 --> 00:20:09.407
  So if you have your own log   
function you can now abandon it 

00:20:10.910 --> 00:20:12.577
  and start using console.log   
 and get all the great benefits 

00:20:14.247 --> 00:20:15.430
     of the Web Inspector's     
         Log functions.         

00:20:16.616 --> 00:20:18.666
 But if you don't do anything,  

00:20:20.720 --> 00:20:22.220
   the console is pretty much   
    all you have available.     

00:20:23.723 --> 00:20:24.505
     And I'll tell you why.     

00:20:25.291 --> 00:20:26.424
       We don't know what       
       you're evaluating        

00:20:27.560 --> 00:20:28.793
in your JavaScriptCore context. 

00:20:30.029 --> 00:20:30.995
      If you're evaluating      
         large scripts,         

00:20:31.965 --> 00:20:32.847
    those are something you     
     probably want to debug     

00:20:33.733 --> 00:20:36.084
  but you could be evaluating   
something every 200 milliseconds

00:20:38.438 --> 00:20:39.904
     and that would quickly     
   pollute the sidebar here.    

00:20:41.374 --> 00:20:42.607
       So you-any script        
     that you want to debug     

00:20:43.843 --> 00:20:46.194
  in the Web Inspector we will  
    need you to supply a URL    

00:20:48.548 --> 00:20:50.431
      or just a plain name      
        for that script.        

00:20:52.318 --> 00:20:54.235
     And we've given you a      
   couple new APIs for this.    

00:20:56.155 --> 00:20:58.356
   There has always been the    
   EvaluateScript functions.    

00:21:00.560 --> 00:21:02.477
 We now have a new Objective-C  
  one that takes a sourceURL,   

00:21:04.397 --> 00:21:05.530
and this URL can be a file URL. 

00:21:06.666 --> 00:21:07.231
       It can be any URL.       

00:21:07.800 --> 00:21:09.917
    The Web Inspector really    
     doesn't take it other      

00:21:12.038 --> 00:21:13.321
      than to get the name      
         at this point.         

00:21:14.607 --> 00:21:16.040
But if it's a file URL, it will 
have a little bit extra benefit 

00:21:17.477 --> 00:21:18.843
      and I'll talk to you      
    about that a little bit,    

00:21:20.213 --> 00:21:22.247
    but JSEvaluateScript has    
 always supported the sourceURL 

00:21:24.284 --> 00:21:25.400
      but a lot of people       
     just pass null to it.      

00:21:26.519 --> 00:21:27.852
       So if you're using       
         the old C API,         

00:21:29.188 --> 00:21:30.605
   make sure to start passing   
     a sourceURL for things     

00:21:32.025 --> 00:21:33.124
     that you want to debug     
    that way they will show     

00:21:34.227 --> 00:21:35.243
    up in the Web Inspector.    

00:21:36.262 --> 00:21:37.278
    And that's for scripts.     

00:21:38.298 --> 00:21:39.013
  But what about your context?  

00:21:39.732 --> 00:21:41.165
Identifying a context is pretty 
   difficult with JavaScript.   

00:21:42.602 --> 00:21:43.968
   We don't know what it is.    

00:21:45.338 --> 00:21:47.071
  By default it will just say   
 JSContext in the Develop menu. 

00:21:48.808 --> 00:21:50.141
   But if you have a multiple   
    context, you don't want     

00:21:51.477 --> 00:21:53.361
    to see a list that says     
JSContext, JSContext, JSContext,

00:21:55.248 --> 00:21:56.798
  you want to identify those.   

00:21:58.351 --> 00:21:59.567
   And as the developer, you    
 should know what you're using  

00:22:00.787 --> 00:22:02.203
      that context for and      
    we provide this new API     

00:22:03.623 --> 00:22:04.922
       that allows you to       
       name your context.       

00:22:06.225 --> 00:22:07.241
      And the name is only      
      used for debugging.       

00:22:08.261 --> 00:22:09.560
    It will only show up in     
     Safari's Develop menu.     

00:22:10.863 --> 00:22:12.647
       So let's just give       
        a demo of this.         

00:22:14.434 --> 00:22:16.901
 So I have a sample application 
  that we released a while ago  

00:22:19.372 --> 00:22:21.406
  at a previous WWDC: JSPong.   

00:22:23.443 --> 00:22:24.459
  And it's a simple pong game.  

00:22:25.478 --> 00:22:27.478
 But I have some things I need  
  to do to it to make it work   

00:22:29.482 --> 00:22:30.398
   with JSContext inspection.   

00:22:31.317 --> 00:22:32.650
  The first thing I need to do  
  is make sure the entitlement  

00:22:33.986 --> 00:22:34.435
           is there.            

00:22:34.887 --> 00:22:35.586
And if you're in the Apps Store,

00:22:36.289 --> 00:22:37.522
   you probably already have    
     an entitlements file.      

00:22:38.758 --> 00:22:39.941
    In this case, I already     
      have an App Sandbox       

00:22:41.127 --> 00:22:42.226
       and that will give       
       me an entitlement.       

00:22:43.329 --> 00:22:45.479
And I have it right here in the 
 sidebar, JSPong.entitlements.  

00:22:47.633 --> 00:22:50.401
   So let's go in and add the   
   entitlement that we need.    

00:22:53.172 --> 00:22:57.458
       And I said it was        
      com.apple.security.       

00:23:01.748 --> 00:23:04.716
      get-task-allow, and       
        it's a Boolean.         

00:23:07.687 --> 00:23:10.154
       And we'll go ahead       
         and say "Yes."         

00:23:13.960 --> 00:23:14.792
   So that's all I need to do   

00:23:15.628 --> 00:23:17.528
       to allow JSContext       
 inspection in my application.  

00:23:19.432 --> 00:23:20.014
And I'll go ahead and save that.

00:23:20.600 --> 00:23:23.184
       And I'll go ahead        
     and build and run it.      

00:23:25.772 --> 00:23:26.854
     And it's a very simple     
           pong game.           

00:23:27.940 --> 00:23:29.240
      The AI is controlled      
        by a JavaScript         

00:23:30.543 --> 00:23:31.309
      that you can modify       
        here in the app.        

00:23:32.078 --> 00:23:33.277
        I'm not going to        
        talk about that.        

00:23:34.480 --> 00:23:37.315
   But now I can go to Safari   
   and, in the Develop menu,    

00:23:40.153 --> 00:23:43.321
 I will see Mac Pro and I will  
  see JSPong and my JSContext.  

00:23:46.492 --> 00:23:47.408
       And I didn't name        
        the context yet,        

00:23:48.327 --> 00:23:49.510
      so it's getting the       
         default name.          

00:23:50.696 --> 00:23:51.412
       And I'll go ahead        
       and inspect that.        

00:23:52.131 --> 00:23:53.414
       And you'll see the       
      resources are empty.      

00:23:54.700 --> 00:23:56.801
    I'm not seeing that that    
  AI script that I've loaded.   

00:23:58.905 --> 00:24:00.621
 But I-if I want to debug that, 
 I'll need to give that a name. 

00:24:02.341 --> 00:24:04.425
   But at this point, I have    
     access to the console.     

00:24:06.512 --> 00:24:07.144
   If you don't do anything,    

00:24:07.780 --> 00:24:09.697
     you can do evaluations     
      here in the console.      

00:24:11.617 --> 00:24:13.067
       You can get access       
         to any globals         

00:24:14.520 --> 00:24:16.587
      that you might have       
   available in your context.   

00:24:18.658 --> 00:24:20.691
  And you will see exceptions   
      in logs and errors.       

00:24:22.728 --> 00:24:24.345
      And in this case, we      
   have an example exception    

00:24:25.965 --> 00:24:26.797
       and this will give       
       you a back trace,        

00:24:27.633 --> 00:24:29.600
  not just of your JavaScript,  
    but of your native code.    

00:24:31.571 --> 00:24:33.237
     So you can see exactly     
      where that function       

00:24:34.907 --> 00:24:36.524
  or script was evaluated all   
  the way to your native codes  

00:24:38.144 --> 00:24:40.044
    so you can trace it back    
    to the exist-the origin.    

00:24:43.249 --> 00:24:46.384
  So let's go back into Xcode   
    and name some of these.     

00:24:49.522 --> 00:24:49.971
     So it's pretty simple.     

00:24:50.423 --> 00:24:51.088
  I'll just comment this out.   

00:24:51.757 --> 00:24:53.274
       This will name my        
     context, Pong Context.     

00:24:54.794 --> 00:24:55.493
    I only have one context.    

00:24:56.195 --> 00:24:56.794
  But if I had multiple ones,   

00:24:57.396 --> 00:24:59.563
     it would be imperative     
      for me to name them.      

00:25:01.734 --> 00:25:03.751
    And when I'm evaluating     
         the AI script,         

00:25:05.771 --> 00:25:07.071
        all I have to do        
      is construct a URL.       

00:25:08.374 --> 00:25:09.974
     In this case, I'm just     
   making a URL with a string   

00:25:11.577 --> 00:25:13.260
     and it really doesn't      
        have a location.        

00:25:14.947 --> 00:25:17.164
     And I'll just use the      
    new withSourceURL method    

00:25:19.385 --> 00:25:21.185
     and pass in that URL.      

00:25:22.989 --> 00:25:24.655
    Now let's build and run     
      and see what happens      

00:25:26.325 --> 00:25:27.291
     in the Web Inspector.      

00:25:30.763 --> 00:25:32.196
       We'll go ahead and       
  reconnect to the pong game.   

00:25:33.633 --> 00:25:36.501
    In the Resource sidebar,    
  we now have that AI script.   

00:25:39.372 --> 00:25:40.955
   And in the app, we didn't    
      syntax highlight it.      

00:25:42.542 --> 00:25:43.408
       But Web Inspector        
       knows exactly how        

00:25:44.277 --> 00:25:45.376
to syntax highlight JavaScript. 

00:25:46.479 --> 00:25:48.062
   So we can set breakpoints    
          right here.           

00:25:49.649 --> 00:25:52.333
 And since the script is called 
every iteration of the movement,

00:25:55.021 --> 00:25:55.520
  it should break right away.   

00:25:56.022 --> 00:25:57.255
  And now I'm in the debugger.  

00:25:58.491 --> 00:25:59.957
I have access to the call stack.

00:26:01.427 --> 00:26:02.943
   There's nothing other than   
  this function being called.   

00:26:04.463 --> 00:26:05.396
       But if there was a       
   deeply nested call stack,    

00:26:06.332 --> 00:26:07.682
     you would see it right     
     there in the sidebar.      

00:26:09.035 --> 00:26:11.536
 And I can also bring open the  
  scope chain and we can-just   

00:26:14.040 --> 00:26:15.139
       like you would any       
      JavaScript context,       

00:26:16.242 --> 00:26:18.059
you can now inspect the objects 
   that you're getting passed   

00:26:19.879 --> 00:26:22.196
     around or your global      
      scope in this case.       

00:26:24.517 --> 00:26:27.552
     And we can do what any     
debugger does and step through, 

00:26:30.590 --> 00:26:32.373
   and do anything you would    
    do in a normal debugger,    

00:26:34.160 --> 00:26:35.660
    in addition to hovering     
         over variables         

00:26:37.163 --> 00:26:39.030
      to see their current      
    value or evaluate things    

00:26:40.900 --> 00:26:42.617
     in this current scope      
        in the console.         

00:26:44.337 --> 00:26:48.873
   So in this case, let's try   
    modifying the ball here.    

00:26:54.580 --> 00:26:56.297
    Maybe we want to modify     
     the rules of pong here     

00:26:58.017 --> 00:26:59.533
       and make something       
      really easy to hit.       

00:27:01.053 --> 00:27:01.869
       So I've gone ahead       
       and modified that.       

00:27:02.688 --> 00:27:06.273
 And I have an update function  
here that will redraw my scene. 

00:27:09.862 --> 00:27:11.262
      And you can see the       
     ball increase in size      

00:27:12.665 --> 00:27:13.948
        as I may-after I        
       made that change.        

00:27:15.234 --> 00:27:16.934
    And this is working with    
  Objective-C bridged objects.  

00:27:18.638 --> 00:27:20.771
   The ball object here is a    
   bridged Objective-C object   

00:27:22.908 --> 00:27:25.709
 that you can use as you would  
  a normal JavaScript object.   

00:27:28.514 --> 00:27:29.864
So that's JSContext inspection. 

00:27:31.217 --> 00:27:31.832
 And we'll go ahead and play it 

00:27:32.451 --> 00:27:33.951
  and the ball stays the same   
    size and keeps on going.    

00:27:36.856 --> 00:27:39.307
  So again, any web view, any   
JavaScript context that you have

00:27:41.761 --> 00:27:43.127
    in your application can     
    be debugged now as long     

00:27:44.497 --> 00:27:45.346
     as you have the right      
          entitlement.          

00:27:46.198 --> 00:27:47.197
 And this also applies for iOS. 

00:27:48.200 --> 00:27:50.117
 So only builds that you build  
   and run on to your device    

00:27:52.038 --> 00:27:53.571
   or into the iOS simulator    
      will be inspectable.      

00:27:55.107 --> 00:27:56.407
      Any app from the App      
   Store will not be allowed    

00:27:57.710 --> 00:27:59.126
to be inspected by anyone else. 

00:28:00.546 --> 00:28:01.979
    So that's all you need.     

00:28:03.416 --> 00:28:04.765
  And again, name your context  
     and name your scripts,     

00:28:06.118 --> 00:28:07.484
   so you can easily identify   
  them when you're debugging.   

00:28:08.854 --> 00:28:11.672
    So now let's talk about     
    something that we've had    

00:28:14.493 --> 00:28:16.594
    in the Web Inspector for    
     a while: the Timeline.     

00:28:18.698 --> 00:28:20.014
  And something new this year   
 is the Source Code Timelines.  

00:28:21.333 --> 00:28:22.099
   So what do I mean by that?   

00:28:22.868 --> 00:28:24.501
     What sorts of problems     
         does it solve?         

00:28:26.138 --> 00:28:28.923
 So Source Code Timelines help  
   you answer this question.    

00:28:31.711 --> 00:28:33.895
   What happened when I click   
   on something on the page?    

00:28:36.082 --> 00:28:37.231
    Maybe it's a new project    
    that you're working on,     

00:28:38.384 --> 00:28:39.183
      maybe it's something      
      you wrote years ago       

00:28:39.985 --> 00:28:41.268
 and you don't remember how it  
  worked and you want to find   

00:28:42.555 --> 00:28:44.355
 that line of code that handles 
this click, so you can fix a bug

00:28:46.158 --> 00:28:48.542
   or so you can just modify    
    it for some new behavior    

00:28:50.930 --> 00:28:52.413
      that your client is       
       asking you to add.       

00:28:53.899 --> 00:28:55.115
  So, when this click happens,  
     there's a lot of stuff     

00:28:56.335 --> 00:28:57.218
    that probably going on.     

00:28:58.104 --> 00:28:59.520
    But you really only care    
   about code that you wrote,   

00:29:00.940 --> 00:29:02.606
 maybe you have some analytics  
  code or a lot of other code   

00:29:04.276 --> 00:29:05.259
        that it might be        
        hard to decipher        

00:29:06.245 --> 00:29:08.729
  or see interleaved functions  
and event calls and all of these

00:29:11.217 --> 00:29:13.334
      that happen in a big      
    modern web application.     

00:29:15.454 --> 00:29:18.739
    So when I click on that,    
   you start wondering, "OK,    

00:29:22.027 --> 00:29:23.494
    what script is handling     
         this button?"          

00:29:24.964 --> 00:29:26.564
And it turns out it's this one. 

00:29:28.167 --> 00:29:30.317
      But with the new Web      
 Inspector, we can dig deeper.  

00:29:32.471 --> 00:29:34.622
  In the script, I can now see  
   a timeline representation    

00:29:36.776 --> 00:29:38.276
 of what the script was doing.  

00:29:39.779 --> 00:29:41.629
  So I can see over time where  
the mouse events are coming in, 

00:29:43.482 --> 00:29:44.798
    where the clicks events,    
   where the timer was added,   

00:29:46.118 --> 00:29:47.067
  where the timers are firing,  

00:29:48.020 --> 00:29:49.386
        where I might be        
      doing forced layout,      

00:29:50.756 --> 00:29:53.641
  which is a pretty evil thing  
   to do in a modern web app.   

00:29:56.529 --> 00:29:58.129
    So what's it looked like    
     in the Web Inspector?      

00:29:59.732 --> 00:30:01.766
      Well, here's the new      
    Web Inspector Timeline.     

00:30:03.803 --> 00:30:06.854
 And you can see in the sidebar 
here we have all of our scripts 

00:30:09.909 --> 00:30:11.976
  and resources from the page   
 broken out in their hierarchy  

00:30:14.046 --> 00:30:16.630
   of how they're included by   
you, the developer, in the page 

00:30:19.218 --> 00:30:21.485
       and you can expand       
    each script to see what     

00:30:23.756 --> 00:30:25.806
   that script was doing and    
  where the line of code was.   

00:30:27.860 --> 00:30:29.310
    And in this case, you'll    
      see a whole timeline      

00:30:30.763 --> 00:30:31.729
        where things are        
     happening repeatedly.      

00:30:32.698 --> 00:30:33.814
      You'll start seeing       
     patterns and allow you     

00:30:34.934 --> 00:30:36.634
  to identify problem areas if  
 something is firing too much,  

00:30:38.337 --> 00:30:40.788
   too little, not at all, if   
 you don't see it in the list.  

00:30:43.242 --> 00:30:44.992
 And if you want to dig deeper  
  into the code, all you have   

00:30:46.745 --> 00:30:47.845
      to do is click right      
      there on the sidebar      

00:30:48.948 --> 00:30:50.564
 and it will take you right to  
that location, and you can mouse

00:30:52.184 --> 00:30:54.101
up and down through the sidebar 
 and have your code on one side 

00:30:56.021 --> 00:30:57.237
       and your timeline        
      data in the sidebar.      

00:30:58.457 --> 00:31:00.007
 So you can get a good overview 

00:31:01.560 --> 00:31:03.143
     of what the script is      
      doing really quick.       

00:31:05.998 --> 00:31:06.897
      So that's the Source      
         Code Timelines         

00:31:07.800 --> 00:31:09.517
    and I'll give you a demo    
    here in a little minute.    

00:31:12.271 --> 00:31:13.354
  So something else that's new  

00:31:14.440 --> 00:31:16.207
      in the Web Inspector      
     is Breakpoint Probes.      

00:31:17.977 --> 00:31:20.127
     So you might have some     
   information that you want    

00:31:22.281 --> 00:31:23.797
       to know when that        
        mouse is clicked        

00:31:25.317 --> 00:31:26.533
 or when your mouse is moving.  

00:31:27.753 --> 00:31:29.320
  And those things are kind of  
 hard to debug in the debugger. 

00:31:30.890 --> 00:31:32.022
    You often have to resort    
      to printf debugging       

00:31:33.158 --> 00:31:34.708
   because you don't want to    
constantly be switching context 

00:31:36.262 --> 00:31:39.263
    between your app in the     
  page and the Web Inspector.   

00:31:42.268 --> 00:31:43.951
 So you often result to printf  
debugging and you're cluttering 

00:31:45.638 --> 00:31:47.238
 up your console with thousands 
     of lines and it's hard     

00:31:48.841 --> 00:31:50.474
   to decipher, especially if   
you're debugging multiple areas 

00:31:52.111 --> 00:31:53.794
      that are not related      
       and you don't care       

00:31:55.481 --> 00:31:56.914
   about the interloop data.    

00:31:58.350 --> 00:31:59.566
        So this is where        
  Breakpoint Probes comes in.   

00:32:00.786 --> 00:32:02.770
     It let's you see these     
 properties that you might care 

00:32:04.757 --> 00:32:06.123
    about without having to     
breakout into the Web Inspector.

00:32:07.493 --> 00:32:09.710
     So let's just go ahead     
    and give a demo of this.    

00:32:11.931 --> 00:32:13.380
  So let's go to Safari here.   

00:32:14.833 --> 00:32:17.551
      And I have a simple       
      stack the block game      

00:32:22.574 --> 00:32:25.042
that I want to-it's been a while
since this was written so I want

00:32:27.513 --> 00:32:28.112
    to see what's going on.     

00:32:28.714 --> 00:32:30.381
   Let's go ahead and use the   
    Timeline panel for this.    

00:32:32.051 --> 00:32:33.150
    I'll go ahead and bring     
      up the Web Inspector      

00:32:34.253 --> 00:32:36.487
      in the Develop menu,      
      show Web Inspector.       

00:32:38.724 --> 00:32:40.007
      And we'll go to the       
        Timeline panel.         

00:32:41.293 --> 00:32:42.209
      And by default, the       
       Timeline is empty.       

00:32:43.128 --> 00:32:44.127
It's not recording all the time.

00:32:45.130 --> 00:32:47.064
   And it only automatically    
records when you reload the page

00:32:49.001 --> 00:32:51.051
  or when you press the Record  
 button up here in the corner.  

00:32:53.105 --> 00:32:54.271
      And this can record       
       any length of time       

00:32:55.441 --> 00:32:56.574
 that you would like to record. 

00:32:57.710 --> 00:32:58.726
       But when you-when        
       I reload the page,       

00:32:59.745 --> 00:33:00.728
      it will only record       
         a little bit.          

00:33:01.714 --> 00:33:03.130
 So I'm just going to go ahead  
    and start recording here    

00:33:04.550 --> 00:33:06.450
and see what this page is doing 
 as I interact with this game.  

00:33:08.354 --> 00:33:10.054
       And you'll see the       
    events and all the work     

00:33:11.757 --> 00:33:12.923
       that the engine is       
       doing in response        

00:33:14.093 --> 00:33:15.960
     to these events start      
  filling up on the Timeline.   

00:33:17.830 --> 00:33:19.730
And I'll go ahead and stop this.

00:33:21.633 --> 00:33:23.717
  And my application has three  
 scripts, but the logic is all  

00:33:25.804 --> 00:33:27.354
  in blocks.js, all the other   
    stuff is stuff I didn't     

00:33:28.907 --> 00:33:29.439
          even write.           

00:33:29.975 --> 00:33:30.874
       I don't even know        
     what's going on there.     

00:33:31.777 --> 00:33:33.293
   So I can ignore those, but   
    they're doing some work.    

00:33:34.813 --> 00:33:36.063
       And normally that        
    would clutter up my UI.     

00:33:37.316 --> 00:33:39.199
 But they're collapsed here, so 
they're not taking up any space.

00:33:41.086 --> 00:33:42.920
  I'll go ahead and expand the  
 script that I care about here  

00:33:44.757 --> 00:33:48.242
 and I can see that Timers are  
 firing pretty-at a pretty good 

00:33:51.730 --> 00:33:53.864
  clip as I'm interacting with  
the page and there's key events 

00:33:56.001 --> 00:33:57.501
     that are firing every      
      time I press a key.       

00:33:59.004 --> 00:34:00.354
     Some of the other new      
 features of the timeline here, 

00:34:01.707 --> 00:34:03.791
 we can now zoom and scale the  
 overview panel so if you want  

00:34:05.878 --> 00:34:08.696
 to dig in to see where things  
 are happening across domains.  

00:34:11.517 --> 00:34:13.133
  In this case, we have three   
Timelines, the Network Request, 

00:34:14.753 --> 00:34:15.769
     Layout and Rendering,      
        and JavaScript.         

00:34:16.789 --> 00:34:19.423
 And all three play a key role  
in the performance of your page.

00:34:22.061 --> 00:34:23.310
     So if you see anything     
     interesting happening      

00:34:24.563 --> 00:34:26.613
   in a specific time range,    
     you can zoom in on it,     

00:34:28.667 --> 00:34:30.017
   make a selection and that    
     information will show      

00:34:31.370 --> 00:34:33.137
   up below in the Timeline.    

00:34:34.907 --> 00:34:36.507
   And you can also drag this   
   around to scroll and scrub   

00:34:38.110 --> 00:34:41.378
  through your time as things   
  were happening on the page.   

00:34:44.650 --> 00:34:47.451
 So in this case, let me reload 
and I'll show you the networks. 

00:34:50.255 --> 00:34:52.189
       And in this case,        
       it's a local file.       

00:34:54.126 --> 00:34:55.642
  But we now have network load  
 information and you see those  

00:34:57.162 --> 00:34:58.695
    on the network timeline     
       and you'll notice        

00:35:00.232 --> 00:35:01.114
     that the Timeline just     
      automatically stops       

00:35:02.000 --> 00:35:02.482
        recording there.        

00:35:02.968 --> 00:35:03.684
        It records up to        
        a certain amount        

00:35:04.403 --> 00:35:06.120
  of time unless you manually   
  hit the Record button again   

00:35:07.840 --> 00:35:09.206
  to record more information.   

00:35:10.576 --> 00:35:12.009
     So let's look into the     
     network timeline here.     

00:35:13.445 --> 00:35:14.695
     And we can see all of      
      the network details       

00:35:15.948 --> 00:35:16.630
   that you might be familiar   

00:35:17.316 --> 00:35:18.766
      with in the previous      
       network timeline.        

00:35:20.219 --> 00:35:21.669
   They're all there and you    
  can sort-sort these columns   

00:35:23.122 --> 00:35:24.672
    by whatever information     
   you find most interesting.   

00:35:26.225 --> 00:35:28.075
    If you're looking for a     
   large script, you can sort   

00:35:29.928 --> 00:35:31.545
    by transfer size and see    
    the biggest script show     

00:35:33.165 --> 00:35:34.281
        up right there.         

00:35:35.400 --> 00:35:36.983
  Let's go back to start time.  

00:35:38.570 --> 00:35:40.087
     You can also do-click      
     on the other timelines     

00:35:41.607 --> 00:35:43.123
and get detailed tab-linear data

00:35:44.643 --> 00:35:45.943
     of what was happening      
      in that time range.       

00:35:47.246 --> 00:35:48.295
       And again this is        
     all time range-based.      

00:35:49.348 --> 00:35:51.482
So you can see, as these layout 
and rendering events filter out,

00:35:53.619 --> 00:35:55.769
      they disappear from       
       the display below.       

00:35:57.923 --> 00:35:59.840
     JavaScript and Events      
       is a special view.       

00:36:01.760 --> 00:36:03.427
     And if you're looking      
   for the old profile data,    

00:36:05.097 --> 00:36:06.046
  this is where it's moved to.  

00:36:06.999 --> 00:36:09.133
So as you're recording Timeline,
 we would now capture profiles  

00:36:11.270 --> 00:36:12.619
   of all those entry points    
     into your JavaScript.      

00:36:13.972 --> 00:36:16.456
So whenever script is evaluated,
you can expand these to see all 

00:36:18.944 --> 00:36:20.711
     of the functions that      
   were called in your script   

00:36:22.481 --> 00:36:24.364
     and how much time each     
individual function took to make

00:36:26.251 --> 00:36:27.884
        up that piece of        
       that entry point.        

00:36:29.521 --> 00:36:31.438
       So that's a brief        
    glance at the Timeline.     

00:36:33.358 --> 00:36:34.407
  But there is one cool thing   
   that people always forget    

00:36:35.460 --> 00:36:36.810
       about when they're       
  talking about the Timeline.   

00:36:38.163 --> 00:36:38.929
     And that's the Filter.     

00:36:39.698 --> 00:36:41.732
       The Filter bar is        
    vastly underappreciated     

00:36:43.769 --> 00:36:45.736
 in the Web Inspector and even  
   Xcode where it comes from,   

00:36:47.706 --> 00:36:49.006
      where you can filter      
         down this list         

00:36:50.309 --> 00:36:51.792
 to find what exactly you want. 

00:36:53.278 --> 00:36:54.845
  So, in this case I'd look-I   
     did a filter for event     

00:36:56.415 --> 00:36:57.514
 and it found addEventListener  
          right there           

00:36:58.617 --> 00:36:59.283
and it brought it to the front. 

00:36:59.952 --> 00:37:01.034
       It expanded those        
     profiles and showed me     

00:37:02.120 --> 00:37:03.453
      that exact function       
       I was looking for.       

00:37:04.790 --> 00:37:06.190
      So that's the Filter      
    Bar and I encourage you     

00:37:07.593 --> 00:37:08.459
    to start using filtering    
           more often           

00:37:09.328 --> 00:37:10.260
      in the Web Inspector      
        and even Xcode.         

00:37:11.196 --> 00:37:12.529
      We'll go back to my       
       block application        

00:37:13.865 --> 00:37:15.232
and bring up the Web Inspector. 

00:37:16.602 --> 00:37:19.987
  And let's go ahead and go to  
   the Resource sidebar here.   

00:37:23.375 --> 00:37:25.876
  And I really want to improve  
this key function listener-this 

00:37:28.380 --> 00:37:29.229
         key listener.          

00:37:30.082 --> 00:37:31.765
      It's using key code,      
    which is pretty arcane.     

00:37:33.452 --> 00:37:34.818
    And there's some new API    
   key identifier that's been   

00:37:36.188 --> 00:37:37.120
 out for years that I could use 

00:37:38.056 --> 00:37:39.472
     that would give string     
        representations         

00:37:40.892 --> 00:37:43.159
     of these-for my cases      
    instead of the numbers.     

00:37:45.430 --> 00:37:48.164
 So what I'll do, like I said,  
when we set a breakpoint anytime

00:37:50.902 --> 00:37:52.385
    that key is pressed it's    
 going to interrupt my process. 

00:37:53.872 --> 00:37:55.405
   So now to do another key,    
     I have to hit Continue     

00:37:56.942 --> 00:37:57.891
     and log what I wanted.     

00:37:58.844 --> 00:38:00.711
 And press another key, figure  
    out what I'm doing here.    

00:38:02.581 --> 00:38:05.382
  But with this breakpoint we   
  can add a breakpoint action.  

00:38:08.186 --> 00:38:10.387
And I'll go ahead and edit this 
  breakpoint, which will bring  

00:38:12.591 --> 00:38:14.174
       up the breakpoint        
        Action popover.         

00:38:15.761 --> 00:38:17.561
       And let's go ahead       
        and add a probe.        

00:38:19.364 --> 00:38:20.297
        So we have a few        
       actions available.       

00:38:21.233 --> 00:38:21.882
  I'm not going to cover them.  

00:38:22.534 --> 00:38:23.633
       But they're pretty       
       self-explanatory.        

00:38:24.736 --> 00:38:26.119
      Probe Expression in       
    this case is brand new.     

00:38:27.506 --> 00:38:29.239
     And we'll go ahead and     
     evaluate an expression     

00:38:30.976 --> 00:38:31.658
   that we're interested in.    

00:38:32.344 --> 00:38:34.861
 And we have an an event object 
  here and I want to know what  

00:38:37.382 --> 00:38:38.348
    that key identifier is.     

00:38:39.318 --> 00:38:41.351
 And that's all I need to type. 

00:38:43.388 --> 00:38:44.871
  And I want to automatically   
   continue after evaluating    

00:38:46.358 --> 00:38:47.708
      so it doesn't pause       
        in the debugger.        

00:38:50.195 --> 00:38:51.595
     So we'll go ahead and      
       break out in here.       

00:38:52.998 --> 00:38:54.014
  And when I added that probe,  

00:38:55.033 --> 00:38:56.499
     it added a new sidebar     
      item called Probes.       

00:38:57.969 --> 00:38:59.953
  And this is where that data   
   will show up in the table.   

00:39:01.940 --> 00:39:04.090
   So I'm going to go back to   
 my game and interact with it.  

00:39:06.244 --> 00:39:08.011
 And now it's logging that key  
 identifier every time I press  

00:39:09.781 --> 00:39:11.364
      the key and showing       
         me the values          

00:39:12.951 --> 00:39:15.051
  that I can now take an input  
into my code and improve my code

00:39:17.155 --> 00:39:19.105
  and I didn't-this would have  
 been a back and forth process  

00:39:21.059 --> 00:39:22.559
   or a lot of assumption of    
  what these identifiers were.  

00:39:24.062 --> 00:39:25.195
     Now I can see them all     
     in a table and go back     

00:39:26.331 --> 00:39:28.164
  to my case and modify them.   

00:39:31.570 --> 00:39:32.502
       So that's Probes.        

00:39:33.438 --> 00:39:35.088
     So that's a little bit     
    about Breakpoint Probes     

00:39:36.742 --> 00:39:37.374
   and Source Code Timelines.   

00:39:38.009 --> 00:39:39.275
     And I encourage you to     
     play around with them      

00:39:40.545 --> 00:39:42.495
    and see how they can fit    
 into your debugging workflow.  

00:39:45.617 --> 00:39:47.184
       So now let's talk        
      about Accessibility.      

00:39:48.754 --> 00:39:49.536
  A new in the Web Inspector,   

00:39:50.322 --> 00:39:52.022
    we have an Accessibility    
         Details View.          

00:39:53.725 --> 00:39:56.159
      And this is pretty,       
       pretty important.        

00:39:58.597 --> 00:40:00.063
       If you're working        
      on a major website,       

00:40:01.533 --> 00:40:02.782
   you want to be accessible    
          to everyone.          

00:40:04.035 --> 00:40:05.135
       Apple cares a lot        
      about accessibility.      

00:40:06.238 --> 00:40:08.772
   And we do a lot of work to   
   make accessibility matter.   

00:40:11.309 --> 00:40:13.443
   But it only goes so far as   
  to how much you put into it   

00:40:15.580 --> 00:40:16.997
     when you're developing     
     your own applications.     

00:40:18.417 --> 00:40:19.483
       And that goes for        
        iOS applications        

00:40:20.552 --> 00:40:21.968
     and web applications.      

00:40:23.388 --> 00:40:24.955
    And on the web, we have     
     something called ARIA.     

00:40:26.525 --> 00:40:28.141
     And it's recently hit      
       a milestone ARIA 1       

00:40:29.761 --> 00:40:31.061
       or it's about to.        

00:40:32.364 --> 00:40:34.965
     And that allows you to     
   define for a DOM node what   

00:40:37.569 --> 00:40:38.852
 that DOM node does as a role.  

00:40:40.138 --> 00:40:41.688
      And those roles are       
     translated into things     

00:40:43.241 --> 00:40:45.959
   that the person using the    
computer with VoiceOver can hear

00:40:48.680 --> 00:40:51.264
     or see with your-with      
     your web application.      

00:40:53.852 --> 00:40:55.352
       And in this case,        
        I have a webpage        

00:40:56.855 --> 00:40:58.572
       that has an alert,       
         an HTML alert.         

00:41:00.292 --> 00:41:02.392
   And those are notoriously    
     hard to debug or hard      

00:41:04.496 --> 00:41:07.113
   for a sighted-non-sighted    
  person to see when they pop   

00:41:09.734 --> 00:41:11.801
up in a webpage because they're 
  not going to be able to see   

00:41:13.872 --> 00:41:17.057
    that content unless you     
  annotate it with ARIA roles.  

00:41:20.245 --> 00:41:22.462
     And in this case, the      
      VoiceOver machinery       

00:41:24.683 --> 00:41:27.200
and the Accessibility machinery 
   in web view exposes a lot    

00:41:29.721 --> 00:41:30.987
     of details like child      
         relationships.         

00:41:32.257 --> 00:41:33.974
  And these relationships are   
    not necessarily the same    

00:41:35.694 --> 00:41:37.110
      as a normal DOM node      
          relationship          

00:41:38.530 --> 00:41:41.064
   where your parent could be   
  someone that's deeply-a deep  

00:41:43.602 --> 00:41:44.701
        ancestor of you.        

00:41:45.804 --> 00:41:47.571
       And we show those        
      in the sidebar here       

00:41:49.341 --> 00:41:50.073
as a parent-child relationship. 

00:41:50.809 --> 00:41:51.391
   And they're all linkable.    

00:41:51.977 --> 00:41:53.009
       So I can click on        
      them and go directly      

00:41:54.045 --> 00:41:56.646
   to these other child nodes   
   that are part of my alert.   

00:41:59.251 --> 00:42:00.984
  And see that this button has  
  the right role for a button.  

00:42:02.721 --> 00:42:04.638
  And it will allow people-it   
won't allow people to focus it, 

00:42:06.558 --> 00:42:07.474
      but it allows people      
          to click it.          

00:42:08.393 --> 00:42:10.176
       And that's a brief       
   summary of what you can do   

00:42:11.963 --> 00:42:13.346
     with the Web Inspector     
       and Accessibility.       

00:42:14.733 --> 00:42:15.682
       There's a session        
        tomorrow morning        

00:42:16.635 --> 00:42:18.168
   that covers Accessibility    
          and the web.          

00:42:19.704 --> 00:42:20.637
      And I encourage you       
      to go check it out.       

00:42:21.573 --> 00:42:23.223
    If you have a website or    
     a web view in your iOS     

00:42:24.876 --> 00:42:27.093
   or Mac application, please   
     do make it accessible.     

00:42:30.849 --> 00:42:32.232
So that's accessibility details.

00:42:33.618 --> 00:42:35.218
      Now let's talk about      
  something that's really fun,  

00:42:36.821 --> 00:42:38.204
        which is Color.         

00:42:39.591 --> 00:42:40.957
Color is one of those things-we 

00:42:42.327 --> 00:42:44.260
    as people can understand    
            numbers.            

00:42:46.197 --> 00:42:47.714
      But colors, there's       
       millions of them.        

00:42:49.234 --> 00:42:51.334
    And it's very visual and    
    a very personal process     

00:42:53.438 --> 00:42:54.571
  of picking the right color.   

00:42:55.707 --> 00:42:58.074
   And if you're like me and    
  you're working on a webpage,  

00:43:00.445 --> 00:43:01.378
        you might have a        
    client come in and say,     

00:43:02.314 --> 00:43:04.848
   "I want this color salmon"   
     or "this color taupe."     

00:43:07.385 --> 00:43:10.103
It's hard for them to take those
  words and you can translate   

00:43:12.824 --> 00:43:13.757
   that into the right color.   

00:43:14.693 --> 00:43:15.675
  Wouldn't it be great if you   
  can just bring up the color,  

00:43:16.661 --> 00:43:17.644
      pick it right there       
         in the webpage         

00:43:18.630 --> 00:43:20.063
      and modify it right       
    there in front of them.     

00:43:21.499 --> 00:43:22.498
   So that's what we've added   
     in the Web Inspector,      

00:43:23.501 --> 00:43:24.284
   and I'll give you a demo.    

00:43:25.070 --> 00:43:26.586
     So I have an icon that     
     I've been mocking up.      

00:43:28.106 --> 00:43:29.472
      And often I do these      
       things in the web        

00:43:30.842 --> 00:43:31.825
    because that's something    
         I understand.          

00:43:32.811 --> 00:43:33.960
       I can play around        
      with it a lot easier      

00:43:35.113 --> 00:43:36.329
       than maybe I could       
        do in Photoshop.        

00:43:37.549 --> 00:43:39.232
And this icon is a little small 
so I'll just go ahead and bring 

00:43:40.919 --> 00:43:43.019
   up the Web Inspector here.   

00:43:45.123 --> 00:43:47.357
       And I have a class       
         that I can add         

00:43:49.594 --> 00:43:50.877
      to make it a little       
        bigger for you.         

00:43:52.163 --> 00:43:53.212
    So, now I have my icon.     

00:43:54.265 --> 00:43:54.797
    It has a couple colors.     

00:43:55.333 --> 00:43:56.115
      It's got this color       
         for the glyph          

00:43:56.901 --> 00:43:58.067
    and it's got a gradient     
       in the background.       

00:43:59.237 --> 00:44:02.872
    I can bring up the Style    
 sidebar and see those colors.  

00:44:06.511 --> 00:44:08.378
     And in this case, I'm      
    using some named colors.    

00:44:10.248 --> 00:44:11.347
        CSS has hundreds        
        of named colors.        

00:44:12.450 --> 00:44:13.666
       But maybe it's not       
        the right teal.         

00:44:14.886 --> 00:44:16.286
      That's a little more      
     green than I expected      

00:44:17.689 --> 00:44:20.190
      or the light blue is      
      not enough sea foam       

00:44:22.694 --> 00:44:24.661
   or whatever your client is   
telling you to make this color. 

00:44:26.631 --> 00:44:30.266
So, I can click on these colors 
swatches and get a Color Editor.

00:44:33.905 --> 00:44:35.922
      Or I can switch over      
      to the CSS resource       

00:44:37.942 --> 00:44:39.592
       and get the exact        
        same experience.        

00:44:41.246 --> 00:44:42.679
   But in this case, we want    
  your source code to be front  

00:44:44.115 --> 00:44:45.715
  and center, so we don't even  
   add those color swatches.    

00:44:47.318 --> 00:44:48.351
   But we have a new feature    

00:44:49.387 --> 00:44:51.554
    that let you get a data     
   detector-like experience.    

00:44:53.725 --> 00:44:54.491
      When we detect that       
         it's a color,          

00:44:55.260 --> 00:44:57.577
   we will show a color wheel   
  next to it as you hover it.   

00:44:59.898 --> 00:45:01.264
       And when you click       
         on that wheel,         

00:45:02.634 --> 00:45:03.917
 we bring up the color popover. 

00:45:05.203 --> 00:45:06.469
      And in this case we       
    could just click around     

00:45:07.739 --> 00:45:09.205
   and you can see the color    
   updating live right there    

00:45:10.675 --> 00:45:11.908
        in the web page.        

00:45:13.144 --> 00:45:14.494
 And I can find the right color 

00:45:15.847 --> 00:45:17.514
        that I'm looking        
      for, for this glyph.      

00:45:19.184 --> 00:45:20.583
   And if it's a named color    
      it will default back      

00:45:21.986 --> 00:45:22.819
   to the named color syntax.   

00:45:23.655 --> 00:45:24.537
   But if it's not something    
         that's named,          

00:45:25.423 --> 00:45:27.540
     it will just give you      
     the RGB syntax or RGBa     

00:45:29.661 --> 00:45:31.177
    if you picked an alpha.     

00:45:32.697 --> 00:45:33.947
   But we didn't stop there.    

00:45:35.200 --> 00:45:36.499
  We now let you do gradients.  

00:45:37.802 --> 00:45:39.602
  And gradients are even more   
  hard to visualize than color  

00:45:41.406 --> 00:45:42.405
because you have that interplay 

00:45:43.408 --> 00:45:44.974
  of the colors transitioning   
      from one to another.      

00:45:46.544 --> 00:45:48.177
      And it's hard to see      
      those in your mind.       

00:45:49.814 --> 00:45:51.664
      But we can go ahead       
    and edit this gradient.     

00:45:53.518 --> 00:45:55.135
And it gives you a simple slider

00:45:56.755 --> 00:45:58.655
   that you might be familiar   
      with from other UIs.      

00:46:00.558 --> 00:46:01.491
  And I can drag these around   

00:46:02.427 --> 00:46:03.877
  and you'll see it's updating  
the source code as I drag this. 

00:46:05.330 --> 00:46:06.312
  The percentage is changing.   

00:46:07.298 --> 00:46:08.531
     And when I let go, it      
     updates the page live.     

00:46:09.768 --> 00:46:12.519
   So I can see exactly what    
   is applying to this page.    

00:46:15.273 --> 00:46:16.806
       But you can't just       
     edit the color stops.      

00:46:18.343 --> 00:46:22.095
    You can edit the type of    
gradient or you can pick radial 

00:46:25.850 --> 00:46:27.266
       so it's coming out       
        from the center.        

00:46:28.686 --> 00:46:30.219
    And I can click on these    
 colors and get the color wheel 

00:46:31.756 --> 00:46:33.906
   and start editing each of    
  these color stops directly.   

00:46:36.060 --> 00:46:38.144
    So I can find the exact     
     look I'm looking for.      

00:46:40.231 --> 00:46:43.032
       Drag this around.        

00:46:45.837 --> 00:46:47.737
    Maybe we'll run it to be    
  more of the starburst look.   

00:46:51.910 --> 00:46:52.942
   A little bit more yellow.    

00:46:53.978 --> 00:46:55.778
 Or the client might say, "Oh,  

00:46:57.582 --> 00:46:58.948
    I want a linear gradient    
         in this case."         

00:47:00.318 --> 00:47:01.818
    So let's go back to the     
      traditional iOS look      

00:47:03.321 --> 00:47:06.673
for gradients and start picking 
 some pretty wild colors here.  

00:47:10.028 --> 00:47:12.629
 So that's the gradient editor  
   at the new Web Inspector.    

00:47:15.233 --> 00:47:20.103
And what I didn't show you here,
 let's go back and reload here. 

00:47:29.647 --> 00:47:31.414
        If I make any of        
      these changes, say,       

00:47:33.184 --> 00:47:35.418
 I want to go back and save it. 

00:47:37.655 --> 00:47:39.388
     Let's make this a red      
      and that looks good.      

00:47:41.125 --> 00:47:42.291
   That looks like a sunset.    

00:47:43.461 --> 00:47:45.128
  In the Web Inspector, I can   
just go ahead and hit Command+S 

00:47:46.798 --> 00:47:48.131
     that will bring up the     
   traditional Save dialogue.   

00:47:49.467 --> 00:47:50.333
    Go ahead and replace it.    

00:47:51.202 --> 00:47:52.752
  And now, if I close the Web   
  Inspector, reload the page,   

00:47:54.305 --> 00:47:55.922
      I have that gradient      
       color right there.       

00:47:57.542 --> 00:47:58.958
  The icon is a different size  
because I was modifying the DOM 

00:48:00.378 --> 00:48:01.194
   and it that doesn't save.    

00:48:02.013 --> 00:48:03.146
     But if you're editing      
         a CSS resource         

00:48:04.282 --> 00:48:05.999
or any other local file resource
 you can save those right back  

00:48:07.719 --> 00:48:09.335
to disk from the Web Inspector. 

00:48:10.955 --> 00:48:11.821
      So that's Color and       
       Gradient Editing.        

00:48:12.690 --> 00:48:13.906
   And I hope you play around   
    with it and try it out.     

00:48:15.126 --> 00:48:17.844
It's really fun to just get down
  and dirty with those colors.  

00:48:20.565 --> 00:48:21.998
        And the gradient        
      syntax is something       

00:48:23.434 --> 00:48:24.467
       that I still have        
      trouble remembering.      

00:48:25.503 --> 00:48:26.803
   But the Web inspector will   
   just help you right there    

00:48:28.106 --> 00:48:29.739
       and get the right        
     syntax and let you go      

00:48:31.376 --> 00:48:32.675
    on to do more important     
      things in your code.      

00:48:33.978 --> 00:48:36.012
     So that's the summary      
    of all the new features,    

00:48:38.049 --> 00:48:39.265
 and just a brief introduction  

00:48:40.485 --> 00:48:41.885
    of all the new features     
     in the Web Inspector.      

00:48:44.422 --> 00:48:45.922
      So, I encourage you       
       to take advantage        

00:48:47.425 --> 00:48:48.508
     of the new JavaScript      
       language features.       

00:48:49.594 --> 00:48:51.995
 As you're able to release and  
  use the new modern browsers,  

00:48:54.399 --> 00:48:57.217
  or use iOS 8 exclusively, or  
  Mac OS Yosemite exclusively,  

00:49:00.038 --> 00:49:00.603
   you could start using some   

00:49:01.172 --> 00:49:02.638
     of these new language      
      and syntax features.      

00:49:05.209 --> 00:49:06.826
      The Web Inspector is      
      now available again       

00:49:08.446 --> 00:49:09.195
  from your Mac Applications.   

00:49:09.948 --> 00:49:10.830
     If you have a web view     
   that you've always wanted    

00:49:11.716 --> 00:49:12.799
     to see what it's doing     
      in your application,      

00:49:13.885 --> 00:49:14.584
       there's been a few       
         ways to do it.         

00:49:15.286 --> 00:49:16.569
   But you can now officially   
     use the web inspector      

00:49:17.855 --> 00:49:19.238
    in your Mac Application.    

00:49:20.625 --> 00:49:22.091
       And I want you to        
      enjoy debugging your      

00:49:23.561 --> 00:49:24.093
      JavaScript context.       

00:49:24.629 --> 00:49:25.962
       This is something        
     that may seem simple.      

00:49:27.298 --> 00:49:28.080
Oh yeah, there's now a debugger.

00:49:28.866 --> 00:49:30.566
     But, yeah, now there's     
          a debugger.           

00:49:32.270 --> 00:49:33.770
     You can now debug this     
JavaScript that's been plaguing 

00:49:35.273 --> 00:49:37.674
  you or giving you this weird  
errors or it's always been hard 

00:49:40.078 --> 00:49:41.794
to debug these contexts because 
there's been no debugger that's 

00:49:43.514 --> 00:49:45.581
       been able to give        
     you that information.      

00:49:47.652 --> 00:49:48.868
And again, it's really important

00:49:50.088 --> 00:49:51.204
        to make your web        
    applications accessible     

00:49:52.323 --> 00:49:53.873
    and your iOS application    
          accessible.           

00:49:55.426 --> 00:49:56.559
   And be a colorful person.    

00:49:57.695 --> 00:49:59.495
 Enjoy color editing in the Web 
Inspector and gradient editing. 

00:50:01.299 --> 00:50:03.800
And again, for more information,
   you can contact Evangelism   

00:50:06.304 --> 00:50:08.655
 at this email address, or the  
  Developer Technical support,  

00:50:11.009 --> 00:50:11.674
   and even the Apple Forums.   

00:50:12.343 --> 00:50:13.242
    I'm in the Apple Forums     
     if you have a question     

00:50:14.145 --> 00:50:15.578
    about the Web Inspector,    
    or anything web-related,    

00:50:17.015 --> 00:50:19.182
   or one of our team will be   
 able to answer it or I would.  

00:50:21.352 --> 00:50:22.585
      There-Again, there's      
     a couple more sessions     

00:50:23.821 --> 00:50:25.755
 that might interest you as web 
  developers or iOS developers  

00:50:27.692 --> 00:50:29.292
        that have web or        
      JavaScript context.       

00:50:30.895 --> 00:50:32.195
       You can go to the        
    session tomorrow morning    

00:50:33.498 --> 00:50:34.664
   and learn all you need to    
    know about accessibility    

00:50:35.833 --> 00:50:36.549
    in your web application.    

00:50:37.268 --> 00:50:38.751
     And then stay in that      
      same room and learn       

00:50:40.238 --> 00:50:42.271
  about responsive web design   
 for making your web apps scale 

00:50:44.308 --> 00:50:45.691
       from desktop size        
        to iPhone size.         

00:50:47.078 --> 00:50:47.660
         And that's it.         

00:50:48.246 --> 00:50:48.828
         Thanks a lot.          

00:50:49.414 --> 00:50:50.446
          [ Applause ]          

