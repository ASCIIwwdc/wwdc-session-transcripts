WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.576 --> 00:00:13.566 A:middle
&gt;&gt; Good morning everybody.

00:00:13.706 --> 00:00:14.386 A:middle
Thanks for coming.

00:00:15.506 --> 00:00:20.076 A:middle
Welcome to Creating Extensions
for iOS and OS X, Part Two.

00:00:20.186 --> 00:00:20.896 A:middle
I'm Damien.

00:00:21.566 --> 00:00:22.986 A:middle
I'm from Core OS.

00:00:23.536 --> 00:00:26.566 A:middle
And we apparently have a user
facing feature this year.

00:00:27.516 --> 00:00:33.276 A:middle
[ Cheers and Applause ]

00:00:33.776 --> 00:00:35.916 A:middle
Glad to see everybody's
excited about Extensions.

00:00:35.916 --> 00:00:36.856 A:middle
Let's dive right in.

00:00:39.516 --> 00:00:41.936 A:middle
So before we talk about
what an extension is,

00:00:42.176 --> 00:00:44.686 A:middle
let's talk a little bit
about what an app is

00:00:45.076 --> 00:00:46.966 A:middle
and why Extensions
are different.

00:00:47.966 --> 00:00:52.386 A:middle
So for an app, it's still in
iOS 8, even with Extensions,

00:00:52.686 --> 00:00:55.066 A:middle
is the most important
experience to the user.

00:00:55.596 --> 00:00:58.036 A:middle
On iOS, the app owns
the entire screen.

00:00:58.176 --> 00:01:02.586 A:middle
On OS X, the cursor focus
goes to the front-most app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.176 --> 00:01:02.586 A:middle
On OS X, the cursor focus
goes to the front-most app.

00:01:02.586 --> 00:01:06.176 A:middle
This is still the number
one priority for our users.

00:01:07.016 --> 00:01:09.756 A:middle
And on iOS, apps are
completely managed

00:01:09.756 --> 00:01:11.316 A:middle
by the user via the App Store.

00:01:11.416 --> 00:01:14.716 A:middle
And OS X the user can drag them
to the trash, move them around.

00:01:14.766 --> 00:01:17.396 A:middle
Apps are entirely
managed by the user.

00:01:17.936 --> 00:01:19.926 A:middle
So what about Extensions?

00:01:21.416 --> 00:01:24.376 A:middle
So Extensions are
important to the user.

00:01:24.776 --> 00:01:27.356 A:middle
But they're not more
important than the current app.

00:01:27.936 --> 00:01:30.546 A:middle
They are there to augment
the app's experience.

00:01:31.396 --> 00:01:33.406 A:middle
And rather than directly
managing them,

00:01:33.856 --> 00:01:36.206 A:middle
Extensions come and
go with apps.

00:01:36.276 --> 00:01:38.686 A:middle
So the user isn't
going to be purchasing

00:01:39.036 --> 00:01:41.186 A:middle
or installing individual
Extensions.

00:01:41.506 --> 00:01:44.806 A:middle
They're going to be getting
those Extensions with the apps

00:01:44.846 --> 00:01:46.326 A:middle
that they download
from the store.

00:01:46.846 --> 00:01:51.496 A:middle
So Extensions are
built separately.

00:01:51.776 --> 00:01:54.376 A:middle
They are a separate
target in XCode.

00:01:54.836 --> 00:01:57.796 A:middle
So we have this new
section in XCode

00:01:57.796 --> 00:01:59.856 A:middle
for app extension
template targets.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.766 --> 00:02:02.386 A:middle
So when you want to
create an extension,

00:02:02.466 --> 00:02:05.506 A:middle
you're getting a new
piece of code in your app

00:02:05.546 --> 00:02:08.276 A:middle
that is actually
a separate bundle

00:02:08.376 --> 00:02:10.446 A:middle
and admits a separate
executable.

00:02:10.976 --> 00:02:17.256 A:middle
And with that executable comes
a distinct set of entitlements.

00:02:17.336 --> 00:02:20.336 A:middle
And when we have a separate
executable with its distinct

00:02:20.336 --> 00:02:23.346 A:middle
of entitlements on disk, that
allows the operating system

00:02:23.346 --> 00:02:27.786 A:middle
to know that these two things,
the app and the extension,

00:02:27.876 --> 00:02:29.276 A:middle
are different entities.

00:02:31.356 --> 00:02:35.026 A:middle
And with that, you're
getting a different process.

00:02:35.166 --> 00:02:38.796 A:middle
So an extension is running
in an isolated address space

00:02:38.796 --> 00:02:42.176 A:middle
from your app and it executes
completely independently.

00:02:43.246 --> 00:02:47.846 A:middle
So this means that the system,
even if your app is not running,

00:02:47.876 --> 00:02:49.786 A:middle
can still fire up
your extension,

00:02:50.056 --> 00:02:51.516 A:middle
even if your app is suspended.

00:02:51.516 --> 00:02:55.546 A:middle
That doesn't affect any of your
Extensions running for the user.

00:02:56.166 --> 00:02:58.876 A:middle
And because of this, the
system can optimize each

00:02:58.876 --> 00:03:00.346 A:middle
experience separately.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.876 --> 00:03:00.346 A:middle
experience separately.

00:03:01.186 --> 00:03:05.126 A:middle
So we can schedule them, and
even if the app goes away,

00:03:05.306 --> 00:03:07.586 A:middle
your extension still
sticks around.

00:03:08.296 --> 00:03:11.436 A:middle
So here's an example
of an extension

00:03:11.866 --> 00:03:13.396 A:middle
and what the user might do

00:03:13.646 --> 00:03:15.666 A:middle
to invoke your extension
and its UI.

00:03:16.646 --> 00:03:19.786 A:middle
Here we just have a
little network thing.

00:03:20.386 --> 00:03:22.266 A:middle
So it's a new social
networking app.

00:03:22.266 --> 00:03:24.896 A:middle
And it's bundling a
social sharing extension.

00:03:25.226 --> 00:03:29.986 A:middle
So we see it in the far right
there with the purple icon.

00:03:30.456 --> 00:03:34.806 A:middle
And I go to this site and I want
to share this with my friends

00:03:34.806 --> 00:03:36.276 A:middle
on my new social network.

00:03:36.656 --> 00:03:40.366 A:middle
So the user will see an
icon representing my app.

00:03:40.366 --> 00:03:44.596 A:middle
But what that means is that I'm
going to be using the extension

00:03:44.596 --> 00:03:46.906 A:middle
for social sharing
vended by that app.

00:03:47.736 --> 00:03:52.546 A:middle
So in previous releases of iOS
we've been able to do this,

00:03:52.546 --> 00:03:56.016 A:middle
but the Facebook and the
Twitter experiences, et cetera,

00:03:56.016 --> 00:03:57.986 A:middle
have all been provided by Apple.

00:03:59.456 --> 00:04:01.476 A:middle
Now we're letting
anyone who wants


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.456 --> 00:04:01.476 A:middle
Now we're letting
anyone who wants

00:04:01.476 --> 00:04:04.356 A:middle
to provide a social sharing
extension not only provide it

00:04:04.356 --> 00:04:05.956 A:middle
but define their own experience.

00:04:06.796 --> 00:04:11.136 A:middle
So in this case, when
the user elects to share,

00:04:11.136 --> 00:04:16.136 A:middle
they're getting a window that
is designed by the developer

00:04:16.136 --> 00:04:20.146 A:middle
of this social networking app
with whatever experience --

00:04:20.976 --> 00:04:24.536 A:middle
whatever experience that app
developer wants to provide.

00:04:25.486 --> 00:04:26.816 A:middle
So that's a high level

00:04:26.816 --> 00:04:31.236 A:middle
of how Extensions are
architected on our system.

00:04:31.486 --> 00:04:32.616 A:middle
Let's talk a little bit

00:04:32.616 --> 00:04:36.816 A:middle
about how we actually extend
the experience of your app

00:04:36.816 --> 00:04:40.046 A:middle
and project it into other
parts of the system.

00:04:40.796 --> 00:04:43.286 A:middle
So as we saw yesterday
in Part One,

00:04:43.796 --> 00:04:46.666 A:middle
Extensions are a very
focused experience.

00:04:47.116 --> 00:04:49.216 A:middle
And the operating
system takes care

00:04:49.216 --> 00:04:52.336 A:middle
of seamlessly merging the
experience that you provide

00:04:52.806 --> 00:04:55.126 A:middle
in your extension
with the current app

00:04:55.376 --> 00:04:59.276 A:middle
or just whatever the
current system UI is.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.266 --> 00:05:03.236 A:middle
So you guys are going
to want to provide code

00:05:03.236 --> 00:05:05.716 A:middle
to make the experience your own.

00:05:05.946 --> 00:05:09.076 A:middle
And that's going to almost
certainly mean that you're going

00:05:09.076 --> 00:05:12.306 A:middle
to want to re-use at least
some of the code from your app.

00:05:14.276 --> 00:05:18.546 A:middle
So we hope you've been using the
Model View Controller paradigm.

00:05:18.546 --> 00:05:21.716 A:middle
Features like Extensions
are exactly why we

00:05:21.946 --> 00:05:24.016 A:middle
so desperately encourage
you guys

00:05:24.016 --> 00:05:26.286 A:middle
to adopt this design
pattern year after year,

00:05:26.816 --> 00:05:29.546 A:middle
because chances are with your
extension, you're going to want

00:05:29.546 --> 00:05:32.846 A:middle
to share at least the data
model and probably some

00:05:32.846 --> 00:05:34.406 A:middle
of the View Controller
layers, too.

00:05:35.256 --> 00:05:39.386 A:middle
You probably don't want to
share the view of your app

00:05:39.456 --> 00:05:42.006 A:middle
because your app is
designed around taking

00:05:42.006 --> 00:05:44.366 A:middle
up the whole screen whereas
your extension will not.

00:05:44.846 --> 00:05:46.946 A:middle
But that's only one-third
of your code.

00:05:46.946 --> 00:05:47.436 A:middle
You don't want to have

00:05:47.476 --> 00:05:49.536 A:middle
to rewrite the entire
two-thirds of it.

00:05:49.796 --> 00:05:52.346 A:middle
You want to be able to
share code between the two.

00:05:52.826 --> 00:05:59.866 A:middle
And if only computer science
had come up with a way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.356 --> 00:06:04.216 A:middle
to allow the same code to exist
in two processes without having

00:06:04.216 --> 00:06:06.256 A:middle
to duplicate those code pages.

00:06:06.806 --> 00:06:10.296 A:middle
I think we might have
a solution to this.

00:06:11.096 --> 00:06:13.046 A:middle
And I think that
solution's called Frameworks.

00:06:14.096 --> 00:06:20.476 A:middle
So, on iOS, in iOS 8, we're now
allowing you to ship Frameworks

00:06:20.476 --> 00:06:21.446 A:middle
within your app bundle.

00:06:22.516 --> 00:06:28.016 A:middle
[ Applause ]

00:06:28.516 --> 00:06:29.546 A:middle
Don't get too excited.

00:06:31.786 --> 00:06:35.706 A:middle
So this is obviously new to iOS,
but you've been able to do this

00:06:35.706 --> 00:06:39.386 A:middle
on OS X since the dawn of time.

00:06:40.106 --> 00:06:42.146 A:middle
But it's a brand new
capability to iOS.

00:06:42.146 --> 00:06:46.486 A:middle
And what we're doing with it
is we're also encrypting the

00:06:46.486 --> 00:06:48.926 A:middle
frameworks that you
ship in your app bundle

00:06:49.266 --> 00:06:53.896 A:middle
with the same encryption
that your apps are encrypted

00:06:53.896 --> 00:06:57.026 A:middle
with to give you that
same level of protection

00:06:57.026 --> 00:07:04.366 A:middle
against piracy and
-- well, piracy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.026 --> 00:07:04.366 A:middle
against piracy and
-- well, piracy.

00:07:04.906 --> 00:07:06.726 A:middle
[Laughter] So it's
critical to note

00:07:06.726 --> 00:07:11.336 A:middle
that these frameworks are not
general code sharing mechanisms.

00:07:11.336 --> 00:07:13.616 A:middle
So you're not going
to have many apps

00:07:13.616 --> 00:07:16.196 A:middle
on the system referencing
the same copy of a framework.

00:07:16.626 --> 00:07:20.566 A:middle
These frameworks are here to
facilitate sharing between

00:07:20.566 --> 00:07:22.546 A:middle
and an app and all
of its Extensions.

00:07:22.896 --> 00:07:28.896 A:middle
So the code that that framework
contains can be used by the app

00:07:28.896 --> 00:07:30.656 A:middle
or any of the Extensions
it bundles,

00:07:30.906 --> 00:07:32.636 A:middle
but nothing else on the system.

00:07:35.296 --> 00:07:37.906 A:middle
So when you use -- when
you bundle a framework

00:07:37.906 --> 00:07:40.416 A:middle
with your app, there
are some implications

00:07:40.496 --> 00:07:42.196 A:middle
for your minimum
deployment target.

00:07:43.076 --> 00:07:45.116 A:middle
If your app links the framework,

00:07:45.266 --> 00:07:47.526 A:middle
we're going to change its
minimum deployment target

00:07:47.526 --> 00:07:49.476 A:middle
to iOS 8 because
as I said before,

00:07:49.476 --> 00:07:51.176 A:middle
we're encrypting
these frameworks.

00:07:51.176 --> 00:07:54.226 A:middle
And previous versions of the
operating system don't know

00:07:54.226 --> 00:07:56.286 A:middle
about how to decrypt
them when you use them.

00:07:56.976 --> 00:07:59.506 A:middle
However, if you're
just shipping your app

00:07:59.506 --> 00:08:01.616 A:middle
and then there's a few
Extensions you have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.506 --> 00:08:01.616 A:middle
and then there's a few
Extensions you have

00:08:01.616 --> 00:08:03.216 A:middle
that all link in a framework,

00:08:03.706 --> 00:08:06.436 A:middle
your app's minimum deployment
target doesn't change at all.

00:08:07.646 --> 00:08:10.266 A:middle
Your extension functionality
obviously won't be available

00:08:10.266 --> 00:08:14.466 A:middle
to previous versions of iOS,
but the app will still be able

00:08:14.466 --> 00:08:16.086 A:middle
to run without any problems.

00:08:17.826 --> 00:08:23.036 A:middle
So that's a very brief overview
of embedded frameworks on iOS.

00:08:23.306 --> 00:08:27.916 A:middle
To learn more, I encourage you
to go to the session tomorrow

00:08:27.916 --> 00:08:31.326 A:middle
at 3:15 in Presidio,
Building Modern Frameworks,

00:08:32.385 --> 00:08:37.655 A:middle
where it'll cover API usage,
how to write a good framework,

00:08:37.655 --> 00:08:39.626 A:middle
how to bundle it,
all that good stuff.

00:08:39.976 --> 00:08:42.246 A:middle
But for now, you've
got Frameworks.

00:08:43.086 --> 00:08:46.446 A:middle
And it seems like you
guys are excited about it.

00:08:47.366 --> 00:08:51.926 A:middle
So, another topic for code
sharing is API availability.

00:08:52.156 --> 00:08:53.776 A:middle
If you're writing one
of these frameworks,

00:08:53.776 --> 00:08:55.156 A:middle
or if you're bundling
one of these frameworks,

00:08:55.926 --> 00:08:58.836 A:middle
what code are you
going to be using

00:08:58.836 --> 00:09:00.536 A:middle
between your app
and your extension?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.836 --> 00:09:00.536 A:middle
between your app
and your extension?

00:09:03.236 --> 00:09:07.346 A:middle
So, the vast majority of our
API is going to be available

00:09:07.346 --> 00:09:08.776 A:middle
for Extensions to use.

00:09:08.936 --> 00:09:10.866 A:middle
But there are going
to be some exceptions.

00:09:11.246 --> 00:09:13.676 A:middle
And these exceptions are
going to be marked explicitly

00:09:13.676 --> 00:09:16.336 A:middle
with a new kind of
unavailability macro.

00:09:16.376 --> 00:09:19.486 A:middle
And here's an example
of what that looks like.

00:09:20.566 --> 00:09:24.116 A:middle
So, UIApplication --
or with UIApplication,

00:09:24.116 --> 00:09:27.156 A:middle
the shared application method
has been explicitly marked

00:09:27.156 --> 00:09:28.176 A:middle
as unavailable.

00:09:28.606 --> 00:09:32.276 A:middle
And the UIKit folks have
helpfully provided an error

00:09:32.276 --> 00:09:34.956 A:middle
message that says: Use a view
controller based solution

00:09:34.956 --> 00:09:35.626 A:middle
where appropriate.

00:09:35.896 --> 00:09:37.946 A:middle
I'm in Core OS, no
idea what that means.

00:09:38.156 --> 00:09:39.566 A:middle
But I'm sure you
guys have an idea.

00:09:41.456 --> 00:09:44.776 A:middle
Now, if you're dropping down
to Super [inaudible] API

00:09:45.006 --> 00:09:46.926 A:middle
that has underscores,
there's going

00:09:46.926 --> 00:09:49.626 A:middle
to be a corresponding
availability macro there

00:09:49.626 --> 00:09:52.536 A:middle
that is evaluated the
same way by the tools

00:09:52.536 --> 00:09:57.026 A:middle
and will generate the
same errors at build time.

00:09:57.236 --> 00:09:59.546 A:middle
So that's unavailability.

00:09:59.776 --> 00:10:01.466 A:middle
Like I said, the vast majority


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.776 --> 00:10:01.466 A:middle
Like I said, the vast majority

00:10:01.466 --> 00:10:03.916 A:middle
of cases you probably won't
need to worry about it.

00:10:04.296 --> 00:10:08.406 A:middle
But if you do trip across
an API use in your extension

00:10:08.406 --> 00:10:11.066 A:middle
that is not allowed, you'll
know as soon as possible

00:10:11.066 --> 00:10:13.816 A:middle
at build time before you
can even run the extension.

00:10:14.406 --> 00:10:17.436 A:middle
So that's how you share code

00:10:17.436 --> 00:10:19.756 A:middle
with your extension
and your app.

00:10:20.736 --> 00:10:22.476 A:middle
But at run time you're
going to want

00:10:22.546 --> 00:10:24.926 A:middle
to create a consistent
experience, too.

00:10:26.206 --> 00:10:31.426 A:middle
And a consistent experience
often means sharing the same set

00:10:31.426 --> 00:10:35.146 A:middle
of resources and making sure
that changes the user has made

00:10:35.146 --> 00:10:37.986 A:middle
to their data in your
extension are reflected

00:10:37.986 --> 00:10:40.426 A:middle
in the app the next time
they see it, or vice versa.

00:10:41.816 --> 00:10:44.166 A:middle
So we have a few data
sharing solutions

00:10:44.166 --> 00:10:45.396 A:middle
for you for Extensions.

00:10:46.336 --> 00:10:50.386 A:middle
So the first thing
to understand is

00:10:50.386 --> 00:10:53.576 A:middle
that an extension has
a separate container

00:10:53.576 --> 00:10:54.966 A:middle
from its app by default.

00:10:54.966 --> 00:10:59.336 A:middle
It's just like how two apps
are segregated from each other.

00:10:59.336 --> 00:11:01.266 A:middle
They don't have access
to each other's data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.336 --> 00:11:01.266 A:middle
They don't have access
to each other's data.

00:11:02.036 --> 00:11:03.776 A:middle
But for any extension
you bundle,

00:11:03.776 --> 00:11:06.526 A:middle
you can opt to share
specific bits of data

00:11:06.566 --> 00:11:09.436 A:middle
that will help you provide
that consistent experience

00:11:09.436 --> 00:11:11.056 A:middle
that all of our users expect.

00:11:11.156 --> 00:11:16.676 A:middle
And you can do this with what's
called a shared container.

00:11:17.456 --> 00:11:22.846 A:middle
So this is based on a new
concept called an App Group.

00:11:23.156 --> 00:11:27.356 A:middle
And this provides a shared
storage area for kind

00:11:27.356 --> 00:11:31.166 A:middle
of just general data sharing
between your app your extension.

00:11:31.476 --> 00:11:34.896 A:middle
So if you have some custom
data models or custom databases

00:11:35.246 --> 00:11:36.916 A:middle
that your app and your
extension need to use,

00:11:37.296 --> 00:11:40.946 A:middle
this is a good place to put
those files and access them.

00:11:41.556 --> 00:11:43.286 A:middle
However, you have to remember

00:11:43.286 --> 00:11:47.446 A:middle
that there's nothing stopping
your extension and your app

00:11:47.626 --> 00:11:49.056 A:middle
from running at the same time.

00:11:49.266 --> 00:11:51.766 A:middle
Your app may be in a
long-running background task.

00:11:52.006 --> 00:11:53.876 A:middle
It may not have been
suspended yet.

00:11:54.046 --> 00:11:58.546 A:middle
And it might be writing some
data to that shared container.

00:11:58.546 --> 00:12:00.816 A:middle
And then the user might
bring up your extension.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.546 --> 00:12:00.816 A:middle
And then the user might
bring up your extension.

00:12:01.236 --> 00:12:02.766 A:middle
So what this means is
that you have to make sure

00:12:02.766 --> 00:12:04.966 A:middle
to safely coordinate
all the reads

00:12:04.966 --> 00:12:06.156 A:middle
and writes for those files.

00:12:06.156 --> 00:12:08.096 A:middle
You have to make sure that
you only write to the file

00:12:08.666 --> 00:12:10.616 A:middle
when there are no
readers contending for it.

00:12:10.776 --> 00:12:13.086 A:middle
And that you're only
reading when the file is

00:12:13.086 --> 00:12:14.606 A:middle
in a consistent state.

00:12:18.536 --> 00:12:20.656 A:middle
Otherwise, you're going
to blow up your file,

00:12:20.886 --> 00:12:22.086 A:middle
or it's just going
to get corrupted.

00:12:22.266 --> 00:12:25.726 A:middle
So we introduce some sort of
synchronization scheme here

00:12:26.726 --> 00:12:29.796 A:middle
so that if the extension
writes, it holds off the app.

00:12:29.796 --> 00:12:31.946 A:middle
And if the app writes, it
holds off the extension.

00:12:31.946 --> 00:12:34.606 A:middle
And they're both dealing with a
consistent view of the universe.

00:12:35.336 --> 00:12:36.936 A:middle
And here are a few of
those technologies.

00:12:38.276 --> 00:12:41.176 A:middle
The first one is
NSFileCoordination,

00:12:41.386 --> 00:12:44.436 A:middle
which kind of provides a general
inner process synchronization

00:12:44.436 --> 00:12:47.706 A:middle
strategy for your
extension and --

00:12:48.646 --> 00:12:51.226 A:middle
for your extension and your app.

00:12:51.676 --> 00:12:54.896 A:middle
If you're using CoreData, you
can get a lot of this for free.

00:12:54.896 --> 00:12:57.396 A:middle
There are certain
CoreData backing stores

00:12:57.396 --> 00:12:59.986 A:middle
that are documented
as being usable

00:12:59.986 --> 00:13:01.796 A:middle
for multiple processes
at the same time.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.986 --> 00:13:01.796 A:middle
for multiple processes
at the same time.

00:13:02.316 --> 00:13:05.196 A:middle
And sqLite also makes
some of these guarantees.

00:13:05.496 --> 00:13:07.926 A:middle
So if you're using one of
those two technologies,

00:13:08.156 --> 00:13:09.346 A:middle
chances are you're already set.

00:13:09.346 --> 00:13:12.136 A:middle
But if you have something more
custom, you're going to want

00:13:12.136 --> 00:13:13.416 A:middle
to use NSFileCoordination.

00:13:15.406 --> 00:13:19.206 A:middle
But if you're talking about more
structured data that is, say,

00:13:19.206 --> 00:13:22.346 A:middle
vended by Apple's APIs
like NSUserDefaults,

00:13:23.696 --> 00:13:25.616 A:middle
you can end up sharing
much more easily.

00:13:26.396 --> 00:13:29.326 A:middle
So, an app and its
extension both have different

00:13:29.326 --> 00:13:30.576 A:middle
defaults domains.

00:13:30.876 --> 00:13:32.686 A:middle
But you can set up
a shared domain

00:13:33.166 --> 00:13:35.766 A:middle
with the initWithSuiteName API.

00:13:36.016 --> 00:13:40.306 A:middle
And you create this suite, and
the API manages access to it

00:13:40.366 --> 00:13:43.316 A:middle
for your app and your extension
so that you don't have to worry

00:13:43.316 --> 00:13:46.226 A:middle
about making sure that
you're not writing

00:13:46.226 --> 00:13:47.436 A:middle
to that backing store

00:13:47.666 --> 00:13:49.286 A:middle
when someone else is
trying to read from it.

00:13:49.466 --> 00:13:51.606 A:middle
The API coordinates
all of that for you.

00:13:51.816 --> 00:13:54.156 A:middle
And this is a really
easy way for, say,

00:13:54.326 --> 00:13:57.276 A:middle
the user to modify
some setting in the app

00:13:57.276 --> 00:14:01.826 A:middle
which then the extension can
pick up on its next invocation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.276 --> 00:14:01.826 A:middle
which then the extension can
pick up on its next invocation.

00:14:02.356 --> 00:14:06.186 A:middle
There's a similar
story for keychains.

00:14:06.516 --> 00:14:09.286 A:middle
So the shared keychain
is based on an app group.

00:14:09.686 --> 00:14:15.956 A:middle
And the app group can
encompass a few apps

00:14:15.956 --> 00:14:17.336 A:middle
as well as your Extensions.

00:14:17.876 --> 00:14:21.356 A:middle
So by default, as I
said, the extension

00:14:21.356 --> 00:14:22.896 A:middle
and the app have a
different keychain.

00:14:23.236 --> 00:14:26.466 A:middle
But you can set up a shared
keychain with an access group.

00:14:27.586 --> 00:14:31.196 A:middle
There's an issue right
now in the first beta

00:14:31.196 --> 00:14:33.166 A:middle
where this is actually
team ID-based.

00:14:33.226 --> 00:14:34.436 A:middle
So if you're familiar with that

00:14:34.436 --> 00:14:36.866 A:middle
where you pre-fix your bundle
identifier with a team ID

00:14:36.866 --> 00:14:38.686 A:middle
in order to facilitate sharing,

00:14:39.036 --> 00:14:40.386 A:middle
that's how you do it
in the first seed.

00:14:40.796 --> 00:14:43.866 A:middle
We're going to fix this up for
App Groups by the time we ship.

00:14:44.386 --> 00:14:47.506 A:middle
So in terms of privacy, it's
a slightly different story.

00:14:47.846 --> 00:14:50.366 A:middle
When I say privacy, I
mean the dialog that comes

00:14:50.366 --> 00:14:52.536 A:middle
up when an app is trying

00:14:52.536 --> 00:14:55.706 A:middle
to access certain sensitive user
data like photos or contacts.

00:14:55.876 --> 00:14:57.046 A:middle
You'll get a dialog saying:

00:14:57.356 --> 00:14:59.556 A:middle
"Would you like to allow
this app to have access

00:14:59.556 --> 00:15:00.446 A:middle
to this piece of data?"


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.556 --> 00:15:00.446 A:middle
to this piece of data?"

00:15:00.546 --> 00:15:03.546 A:middle
And the user can
either decline or allow.

00:15:04.596 --> 00:15:07.626 A:middle
So when the user allows
your app to have access

00:15:07.776 --> 00:15:10.656 A:middle
to a certain piece of
data, it's actually going

00:15:10.656 --> 00:15:13.316 A:middle
to cover the entirety
of your app bundle,

00:15:13.376 --> 00:15:14.606 A:middle
including Extensions.

00:15:14.816 --> 00:15:19.066 A:middle
So that the user, once they have
approved your app for access

00:15:19.066 --> 00:15:21.836 A:middle
to your photos, they don't
have to then go and approve all

00:15:21.836 --> 00:15:24.246 A:middle
of your Extensions for
access to the same data.

00:15:24.776 --> 00:15:26.626 A:middle
Now, there are going to be
some Extensions to this --

00:15:26.686 --> 00:15:28.766 A:middle
or sorry -- some
exceptions to this rule.

00:15:29.136 --> 00:15:32.486 A:middle
But in general, the rule is

00:15:32.646 --> 00:15:36.726 A:middle
that approval covers the
entirety of your app.

00:15:37.156 --> 00:15:40.126 A:middle
So let's go over best
practices a little bit.

00:15:41.106 --> 00:15:42.616 A:middle
As we said at the beginning,

00:15:42.986 --> 00:15:45.416 A:middle
the front-most app is
the most important thing.

00:15:45.416 --> 00:15:48.286 A:middle
So it's very important that
your exceptions be lean.

00:15:48.566 --> 00:15:50.526 A:middle
These things do not
have the full run

00:15:50.526 --> 00:15:51.826 A:middle
of the system like the app does.

00:15:51.936 --> 00:15:53.636 A:middle
The app's still there.

00:15:54.126 --> 00:15:56.666 A:middle
It's still using the lion's
share of system resources.

00:15:56.916 --> 00:16:00.046 A:middle
The Extensions are very
focused, very purpose-built.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:56.916 --> 00:16:00.046 A:middle
The Extensions are very
focused, very purpose-built.

00:16:00.046 --> 00:16:04.726 A:middle
And it's important that they get
in, do their job, and get out.

00:16:04.986 --> 00:16:06.146 A:middle
And be stateless.

00:16:06.396 --> 00:16:08.506 A:middle
You might know that we
kill apps aggressively

00:16:08.506 --> 00:16:09.836 A:middle
or suspend them on iOS.

00:16:10.186 --> 00:16:12.066 A:middle
We're doubling down on
that with Extensions.

00:16:12.066 --> 00:16:13.496 A:middle
And we're going to
be more aggressive.

00:16:13.626 --> 00:16:17.066 A:middle
And because of this, there
is no general multi-tasking

00:16:17.066 --> 00:16:19.116 A:middle
functionality available
to Extensions.

00:16:19.356 --> 00:16:22.736 A:middle
So no VoIP, no long-running
background tasks,

00:16:22.736 --> 00:16:23.336 A:middle
that kind of thing.

00:16:23.656 --> 00:16:27.426 A:middle
We do support a short task
completion before we suspend

00:16:27.426 --> 00:16:28.546 A:middle
or kill the extension.

00:16:28.896 --> 00:16:32.656 A:middle
But this is meant to give you
time to flush any dirty state

00:16:32.656 --> 00:16:35.266 A:middle
to disk so that the user
doesn't lose their data and so

00:16:35.266 --> 00:16:36.546 A:middle
that the app can pick that up.

00:16:37.446 --> 00:16:39.466 A:middle
And finally, be awesome.

00:16:40.446 --> 00:16:42.006 A:middle
Make these things seamless.

00:16:42.426 --> 00:16:43.956 A:middle
Make them useful to our users.

00:16:44.356 --> 00:16:49.036 A:middle
And as a user of your products,
I can't wait to be surprised

00:16:49.036 --> 00:16:50.606 A:middle
and delighted by what
you guys turn out.

00:16:51.656 --> 00:16:53.546 A:middle
With that, I'd like to
turn it over to Aki.

00:16:55.516 --> 00:16:59.886 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.386 --> 00:17:00.656 A:middle
&gt;&gt; Thank you.

00:17:01.686 --> 00:17:02.366 A:middle
Thank you Damien.

00:17:02.826 --> 00:17:05.675 A:middle
Hi, I'm Aki Inoue
from Cocoa Group.

00:17:06.236 --> 00:17:10.096 A:middle
Today, I'm discussing
an exciting new feature,

00:17:10.646 --> 00:17:15.296 A:middle
Action Extensions
for iOS and OS X.

00:17:15.996 --> 00:17:20.636 A:middle
Yesterday in Part One, Ian, Matt
and Guy introduced Extensions

00:17:20.856 --> 00:17:24.596 A:middle
and two Extensions point
along with key technologies

00:17:24.675 --> 00:17:29.176 A:middle
such as remote view
controller and activation rules.

00:17:30.056 --> 00:17:34.006 A:middle
Damien explained foundation of
technologies for Extensions.

00:17:34.626 --> 00:17:37.816 A:middle
Action is an extension
point that utilizes

00:17:38.326 --> 00:17:43.876 A:middle
and integrates all
these best technologies.

00:17:44.706 --> 00:17:45.446 A:middle
Let's get started.

00:17:45.796 --> 00:17:50.966 A:middle
So, Action is a screenshot
[inaudible] system to services,

00:17:51.726 --> 00:17:53.976 A:middle
an inter-application
collaboration technology

00:17:53.976 --> 00:17:57.416 A:middle
available since the
first release of OS X.

00:17:57.446 --> 00:18:03.326 A:middle
Action operates with user
selection inside the host


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.446 --> 00:18:03.326 A:middle
Action operates with user
selection inside the host

00:18:03.326 --> 00:18:09.886 A:middle
application that is it
extends the system framework,

00:18:10.296 --> 00:18:15.176 A:middle
not just the single
application or service.

00:18:15.646 --> 00:18:18.596 A:middle
Earlier in this conference,
you have seen one

00:18:18.596 --> 00:18:22.616 A:middle
of Action Extension's
Markup operating inside many

00:18:22.616 --> 00:18:24.306 A:middle
applications on Yosemite.

00:18:26.176 --> 00:18:29.566 A:middle
In fact, this extension
is available

00:18:30.046 --> 00:18:33.386 A:middle
to image attachments
throughout the system.

00:18:34.156 --> 00:18:38.026 A:middle
Let's just dive into
the details.

00:18:38.576 --> 00:18:40.476 A:middle
Just like any other Extensions,

00:18:40.956 --> 00:18:44.926 A:middle
Actions are described
by info.plist.

00:18:45.576 --> 00:18:51.476 A:middle
First, inside NSExtension
Dictionary, it's identified

00:18:51.476 --> 00:18:55.396 A:middle
by NSExtensionPoint
Identifier.com.

00:18:55.396 --> 00:18:56.566 A:middle
apple.ui-services.

00:18:58.506 --> 00:19:04.796 A:middle
Next, NSExtensionPrincipalClass
specifies the main controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.506 --> 00:19:04.796 A:middle
Next, NSExtensionPrincipalClass
specifies the main controller

00:19:04.836 --> 00:19:06.076 A:middle
[inaudible] for your extension.

00:19:07.076 --> 00:19:10.206 A:middle
Just like Guy and Matt
described yesterday,

00:19:10.686 --> 00:19:16.836 A:middle
it's typically a subclass of
the ViewController option.

00:19:17.456 --> 00:19:20.546 A:middle
Now, the principal class
is the main controller

00:19:20.546 --> 00:19:23.716 A:middle
for your extension as
well as the [inaudible]

00:19:24.076 --> 00:19:26.606 A:middle
to the extension APIs.

00:19:28.056 --> 00:19:32.076 A:middle
With a new View Controller
property called Extension

00:19:32.436 --> 00:19:36.676 A:middle
Context, you can get
NSExtention Context Object,

00:19:36.976 --> 00:19:39.506 A:middle
which represent connection
to the host application.

00:19:41.486 --> 00:19:47.326 A:middle
Through that, you can access
an array of NSExtention items.

00:19:47.996 --> 00:19:52.926 A:middle
Each item representing a logical
data unit coming back from --

00:19:53.026 --> 00:19:58.756 A:middle
coming from the host
application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.776 --> 00:20:08.576 A:middle
And, you can attach [inaudible]
data to extension item.

00:20:10.166 --> 00:20:12.906 A:middle
Movie, image, voice,
so and so forth.

00:20:13.526 --> 00:20:18.076 A:middle
The data is contained inside an
object called NSItemProvider.

00:20:20.416 --> 00:20:22.726 A:middle
Okay let's back to
the Info.plist.

00:20:23.936 --> 00:20:26.416 A:middle
Inside NSExtensionAttributes
Dictionary,

00:20:27.156 --> 00:20:33.446 A:middle
which specifies extension
point-specific attributes,

00:20:33.446 --> 00:20:38.286 A:middle
you declare NSExtensionservice
RoleType,

00:20:39.306 --> 00:20:41.666 A:middle
which [inaudible]
editor or viewer.

00:20:42.226 --> 00:20:45.476 A:middle
In this example, we are
using NSExtensionservice

00:20:45.476 --> 00:20:46.746 A:middle
RoleTypeEditor.

00:20:47.336 --> 00:20:50.486 A:middle
That means it's only
presented to the context

00:20:50.866 --> 00:20:52.876 A:middle
where the document is editable.

00:20:54.226 --> 00:21:01.136 A:middle
Next, as share Extensions you
can specify activation rules


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:54.226 --> 00:21:01.136 A:middle
Next, as share Extensions you
can specify activation rules

00:21:02.126 --> 00:21:04.696 A:middle
with NSExtensionActivationRules.

00:21:05.646 --> 00:21:09.986 A:middle
It can be NS [inaudible] for
define your string or the list

00:21:09.986 --> 00:21:15.866 A:middle
of supported data types.

00:21:16.066 --> 00:21:19.956 A:middle
Now, let's look at code samples.

00:21:20.556 --> 00:21:22.906 A:middle
First, you can get
extension context

00:21:23.106 --> 00:21:27.146 A:middle
through the extension
context property.

00:21:27.866 --> 00:21:32.126 A:middle
Next, you can get
extension item through item,

00:21:32.456 --> 00:21:33.906 A:middle
inputItems property,

00:21:34.246 --> 00:21:38.036 A:middle
which returns the array
of extension items.

00:21:38.866 --> 00:21:44.366 A:middle
Finally, you can get attached
data using attachments property

00:21:44.716 --> 00:21:48.736 A:middle
and it's containing the
NSItemProvider objects.

00:21:49.506 --> 00:21:54.416 A:middle
Once you have NSItemProvider,
you can load data

00:21:54.656 --> 00:21:56.026 A:middle
from the host application.

00:21:56.646 --> 00:21:58.426 A:middle
It's lazy and secure.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.456 --> 00:22:02.476 A:middle
Using the
LoadItemForTypeIdentifier

00:22:02.746 --> 00:22:04.676 A:middle
options completionHandler

00:22:05.326 --> 00:22:08.936 A:middle
and specifying a UTI
type of your choice.

00:22:09.406 --> 00:22:13.186 A:middle
In this case, we are using a
custom data type, MyDocumentUTI.

00:22:14.666 --> 00:22:21.746 A:middle
And you specify a representation
of the data you want to receive.

00:22:21.746 --> 00:22:23.956 A:middle
In this case, we
are using NSData

00:22:23.956 --> 00:22:29.516 A:middle
and it contains the custom
data format, NSDocument UTI.

00:22:31.556 --> 00:22:35.606 A:middle
Once you have that
data, you can set

00:22:35.606 --> 00:22:39.156 A:middle
up your user interface
according to the data coming

00:22:39.326 --> 00:22:40.976 A:middle
from the host application.

00:22:42.566 --> 00:22:52.006 A:middle
Next, with Action, unlike
shared Extensions, it's possible

00:22:52.006 --> 00:22:56.176 A:middle
that extension time
return some modified data.

00:22:57.006 --> 00:23:01.756 A:middle
You've seen Markup changing and
marking up your image in place


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.006 --> 00:23:01.756 A:middle
You've seen Markup changing and
marking up your image in place

00:23:02.116 --> 00:23:04.206 A:middle
and return it to
the mail document.

00:23:04.966 --> 00:23:08.096 A:middle
Your extension can
perform the similar thing.

00:23:09.976 --> 00:23:18.736 A:middle
When user click a Down button or
similar action, you can perform

00:23:20.666 --> 00:23:26.106 A:middle
and return the modified data
back to their host application.

00:23:26.526 --> 00:23:30.346 A:middle
The process is reverse of
loading the data coming

00:23:30.466 --> 00:23:31.666 A:middle
from the host application.

00:23:32.666 --> 00:23:39.036 A:middle
First, you want to
instantiate NSItemProvider

00:23:39.706 --> 00:23:43.796 A:middle
with your data and data type.

00:23:44.196 --> 00:23:47.116 A:middle
Next, you can create
NSExtensionItem

00:23:47.436 --> 00:23:49.296 A:middle
and attach your item provider.

00:23:50.966 --> 00:23:56.116 A:middle
Finally, you can send
completeRequestReturningItems

00:23:56.606 --> 00:24:00.126 A:middle
completionHandler to
your extension item


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.606 --> 00:24:00.126 A:middle
completionHandler to
your extension item

00:24:01.156 --> 00:24:03.936 A:middle
with an array of
extension items.

00:24:04.986 --> 00:24:09.366 A:middle
This actually concludes
your extension life cycle.

00:24:10.606 --> 00:24:15.336 A:middle
So typically you want
to return your data

00:24:15.546 --> 00:24:23.396 A:middle
and conclude your NUI
operation at this point.

00:24:23.676 --> 00:24:27.146 A:middle
Unlike [inaudible] application,
if your viewer type,

00:24:27.716 --> 00:24:30.986 A:middle
you don't have to
return any data back

00:24:31.126 --> 00:24:32.346 A:middle
to the host application.

00:24:33.986 --> 00:24:39.256 A:middle
So if your viewer application
just like share Extensions,

00:24:39.856 --> 00:24:44.986 A:middle
you can invoke
completeRequestReturningItems

00:24:46.516 --> 00:24:49.416 A:middle
completionHandler
with new argument.

00:24:51.206 --> 00:24:59.396 A:middle
So far, I have covered how
to write Action Extensions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.636 --> 00:25:05.446 A:middle
Now, let me explain how you
can integrate Extensions

00:25:05.776 --> 00:25:10.506 A:middle
into your own applications.

00:25:10.506 --> 00:25:19.366 A:middle
On iOS UIActivityViewController
drives both social and share

00:25:19.366 --> 00:25:21.036 A:middle
and Action Extensions.

00:25:21.716 --> 00:25:27.956 A:middle
The [inaudible] controlled by
the View Controller can invoke

00:25:27.956 --> 00:25:30.196 A:middle
and manage Extensions for you.

00:25:31.546 --> 00:25:35.516 A:middle
UI API-wise there's
not much difference

00:25:35.706 --> 00:25:39.026 A:middle
for UIActivityViewController
from the previous release.

00:25:39.856 --> 00:25:43.526 A:middle
You still instantiate
the View Controller

00:25:43.856 --> 00:25:48.286 A:middle
with the selected
items from the user.

00:25:48.286 --> 00:25:51.776 A:middle
And View Controller takes over

00:25:51.896 --> 00:25:55.686 A:middle
and present the [inaudible]
and voila.

00:25:57.436 --> 00:26:02.426 A:middle
One enhancement we have
for iOS 8 is the support


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.436 --> 00:26:02.426 A:middle
One enhancement we have
for iOS 8 is the support

00:26:03.126 --> 00:26:05.506 A:middle
for editor actions.

00:26:06.396 --> 00:26:12.116 A:middle
We added a new property called
completionWithItemsHandler

00:26:12.426 --> 00:26:16.606 A:middle
to UIViewController, or
UIViewActivityViewController.

00:26:16.676 --> 00:26:23.376 A:middle
With this method, if the invoked
action is editor and wants

00:26:23.416 --> 00:26:28.106 A:middle
to return value you
could receive the result

00:26:28.106 --> 00:26:29.976 A:middle
in returnItems array.

00:26:30.846 --> 00:26:36.236 A:middle
And you can replace your
document content based

00:26:38.366 --> 00:26:41.346 A:middle
on the returned items.

00:26:42.706 --> 00:26:43.006 A:middle
NSTextView.

00:26:43.106 --> 00:26:49.696 A:middle
Well, if anybody know in the
audience, I just can't help talk

00:26:49.696 --> 00:26:53.226 A:middle
about text every year
in one way or the other.

00:26:54.166 --> 00:26:58.916 A:middle
On OS X, NSTextView
plays the central role

00:26:58.916 --> 00:27:05.506 A:middle
in presenting Extensions
to the users.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.916 --> 00:27:05.506 A:middle
in presenting Extensions
to the users.

00:27:05.546 --> 00:27:08.806 A:middle
By hovering us on
top of extension --

00:27:08.976 --> 00:27:14.076 A:middle
by hovering extension
on top of text selection

00:27:14.736 --> 00:27:18.716 A:middle
or image attachments,
it presents [inaudible]

00:27:19.426 --> 00:27:24.056 A:middle
with manual listing old
Extensions available

00:27:24.936 --> 00:27:28.476 A:middle
for the context.

00:27:28.476 --> 00:27:33.516 A:middle
Now I have written a simple
little extension for OS X.

00:27:33.656 --> 00:27:36.266 A:middle
And I'd like to show how

00:27:36.266 --> 00:27:39.006 A:middle
to simply present your
Extensions to the user.

00:27:39.646 --> 00:27:41.536 A:middle
I have a text edited document

00:27:41.876 --> 00:27:45.076 A:middle
that contains both
text and image.

00:27:46.886 --> 00:27:54.946 A:middle
By hovering mouse cursor
on top of text selection,

00:27:55.426 --> 00:27:57.106 A:middle
you can reveal the list

00:27:57.296 --> 00:28:01.166 A:middle
of extension supporting
the text data.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.296 --> 00:28:01.166 A:middle
of extension supporting
the text data.

00:28:03.186 --> 00:28:07.716 A:middle
Similarly, by hovering
on top of attachments,

00:28:08.516 --> 00:28:12.536 A:middle
you can show the list of
Extensions supporting images.

00:28:13.116 --> 00:28:17.726 A:middle
In this case, in addition to
the sample extension I wrote,

00:28:17.726 --> 00:28:23.116 A:middle
Party Crasher, it lists Markup
in the text edit application.

00:28:24.426 --> 00:28:28.876 A:middle
So you can see the Markup
is an extension that works,

00:28:28.986 --> 00:28:33.226 A:middle
not just in mail but any other
text view inside the system.

00:28:34.606 --> 00:28:41.756 A:middle
So, let me explain this little
extension called Party Crasher.

00:28:44.246 --> 00:28:47.216 A:middle
Just like many of you, I
like hanging out with people.

00:28:47.946 --> 00:28:51.456 A:middle
And anytime I see
pictures like this, I feel,

00:28:51.526 --> 00:28:54.486 A:middle
well, kind of left out.

00:28:54.486 --> 00:28:55.496 A:middle
[ Laughter ]

00:28:55.496 --> 00:29:04.586 A:middle
So, with this extension, I can
add my picture to any images


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:55.496 --> 00:29:04.586 A:middle
So, with this extension, I can
add my picture to any images

00:29:04.586 --> 00:29:06.086 A:middle
in the system instantly.

00:29:06.086 --> 00:29:06.153 A:middle
[ Laughter and Applause ]

00:29:06.153 --> 00:29:09.936 A:middle
I like this picture,
so let's keep it.

00:29:11.166 --> 00:29:14.116 A:middle
And the change is
saved in the document.

00:29:16.736 --> 00:29:19.966 A:middle
Also, there is another way

00:29:19.996 --> 00:29:26.556 A:middle
to invoke Action
Extensions on OS X.

00:29:26.786 --> 00:29:29.226 A:middle
I have modified this
Text Edit Application.

00:29:29.736 --> 00:29:32.806 A:middle
By the way, Text Edit
Application is a core sample

00:29:32.806 --> 00:29:34.886 A:middle
application for Cocoa
Application.

00:29:34.886 --> 00:29:36.996 A:middle
So you can modify
any way you want

00:29:37.996 --> 00:29:41.956 A:middle
and learn the neat
stuff about Cocoa.

00:29:43.996 --> 00:29:46.406 A:middle
With this Text Edit Application,

00:29:46.406 --> 00:29:51.356 A:middle
a version Text Edit Application,
you can show toolbar.

00:29:51.356 --> 00:29:56.156 A:middle
And as you can see
in the toolbar,

00:29:56.976 --> 00:30:02.216 A:middle
extension can register
themselves as toolbar item.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:56.976 --> 00:30:02.216 A:middle
extension can register
themselves as toolbar item.

00:30:02.376 --> 00:30:06.306 A:middle
And it can be shown with any
toolbar inside the system.

00:30:07.256 --> 00:30:12.396 A:middle
And the action is applied to
the current selected object.

00:30:12.396 --> 00:30:15.136 A:middle
It can be text or
image, so on so forth.

00:30:16.456 --> 00:30:22.786 A:middle
So, let's invoke the Party
Crasher for text selection.

00:30:23.496 --> 00:30:28.416 A:middle
It appends a message:
Exception [inaudible]

00:30:29.046 --> 00:30:35.496 A:middle
to any text selection
in the system.

00:30:36.216 --> 00:30:41.946 A:middle
Okay. As you can see, Action
Extension is so powerful,

00:30:42.706 --> 00:30:48.026 A:middle
you can write simple
extension like this.

00:30:48.706 --> 00:30:53.286 A:middle
Or you can scale up to
[inaudible] as Markup.

00:30:53.966 --> 00:30:55.206 A:middle
The sky is just the limit.

00:30:55.296 --> 00:30:58.656 A:middle
I have demonstrated
-- with the demo,

00:30:58.736 --> 00:31:03.216 A:middle
I have demonstrated Extensions
can support multiple data types.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.736 --> 00:31:03.216 A:middle
I have demonstrated Extensions
can support multiple data types.

00:31:04.236 --> 00:31:07.436 A:middle
It is common that
you want to support

00:31:07.436 --> 00:31:09.376 A:middle
as many data types as you want.

00:31:09.456 --> 00:31:16.516 A:middle
More data types you support,
it's easier for users

00:31:16.516 --> 00:31:18.186 A:middle
to work with your Extensions.

00:31:18.976 --> 00:31:23.966 A:middle
Let's take a look at how you
can change your behavior based

00:31:23.966 --> 00:31:26.616 A:middle
on the input data coming
from the host application.

00:31:28.336 --> 00:31:31.036 A:middle
In this case, first
we want to check

00:31:31.726 --> 00:31:35.426 A:middle
if it's a text data type coming
from the host application.

00:31:37.156 --> 00:31:43.136 A:middle
We use the kUTTypeText UTI type.

00:31:43.136 --> 00:31:46.756 A:middle
And it contains many
text data format

00:31:47.176 --> 00:31:51.536 A:middle
with hasItemConforming
ToTypeIdentifer method

00:31:51.626 --> 00:31:54.006 A:middle
for itemProvider you can check

00:31:54.006 --> 00:31:59.626 A:middle
if the itemProvider
contains the text data.

00:31:59.796 --> 00:32:04.866 A:middle
Once you make sure, you
can load the data using


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.796 --> 00:32:04.866 A:middle
Once you make sure, you
can load the data using

00:32:04.866 --> 00:32:11.036 A:middle
loadItemForTypeIdentifier
options completionHandler using

00:32:11.036 --> 00:32:13.696 A:middle
the data representation
type of your choice.

00:32:14.666 --> 00:32:18.656 A:middle
Since itemProvider has simple
data coordination facility,

00:32:19.316 --> 00:32:21.406 A:middle
it can map some data

00:32:22.726 --> 00:32:27.716 A:middle
to the target object
data type you specify.

00:32:27.786 --> 00:32:30.586 A:middle
In this case, we are
using NSAttributedString.

00:32:31.286 --> 00:32:34.426 A:middle
Once you have your data,

00:32:35.226 --> 00:32:40.296 A:middle
set up your user
interface and code into it.

00:32:42.086 --> 00:32:46.066 A:middle
Similarly, if your
text data check fails,

00:32:46.636 --> 00:32:49.356 A:middle
you can check for image data.

00:32:50.926 --> 00:32:55.326 A:middle
After checking if it's
image, you can load the image

00:32:55.796 --> 00:33:02.536 A:middle
and as I mentioned, itemProvider
can [inaudible] data type


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:55.796 --> 00:33:02.536 A:middle
and as I mentioned, itemProvider
can [inaudible] data type

00:33:02.766 --> 00:33:06.166 A:middle
into UIImage or NSImage for you.

00:33:06.716 --> 00:33:12.116 A:middle
And if you have image, configure
your user interface for image.

00:33:16.196 --> 00:33:22.446 A:middle
For OS X, it's common that
your extension's user interface

00:33:22.546 --> 00:33:25.746 A:middle
doesn't cover the entire
host application's window.

00:33:26.796 --> 00:33:28.156 A:middle
Just like Markup.

00:33:28.906 --> 00:33:33.956 A:middle
Typically you want to overlay
your user interface on top

00:33:33.956 --> 00:33:37.946 A:middle
of the original representation
of the host application.

00:33:38.976 --> 00:33:41.456 A:middle
It's easy to accomplish.

00:33:43.126 --> 00:33:48.416 A:middle
We have additional property
for NSItemProvider on OS X.

00:33:49.226 --> 00:33:50.726 A:middle
It's called sourceFrame.

00:33:52.306 --> 00:33:54.566 A:middle
It contains the screen
coordinate

00:33:55.076 --> 00:33:58.406 A:middle
for the original representation
inside the host application.

00:33:59.786 --> 00:34:04.586 A:middle
If you get [inaudible]
rect information,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.786 --> 00:34:04.586 A:middle
If you get [inaudible]
rect information,

00:34:05.026 --> 00:34:10.456 A:middle
and if it's not empty, you
can adjust the frame according

00:34:10.456 --> 00:34:11.916 A:middle
to your user interface needs.

00:34:12.176 --> 00:34:14.746 A:middle
You might want to have
some additional frame

00:34:15.025 --> 00:34:17.956 A:middle
around the original
representation just like Markup

00:34:17.956 --> 00:34:19.525 A:middle
or Party Crasher does.

00:34:22.576 --> 00:34:26.036 A:middle
Then set up two NSViewController
properties,

00:34:26.996 --> 00:34:30.976 A:middle
preferredScreenOrigin
and preferredContentSize.

00:34:33.146 --> 00:34:36.146 A:middle
As you've seen with Mark's
presentation yesterday,

00:34:36.626 --> 00:34:39.366 A:middle
the preferred content
size is shared

00:34:39.496 --> 00:34:44.726 A:middle
between the [inaudible]
and Action Extension.

00:34:46.565 --> 00:34:51.505 A:middle
By setting up these properties,
the View Controller system takes

00:34:51.505 --> 00:34:55.416 A:middle
over and configures your
extension user interface

00:34:55.585 --> 00:35:03.536 A:middle
overlaid on top of the
original representation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:55.585 --> 00:35:03.536 A:middle
overlaid on top of the
original representation

00:35:03.616 --> 00:35:04.676 A:middle
in the host application.

00:35:05.486 --> 00:35:14.176 A:middle
Now, I'd like to bring my
colleague Ian Baird who's going

00:35:14.176 --> 00:35:17.186 A:middle
to be discussing
really, really cool way

00:35:17.346 --> 00:35:21.626 A:middle
to integrate interactive
Web and actions.

00:35:23.196 --> 00:35:23.776 A:middle
Ian.

00:35:24.516 --> 00:35:27.786 A:middle
[ Applause ]

00:35:28.286 --> 00:35:28.866 A:middle
&gt;&gt; Thank you Aki.

00:35:31.646 --> 00:35:34.106 A:middle
So, Aki showed you how to
create a custom action.

00:35:34.106 --> 00:35:35.196 A:middle
And he showed it on OS X.

00:35:35.196 --> 00:35:36.856 A:middle
And today I'm going
to show you how

00:35:36.856 --> 00:35:39.636 A:middle
to build a Safari
custom action or how

00:35:39.636 --> 00:35:42.156 A:middle
to take your custom action
and enhance it for the Web.

00:35:42.556 --> 00:35:45.056 A:middle
We think you guys are really
going to love this feature.

00:35:46.446 --> 00:35:49.376 A:middle
So first, you can see our
custom action in the bottom row

00:35:49.486 --> 00:35:51.956 A:middle
of the activity view controller
as I showed you yesterday

00:35:51.956 --> 00:35:53.416 A:middle
in the Part One of this talk.

00:35:54.726 --> 00:35:56.736 A:middle
And it's called TinySketch.

00:35:57.096 --> 00:35:59.656 A:middle
It can't do everything that
its brother Markup can do,

00:35:59.906 --> 00:36:01.176 A:middle
but it can still pack a punch.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.906 --> 00:36:01.176 A:middle
but it can still pack a punch.

00:36:02.856 --> 00:36:04.066 A:middle
So first, diving in,

00:36:04.406 --> 00:36:07.426 A:middle
Safari Custom Actions is
rich new functionality

00:36:07.426 --> 00:36:08.806 A:middle
in Safari on iOS.

00:36:09.776 --> 00:36:11.656 A:middle
It gives you access to the DOM.

00:36:12.916 --> 00:36:15.506 A:middle
And there are two types
of Custom Actions.

00:36:16.356 --> 00:36:18.296 A:middle
A view controller-based
custom action,

00:36:18.626 --> 00:36:19.816 A:middle
the kind I'm going
to show you today.

00:36:19.816 --> 00:36:22.646 A:middle
And then there's
a no view action

00:36:22.846 --> 00:36:24.356 A:middle
like the Bing Translate action

00:36:24.646 --> 00:36:26.156 A:middle
that Craig showed
you in the Keynote.

00:36:27.646 --> 00:36:29.716 A:middle
How do these work?

00:36:30.096 --> 00:36:31.456 A:middle
We use some JavaScript.

00:36:31.686 --> 00:36:35.126 A:middle
Your extension will
provide JavaScript along

00:36:35.126 --> 00:36:36.676 A:middle
in its resources.

00:36:37.176 --> 00:36:39.096 A:middle
And Safari is going
to find this.

00:36:41.006 --> 00:36:44.276 A:middle
So, here's what this JavaScript
is going to look like.

00:36:44.426 --> 00:36:45.546 A:middle
We're going to expect you

00:36:45.546 --> 00:36:48.436 A:middle
to provide a pre-processing
JavaScript object.

00:36:48.746 --> 00:36:52.236 A:middle
And this object is going to
have two methods, a run method

00:36:52.436 --> 00:36:53.466 A:middle
and a finalize method.

00:36:54.046 --> 00:36:56.296 A:middle
We're going to start by
calling the run method

00:36:56.296 --> 00:36:58.186 A:middle
and give you access to the DOM.

00:36:58.186 --> 00:37:00.226 A:middle
And what you're going
to be expected to do


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.186 --> 00:37:00.226 A:middle
And what you're going
to be expected to do

00:37:00.226 --> 00:37:05.036 A:middle
in this run method is to call
the action arguments completion

00:37:05.096 --> 00:37:07.796 A:middle
function, passing the
data you want to provide

00:37:08.016 --> 00:37:09.736 A:middle
to the custom action
when you're done.

00:37:09.736 --> 00:37:14.776 A:middle
And when the action
has completed,

00:37:14.936 --> 00:37:16.366 A:middle
when the computation inside

00:37:16.366 --> 00:37:21.176 A:middle
of your custom action extension
has finished, we're again going

00:37:21.176 --> 00:37:22.266 A:middle
to call your JavaScript.

00:37:22.626 --> 00:37:25.526 A:middle
And this time we're going to
invoke the finalize method

00:37:25.936 --> 00:37:27.456 A:middle
and pass the action arguments.

00:37:27.456 --> 00:37:30.306 A:middle
And as you can see in this
case, we're just calling alert

00:37:30.306 --> 00:37:32.056 A:middle
and showing the message,
which was provided.

00:37:32.206 --> 00:37:35.956 A:middle
One of the most important
things for you

00:37:35.956 --> 00:37:38.826 A:middle
to remember is this
global variable:

00:37:38.826 --> 00:37:41.086 A:middle
ExtensionPreprocessing
JavaScript.

00:37:41.086 --> 00:37:42.976 A:middle
This is going to be an
instance of your object

00:37:42.976 --> 00:37:45.206 A:middle
that provides these
methods to Safari.

00:37:45.206 --> 00:37:48.606 A:middle
And I think this should
be burned into your mind,

00:37:48.706 --> 00:37:51.606 A:middle
because if you don't provide
this, we're not going to be able

00:37:51.606 --> 00:37:53.186 A:middle
to invoke your JavaScript.

00:37:53.226 --> 00:37:55.806 A:middle
And nothing's going to show
up inside of your action.

00:37:58.166 --> 00:38:01.636 A:middle
So, it's really easy to
talk about these things,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.166 --> 00:38:01.636 A:middle
So, it's really easy to
talk about these things,

00:38:01.746 --> 00:38:03.336 A:middle
but it's far better to show it.

00:38:03.396 --> 00:38:08.716 A:middle
So I'm going to show you
a demo of TinySketch.

00:38:08.966 --> 00:38:09.686 A:middle
Moving right in.

00:38:10.136 --> 00:38:11.826 A:middle
Let's build and run
and see what we've got.

00:38:12.816 --> 00:38:16.066 A:middle
So what I've done here is
I've built a very small test

00:38:16.066 --> 00:38:17.706 A:middle
application called TinySketch

00:38:18.006 --> 00:38:20.276 A:middle
which contains my
TinySketch custom action.

00:38:21.796 --> 00:38:23.636 A:middle
This is a good way
to get started.

00:38:23.636 --> 00:38:25.396 A:middle
You might not want
to dive immediately

00:38:25.486 --> 00:38:29.056 A:middle
into creating an extension for
Safari because there are a lot

00:38:29.056 --> 00:38:31.256 A:middle
of moving parts, and it's
a lot better to build it

00:38:31.256 --> 00:38:32.576 A:middle
up in pieces when you can.

00:38:32.576 --> 00:38:35.846 A:middle
As you can see, we don't
have anything here yet.

00:38:35.846 --> 00:38:37.376 A:middle
And we don't actually
have any data.

00:38:37.376 --> 00:38:40.436 A:middle
And our Action button
is not wired up.

00:38:40.436 --> 00:38:41.996 A:middle
Let's go ahead and do that.

00:38:43.086 --> 00:38:45.786 A:middle
Going back to Xcode.

00:38:45.786 --> 00:38:49.226 A:middle
TinySketch Support is our
new support framework,

00:38:49.226 --> 00:38:51.666 A:middle
as Damien was talking about,
embedded frameworks earlier.

00:38:51.766 --> 00:38:53.246 A:middle
We're going to go
into our data model.

00:38:54.386 --> 00:38:57.116 A:middle
And because our application
and our extension may want

00:38:57.256 --> 00:38:59.476 A:middle
to use the same data
model, we're actually going

00:38:59.476 --> 00:39:03.256 A:middle
to provide the accessor to
the resources here, like this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.476 --> 00:39:03.256 A:middle
to provide the accessor to
the resources here, like this.

00:39:03.906 --> 00:39:05.766 A:middle
This is going to iterate
through the image URLs

00:39:06.186 --> 00:39:10.046 A:middle
in my custom Extensions
documents folder.

00:39:11.856 --> 00:39:13.106 A:middle
We'll add support for it there.

00:39:13.246 --> 00:39:17.516 A:middle
And then we'll go back to the
app and we'll actually wire

00:39:17.516 --> 00:39:19.656 A:middle
up support for it
in viewDidLoad.

00:39:20.746 --> 00:39:22.576 A:middle
Get the pictures
of the cute kids.

00:39:23.246 --> 00:39:27.096 A:middle
Fix up the indentation.

00:39:27.446 --> 00:39:28.586 A:middle
And we'll build and run again.

00:39:29.376 --> 00:39:33.736 A:middle
And this time you'll see
some pictures of my children.

00:39:34.126 --> 00:39:37.006 A:middle
They're usually enjoying a
day at the park or at school

00:39:37.006 --> 00:39:38.406 A:middle
or doing something else.

00:39:39.506 --> 00:39:40.586 A:middle
Hit Reset on this.

00:39:40.716 --> 00:39:41.976 A:middle
I forgot to reset it before.

00:39:43.456 --> 00:39:46.226 A:middle
We can tap on any of these
images and in they go.

00:39:46.226 --> 00:39:47.846 A:middle
You can see right there.

00:39:48.766 --> 00:39:49.766 A:middle
Tap on any of them.

00:39:50.756 --> 00:39:51.406 A:middle
It's really cool.

00:39:52.186 --> 00:39:53.126 A:middle
All right.

00:39:53.126 --> 00:39:55.886 A:middle
Tap the Custom Action
button, and nothing comes up.

00:39:55.886 --> 00:39:57.606 A:middle
Well, that's because we
haven't wired it up yet.

00:39:57.606 --> 00:39:59.876 A:middle
As Aki was telling you
earlier, we need to set

00:39:59.876 --> 00:40:01.516 A:middle
up the UIActivity
View Controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.876 --> 00:40:01.516 A:middle
up the UIActivity
View Controller

00:40:01.756 --> 00:40:03.746 A:middle
to provide data to
the extension.

00:40:04.006 --> 00:40:05.416 A:middle
So let's go do that.

00:40:16.356 --> 00:40:17.766 A:middle
Going to go into
our Share Method.

00:40:17.836 --> 00:40:19.886 A:middle
And we're going to
add some more code.

00:40:21.046 --> 00:40:22.906 A:middle
Setting up the UIActivity
View Controller.

00:40:23.006 --> 00:40:25.126 A:middle
As you can see, as Aki
talked about earlier,

00:40:25.326 --> 00:40:29.916 A:middle
we're creating an activity item
using our selected image URL.

00:40:29.916 --> 00:40:33.626 A:middle
And now we're going
to add some code

00:40:33.626 --> 00:40:36.376 A:middle
where we're just configuring
the activity item as we go,

00:40:36.376 --> 00:40:38.236 A:middle
as Aki talked about
earlier -- oops.

00:40:41.476 --> 00:40:44.006 A:middle
We're adding a little bit
more code to actually deal

00:40:44.006 --> 00:40:46.316 A:middle
with receiving the
data items right here.

00:40:46.666 --> 00:40:47.896 A:middle
We're going to take
a look at make sure

00:40:47.896 --> 00:40:48.976 A:middle
that we were successful.

00:40:48.976 --> 00:40:51.096 A:middle
We're going to count the
number of items and we're going

00:40:51.096 --> 00:40:53.486 A:middle
to grab the item
provider, which is provided

00:40:53.486 --> 00:40:55.246 A:middle
to us by the custom action.

00:40:55.246 --> 00:40:58.826 A:middle
And then we're going to take
the image and save it back

00:40:58.826 --> 00:41:00.286 A:middle
into our image collection.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.826 --> 00:41:00.286 A:middle
into our image collection.

00:41:00.606 --> 00:41:03.336 A:middle
And then we're going to
redisplay that image inside

00:41:03.336 --> 00:41:04.146 A:middle
of the collection view.

00:41:04.186 --> 00:41:06.756 A:middle
And now finally, now that
we have the Activity View

00:41:06.756 --> 00:41:08.386 A:middle
Controller completely
configured,

00:41:08.746 --> 00:41:13.146 A:middle
we're going to present it.

00:41:13.146 --> 00:41:14.906 A:middle
So, let's build and run.

00:41:15.206 --> 00:41:19.726 A:middle
This time we ought to be
able to tap on the picture

00:41:19.726 --> 00:41:22.116 A:middle
of the cute kids, at least
I think they're cute.

00:41:24.016 --> 00:41:25.486 A:middle
Tap on the Action item.

00:41:25.776 --> 00:41:29.006 A:middle
And now we can see our
custom action right here.

00:41:29.326 --> 00:41:31.646 A:middle
If we tap it, up it comes.

00:41:31.946 --> 00:41:34.626 A:middle
It doesn't do much yet, because
while we're providing the data

00:41:34.626 --> 00:41:37.946 A:middle
to it, we haven't actually
added any code to consume

00:41:37.946 --> 00:41:39.796 A:middle
that data inside of the action.

00:41:40.216 --> 00:41:41.066 A:middle
Let's go do that now.

00:41:48.136 --> 00:41:50.276 A:middle
Going into our TinySketch
action,

00:41:50.366 --> 00:41:52.776 A:middle
which is our target
containing the custom action.

00:41:53.996 --> 00:41:55.656 A:middle
And we're going to go
down to viewDidLoad,

00:41:55.806 --> 00:41:57.826 A:middle
which is where we should
consume the extension item.

00:41:59.576 --> 00:42:02.566 A:middle
To add something to
uphold the input item


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.576 --> 00:42:02.566 A:middle
To add something to
uphold the input item

00:42:02.566 --> 00:42:04.726 A:middle
from the extension
context, and we're going

00:42:04.726 --> 00:42:06.466 A:middle
to grab the first
image item provider.

00:42:06.466 --> 00:42:09.296 A:middle
And we're going to make sure
that it has an item conforming

00:42:09.296 --> 00:42:12.006 A:middle
to our type identifier
of a type image.

00:42:12.616 --> 00:42:14.476 A:middle
And then we're actually
going to load that image.

00:42:14.846 --> 00:42:17.976 A:middle
And with the magic
of NSItemProvider,

00:42:18.656 --> 00:42:21.346 A:middle
we're going to -- it's going
to be coerced from a URL

00:42:21.686 --> 00:42:23.796 A:middle
into an item auto-magically
for you.

00:42:23.906 --> 00:42:25.996 A:middle
We actually take a
look at the signature

00:42:26.136 --> 00:42:27.336 A:middle
of these block parameters

00:42:27.546 --> 00:42:29.946 A:middle
and perform all the coercions
behind the scenes for you.

00:42:30.866 --> 00:42:32.956 A:middle
I thought that was cool.

00:42:33.516 --> 00:42:36.996 A:middle
[ Applause ]

00:42:37.496 --> 00:42:38.876 A:middle
And then we're going
to take that item,

00:42:38.996 --> 00:42:40.836 A:middle
we're going to assign it
to our image properties

00:42:40.836 --> 00:42:41.806 A:middle
so that we can hold onto it.

00:42:41.806 --> 00:42:44.416 A:middle
And then we're also going
to show it in our imageView.

00:42:45.696 --> 00:42:49.836 A:middle
Once we're done with
it, I'm scrolling past,

00:42:50.926 --> 00:42:52.706 A:middle
we're going to need to
be able to take this data

00:42:52.706 --> 00:42:55.636 A:middle
and send it back to the
host testing application.

00:42:56.156 --> 00:42:57.636 A:middle
So let's set that up.

00:42:57.936 --> 00:42:59.556 A:middle
We're going to create
an extension item.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.356 --> 00:43:02.266 A:middle
We're going to check that
we're not editing for the Web.

00:43:02.266 --> 00:43:03.166 A:middle
That will come later.

00:43:03.166 --> 00:43:07.226 A:middle
And we're going to attach
the newly-created image,

00:43:07.296 --> 00:43:10.606 A:middle
the flattened image, the image
containing all the adornments,

00:43:11.266 --> 00:43:14.326 A:middle
into the extension item
using NSItemProvider.

00:43:14.366 --> 00:43:16.496 A:middle
This time we're just, we're
not going to supply a URL,

00:43:16.496 --> 00:43:17.786 A:middle
but we're going to
supply an image.

00:43:18.686 --> 00:43:20.736 A:middle
And then as Aki talked
about earlier,

00:43:20.736 --> 00:43:22.376 A:middle
we're going to finish
the request

00:43:22.426 --> 00:43:24.556 A:middle
by calling
completeRequestReturningItems

00:43:24.866 --> 00:43:26.396 A:middle
and passing the extensionItem.

00:43:27.946 --> 00:43:32.996 A:middle
Let's build and run.

00:43:33.736 --> 00:43:35.866 A:middle
And let's edit.

00:43:36.956 --> 00:43:39.286 A:middle
Pulling it up and
annotating the image.

00:43:40.006 --> 00:43:43.296 A:middle
And you can see we actually have
data flowing across the wire.

00:43:44.176 --> 00:43:48.206 A:middle
We can dismiss, and
the data goes back.

00:43:48.206 --> 00:43:49.516 A:middle
That wasn't all that interesting

00:43:49.516 --> 00:43:50.926 A:middle
because I didn't
actually make any edits.

00:43:50.926 --> 00:43:53.636 A:middle
So I'll make an edit this time.

00:43:53.796 --> 00:43:59.426 A:middle
Put an appropriate label in
here, in the speech bubble.

00:43:59.556 --> 00:44:03.026 A:middle
Having fun at the park.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.556 --> 00:44:03.026 A:middle
Having fun at the park.

00:44:03.806 --> 00:44:08.956 A:middle
Hit Done. And you'll notice now
our image has been replaced.

00:44:09.226 --> 00:44:11.716 A:middle
The data has made it back
from our custom extension

00:44:11.856 --> 00:44:13.046 A:middle
to our test application.

00:44:13.716 --> 00:44:17.246 A:middle
And we have round-tripped
a custom action on iOS.

00:44:17.876 --> 00:44:20.686 A:middle
Now, while this is cool,
I'm really here to show you

00:44:20.686 --> 00:44:24.266 A:middle
about how this works, can
work, with Safari and the Web.

00:44:24.746 --> 00:44:26.906 A:middle
So let's go ahead and
enhance this custom action

00:44:27.106 --> 00:44:29.856 A:middle
to actually pull its
data out of a live DOM

00:44:29.856 --> 00:44:32.426 A:middle
and then replace the data
in that DOM when it's done.

00:44:32.876 --> 00:44:36.156 A:middle
Let's do that now.

00:44:37.036 --> 00:44:39.586 A:middle
Going back, and stop.

00:44:41.926 --> 00:44:45.146 A:middle
And now you may have seen
some of my notes earlier

00:44:45.146 --> 00:44:46.596 A:middle
about adding Web support.

00:44:47.786 --> 00:44:49.756 A:middle
We're going to scroll back up.

00:44:50.826 --> 00:44:54.266 A:middle
And this time we're going
to add an else condition

00:44:56.296 --> 00:44:58.866 A:middle
to receive a URL from Safari.

00:44:59.836 --> 00:45:01.426 A:middle
You notice we're
going to have an else.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.836 --> 00:45:01.426 A:middle
You notice we're
going to have an else.

00:45:01.426 --> 00:45:03.886 A:middle
And if we have an
itemConformingToTypeIdentifier

00:45:03.886 --> 00:45:07.016 A:middle
KUTTypePropertyList, this is
important because we're going

00:45:07.016 --> 00:45:08.176 A:middle
to be sending a dictionary.

00:45:09.586 --> 00:45:12.516 A:middle
We're going to unpack the image
URL out of this dictionary.

00:45:13.146 --> 00:45:15.896 A:middle
Also set up our little
editing for Web flag to Yes.

00:45:15.896 --> 00:45:21.016 A:middle
And then we're setting up
an NSURLSessionDownloadTask

00:45:21.246 --> 00:45:22.686 A:middle
to actually perform
the download.

00:45:23.136 --> 00:45:26.066 A:middle
If the download succeeds,
we unpack the image data

00:45:26.066 --> 00:45:28.016 A:middle
and render into a UIImage.

00:45:28.196 --> 00:45:30.766 A:middle
Again, stashing the image
away in our property

00:45:31.096 --> 00:45:32.656 A:middle
and assigning it
to the imageView.

00:45:32.656 --> 00:45:35.006 A:middle
If we're unable to
download, we'll get an NSLog.

00:45:35.006 --> 00:45:40.946 A:middle
And on the other
side of it, in Done,

00:45:42.636 --> 00:45:44.556 A:middle
when we're done editing
the image,

00:45:45.116 --> 00:45:47.246 A:middle
we need to pack it back
into a property list.

00:45:47.396 --> 00:45:48.806 A:middle
And I've got some
code to do that here.

00:45:50.036 --> 00:45:52.886 A:middle
You'll see that we're going
to take the flattened image

00:45:53.046 --> 00:45:55.916 A:middle
and write out a temporary
file here.

00:45:55.916 --> 00:45:59.656 A:middle
And then we're going to actually
create a JPEG string of that

00:45:59.656 --> 00:46:02.616 A:middle
and pack that into a Web
dictionary basically creating a


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.656 --> 00:46:02.616 A:middle
and pack that into a Web
dictionary basically creating a

00:46:02.616 --> 00:46:07.606 A:middle
data URL that Safari can
then swap back into the DOM.

00:46:08.326 --> 00:46:09.926 A:middle
So, everything's wired up there.

00:46:09.926 --> 00:46:11.996 A:middle
Let's go into our JavaScript.

00:46:12.366 --> 00:46:15.176 A:middle
As I talked about earlier, we
are expected to provide the run

00:46:15.176 --> 00:46:16.756 A:middle
and finalized functions.

00:46:16.886 --> 00:46:21.076 A:middle
And let's do that now.

00:46:21.296 --> 00:46:24.786 A:middle
Run, we're going to iterate
over all the images in the DOM.

00:46:24.786 --> 00:46:26.246 A:middle
And we're going to send them

00:46:26.246 --> 00:46:30.576 A:middle
over in the imageUrls
key to the custom action.

00:46:30.896 --> 00:46:32.786 A:middle
And we're also going
to send the base URI.

00:46:32.786 --> 00:46:35.446 A:middle
Our custom action is only going
to consume the first image,

00:46:35.706 --> 00:46:37.016 A:middle
but you know, this is
written for growth.

00:46:37.786 --> 00:46:41.746 A:middle
And then finally, when
the data comes back

00:46:41.746 --> 00:46:44.366 A:middle
from the custom action, we're
going to replace the image

00:46:44.696 --> 00:46:48.086 A:middle
by taking that encoded
data URL and shoving it

00:46:48.086 --> 00:46:49.356 A:middle
into the image using the --

00:46:49.356 --> 00:46:51.216 A:middle
or replacing the
image source property.

00:46:52.146 --> 00:46:56.646 A:middle
Save. Build and run.

00:46:57.576 --> 00:47:00.866 A:middle
Up comes our application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.576 --> 00:47:00.866 A:middle
Up comes our application.

00:47:00.866 --> 00:47:01.786 A:middle
We know this works.

00:47:02.066 --> 00:47:02.726 A:middle
Let's home out.

00:47:03.806 --> 00:47:04.896 A:middle
And let's to go Safari.

00:47:04.896 --> 00:47:08.906 A:middle
I happen to have a Web
server running in local host

00:47:09.386 --> 00:47:10.226 A:middle
with a picture, again,

00:47:10.226 --> 00:47:12.076 A:middle
of my kids just hanging
out at the park.

00:47:13.066 --> 00:47:16.956 A:middle
Let's see if we can
edit this image.

00:47:17.936 --> 00:47:19.126 A:middle
Hitting Annotate Image.

00:47:20.516 --> 00:47:23.696 A:middle
Up slides the custom action
with the data from Safari.

00:47:25.146 --> 00:47:29.336 A:middle
Now let's edit and provide
an appropriate speech bubble.

00:47:37.066 --> 00:47:41.836 A:middle
Hit Done. And now you can see
there's a live replacement

00:47:41.836 --> 00:47:45.446 A:middle
of the data right there in
Safari using the JavaScript

00:47:45.446 --> 00:47:46.286 A:middle
that I just showed you.

00:47:47.516 --> 00:47:53.966 A:middle
[ Applause ]

00:47:54.466 --> 00:47:57.286 A:middle
So, Safari Custom
Actions, as you just saw,

00:47:57.596 --> 00:48:00.376 A:middle
provide the flexibility
of the Web married


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.596 --> 00:48:00.376 A:middle
provide the flexibility
of the Web married

00:48:00.376 --> 00:48:01.856 A:middle
to the power of Extensions.

00:48:02.376 --> 00:48:05.466 A:middle
You can transform Web data
really, really easily.

00:48:06.046 --> 00:48:10.096 A:middle
And you can float a native
interface right over the top

00:48:10.096 --> 00:48:13.216 A:middle
of it, which allows you to
create these rich work flows

00:48:13.216 --> 00:48:15.876 A:middle
that were unimaginable
in previous releases.

00:48:16.356 --> 00:48:18.016 A:middle
So as Damien talked about,

00:48:19.266 --> 00:48:20.996 A:middle
Extensions are secure
by default.

00:48:21.416 --> 00:48:23.886 A:middle
They don't share data
unless you tell them to.

00:48:24.116 --> 00:48:26.986 A:middle
And they have a one-to-one
correspondence

00:48:27.246 --> 00:48:28.066 A:middle
with the hosting app.

00:48:28.436 --> 00:48:30.896 A:middle
That way you have your
own address space in which

00:48:30.896 --> 00:48:33.626 A:middle
to make your mistakes
and your action.

00:48:35.406 --> 00:48:37.816 A:middle
And the last thing we
really want to encourage you

00:48:37.816 --> 00:48:39.796 A:middle
to do is just to have
fun with this feature.

00:48:40.346 --> 00:48:43.026 A:middle
And don't think of it
as sticking new things

00:48:43.026 --> 00:48:44.236 A:middle
onto things like barnacles.

00:48:44.276 --> 00:48:47.416 A:middle
Think of it as constructing
these awesome new workflows

00:48:47.826 --> 00:48:51.196 A:middle
that you were really unable
to explore before now.

00:48:53.826 --> 00:48:56.046 A:middle
For more information,
you can talk to the man

00:48:56.046 --> 00:48:57.436 A:middle
in plaid, Jake Behrens.

00:48:58.626 --> 00:49:01.356 A:middle
Or I'd urge you to read our
excellent documentation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.626 --> 00:49:01.356 A:middle
Or I'd urge you to read our
excellent documentation,

00:49:01.496 --> 00:49:05.956 A:middle
The App Extension Programing
Guide at developer.apple.com.

00:49:06.566 --> 00:49:08.726 A:middle
If you've never been to
the Apple Developer Forums,

00:49:08.936 --> 00:49:10.836 A:middle
you can interact with
employees like myself,

00:49:11.196 --> 00:49:14.316 A:middle
Aki and Damien there, and
provide peer-to-peer support.

00:49:14.316 --> 00:49:17.276 A:middle
Thank you for coming to
learn about Extensions.

00:49:19.236 --> 00:49:21.956 A:middle
And we can't wait to see what
you guys do with the feature.

00:49:22.336 --> 00:49:23.346 A:middle
Thank you.

