WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.231 --> 00:00:14.231 A:middle
[ Applause ]

00:00:14.446 --> 00:00:15.046 A:middle
&gt;&gt; Good morning.

00:00:17.296 --> 00:00:18.226 A:middle
My name is Jim Turner.

00:00:18.296 --> 00:00:19.856 A:middle
&gt;&gt; And I'm Peter Hajas.

00:00:19.856 --> 00:00:21.686 A:middle
And we're engineers
on the UIKit Team.

00:00:22.776 --> 00:00:25.166 A:middle
&gt;&gt; And welcome to
the presentation

00:00:25.166 --> 00:00:28.166 A:middle
on A Look Inside
Presentation Controllers.

00:00:30.526 --> 00:00:35.466 A:middle
&gt;&gt; So UIViewController
presentations have been

00:00:35.466 --> 00:00:39.706 A:middle
around since iOS 2, but only
recently have you had the chance

00:00:39.706 --> 00:00:41.686 A:middle
to customize them in your apps.

00:00:43.326 --> 00:00:47.676 A:middle
In iOS 7, we introduced the
concept of an animator object.

00:00:49.206 --> 00:00:51.906 A:middle
This is an object
who's responsible

00:00:51.996 --> 00:00:55.066 A:middle
for animating your view
controller's content on-screen.

00:00:56.086 --> 00:01:00.156 A:middle
However, if you wanted to build
a totally custom view controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:56.086 --> 00:01:00.156 A:middle
However, if you wanted to build
a totally custom view controller

00:01:00.206 --> 00:01:03.536 A:middle
presentation, it involved
burdening that animator object

00:01:03.886 --> 00:01:05.486 A:middle
with far too much
responsibility.

00:01:06.936 --> 00:01:08.476 A:middle
&gt;&gt; So that's why in iOS 8,

00:01:08.646 --> 00:01:11.156 A:middle
we're introducing
UIPresentationController.

00:01:11.956 --> 00:01:15.456 A:middle
This class is designed to work
in concert with animator objects

00:01:15.906 --> 00:01:19.206 A:middle
to make the job of presenting
view controller content easy

00:01:19.426 --> 00:01:21.176 A:middle
and simple to manage
and execute.

00:01:21.826 --> 00:01:26.096 A:middle
So today, we're going to talk
about just a couple of topics,

00:01:26.456 --> 00:01:29.116 A:middle
the first being some
presentation basics.

00:01:29.756 --> 00:01:32.146 A:middle
What do we mean by presenting
view controller content?

00:01:32.256 --> 00:01:36.256 A:middle
What's the difference between
chrome and content itself?

00:01:37.156 --> 00:01:39.726 A:middle
And what do we expect
UIPresentationController

00:01:39.726 --> 00:01:40.896 A:middle
to be responsible for?

00:01:42.816 --> 00:01:46.006 A:middle
Next, we'll go over how UIKit
used UIPresentationController

00:01:46.156 --> 00:01:47.476 A:middle
to expand our own API.

00:01:47.716 --> 00:01:51.126 A:middle
And finally, we'll
wind up with a demo

00:01:51.206 --> 00:01:52.736 A:middle
that brings all these
concepts together,

00:01:52.736 --> 00:01:55.756 A:middle
so that you guys can see how you
can use UIPresentationController

00:01:55.916 --> 00:01:57.196 A:middle
in your apps.

00:01:57.936 --> 00:02:00.756 A:middle
&gt;&gt; First, let's start with
some presentation basics.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:57.936 --> 00:02:00.756 A:middle
&gt;&gt; First, let's start with
some presentation basics.

00:02:01.656 --> 00:02:04.486 A:middle
Here I am, on the Settings app
on iPad, and I'm going to tap

00:02:04.486 --> 00:02:06.996 A:middle
that Create New Apple
ID table cell.

00:02:07.666 --> 00:02:10.096 A:middle
The New Account sheet slides
up, and we're ready to go.

00:02:11.166 --> 00:02:13.556 A:middle
In UIViewController
terminology, we would call

00:02:13.556 --> 00:02:16.406 A:middle
that New Account Sheet the
presented view controller.

00:02:16.956 --> 00:02:18.556 A:middle
And the Settings
split view behind it,

00:02:18.866 --> 00:02:20.696 A:middle
the presenting view controller.

00:02:20.696 --> 00:02:23.346 A:middle
When we talk about
the responsibilities

00:02:23.476 --> 00:02:25.906 A:middle
of UIPresentationController,
we would say

00:02:25.906 --> 00:02:29.716 A:middle
that that New Account Sheet is
the content of the presentation.

00:02:30.216 --> 00:02:31.296 A:middle
It's the foreground stuff

00:02:31.346 --> 00:02:32.756 A:middle
that your user is
meant to interact with.

00:02:33.636 --> 00:02:36.276 A:middle
We would then say that the
background content that's dimmed

00:02:36.736 --> 00:02:37.406 A:middle
is the chrome.

00:02:38.036 --> 00:02:40.126 A:middle
It's dimmed to help
accentuate the content

00:02:40.186 --> 00:02:41.066 A:middle
of your presentation.

00:02:42.406 --> 00:02:44.736 A:middle
To help manage the
content and chrome,

00:02:44.736 --> 00:02:46.136 A:middle
in your view controller
presentation,

00:02:46.736 --> 00:02:49.006 A:middle
we're going to use
UIPresentationController.

00:02:50.276 --> 00:02:50.936 A:middle
At its heart,

00:02:51.246 --> 00:02:55.306 A:middle
UIPresentationController is the
presentation management class

00:02:55.306 --> 00:02:57.096 A:middle
that you'll use in
your application.

00:02:58.006 --> 00:03:00.396 A:middle
All UI view controller
presentations


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.006 --> 00:03:00.396 A:middle
All UI view controller
presentations

00:03:00.396 --> 00:03:03.716 A:middle
in iOS 8 are backed by
UIPresentationController.

00:03:05.196 --> 00:03:08.116 A:middle
Because UIPresentationController
can provide chrome,

00:03:08.776 --> 00:03:12.956 A:middle
it can also provide its own
animations for that chrome or --

00:03:12.956 --> 00:03:14.276 A:middle
and this is really cool --

00:03:14.896 --> 00:03:18.916 A:middle
UIPresentationController can
animate its chrome alongside

00:03:18.916 --> 00:03:22.366 A:middle
your existing animator
objects' custom animations.

00:03:22.636 --> 00:03:25.456 A:middle
And we'll take a look
at a demo of that.

00:03:25.456 --> 00:03:28.076 A:middle
Additionally, throughout
the conference, you've heard

00:03:28.076 --> 00:03:31.116 A:middle
about our push to make your
applications more adaptive.

00:03:31.246 --> 00:03:34.516 A:middle
And UIPresentationController
is built from the get-go

00:03:34.796 --> 00:03:37.026 A:middle
to handle trait and
size class changes.

00:03:37.776 --> 00:03:38.396 A:middle
Additionally,

00:03:38.756 --> 00:03:41.576 A:middle
UIPresentationController will
respond to these changes,

00:03:42.086 --> 00:03:44.296 A:middle
even while your view
controller's presentation

00:03:44.596 --> 00:03:45.276 A:middle
is on-screen.

00:03:45.696 --> 00:03:47.206 A:middle
So you can adapt seamlessly

00:03:47.206 --> 00:03:48.416 A:middle
between the changing
environment.

00:03:48.416 --> 00:03:52.716 A:middle
And finally, because
UIPresentationController is a

00:03:52.716 --> 00:03:55.496 A:middle
great Cocoa Touch
citizen, it's reusable.

00:03:56.166 --> 00:03:58.986 A:middle
UIPresentationController
objects are not coupled

00:03:59.366 --> 00:04:01.926 A:middle
to animator objects or
transitioning delegates.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.366 --> 00:04:01.926 A:middle
to animator objects or
transitioning delegates.

00:04:02.336 --> 00:04:04.386 A:middle
You can use the same
Presentation Controller

00:04:04.606 --> 00:04:05.976 A:middle
with different view controllers,

00:04:06.326 --> 00:04:08.566 A:middle
or switch out the
Presentation Controller

00:04:08.816 --> 00:04:12.346 A:middle
for the same view controller
to create a truly custom look.

00:04:14.496 --> 00:04:18.476 A:middle
&gt;&gt; Prior to iOS 8, the animator
object, as Peter mentioned,

00:04:18.555 --> 00:04:20.636 A:middle
was kind of overburdened
with some tasks

00:04:20.636 --> 00:04:23.196 A:middle
when presenting a view
controller's content on-screen.

00:04:23.506 --> 00:04:26.646 A:middle
Its primary task was
obviously animating

00:04:26.646 --> 00:04:28.876 A:middle
that controller's content,
and that includes any kind

00:04:28.876 --> 00:04:29.996 A:middle
of subview animations --

00:04:29.996 --> 00:04:32.296 A:middle
things like content
offsets or insets, as well.

00:04:33.416 --> 00:04:36.566 A:middle
But it also needed to figure out
its own positioning on-screen.

00:04:37.006 --> 00:04:39.246 A:middle
If you were doing any kind
of custom presentation,

00:04:39.616 --> 00:04:43.406 A:middle
we would give you reasonably
good information for where

00:04:43.406 --> 00:04:44.466 A:middle
to start and where to end,

00:04:44.836 --> 00:04:46.666 A:middle
but it's probably
not what you wanted

00:04:46.666 --> 00:04:47.846 A:middle
for your custom presentation.

00:04:48.196 --> 00:04:50.146 A:middle
And so the animator
object had to know more

00:04:50.146 --> 00:04:52.256 A:middle
about the presentation than
it probably should have.

00:04:52.656 --> 00:04:54.776 A:middle
And that goes along with
the chrome, as well.

00:04:55.356 --> 00:04:59.466 A:middle
That animator object also needed
to know, the entire layout --

00:04:59.496 --> 00:05:02.586 A:middle
what the presentation
was going to encompass.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.496 --> 00:05:02.586 A:middle
what the presentation
was going to encompass.

00:05:03.316 --> 00:05:06.206 A:middle
But now, with Presentation
Controller, this responsibility

00:05:06.206 --> 00:05:07.866 A:middle
for positioning that
view controller

00:05:08.116 --> 00:05:10.616 A:middle
and for handling the chrome
and other views that go along

00:05:10.616 --> 00:05:12.266 A:middle
with the presentation
are handled

00:05:12.266 --> 00:05:13.986 A:middle
in a much more logical object.

00:05:14.766 --> 00:05:17.446 A:middle
The Presentation Controller --
and since it's long-lived --

00:05:17.746 --> 00:05:19.396 A:middle
knows more about
the presentation,

00:05:19.396 --> 00:05:21.016 A:middle
because it has a
better vantage point

00:05:21.056 --> 00:05:23.046 A:middle
for what's actually
going to occur on-screen.

00:05:23.846 --> 00:05:26.376 A:middle
And as we have mentioned before,

00:05:26.476 --> 00:05:29.856 A:middle
Presentation Controller
is what drives adaptation

00:05:29.856 --> 00:05:30.676 A:middle
in your application.

00:05:31.456 --> 00:05:33.696 A:middle
This object is going
to be responsible

00:05:33.696 --> 00:05:36.296 A:middle
for helping you switch
out view controllers

00:05:36.296 --> 00:05:38.586 A:middle
and wholesale switching out
of Presentation Controllers,

00:05:38.586 --> 00:05:40.016 A:middle
which we will look
at in just a moment.

00:05:40.016 --> 00:05:43.266 A:middle
So now that we know about --

00:05:43.266 --> 00:05:45.846 A:middle
a little bit about what
Presentation Controller actually

00:05:45.846 --> 00:05:49.286 A:middle
is, let's show you how
we in UIKit used it

00:05:49.286 --> 00:05:53.326 A:middle
to improve popovers, alerts,
action sheets and search.

00:05:53.376 --> 00:05:55.306 A:middle
And we'll have Peter start
you off with popovers.

00:05:56.016 --> 00:05:56.546 A:middle
&gt;&gt; Sure thing.

00:05:57.386 --> 00:05:58.966 A:middle
As you saw in our
talk yesterday,

00:05:59.246 --> 00:06:02.246 A:middle
we're introducing a new
UIPresentationController class


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.246 --> 00:06:02.246 A:middle
we're introducing a new
UIPresentationController class

00:06:02.636 --> 00:06:05.356 A:middle
to help manage popover
presentations in your app.

00:06:05.796 --> 00:06:08.186 A:middle
It's called
UIPopoverPresentationController.

00:06:09.166 --> 00:06:11.856 A:middle
It's intended to replace
UIPopoverController

00:06:11.856 --> 00:06:15.166 A:middle
in your application, but it
is functionally equivalent

00:06:15.576 --> 00:06:18.416 A:middle
in the customization that it
provides for the presentation.

00:06:19.456 --> 00:06:20.976 A:middle
But it has some additional
features.

00:06:21.646 --> 00:06:23.266 A:middle
It has built-in adaptivity

00:06:23.336 --> 00:06:26.376 A:middle
to help facilitate your
view controller adapting

00:06:26.376 --> 00:06:27.366 A:middle
in a changing environment.

00:06:27.856 --> 00:06:30.876 A:middle
UIPopoverPresentationController
will seamlessly handle

00:06:30.876 --> 00:06:34.146 A:middle
transitions between regular
and compact-width environments.

00:06:34.366 --> 00:06:39.146 A:middle
Let's look at how you used to
show a popover, prior to iOS 8.

00:06:39.696 --> 00:06:43.036 A:middle
With the old API, you'd create
your content view controller,

00:06:43.706 --> 00:06:45.316 A:middle
set it on your Popover
Controller

00:06:45.946 --> 00:06:47.136 A:middle
and present that popover.

00:06:48.006 --> 00:06:50.406 A:middle
But this isn't really
the whole story.

00:06:51.316 --> 00:06:52.976 A:middle
If you had a universal
application --

00:06:53.126 --> 00:06:54.236 A:middle
and many of you do --

00:06:54.566 --> 00:06:56.866 A:middle
you actually had to
have two code paths.

00:06:57.556 --> 00:07:00.566 A:middle
We check for it on an iPad
and make a popover controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.556 --> 00:07:00.566 A:middle
We check for it on an iPad
and make a popover controller.

00:07:01.056 --> 00:07:03.856 A:middle
Otherwise, we'd do a
presentViewController

00:07:03.856 --> 00:07:04.396 A:middle
traditionally.

00:07:04.506 --> 00:07:07.646 A:middle
And you had to litter this
bifurcation throughout your app.

00:07:07.976 --> 00:07:09.956 A:middle
With
UIPopoverPresentationController,

00:07:10.276 --> 00:07:12.346 A:middle
you'll just have one code path.

00:07:12.346 --> 00:07:13.156 A:middle
Here's how to use it.

00:07:14.156 --> 00:07:16.146 A:middle
First, you'll set
the view controller's

00:07:16.206 --> 00:07:18.536 A:middle
modalPresentationStyle
to popover.

00:07:18.906 --> 00:07:20.776 A:middle
This is a new value in iOS 8.

00:07:21.576 --> 00:07:23.536 A:middle
UIKit will look to
your view controller's

00:07:23.536 --> 00:07:26.096 A:middle
modalPresentationStyle
to determine how

00:07:26.096 --> 00:07:27.176 A:middle
to show your view controller.

00:07:28.316 --> 00:07:30.906 A:middle
Then you'll get its
popoverPresentationController.

00:07:31.696 --> 00:07:33.096 A:middle
When presenting a
view controller,

00:07:33.306 --> 00:07:35.466 A:middle
you do not create a
Presentation Controller.

00:07:35.796 --> 00:07:37.076 A:middle
Instead, you ask for one.

00:07:38.106 --> 00:07:40.976 A:middle
Then you set up any source
information, like barButtomItems

00:07:41.226 --> 00:07:42.406 A:middle
or permittedArrowDirections.

00:07:43.106 --> 00:07:44.996 A:middle
And because it's a view
controller presentation,

00:07:45.176 --> 00:07:47.106 A:middle
you just call
presentViewController.

00:07:47.966 --> 00:07:50.316 A:middle
Now, notice how there's no
idiom check on the screen.

00:07:51.126 --> 00:07:52.786 A:middle
That's because, when we're
running an environment

00:07:52.786 --> 00:07:55.316 A:middle
that does not support
popovers, like on the iPhone,

00:07:55.916 --> 00:07:59.096 A:middle
UIPopoverPresentationController
provides the opportunity

00:07:59.196 --> 00:08:00.936 A:middle
for your presentation to adapt.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.196 --> 00:08:00.936 A:middle
for your presentation to adapt.

00:08:01.366 --> 00:08:03.346 A:middle
Jim, can we take a look
at adaptive popovers?

00:08:03.556 --> 00:08:03.806 A:middle
&gt;&gt; Sure.

00:08:05.646 --> 00:08:06.056 A:middle
All right.

00:08:06.266 --> 00:08:08.916 A:middle
So I have a fairly simple
and basic application here.

00:08:09.336 --> 00:08:11.046 A:middle
It is a -- just a
view controller

00:08:11.046 --> 00:08:15.526 A:middle
that shows important people and
-- the super important people --

00:08:15.526 --> 00:08:17.486 A:middle
and you click on this little
button here, you get a popover.

00:08:18.096 --> 00:08:20.836 A:middle
And it's a popover of
super important people.

00:08:21.446 --> 00:08:23.996 A:middle
And so what we want to do
is show that this popover,

00:08:23.996 --> 00:08:27.206 A:middle
when it goes on -- in a
compact-width environment,

00:08:27.206 --> 00:08:29.986 A:middle
like on the iPhone, even though
you present as a popover,

00:08:30.036 --> 00:08:33.086 A:middle
you will get an adaptation to
an over-fullscreen presentation.

00:08:33.535 --> 00:08:36.326 A:middle
So we'll change the
width to 320,

00:08:36.326 --> 00:08:39.476 A:middle
and we'll change the size class
to compact, and we'll apply it.

00:08:40.196 --> 00:08:42.666 A:middle
And then, now you see
that we actually have --

00:08:43.275 --> 00:08:46.026 A:middle
the same table view has been
re-presented, but now it's

00:08:46.026 --> 00:08:49.156 A:middle
in a view controller that is
a full-screen presentation.

00:08:49.876 --> 00:08:51.856 A:middle
And we can actually
even dismiss this,

00:08:52.286 --> 00:08:54.996 A:middle
and we can re-present it again.

00:08:54.996 --> 00:08:56.116 A:middle
And even though we're
re-presenting

00:08:56.116 --> 00:08:59.686 A:middle
as an over-fullscreen
presentation, we are --

00:08:59.806 --> 00:09:00.906 A:middle
the code has never changed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.806 --> 00:09:00.906 A:middle
the code has never changed.

00:09:00.996 --> 00:09:03.096 A:middle
We still actually are
presenting a popover here.

00:09:03.456 --> 00:09:07.246 A:middle
And to show that that's
actually still working,

00:09:07.246 --> 00:09:11.416 A:middle
we'll go back to
our regular width.

00:09:11.976 --> 00:09:14.766 A:middle
And then the popover
shows back up again.

00:09:15.416 --> 00:09:20.806 A:middle
So to do adaptivity with
popovers is fairly simple.

00:09:23.516 --> 00:09:27.576 A:middle
Going back to Peter's code
that we left off with is

00:09:27.576 --> 00:09:29.796 A:middle
that this code doesn't
actually change.

00:09:29.796 --> 00:09:31.166 A:middle
All through that,
this was the code

00:09:31.166 --> 00:09:32.346 A:middle
that presented that popover.

00:09:32.826 --> 00:09:35.736 A:middle
But to influence how the
popover actually works,

00:09:35.736 --> 00:09:38.576 A:middle
we need to set a delegate on the
popover Presentation Controller.

00:09:39.056 --> 00:09:40.966 A:middle
And we need to implement
just two methods.

00:09:41.796 --> 00:09:44.346 A:middle
The first is
adaptivePresentationStyle

00:09:44.346 --> 00:09:45.646 A:middle
ForPresentationController.

00:09:46.386 --> 00:09:47.866 A:middle
And from this method,
you can return one

00:09:47.866 --> 00:09:51.286 A:middle
of three different methods --
FullScreen, OverFullScreen,

00:09:51.346 --> 00:09:54.396 A:middle
or none -- the latter meaning
that you don't want any kind

00:09:54.396 --> 00:09:55.746 A:middle
of adaptivity, but for here,

00:09:56.066 --> 00:09:57.826 A:middle
we want to do a FullScreen
adaptation.

00:09:59.306 --> 00:10:00.476 A:middle
The second method that we want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.306 --> 00:10:00.476 A:middle
The second method that we want

00:10:00.476 --> 00:10:02.826 A:middle
to implement is
presentationController

00:10:03.146 --> 00:10:05.426 A:middle
viewControllerFor
AdaptivePresentationStyle.

00:10:06.986 --> 00:10:08.666 A:middle
You don't have to
implement this method.

00:10:08.666 --> 00:10:10.536 A:middle
And if we hadn't
implemented this method,

00:10:10.636 --> 00:10:13.346 A:middle
the table view controller
would have been re-presented

00:10:13.346 --> 00:10:14.756 A:middle
as a full-screen presentation.

00:10:15.416 --> 00:10:17.456 A:middle
But the table view by
itself doesn't allow you

00:10:17.456 --> 00:10:20.776 A:middle
to dismiss anything or show the
name that we were selecting.

00:10:21.396 --> 00:10:23.626 A:middle
So what we want to do is
wrap that view controller

00:10:23.626 --> 00:10:26.306 A:middle
in something that
allows our presentation

00:10:26.306 --> 00:10:28.776 A:middle
to actually continue to look
like how we wanted it to look.

00:10:29.446 --> 00:10:31.426 A:middle
And so we wrapped that in
a NavigationController,

00:10:31.736 --> 00:10:33.406 A:middle
and we just set it as
root view controller,

00:10:33.576 --> 00:10:34.976 A:middle
the presentedViewController,

00:10:35.036 --> 00:10:36.456 A:middle
which was our table
view controller.

00:10:36.866 --> 00:10:37.716 A:middle
And that's it.

00:10:37.776 --> 00:10:41.046 A:middle
And that is how you get from
a popover in regular width

00:10:41.126 --> 00:10:43.786 A:middle
to an over-fullscreen or
full-screen presentation,

00:10:43.866 --> 00:10:45.296 A:middle
when you're in a
compact-width environment.

00:10:46.476 --> 00:10:48.086 A:middle
&gt;&gt; So now that we've looked

00:10:48.086 --> 00:10:50.816 A:middle
at how UIKit used
Presentation Controllers

00:10:51.156 --> 00:10:53.336 A:middle
to improve the API
surrounding popovers,

00:10:53.856 --> 00:10:55.966 A:middle
let's talk about something
near and dear to my heart:

00:10:56.406 --> 00:10:57.486 A:middle
alerts and action sheets.

00:10:58.666 --> 00:11:02.016 A:middle
Prior to iOS 8, alerts and
action sheets were exposed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.666 --> 00:11:02.016 A:middle
Prior to iOS 8, alerts and
action sheets were exposed

00:11:02.016 --> 00:11:05.816 A:middle
to your application through
plain UI view subclasses:

00:11:06.246 --> 00:11:08.426 A:middle
UIAlertView and UIActionSheet.

00:11:09.416 --> 00:11:11.526 A:middle
But because they were
UI view subclasses,

00:11:12.116 --> 00:11:13.946 A:middle
they had to re-implement
some of the logic

00:11:13.946 --> 00:11:15.706 A:middle
that we already had
on view controller.

00:11:16.176 --> 00:11:19.016 A:middle
For example, to appear
in your application,

00:11:19.246 --> 00:11:23.526 A:middle
they created a new window,
strategically positioned

00:11:23.526 --> 00:11:24.976 A:middle
above your application's content

00:11:24.976 --> 00:11:26.906 A:middle
so that they'd show
up above everything.

00:11:27.936 --> 00:11:30.766 A:middle
Additionally, they'd pre-date
modern language features,

00:11:30.916 --> 00:11:34.696 A:middle
so they had to rely on delegate
API for button callbacks.

00:11:34.846 --> 00:11:38.096 A:middle
Let's look at how an action
sheet presentation worked prior

00:11:38.096 --> 00:11:38.756 A:middle
to iOS 8.

00:11:39.536 --> 00:11:41.756 A:middle
So, I'm in an iOS 7
app, in landscape.

00:11:42.336 --> 00:11:43.676 A:middle
And I go to show
an action sheet.

00:11:44.606 --> 00:11:46.876 A:middle
Behind the scenes, the
framework creates a window

00:11:46.876 --> 00:11:50.626 A:middle
on your app's behalf, but this
predates iOS 8 window rotation

00:11:50.626 --> 00:11:53.596 A:middle
behavior, so this window is
technically still in portrait.

00:11:54.626 --> 00:11:56.566 A:middle
We then add the action
sheet to that window

00:11:56.566 --> 00:12:00.186 A:middle
and mimic the transform
hierarchy of the presenting view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:56.566 --> 00:12:00.186 A:middle
and mimic the transform
hierarchy of the presenting view

00:12:00.186 --> 00:12:01.616 A:middle
to get into the right
orientation.

00:12:02.816 --> 00:12:05.806 A:middle
When looking at the requirements
applications would have to meet

00:12:06.316 --> 00:12:10.496 A:middle
when implementing adaptivity and
the customization power offered

00:12:10.496 --> 00:12:12.486 A:middle
to us by
UIPresentationController,

00:12:13.076 --> 00:12:16.336 A:middle
it was a natural choice to
rebase modern alerts API.

00:12:17.546 --> 00:12:21.136 A:middle
In iOS 8, we're introducing a
new View Controller subclass

00:12:21.136 --> 00:12:24.086 A:middle
to replace Alert View and
Action Sheet UIAlertController.

00:12:25.006 --> 00:12:27.436 A:middle
It's used for both
Alerts and Action Sheets,

00:12:27.566 --> 00:12:29.676 A:middle
and you can switch
via a preferred style.

00:12:30.576 --> 00:12:32.646 A:middle
Additionally, because
it's got a modern runtime,

00:12:33.066 --> 00:12:34.146 A:middle
it's block-based.

00:12:34.426 --> 00:12:35.456 A:middle
So it works perfect.

00:12:36.516 --> 00:12:39.116 A:middle
[ Applause ]

00:12:39.616 --> 00:12:42.916 A:middle
It works perfect with blocks in
Objective-C and closures in SWF.

00:12:44.236 --> 00:12:46.366 A:middle
Additionally, because
it's a view controller,

00:12:46.706 --> 00:12:48.636 A:middle
it presents in your window,

00:12:49.026 --> 00:12:50.946 A:middle
which means that
there's no more ambiguity

00:12:51.016 --> 00:12:53.736 A:middle
about what framework-provided
presentations are going

00:12:53.736 --> 00:12:54.676 A:middle
on in your application.

00:12:55.976 --> 00:12:59.456 A:middle
And using the adaptive API
that Jim showed you earlier,

00:12:59.836 --> 00:13:02.446 A:middle
action sheets will
seamlessly adapt to popovers,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.836 --> 00:13:02.446 A:middle
action sheets will
seamlessly adapt to popovers,

00:13:02.616 --> 00:13:04.456 A:middle
using
popoverPresentationController.

00:13:05.206 --> 00:13:06.926 A:middle
Let's go through
how you can create

00:13:07.186 --> 00:13:09.946 A:middle
and show an alert controller
in your application.

00:13:12.546 --> 00:13:15.066 A:middle
First, you'll ask for
one via the class method.

00:13:16.266 --> 00:13:19.216 A:middle
Then you'll add actions to
it with a block handler,

00:13:19.286 --> 00:13:21.096 A:middle
to handle when that
action is tapped.

00:13:21.636 --> 00:13:24.066 A:middle
And then, because it's a
view controller presentation,

00:13:24.356 --> 00:13:26.596 A:middle
you'll just call
presentViewController.

00:13:28.126 --> 00:13:30.976 A:middle
Now, that we've seen how UIKit
used Presentation Controller

00:13:31.236 --> 00:13:33.596 A:middle
to improve alerts
and action sheets,

00:13:34.066 --> 00:13:35.976 A:middle
let's see how we did the
same thing for search.

00:13:39.016 --> 00:13:39.626 A:middle
&gt;&gt; Search on iOS 8 consists
primarily of two parts:

00:13:39.626 --> 00:13:44.286 A:middle
UI search bar and
UISearchDisplayController.

00:13:45.256 --> 00:13:49.926 A:middle
Both have been around in the SDK
since some of the earliest days.

00:13:50.496 --> 00:13:53.976 A:middle
And their creation was formed at
a time that was far more simple.

00:13:54.756 --> 00:13:56.626 A:middle
View controllers were
more of a suggestion

00:13:56.626 --> 00:13:58.296 A:middle
than the requirement
that they are now.

00:13:58.926 --> 00:14:00.646 A:middle
There was far less
translucency --


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.926 --> 00:14:00.646 A:middle
There was far less
translucency --

00:14:00.646 --> 00:14:02.386 A:middle
things didn't flow
underneath other things,

00:14:02.386 --> 00:14:04.626 A:middle
and there certainly wasn't
things like blur to deal with.

00:14:05.356 --> 00:14:08.076 A:middle
And so when you presented
search, it was very easy

00:14:08.186 --> 00:14:10.806 A:middle
for the framework to reason
about how search was going

00:14:10.806 --> 00:14:12.506 A:middle
to be displayed in
your application.

00:14:12.986 --> 00:14:15.636 A:middle
But when we were looking
at SearchDisplayController

00:14:15.636 --> 00:14:17.876 A:middle
and how it would react to
an adaptive environment,

00:14:18.346 --> 00:14:20.956 A:middle
we realize it had some
deficiencies that were going

00:14:20.956 --> 00:14:22.256 A:middle
to be very difficult
to overcome.

00:14:22.816 --> 00:14:26.836 A:middle
The first is that it provides
very limited configurability

00:14:27.006 --> 00:14:27.626 A:middle
for you guys.

00:14:28.026 --> 00:14:31.166 A:middle
It's great that you can
show your search results

00:14:31.166 --> 00:14:33.756 A:middle
in a table view, but a lot
of other things have happened

00:14:33.756 --> 00:14:36.516 A:middle
since iOS 3, that you can
show search results in --

00:14:36.516 --> 00:14:38.386 A:middle
things like collection
views and map views.

00:14:38.866 --> 00:14:41.066 A:middle
And SearchDisplayController
just simply can't handle this.

00:14:42.996 --> 00:14:45.676 A:middle
Second, SearchDisplayController
is not a view controller,

00:14:45.676 --> 00:14:48.416 A:middle
although it tries to act
like one really hard.

00:14:48.776 --> 00:14:51.266 A:middle
And as the view controller
system became more intelligent

00:14:51.266 --> 00:14:53.346 A:middle
and more robust,
as the SDK matured,

00:14:53.756 --> 00:14:56.716 A:middle
the SearchDisplayController
had a harder time trying

00:14:56.716 --> 00:14:59.136 A:middle
to understand your
intent when displaying.

00:14:59.706 --> 00:15:01.686 A:middle
And this left it to
have to actually guess,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.706 --> 00:15:01.686 A:middle
And this left it to
have to actually guess,

00:15:01.686 --> 00:15:05.226 A:middle
in some situations, and it
didn't always get it right.

00:15:05.406 --> 00:15:07.606 A:middle
And finally -- because again,
it's not a view controller --

00:15:07.676 --> 00:15:09.756 A:middle
its presentation was
done via addSubview.

00:15:10.676 --> 00:15:12.596 A:middle
And to show you how
horrible this actually was --

00:15:12.896 --> 00:15:15.376 A:middle
if, in your application
this was your search bar,

00:15:15.376 --> 00:15:17.466 A:middle
with your content being on
the blue, and you tapped

00:15:17.526 --> 00:15:18.206 A:middle
that search bar,

00:15:19.296 --> 00:15:21.386 A:middle
SearchDisplayController
behind the scenes goes

00:15:21.386 --> 00:15:24.996 A:middle
and creates a content view,
adds a dimming view to it,

00:15:25.516 --> 00:15:28.966 A:middle
adds the table view to
that and then adds subview

00:15:28.966 --> 00:15:32.356 A:middle
to the SearchDisplayController's
container -- or content view --

00:15:32.356 --> 00:15:33.786 A:middle
or content controller's view.

00:15:34.866 --> 00:15:37.256 A:middle
At this point in time,
your application has a view

00:15:37.256 --> 00:15:39.056 A:middle
that it didn't expect
in its hierarchy,

00:15:39.356 --> 00:15:41.436 A:middle
and the framework is
trying to manage the fact

00:15:41.436 --> 00:15:43.676 A:middle
that that view was
probably a scroll view,

00:15:43.676 --> 00:15:46.386 A:middle
and things could move around
when we don't want it to.

00:15:47.516 --> 00:15:50.436 A:middle
So it's clear that, in
adaptivity, this wasn't going

00:15:50.436 --> 00:15:51.646 A:middle
to really function
all that well.

00:15:52.456 --> 00:15:53.896 A:middle
But, while also looking at this,

00:15:54.336 --> 00:15:56.786 A:middle
SearchDisplayController's really
just doing a presentation.

00:15:56.916 --> 00:15:58.656 A:middle
I mean, it already
had its own container.

00:15:58.966 --> 00:16:01.586 A:middle
So it kind of made sense
to rebase this all on top


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.966 --> 00:16:01.586 A:middle
So it kind of made sense
to rebase this all on top

00:16:01.586 --> 00:16:03.276 A:middle
of UIPresentationController.

00:16:03.276 --> 00:16:04.086 A:middle
And that's what we've done.

00:16:04.706 --> 00:16:07.966 A:middle
So in iOS 8, we're
introducing UISearchController,

00:16:07.966 --> 00:16:10.106 A:middle
which is a view controller-based
replacement

00:16:10.106 --> 00:16:12.676 A:middle
for the now deprecated
UISearchDisplayController.

00:16:12.716 --> 00:16:17.196 A:middle
And it has a number of
features, the first of which is

00:16:17.196 --> 00:16:19.576 A:middle
that it can present on any view
controller in your hierarchy,

00:16:19.806 --> 00:16:21.326 A:middle
not just ones that
are full-screen.

00:16:21.836 --> 00:16:26.206 A:middle
Second is that the
SearchController no longer tries

00:16:26.206 --> 00:16:29.826 A:middle
to get in between presenting the
thing that's showing the results

00:16:29.826 --> 00:16:32.086 A:middle
and the thing that's driving
the filtering of the results.

00:16:32.996 --> 00:16:35.886 A:middle
This means that any object in
your application that's capable

00:16:35.886 --> 00:16:39.566 A:middle
of filtering search results can
directly drive the UI that's

00:16:39.566 --> 00:16:42.536 A:middle
actually showing up on-screen.

00:16:43.456 --> 00:16:45.296 A:middle
You can influence the
search bar animation

00:16:45.296 --> 00:16:47.126 A:middle
through a custom
animator object.

00:16:48.296 --> 00:16:49.256 A:middle
And because, of course,

00:16:49.256 --> 00:16:50.756 A:middle
it's built on Presentation
Controller,

00:16:51.076 --> 00:16:53.596 A:middle
SearchController has the
capacity to become adaptive.

00:16:53.696 --> 00:16:56.826 A:middle
And what this means to
you guys, in the end,

00:16:56.826 --> 00:16:59.066 A:middle
is its far more control
in how search is display

00:16:59.066 --> 00:17:01.896 A:middle
in your applications and
far fewer assumptions made


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.066 --> 00:17:01.896 A:middle
in your applications and
far fewer assumptions made

00:17:01.896 --> 00:17:03.326 A:middle
by the framework
when you're doing so.

00:17:04.165 --> 00:17:07.955 A:middle
So taking a look at how we
used to do this before iOS 8,

00:17:08.616 --> 00:17:10.945 A:middle
we would create a search bar,
and we'd give that search bar

00:17:10.945 --> 00:17:13.496 A:middle
to SearchDisplayController,
but then we'd have

00:17:13.496 --> 00:17:15.425 A:middle
to tell the SearchController
who the data source

00:17:15.425 --> 00:17:17.415 A:middle
and the delegate were
for the table view

00:17:17.415 --> 00:17:18.546 A:middle
that was going to
show the results.

00:17:19.236 --> 00:17:21.656 A:middle
And then finally, we
would make the search bar,

00:17:22.026 --> 00:17:26.955 A:middle
the table header view of a table
view that was already on-screen.

00:17:27.136 --> 00:17:29.396 A:middle
Now under iOS 8, with
SearchController,

00:17:30.076 --> 00:17:30.996 A:middle
the first thing you'll want

00:17:30.996 --> 00:17:32.776 A:middle
to do is create a
results controller.

00:17:33.286 --> 00:17:35.336 A:middle
And as I mentioned, this could
be absolutely anything --

00:17:35.586 --> 00:17:38.176 A:middle
a collection view or
maybe a view that's custom

00:17:38.176 --> 00:17:39.356 A:middle
to just your application.

00:17:39.916 --> 00:17:42.626 A:middle
You give this results controller

00:17:42.826 --> 00:17:44.046 A:middle
to the Search Results
Controller,

00:17:44.756 --> 00:17:46.436 A:middle
and then you tell the
SearchController who's going

00:17:46.436 --> 00:17:48.856 A:middle
to be responsible for
updating the results.

00:17:49.726 --> 00:17:51.666 A:middle
In a lot of cases, this
will actually just be the

00:17:51.666 --> 00:17:52.566 A:middle
results controller.

00:17:52.746 --> 00:17:55.386 A:middle
But it could be literally any
object in your application.

00:17:55.856 --> 00:17:59.366 A:middle
Next, this is the
one common code lying

00:17:59.366 --> 00:18:00.486 A:middle
between the old world, is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.366 --> 00:18:00.486 A:middle
between the old world, is

00:18:00.486 --> 00:18:02.396 A:middle
that when you take the
SearchController search bar,

00:18:02.996 --> 00:18:05.646 A:middle
and we add it to the table -- or
set it as the table header view

00:18:05.826 --> 00:18:07.506 A:middle
of an existing table
view that's on-screen.

00:18:07.856 --> 00:18:11.856 A:middle
Now if you notice, we don't
actually present this view

00:18:11.856 --> 00:18:13.116 A:middle
controller at any point in time.

00:18:13.116 --> 00:18:16.356 A:middle
And that's because search
is usually event-driven.

00:18:16.876 --> 00:18:19.196 A:middle
The user is tapping on the
search bar, or they're tapping

00:18:19.196 --> 00:18:21.726 A:middle
on a search glyph
in your interface.

00:18:22.496 --> 00:18:25.156 A:middle
And so in those cases,
SearchController is going

00:18:25.156 --> 00:18:27.506 A:middle
to perform an automatic
presentation for you,

00:18:27.506 --> 00:18:31.046 A:middle
based off of where the search
bar is located at on-screen.

00:18:32.156 --> 00:18:33.676 A:middle
Of course, there's a delegate
method that allows you

00:18:33.676 --> 00:18:34.816 A:middle
to drive this, if you'd like.

00:18:34.816 --> 00:18:35.626 A:middle
But for the most part,

00:18:35.936 --> 00:18:38.596 A:middle
the default animations
are usually pretty close

00:18:38.596 --> 00:18:41.936 A:middle
to what you guys
are going to expect.

00:18:41.936 --> 00:18:44.876 A:middle
Finally is one piece of API
that's been on UIViewController

00:18:44.876 --> 00:18:47.456 A:middle
for some time, and its
definesPresentationContext.

00:18:48.356 --> 00:18:51.116 A:middle
When using UISearchController,
you're probably going to need

00:18:51.116 --> 00:18:53.196 A:middle
to define this on
the view controller

00:18:53.516 --> 00:18:55.346 A:middle
in which you want
search to be presented.

00:18:56.676 --> 00:18:58.806 A:middle
Because SearchController
is trying really hard

00:18:58.806 --> 00:19:02.346 A:middle
to play nicely with your
layout, it needs to know exactly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.806 --> 00:19:02.346 A:middle
to play nicely with your
layout, it needs to know exactly

00:19:02.346 --> 00:19:04.076 A:middle
where it is going
to be displayed at.

00:19:04.076 --> 00:19:07.156 A:middle
And definesPresentationContext
allows it to know

00:19:07.356 --> 00:19:08.296 A:middle
where you want it to go.

00:19:09.516 --> 00:19:12.136 A:middle
I'll show you in a real quick
example of what I mean here.

00:19:12.706 --> 00:19:17.316 A:middle
Take this example as a fairly
common case application.

00:19:17.716 --> 00:19:20.826 A:middle
As the application's root
View Controller is a tab bar

00:19:20.826 --> 00:19:24.356 A:middle
controller, and as that tab
bar's controller is selected

00:19:24.356 --> 00:19:26.736 A:middle
to tab, it is displaying
a navigation controller.

00:19:26.876 --> 00:19:29.966 A:middle
And the navigation controller's
root view controller is our

00:19:29.966 --> 00:19:30.896 A:middle
table view controller.

00:19:31.856 --> 00:19:33.576 A:middle
And as we've seen before
in the previous examples,

00:19:33.576 --> 00:19:36.736 A:middle
this search bar is that table
view controller's table view's

00:19:36.736 --> 00:19:37.566 A:middle
table header view.

00:19:40.256 --> 00:19:42.236 A:middle
And so, you probably want
it to have the same behavior

00:19:42.236 --> 00:19:44.456 A:middle
that you've seen before
iOS 8, is that when you tap

00:19:44.456 --> 00:19:47.056 A:middle
on the search bar, the
navigation bar disappears

00:19:47.056 --> 00:19:48.416 A:middle
and the search bar
takes its place.

00:19:48.936 --> 00:19:51.116 A:middle
And the search results take
the place of the table view.

00:19:52.636 --> 00:19:54.396 A:middle
In this example, the table
view controller needs

00:19:54.396 --> 00:19:56.126 A:middle
to define the presentation
context

00:19:56.126 --> 00:19:57.106 A:middle
for the SearchController.

00:19:58.016 --> 00:19:59.396 A:middle
If you were to omit this,

00:19:59.806 --> 00:20:02.816 A:middle
View Controller Presentation
behavior says that we will walk


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.806 --> 00:20:02.816 A:middle
View Controller Presentation
behavior says that we will walk

00:20:02.816 --> 00:20:04.416 A:middle
up the chain until
we find somebody else

00:20:04.416 --> 00:20:06.086 A:middle
who defines a Presentation
Context,

00:20:06.086 --> 00:20:07.896 A:middle
or we use the root
view controller.

00:20:07.896 --> 00:20:10.286 A:middle
And in this case, that would
be the tab bar controller.

00:20:10.756 --> 00:20:13.606 A:middle
And so this may actually be what
you want, but it's something

00:20:13.606 --> 00:20:14.766 A:middle
that you need to be aware

00:20:14.766 --> 00:20:16.456 A:middle
of when using the
new SearchController,

00:20:16.456 --> 00:20:18.786 A:middle
is that you need to tell
us where you want it at,

00:20:18.786 --> 00:20:19.946 A:middle
or we're just going
to go present it

00:20:19.946 --> 00:20:21.256 A:middle
on the root view controller.

00:20:21.866 --> 00:20:25.406 A:middle
So now that we've shown you
how UIKit is leveraged --

00:20:25.486 --> 00:20:28.626 A:middle
UIPresentationController -- what
are the benefits to you guys

00:20:28.626 --> 00:20:29.886 A:middle
for us having done this work?

00:20:31.856 --> 00:20:32.836 A:middle
Well, first off,

00:20:32.946 --> 00:20:35.086 A:middle
it's controllers now,
all over the place.

00:20:35.086 --> 00:20:36.626 A:middle
Everything's a controller
no matter where you look.

00:20:36.896 --> 00:20:38.206 A:middle
And this is good for you guys.

00:20:38.586 --> 00:20:41.466 A:middle
We are no longer trying to shove
their views into your hierarchy,

00:20:41.716 --> 00:20:42.546 A:middle
or we're no longer trying

00:20:42.546 --> 00:20:44.236 A:middle
to transform windows
above everything.

00:20:44.596 --> 00:20:45.776 A:middle
It's controllers.

00:20:45.776 --> 00:20:46.906 A:middle
It's a view controller system,

00:20:46.906 --> 00:20:49.406 A:middle
and it allows you very
unprecedented control

00:20:49.406 --> 00:20:50.936 A:middle
in how these control --

00:20:50.936 --> 00:20:52.916 A:middle
how these view controllers are
displayed in your application.

00:20:54.096 --> 00:20:56.776 A:middle
&gt;&gt; Additionally, because
UIPresentationController

00:20:56.976 --> 00:20:59.996 A:middle
provides an excellent
abstraction between the content


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.156 --> 00:21:02.776 A:middle
of your presentation and
the chrome around it,

00:21:03.756 --> 00:21:06.616 A:middle
UIPresentationController
provides a natural home

00:21:06.616 --> 00:21:07.506 A:middle
for these things to live.

00:21:08.056 --> 00:21:11.186 A:middle
No longer do system-provided
view controllers contain their

00:21:11.186 --> 00:21:12.486 A:middle
chrome in the view controller.

00:21:16.426 --> 00:21:18.566 A:middle
&gt;&gt; And finally, adaptivity.

00:21:19.086 --> 00:21:20.836 A:middle
We keep saying this over and
over again, but we needed

00:21:20.836 --> 00:21:24.186 A:middle
to make our own controllers
adaptive for your guys --

00:21:24.186 --> 00:21:25.316 A:middle
for your guys' applications.

00:21:25.926 --> 00:21:30.096 A:middle
So now alerts and search can
adapt with your applications

00:21:30.096 --> 00:21:32.356 A:middle
and all the other
adaptations that you want to do

00:21:32.676 --> 00:21:35.766 A:middle
to make your applications work
in this new size class world

00:21:35.766 --> 00:21:36.596 A:middle
that we're going into.

00:21:37.556 --> 00:21:41.316 A:middle
So now that we've gone through
how UIKit has used these things

00:21:41.316 --> 00:21:43.236 A:middle
-- or used Presentation
Controller, let's show a demo

00:21:43.236 --> 00:21:45.956 A:middle
that kind of pulls all
these concepts together,

00:21:46.046 --> 00:21:48.906 A:middle
uses a custom Presentation
Controller and a custom animator

00:21:48.906 --> 00:21:50.456 A:middle
to make a really cool interface.

00:21:50.836 --> 00:21:51.046 A:middle
Peter?

00:21:51.366 --> 00:21:52.666 A:middle
&gt;&gt; Let's do it.

00:21:53.556 --> 00:21:56.736 A:middle
I've been working on this
awesome new photo management

00:21:56.736 --> 00:21:57.816 A:middle
and editing application.

00:21:59.216 --> 00:22:00.766 A:middle
Here we have a collection view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.216 --> 00:22:00.766 A:middle
Here we have a collection view.

00:22:00.936 --> 00:22:03.086 A:middle
And when I tap a photo,

00:22:03.086 --> 00:22:05.206 A:middle
we're going to do a View
Controller Presentation,

00:22:05.706 --> 00:22:06.506 A:middle
but it looks different

00:22:06.506 --> 00:22:08.326 A:middle
than a default view
controller presentation.

00:22:09.146 --> 00:22:11.736 A:middle
You'll notice that the
presented view controller slides

00:22:11.736 --> 00:22:14.836 A:middle
in from the right, while we
dim the rest of the screen.

00:22:15.826 --> 00:22:17.036 A:middle
And when we tap the dimming view

00:22:17.096 --> 00:22:18.856 A:middle
or hit the Save button,
we'll dismiss.

00:22:18.856 --> 00:22:21.086 A:middle
I'm going to edit
this photograph.

00:22:22.596 --> 00:22:23.046 A:middle
Looks great.

00:22:24.116 --> 00:22:27.446 A:middle
So I'll hit Save, and we
dismiss that view controller.

00:22:29.056 --> 00:22:32.746 A:middle
We should go through how this
presentation uses a custom

00:22:32.866 --> 00:22:35.426 A:middle
Presentation Controller
and animator object

00:22:35.876 --> 00:22:37.636 A:middle
to control placement
and animations.

00:22:38.306 --> 00:22:41.056 A:middle
Let's go through how you can
build a custom presentation

00:22:41.056 --> 00:22:42.646 A:middle
like this in your application.

00:22:43.646 --> 00:22:46.976 A:middle
We're going to start in the
root view controller of our app.

00:22:53.236 --> 00:22:55.626 A:middle
You'll notice this
P in the corner.

00:22:56.436 --> 00:22:59.056 A:middle
We've added colors
and text as a legend,

00:22:59.056 --> 00:23:02.216 A:middle
so that you know what controller
or object we're talking about.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.056 --> 00:23:02.216 A:middle
so that you know what controller
or object we're talking about.

00:23:03.336 --> 00:23:04.456 A:middle
In the root view controller,

00:23:04.736 --> 00:23:07.856 A:middle
we're going to create a new
overlay view controller.

00:23:08.396 --> 00:23:10.796 A:middle
This is what you saw,
presented as a side bar

00:23:10.796 --> 00:23:12.386 A:middle
in the demo we just saw.

00:23:13.766 --> 00:23:15.666 A:middle
Then, because it's
a view controller,

00:23:16.106 --> 00:23:18.496 A:middle
we'll just call
presentViewController.

00:23:19.746 --> 00:23:21.426 A:middle
Now if we had stopped here

00:23:21.676 --> 00:23:24.706 A:middle
and not implemented anything
custom, what would we get?

00:23:24.706 --> 00:23:28.796 A:middle
Well, we'd have our
root view controller,

00:23:28.796 --> 00:23:32.276 A:middle
and we go to present, and
we get the UIKit default:

00:23:32.276 --> 00:23:34.846 A:middle
a slide-up from the bottom,
full-screen presentation.

00:23:35.926 --> 00:23:39.136 A:middle
That looks cool, but what
we really want is a custom

00:23:39.136 --> 00:23:41.396 A:middle
presentation, so that when
we present the side bar,

00:23:41.806 --> 00:23:43.116 A:middle
it slides in from the right,

00:23:43.116 --> 00:23:46.206 A:middle
while we dim the presenting
view controller's content.

00:23:47.216 --> 00:23:49.696 A:middle
Let's talk about the objects
that are going to be responsible

00:23:49.696 --> 00:23:51.206 A:middle
for this custom presentation.

00:23:52.466 --> 00:23:54.836 A:middle
We already know that we
have a root view controller

00:23:55.736 --> 00:23:57.886 A:middle
and our presented
overlay view controller.

00:23:58.946 --> 00:24:01.536 A:middle
In iOS 7, we introduced
the concept


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.946 --> 00:24:01.536 A:middle
In iOS 7, we introduced
the concept

00:24:01.676 --> 00:24:03.026 A:middle
of a transitioning delegate.

00:24:03.976 --> 00:24:04.976 A:middle
In this presentation,

00:24:05.306 --> 00:24:07.256 A:middle
this transitioning
delegate will be responsible

00:24:07.256 --> 00:24:09.226 A:middle
for providing the
animator object,

00:24:09.756 --> 00:24:12.196 A:middle
which animates our
controller contents on-screen.

00:24:12.956 --> 00:24:15.716 A:middle
This is the same API that
we introduced in iOS 7.

00:24:16.996 --> 00:24:18.316 A:middle
But new in iOS 8,

00:24:18.546 --> 00:24:20.896 A:middle
this transition delegate
will also provide the

00:24:20.896 --> 00:24:22.056 A:middle
Presentation Controller.

00:24:23.136 --> 00:24:25.096 A:middle
This is the object that
will drive the management

00:24:25.096 --> 00:24:27.806 A:middle
of the content and chrome
in this presentation.

00:24:28.506 --> 00:24:31.416 A:middle
Let's start with getting that
dimming view on- and off-screen.

00:24:32.336 --> 00:24:35.306 A:middle
First, back in our
root view controller,

00:24:36.006 --> 00:24:38.706 A:middle
we'll create a new
transitioning delegate to use

00:24:38.706 --> 00:24:39.606 A:middle
for this presentation.

00:24:40.146 --> 00:24:43.136 A:middle
This is the object that
provides the animator object

00:24:43.136 --> 00:24:44.306 A:middle
and Presentation Controller.

00:24:44.996 --> 00:24:46.596 A:middle
And we'll set that
transitioning delegate

00:24:46.906 --> 00:24:49.146 A:middle
on our presented
overlay view controller.

00:24:50.326 --> 00:24:52.456 A:middle
Now, in our overlay
view controller,

00:24:53.236 --> 00:24:54.896 A:middle
we'll set our
ModalPresentationStyle

00:24:55.106 --> 00:24:56.256 A:middle
to Custom.

00:24:56.756 --> 00:25:00.106 A:middle
This indicates to UIKit
that we should consult your


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:56.756 --> 00:25:00.106 A:middle
This indicates to UIKit
that we should consult your

00:25:00.106 --> 00:25:02.946 A:middle
transitioning delegate for a
custom Presentation Controller

00:25:03.086 --> 00:25:04.576 A:middle
to use for the presentation.

00:25:05.166 --> 00:25:08.886 A:middle
Inside of our transitioning
delegate, we'll need to provide

00:25:08.886 --> 00:25:10.066 A:middle
that Presentation Controller

00:25:10.596 --> 00:25:12.936 A:middle
by implementing
PresentationController

00:25:12.936 --> 00:25:14.476 A:middle
for presentedViewController,

00:25:14.706 --> 00:25:17.066 A:middle
presentingViewController
source ViewController.

00:25:18.396 --> 00:25:20.866 A:middle
Here, we'll return to the
Presentation Controller

00:25:20.866 --> 00:25:23.056 A:middle
that will be responsible
for the lifetime

00:25:23.146 --> 00:25:24.586 A:middle
of this view controller's
transition.

00:25:25.536 --> 00:25:28.116 A:middle
Let's implement some methods
in the Presentation Controller

00:25:28.456 --> 00:25:29.476 A:middle
to manage this dimming view.

00:25:29.546 --> 00:25:31.736 A:middle
We're going to implement
two methods

00:25:32.146 --> 00:25:33.766 A:middle
to coordinate the dimming view.

00:25:34.486 --> 00:25:37.556 A:middle
The first is
presentationTransitionWillBegin.

00:25:38.636 --> 00:25:39.566 A:middle
This is called when we're

00:25:39.566 --> 00:25:41.346 A:middle
about to do the presentation
transition.

00:25:42.696 --> 00:25:44.216 A:middle
Here, we've already
set up a dimming view

00:25:44.346 --> 00:25:46.076 A:middle
in an int [phonetic],
and we'll just set

00:25:46.076 --> 00:25:48.896 A:middle
that dimming view's frame to
the container view's bounds.

00:25:49.486 --> 00:25:52.266 A:middle
This way, the dimming view
is always full-screen.

00:25:53.416 --> 00:25:56.036 A:middle
We'll also set the alpha
of the dimmingView to 0,

00:25:56.036 --> 00:25:57.926 A:middle
so that it appears
fully transparent

00:25:58.006 --> 00:25:59.506 A:middle
at the beginning
of the animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:00.626 --> 00:26:02.776 A:middle
We'll make sure we
insert the dimmingView

00:26:02.776 --> 00:26:05.036 A:middle
above all the other
content in the presentation.

00:26:05.866 --> 00:26:07.946 A:middle
And then, this is really cool.

00:26:09.066 --> 00:26:12.656 A:middle
UIPresentationController can
provide its own animations

00:26:12.866 --> 00:26:14.786 A:middle
for its chrome -- in this
case, the dimming view --

00:26:15.716 --> 00:26:19.166 A:middle
or it can animate alongside
the existing animations

00:26:19.366 --> 00:26:20.326 A:middle
in the animator object.

00:26:20.916 --> 00:26:22.276 A:middle
And that's exactly what we want.

00:26:23.216 --> 00:26:24.926 A:middle
We call the
presentedViewController's

00:26:25.226 --> 00:26:28.376 A:middle
transitionCoordinator
to animate alongside the

00:26:28.376 --> 00:26:29.196 A:middle
current transition.

00:26:30.686 --> 00:26:33.926 A:middle
Inside of this block, we'll set
the dimming view's alpha to 1.

00:26:35.096 --> 00:26:37.886 A:middle
This way, the animations
both begin at the same time

00:26:37.886 --> 00:26:40.726 A:middle
and finish at the same
time, and it looks great.

00:26:41.806 --> 00:26:43.736 A:middle
Now, let's implement
the second method

00:26:43.956 --> 00:26:46.566 A:middle
in our Presentation Controller
for managing the dimming view:

00:26:47.456 --> 00:26:49.396 A:middle
dismissalTransitionWillBegin.

00:26:50.086 --> 00:26:51.986 A:middle
Here, we're going
to undo what we did,

00:26:51.986 --> 00:26:54.196 A:middle
and presentation
transition will begin.

00:26:54.966 --> 00:26:58.096 A:middle
In this case, we'll use the
same transitionCoordinator API

00:26:58.806 --> 00:27:01.646 A:middle
to animate fading the
dimming view to a 0 alpha.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.806 --> 00:27:01.646 A:middle
to animate fading the
dimming view to a 0 alpha.

00:27:02.376 --> 00:27:03.266 A:middle
Let's see how this looks.

00:27:04.196 --> 00:27:05.076 A:middle
We go to present.

00:27:05.306 --> 00:27:07.626 A:middle
The dimming view fades
in, and it fades away.

00:27:08.426 --> 00:27:10.956 A:middle
Looks great, but we
should probably get our

00:27:10.956 --> 00:27:12.726 A:middle
presentedViewController
on-screen next.

00:27:13.856 --> 00:27:16.736 A:middle
First, we'll need to go back
to our transitioning delegate

00:27:17.066 --> 00:27:18.966 A:middle
and return a custom
animator object.

00:27:19.616 --> 00:27:22.666 A:middle
We'll do this by
implementing animationController

00:27:22.866 --> 00:27:24.016 A:middle
ForPresentedController,

00:27:24.256 --> 00:27:26.286 A:middle
presentingController,
sourceController.

00:27:27.236 --> 00:27:29.616 A:middle
This is the API that
you used in iOS 7.

00:27:30.376 --> 00:27:32.856 A:middle
Here, we'll return
our custom class,

00:27:33.636 --> 00:27:35.156 A:middle
which is in charge
of this animation.

00:27:36.136 --> 00:27:41.166 A:middle
We'll also implement the inverse
of this method -- dismissal --

00:27:41.166 --> 00:27:43.426 A:middle
or, I'm sorry
-animationController

00:27:43.526 --> 00:27:44.506 A:middle
ForDismissedController.

00:27:45.336 --> 00:27:47.746 A:middle
UIKit gives you the
power and flexibility

00:27:47.846 --> 00:27:50.986 A:middle
of using a different animator
object for the presentation

00:27:51.366 --> 00:27:54.416 A:middle
and dismissal, but here
we'll just use the same one.

00:27:55.896 --> 00:27:57.616 A:middle
Now, as you saw in the demo,

00:27:57.676 --> 00:28:01.416 A:middle
that overlay side bar was a
third the size of the display.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.676 --> 00:28:01.416 A:middle
that overlay side bar was a
third the size of the display.

00:28:02.546 --> 00:28:03.646 A:middle
To size it appropriately,

00:28:03.966 --> 00:28:05.646 A:middle
we'll need to implement
several methods

00:28:05.646 --> 00:28:06.886 A:middle
in our Presentation Controller.

00:28:07.806 --> 00:28:10.746 A:middle
The first is
sizeForChildContentContainer

00:28:11.186 --> 00:28:12.296 A:middle
withParentContainerSize.

00:28:13.116 --> 00:28:14.786 A:middle
And this method's really simple.

00:28:15.536 --> 00:28:18.056 A:middle
We'll just return a third
of our parent's width

00:28:18.056 --> 00:28:19.646 A:middle
and our full parent's height,

00:28:19.646 --> 00:28:21.796 A:middle
so that we're always a
third of the display.

00:28:23.456 --> 00:28:26.366 A:middle
Next, we'll implement
frameOfPresentedView

00:28:26.606 --> 00:28:27.376 A:middle
InContainerView.

00:28:28.706 --> 00:28:29.816 A:middle
This is where we return

00:28:30.016 --> 00:28:32.896 A:middle
to the view controller
transitioning system what frame

00:28:32.896 --> 00:28:35.016 A:middle
we'd like the presented
view to have.

00:28:35.496 --> 00:28:39.446 A:middle
We'll use the same size that we
returned fromSizeForChildContent

00:28:39.446 --> 00:28:43.496 A:middle
ContainerwithParentContainerSize
and set the origin

00:28:43.646 --> 00:28:45.356 A:middle
of the presented view's frame

00:28:45.906 --> 00:28:47.376 A:middle
to be right-aligned
in the container.

00:28:51.876 --> 00:28:54.936 A:middle
Let's see how that looks.

00:28:55.176 --> 00:28:56.976 A:middle
Perfect. The overlay is a third

00:28:56.976 --> 00:28:58.646 A:middle
of the display and
right-aligned.

00:28:58.646 --> 00:29:02.446 A:middle
But what we also want is when
we rotate into landscape,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.646 --> 00:29:02.446 A:middle
But what we also want is when
we rotate into landscape,

00:29:03.086 --> 00:29:04.956 A:middle
that side bar should
always appear

00:29:05.006 --> 00:29:05.896 A:middle
as a third of the display.

00:29:06.696 --> 00:29:07.486 A:middle
No problem.

00:29:07.686 --> 00:29:08.696 A:middle
Implementing rotation

00:29:08.836 --> 00:29:11.106 A:middle
in Presentation Controller
is really simple.

00:29:11.966 --> 00:29:13.996 A:middle
We just need to implement
one method:

00:29:14.686 --> 00:29:16.606 A:middle
containerViewWillLayoutSubviews.

00:29:17.856 --> 00:29:19.816 A:middle
First, we'll set the
dimming views frame

00:29:19.996 --> 00:29:22.186 A:middle
so that it's always the
full size of the container,

00:29:22.546 --> 00:29:24.236 A:middle
even when the container's
changing bounds.

00:29:25.876 --> 00:29:28.076 A:middle
Then we'll set the frame
of the presented view

00:29:28.156 --> 00:29:29.826 A:middle
to the same value we returned,

00:29:30.176 --> 00:29:32.886 A:middle
from frameOfPresented
ViewInContainerView.

00:29:33.426 --> 00:29:34.466 A:middle
And we're done.

00:29:34.466 --> 00:29:35.376 A:middle
We've handled rotation.

00:29:36.746 --> 00:29:39.126 A:middle
Now that we've seen how view
controller's sizing works

00:29:39.236 --> 00:29:41.696 A:middle
in Presentation Controllers,
it's important

00:29:41.696 --> 00:29:43.796 A:middle
to understand the
messaging that happens

00:29:44.116 --> 00:29:45.866 A:middle
between Presentation Controllers

00:29:45.866 --> 00:29:47.506 A:middle
and their managed
view controllers.

00:29:50.186 --> 00:29:53.586 A:middle
&gt;&gt; New in iOS 8 is a new
protocol, UIContentContainer,

00:29:53.746 --> 00:29:55.706 A:middle
and it's implemented by
both UIViewController

00:29:56.076 --> 00:29:57.476 A:middle
and UIPresentationController.

00:29:57.546 --> 00:29:59.416 A:middle
And it's a collection of methods

00:29:59.746 --> 00:30:01.786 A:middle
that describe how
the view controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.746 --> 00:30:01.786 A:middle
that describe how
the view controller

00:30:01.786 --> 00:30:04.136 A:middle
and Presentation Controllers
communicate changes

00:30:04.136 --> 00:30:05.496 A:middle
in the environment
to one another.

00:30:05.826 --> 00:30:09.006 A:middle
And it's important that we talk
about these methods in regards

00:30:09.006 --> 00:30:11.616 A:middle
to how they flow between
each of the objects --

00:30:11.616 --> 00:30:12.626 A:middle
or between the controllers,

00:30:13.116 --> 00:30:15.676 A:middle
because the forwarding is
done automatically for you,

00:30:15.676 --> 00:30:17.406 A:middle
unless you interfere with it.

00:30:17.776 --> 00:30:19.426 A:middle
And I'll show you why
you'd want to do that.

00:30:19.426 --> 00:30:23.146 A:middle
There's a couple of different
ideas here, so we'll start off

00:30:23.216 --> 00:30:25.496 A:middle
with transitioning
to a specific size.

00:30:26.286 --> 00:30:27.736 A:middle
There's two methods
specifically here:

00:30:28.196 --> 00:30:32.036 A:middle
viewWillTransitionToSize
withTransitionCoordinator and,

00:30:32.036 --> 00:30:32.986 A:middle
as Peter just showed you,

00:30:32.986 --> 00:30:36.186 A:middle
sizeForChildContent Container
withParentContainerSize.

00:30:37.416 --> 00:30:40.006 A:middle
These indicate to
the view controller

00:30:40.006 --> 00:30:43.646 A:middle
or the Presentation Controller
that the physical size

00:30:43.646 --> 00:30:45.176 A:middle
of the view has actually
changed.

00:30:46.026 --> 00:30:48.696 A:middle
And this is best kind of
shown through a diagram

00:30:49.156 --> 00:30:51.256 A:middle
that shows how the
messaging flows through.

00:30:51.766 --> 00:30:54.066 A:middle
So let's give ourselves a root
view controller with a couple

00:30:54.066 --> 00:30:55.256 A:middle
of child view controllers,

00:30:55.906 --> 00:30:57.786 A:middle
and let's have it
present a view controller.

00:30:57.786 --> 00:30:59.336 A:middle
It doesn't really matter
what it actually is.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.146 --> 00:31:02.996 A:middle
And as Peter has mentioned
previously, all presentations

00:31:02.996 --> 00:31:05.766 A:middle
of view controllers are managed
by a Presentation Controller,

00:31:05.766 --> 00:31:07.856 A:middle
so we've got to have
one of those guys, too.

00:31:08.776 --> 00:31:10.316 A:middle
So now that we have this set up,

00:31:10.316 --> 00:31:12.456 A:middle
let's give ourselves a
viewWillTransitionToSize call.

00:31:13.076 --> 00:31:16.176 A:middle
Maybe the device rotated, and
we're getting a different size

00:31:16.276 --> 00:31:17.616 A:middle
or different bounds
for that view.

00:31:19.516 --> 00:31:22.146 A:middle
These messages always start
with the root view controller.

00:31:22.896 --> 00:31:26.196 A:middle
And from there, that controller
will message any child view

00:31:26.196 --> 00:31:27.396 A:middle
controllers that it may have.

00:31:28.456 --> 00:31:29.696 A:middle
But the size that we pass

00:31:29.696 --> 00:31:31.966 A:middle
to the root view controller
is probably not the same size

00:31:31.966 --> 00:31:33.256 A:middle
that you want to
pass onto the child.

00:31:33.256 --> 00:31:35.066 A:middle
It's probably a smaller size.

00:31:35.326 --> 00:31:36.026 A:middle
So this is

00:31:36.026 --> 00:31:37.866 A:middle
where
sizeForChildContentContainer

00:31:37.866 --> 00:31:39.446 A:middle
withParentContainerSize
comes in.

00:31:39.706 --> 00:31:42.436 A:middle
We will ask the root
controller to size Child 1,

00:31:42.926 --> 00:31:45.386 A:middle
and that method returns
a size that we will pass

00:31:45.386 --> 00:31:48.166 A:middle
on to Child 1's
viewWillTransitionToSize.

00:31:49.416 --> 00:31:51.756 A:middle
We continue along if there are
any other child view controllers

00:31:51.756 --> 00:31:52.396 A:middle
of this controller.

00:31:52.966 --> 00:31:54.506 A:middle
And then any controllers

00:31:54.506 --> 00:31:56.196 A:middle
that are presenting
view controllers --

00:31:56.196 --> 00:31:57.636 A:middle
that means that they have
another view controller

00:31:57.636 --> 00:31:58.806 A:middle
presented on top of them --

00:31:59.346 --> 00:32:01.786 A:middle
will have their Presentation
Controller called next.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.346 --> 00:32:01.786 A:middle
will have their Presentation
Controller called next.

00:32:02.696 --> 00:32:04.186 A:middle
In this case, the root
view controllers --

00:32:04.186 --> 00:32:05.556 A:middle
the child view controllers,
excuse me --

00:32:05.556 --> 00:32:06.856 A:middle
aren't presenting anybody,

00:32:07.166 --> 00:32:09.386 A:middle
but the root view
controller actually is.

00:32:10.356 --> 00:32:12.636 A:middle
The root view controller
is not a container

00:32:12.636 --> 00:32:15.396 A:middle
for the Presentation Controller,
so the size that gets passed

00:32:15.396 --> 00:32:18.066 A:middle
to it is the same size that we
gave to the root controller.

00:32:19.006 --> 00:32:21.546 A:middle
But the Presentation
Controller is the container

00:32:21.546 --> 00:32:22.886 A:middle
for the presented controller.

00:32:23.456 --> 00:32:25.446 A:middle
So we need to ask the
Presentation Controller,

00:32:25.446 --> 00:32:27.286 A:middle
a sizeForChildContentContainer,

00:32:27.606 --> 00:32:29.466 A:middle
passing on to
presentedViewController.

00:32:30.036 --> 00:32:32.236 A:middle
The messaging flow is --

00:32:32.236 --> 00:32:33.586 A:middle
basically has a depth
for search.

00:32:34.206 --> 00:32:35.636 A:middle
You start with the
root view controller.

00:32:36.276 --> 00:32:39.236 A:middle
Any child controllers that
are present will get called,

00:32:39.596 --> 00:32:41.486 A:middle
but any controller
that is presenting a --

00:32:41.556 --> 00:32:44.466 A:middle
presenting another controller
will have its Presentation

00:32:44.466 --> 00:32:47.396 A:middle
Controller messaged and then
its presented controller

00:32:47.396 --> 00:32:47.996 A:middle
is messaged.

00:32:48.336 --> 00:32:50.006 A:middle
And then, the process
repeats again.

00:32:50.936 --> 00:32:53.826 A:middle
If for any reason that you
implement one of these methods,

00:32:54.026 --> 00:32:54.986 A:middle
and you call super,

00:32:54.986 --> 00:32:57.376 A:middle
this messaging still
is performed for you.

00:32:57.376 --> 00:33:00.386 A:middle
But if you implement these
methods and don't call super,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:57.376 --> 00:33:00.386 A:middle
But if you implement these
methods and don't call super,

00:33:00.856 --> 00:33:03.746 A:middle
the object or the class that
does not pass the message on --

00:33:03.746 --> 00:33:05.536 A:middle
any of its child
controllers or any

00:33:05.536 --> 00:33:07.936 A:middle
of its presented Presentation
Controllers will no longer get

00:33:07.936 --> 00:33:08.526 A:middle
that message.

00:33:08.956 --> 00:33:10.376 A:middle
It's something to be aware of.

00:33:11.646 --> 00:33:12.696 A:middle
Oops, there was one more.

00:33:13.696 --> 00:33:15.296 A:middle
Next up is preferred
content size,

00:33:15.296 --> 00:33:18.726 A:middle
and there are two items
here: preferredContentSize

00:33:19.096 --> 00:33:24.046 A:middle
and preferredContentSizeDid
ChangeForChildContentContainer.

00:33:24.576 --> 00:33:27.526 A:middle
And this is methodologies

00:33:27.526 --> 00:33:29.426 A:middle
for allowing a presented
view controller --

00:33:29.426 --> 00:33:32.546 A:middle
or child view controller to
say, "I need more or less size"

00:33:32.866 --> 00:33:34.066 A:middle
to its container controller.

00:33:34.766 --> 00:33:37.306 A:middle
A really good example of this is
the Notification Center widgets

00:33:38.256 --> 00:33:38.866 A:middle
will do this.

00:33:38.866 --> 00:33:41.506 A:middle
Your notification -- your
widget will actually set its own

00:33:41.506 --> 00:33:44.306 A:middle
preferred content size, which
will message its container

00:33:44.386 --> 00:33:45.776 A:middle
to allow the size to change.

00:33:46.716 --> 00:33:48.396 A:middle
Let's show what this
looks like in our example.

00:33:49.606 --> 00:33:52.606 A:middle
Say the presented controller
wants to grow by 100 points.

00:33:53.356 --> 00:33:55.346 A:middle
So it sets its
PreferredContentSize

00:33:55.346 --> 00:33:56.246 A:middle
to what it would like.

00:33:56.956 --> 00:33:59.476 A:middle
And because the Presentation
Controller is the container

00:33:59.476 --> 00:34:03.206 A:middle
controller of the presented
controller, it gets the message,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.476 --> 00:34:03.206 A:middle
controller of the presented
controller, it gets the message,

00:34:03.376 --> 00:34:06.616 A:middle
PreferredContentSizeDid
ChangeForChildContentContainer.

00:34:07.786 --> 00:34:09.065 A:middle
Now, if one of the Child 1

00:34:09.065 --> 00:34:12.126 A:middle
or Child 2 view controllers
had requested more size,

00:34:12.126 --> 00:34:14.396 A:middle
then the root view controller
would have gotten this message.

00:34:14.396 --> 00:34:17.266 A:middle
So it's just messaging up
to the container controller.

00:34:17.926 --> 00:34:19.505 A:middle
At this point in time,

00:34:19.505 --> 00:34:20.866 A:middle
the container has
a decision to make.

00:34:21.286 --> 00:34:22.936 A:middle
Does it want to honor
the size request?

00:34:22.936 --> 00:34:25.266 A:middle
And if so, how much of
it does it want to honor?

00:34:25.576 --> 00:34:27.966 A:middle
It can simply ignore it, if
there's not any space to give.

00:34:28.386 --> 00:34:30.846 A:middle
Or it can say, "Well,
you asked for 100 points,

00:34:30.846 --> 00:34:31.856 A:middle
and I can give you 50."

00:34:32.835 --> 00:34:35.505 A:middle
If you were going to resize
the view, it's important

00:34:35.505 --> 00:34:37.525 A:middle
that you call back
viewWillTransitionToSize:

00:34:37.525 --> 00:34:39.545 A:middle
withTransitionCoordinator
back on the view

00:34:39.545 --> 00:34:40.386 A:middle
that made the request.

00:34:41.295 --> 00:34:42.786 A:middle
And this -- it's kind
of like a receipt

00:34:42.786 --> 00:34:45.485 A:middle
for that view controller, to let
it know that it requested size,

00:34:45.786 --> 00:34:49.466 A:middle
it's gotten a size, or however
much size the container gave it.

00:34:49.976 --> 00:34:51.676 A:middle
And it's allowed them
to forward that message

00:34:51.676 --> 00:34:53.626 A:middle
on to any child containers
it may have.

00:34:54.815 --> 00:34:57.005 A:middle
And key, right -- and
the key point here is

00:34:57.005 --> 00:34:59.656 A:middle
that after you've sent this
message, the container needs

00:34:59.656 --> 00:35:03.246 A:middle
to resize the child container,
the child view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.656 --> 00:35:03.246 A:middle
to resize the child container,
the child view controller.

00:35:04.606 --> 00:35:07.226 A:middle
Sending the message
ViewWillTransitionToSize does

00:35:07.226 --> 00:35:09.166 A:middle
not actually perform
the resize itself.

00:35:09.466 --> 00:35:11.616 A:middle
That's something that the
container needs to do.

00:35:13.736 --> 00:35:15.906 A:middle
Finally, our trait collections,
and there's one method here,

00:35:16.636 --> 00:35:18.626 A:middle
and that is
willTransitionToTraitCollection

00:35:18.686 --> 00:35:19.746 A:middle
withTransitionCoordinator.

00:35:21.026 --> 00:35:23.546 A:middle
And this has the same kind
of messaging semantics

00:35:23.576 --> 00:35:25.616 A:middle
as the ViewWillTransitionToSize.

00:35:25.616 --> 00:35:28.616 A:middle
It flows in the same order, and
if you don't call through super,

00:35:28.616 --> 00:35:30.626 A:middle
the message chain ends there.

00:35:30.836 --> 00:35:33.776 A:middle
If you hadn't seen
the talk yesterday

00:35:34.076 --> 00:35:36.776 A:middle
on building adaptive
applications with UIKit,

00:35:37.236 --> 00:35:39.886 A:middle
I highly recommend checking
that out, because it goes

00:35:39.886 --> 00:35:42.126 A:middle
into trait collections in
depth and how they interact

00:35:42.126 --> 00:35:43.076 A:middle
with the rest of the system.

00:35:43.446 --> 00:35:45.376 A:middle
But as a really quick
overview of what they are,

00:35:45.376 --> 00:35:47.216 A:middle
in case you haven't
read the documentation,

00:35:48.196 --> 00:35:52.316 A:middle
trait collections are simply a
collection of key value pairs

00:35:52.316 --> 00:35:55.296 A:middle
that describe an environment
to a view controller or a view

00:35:55.296 --> 00:35:58.296 A:middle
or a screen, and there
are four properties:

00:35:58.296 --> 00:36:01.076 A:middle
a horizontalSizeClass,
which describes width;


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.296 --> 00:36:01.076 A:middle
a horizontalSizeClass,
which describes width;

00:36:01.786 --> 00:36:02.926 A:middle
a vertical size -- excuse me --

00:36:02.926 --> 00:36:04.716 A:middle
a verticalSizeClass
that describes height;

00:36:05.526 --> 00:36:07.776 A:middle
the UserInterfaceIdiom that
describes the type of device

00:36:07.816 --> 00:36:09.906 A:middle
that you're on; and
then the scale

00:36:09.906 --> 00:36:12.636 A:middle
that decides the
scale of the device.

00:36:12.636 --> 00:36:15.846 A:middle
So for an iPhone, in portrait,

00:36:15.846 --> 00:36:18.786 A:middle
the horizontalSizeClass
is compact.

00:36:19.196 --> 00:36:20.886 A:middle
Its verticalSizeClass
is regular.

00:36:21.376 --> 00:36:23.166 A:middle
It's a phone, so it's
userInterface of phone,

00:36:23.166 --> 00:36:25.626 A:middle
and it has a scale of 2.0.

00:36:25.966 --> 00:36:28.876 A:middle
Now, all these methods
are trying to allow you

00:36:28.876 --> 00:36:31.356 A:middle
to have your application
respond to changes.

00:36:32.246 --> 00:36:33.646 A:middle
But some of you may be --

00:36:33.676 --> 00:36:36.226 A:middle
the ones that have been paying
attention most will probably

00:36:36.226 --> 00:36:37.606 A:middle
notice that we have two methods

00:36:37.606 --> 00:36:40.606 A:middle
that actually send somewhat
the same information.

00:36:41.686 --> 00:36:44.896 A:middle
willTransitionToTraitCollection
has the notion of size classes,

00:36:45.006 --> 00:36:47.606 A:middle
but we also have this method,
viewWillTransitionToSize,

00:36:47.606 --> 00:36:48.856 A:middle
that's sending along the size.

00:36:49.456 --> 00:36:51.106 A:middle
So why do we have
both of these methods?

00:36:51.666 --> 00:36:53.956 A:middle
That's a great question.

00:36:54.916 --> 00:36:56.046 A:middle
Before I actually tell you why,

00:36:56.396 --> 00:36:58.026 A:middle
I need to add two
more methods to this.

00:36:59.096 --> 00:37:02.026 A:middle
UIPresentationController's
containerViewWillLayoutSubviews


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.096 --> 00:37:02.026 A:middle
UIPresentationController's
containerViewWillLayoutSubviews

00:37:02.516 --> 00:37:04.566 A:middle
and UI View Controller's
viewWillLayoutSubviews.

00:37:06.836 --> 00:37:09.526 A:middle
Starting with
willTransitionToTraitCollection.

00:37:11.816 --> 00:37:15.066 A:middle
This is intended to be a
very coarse-grained control

00:37:15.066 --> 00:37:16.836 A:middle
over the layout of
your application.

00:37:17.396 --> 00:37:19.396 A:middle
When you receive trait
collection changes,

00:37:19.446 --> 00:37:21.536 A:middle
it's an indication
that the structure --

00:37:21.536 --> 00:37:24.116 A:middle
the overall structure of your
application is probably going

00:37:24.116 --> 00:37:25.656 A:middle
to change or needs
to be updated.

00:37:26.126 --> 00:37:28.396 A:middle
A great example of this
is, of course, adaptivity.

00:37:29.396 --> 00:37:32.286 A:middle
In that example demo I gave you
before, where the popover went

00:37:32.286 --> 00:37:35.216 A:middle
to full-screen, it's not just
a view being swapped out --

00:37:35.216 --> 00:37:36.176 A:middle
that is view controllers

00:37:36.176 --> 00:37:38.716 A:middle
and Presentation Controllers
being exchanged wholesale.

00:37:39.096 --> 00:37:41.046 A:middle
That's a significant
amount of change

00:37:41.046 --> 00:37:42.606 A:middle
to your application's
user interface.

00:37:43.286 --> 00:37:45.656 A:middle
But it's not just all
about size classes.

00:37:46.776 --> 00:37:48.256 A:middle
Screens could have
different scales.

00:37:48.916 --> 00:37:51.886 A:middle
Your view controller can be
on the main device screen,

00:37:51.886 --> 00:37:53.246 A:middle
which has a scale of 2x,

00:37:53.246 --> 00:37:56.496 A:middle
but then an external
monitor can have a 1x scale.

00:37:56.936 --> 00:37:59.516 A:middle
And moving that view controller
from the primary screen

00:37:59.516 --> 00:38:02.696 A:middle
to that secondary screen could
completely change how your UI


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.516 --> 00:38:02.696 A:middle
to that secondary screen could
completely change how your UI

00:38:02.696 --> 00:38:03.456 A:middle
needs to be laid out.

00:38:03.956 --> 00:38:06.836 A:middle
And they're not --
it's not always

00:38:06.836 --> 00:38:09.316 A:middle
about entire UI changing
effects.

00:38:10.046 --> 00:38:12.136 A:middle
An example of this would be --

00:38:12.626 --> 00:38:16.456 A:middle
now in iOS 8, when we go
from an iPhone-like device,

00:38:16.456 --> 00:38:19.926 A:middle
and we go from a compact-width
regular height, and we rotate

00:38:19.926 --> 00:38:22.436 A:middle
into a compact-width,
compact-height environment,

00:38:22.876 --> 00:38:24.756 A:middle
we're going to auto-hide
the status bar for you.

00:38:25.936 --> 00:38:28.526 A:middle
And we do that not
because there's less space;

00:38:28.526 --> 00:38:30.846 A:middle
there's not less physical
space of that view controller.

00:38:31.186 --> 00:38:34.256 A:middle
It's that it makes more
sense in that situation

00:38:34.396 --> 00:38:38.186 A:middle
to remove a status bar, so
that your content has more area

00:38:38.186 --> 00:38:39.056 A:middle
to display itself.

00:38:41.566 --> 00:38:44.316 A:middle
Next up is
viewWillTransitionToSize,

00:38:44.316 --> 00:38:46.936 A:middle
and this is the medium-grain
control approach

00:38:46.966 --> 00:38:48.526 A:middle
for responding to changes.

00:38:49.886 --> 00:38:52.796 A:middle
And as I mentioned before,
this is an indication

00:38:52.796 --> 00:38:55.906 A:middle
that your view actually has
more or less size to deal with

00:38:55.986 --> 00:38:58.436 A:middle
and that you should
actually add more content

00:38:58.436 --> 00:39:01.166 A:middle
or remove content depending
on how the size changed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.436 --> 00:39:01.166 A:middle
or remove content depending
on how the size changed.

00:39:02.596 --> 00:39:06.286 A:middle
A great example of this was
the child controller requesting

00:39:06.286 --> 00:39:06.896 A:middle
more size.

00:39:07.496 --> 00:39:09.066 A:middle
In this case, it's
not an indication

00:39:09.066 --> 00:39:11.426 A:middle
for that view controller
to actually lay itself out.

00:39:11.686 --> 00:39:14.256 A:middle
It's an indication that it needs
to actually add more content.

00:39:16.026 --> 00:39:17.666 A:middle
You also get this
call on rotation.

00:39:18.466 --> 00:39:21.616 A:middle
With rotation under iOS 8,
it's simply a bounds change.

00:39:21.616 --> 00:39:23.356 A:middle
So when you -- when
the device rotates,

00:39:23.676 --> 00:39:25.996 A:middle
your view controller will get
told that its size will change,

00:39:25.996 --> 00:39:27.046 A:middle
and you'll probably
see that the width

00:39:27.136 --> 00:39:28.086 A:middle
and the height have swapped.

00:39:28.536 --> 00:39:31.016 A:middle
And finally, you'll
also see these guys,

00:39:31.176 --> 00:39:34.356 A:middle
these messages called when the
resizable simulator changes

00:39:34.356 --> 00:39:34.876 A:middle
its size.

00:39:35.766 --> 00:39:37.176 A:middle
So when you're playing
around with the simulator,

00:39:37.176 --> 00:39:37.866 A:middle
you'll see that, as well.

00:39:39.416 --> 00:39:42.126 A:middle
Finally, is
containerViewWillLayoutSubviews

00:39:42.126 --> 00:39:43.616 A:middle
and viewWillLayoutSubviews,

00:39:44.016 --> 00:39:45.616 A:middle
and these are the
fine-grain controls

00:39:45.616 --> 00:39:49.196 A:middle
on UIPresentationController and
UIViewController, respectively.

00:39:50.046 --> 00:39:53.436 A:middle
It works just like UIView's
layout subviews, and it's meant

00:39:53.486 --> 00:39:57.826 A:middle
to do fine adjustments to the
subviews of your hierarchy.

00:39:58.836 --> 00:40:02.046 A:middle
And that includes child
content views, as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.836 --> 00:40:02.046 A:middle
And that includes child
content views, as well.

00:40:02.366 --> 00:40:04.556 A:middle
So when your Presentation
Controller got that message

00:40:04.966 --> 00:40:07.696 A:middle
that the presentedViewController
needs to have a different size,

00:40:08.606 --> 00:40:11.116 A:middle
you would change that
presentedViewController's size

00:40:11.116 --> 00:40:12.816 A:middle
in
containerViewWillLayoutSubviews.

00:40:14.006 --> 00:40:16.266 A:middle
So now that we understand
how all the messaging flows

00:40:16.266 --> 00:40:18.306 A:middle
through the controller
hierarchy, let's take a look

00:40:18.306 --> 00:40:23.516 A:middle
at the demo that shows how we
do adaptivity to our demo app,

00:40:23.516 --> 00:40:24.646 A:middle
and then it also shows how

00:40:24.646 --> 00:40:27.076 A:middle
to use multiple Presentation
Controllers to show --

00:40:27.676 --> 00:40:29.646 A:middle
to display the same
view controller content.

00:40:30.186 --> 00:40:33.946 A:middle
&gt;&gt; So we're going to go back

00:40:33.946 --> 00:40:36.716 A:middle
to the same demo application
we were looking at earlier --

00:40:38.546 --> 00:40:40.006 A:middle
my photo management application.

00:40:43.246 --> 00:40:45.426 A:middle
Using the same API
that Jim talked

00:40:45.426 --> 00:40:48.296 A:middle
about for UI popover
Presentation Controller

00:40:48.296 --> 00:40:52.016 A:middle
adapting, we can adapt our
custom view controller too.

00:40:53.636 --> 00:40:55.416 A:middle
As you remember, we
have this side bar.

00:40:55.416 --> 00:40:58.676 A:middle
But when we transition to a
compact-width environment,

00:40:58.676 --> 00:41:03.776 A:middle
what we'd really like to have is
just a full-screen presentation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.676 --> 00:41:03.776 A:middle
what we'd really like to have is
just a full-screen presentation.

00:41:08.396 --> 00:41:11.536 A:middle
Here, we'll change
the width to 320

00:41:11.536 --> 00:41:14.306 A:middle
and the size class to compact.

00:41:15.356 --> 00:41:18.446 A:middle
And check it out: we get a
full-screen presentation.

00:41:19.616 --> 00:41:22.936 A:middle
This is using that same
adaptive presentation style

00:41:23.016 --> 00:41:25.636 A:middle
at adaptivity API on
Presentation Controller

00:41:25.636 --> 00:41:28.636 A:middle
that we showed you in popover
Presentation Controller.

00:41:29.626 --> 00:41:30.996 A:middle
But what's really cool is

00:41:30.996 --> 00:41:33.666 A:middle
that we can still use our
custom animator object.

00:41:34.376 --> 00:41:37.226 A:middle
So you'll notice that when we
dismiss the view controller

00:41:37.356 --> 00:41:40.766 A:middle
by tapping the Save button,
we slide off from the right.

00:41:40.766 --> 00:41:44.256 A:middle
And when we present again,
we slide in from the right.

00:41:44.936 --> 00:41:46.256 A:middle
This is exactly what we want.

00:41:46.966 --> 00:41:48.626 A:middle
And to show that it
goes the other way,

00:41:48.876 --> 00:41:52.856 A:middle
I'll change the size class
back to regular, with the width

00:41:52.856 --> 00:41:58.826 A:middle
of 768 points, and boom:
it transitions perfectly

00:41:58.976 --> 00:42:00.096 A:middle
and gets placed correctly.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.976 --> 00:42:00.096 A:middle
and gets placed correctly.

00:42:00.666 --> 00:42:04.956 A:middle
Next, I'd like to show
you something really cool.

00:42:06.496 --> 00:42:09.506 A:middle
Because Presentation
Controllers are not coupled

00:42:09.936 --> 00:42:11.386 A:middle
to their
presentedViewControllers,

00:42:12.146 --> 00:42:15.636 A:middle
we can switch out a Presentation
Controller that's used

00:42:15.636 --> 00:42:18.306 A:middle
for a view controller
with zero changes

00:42:18.486 --> 00:42:19.676 A:middle
to the presentedViewController.

00:42:19.806 --> 00:42:23.006 A:middle
I'm going to tap this
little switch in the corner,

00:42:23.696 --> 00:42:25.146 A:middle
which turns on Cool mode.

00:42:26.336 --> 00:42:28.906 A:middle
This flips some internal
state in my view controller

00:42:29.236 --> 00:42:31.106 A:middle
to use a different
transitioning delegate,

00:42:31.106 --> 00:42:34.226 A:middle
which will provide a
totally custom animator

00:42:34.686 --> 00:42:36.046 A:middle
and totally custom chrome

00:42:36.386 --> 00:42:37.646 A:middle
through its Presentation
Controller.

00:42:39.296 --> 00:42:41.016 A:middle
So when I tap a photo, instead

00:42:41.016 --> 00:42:42.976 A:middle
of that overlay side
bar presentation,

00:42:44.286 --> 00:42:46.046 A:middle
the view controller
slides in from the middle,

00:42:46.306 --> 00:42:48.946 A:middle
a beautiful leopard print
appears from the side,

00:42:49.126 --> 00:42:50.796 A:middle
and we get some totally
custom chrome.

00:42:52.256 --> 00:42:54.516 A:middle
You'll notice some things
about this custom presentation.

00:42:55.936 --> 00:42:58.926 A:middle
When we do the presentation,
while the unicorn

00:42:58.926 --> 00:43:02.676 A:middle
and the flower appear alongside
the view controller animating


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.926 --> 00:43:02.676 A:middle
and the flower appear alongside
the view controller animating

00:43:02.676 --> 00:43:05.906 A:middle
in, the leopard print
animates by itself.

00:43:06.896 --> 00:43:09.666 A:middle
This is because
UIPresentationController can

00:43:09.666 --> 00:43:12.596 A:middle
animate its chrome in a
different animation block

00:43:13.046 --> 00:43:15.756 A:middle
than that which is used for the
view controller presentation.

00:43:16.246 --> 00:43:20.386 A:middle
So we can make that chrome
respond just how we want.

00:43:21.626 --> 00:43:24.326 A:middle
By the way, this sample
code, including Cool mode,

00:43:24.616 --> 00:43:28.056 A:middle
is available on the Worldwide
Developer's Conference website.

00:43:28.536 --> 00:43:29.916 A:middle
Just look for Look Inside.

00:43:31.236 --> 00:43:34.606 A:middle
Let's see how we implemented
this totally custom Presentation

00:43:34.606 --> 00:43:38.416 A:middle
Controller and switch the
Presentation Controller we used

00:43:38.866 --> 00:43:40.196 A:middle
for our overlay view controller.

00:43:41.316 --> 00:43:45.706 A:middle
Back in our root view
controller, I showed you setting

00:43:45.706 --> 00:43:48.296 A:middle
up our transitioning
delegate like this.

00:43:48.366 --> 00:43:51.196 A:middle
We're going to need to
augment this logic a little bit

00:43:51.476 --> 00:43:53.546 A:middle
to provide our other
Presentation Controller.

00:43:55.076 --> 00:43:57.586 A:middle
First, we'll check a
new internal method

00:43:57.656 --> 00:44:00.516 A:middle
that we've called
presentationShouldBeAwesome.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:57.656 --> 00:44:00.516 A:middle
that we've called
presentationShouldBeAwesome.

00:44:00.516 --> 00:44:04.256 A:middle
And if this is true,
will use a totally new

00:44:04.256 --> 00:44:05.196 A:middle
transitioning delegate.

00:44:06.146 --> 00:44:09.866 A:middle
This transitioning delegate will
provide a custom animator object

00:44:10.206 --> 00:44:11.926 A:middle
to manage that scaling
animation,

00:44:12.486 --> 00:44:14.256 A:middle
and a custom Presentation
Controller

00:44:14.546 --> 00:44:16.396 A:middle
to manage the chrome
that you saw earlier.

00:44:17.246 --> 00:44:20.476 A:middle
Otherwise if that value
is not set to YES,

00:44:20.976 --> 00:44:23.196 A:middle
we'll just use the other
transition delegate

00:44:23.276 --> 00:44:24.596 A:middle
that you saw earlier.

00:44:25.196 --> 00:44:28.216 A:middle
And then, setting this on the
view controller will cause all

00:44:28.216 --> 00:44:31.606 A:middle
of that machinery to be put in
place when we go to present.

00:44:33.176 --> 00:44:35.456 A:middle
&gt;&gt; So to summarize what we
talked about here today,

00:44:35.456 --> 00:44:36.906 A:middle
there's only two points
that we really need

00:44:36.906 --> 00:44:37.686 A:middle
to take home with you.

00:44:38.076 --> 00:44:40.776 A:middle
First off, the
UIPresentationController,

00:44:40.926 --> 00:44:43.646 A:middle
UIKit ourselves are
eating our own dog food

00:44:43.646 --> 00:44:46.666 A:middle
and have really improved
our own API for alerts,

00:44:46.876 --> 00:44:48.606 A:middle
and for popovers,
and for search.

00:44:49.236 --> 00:44:51.966 A:middle
No longer do you need to put
their views into your hierarchy,

00:44:52.366 --> 00:44:55.086 A:middle
if they could be best
served by a presentation.

00:44:56.836 --> 00:44:57.486 A:middle
&gt;&gt; Additionally,

00:44:57.816 --> 00:45:01.196 A:middle
with Presentation Controller
representing the last piece


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:57.816 --> 00:45:01.196 A:middle
with Presentation Controller
representing the last piece

00:45:01.196 --> 00:45:03.846 A:middle
in the puzzle for totally
custom presentations,

00:45:04.376 --> 00:45:07.276 A:middle
you can now build things
that you never could before

00:45:07.676 --> 00:45:10.386 A:middle
with custom chrome
and custom animations.

00:45:10.386 --> 00:45:12.996 A:middle
And we encourage you to go
make your own Cool mode.

00:45:13.426 --> 00:45:15.266 A:middle
We can't wait to see what types

00:45:15.266 --> 00:45:17.696 A:middle
of totally custom
presentations you're going

00:45:17.696 --> 00:45:19.296 A:middle
to add to your application.

00:45:20.666 --> 00:45:23.346 A:middle
&gt;&gt; So if you have more
information or questions,

00:45:23.346 --> 00:45:25.226 A:middle
Jake Behrens, the guy
in plaid down here,

00:45:25.226 --> 00:45:26.976 A:middle
is our App Frameworks
Evangelist.

00:45:27.066 --> 00:45:28.296 A:middle
He loves hearing from you guys.

00:45:28.376 --> 00:45:29.916 A:middle
Of course, there's
documentations

00:45:29.916 --> 00:45:31.236 A:middle
in the Apple Developer Forums.

00:45:32.096 --> 00:45:34.106 A:middle
More importantly, though,
there are related sessions.

00:45:34.106 --> 00:45:36.146 A:middle
This is the last talk
on UIViewController,

00:45:36.146 --> 00:45:37.996 A:middle
What's New in View
Controllers in iOS 8.

00:45:37.996 --> 00:45:39.506 A:middle
So all the sessions were
earlier in the week.

00:45:39.656 --> 00:45:41.736 A:middle
I highly recommend that you
check them out on the videos.

00:45:41.736 --> 00:45:42.726 A:middle
And that's it.

00:45:42.836 --> 00:45:43.696 A:middle
Enjoy the rest of
your conference,

00:45:43.696 --> 00:45:44.696 A:middle
and lets have a great
[inaudible], guys.

00:45:45.516 --> 00:45:48.500 A:middle
[ Applause ]

