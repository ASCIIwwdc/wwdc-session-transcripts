WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.116 --> 00:00:12.996 A:middle
&gt;&gt; Good morning, everyone.

00:00:14.516 --> 00:00:18.586 A:middle
[ Applause ]

00:00:19.086 --> 00:00:20.596 A:middle
I'm glad you guys could make it.

00:00:21.026 --> 00:00:22.296 A:middle
My name is Bruce Nilo.

00:00:22.366 --> 00:00:24.746 A:middle
I'm one of the engineers
on UIKit.

00:00:25.356 --> 00:00:28.506 A:middle
And we're going to be talking
about all the new stuff

00:00:28.506 --> 00:00:32.616 A:middle
that we've brought
into UIKit for iOS 8.

00:00:33.546 --> 00:00:37.276 A:middle
In case no one's told
you, it's a big release.

00:00:37.806 --> 00:00:38.756 A:middle
There's a lot of stuff.

00:00:38.756 --> 00:00:42.256 A:middle
And two weeks ago when I was
thinking about what I was going

00:00:42.256 --> 00:00:44.306 A:middle
to say, I said, "Piece of cake.

00:00:44.306 --> 00:00:46.726 A:middle
I'm just going to list
all the new features.

00:00:47.476 --> 00:00:51.826 A:middle
I'm going to also list all the
things that are going away.

00:00:51.826 --> 00:00:54.596 A:middle
And I'm done, right?"

00:00:54.596 --> 00:00:57.106 A:middle
Well, that's what
I ended up with,

00:00:57.746 --> 00:01:02.166 A:middle
and I realized I
really needed to cut


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.746 --> 00:01:02.166 A:middle
and I realized I
really needed to cut

00:01:02.316 --> 00:01:03.916 A:middle
down on what I was
going to talk about.

00:01:04.626 --> 00:01:06.746 A:middle
So this is where we ended up.

00:01:06.746 --> 00:01:12.456 A:middle
And I just want to point out,
though, that there's a lot more

00:01:12.456 --> 00:01:13.776 A:middle
than what I'm going
to talk about.

00:01:13.776 --> 00:01:19.196 A:middle
One of the most important things
that we're introducing in iOS 8,

00:01:19.196 --> 00:01:22.466 A:middle
in case you haven't heard,
is we are providing APIs

00:01:22.466 --> 00:01:23.926 A:middle
that are more adaptive.

00:01:24.546 --> 00:01:29.096 A:middle
What this means is that your
user interfaces can more easily

00:01:29.096 --> 00:01:33.766 A:middle
respond to changes in size
and other changes, as well.

00:01:34.966 --> 00:01:39.676 A:middle
UISplitViewController used to be
a kind of a pretty simple class.

00:01:40.366 --> 00:01:42.996 A:middle
Well, it's grown up in iOS
8, and we're going to talk

00:01:42.996 --> 00:01:44.606 A:middle
about some of the new features

00:01:44.606 --> 00:01:46.756 A:middle
that UISplitViewController
has to offer.

00:01:48.536 --> 00:01:52.496 A:middle
We're going to, while we're at
it, show how it's really easy

00:01:52.496 --> 00:01:55.596 A:middle
to hide bars in ways
that you've probably seen

00:01:55.596 --> 00:01:56.746 A:middle
in some of our own apps.

00:01:56.746 --> 00:02:01.036 A:middle
Then we're going to
shift gears a little bit


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:56.746 --> 00:02:01.036 A:middle
Then we're going to
shift gears a little bit

00:02:01.036 --> 00:02:03.046 A:middle
and talk about presentations.

00:02:03.486 --> 00:02:07.286 A:middle
Presentation controllers have
been introduced and are part

00:02:07.286 --> 00:02:10.136 A:middle
of a whole architectural
revamping

00:02:10.136 --> 00:02:12.226 A:middle
of how view controllers
are presented

00:02:12.226 --> 00:02:17.086 A:middle
and how you can create great
custom presentations yourselves.

00:02:17.146 --> 00:02:20.536 A:middle
That gave us the
opportunity, by the way,

00:02:20.536 --> 00:02:22.396 A:middle
to redo popovers, as well.

00:02:22.716 --> 00:02:25.036 A:middle
And popovers have
now become integrated

00:02:25.266 --> 00:02:27.346 A:middle
with UIViewController
presentations.

00:02:28.556 --> 00:02:31.136 A:middle
Finally we're going to talk-not
finally-we're also going to talk

00:02:31.136 --> 00:02:33.636 A:middle
about new a API that
we introduced

00:02:33.636 --> 00:02:35.906 A:middle
that builds upon
transition coordinators,

00:02:37.006 --> 00:02:40.036 A:middle
that also helps your
applications adapt.

00:02:40.556 --> 00:02:43.666 A:middle
And, finally, there's a subtle
but pretty important change

00:02:43.666 --> 00:02:47.486 A:middle
in terms of the coordinate
spaces

00:02:47.486 --> 00:02:49.706 A:middle
that you've grown to love.

00:02:49.706 --> 00:02:52.266 A:middle
And we'll talk about that
briefly when we wrap up.

00:02:53.256 --> 00:02:55.906 A:middle
So, you've probably
seen this picture,

00:02:55.906 --> 00:02:57.786 A:middle
or a variant of it, a few times.

00:02:59.586 --> 00:03:01.436 A:middle
Many hierarchical applications


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.586 --> 00:03:01.436 A:middle
Many hierarchical applications

00:03:01.436 --> 00:03:04.006 A:middle
on a phone might structure
themselves this way,

00:03:04.006 --> 00:03:05.656 A:middle
inside of a navigation
controller.

00:03:06.306 --> 00:03:09.736 A:middle
And there might be some
detail that you would see

00:03:11.036 --> 00:03:12.576 A:middle
when you hit the Back button.

00:03:16.726 --> 00:03:19.256 A:middle
And on an iPad, you might choose

00:03:19.256 --> 00:03:22.236 A:middle
to structure it a
little bit differently.

00:03:22.556 --> 00:03:24.626 A:middle
Again, this is all
kind of familiar stuff.

00:03:25.786 --> 00:03:28.716 A:middle
But there's no particular
reason why you shouldn't be able

00:03:28.716 --> 00:03:32.156 A:middle
to do this on an iPhone, if
it suited your application.

00:03:32.446 --> 00:03:34.616 A:middle
We're going to show
how that's possible.

00:03:36.756 --> 00:03:44.236 A:middle
So prior to iOS 8, most of
your application coarse-grained

00:03:44.236 --> 00:03:49.236 A:middle
structure was determined by
looking at the device type,

00:03:49.236 --> 00:03:52.966 A:middle
and possibly the interface
orientation, as well as the size

00:03:52.966 --> 00:03:56.756 A:middle
in which your user
interface was being presented.

00:03:58.106 --> 00:04:00.926 A:middle
In iOS 8, we've taken
the first two


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.106 --> 00:04:00.926 A:middle
In iOS 8, we've taken
the first two

00:04:01.056 --> 00:04:02.966 A:middle
and abstracted it a little bit

00:04:02.966 --> 00:04:06.276 A:middle
into two new concepts called
traits and trait collections.

00:04:07.106 --> 00:04:08.666 A:middle
Size is still available,

00:04:09.546 --> 00:04:13.266 A:middle
but typically size is a finer
grain type of layout operation

00:04:13.266 --> 00:04:16.866 A:middle
that can be easily
accommodated using technologies

00:04:16.866 --> 00:04:17.856 A:middle
like Auto Layout.

00:04:18.366 --> 00:04:20.426 A:middle
We're going to talk a little
bit more about the former.

00:04:20.426 --> 00:04:23.566 A:middle
We'll also address the
latter a little bit.

00:04:24.456 --> 00:04:26.336 A:middle
So what is a "trait collection"?

00:04:27.326 --> 00:04:33.426 A:middle
A trait collection, simply
put, is a set of traits.

00:04:33.786 --> 00:04:34.786 A:middle
Not too surprising.

00:04:37.026 --> 00:04:41.146 A:middle
On a phone, you might
see the window

00:04:41.226 --> 00:04:45.656 A:middle
of your application
return a trait collection

00:04:45.926 --> 00:04:49.536 A:middle
that has the following
traits: two size classes,

00:04:49.776 --> 00:04:51.876 A:middle
an idiom, and a display scale.

00:04:52.276 --> 00:04:58.496 A:middle
This typically is the way a
phone's traits are structured.

00:04:58.496 --> 00:05:01.236 A:middle
One of the most important traits


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.496 --> 00:05:01.236 A:middle
One of the most important traits

00:05:01.236 --> 00:05:03.926 A:middle
that we've introduced
is size class.

00:05:04.406 --> 00:05:09.096 A:middle
And size class deals
with, on a coarse level,

00:05:09.096 --> 00:05:13.576 A:middle
the available space that
your application has

00:05:13.576 --> 00:05:15.156 A:middle
and can therefore make decisions

00:05:15.156 --> 00:05:16.636 A:middle
about what its structure
should be.

00:05:17.406 --> 00:05:18.736 A:middle
Let's look at that quickly.

00:05:20.066 --> 00:05:20.686 A:middle
Here we have kind

00:05:20.686 --> 00:05:23.946 A:middle
of a cartoonish representation
of an iPhone.

00:05:27.666 --> 00:05:32.706 A:middle
And typically, the
vertical axis is going

00:05:33.076 --> 00:05:36.116 A:middle
to have a regular size class,

00:05:36.116 --> 00:05:37.976 A:middle
whereas the horizontal
axis is going

00:05:37.976 --> 00:05:39.786 A:middle
to have a compact size class.

00:05:41.356 --> 00:05:43.346 A:middle
If you rotate a phone,

00:05:46.886 --> 00:05:51.006 A:middle
we say that the size classes are
constrained in both the vertical

00:05:51.006 --> 00:05:52.686 A:middle
and the horizontal dimensions.

00:05:52.686 --> 00:05:57.966 A:middle
Now, an iPad is a
little bit more free.

00:05:59.556 --> 00:06:02.136 A:middle
It's regular in all
of its dimensions,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.556 --> 00:06:02.136 A:middle
It's regular in all
of its dimensions,

00:06:02.266 --> 00:06:05.096 A:middle
or it has regular size classes
in all of its dimensions,

00:06:05.276 --> 00:06:08.316 A:middle
and that holds true when
you rotate it, as well.

00:06:11.876 --> 00:06:16.646 A:middle
But that's not the full story,
because some view controllers,

00:06:16.646 --> 00:06:20.456 A:middle
like split view controller, can
determine that its children,

00:06:20.456 --> 00:06:24.176 A:middle
in this case the primary child,
which is on the left side,

00:06:24.796 --> 00:06:30.366 A:middle
has a more constrained size
class in either dimension.

00:06:30.586 --> 00:06:32.186 A:middle
For a split view controller,

00:06:32.446 --> 00:06:35.476 A:middle
it constrains the
horizontal size class.

00:06:39.556 --> 00:06:46.956 A:middle
So, a size class is all about
informing your application

00:06:47.356 --> 00:06:50.426 A:middle
of the available space
in some coarse way

00:06:50.426 --> 00:06:51.606 A:middle
that you can make decisions

00:06:51.606 --> 00:06:54.676 A:middle
about how you would
substantially alter the

00:06:54.676 --> 00:06:56.056 A:middle
application's structure.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.326 --> 00:07:05.386 A:middle
We have API on specific objects
that vend trait collections.

00:07:06.176 --> 00:07:11.676 A:middle
And in these cases they have
values for both the horizontal

00:07:11.676 --> 00:07:13.406 A:middle
and the vertical size classes.

00:07:13.736 --> 00:07:16.896 A:middle
Now, I like to think about the
trait collections that come back

00:07:16.896 --> 00:07:21.316 A:middle
from these objects as defining
a point in a trait space.

00:07:23.666 --> 00:07:27.716 A:middle
We've introduced a new
protocol that a number

00:07:27.716 --> 00:07:30.286 A:middle
of our objects conform to
which is a trait environment.

00:07:30.286 --> 00:07:32.406 A:middle
And you'll see the
hierarchy on the right is kind

00:07:32.406 --> 00:07:35.306 A:middle
of a window hierarchy
that starts from a screen

00:07:35.486 --> 00:07:37.086 A:middle
and proceeds down all the way

00:07:37.086 --> 00:07:39.276 A:middle
to the leaf view
elements that you have.

00:07:39.586 --> 00:07:43.066 A:middle
All these objects conform to
the trait environment protocol,

00:07:43.066 --> 00:07:45.256 A:middle
which means you can ask
them for a trait collection,

00:07:45.556 --> 00:07:48.526 A:middle
and what you get back is going
to be a point in a trait space

00:07:48.666 --> 00:07:50.606 A:middle
where every single
trait has a value.

00:07:51.356 --> 00:07:55.646 A:middle
And not all of these objects
define those values directly.

00:07:56.116 --> 00:07:59.176 A:middle
So, for example, if you asked
for the scale of a leaf,

00:07:59.176 --> 00:08:02.846 A:middle
the scale trait of the leaf
of a view, it might actually,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.176 --> 00:08:02.846 A:middle
the scale trait of the leaf
of a view, it might actually,

00:08:02.846 --> 00:08:04.226 A:middle
the system might
walk all the way

00:08:04.226 --> 00:08:06.346 A:middle
up to the screen to get that.

00:08:06.376 --> 00:08:07.216 A:middle
But the trait collection

00:08:07.216 --> 00:08:09.736 A:middle
that you get back will have
a value for that scale.

00:08:10.766 --> 00:08:14.826 A:middle
Finally, you will notice
that whenever a trait changes

00:08:14.826 --> 00:08:17.606 A:middle
in a trait collection,
your object,

00:08:17.606 --> 00:08:20.536 A:middle
the appropriate object will get
a traitCollectionDidChange just

00:08:20.536 --> 00:08:24.146 A:middle
before that object is laid out,
so you can respond to that.

00:08:26.296 --> 00:08:30.576 A:middle
So I kind of implied before that
you can, that a view controller,

00:08:30.576 --> 00:08:31.816 A:middle
such as a split view controller,

00:08:31.816 --> 00:08:33.586 A:middle
can override the
traits for a child.

00:08:34.395 --> 00:08:36.756 A:middle
How do you do this?

00:08:36.936 --> 00:08:38.996 A:middle
Well, we've introduced
a couple of new methods

00:08:39.096 --> 00:08:42.216 A:middle
on UIViewController which
allow you to do precisely this.

00:08:42.326 --> 00:08:47.426 A:middle
SetOverrideTraitCollection
can be used by a parent

00:08:47.656 --> 00:08:50.676 A:middle
to indicate what the
appropriate traits are

00:08:50.676 --> 00:08:52.146 A:middle
for any one of its children.

00:08:52.366 --> 00:08:56.236 A:middle
The trait collection that
you pass in, in this case,

00:08:56.236 --> 00:08:57.966 A:middle
isn't a point in a trait space;

00:08:57.966 --> 00:09:02.936 A:middle
it might just be a single trait
value which is then overridden.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.966 --> 00:09:02.936 A:middle
it might just be a single trait
value which is then overridden.

00:09:03.446 --> 00:09:06.216 A:middle
So what I wanted to do was,
before I go into the rest

00:09:06.216 --> 00:09:08.856 A:middle
of the talk, is I put together
kind of a toy application,

00:09:09.606 --> 00:09:11.556 A:middle
which is going to highlight
some of the features

00:09:11.556 --> 00:09:12.876 A:middle
that we're going to
talk about today.

00:09:14.176 --> 00:09:18.806 A:middle
This is kind of my canonical
little photo note-taking

00:09:18.876 --> 00:09:19.986 A:middle
toy application.

00:09:20.836 --> 00:09:23.986 A:middle
What you see here is basically
a pretty standard thing.

00:09:23.986 --> 00:09:26.306 A:middle
You see a navigation controller.

00:09:26.776 --> 00:09:30.056 A:middle
And I can hit the Back
button with this Photos,

00:09:30.216 --> 00:09:32.766 A:middle
and I get a list, which
is a simple table view.

00:09:33.296 --> 00:09:35.956 A:middle
I can select things.

00:09:35.956 --> 00:09:36.576 A:middle
That's great.

00:09:37.276 --> 00:09:39.276 A:middle
What's interesting, is that
this is actually a split

00:09:39.276 --> 00:09:40.106 A:middle
view controller.

00:09:41.416 --> 00:09:46.236 A:middle
Notice when I rotate, I stay
inside a navigation controller.

00:09:46.556 --> 00:09:47.946 A:middle
However, I can do
something interesting.

00:09:47.946 --> 00:09:52.206 A:middle
You see there's a Split button
on the bottom of this toolbar.

00:09:52.516 --> 00:09:55.856 A:middle
If I hit it, you can now see
a little bit more clearly

00:09:55.856 --> 00:09:58.766 A:middle
that this is, in fact, really
a split view controller.

00:09:59.546 --> 00:10:04.046 A:middle
You'll also notice that
when I-let's hide this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.546 --> 00:10:04.046 A:middle
You'll also notice that
when I-let's hide this.

00:10:04.046 --> 00:10:06.256 A:middle
I can tap and interact
with the bars.

00:10:06.256 --> 00:10:12.016 A:middle
I can create, I can move that
primary controller off-screen.

00:10:12.646 --> 00:10:15.656 A:middle
But one of the things we're
going to show is how easy it is

00:10:15.656 --> 00:10:20.126 A:middle
to hide the bars if I
tap on a view controller.

00:10:20.126 --> 00:10:22.166 A:middle
I can also get that Safari look

00:10:22.386 --> 00:10:24.876 A:middle
where the bars condense
really easily.

00:10:28.066 --> 00:10:32.816 A:middle
Alright. Let's go back

00:10:32.816 --> 00:10:37.816 A:middle
into a regular old
navigation controller look,

00:10:37.946 --> 00:10:40.976 A:middle
and let's hit this Note button.

00:10:41.046 --> 00:10:46.336 A:middle
The Note button is going
to do a presentation.

00:10:46.336 --> 00:10:48.416 A:middle
This is a view controller
presentation.

00:10:49.036 --> 00:10:51.716 A:middle
It takes advantage of
a couple of new classes

00:10:51.716 --> 00:10:54.126 A:middle
that I might mention as
we go through the talk.

00:10:55.036 --> 00:10:58.356 A:middle
What's interesting is this is,
in fact, a popover presentation.

00:10:59.006 --> 00:11:00.816 A:middle
Now, I'll get into
that a little bit later


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.006 --> 00:11:00.816 A:middle
Now, I'll get into
that a little bit later

00:11:00.816 --> 00:11:01.826 A:middle
because it certainly
doesn't look

00:11:01.826 --> 00:11:03.326 A:middle
like a popover presentation.

00:11:03.806 --> 00:11:07.986 A:middle
But if I do something special
on this little toy app-well,

00:11:07.986 --> 00:11:09.526 A:middle
it didn't quite do it that time.

00:11:10.296 --> 00:11:12.906 A:middle
Now you'll see that that same
thing is, in fact, a popover.

00:11:12.906 --> 00:11:15.266 A:middle
And we'll go through
that a little bit.

00:11:16.296 --> 00:11:20.426 A:middle
Finally, I wanted to talk about,
a little bit about rotation.

00:11:20.506 --> 00:11:25.376 A:middle
And to do that, I'm going to
present another view controller.

00:11:25.376 --> 00:11:28.116 A:middle
This time it's a collection view
controller, which has a bunch

00:11:28.116 --> 00:11:29.826 A:middle
of little thumbnail photos.

00:11:29.826 --> 00:11:31.816 A:middle
And if I were to
rotate the device now,

00:11:32.366 --> 00:11:36.116 A:middle
the normal collection view flow
layout behavior would basically

00:11:36.116 --> 00:11:39.686 A:middle
relay things out so that
everything is oriented now

00:11:39.946 --> 00:11:41.536 A:middle
in the horizontal direction.

00:11:41.986 --> 00:11:45.926 A:middle
However, if I wanted to change
what happened when I rotated

00:11:45.926 --> 00:11:48.116 A:middle
so that it did something
more akin to this,

00:11:48.116 --> 00:11:51.956 A:middle
there's some interesting
things that we can do.

00:11:52.206 --> 00:11:56.966 A:middle
And this is a perfect example
of when you would use some

00:11:56.966 --> 00:11:58.716 A:middle
of the methods like willRotate,

00:11:58.716 --> 00:12:00.476 A:middle
interface orientation,
and so forth.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.716 --> 00:12:00.476 A:middle
interface orientation,
and so forth.

00:12:00.476 --> 00:12:02.486 A:middle
So we're going to talk about
that a little bit, as well.

00:12:03.296 --> 00:12:06.356 A:middle
Alright, so enough of a taste of
what we're going to talk about.

00:12:06.356 --> 00:12:10.836 A:middle
Let's go back to
the presentation.

00:12:15.106 --> 00:12:17.106 A:middle
And let's talk about
split view controller.

00:12:20.276 --> 00:12:24.866 A:middle
So as I kind of implied, split
view controller is now available

00:12:25.236 --> 00:12:27.696 A:middle
on the phone, as
well as on the iPad,

00:12:27.986 --> 00:12:32.316 A:middle
and it has this interesting
new property.

00:12:32.546 --> 00:12:35.546 A:middle
It has a property of being
collapsed or not collapsed.

00:12:36.556 --> 00:12:39.196 A:middle
Now, what does it mean for
a split view controller

00:12:39.196 --> 00:12:41.456 A:middle
to be collapsed or expanded?

00:12:42.256 --> 00:12:45.316 A:middle
Well, an expanded
split view controller,

00:12:45.896 --> 00:12:47.956 A:middle
it's kind of obvious,
might look like this.

00:12:48.566 --> 00:12:51.086 A:middle
However, it's not
just a question

00:12:51.086 --> 00:12:53.516 A:middle
of the two children
being visible.

00:12:54.466 --> 00:12:58.846 A:middle
So I'm highlighting the
secondary view controller

00:12:58.846 --> 00:13:02.806 A:middle
of this split view controller,
and you're going to notice


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.846 --> 00:13:02.806 A:middle
of this split view controller,
and you're going to notice

00:13:02.806 --> 00:13:05.606 A:middle
that there's a little
button off to the left.

00:13:05.606 --> 00:13:07.536 A:middle
We call that the
displayModeButtonItem.

00:13:08.176 --> 00:13:11.596 A:middle
When I click on that,
I can expand

00:13:11.596 --> 00:13:13.106 A:middle
out the split view controller.

00:13:13.386 --> 00:13:14.866 A:middle
And even though we're
only looking

00:13:14.866 --> 00:13:16.496 A:middle
at the secondary controller,

00:13:16.656 --> 00:13:19.766 A:middle
that split view controller
is still expanded.

00:13:19.766 --> 00:13:20.976 A:middle
It is not collapsed.

00:13:20.976 --> 00:13:23.486 A:middle
And the reason why that is
is because it's possible

00:13:23.776 --> 00:13:27.396 A:middle
to show the primary
controller at the same time

00:13:27.766 --> 00:13:29.896 A:middle
as the secondary controller.

00:13:30.356 --> 00:13:35.456 A:middle
On the other hand, this is a
collapsed split view controller.

00:13:35.486 --> 00:13:38.146 A:middle
You'll notice that the
displayModeButtonItem that was

00:13:38.146 --> 00:13:39.656 A:middle
on the left side is gone.

00:13:39.656 --> 00:13:41.836 A:middle
You can no longer
show the primary

00:13:41.836 --> 00:13:43.856 A:middle
and secondary controllers
together.

00:13:44.106 --> 00:13:47.026 A:middle
They've been collapsed,
and you can now get

00:13:47.026 --> 00:13:49.536 A:middle
to the primary controller
by hitting the Back button,

00:13:49.696 --> 00:13:51.806 A:middle
which is up on the
top-left corner.

00:13:52.266 --> 00:13:53.636 A:middle
So that's kind of
what the difference is

00:13:53.636 --> 00:13:54.996 A:middle
between the split
view controller

00:13:54.996 --> 00:13:57.576 A:middle
in its collapsed state
and its expanded state.

00:13:58.806 --> 00:14:02.456 A:middle
It's important to know
that split view controller


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:58.806 --> 00:14:02.456 A:middle
It's important to know
that split view controller

00:14:02.456 --> 00:14:06.286 A:middle
by default are collapsed
when they're

00:14:06.286 --> 00:14:08.736 A:middle
in horizontally compact
containers.

00:14:09.226 --> 00:14:13.216 A:middle
So by default on a phone, if
you use a split view controller,

00:14:13.216 --> 00:14:18.996 A:middle
it's going to appear in
this collapsed state.

00:14:19.186 --> 00:14:24.126 A:middle
So I've implied that you can
enable the expanded state

00:14:24.126 --> 00:14:26.276 A:middle
of a split view controller
on the phone already.

00:14:27.336 --> 00:14:28.136 A:middle
How do you do that?

00:14:28.946 --> 00:14:31.246 A:middle
Well, it's actually quite
simple and straightforward.

00:14:32.356 --> 00:14:34.136 A:middle
You probably know
the answer already.

00:14:34.816 --> 00:14:38.096 A:middle
First of all, you're going to
take your split view controller

00:14:38.096 --> 00:14:39.476 A:middle
and you're going to embed it

00:14:39.476 --> 00:14:45.676 A:middle
in a parent container view
controller, as follows.

00:14:46.896 --> 00:14:51.666 A:middle
You're then going to call
setOverrideTraitCollection.

00:14:52.626 --> 00:14:56.546 A:middle
And you're going to inform that
child split view controller

00:14:56.546 --> 00:14:59.846 A:middle
that it is now in a horizontally
regular environment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:01.196 --> 00:15:05.876 A:middle
The second you do that, the
split view controller morphs

00:15:05.876 --> 00:15:09.606 A:middle
into its expanded or
not collapsed state.

00:15:10.596 --> 00:15:12.686 A:middle
You'll notice that the
displayModeButtonItem,

00:15:12.686 --> 00:15:15.206 A:middle
which is titled Photos
in the lower left corner,

00:15:15.206 --> 00:15:16.716 A:middle
has now become enabled.

00:15:17.696 --> 00:15:21.596 A:middle
If I wanted to show both
controllers together,

00:15:21.596 --> 00:15:26.156 A:middle
side by side, I could click
on that displayModeButtonItem.

00:15:26.696 --> 00:15:28.956 A:middle
But we've also introduced
a property called

00:15:28.956 --> 00:15:31.826 A:middle
preferredDisplayMode, which
you can use programmatically.

00:15:34.746 --> 00:15:38.446 A:middle
If you set the
preferredDisplayMode

00:15:38.446 --> 00:15:44.416 A:middle
to the all visible
value, it's the same as,

00:15:45.216 --> 00:15:47.236 A:middle
the same behavior would
occur as if you clicked

00:15:47.236 --> 00:15:48.666 A:middle
on the displayModeButtonItem.

00:15:48.666 --> 00:15:51.216 A:middle
And you'll also notice the
displayModeButtonItem morphs

00:15:51.436 --> 00:15:55.926 A:middle
into this kind of
diagonal double arrow.

00:15:57.576 --> 00:16:00.346 A:middle
These items, this
display mode item


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.576 --> 00:16:00.346 A:middle
These items, this
display mode item

00:16:00.346 --> 00:16:03.006 A:middle
and this behavior
are all customizable.

00:16:03.006 --> 00:16:06.226 A:middle
And this is via delegate
API that you can look

00:16:06.226 --> 00:16:07.556 A:middle
at in the header files
that I'm not going

00:16:07.556 --> 00:16:09.116 A:middle
to have time to talk
about today.

00:16:09.626 --> 00:16:14.536 A:middle
So to go over some of that API,

00:16:14.536 --> 00:16:18.626 A:middle
preferredDisplayMode
is an enumeration.

00:16:19.326 --> 00:16:23.576 A:middle
Enumerated values are automatic,
hidden, visible, and overlay.

00:16:23.636 --> 00:16:25.716 A:middle
Automatic is the old behavior

00:16:25.716 --> 00:16:28.356 A:middle
that you are familiar
with on iPads.

00:16:29.096 --> 00:16:31.576 A:middle
Hidden and visible
are explicit means

00:16:31.576 --> 00:16:34.296 A:middle
by which you can
control the layout

00:16:34.296 --> 00:16:36.796 A:middle
of the split view
controller so that the primary

00:16:36.796 --> 00:16:38.516 A:middle
and secondary are side by side.

00:16:38.776 --> 00:16:40.636 A:middle
An overlay is an explicit way

00:16:40.636 --> 00:16:43.096 A:middle
that you can have the
primary kind of go

00:16:43.096 --> 00:16:45.006 A:middle
over the top of the secondary.

00:16:47.536 --> 00:16:52.356 A:middle
The displayModeButtonItem is
also accessible in this API,

00:16:52.356 --> 00:16:55.326 A:middle
so you can ask the split view
controller for it and put it

00:16:55.326 --> 00:16:56.536 A:middle
in whatever bar you want.

00:16:56.536 --> 00:16:59.676 A:middle
Although I'm not going to say it
explicitly, if you were to look

00:16:59.676 --> 00:17:01.786 A:middle
in the header files of
UISplitViewController,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.676 --> 00:17:01.786 A:middle
in the header files of
UISplitViewController,

00:17:01.786 --> 00:17:04.955 A:middle
you would find that most
of the API that used

00:17:04.955 --> 00:17:07.955 A:middle
to be there is now deprecated
and replaced by new API.

00:17:11.366 --> 00:17:13.786 A:middle
One thing that I'd like
to say is that a lot

00:17:13.786 --> 00:17:16.965 A:middle
of people have always wanted
to control the split width,

00:17:16.965 --> 00:17:18.976 A:middle
and we've made that
really easy to do.

00:17:23.406 --> 00:17:25.165 A:middle
So there's a new
method, a new property,

00:17:25.165 --> 00:17:27.205 A:middle
preferredPrimary
ColumnWidthFraction.

00:17:27.366 --> 00:17:29.756 A:middle
And if I were to set
that to one-half, say,

00:17:31.206 --> 00:17:32.756 A:middle
the split width changes.

00:17:35.476 --> 00:17:38.606 A:middle
The API that enables
that is this.

00:17:38.606 --> 00:17:41.126 A:middle
You can set a minimum
and maximum bound

00:17:41.126 --> 00:17:43.266 A:middle
of the split width
in terms of points.

00:17:44.396 --> 00:17:46.706 A:middle
You specify the split
in terms of a fraction

00:17:46.706 --> 00:17:49.616 A:middle
and you can read back
the actual point value

00:17:50.136 --> 00:17:51.806 A:middle
with the primary
column width property.

00:17:55.676 --> 00:17:56.966 A:middle
So what have we learned here?

00:17:57.456 --> 00:18:00.056 A:middle
One is, is that split view
controllers can be used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.456 --> 00:18:00.056 A:middle
One is, is that split view
controllers can be used

00:18:00.056 --> 00:18:01.606 A:middle
on both the iPhone and the iPad.

00:18:01.876 --> 00:18:05.606 A:middle
This makes it easy to write
code that is kind of agnostic

00:18:05.606 --> 00:18:08.596 A:middle
about the platform that it's
going to be deployed on.

00:18:09.016 --> 00:18:11.506 A:middle
If you have a certain
type of application layout

00:18:11.506 --> 00:18:15.016 A:middle
that makes sense in
either a collapsed state

00:18:15.016 --> 00:18:17.406 A:middle
or an expanded split view
controller state based

00:18:17.406 --> 00:18:21.166 A:middle
on the available space,
create a split view controller

00:18:21.166 --> 00:18:23.536 A:middle
and the split view controller
will adapt accordingly.

00:18:25.726 --> 00:18:28.276 A:middle
Split view controllers
are collapsed by default

00:18:28.276 --> 00:18:30.446 A:middle
in horizontally compact
environments.

00:18:32.696 --> 00:18:35.996 A:middle
The displayMode property
controls the appearance

00:18:35.996 --> 00:18:39.586 A:middle
of the primary or left
child view controller.

00:18:39.586 --> 00:18:44.956 A:middle
And you can also now
specify the split width.

00:18:47.426 --> 00:18:50.866 A:middle
So there are a lot of
other API that we added

00:18:50.866 --> 00:18:51.956 A:middle
to split view controller.

00:18:52.746 --> 00:18:55.076 A:middle
There's going to be a talk
immediately following this one

00:18:55.076 --> 00:18:58.696 A:middle
which talks about in more depth
all of the new adaptive APIs

00:18:58.696 --> 00:19:01.146 A:middle
that we've added
to UIViewController


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.696 --> 00:19:01.146 A:middle
that we've added
to UIViewController

00:19:01.146 --> 00:19:03.796 A:middle
and UISplitViewController
that you can attend

00:19:03.796 --> 00:19:05.906 A:middle
and get more information.

00:19:07.036 --> 00:19:08.986 A:middle
So let's talk about
condensing bars.

00:19:10.176 --> 00:19:13.096 A:middle
It's all about available space
and highlighting your content.

00:19:13.156 --> 00:19:15.116 A:middle
So we wanted to make
it easy to do.

00:19:15.886 --> 00:19:18.166 A:middle
It's really easy now
to hide your bars.

00:19:19.656 --> 00:19:24.456 A:middle
Just set the hideBarsOnTop
property, and they're gone.

00:19:24.556 --> 00:19:24.676 A:middle
If you-

00:19:27.516 --> 00:19:33.306 A:middle
[ Applause ]

00:19:33.806 --> 00:19:35.336 A:middle
So what about that
gray, you know,

00:19:35.336 --> 00:19:39.106 A:middle
kind of Safari-looking
condensing bar behavior?

00:19:39.436 --> 00:19:41.326 A:middle
Well, we've added a
property for that, too.

00:19:42.176 --> 00:19:45.656 A:middle
Just set it to YES; when you
swipe, those bars condense.

00:19:46.516 --> 00:19:52.716 A:middle
[ Applause ]

00:19:53.216 --> 00:19:55.946 A:middle
So we've added a couple of
other properties, as well.

00:19:56.056 --> 00:19:58.696 A:middle
You know, the bars
can hide when you're

00:19:58.696 --> 00:20:01.596 A:middle
in a vertically compact
environment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.696 --> 00:20:01.596 A:middle
in a vertically compact
environment.

00:20:02.256 --> 00:20:04.546 A:middle
They might condense when
the keyboard appears.

00:20:04.546 --> 00:20:07.736 A:middle
You can control this
all programmatically

00:20:07.736 --> 00:20:11.596 A:middle
with an animatable property
called navigationBarCondensed.

00:20:11.736 --> 00:20:14.116 A:middle
Well, at least you can
control the condensing behavior

00:20:14.116 --> 00:20:17.586 A:middle
that way.

00:20:17.796 --> 00:20:20.606 A:middle
So, yeah, that's it
for condensing bars.

00:20:22.656 --> 00:20:25.666 A:middle
Okay, now the easy
stuff is all done.

00:20:25.666 --> 00:20:27.946 A:middle
Let's talk about
presentation controllers.

00:20:28.976 --> 00:20:31.966 A:middle
We have revamped the
presentation architecture

00:20:31.966 --> 00:20:34.986 A:middle
for view controllers on iOS 8.

00:20:37.036 --> 00:20:41.626 A:middle
You might recall that in
iOS 7 we allowed developers

00:20:41.626 --> 00:20:45.066 A:middle
for the first time to
customize what the presentation

00:20:45.066 --> 00:20:46.986 A:middle
transitions looked like.

00:20:48.236 --> 00:20:51.476 A:middle
Let's go back and
kind of talk about how

00:20:51.476 --> 00:20:53.426 A:middle
that looked and how
you did that.

00:20:53.996 --> 00:20:56.586 A:middle
So, first of all, what you
would do is, the view controller

00:20:56.586 --> 00:20:58.166 A:middle
that you wanted to present,

00:20:58.426 --> 00:21:01.766 A:middle
you would set the
presentation style to Custom.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.426 --> 00:21:01.766 A:middle
you would set the
presentation style to Custom.

00:21:03.016 --> 00:21:06.116 A:middle
You would also set a
transitioning delegate

00:21:06.176 --> 00:21:09.546 A:middle
on that presented, on that view
controller to be presented.

00:21:10.106 --> 00:21:13.106 A:middle
And then you would just
present the way you normally do.

00:21:13.346 --> 00:21:14.816 A:middle
You'd tell the presenting
view controller

00:21:14.816 --> 00:21:18.066 A:middle
presentViewController, at which
point the system takes over.

00:21:19.626 --> 00:21:22.876 A:middle
UIKit will ask the
transitioning delegate

00:21:23.146 --> 00:21:26.776 A:middle
for the animation
controller that is your object

00:21:26.776 --> 00:21:27.626 A:middle
that is vended

00:21:27.626 --> 00:21:29.836 A:middle
by the transitioning
delegate that you've set.

00:21:29.836 --> 00:21:35.266 A:middle
At which point UIKit
prepares this internal object

00:21:36.386 --> 00:21:39.886 A:middle
which conforms to this context
transitioning protocol to set

00:21:39.886 --> 00:21:42.636 A:middle
up some information that
you need to know in order

00:21:42.636 --> 00:21:44.706 A:middle
to drive your custom transition.

00:21:45.766 --> 00:21:47.596 A:middle
The views that are participating

00:21:47.636 --> 00:21:51.276 A:middle
in this custom presentation
are accessed via this

00:21:51.276 --> 00:21:53.146 A:middle
viewControllerForKey property.

00:21:53.146 --> 00:21:55.006 A:middle
And then there's
frame information

00:21:55.006 --> 00:21:55.976 A:middle
and all of that stuff.

00:21:56.296 --> 00:22:00.826 A:middle
Now this object is passed into
another method that is generated


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:56.296 --> 00:22:00.826 A:middle
Now this object is passed into
another method that is generated

00:22:00.826 --> 00:22:04.926 A:middle
by UIKit to your animation
controller, animateTransition.

00:22:05.776 --> 00:22:09.486 A:middle
You do your animation, the
presentation's complete,

00:22:09.716 --> 00:22:11.666 A:middle
and the animation
controller goes away,

00:22:11.666 --> 00:22:13.176 A:middle
and everything's good.

00:22:13.176 --> 00:22:17.566 A:middle
Well, there were a couple
of problems with that.

00:22:17.566 --> 00:22:19.496 A:middle
Let's look at the view hierarchy

00:22:19.586 --> 00:22:22.006 A:middle
to see what those
problems might have been.

00:22:23.086 --> 00:22:25.116 A:middle
So we have the presenting
view controller's view.

00:22:26.186 --> 00:22:29.226 A:middle
When the animation controller's
vended, we set up kind

00:22:29.226 --> 00:22:32.166 A:middle
of the environment in which this
transition animation is going

00:22:32.166 --> 00:22:33.196 A:middle
to take place.

00:22:33.376 --> 00:22:36.116 A:middle
That's kind of the container
view that the context,

00:22:36.116 --> 00:22:38.816 A:middle
the transitioning
context is pointing

00:22:38.816 --> 00:22:40.996 A:middle
to that your animation
controller accesses.

00:22:42.516 --> 00:22:46.896 A:middle
When we send the
animateTransition message

00:22:46.896 --> 00:22:48.296 A:middle
to the animation controller,

00:22:49.786 --> 00:22:52.156 A:middle
it's the animation
controller now that's groveling

00:22:52.156 --> 00:22:55.406 A:middle
in the view hierarchy,
adding special views,

00:22:55.486 --> 00:22:58.156 A:middle
adding the presented
view controller's view,

00:22:58.486 --> 00:23:02.996 A:middle
and one of the neat things-it
was a feature in iOS 7-is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.486 --> 00:23:02.996 A:middle
and one of the neat things-it
was a feature in iOS 7-is

00:23:02.996 --> 00:23:04.606 A:middle
that we didn't remove
the presenting view

00:23:04.606 --> 00:23:05.476 A:middle
controller's view.

00:23:05.856 --> 00:23:09.316 A:middle
And so this is what
it ended up with,

00:23:09.316 --> 00:23:10.906 A:middle
and the animation
controller went away.

00:23:12.346 --> 00:23:15.906 A:middle
Okay, so the first question
that comes to mind is,

00:23:16.506 --> 00:23:19.346 A:middle
what object owns all these
other-these views that are lying

00:23:19.346 --> 00:23:22.426 A:middle
around that just got added
by that animation controller?

00:23:22.426 --> 00:23:25.546 A:middle
Well, there wasn't a
good answer for that.

00:23:25.546 --> 00:23:29.746 A:middle
In fact, that ended up
causing a tight coupling

00:23:30.206 --> 00:23:31.806 A:middle
between the animation
controllers

00:23:31.806 --> 00:23:34.486 A:middle
that were doing a presentation
and the animation controllers

00:23:34.486 --> 00:23:35.706 A:middle
that were doing a dismissal.

00:23:36.446 --> 00:23:39.316 A:middle
Sometimes that was
easy to manage.

00:23:39.436 --> 00:23:41.076 A:middle
Sometimes it caused problems.

00:23:41.646 --> 00:23:42.976 A:middle
It often caused problems

00:23:42.976 --> 00:23:45.576 A:middle
when view controller
presentations were being stacked

00:23:45.576 --> 00:23:46.566 A:middle
on top of one another.

00:23:48.206 --> 00:23:50.066 A:middle
So let's look at
what we do in iOS 8.

00:23:50.706 --> 00:23:53.046 A:middle
It's going to look pretty
similar in the beginning.

00:23:53.046 --> 00:23:55.086 A:middle
You're going to set
the presentation style,

00:23:55.446 --> 00:23:56.286 A:middle
just like before.

00:23:56.286 --> 00:23:58.556 A:middle
You're going to set a
transitioning delegate,

00:23:58.986 --> 00:23:59.916 A:middle
just like before.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:00.966 --> 00:24:03.996 A:middle
You're going to send a
presentViewController message

00:24:04.056 --> 00:24:06.746 A:middle
to the presenting view
controller, just like before.

00:24:08.476 --> 00:24:12.396 A:middle
However, now the transitioning
delegate has grown a couple

00:24:12.396 --> 00:24:13.166 A:middle
of new methods.

00:24:13.466 --> 00:24:16.806 A:middle
You can now get then
this new object called a

00:24:16.806 --> 00:24:18.056 A:middle
presentation controller.

00:24:19.436 --> 00:24:24.326 A:middle
And now it is the presentation
controller that's responsible

00:24:24.516 --> 00:24:26.186 A:middle
for asking the transitioning
delegate

00:24:26.266 --> 00:24:29.976 A:middle
for the animation
controller and, in fact,

00:24:29.976 --> 00:24:32.826 A:middle
for driving the actual
transition.

00:24:32.826 --> 00:24:34.726 A:middle
Now, there's a lot of
neat things under the hood

00:24:34.726 --> 00:24:37.006 A:middle
that are going on
here, and there's going

00:24:37.006 --> 00:24:39.856 A:middle
to be a whole talk
tomorrow, I believe,

00:24:39.906 --> 00:24:41.916 A:middle
about presentation
controllers, in depth,

00:24:41.916 --> 00:24:46.826 A:middle
and how we used the UIKit to
introduce some new API, as well.

00:24:47.796 --> 00:24:50.796 A:middle
But for now, let's
look at what's going

00:24:50.796 --> 00:24:51.806 A:middle
on in the view hierarchy.

00:24:52.936 --> 00:24:56.846 A:middle
So now, you'll remember you
have this view hierarchy

00:24:56.846 --> 00:24:58.756 A:middle
that corresponds to
this custom transition.

00:24:59.066 --> 00:25:00.836 A:middle
The presentation
controller's still around,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.066 --> 00:25:00.836 A:middle
The presentation
controller's still around,

00:25:00.836 --> 00:25:03.676 A:middle
and it holds a reference
to the container view,

00:25:03.986 --> 00:25:06.306 A:middle
which is where the whole
transition is happening.

00:25:07.546 --> 00:25:08.826 A:middle
It also holds a reference

00:25:08.826 --> 00:25:10.586 A:middle
to this thing called
a presented view.

00:25:11.286 --> 00:25:12.676 A:middle
Now I want to point out,

00:25:12.676 --> 00:25:16.576 A:middle
the presented view is
not necessarily the view

00:25:16.576 --> 00:25:18.546 A:middle
of the view controller
that's being presented.

00:25:19.346 --> 00:25:21.776 A:middle
Maybe I put a drop
shadow around that view

00:25:21.896 --> 00:25:24.406 A:middle
because that's what my
custom presentation demanded.

00:25:25.956 --> 00:25:28.306 A:middle
In order to accommodate that,

00:25:29.516 --> 00:25:32.746 A:middle
we had to augment the context
transitioning protocol a

00:25:32.746 --> 00:25:33.196 A:middle
little bit.

00:25:33.386 --> 00:25:36.536 A:middle
So we added this new
method called viewForKey.

00:25:37.346 --> 00:25:39.426 A:middle
ViewControllerForKey
still exists,

00:25:39.426 --> 00:25:42.266 A:middle
but viewForKey may
return a different view

00:25:42.266 --> 00:25:44.406 A:middle
than the viewControllerForKey.

00:25:44.636 --> 00:25:46.876 A:middle
And so when you build a
custom animation controller,

00:25:46.876 --> 00:25:50.296 A:middle
you want to make sure that
you use the viewForKey methods

00:25:50.296 --> 00:25:53.426 A:middle
to figure out which views
are actually participating

00:25:53.656 --> 00:25:54.526 A:middle
in the animation.

00:25:58.056 --> 00:26:02.366 A:middle
A presentation controller can
also add other types of views


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.056 --> 00:26:02.366 A:middle
A presentation controller can
also add other types of views

00:26:02.366 --> 00:26:05.966 A:middle
that are completely
unknown to other types

00:26:05.966 --> 00:26:09.176 A:middle
of presentation controllers,
say, like a dimming view

00:26:09.176 --> 00:26:13.976 A:middle
that it wants to put over the
entire back of the presentation.

00:26:15.926 --> 00:26:18.256 A:middle
I mentioned that in iOS 7,

00:26:18.676 --> 00:26:22.196 A:middle
by default the presenting view
controller's view was left

00:26:22.196 --> 00:26:23.266 A:middle
in the window hierarchy.

00:26:23.346 --> 00:26:25.576 A:middle
Well, presentation controllers
have a very rich API,

00:26:25.576 --> 00:26:29.536 A:middle
and if you build your own,
you can specify properties

00:26:29.536 --> 00:26:34.156 A:middle
such as shouldRemove, should the
presentation view controller's

00:26:34.156 --> 00:26:35.326 A:middle
view be removed or not.

00:26:35.326 --> 00:26:38.316 A:middle
And if you set it to YES, it
will automatically get removed.

00:26:40.156 --> 00:26:43.596 A:middle
There's one other property
which is, I'm raising here

00:26:43.596 --> 00:26:44.896 A:middle
because I think anyone

00:26:44.896 --> 00:26:46.966 A:middle
who builds a custom
presentation controller needs

00:26:46.966 --> 00:26:48.326 A:middle
to at least be aware of,

00:26:48.646 --> 00:26:50.416 A:middle
which is the
shouldPresentInFullscreen

00:26:50.416 --> 00:26:50.926 A:middle
property.

00:26:51.236 --> 00:26:55.276 A:middle
What this means is that a
presentation will effectively,

00:26:55.276 --> 00:27:00.596 A:middle
its container will be in the
window and its, and the frame


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:55.276 --> 00:27:00.596 A:middle
its container will be in the
window and its, and the frame

00:27:00.596 --> 00:27:03.126 A:middle
of that container view will
effectively be the bounds

00:27:03.126 --> 00:27:03.746 A:middle
of the window.

00:27:04.346 --> 00:27:11.416 A:middle
If you implement a custom
presentation controller and set

00:27:11.416 --> 00:27:12.976 A:middle
that property to NO,

00:27:13.796 --> 00:27:16.006 A:middle
your presentation
will no longer adapt.

00:27:17.236 --> 00:27:19.666 A:middle
Now, I know that doesn't make
quite a lot of sense yet,

00:27:19.666 --> 00:27:21.766 A:middle
but we're going to
go through some stuff

00:27:21.766 --> 00:27:23.956 A:middle
and then it will
become more clear.

00:27:25.356 --> 00:27:30.506 A:middle
So let's quickly talk about some
of the API that has been added

00:27:30.556 --> 00:27:32.066 A:middle
for presentation controllers.

00:27:32.486 --> 00:27:34.416 A:middle
One is that you'll
notice that it appears,

00:27:34.416 --> 00:27:37.006 A:middle
it conforms to the
appearance container protocol,

00:27:37.316 --> 00:27:40.156 A:middle
the trait environment
protocol, and this new protocol

00:27:40.156 --> 00:27:42.506 A:middle
which we'll talk about in a
bit called content container.

00:27:43.106 --> 00:27:45.406 A:middle
We talked about the
containerView properties

00:27:45.406 --> 00:27:48.446 A:middle
and the presentedView method
and these two other properties.

00:27:48.576 --> 00:27:53.596 A:middle
As I said, there's a whole bunch
of methods and logic available

00:27:53.596 --> 00:27:56.976 A:middle
for you to create fantastic
new custom presentations.

00:27:57.836 --> 00:28:00.986 A:middle
But that's beyond the
scope of this talk.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:57.836 --> 00:28:00.986 A:middle
But that's beyond the
scope of this talk.

00:28:01.176 --> 00:28:03.356 A:middle
So armed with this
new architecture,

00:28:03.576 --> 00:28:05.416 A:middle
let's talk about some
features that we've added.

00:28:06.586 --> 00:28:11.436 A:middle
First of all, all the old
iPad-only presentations are now

00:28:11.436 --> 00:28:13.606 A:middle
available on the iPhone.

00:28:14.146 --> 00:28:15.836 A:middle
By default they're
going to present

00:28:16.066 --> 00:28:17.866 A:middle
to full-screen presentations.

00:28:18.556 --> 00:28:20.626 A:middle
But there's some power
under the hood here.

00:28:21.606 --> 00:28:26.036 A:middle
So new presentation styles that
are available that we've added,

00:28:26.516 --> 00:28:29.716 A:middle
again, that are both available
on the phone and the iPad,

00:28:29.716 --> 00:28:31.886 A:middle
is an OverFullscreen
presentation,

00:28:32.646 --> 00:28:36.316 A:middle
an OverCurrentContext
presentation, and,

00:28:36.316 --> 00:28:38.146 A:middle
I think I mentioned before,

00:28:38.146 --> 00:28:40.586 A:middle
popovers are now
presentations, as well.

00:28:45.396 --> 00:28:48.766 A:middle
Every presentation has an
associated presentation

00:28:48.766 --> 00:28:52.336 A:middle
controller, and you can access
these with these methods.

00:28:52.716 --> 00:28:54.706 A:middle
And the reason you do so
is because you often want

00:28:54.706 --> 00:28:57.656 A:middle
to set the delegate on the
presentation controller.

00:28:57.986 --> 00:29:00.956 A:middle
And now the plot thickens
because the delegate is,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.986 --> 00:29:00.956 A:middle
And now the plot thickens
because the delegate is,

00:29:00.956 --> 00:29:03.016 A:middle
in fact, the object
that is going

00:29:03.016 --> 00:29:06.726 A:middle
to help your presentations adapt
to different trait environments.

00:29:07.566 --> 00:29:09.186 A:middle
Before we get into that,

00:29:09.546 --> 00:29:11.176 A:middle
let's make sure we all
understand what the new

00:29:11.176 --> 00:29:14.176 A:middle
presentation styles
are all about.

00:29:14.176 --> 00:29:18.146 A:middle
OverFullscreen is kind of
a full-screen presentation

00:29:18.146 --> 00:29:20.046 A:middle
that doesn't remove
the presenting view

00:29:20.046 --> 00:29:20.886 A:middle
controller's view.

00:29:21.296 --> 00:29:25.676 A:middle
So you can create interesting
kind of overlay types

00:29:25.676 --> 00:29:29.596 A:middle
of presentations
really easily now.

00:29:29.786 --> 00:29:32.716 A:middle
OverCurrentContext
is pretty similar.

00:29:34.916 --> 00:29:37.446 A:middle
If you know what current
context presentations are,

00:29:37.446 --> 00:29:42.386 A:middle
it's presentations that are
kind of constrained inside

00:29:42.386 --> 00:29:45.206 A:middle
of the presenting view
controller's super view.

00:29:46.076 --> 00:29:48.546 A:middle
So that's what
OverCurrentContext gives you.

00:29:49.966 --> 00:29:51.336 A:middle
And, finally, we have popover.

00:29:51.846 --> 00:29:54.626 A:middle
And we all know what
popover looks like.

00:29:55.596 --> 00:29:59.416 A:middle
This is a good opportunity
for me to say that we're kind

00:29:59.416 --> 00:30:02.006 A:middle
of soft-deprecating
UIPopoverController.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.416 --> 00:30:02.006 A:middle
of soft-deprecating
UIPopoverController.

00:30:02.616 --> 00:30:07.016 A:middle
We're not hard-deprecating
it, but you should be aware

00:30:07.016 --> 00:30:09.326 A:middle
that all the popover controller,

00:30:09.326 --> 00:30:13.076 A:middle
old popover controller API
is now being shimmed kind

00:30:13.076 --> 00:30:16.546 A:middle
of behind the scenes into
a popover presentation.

00:30:17.326 --> 00:30:20.416 A:middle
This might create a couple
of differences in behavior.

00:30:20.656 --> 00:30:24.426 A:middle
For the most part, these things
are functionally equivalent.

00:30:24.796 --> 00:30:27.976 A:middle
There are a few corner cases,
though, that you might run into.

00:30:27.976 --> 00:30:30.106 A:middle
For example, if you have
a pop, if you have code

00:30:30.106 --> 00:30:31.516 A:middle
that was presenting a popover

00:30:32.236 --> 00:30:33.756 A:middle
and then immediately
dismissed it

00:30:33.756 --> 00:30:37.416 A:middle
and did another presentation
the next line, you're going

00:30:37.416 --> 00:30:39.036 A:middle
to have to defer that.

00:30:39.036 --> 00:30:40.636 A:middle
And you can do that
pretty easily

00:30:40.756 --> 00:30:42.666 A:middle
by grabbing a transition
coordinator

00:30:42.666 --> 00:30:44.406 A:middle
and scheduling the
new presentation

00:30:44.406 --> 00:30:47.186 A:middle
for after the dismissal
of the popover.

00:30:51.056 --> 00:30:54.886 A:middle
So let's talk about how
presentations can adapt

00:30:55.116 --> 00:30:56.586 A:middle
to changing trait environments.

00:30:57.766 --> 00:31:02.246 A:middle
As I mentioned, all of
these presentations, styles,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.766 --> 00:31:02.246 A:middle
As I mentioned, all of
these presentations, styles,

00:31:02.246 --> 00:31:06.426 A:middle
adapt by default in horizontally
compact environments

00:31:06.426 --> 00:31:07.166 A:middle
to full-screen.

00:31:10.336 --> 00:31:14.586 A:middle
Now, it's possible to
change that default behavior

00:31:15.026 --> 00:31:18.706 A:middle
to be OverFullscreen or
to be not, which means,

00:31:18.866 --> 00:31:22.106 A:middle
"Please don't adapt; keep
my presentation controller

00:31:22.166 --> 00:31:23.656 A:middle
as is, in charge."

00:31:25.796 --> 00:31:28.586 A:middle
The way you control this
behavior, as I implied,

00:31:28.586 --> 00:31:30.156 A:middle
was you set the delegate
and you're going

00:31:30.156 --> 00:31:32.296 A:middle
to override a couple, or you're
going to implement a couple

00:31:32.296 --> 00:31:33.486 A:middle
of methods on that delegate.

00:31:35.496 --> 00:31:36.826 A:middle
So here they are.

00:31:38.676 --> 00:31:40.926 A:middle
The first is
adaptivePresentationStyle

00:31:40.926 --> 00:31:42.126 A:middle
ForPresentationController.

00:31:42.876 --> 00:31:45.286 A:middle
It does what its name implies.

00:31:45.686 --> 00:31:48.576 A:middle
It's called when the
presentation moves

00:31:48.576 --> 00:31:51.676 A:middle
into a horizontally compact
environment and you return one

00:31:51.676 --> 00:31:54.926 A:middle
of those presentation styles
that I enumerated earlier.

00:31:55.806 --> 00:31:57.996 A:middle
There's another method that
might be a little less clear

00:31:57.996 --> 00:32:00.796 A:middle
which allows you to actually
return a whole new view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.996 --> 00:32:00.796 A:middle
which allows you to actually
return a whole new view

00:32:00.796 --> 00:32:03.176 A:middle
controller that should be
presented in that style.

00:32:03.696 --> 00:32:05.766 A:middle
And we'll see what
that means in a bit.

00:32:05.766 --> 00:32:09.746 A:middle
There's a PopoverPresentation
ControllerDelegate,

00:32:09.746 --> 00:32:11.916 A:middle
which I'm not going to
go into detail about.

00:32:11.916 --> 00:32:14.226 A:middle
But suffice it to say
that that delegate,

00:32:14.686 --> 00:32:20.026 A:middle
in addition to providing the
adaptive APIs, also exposes all

00:32:20.026 --> 00:32:22.026 A:middle
of the properties and
methods that you need

00:32:22.026 --> 00:32:26.756 A:middle
to get the functionally
equivalent popover behavior

00:32:26.756 --> 00:32:27.426 A:middle
you're used to.

00:32:28.146 --> 00:32:30.856 A:middle
We'll see a little bit of a
code example of that shortly.

00:32:31.896 --> 00:32:33.036 A:middle
In fact, very shortly.

00:32:33.456 --> 00:32:38.096 A:middle
So what does it mean to
present a popover in iOS 8?

00:32:38.806 --> 00:32:41.186 A:middle
Well, you could use the
old APIs, as I said,

00:32:41.186 --> 00:32:42.756 A:middle
on UIPopoverController.

00:32:42.756 --> 00:32:48.046 A:middle
But I want to show how you
would do it using the new APIs.

00:32:50.206 --> 00:32:53.226 A:middle
So the first thing you
do, not too surprisingly,

00:32:53.226 --> 00:32:55.986 A:middle
is you set the presentation
style to popover.

00:32:57.806 --> 00:32:59.576 A:middle
Now, interestingly
you can grab the

00:32:59.576 --> 00:33:02.376 A:middle
PopoverPresentationController
before you've even


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.576 --> 00:33:02.376 A:middle
PopoverPresentationController
before you've even

00:33:02.376 --> 00:33:03.256 A:middle
presented anything.

00:33:03.746 --> 00:33:06.336 A:middle
That's important because you're
going to need to do things

00:33:06.336 --> 00:33:10.106 A:middle
like say, "What's the bar button
item that I'm pointing to?"

00:33:10.106 --> 00:33:11.736 A:middle
and "What do my arrows
look like?"

00:33:12.266 --> 00:33:15.446 A:middle
You might also want to specify
a preferred content size

00:33:15.446 --> 00:33:18.616 A:middle
so that we know kind of
how to size the popover.

00:33:18.616 --> 00:33:23.296 A:middle
And, finally, you
present the popover.

00:33:24.366 --> 00:33:25.886 A:middle
So what's that going
to look like?

00:33:27.056 --> 00:33:32.096 A:middle
So if I wrote that code and
executed it just the way you saw

00:33:32.096 --> 00:33:36.406 A:middle
on the previous slide, it's
going to look like that.

00:33:37.466 --> 00:33:38.596 A:middle
Now, the first thing I want

00:33:38.596 --> 00:33:41.476 A:middle
to say is it is a
popover presentation.

00:33:43.576 --> 00:33:46.666 A:middle
The second thing I want to say
is there's a couple of problems.

00:33:49.916 --> 00:33:55.756 A:middle
So the first problem is that
it underlaps the status bar.

00:33:56.016 --> 00:33:57.476 A:middle
This is one of my favorite bugs.

00:33:57.476 --> 00:33:59.906 A:middle
I can't tell you how
many bugs I get about

00:33:59.906 --> 00:34:02.116 A:middle
"My content's underneath
the status bar."


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.906 --> 00:34:02.116 A:middle
"My content's underneath
the status bar."

00:34:02.116 --> 00:34:04.406 A:middle
I'm not going to go into that,

00:34:04.486 --> 00:34:07.056 A:middle
but I thought I would
just mention that.

00:34:07.966 --> 00:34:14.056 A:middle
The second thing is
it looks pretty bad.

00:34:14.246 --> 00:34:18.216 A:middle
And a more subtle point that
I'm sure all of you got was,

00:34:18.636 --> 00:34:20.156 A:middle
it's a popover presentation

00:34:20.156 --> 00:34:24.045 A:middle
and I can't tap anywhere
to dismiss it.

00:34:24.315 --> 00:34:26.335 A:middle
Okay, so what are
we going to do?

00:34:26.366 --> 00:34:27.795 A:middle
Well, we're going
to go to our friend,

00:34:27.795 --> 00:34:30.085 A:middle
the trusty presentation
controller delegate,

00:34:30.085 --> 00:34:33.346 A:middle
and we're going to use some
of those new adaptive APIs.

00:34:33.346 --> 00:34:37.085 A:middle
And in particular, I'm
going to implement,

00:34:37.085 --> 00:34:40.216 A:middle
I would implement
adaptivePresentationStyle

00:34:40.396 --> 00:34:41.766 A:middle
ForPresentationController.

00:34:41.766 --> 00:34:45.045 A:middle
This time I'm going to have
it return OverFullscreen.

00:34:45.045 --> 00:34:49.956 A:middle
I'm going to use this brand new
view object that we introduced

00:34:50.136 --> 00:34:52.815 A:middle
in iOS 8 called the
UIVisualEffectView,

00:34:52.815 --> 00:34:56.255 A:middle
which will become your best
blurry friend in iOS 8.

00:34:57.286 --> 00:34:59.206 A:middle
And then inside of
that implementation,

00:34:59.206 --> 00:35:02.736 A:middle
I can adjust the content, like
where it's actually positioned.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.206 --> 00:35:02.736 A:middle
I can adjust the content, like
where it's actually positioned.

00:35:03.766 --> 00:35:05.836 A:middle
So that should address a
couple of the problems.

00:35:07.056 --> 00:35:12.256 A:middle
So now I get this kind
of nifty blurred view,

00:35:12.256 --> 00:35:14.536 A:middle
which looks a lot better
than that ugly white thing.

00:35:14.796 --> 00:35:16.736 A:middle
I've repositioned my content.

00:35:17.116 --> 00:35:18.786 A:middle
It's a different adaptation.

00:35:19.006 --> 00:35:20.526 A:middle
The reason it's blurring
so nicely is

00:35:20.526 --> 00:35:22.906 A:middle
because I didn't remove the
presenting view controller's

00:35:22.906 --> 00:35:23.856 A:middle
view underneath.

00:35:25.106 --> 00:35:27.706 A:middle
However, we still have the
problem that there's no way

00:35:27.706 --> 00:35:28.876 A:middle
to dismiss the popover.

00:35:29.856 --> 00:35:31.086 A:middle
So how do we fix this?

00:35:32.446 --> 00:35:34.766 A:middle
Well, you might have recalled

00:35:34.936 --> 00:35:39.346 A:middle
that there was another
delegate API that I talked

00:35:39.346 --> 00:35:40.626 A:middle
about that I deferred kind

00:35:40.626 --> 00:35:43.076 A:middle
of explaining why I,
why it was useful.

00:35:43.076 --> 00:35:44.776 A:middle
We're going to go
back to the delegate,

00:35:44.776 --> 00:35:48.366 A:middle
and this time we're going

00:35:48.366 --> 00:35:50.836 A:middle
to also implement
presentationController:

00:35:50.836 --> 00:35:53.096 A:middle
viewController
ForAdaptivePresentationStyle.

00:35:53.506 --> 00:35:54.776 A:middle
So this is pretty nifty.

00:35:54.776 --> 00:35:55.786 A:middle
What we're going to
do is we're going

00:35:55.786 --> 00:36:00.136 A:middle
to create a navigation
controller whose root view


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:55.786 --> 00:36:00.136 A:middle
to create a navigation
controller whose root view

00:36:00.136 --> 00:36:03.686 A:middle
controller is the currently
presented view controller.

00:36:03.686 --> 00:36:06.966 A:middle
We're going to add
a Dismiss button

00:36:06.966 --> 00:36:10.766 A:middle
to that navigation controller's
bar, navigation bar.

00:36:10.766 --> 00:36:14.066 A:middle
And then we're going
to be good to go.

00:36:15.136 --> 00:36:17.716 A:middle
So now when I hit Note,

00:36:19.946 --> 00:36:24.396 A:middle
I get this great looking
OverFullscreen adapted

00:36:24.396 --> 00:36:25.796 A:middle
popover presentation.

00:36:26.436 --> 00:36:28.586 A:middle
There's a Done button,
so I can dismiss it.

00:36:31.426 --> 00:36:32.286 A:middle
So that's great.

00:36:32.286 --> 00:36:36.456 A:middle
But what if I actually
just wanted a popover?

00:36:36.456 --> 00:36:37.496 A:middle
Well, you can do that, too.

00:36:38.566 --> 00:36:40.706 A:middle
Let's go back to our
trusty delegate friend,

00:36:40.766 --> 00:36:45.816 A:middle
and it's this time an
adaptivePresentationStyle

00:36:45.816 --> 00:36:47.186 A:middle
ForPresentationController.

00:36:47.946 --> 00:36:49.886 A:middle
All I need to do is return None.

00:36:51.136 --> 00:36:52.466 A:middle
And if I return None,

00:36:52.466 --> 00:36:55.416 A:middle
the presentation controller is
not going to be adapted at all.

00:36:56.816 --> 00:37:01.496 A:middle
And now when I hit the Note
button, I get an actual popover.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:56.816 --> 00:37:01.496 A:middle
And now when I hit the Note
button, I get an actual popover.

00:37:02.516 --> 00:37:09.926 A:middle
[ Applause ]

00:37:10.426 --> 00:37:13.176 A:middle
So let's kind of go
over what we saw here.

00:37:14.126 --> 00:37:18.826 A:middle
First is, presentation
controllers are a new object

00:37:18.826 --> 00:37:22.696 A:middle
in iOS 8 that make it
easier and more consistent

00:37:22.696 --> 00:37:25.656 A:middle
to create powerful
custom presentations.

00:37:25.996 --> 00:37:32.476 A:middle
They are an improvement over
what was introduced in iOS 7.

00:37:32.476 --> 00:37:36.446 A:middle
Every presentation is associated
with a presentation controller,

00:37:36.446 --> 00:37:39.406 A:middle
which can be accessed,
and you can use

00:37:39.406 --> 00:37:42.136 A:middle
that presentation controller
to do various things,

00:37:42.136 --> 00:37:44.596 A:middle
depending on the
presentation control.

00:37:45.076 --> 00:37:49.696 A:middle
But all presentation controllers
can use, can have a delegate

00:37:49.746 --> 00:37:54.706 A:middle
that conforms to these
adapting delegate protocols.

00:37:55.386 --> 00:37:57.556 A:middle
One thing that isn't
on this screen is

00:37:57.556 --> 00:38:00.516 A:middle
that popovers are also
presentation controllers,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.556 --> 00:38:00.516 A:middle
that popovers are also
presentation controllers,

00:38:00.936 --> 00:38:03.816 A:middle
or are presentations
that have an associated

00:38:03.816 --> 00:38:04.806 A:middle
presentation control.

00:38:04.806 --> 00:38:07.906 A:middle
And, finally, if you create your
own presentation controller-I

00:38:07.906 --> 00:38:11.036 A:middle
mentioned this earlier-if
it returns YES

00:38:11.036 --> 00:38:13.866 A:middle
to shouldPresentInFullscreen,
it will be able to adapt.

00:38:14.206 --> 00:38:16.466 A:middle
If, on the other hand, your
presentation controller is kind

00:38:16.466 --> 00:38:19.076 A:middle
of a current context
style presentation,

00:38:19.256 --> 00:38:21.416 A:middle
it doesn't really make
too much sense for that

00:38:21.416 --> 00:38:23.106 A:middle
to adapt, so it doesn't.

00:38:23.106 --> 00:38:26.326 A:middle
We're not going to go through
those adaptive delegate calls

00:38:26.326 --> 00:38:27.026 A:middle
in that case.

00:38:29.596 --> 00:38:33.726 A:middle
Alright, that's enough for
presentation controllers,

00:38:33.726 --> 00:38:36.896 A:middle
although this topic
actually kind of overlaps

00:38:36.896 --> 00:38:39.946 A:middle
or has some overlap with
presentation controllers:

00:38:40.776 --> 00:38:42.386 A:middle
transition coordinators.

00:38:42.856 --> 00:38:47.726 A:middle
Again, those were
introduced in iOS 7.

00:38:49.186 --> 00:38:49.976 A:middle
What is it?

00:38:51.136 --> 00:38:56.446 A:middle
Well, it's an object that
conforms to this protocol.

00:38:57.266 --> 00:39:05.936 A:middle
Every transition coordinator
has an associated transition,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.266 --> 00:39:05.936 A:middle
Every transition coordinator
has an associated transition,

00:39:06.456 --> 00:39:13.166 A:middle
and that associated transition
is oftentimes deferred.

00:39:13.166 --> 00:39:15.966 A:middle
And this transition
coordinator is kind

00:39:15.966 --> 00:39:19.076 A:middle
of holding this freeze-dried
transition as it gets passed

00:39:19.076 --> 00:39:21.226 A:middle
around to various pieces of code

00:39:21.566 --> 00:39:24.376 A:middle
that can then use this method
called animateAlongside

00:39:24.376 --> 00:39:25.556 A:middle
TransitionCompletion.

00:39:25.556 --> 00:39:28.676 A:middle
So you can kind of queue
up blocks of animations

00:39:28.676 --> 00:39:30.316 A:middle
that are going to
execute in that kind

00:39:30.316 --> 00:39:34.136 A:middle
of deferred transition
animation that is associated

00:39:34.136 --> 00:39:35.606 A:middle
with that transition
coordinator.

00:39:36.036 --> 00:39:37.546 A:middle
So that's pretty powerful.

00:39:37.546 --> 00:39:40.336 A:middle
It was introduced in iOS 7,
and we're taking advantage

00:39:40.336 --> 00:39:42.466 A:middle
of this object in
a few new APIs.

00:39:45.496 --> 00:39:49.636 A:middle
So, two of these are
viewWillTransitionToSize:

00:39:49.756 --> 00:39:51.026 A:middle
withTransitionCoordinator;

00:39:54.056 --> 00:39:56.836 A:middle
next one is
willTransitionToTraitCollection:

00:39:56.966 --> 00:39:58.296 A:middle
withTransitionCoordinator.

00:39:58.826 --> 00:40:00.416 A:middle
Now, I'm not going
to talk too much


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.826 --> 00:40:00.416 A:middle
Now, I'm not going
to talk too much

00:40:00.416 --> 00:40:02.516 A:middle
about
willTransitionToTraitCollection.

00:40:03.316 --> 00:40:06.246 A:middle
But I did mention earlier that
trait collections are kind

00:40:06.246 --> 00:40:09.176 A:middle
of associated with coarse
application structure.

00:40:10.616 --> 00:40:12.626 A:middle
And one of the best ways

00:40:12.626 --> 00:40:18.186 A:middle
to adapt an application-it's not
the only way, but it's one-is

00:40:18.186 --> 00:40:21.476 A:middle
to implement
willTransitionToTraitCollection,

00:40:21.476 --> 00:40:25.456 A:middle
and when a trait collection,
such as a size class, say,

00:40:25.796 --> 00:40:29.356 A:middle
that may change, say,
if you rotate a device

00:40:29.356 --> 00:40:31.566 A:middle
or if you set an
override trait collection,

00:40:31.766 --> 00:40:33.026 A:middle
this method will be invoked

00:40:33.266 --> 00:40:37.376 A:middle
and you can actually do some
coarse-grained application kind

00:40:37.376 --> 00:40:39.316 A:middle
of re-jiggering, if you want.

00:40:39.616 --> 00:40:41.926 A:middle
Now, again, there's going
to be a whole talk that goes

00:40:41.926 --> 00:40:44.616 A:middle
into a lot more detail on
that particular method.

00:40:45.146 --> 00:40:47.106 A:middle
It's very parallel
to the other method,

00:40:47.106 --> 00:40:49.806 A:middle
viewWillTransitionToSize:
withTransitionCoordinator

00:40:50.436 --> 00:40:51.556 A:middle
that I'm going to talk about.

00:40:52.366 --> 00:40:54.126 A:middle
By the way, did I forget
to mention this is part

00:40:54.126 --> 00:40:57.246 A:middle
of a new protocol called the
content, UIContentContainer?

00:40:57.436 --> 00:40:58.086 A:middle
I mentioned

00:40:58.086 --> 00:41:01.366 A:middle
that UIPresentationController
conforms to this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.086 --> 00:41:01.366 A:middle
that UIPresentationController
conforms to this.

00:41:01.866 --> 00:41:05.076 A:middle
UIViewController also
conforms to this protocol.

00:41:06.886 --> 00:41:08.596 A:middle
These objects support a notion

00:41:08.596 --> 00:41:11.206 A:middle
of a preferred content
size that you can set.

00:41:11.206 --> 00:41:14.506 A:middle
And that's kind of the
request, if you will,

00:41:14.906 --> 00:41:18.986 A:middle
that you like your content size
to grow or shrink depending

00:41:18.986 --> 00:41:22.306 A:middle
on the circumstances
of your application.

00:41:23.096 --> 00:41:26.716 A:middle
When you set that, your
parent container object,

00:41:26.716 --> 00:41:30.466 A:middle
whatever that might be-it might
be a parent view controller,

00:41:30.466 --> 00:41:33.536 A:middle
it might be a presentation
controller-will get a

00:41:33.536 --> 00:41:37.156 A:middle
preferredContentSizeDid
ChangeForChildContentContainer.

00:41:37.676 --> 00:41:40.876 A:middle
In that method, the
parent can decide what

00:41:40.876 --> 00:41:42.046 A:middle
to do with the request.

00:41:43.246 --> 00:41:46.316 A:middle
If it decides that it actually
wants to honor the request,

00:41:47.486 --> 00:41:51.076 A:middle
it may turn around and call
viewWillTransitionToSize:

00:41:51.076 --> 00:41:53.536 A:middle
withTransitionCoordinator
on the child,

00:41:54.176 --> 00:41:57.686 A:middle
which gives the child
the ability

00:41:58.176 --> 00:42:01.986 A:middle
to animate alongside
that size change.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.176 --> 00:42:01.986 A:middle
to animate alongside
that size change.

00:42:03.516 --> 00:42:08.026 A:middle
So let me kind of make a
small digression and kind

00:42:08.026 --> 00:42:10.126 A:middle
of give a bit of wisdom.

00:42:10.126 --> 00:42:13.026 A:middle
And I realize that Anonymous
is actually Josh Shaffer

00:42:13.446 --> 00:42:15.236 A:middle
because I think I
heard this from him.

00:42:16.796 --> 00:42:21.206 A:middle
And you might wonder, why am I
throwing this random point out?

00:42:21.516 --> 00:42:24.216 A:middle
First, let's see
what we mean here.

00:42:24.626 --> 00:42:26.776 A:middle
Basically if I rotate
a device in general,

00:42:26.776 --> 00:42:28.296 A:middle
that's all that's happening.

00:42:28.496 --> 00:42:30.996 A:middle
The fact that there's an
animated transform rotation is

00:42:30.996 --> 00:42:32.176 A:middle
kind of beside the point.

00:42:33.336 --> 00:42:36.196 A:middle
And most of the time your
application really doesn't need

00:42:36.196 --> 00:42:36.906 A:middle
to do anything.

00:42:36.906 --> 00:42:39.866 A:middle
It's going to gracefully
stretch and do whatever it needs

00:42:39.866 --> 00:42:42.966 A:middle
to do as the bounds change.

00:42:46.236 --> 00:42:48.616 A:middle
Okay, so what does that mean?

00:42:48.616 --> 00:42:51.746 A:middle
Well, you will recall that we
have these APIs that have been

00:42:51.746 --> 00:42:54.226 A:middle
around for a long time.

00:42:54.746 --> 00:42:56.286 A:middle
Well, we're getting rid of them.

00:42:56.946 --> 00:43:02.646 A:middle
And [Applause]-ah, I thought
you guys all loved these.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:56.946 --> 00:43:02.646 A:middle
And [Applause]-ah, I thought
you guys all loved these.

00:43:03.596 --> 00:43:08.576 A:middle
So one of the things about these
APIs, and I think I've been

00:43:08.576 --> 00:43:13.166 A:middle
on this stage before saying,
"You shouldn't do layout based

00:43:13.166 --> 00:43:15.146 A:middle
on interface orientation.

00:43:15.146 --> 00:43:17.616 A:middle
You shouldn't use these
methods to drive your layout."

00:43:18.126 --> 00:43:20.186 A:middle
They're really kind
of focused methods.

00:43:20.186 --> 00:43:23.356 A:middle
You wanted to use them because
you wanted to participate

00:43:23.586 --> 00:43:25.026 A:middle
in this rotation event.

00:43:25.426 --> 00:43:26.866 A:middle
So now we've generalized it.

00:43:26.866 --> 00:43:30.066 A:middle
We have this other method called
viewWillTransitionToSize:w

00:43:30.066 --> 00:43:32.936 A:middle
ithTransitionCoordinator
that takes over.

00:43:33.976 --> 00:43:37.766 A:middle
So, first of all, all those
rotation callbacks can be

00:43:37.766 --> 00:43:40.826 A:middle
replaced with this
more general notion

00:43:41.146 --> 00:43:43.726 A:middle
of viewWillTransitionToSize:
withTransitionCoordinator.

00:43:44.006 --> 00:43:47.126 A:middle
I talked about setting
the preferred content size

00:43:47.126 --> 00:43:48.796 A:middle
and that you get
this notification.

00:43:48.796 --> 00:43:50.436 A:middle
Well, so if your widget

00:43:50.436 --> 00:43:53.016 A:middle
in the notification center
actually wants to request

00:43:53.016 --> 00:43:57.886 A:middle
to be displayed in a slightly
larger space or smaller space,

00:43:59.286 --> 00:44:04.016 A:middle
this API will be called on your
widget so that you can, in fact,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.286 --> 00:44:04.016 A:middle
this API will be called on your
widget so that you can, in fact,

00:44:04.256 --> 00:44:08.366 A:middle
animate alongside or run
some code that executes

00:44:08.616 --> 00:44:10.766 A:middle
after the resizing
has taken place.

00:44:10.896 --> 00:44:16.146 A:middle
I said that you can, your
own apps can respond to this.

00:44:16.946 --> 00:44:21.666 A:middle
Now, at one point I was going
to have a whole bunch of slides

00:44:21.666 --> 00:44:25.106 A:middle
that showed you how to implement
your own transition coordinator.

00:44:25.676 --> 00:44:27.866 A:middle
I didn't have time to do that,

00:44:28.166 --> 00:44:29.696 A:middle
but it's relatively
straightforward

00:44:29.696 --> 00:44:32.196 A:middle
and you can implement your own
transition coordinator that's

00:44:32.196 --> 00:44:33.926 A:middle
implement, that's
kind of associated

00:44:33.926 --> 00:44:36.326 A:middle
with your own transition
animation.

00:44:36.836 --> 00:44:39.816 A:middle
And if a child changes its size,

00:44:39.856 --> 00:44:41.476 A:middle
you can call
viewWillTransitionToSize

00:44:41.476 --> 00:44:46.156 A:middle
and pass in that object using
the transition coordinator.

00:44:47.186 --> 00:44:51.746 A:middle
Okay. So to really be
a replacement for kind

00:44:51.746 --> 00:44:55.536 A:middle
of the rotation, we kind of
had to give a little bit,

00:44:55.676 --> 00:45:02.036 A:middle
kind of get down off of our
high horses of, you know,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:55.676 --> 00:45:02.036 A:middle
kind of get down off of our
high horses of, you know,

00:45:02.396 --> 00:45:05.256 A:middle
the way things should be and
acknowledge the way things are.

00:45:05.906 --> 00:45:08.046 A:middle
And we added this
target transform.

00:45:08.396 --> 00:45:10.226 A:middle
So it's not so much
the orientation

00:45:10.226 --> 00:45:11.326 A:middle
that you really care about.

00:45:11.326 --> 00:45:15.006 A:middle
It's like what's the
transform that's kind of being,

00:45:15.006 --> 00:45:17.256 A:middle
that I'm participating
in an animation with?

00:45:18.656 --> 00:45:21.676 A:middle
The reason this is
important, and I'm going to get

00:45:21.676 --> 00:45:24.736 A:middle
to this later, is
we've actually changed

00:45:25.016 --> 00:45:28.466 A:middle
where the rotation
transforms live.

00:45:28.976 --> 00:45:30.466 A:middle
Some of you guys
may have noticed

00:45:30.466 --> 00:45:32.146 A:middle
that whenever you do a rotation

00:45:32.146 --> 00:45:33.806 A:middle
that it's the root
view controller

00:45:33.806 --> 00:45:39.206 A:middle
or the full-screen view
controller's layer that has kind

00:45:39.306 --> 00:45:41.706 A:middle
of the affine rotation
transformation directly

00:45:41.706 --> 00:45:42.746 A:middle
associated with it.

00:45:43.056 --> 00:45:44.966 A:middle
That's no longer
the case on iOS 8.

00:45:46.106 --> 00:45:48.596 A:middle
So when you implement
viewWillTransitionToSize,

00:45:48.596 --> 00:45:50.446 A:middle
you can ask for the
target transform,

00:45:50.446 --> 00:45:53.316 A:middle
and if it's not identity,
you are inside

00:45:53.316 --> 00:45:55.916 A:middle
of a rotation resize event

00:45:55.916 --> 00:45:57.676 A:middle
that you can do some
interesting things with.

00:45:58.016 --> 00:46:02.316 A:middle
So to show how these are similar


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.016 --> 00:46:02.316 A:middle
So to show how these are similar

00:46:02.316 --> 00:46:04.316 A:middle
or how this is a
direct replacement

00:46:04.316 --> 00:46:07.346 A:middle
for the old rotation callbacks,
this is some, you know,

00:46:07.956 --> 00:46:08.966 A:middle
skeleton code

00:46:09.446 --> 00:46:12.566 A:middle
where viewWillTransitionToSize
first calls myWillRotateTo

00:46:12.566 --> 00:46:16.596 A:middle
InterfaceOrientation,
which is exactly when it,

00:46:16.726 --> 00:46:18.686 A:middle
the old call would
have been made.

00:46:18.686 --> 00:46:22.816 A:middle
And then it uses the
transition coordinator

00:46:23.126 --> 00:46:26.916 A:middle
to animate alongside
myWillAnimateTo

00:46:27.646 --> 00:46:29.076 A:middle
InterfaceOrientation call.

00:46:29.076 --> 00:46:32.376 A:middle
And, finally, in the
completion block is

00:46:32.376 --> 00:46:35.006 A:middle
when you would call
myDidAnimateFrom

00:46:35.006 --> 00:46:36.726 A:middle
InterfaceOrientation.

00:46:36.796 --> 00:46:40.476 A:middle
So you can kind of see
that WillTransitionToSize:

00:46:40.736 --> 00:46:43.166 A:middle
withTransitionCoordinator
is identical

00:46:43.286 --> 00:46:45.166 A:middle
or provides the identical
functionality.

00:46:45.166 --> 00:46:48.466 A:middle
It's actually more powerful
and, from my perspective,

00:46:48.466 --> 00:46:50.516 A:middle
it's a lot easier to
read code like this.

00:46:52.176 --> 00:46:53.896 A:middle
Okay, I know you
guys are all sad

00:46:54.096 --> 00:46:55.766 A:middle
that these methods have gone.

00:46:55.766 --> 00:46:57.626 A:middle
So if you don't implement
viewWillTransitionToSize:

00:46:57.626 --> 00:47:00.046 A:middle
withTransitionCoordinator
will still call them,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.626 --> 00:47:00.046 A:middle
withTransitionCoordinator
will still call them,

00:47:00.426 --> 00:47:01.766 A:middle
just don't implement it.

00:47:02.376 --> 00:47:04.676 A:middle
A subtle point that
you should be aware

00:47:04.676 --> 00:47:09.626 A:middle
of is most view controller
transitions are immediate

00:47:09.806 --> 00:47:11.566 A:middle
when the system calls
this method.

00:47:11.606 --> 00:47:14.806 A:middle
What does that mean?

00:47:15.326 --> 00:47:16.916 A:middle
It means that if you needed

00:47:16.916 --> 00:47:19.146 A:middle
to rearrange your
application's structure

00:47:19.146 --> 00:47:24.246 A:middle
in some significant way and
you do like pushViewController

00:47:24.246 --> 00:47:26.926 A:middle
or something like that, the
entire view hierarchy is going

00:47:26.926 --> 00:47:29.376 A:middle
to be updated immediately.

00:47:29.376 --> 00:47:31.076 A:middle
So you can do neat
things with that

00:47:31.076 --> 00:47:32.626 A:middle
in your transition animations.

00:47:35.036 --> 00:47:39.736 A:middle
Unlike rotation callbacks,
by default we're going

00:47:39.776 --> 00:47:41.786 A:middle
to forward
viewWillTransitionToSize

00:47:42.326 --> 00:47:45.916 A:middle
through the entire
presentation hierarchy,

00:47:45.916 --> 00:47:48.406 A:middle
through the entire
view controller

00:47:48.406 --> 00:47:49.536 A:middle
containment hierarchy.

00:47:49.896 --> 00:47:52.476 A:middle
All you need to do is call
super to get that behavior.

00:47:52.746 --> 00:47:55.376 A:middle
If you don't, we will no
longer propagate those.

00:47:55.376 --> 00:47:57.236 A:middle
So you probably want
to call super.

00:47:59.556 --> 00:48:02.706 A:middle
Finally I'm going to say that
you only really need this,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.556 --> 00:48:02.706 A:middle
Finally I'm going to say that
you only really need this,

00:48:02.736 --> 00:48:05.156 A:middle
I kind of implied it before,
when you're doing some kind

00:48:05.156 --> 00:48:06.856 A:middle
of special size transition.

00:48:07.356 --> 00:48:11.136 A:middle
More often than not, autolayout
and other techniques are going

00:48:11.136 --> 00:48:14.256 A:middle
to be-layout techniques are
going to more than suffice

00:48:14.806 --> 00:48:16.416 A:middle
to handle a size transition.

00:48:18.776 --> 00:48:22.126 A:middle
So I wanted to, I showed this
example earlier in the demo

00:48:22.126 --> 00:48:24.436 A:middle
and I wanted to show
when would be a good time

00:48:24.436 --> 00:48:26.626 A:middle
that you might want to use
viewWillTransitionToSize.

00:48:27.876 --> 00:48:29.846 A:middle
So here's a collection
view controller.

00:48:29.846 --> 00:48:33.696 A:middle
If I rotate it, what's
going to end up happening

00:48:33.696 --> 00:48:34.786 A:middle
if I did nothing at all,

00:48:34.786 --> 00:48:39.246 A:middle
is I get-the default collection
view flow layout will give me

00:48:39.246 --> 00:48:40.086 A:middle
something like this.

00:48:40.086 --> 00:48:43.986 A:middle
You'll notice kind of how the
thumbnails have shifted around

00:48:43.986 --> 00:48:47.866 A:middle
and things have resized and
maybe that's what I want.

00:48:48.176 --> 00:48:49.656 A:middle
But maybe I want something else.

00:48:50.366 --> 00:48:53.116 A:middle
Maybe I don't want the
collection view controller's

00:48:53.116 --> 00:48:54.496 A:middle
view to rotate at all,

00:48:54.496 --> 00:48:58.546 A:middle
and I want to apply the counter
transform on each of the cells.

00:48:59.886 --> 00:49:00.826 A:middle
Something like that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.886 --> 00:49:00.826 A:middle
Something like that.

00:49:00.826 --> 00:49:04.856 A:middle
So this would be a great time
to use viewWillTransitionToSize.

00:49:04.856 --> 00:49:06.696 A:middle
And let's see how
that would look.

00:49:07.506 --> 00:49:10.386 A:middle
The first thing that you do is
you get that targetTransform

00:49:10.386 --> 00:49:11.546 A:middle
that I was talking about.

00:49:11.996 --> 00:49:14.706 A:middle
And we're going to
invert it, and we're going

00:49:14.706 --> 00:49:18.576 A:middle
to grab our old view
bounds and set things

00:49:18.576 --> 00:49:20.746 A:middle
up for our transition
coordinator.

00:49:21.496 --> 00:49:23.496 A:middle
So inside the alongside block,

00:49:23.496 --> 00:49:24.986 A:middle
we're going to basically
call transition

00:49:24.986 --> 00:49:26.606 A:middle
coordinator animateAlongside.

00:49:27.266 --> 00:49:29.396 A:middle
We're going to update
the transform

00:49:30.306 --> 00:49:33.896 A:middle
to basically undo the rotation
transform that's taking effect.

00:49:33.896 --> 00:49:35.386 A:middle
You'll notice that
I'm composing it

00:49:35.386 --> 00:49:37.276 A:middle
with the existing
transform because, hell,

00:49:37.276 --> 00:49:39.136 A:middle
I might be in a different
orientation already.

00:49:39.536 --> 00:49:41.866 A:middle
So I do that.

00:49:41.866 --> 00:49:45.136 A:middle
I then squirrel away
the counter rotation,

00:49:45.136 --> 00:49:48.246 A:middle
which effectively is
the transform that is,

00:49:48.476 --> 00:49:50.606 A:middle
I am animating with right now.

00:49:50.606 --> 00:49:53.286 A:middle
I update my bounds
to the old bounds

00:49:53.286 --> 00:49:56.986 A:middle
because I've now applied
the counter transform

00:49:56.986 --> 00:49:59.506 A:middle
on the collection view
controller view's transform.

00:49:59.636 --> 00:50:03.396 A:middle
I'm done. I'm going
to not rotate,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.636 --> 00:50:03.396 A:middle
I'm done. I'm going
to not rotate,

00:50:03.396 --> 00:50:05.806 A:middle
the collection view controller
isn't going to rotate,

00:50:05.936 --> 00:50:08.746 A:middle
and those cells aren't
going to rotate either

00:50:08.746 --> 00:50:11.946 A:middle
until I hit the completion
block, at which point I'm going

00:50:11.946 --> 00:50:14.276 A:middle
to apply the counter
rotation to each of them.

00:50:15.676 --> 00:50:18.566 A:middle
Okay, so what did we learn?

00:50:20.046 --> 00:50:22.116 A:middle
Transition coordinators
are being used

00:50:22.116 --> 00:50:25.216 A:middle
in a lot of our adaptive APIs.

00:50:28.816 --> 00:50:32.046 A:middle
You can use a transition
coordinator in response

00:50:32.046 --> 00:50:35.186 A:middle
to preferredContent
SizeDidChange calls.

00:50:36.246 --> 00:50:38.666 A:middle
All of the rotation callbacks
are being deprecated.

00:50:41.446 --> 00:50:42.236 A:middle
That's about it.

00:50:42.846 --> 00:50:44.376 A:middle
So let's talk about
screen coordinates.

00:50:44.556 --> 00:50:48.716 A:middle
And this gets to where the
transforms are being applied

00:50:49.276 --> 00:50:50.126 A:middle
when we rotate.

00:50:54.536 --> 00:50:57.036 A:middle
So in iOS 8-I mean, iOS 7,

00:50:58.836 --> 00:51:02.486 A:middle
the screen orientation
was always fixed to kind


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:58.836 --> 00:51:02.486 A:middle
the screen orientation
was always fixed to kind

00:51:02.486 --> 00:51:07.396 A:middle
of the top left position
in portrait.

00:51:08.506 --> 00:51:10.386 A:middle
This gave you a fixed,

00:51:10.386 --> 00:51:13.496 A:middle
unchanging coordinate
system, if you needed it.

00:51:14.466 --> 00:51:18.516 A:middle
We ended up communicating
things like keyboard size

00:51:18.516 --> 00:51:22.136 A:middle
and other things in terms of
this fixed coordinate system,

00:51:22.956 --> 00:51:27.506 A:middle
even though the actual interface
orientation was the current top

00:51:27.506 --> 00:51:28.146 A:middle
left corner.

00:51:29.486 --> 00:51:31.366 A:middle
So in iOS 8, we're
changing that a bit,

00:51:32.666 --> 00:51:35.076 A:middle
and everything is now
interface oriented.

00:51:35.836 --> 00:51:37.986 A:middle
So the keyboard size
notifications are going

00:51:37.986 --> 00:51:39.596 A:middle
to be interface oriented.

00:51:39.596 --> 00:51:42.366 A:middle
A few other things are going
to be interface oriented.

00:51:46.716 --> 00:51:51.636 A:middle
But you still may need a
fixed coordinate system.

00:51:51.846 --> 00:51:54.566 A:middle
How do you do that?

00:51:55.616 --> 00:51:57.326 A:middle
Well, we introduced
a new protocol

00:51:57.326 --> 00:51:58.706 A:middle
called UICoordinateSpace.

00:51:58.706 --> 00:52:00.436 A:middle
And, by the way, this
is not in seed one.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:58.706 --> 00:52:00.436 A:middle
And, by the way, this
is not in seed one.

00:52:00.436 --> 00:52:04.006 A:middle
This will come out in a, you
know, a soon-to-follow seed.

00:52:05.026 --> 00:52:07.816 A:middle
We introduced a protocol
called UICoordinateSpace,

00:52:07.816 --> 00:52:10.196 A:middle
a couple of conversion routines,

00:52:10.526 --> 00:52:13.226 A:middle
to and from these
coordinate spaces.

00:52:13.286 --> 00:52:15.216 A:middle
It also implements
the bounds call.

00:52:17.606 --> 00:52:20.176 A:middle
UIView conforms to
this directly,

00:52:20.176 --> 00:52:21.616 A:middle
which isn't too surprising.

00:52:21.616 --> 00:52:23.526 A:middle
All the existing
conversion routines,

00:52:23.526 --> 00:52:25.166 A:middle
by the way, stay in place.

00:52:25.766 --> 00:52:28.706 A:middle
UIScreen now has grown
a couple of properties

00:52:28.706 --> 00:52:30.686 A:middle
that vend two different
coordinate spaces.

00:52:30.686 --> 00:52:34.016 A:middle
One is the default interface
oriented coordinate space

00:52:34.016 --> 00:52:37.946 A:middle
and the other is the old
portrait fixed coordinate space.

00:52:38.776 --> 00:52:42.396 A:middle
So if I wanted to
convert to and from

00:52:42.876 --> 00:52:45.056 A:middle
that fixed coordinate space,

00:52:45.446 --> 00:52:47.066 A:middle
what you effectively
do is you grab

00:52:47.066 --> 00:52:50.756 A:middle
that fixed coordinate space
off of the window's screen

00:52:51.276 --> 00:52:53.186 A:middle
and you can convert
to and from views.

00:52:56.696 --> 00:52:59.776 A:middle
So let's go over briefly
what we discussed today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:04.086 --> 00:53:06.136 A:middle
We talked a little bit
about trait collections,

00:53:06.466 --> 00:53:08.176 A:middle
how they affect kind

00:53:08.176 --> 00:53:11.576 A:middle
of the gross coarse-level
application structure

00:53:12.306 --> 00:53:15.846 A:middle
of your application, how
you can override them,

00:53:15.846 --> 00:53:18.816 A:middle
how view controllers can
override them, and a little bit

00:53:18.816 --> 00:53:21.186 A:middle
about how your view controllers

00:53:21.186 --> 00:53:23.566 A:middle
and your application can
adapt to those changes.

00:53:24.346 --> 00:53:29.816 A:middle
We introduced some of the new
UISplitViewController features,

00:53:30.506 --> 00:53:32.006 A:middle
and there are a lot of them.

00:53:32.006 --> 00:53:34.256 A:middle
I encourage you to kind of
look at the header files

00:53:34.256 --> 00:53:37.826 A:middle
and attend the talk after
this to see all the new

00:53:37.826 --> 00:53:40.386 A:middle
and amazing things you can do
with split view controller.

00:53:41.096 --> 00:53:43.266 A:middle
There are some new
simple properties

00:53:43.266 --> 00:53:45.196 A:middle
on navigation controller
that will allow you

00:53:45.196 --> 00:53:46.506 A:middle
to condense and hide bars.

00:53:47.916 --> 00:53:50.096 A:middle
We've introduced
PresentationController and,

00:53:50.256 --> 00:53:52.906 A:middle
in particular, we've revamped
the presentation hierarchy.

00:53:52.986 --> 00:53:54.926 A:middle
Popovers are now presentations.

00:53:54.926 --> 00:53:57.076 A:middle
We've introduced some
new presentation styles.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:00.136 --> 00:54:02.176 A:middle
We've added some new
API for transition

00:54:02.176 --> 00:54:04.206 A:middle
that utilize transition
coordinators,

00:54:04.936 --> 00:54:07.006 A:middle
and these are becoming
interesting objects

00:54:07.006 --> 00:54:10.416 A:middle
that are becoming more present
in more and more of our APIs.

00:54:10.946 --> 00:54:13.196 A:middle
We've deprecated the
old rotation callbacks

00:54:13.196 --> 00:54:15.526 A:middle
or the existing rotation
callbacks,

00:54:16.836 --> 00:54:19.566 A:middle
can be replaced by-that
logic can be replaced

00:54:19.566 --> 00:54:22.426 A:middle
by this new method,
viewWillTransitionToSize.

00:54:23.106 --> 00:54:26.966 A:middle
And, finally, screen bounds
is now interface oriented.

00:54:27.686 --> 00:54:33.116 A:middle
There's a lot of things in
UIKit that are new for iOS 8.

00:54:33.576 --> 00:54:34.776 A:middle
This is just some of them.

00:54:34.776 --> 00:54:37.426 A:middle
I encourage you: the talk right

00:54:37.426 --> 00:54:39.536 A:middle
after this one is
Building Adaptive Apps

00:54:39.536 --> 00:54:41.976 A:middle
with UIKit that's going to
go into much more detail

00:54:42.096 --> 00:54:45.796 A:middle
about all these new and great
adaptive APIs we have in UIKit.

00:54:46.476 --> 00:54:49.006 A:middle
Tomorrow there's going to be
a talk that goes into depth

00:54:49.186 --> 00:54:52.906 A:middle
about presentation controllers,
how we internally use them

00:54:52.906 --> 00:54:55.696 A:middle
to implement new replacements

00:54:55.696 --> 00:54:58.536 A:middle
for search controller
and alert controller.

00:54:58.536 --> 00:55:02.896 A:middle
We are, there was a talk
yesterday, I believe,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:58.536 --> 00:55:02.896 A:middle
We are, there was a talk
yesterday, I believe,

00:55:02.896 --> 00:55:04.376 A:middle
about creating extensions

00:55:04.376 --> 00:55:06.896 A:middle
that leverage the
viewWillTransition ToSize APIs.

00:55:06.896 --> 00:55:10.586 A:middle
There are some nice talks on
Friday, or there is a nice talk

00:55:10.586 --> 00:55:14.106 A:middle
on Friday about how
you can make your,

00:55:14.936 --> 00:55:16.536 A:middle
basically your transition
animations,

00:55:16.536 --> 00:55:19.286 A:middle
more responsive to
user interaction.

00:55:20.706 --> 00:55:21.676 A:middle
For more information,

00:55:21.676 --> 00:55:23.906 A:middle
please contact our
evangelist, Jake Behrens.

00:55:23.906 --> 00:55:26.626 A:middle
He'll be more than happy
to get you the sample app

00:55:26.626 --> 00:55:29.926 A:middle
and answer your questions and
tell you how it all works.

00:55:30.686 --> 00:55:34.776 A:middle
And have a great rest
of the conference.

00:55:35.026 --> 00:55:39.906 A:middle
Thank you.

00:55:39.906 --> 00:55:40.640 A:middle
[ Applause ]

