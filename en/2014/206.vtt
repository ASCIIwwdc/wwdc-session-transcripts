WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.086 --> 00:00:13.476 A:middle
&gt;&gt; Good afternoon, everyone.

00:00:13.556 --> 00:00:16.226 A:middle
My name is Anders, I am
an Engineer on the Safari

00:00:16.226 --> 00:00:18.956 A:middle
and WebKit Team, and
I'll be joined later

00:00:19.046 --> 00:00:20.686 A:middle
by my colleague Beth.

00:00:20.686 --> 00:00:22.786 A:middle
And this session is Session 206,

00:00:22.786 --> 00:00:24.956 A:middle
Introducing the Modern
WebKit API.

00:00:26.416 --> 00:00:28.006 A:middle
We've got a lot of
really cool things

00:00:28.006 --> 00:00:30.526 A:middle
to show you, so let's
get started.

00:00:31.516 --> 00:00:35.496 A:middle
So first, I think I want to
give you a brief overview

00:00:35.496 --> 00:00:38.356 A:middle
of what WebKit actually is.

00:00:39.466 --> 00:00:43.076 A:middle
One way you can think of it
is that WebKit is the layout

00:00:43.076 --> 00:00:49.576 A:middle
and rendering engine behind
Safari on Mac and iOS.

00:00:50.476 --> 00:00:55.856 A:middle
So WebKit parses and
renders HTML, it loads

00:00:55.856 --> 00:00:59.036 A:middle
and displays images, it runs
JavaScript, and so forth.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:01.706 --> 00:01:05.696 A:middle
Another way to look at
it is that WebKit starts

00:01:06.796 --> 00:01:08.956 A:middle
where the Safari
user interface ends.

00:01:11.736 --> 00:01:15.446 A:middle
But WebKit is also used by a
lot of other apps, such as mail

00:01:15.706 --> 00:01:17.476 A:middle
for displaying rich HTML email.

00:01:19.256 --> 00:01:22.086 A:middle
And iBooks for rendering
gorgeous ebooks.

00:01:24.136 --> 00:01:27.376 A:middle
And even applications you
wouldn't normally think were

00:01:27.376 --> 00:01:30.516 A:middle
using WebKit, like messages
for its conversation view.

00:01:31.076 --> 00:01:35.866 A:middle
And of course most
important of all, your apps.

00:01:36.296 --> 00:01:38.446 A:middle
You've done some really
amazing things with WebKit.

00:01:40.836 --> 00:01:45.216 A:middle
So if you're using WebKit
in your app today on iOS,

00:01:45.356 --> 00:01:46.646 A:middle
you're using UIWebView.

00:01:47.116 --> 00:01:48.726 A:middle
So let's have a quick
show of hands,

00:01:48.726 --> 00:01:51.786 A:middle
how many of you are using
UIWebView in an app today?

00:01:56.486 --> 00:01:59.276 A:middle
Wow. On iOS X, you will
be using a WebView.

00:01:59.566 --> 00:02:01.546 A:middle
And how many of you
are using a WebView?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.566 --> 00:02:01.546 A:middle
And how many of you
are using a WebView?

00:02:02.946 --> 00:02:10.175 A:middle
Cool. Now, over the years,
we've received a lot of requests

00:02:10.175 --> 00:02:14.926 A:middle
from you especially on iOS for
something a bit more powerful.

00:02:16.526 --> 00:02:19.396 A:middle
And we really think we have
something that you're going

00:02:19.396 --> 00:02:22.666 A:middle
to like, and that is
the modern WebKit API.

00:02:24.066 --> 00:02:27.516 A:middle
So what are you going
to learn today?

00:02:28.246 --> 00:02:31.306 A:middle
You'll see how to adopt
the modern WebKit API

00:02:31.306 --> 00:02:35.036 A:middle
and to use it in your apps.

00:02:35.236 --> 00:02:39.166 A:middle
We'll take a look at few
new cool features and how

00:02:39.166 --> 00:02:40.486 A:middle
to integrate those in your app.

00:02:41.296 --> 00:02:44.016 A:middle
And then we'll dive a bit deeper

00:02:44.146 --> 00:02:48.656 A:middle
and you can see how you can
customize the web WebKit loads

00:02:48.656 --> 00:02:52.096 A:middle
web pages, and even customize
the web content itself.

00:02:54.596 --> 00:02:58.276 A:middle
So the modern WebKit API.

00:02:58.816 --> 00:03:03.106 A:middle
Class for class, this
API is exactly the same


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.816 --> 00:03:03.106 A:middle
Class for class, this
API is exactly the same

00:03:03.146 --> 00:03:04.686 A:middle
on iOS and OS X.

00:03:04.686 --> 00:03:06.976 A:middle
Yeah, that's pretty cool.

00:03:07.516 --> 00:03:10.786 A:middle
[ Applause ]

00:03:11.286 --> 00:03:14.756 A:middle
Of course there are some minor
changes due to the way we hook

00:03:14.756 --> 00:03:20.726 A:middle
into AppKit and UIKit, but
it's pretty much the same.

00:03:22.596 --> 00:03:26.116 A:middle
We're also taking advantage of
the latest and greatest language

00:03:26.146 --> 00:03:29.956 A:middle
and cocoa features, so you can
spend less time writing glue.

00:03:29.956 --> 00:03:33.186 A:middle
code and more time focusing
on making your app great.

00:03:35.276 --> 00:03:37.416 A:middle
And we've tried really hard

00:03:37.696 --> 00:03:41.246 A:middle
to reduce the surface area
while still giving you access

00:03:41.246 --> 00:03:42.706 A:middle
to a ton of cool features.

00:03:44.726 --> 00:03:47.816 A:middle
And we're using the
multi-process architecture

00:03:48.276 --> 00:03:52.406 A:middle
that we're also using on
Safari on both OS X and Lion,

00:03:52.696 --> 00:03:57.166 A:middle
and now on iOS with iOS 8.

00:03:57.366 --> 00:04:01.556 A:middle
In fact, one of the goals we
had with this modern API was


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.366 --> 00:04:01.556 A:middle
In fact, one of the goals we
had with this modern API was

00:04:01.716 --> 00:04:05.506 A:middle
to take a lot of features that
were previously only available

00:04:05.506 --> 00:04:08.736 A:middle
to Safari and give
you access to them.

00:04:10.336 --> 00:04:14.526 A:middle
For example, super smooth 60
frames per second scrolling

00:04:14.526 --> 00:04:17.305 A:middle
using hardware acceleration
and Core Animation.

00:04:19.736 --> 00:04:22.936 A:middle
The full power of the
JavaScript Nitro engine

00:04:22.986 --> 00:04:25.286 A:middle
on both OS X and iOS.

00:04:27.516 --> 00:04:30.796 A:middle
[ Applause ]

00:04:31.296 --> 00:04:34.876 A:middle
And this includes the
fourth-tier compiler,

00:04:34.876 --> 00:04:36.746 A:middle
that Greg was telling
you about yesterday.

00:04:37.056 --> 00:04:40.946 A:middle
We've taken the back/forward
swipes and the pinch

00:04:40.946 --> 00:04:44.456 A:middle
to zoom gestures and from Safari

00:04:44.456 --> 00:04:45.846 A:middle
and built them right
into WebKit.

00:04:46.186 --> 00:04:52.276 A:middle
And we have a really cool
way for your app to talk

00:04:52.516 --> 00:04:54.346 A:middle
to web pages and vice versa.

00:04:57.086 --> 00:05:00.886 A:middle
Now, I mentioned that
WebKit is multi-processed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.086 --> 00:05:00.886 A:middle
Now, I mentioned that
WebKit is multi-processed.

00:05:01.226 --> 00:05:03.196 A:middle
And what does this really mean?

00:05:04.806 --> 00:05:07.706 A:middle
It means the web content runs

00:05:08.236 --> 00:05:14.346 A:middle
in a separate process completely
isolated from your app.

00:05:14.446 --> 00:05:17.046 A:middle
Like this.

00:05:17.126 --> 00:05:18.356 A:middle
Now, why is this a good idea?

00:05:19.746 --> 00:05:21.926 A:middle
Well, it's great
for responsiveness.

00:05:22.076 --> 00:05:24.216 A:middle
Let's say you have
loaded a web page

00:05:24.266 --> 00:05:29.196 A:middle
and the web page is running a
lot of scripts and doing a lot

00:05:29.196 --> 00:05:33.436 A:middle
of layout, your app will
still stay responsive even

00:05:33.436 --> 00:05:34.266 A:middle
if this happens.

00:05:34.336 --> 00:05:37.266 A:middle
And if you've loaded a web
page that is creating a lot

00:05:37.266 --> 00:05:41.016 A:middle
of JavaScript objects and using
a lot of memory, we'll make sure

00:05:41.016 --> 00:05:42.716 A:middle
to handle that gracefully
instead

00:05:42.716 --> 00:05:44.476 A:middle
of having your app
be jettisoned.

00:05:47.286 --> 00:05:51.396 A:middle
It's also really good for
battery life and power usage.

00:05:51.806 --> 00:05:55.566 A:middle
Since each web page runs
separately in its own process,

00:05:56.006 --> 00:06:00.426 A:middle
we can put individual web pages
into a low power mode for things


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.006 --> 00:06:00.426 A:middle
we can put individual web pages
into a low power mode for things

00:06:00.426 --> 00:06:03.386 A:middle
like background tabs and
fully-occluded Windows.

00:06:03.926 --> 00:06:08.756 A:middle
Now, this is also
completely transparent to you,

00:06:09.206 --> 00:06:13.916 A:middle
when you create a WKWebView,
that is our new WebView class

00:06:13.916 --> 00:06:20.266 A:middle
in the modern API, we'll spin
up a web content process.

00:06:20.266 --> 00:06:22.006 A:middle
When you create another
WKWebView,

00:06:22.956 --> 00:06:24.806 A:middle
we'll spin up another
web content process.

00:06:25.306 --> 00:06:28.266 A:middle
Now, we do this up
to a limit and then

00:06:28.266 --> 00:06:30.386 A:middle
when you create more WKWebViews,

00:06:31.296 --> 00:06:35.556 A:middle
they'll share a web
content process.

00:06:35.556 --> 00:06:38.556 A:middle
And when you deallocate
your WKWebViews,

00:06:39.276 --> 00:06:43.156 A:middle
we tear down the processes
for you and you don't have

00:06:43.156 --> 00:06:44.066 A:middle
to worry about a thing.

00:06:47.346 --> 00:06:51.086 A:middle
So let's talk about how to
adopt the modern WebKit API.

00:06:51.306 --> 00:06:54.776 A:middle
So Beth and I are both
huge Wikipedia fans.

00:06:54.776 --> 00:06:58.386 A:middle
We love reading Wikipedia,
we read it all the time,

00:06:59.116 --> 00:07:02.686 A:middle
and so we figured it would
be a kind of cool idea


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.116 --> 00:07:02.686 A:middle
and so we figured it would
be a kind of cool idea

00:07:02.686 --> 00:07:05.656 A:middle
to write a dedicated
Wikipedia browser app using the

00:07:05.656 --> 00:07:06.266 A:middle
modern API.

00:07:08.156 --> 00:07:09.436 A:middle
This is what it looks like.

00:07:09.706 --> 00:07:10.916 A:middle
It's called WKPedia.

00:07:11.396 --> 00:07:14.716 A:middle
Now, if you think this is just
a WKWebView inside a [inaudible]

00:07:14.766 --> 00:07:16.986 A:middle
Window, you're absolutely right.

00:07:17.856 --> 00:07:21.966 A:middle
But don't worry, we're going to
add some more features to it.

00:07:22.566 --> 00:07:25.296 A:middle
But how did we create
this WKWebView

00:07:25.296 --> 00:07:27.606 A:middle
and how did we load
the web page?

00:07:28.226 --> 00:07:31.256 A:middle
Well, creating a
WKWebView is really easy.

00:07:31.906 --> 00:07:35.456 A:middle
Just as with any other view, you
call alloc and then you call it

00:07:35.456 --> 00:07:36.816 A:middle
into a frame, and that's it.

00:07:37.316 --> 00:07:38.826 A:middle
And how do you load a web page?

00:07:39.546 --> 00:07:44.936 A:middle
You get the URL, you
get the URL request

00:07:45.516 --> 00:07:49.296 A:middle
and then you call
WKWebView load request,

00:07:49.296 --> 00:07:50.676 A:middle
and that'll load the
web page for you.

00:07:53.396 --> 00:07:58.386 A:middle
So that's all good if you have
an app with a single WebView.

00:07:59.236 --> 00:08:04.436 A:middle
But for WKPedia, we really want
to have support multiple windows


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.236 --> 00:08:04.436 A:middle
But for WKPedia, we really want
to have support multiple windows

00:08:04.436 --> 00:08:08.336 A:middle
so you can have more than
one article showing at once.

00:08:09.806 --> 00:08:14.106 A:middle
And when you do this, there's
always some state that you want

00:08:14.106 --> 00:08:17.746 A:middle
to share between your web
views, such as preferences,

00:08:17.746 --> 00:08:22.576 A:middle
the set of processes to
create your web pages in,

00:08:23.096 --> 00:08:24.936 A:middle
and this set of links.

00:08:25.456 --> 00:08:28.296 A:middle
And the way to do this is

00:08:28.436 --> 00:08:31.976 A:middle
to create a single
configuration object and then

00:08:31.976 --> 00:08:37.265 A:middle
when you create your WKWebViews,
you pass along the configuration

00:08:37.996 --> 00:08:41.356 A:middle
and that'll ensure that all
the state is correctly shared

00:08:41.486 --> 00:08:42.686 A:middle
between the web use.

00:08:43.666 --> 00:08:45.076 A:middle
This is what it looks
like in code.

00:08:45.186 --> 00:08:48.116 A:middle
First, you create your
WKWebView configuration

00:08:49.436 --> 00:08:52.726 A:middle
and then you create a WKWebView,

00:08:52.726 --> 00:08:55.646 A:middle
but you use an input
frame configuration

00:08:56.096 --> 00:09:02.356 A:middle
and you give it a configuration,
and that's all you have to do.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.096 --> 00:09:02.356 A:middle
and you give it a configuration,
and that's all you have to do.

00:09:02.586 --> 00:09:03.886 A:middle
Okay, back to WKPedia.

00:09:04.156 --> 00:09:06.576 A:middle
Now, even though
this is not going

00:09:06.576 --> 00:09:08.326 A:middle
to be a full-fledged browser,

00:09:08.936 --> 00:09:12.276 A:middle
there's still some browser-like
features that we want to add,

00:09:12.896 --> 00:09:18.806 A:middle
such as a back/forward button, a
title and a progress indicator.

00:09:20.096 --> 00:09:23.196 A:middle
So let's take a look at
how we would do this.

00:09:23.486 --> 00:09:25.366 A:middle
And let's go from left
to right and start

00:09:25.436 --> 00:09:26.776 A:middle
with the back/forward buttons.

00:09:29.686 --> 00:09:34.106 A:middle
For this, we have a bunch of
actions methods on WKWebView.

00:09:35.226 --> 00:09:37.636 A:middle
Here are some of them.

00:09:37.856 --> 00:09:40.056 A:middle
You can hook these up
in interface builder

00:09:40.236 --> 00:09:43.416 A:middle
to your UI elements without
having to write any code.

00:09:44.006 --> 00:09:46.876 A:middle
And so for WKPedia, the
ones we're interested

00:09:46.876 --> 00:09:49.046 A:middle
in are go back and go forward.

00:09:49.716 --> 00:09:51.896 A:middle
And these are also
auto-validating,

00:09:52.026 --> 00:09:55.616 A:middle
which means that when you have
hooked these up to your UI,

00:09:55.616 --> 00:09:59.616 A:middle
it will actually update the
enable/disable state based

00:09:59.616 --> 00:10:01.646 A:middle
on whether you can
go back or forwards.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.616 --> 00:10:01.646 A:middle
on whether you can
go back or forwards.

00:10:01.646 --> 00:10:05.666 A:middle
So you don't have
to worry about that.

00:10:05.856 --> 00:10:08.696 A:middle
So what about the title
and the progress indicator?

00:10:10.916 --> 00:10:14.766 A:middle
For that we have a bunch
of properties on WKWebView.

00:10:16.426 --> 00:10:17.506 A:middle
Here are some of them.

00:10:18.806 --> 00:10:21.716 A:middle
These are Cocoa key value
observing compliant,

00:10:21.766 --> 00:10:26.826 A:middle
which means that you can use
the normal Cocoa KDO methods

00:10:27.136 --> 00:10:29.706 A:middle
to listen for any changes
to the property values.

00:10:30.236 --> 00:10:34.316 A:middle
And if you're on OS X, you can
use Cocoa bindings to hook them

00:10:34.316 --> 00:10:37.196 A:middle
up to your UI without having
to write a single line of code.

00:10:38.086 --> 00:10:42.276 A:middle
So for WKPedia, we're
interested in the page title,

00:10:42.546 --> 00:10:46.206 A:middle
just the title property, and
whether the page is loading

00:10:46.206 --> 00:10:48.196 A:middle
or not, and that's
the loading property.

00:10:49.806 --> 00:10:53.426 A:middle
Okay, so WKPedia is really
starting to come along here,

00:10:54.036 --> 00:11:02.596 A:middle
but it's still not a
dedicated Wikipedia browser.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:54.036 --> 00:11:02.596 A:middle
but it's still not a
dedicated Wikipedia browser.

00:11:02.666 --> 00:11:03.896 A:middle
Now, what do I mean by that?

00:11:04.256 --> 00:11:08.966 A:middle
Well, let's say you go to the
WebKit article in Wikipedia

00:11:09.526 --> 00:11:14.426 A:middle
and you click this link
to the WebKit homepage.

00:11:16.466 --> 00:11:19.836 A:middle
That'll open the link
inside the WKPedia browser,

00:11:20.216 --> 00:11:23.216 A:middle
but we want this to be a
dedicated Wikipedia app

00:11:23.866 --> 00:11:26.006 A:middle
and we don't want to
load any external links.

00:11:27.576 --> 00:11:31.686 A:middle
So what we want to do is
customize the way pages

00:11:31.686 --> 00:11:32.486 A:middle
are loaded.

00:11:33.836 --> 00:11:35.556 A:middle
But before I can
tell you about that,

00:11:36.066 --> 00:11:39.796 A:middle
I need to explain how page
loading actually works

00:11:39.796 --> 00:11:43.296 A:middle
in WebKit.

00:11:43.466 --> 00:11:48.306 A:middle
So first, something happens
that triggers a page load,

00:11:49.056 --> 00:11:50.356 A:middle
this can be one of many things.

00:11:50.356 --> 00:11:53.056 A:middle
For example, the
user clicking a link

00:11:54.606 --> 00:11:56.116 A:middle
or using the back/forward
buttons,

00:11:57.396 --> 00:12:00.186 A:middle
it could be JavaScript setting
the window docile location


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.396 --> 00:12:00.186 A:middle
it could be JavaScript setting
the window docile location

00:12:00.186 --> 00:12:04.106 A:middle
property, or it can
be a subframe loading,

00:12:04.206 --> 00:12:07.796 A:middle
because subframes and frames
are just documents inside

00:12:07.796 --> 00:12:09.716 A:middle
of each other.

00:12:09.946 --> 00:12:12.996 A:middle
And as we saw earlier, it
could be you calling WKWebView

00:12:12.996 --> 00:12:13.786 A:middle
load request.

00:12:16.226 --> 00:12:19.696 A:middle
Then we send a request
off to the server

00:12:20.246 --> 00:12:22.836 A:middle
and we get back a response.

00:12:24.246 --> 00:12:26.096 A:middle
This could be a positive
response

00:12:27.136 --> 00:12:31.766 A:middle
or the server could send back
a 404, which means, sorry,

00:12:31.766 --> 00:12:34.396 A:middle
I don't know what this
resource is, file not found.

00:12:34.896 --> 00:12:40.496 A:middle
And then, the server sends
back some data and we're done.

00:12:42.166 --> 00:12:48.516 A:middle
Now, what you can do with
WebKit is to have your app sort

00:12:48.516 --> 00:12:53.116 A:middle
of inject itself after the
action and response phases.

00:12:54.456 --> 00:12:58.566 A:middle
And to decide whether
to continue the load

00:12:58.566 --> 00:13:00.656 A:middle
or whether to cancel it.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.566 --> 00:13:00.656 A:middle
or whether to cancel it.

00:13:01.986 --> 00:13:05.656 A:middle
And the way you do this
is by implementing methods

00:13:05.656 --> 00:13:08.026 A:middle
on the WKWebView
navigation delegate.

00:13:09.736 --> 00:13:11.696 A:middle
There are 2 methods
that correspond

00:13:11.696 --> 00:13:13.786 A:middle
to the 2 different phases.

00:13:14.506 --> 00:13:16.086 A:middle
The first one is decide policy

00:13:16.086 --> 00:13:19.236 A:middle
for navigation action,
for the action phase.

00:13:20.386 --> 00:13:23.356 A:middle
The second one is decide
policy for navigation response,

00:13:23.466 --> 00:13:25.776 A:middle
for the response phase.

00:13:26.086 --> 00:13:30.366 A:middle
And with both of these delegate
methods, you get data objects

00:13:30.366 --> 00:13:34.376 A:middle
that contain enough
information for you to be able

00:13:34.376 --> 00:13:36.666 A:middle
to make an informed decision
about whether you want

00:13:36.666 --> 00:13:38.116 A:middle
to continue the load or not.

00:13:38.996 --> 00:13:42.546 A:middle
So for decide policy
for navigation action,

00:13:42.956 --> 00:13:46.326 A:middle
that object is a WK
navigation action object.

00:13:47.796 --> 00:13:49.716 A:middle
It has properties.

00:13:50.076 --> 00:13:54.366 A:middle
For example, the navigation type
lets you find out which type

00:13:54.366 --> 00:13:56.606 A:middle
of navigation actually
started the load,

00:13:56.966 --> 00:14:00.616 A:middle
like if it was a link being
clicked or if it was a go back,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.966 --> 00:14:00.616 A:middle
like if it was a link being
clicked or if it was a go back,

00:14:00.776 --> 00:14:04.316 A:middle
go forward request,
and so forth.

00:14:04.466 --> 00:14:06.316 A:middle
Request is the request
that we're going

00:14:06.316 --> 00:14:07.406 A:middle
to send to the server.

00:14:08.936 --> 00:14:12.696 A:middle
And with the modifier flags
property, you can even tell

00:14:12.696 --> 00:14:15.556 A:middle
if the user held down
shift or command or option

00:14:16.296 --> 00:14:17.266 A:middle
when clicking the link.

00:14:20.536 --> 00:14:23.156 A:middle
For decide policy for
navigation response,

00:14:23.256 --> 00:14:25.636 A:middle
you get a WK navigation
response object.

00:14:27.056 --> 00:14:31.996 A:middle
This also has some properties,
response is the HTTP.

00:14:31.996 --> 00:14:33.856 A:middle
response that we get
back from the server.

00:14:34.366 --> 00:14:39.546 A:middle
And in addition to
these data objects,

00:14:39.696 --> 00:14:42.826 A:middle
you also get a decision
handler in the form of a block.

00:14:44.686 --> 00:14:47.936 A:middle
This is how your app can
decide whether you want to go

00:14:47.936 --> 00:14:51.126 A:middle
through with a load
or cancel it.

00:14:51.816 --> 00:14:56.086 A:middle
And you do this by calling
the block with 1 of 2 values.

00:14:56.196 --> 00:14:59.646 A:middle
So for decide policy
for navigation action,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.046 --> 00:15:04.986 A:middle
you either pass WK navigation
action policy cancel or allow.

00:15:05.236 --> 00:15:09.246 A:middle
And for decide policy
for navigation response,

00:15:09.786 --> 00:15:13.936 A:middle
you pass either WK navigation
response policy cancel or allow.

00:15:16.246 --> 00:15:19.156 A:middle
Now, you can either call
these blocks right away

00:15:19.416 --> 00:15:22.516 A:middle
or you can call them
sometime later,

00:15:22.516 --> 00:15:25.626 A:middle
which can be really useful
if you want to put up some UI

00:15:25.626 --> 00:15:29.286 A:middle
and let the user decide whether
the load should continue or not.

00:15:31.786 --> 00:15:35.406 A:middle
So now I'd like to ask my
colleague Beth up on stage

00:15:35.666 --> 00:15:38.856 A:middle
to show WKPedia and how to
add some of these features.

00:15:39.146 --> 00:15:39.346 A:middle
Beth.

00:15:40.516 --> 00:15:44.156 A:middle
[ Applause ]

00:15:44.656 --> 00:15:46.416 A:middle
&gt;&gt; Hi everyone, I'm Beth Dakin.

00:15:46.966 --> 00:15:49.426 A:middle
Anders and I work together
on Safari and WebKit,

00:15:49.426 --> 00:15:53.086 A:middle
but lately we've been working
on our pet project, WKPedia.

00:15:53.436 --> 00:15:56.916 A:middle
So I have a super bear-bones
version of the app to show you,

00:15:57.156 --> 00:15:59.216 A:middle
and together we'll use
all of the information

00:15:59.216 --> 00:16:01.666 A:middle
that Anders just gave us
to build it up and turn it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.216 --> 00:16:01.666 A:middle
that Anders just gave us
to build it up and turn it

00:16:01.666 --> 00:16:03.926 A:middle
into a dedicated browsing app.

00:16:04.626 --> 00:16:06.126 A:middle
So I'll show you what we have

00:16:06.126 --> 00:16:08.566 A:middle
and then we'll work
on improving it.

00:16:10.186 --> 00:16:11.346 A:middle
Just going to build and run.

00:16:17.146 --> 00:16:19.446 A:middle
Here we go, this is
WKPedia as it stands.

00:16:19.446 --> 00:16:22.676 A:middle
It's really just a
WKWebView in a window,

00:16:22.676 --> 00:16:25.476 A:middle
we get all of the great
WKWebView features,

00:16:25.476 --> 00:16:29.276 A:middle
super fast scrolling, we get
the super fast JavaScript engine

00:16:29.276 --> 00:16:33.966 A:middle
with the fourth-tier
compiler, can click on links,

00:16:34.206 --> 00:16:35.576 A:middle
navigate to new pages.

00:16:36.056 --> 00:16:38.616 A:middle
So that's great but I'm
clearly missing some basic

00:16:38.816 --> 00:16:39.896 A:middle
browsing features.

00:16:40.006 --> 00:16:43.676 A:middle
If I look at the same website
in Safari, for example,

00:16:44.126 --> 00:16:48.996 A:middle
if I click on a new link, then
I get some progress indication

00:16:48.996 --> 00:16:51.586 A:middle
at the top, indicating
how the load's going.

00:16:51.886 --> 00:16:55.806 A:middle
The URL bar gives me some
indication of what page I'm on.

00:16:55.806 --> 00:16:56.856 A:middle
I can go back.

00:16:57.066 --> 00:16:59.186 A:middle
These are things that we
clearly want in our app for it

00:16:59.186 --> 00:17:00.706 A:middle
to feel like a web browser.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.186 --> 00:17:00.706 A:middle
to feel like a web browser.

00:17:01.156 --> 00:17:02.446 A:middle
So let's add them.

00:17:03.286 --> 00:17:06.516 A:middle
I'll give you a quick
tour of the code first.

00:17:07.165 --> 00:17:10.056 A:middle
This is our main class, it's
a browser window controller,

00:17:10.056 --> 00:17:12.425 A:middle
and that's an
NSWindowController.

00:17:12.425 --> 00:17:14.626 A:middle
And if we look at the
implementation file,

00:17:14.955 --> 00:17:17.976 A:middle
you'll see this is where we have
a property for the WKWebView.

00:17:19.156 --> 00:17:21.096 A:middle
And down here in
window did load,

00:17:21.096 --> 00:17:23.915 A:middle
this is where we allocate
our WebView and it's

00:17:23.915 --> 00:17:25.566 A:middle
where we load our
initial request.

00:17:26.046 --> 00:17:28.435 A:middle
Okay, but we want to
add some toolbar items,

00:17:28.435 --> 00:17:30.596 A:middle
so let's go into
interface builder.

00:17:41.046 --> 00:17:45.456 A:middle
I need to get my toolbar
here, there we go.

00:17:45.456 --> 00:17:48.546 A:middle
First I want to make the
toolbar visible at launch,

00:17:48.846 --> 00:17:52.316 A:middle
and then we'll double click
it to start adding some items.

00:17:52.316 --> 00:17:55.216 A:middle
So first we wanted a
back and forward button,

00:17:55.216 --> 00:17:56.716 A:middle
so I will drag those in.

00:17:57.236 --> 00:18:05.006 A:middle
And if we go over to this panel
here, let me highlight one


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.236 --> 00:18:05.006 A:middle
And if we go over to this panel
here, let me highlight one

00:18:05.006 --> 00:18:08.116 A:middle
of these buttons, here
I'll zoom this up for you.

00:18:08.886 --> 00:18:10.746 A:middle
You can see I've already
hooked these buttons

00:18:10.746 --> 00:18:14.006 A:middle
up to the appropriate method, so
the back button's already hooked

00:18:14.006 --> 00:18:16.016 A:middle
up to the go back action method,

00:18:16.016 --> 00:18:17.556 A:middle
and the forward button's
already hooked

00:18:17.556 --> 00:18:19.226 A:middle
up to go forward, so
those should work.

00:18:20.416 --> 00:18:23.306 A:middle
Then we want some indication
of the page that we're on.

00:18:23.306 --> 00:18:25.616 A:middle
So we don't want our URL field
here, because we want this

00:18:25.616 --> 00:18:28.636 A:middle
to be a dedicated browser app,
we don't want people to type

00:18:28.636 --> 00:18:32.186 A:middle
in random URL's, they'll use
this search field and Wikipedia

00:18:32.186 --> 00:18:33.156 A:middle
to get to different pages.

00:18:33.156 --> 00:18:37.196 A:middle
So we just want some texts, but
we want it to reflect the title

00:18:37.196 --> 00:18:39.556 A:middle
of the Wikipedia page
that we're actually on.

00:18:39.956 --> 00:18:42.066 A:middle
So that's very easy.

00:18:42.686 --> 00:18:45.596 A:middle
Over here let me
zoom this up again.

00:18:47.056 --> 00:18:51.246 A:middle
So for this text, we just want
to bind it to the file's owner,

00:18:51.446 --> 00:18:53.316 A:middle
which is that browser
window controller class

00:18:53.356 --> 00:18:54.626 A:middle
that I showed you a minute ago.

00:18:54.966 --> 00:18:57.326 A:middle
And then we want to
set the model key path

00:18:57.586 --> 00:19:00.466 A:middle
to WebView dot title.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.586 --> 00:19:00.466 A:middle
to WebView dot title.

00:19:01.756 --> 00:19:04.956 A:middle
And so that's one of those
KVO-compliant properties

00:19:04.956 --> 00:19:08.136 A:middle
on WKWebView that Anders
was telling us about.

00:19:08.136 --> 00:19:09.626 A:middle
So this should be all
that we have to do,

00:19:09.626 --> 00:19:12.456 A:middle
this should actually update
whenever the title value

00:19:12.456 --> 00:19:16.276 A:middle
changes, just get all
of that KVO goodness.

00:19:18.136 --> 00:19:20.836 A:middle
All right, and finally, we just
want some progress indication.

00:19:20.836 --> 00:19:21.936 A:middle
So I'll drag in the spinner too.

00:19:22.376 --> 00:19:24.106 A:middle
Okay, that looks about right.

00:19:24.106 --> 00:19:30.976 A:middle
So let's see how that
works, let's build and run.

00:19:31.186 --> 00:19:33.266 A:middle
Okay, so we have
some progress here.

00:19:33.496 --> 00:19:34.606 A:middle
I'll zoom up a little.

00:19:35.466 --> 00:19:37.036 A:middle
We have back/forward
buttons, great,

00:19:37.036 --> 00:19:38.546 A:middle
we'll see if they
work in a second.

00:19:38.806 --> 00:19:41.076 A:middle
We have a title that
reflects the page

00:19:41.076 --> 00:19:42.696 A:middle
that we're on, San Francisco.

00:19:43.086 --> 00:19:45.626 A:middle
Our spinner doesn't seem to be
doing quite the right thing,

00:19:45.626 --> 00:19:47.086 A:middle
it's just kind of always there,

00:19:47.086 --> 00:19:50.066 A:middle
and it's not indicating
any load progress yet.

00:19:50.596 --> 00:19:52.486 A:middle
I navigate to a new page, great,

00:19:52.486 --> 00:19:55.336 A:middle
the title updated right
away to reflect San Diego.

00:19:55.776 --> 00:19:58.906 A:middle
Click my back button, and
we went back, awesome.

00:19:59.016 --> 00:20:00.456 A:middle
Forward, great.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.016 --> 00:20:00.456 A:middle
Forward, great.

00:20:00.576 --> 00:20:02.596 A:middle
Okay, so we've made a
lot of improvements.

00:20:02.596 --> 00:20:03.896 A:middle
We need to fix that spinner.

00:20:04.156 --> 00:20:07.616 A:middle
I also feel like this title is
really long and unnecessary.

00:20:07.616 --> 00:20:09.986 A:middle
They all seem to have
this suffix, Wikipedia,

00:20:09.986 --> 00:20:10.976 A:middle
the free encyclopedia.

00:20:11.276 --> 00:20:12.986 A:middle
I think it would be
more useful in our app

00:20:12.986 --> 00:20:15.706 A:middle
if we truncate the title down
just to be the beginning part.

00:20:15.706 --> 00:20:17.366 A:middle
So we can handle
that very easily

00:20:17.716 --> 00:20:19.056 A:middle
in interface builder as well.

00:20:19.116 --> 00:20:21.526 A:middle
So let's make those two fixes.

00:20:23.576 --> 00:20:25.136 A:middle
First let's fix that spinner.

00:20:27.806 --> 00:20:35.676 A:middle
To fix that we want to go
over here again to this panel

00:20:35.676 --> 00:20:40.016 A:middle
to the animation section,
and we want to bind

00:20:40.266 --> 00:20:41.456 A:middle
to the file's owner again.

00:20:41.456 --> 00:20:43.516 A:middle
Again, that's our browser
window controller class.

00:20:44.116 --> 00:20:49.596 A:middle
And here the model key path
we WebView dot loading, yes.

00:20:50.196 --> 00:20:52.816 A:middle
And again, that's one of those
KVO-compliant properties.

00:20:53.116 --> 00:20:55.526 A:middle
That should be all we
have to do to get this

00:20:55.526 --> 00:20:58.246 A:middle
to animate whenever
WebView dot loading is true.

00:20:59.086 --> 00:21:01.466 A:middle
There's one other thing I
want to do with this though,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.086 --> 00:21:01.466 A:middle
There's one other thing I
want to do with this though,

00:21:01.626 --> 00:21:07.856 A:middle
which is over here, I want to
uncheck display when stopped.

00:21:07.856 --> 00:21:10.706 A:middle
So then it should go away
when it's not animating.

00:21:12.036 --> 00:21:15.936 A:middle
Okay, and now we want to
truncate that title also.

00:21:15.936 --> 00:21:19.976 A:middle
So I did already write some
code that would do that.

00:21:20.286 --> 00:21:24.986 A:middle
Down here if we look in here,
so this is just some simple code

00:21:24.986 --> 00:21:28.976 A:middle
that I wrote that would take an
NS string and see if it had this

00:21:28.976 --> 00:21:32.716 A:middle
as a suffix at the end,
and then return a string

00:21:32.716 --> 00:21:33.756 A:middle
that doesn't have that part.

00:21:33.876 --> 00:21:37.046 A:middle
So I already wrote some code
to do that and I can invoke it

00:21:37.206 --> 00:21:40.676 A:middle
from within interface
builder right

00:21:40.676 --> 00:21:44.766 A:middle
over here using the
value transformer option.

00:21:45.506 --> 00:21:48.076 A:middle
Delete Wikipedia title
snippet value transformer.

00:21:48.076 --> 00:21:51.726 A:middle
So that will take the title
and invoke this method

00:21:51.936 --> 00:21:55.566 A:middle
with the title and then the
result will be what's reflected

00:21:55.566 --> 00:21:56.196 A:middle
in the toolbar.

00:21:57.936 --> 00:22:00.626 A:middle
So let's save, build
and run again.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.936 --> 00:22:00.626 A:middle
So let's save, build
and run again.

00:22:06.746 --> 00:22:09.276 A:middle
Okay, so progress has been made.

00:22:09.526 --> 00:22:11.306 A:middle
Let's try clicking another link.

00:22:11.306 --> 00:22:12.186 A:middle
We get our spinner.

00:22:12.186 --> 00:22:13.036 A:middle
It's animating.

00:22:13.036 --> 00:22:14.266 A:middle
It goes away when we're gone.

00:22:14.586 --> 00:22:19.996 A:middle
Our title is now a much smaller
more useful thing for our app.

00:22:20.346 --> 00:22:21.786 A:middle
We still have our
back/forward buttons.

00:22:22.086 --> 00:22:25.456 A:middle
This is looking great, this is
really feeling like a browser.

00:22:25.826 --> 00:22:27.406 A:middle
But I haven't done anything

00:22:27.406 --> 00:22:30.616 A:middle
yet to make it a dedicated
Wikipedia browser besides just

00:22:30.616 --> 00:22:31.936 A:middle
not providing a URL field.

00:22:31.936 --> 00:22:35.146 A:middle
But if I go to a link like
this, and click on it,

00:22:35.146 --> 00:22:37.836 A:middle
it's going to still
open right in my app,

00:22:37.836 --> 00:22:40.626 A:middle
which is not the behavior
that I'm looking for that sort

00:22:40.626 --> 00:22:43.996 A:middle
of defeats the purpose of this
being a dedicated Wikipedia

00:22:43.996 --> 00:22:44.626 A:middle
browsing app.

00:22:44.626 --> 00:22:46.376 A:middle
So we can easily fix this

00:22:46.376 --> 00:22:49.476 A:middle
by implementing the
navigation delegate just

00:22:49.476 --> 00:22:50.596 A:middle
like Anders taught us.

00:22:50.736 --> 00:22:52.406 A:middle
So let's do that right now.

00:22:52.406 --> 00:22:54.716 A:middle
Let's go back to the code.

00:22:58.256 --> 00:23:04.146 A:middle
Okay, so first, I want
to add 1 line of code


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.256 --> 00:23:04.146 A:middle
Okay, so first, I want
to add 1 line of code

00:23:04.146 --> 00:23:08.226 A:middle
to window did load here, to
set the navigation delegate.

00:23:08.596 --> 00:23:11.366 A:middle
Here I'm setting the
navigation delegate to self,

00:23:11.706 --> 00:23:15.676 A:middle
so this way WebKit will know
to look here in my class to see

00:23:15.676 --> 00:23:19.256 A:middle
if there's any implementations
of these delegate methods.

00:23:19.256 --> 00:23:23.706 A:middle
And then we want to implement
1 of the 2 delegate methods.

00:23:23.706 --> 00:23:29.466 A:middle
We want to implement decide
policy for navigation action.

00:23:29.466 --> 00:23:30.766 A:middle
So let's quickly
step through this.

00:23:31.236 --> 00:23:34.926 A:middle
So first I want to get
the URL that the app wants

00:23:34.926 --> 00:23:36.836 A:middle
to navigate to, and then

00:23:37.096 --> 00:23:41.016 A:middle
if the host URL does not
have a Wikipedia.org suffix,

00:23:41.016 --> 00:23:44.036 A:middle
so this is a non-Wikipedia
link, then in that case,

00:23:44.246 --> 00:23:46.626 A:middle
I want to pass the
navigation off

00:23:46.626 --> 00:23:48.196 A:middle
to the default browser
on the system.

00:23:48.196 --> 00:23:50.246 A:middle
So that's what will happen
with this line of code.

00:23:50.246 --> 00:23:52.186 A:middle
Safari should open
that link instead.

00:23:52.516 --> 00:23:54.866 A:middle
But we still need to
tell our WKWebView

00:23:55.046 --> 00:23:57.296 A:middle
that it shouldn't go ahead
with the navigation also,

00:23:57.516 --> 00:23:59.576 A:middle
so we'll invoke the
decision handler block

00:23:59.836 --> 00:24:03.506 A:middle
with the WK navigation
action policy cancel value.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:59.836 --> 00:24:03.506 A:middle
with the WK navigation
action policy cancel value.

00:24:03.906 --> 00:24:05.906 A:middle
And while we were here I
thought it would be cool just

00:24:05.906 --> 00:24:08.596 A:middle
to add a feature to command
click a link and open it

00:24:08.596 --> 00:24:10.016 A:middle
in a new window in my own app.

00:24:10.056 --> 00:24:11.706 A:middle
So that's what I
added down here.

00:24:11.706 --> 00:24:14.876 A:middle
So first I'm finding out if
this navigation is happening

00:24:15.186 --> 00:24:19.456 A:middle
with the command key down,
and if it is, then I'm going

00:24:19.456 --> 00:24:22.416 A:middle
to create a brand new browser
window controller and I'm giving

00:24:22.416 --> 00:24:24.606 A:middle
that this navigation request.

00:24:25.536 --> 00:24:28.546 A:middle
And then again, since I
don't want this WKWebView

00:24:28.546 --> 00:24:30.626 A:middle
to also navigate
to the new page,

00:24:30.906 --> 00:24:34.286 A:middle
I invoke the decision handler
block with the cancel value.

00:24:34.636 --> 00:24:38.066 A:middle
And otherwise if we didn't fall
into any of those situations,

00:24:38.066 --> 00:24:41.916 A:middle
then we'll invoke the decision
handler block with allow.

00:24:42.216 --> 00:24:48.426 A:middle
So let's save and build and run.

00:24:48.616 --> 00:24:51.026 A:middle
Okay, great, so regular
page loading still works,

00:24:51.026 --> 00:24:51.886 A:middle
so that's good.

00:24:54.476 --> 00:24:58.806 A:middle
Let's see, let's click on
this link, and awesome,

00:24:58.806 --> 00:25:01.036 A:middle
we successfully handed
that navigation off


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.806 --> 00:25:01.036 A:middle
we successfully handed
that navigation off

00:25:01.036 --> 00:25:02.266 A:middle
to the default browser.

00:25:03.636 --> 00:25:06.096 A:middle
And if I command click a link,

00:25:07.006 --> 00:25:09.136 A:middle
I get it in a new
window in my own app.

00:25:09.136 --> 00:25:10.706 A:middle
Each of these are
in its own process

00:25:10.706 --> 00:25:13.646 A:middle
because this is modern
WebKit API, pretty cool.

00:25:15.136 --> 00:25:17.826 A:middle
So this is awesome, in just
a few minutes, we have built

00:25:17.826 --> 00:25:21.756 A:middle
up a dedicated browser app
using the modern WebKit API.

00:25:22.576 --> 00:25:25.676 A:middle
But I still feel like there
are few modern features

00:25:25.896 --> 00:25:27.686 A:middle
that I'm lacking here.

00:25:27.686 --> 00:25:30.686 A:middle
For example, again, if
we look back in Safari,

00:25:31.076 --> 00:25:33.836 A:middle
who really uses the back
button anymore, I mean,

00:25:33.836 --> 00:25:37.566 A:middle
I typically use the swipe
back gesture to go back.

00:25:37.566 --> 00:25:39.876 A:middle
And I also want to
be able to double tap

00:25:39.876 --> 00:25:40.956 A:middle
to zoom and pinch out.

00:25:41.246 --> 00:25:45.446 A:middle
If I try to do those things
in my app, nothing happens.

00:25:45.926 --> 00:25:48.566 A:middle
Double tap, no, nothing's
happening.

00:25:48.806 --> 00:25:51.126 A:middle
But it's really, really
easy to add these features.

00:25:51.126 --> 00:25:52.406 A:middle
So I'm going to do
it really quickly,

00:25:52.406 --> 00:25:54.686 A:middle
even though Anders hasn't shown
us how to do it quite yet.

00:25:55.156 --> 00:25:58.246 A:middle
But we just need to
add 2 lines of code.

00:25:58.896 --> 00:26:00.746 A:middle
Back up here in window did load.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.896 --> 00:26:00.746 A:middle
Back up here in window did load.

00:26:05.996 --> 00:26:09.696 A:middle
Okay, so this first line of code
allows back/forward navigation

00:26:09.696 --> 00:26:11.026 A:middle
gestures, set that to yes,

00:26:11.266 --> 00:26:12.986 A:middle
that gets you the
back/forward swiping.

00:26:13.386 --> 00:26:14.856 A:middle
And allows magnification,

00:26:14.856 --> 00:26:16.706 A:middle
that will get double
tap and pinch to zoom.

00:26:17.426 --> 00:26:22.826 A:middle
Save that, build and run.

00:26:23.006 --> 00:26:26.426 A:middle
Okay, so now if I go
forward, should be able

00:26:26.426 --> 00:26:28.456 A:middle
to swipe back, awesome.

00:26:29.026 --> 00:26:32.096 A:middle
Can double tap, pinch
right out, awesome.

00:26:32.326 --> 00:26:35.556 A:middle
So there you have it,
we've built a modern --

00:26:35.826 --> 00:26:37.596 A:middle
we've used the modern WebKit API

00:26:37.716 --> 00:26:40.666 A:middle
to build a dedicated
Wikipedia browser app

00:26:40.916 --> 00:26:43.626 A:middle
with modern filling features
in just a few minutes.

00:26:43.966 --> 00:26:45.206 A:middle
So I'm going to hand
it back to Anders,

00:26:45.206 --> 00:26:48.226 A:middle
he's going to teach you a lot
of the more advanced features

00:26:48.226 --> 00:26:49.356 A:middle
that you can do with this API.

00:26:49.356 --> 00:26:50.986 A:middle
And I'll be back up later

00:26:50.986 --> 00:26:53.316 A:middle
to show you how you can
integrate some of those features

00:26:53.586 --> 00:26:55.866 A:middle
into our iPad version
of WKPedia.

00:26:56.516 --> 00:26:57.456 A:middle
Back to you, Anders.

00:26:58.516 --> 00:27:01.046 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.516 --> 00:27:01.046 A:middle
[ Applause ]

00:27:01.546 --> 00:27:02.036 A:middle
&gt;&gt; Thanks, Beth.

00:27:02.276 --> 00:27:03.366 A:middle
That was really cool.

00:27:03.706 --> 00:27:06.276 A:middle
I especially like the
extra touch at the end

00:27:06.276 --> 00:27:08.006 A:middle
where you added adjuster
support.

00:27:08.636 --> 00:27:10.266 A:middle
Let's recap how Beth did that.

00:27:11.606 --> 00:27:14.676 A:middle
So for the navigation gestures,
that's the swipe to go back

00:27:14.676 --> 00:27:17.856 A:middle
and forward, you just set
the allow the stop forward

00:27:17.856 --> 00:27:21.696 A:middle
navigation gestures property
to yes on your WKWebView.

00:27:23.256 --> 00:27:26.056 A:middle
For zoom gestures on OS X,

00:27:26.646 --> 00:27:30.156 A:middle
you set the allow
magnification property to yes.

00:27:31.576 --> 00:27:36.396 A:middle
On iOS, this is handled by
the underlying UI scroll view,

00:27:36.396 --> 00:27:38.846 A:middle
and it's already on by default,
so you don't have to do a thing.

00:27:41.506 --> 00:27:44.556 A:middle
So let's talk about
WKPedia for iPad.

00:27:45.146 --> 00:27:46.806 A:middle
This is what it looks like.

00:27:47.046 --> 00:27:49.286 A:middle
It's really great, I
use it all the time

00:27:49.286 --> 00:27:51.516 A:middle
for reading Wikipedia
articles on my way to work.

00:27:53.486 --> 00:27:58.316 A:middle
But I've noticed something
that bothers me a little.

00:27:58.736 --> 00:28:04.086 A:middle
See, I like to read certain
sections of an article,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.736 --> 00:28:04.086 A:middle
See, I like to read certain
sections of an article,

00:28:04.506 --> 00:28:08.906 A:middle
and that means that I have to
go find the table of contents,

00:28:08.906 --> 00:28:11.346 A:middle
I have to scroll down to it.

00:28:11.346 --> 00:28:15.626 A:middle
I find a section that I want
to read, I tap on that link.

00:28:16.726 --> 00:28:19.936 A:middle
And then when I've read it, I
need to scroll all the way back

00:28:19.936 --> 00:28:24.226 A:middle
up or swipe back and look for
another section and read that.

00:28:24.816 --> 00:28:27.976 A:middle
So I told Beth about
this and she said, well,

00:28:27.976 --> 00:28:29.886 A:middle
why don't we use some of
the more advanced features

00:28:29.886 --> 00:28:33.686 A:middle
of the modern WebKit API
to take care of this?

00:28:33.876 --> 00:28:36.976 A:middle
Like why don't we just
get rid of the table

00:28:36.976 --> 00:28:38.556 A:middle
of contents from the web page?

00:28:39.436 --> 00:28:43.146 A:middle
And while we're at it, we can
also get rid of this side bar

00:28:43.146 --> 00:28:45.446 A:middle
to the left, to make
room for the article.

00:28:46.616 --> 00:28:51.226 A:middle
And then we can put the table
of contents natively in the UI,

00:28:51.226 --> 00:28:54.646 A:middle
so we have this little button
in the top left corner,

00:28:55.046 --> 00:28:57.956 A:middle
and when you tap it, you
get the table of contents

00:28:57.986 --> 00:28:59.826 A:middle
in a native UI table view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:00.666 --> 00:29:02.746 A:middle
And when you're in
landscape mode,

00:29:02.826 --> 00:29:05.606 A:middle
you can always have it visible
because of the extra space.

00:29:07.016 --> 00:29:08.096 A:middle
So what we really want

00:29:08.096 --> 00:29:12.686 A:middle
to do here is customize web
page contents from a Wikipedia.

00:29:13.486 --> 00:29:15.776 A:middle
And we want to use two
features to do this.

00:29:16.706 --> 00:29:19.716 A:middle
One is called user scripts.

00:29:19.716 --> 00:29:21.586 A:middle
The other one is
called script messages.

00:29:23.266 --> 00:29:24.686 A:middle
These are both handled

00:29:24.686 --> 00:29:27.786 A:middle
by an object called WK
user content controller.

00:29:29.576 --> 00:29:33.356 A:middle
WK user content controller
is part of the configuration.

00:29:34.526 --> 00:29:36.236 A:middle
So it's a property

00:29:36.236 --> 00:29:39.786 A:middle
on the WKWebView configuration
called user content controller.

00:29:44.126 --> 00:29:45.936 A:middle
So let's talk about
user scripts.

00:29:47.376 --> 00:29:51.436 A:middle
User scripts are a way
for you, app developers,

00:29:52.086 --> 00:29:56.426 A:middle
to take some JavaScript and
inject it into the web page,

00:29:56.426 --> 00:29:57.956 A:middle
and then have it do something.

00:29:59.416 --> 00:30:02.406 A:middle
This will happen automatically
for every web page.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.416 --> 00:30:02.406 A:middle
This will happen automatically
for every web page.

00:30:02.956 --> 00:30:05.686 A:middle
So you don't have to manually
call it every time the

00:30:05.686 --> 00:30:06.496 A:middle
page loads.

00:30:09.356 --> 00:30:12.856 A:middle
So when you add user scripts,
you need to consider two things.

00:30:14.046 --> 00:30:17.486 A:middle
The first one is when you
want your user script to run.

00:30:18.136 --> 00:30:22.966 A:middle
You can either run your user
script at document start time.

00:30:23.356 --> 00:30:26.626 A:middle
This is right after the document
element has been created

00:30:27.066 --> 00:30:32.806 A:middle
but before any other
document has been parsed.

00:30:32.806 --> 00:30:34.966 A:middle
Or you can run them
at document end,

00:30:34.966 --> 00:30:37.886 A:middle
which is after the
document is finished parsing

00:30:38.416 --> 00:30:40.676 A:middle
but before any subresources

00:30:40.676 --> 00:30:42.796 A:middle
such as images have
necessarily finished loading.

00:30:44.036 --> 00:30:45.346 A:middle
This corresponds to the

00:30:45.346 --> 00:30:48.626 A:middle
down content loading
event, load event.

00:30:50.586 --> 00:30:53.386 A:middle
You also want to consider
where these scripts should run.

00:30:54.106 --> 00:30:57.796 A:middle
You can run them either for all
frames, so both the mainframe

00:30:57.836 --> 00:31:02.236 A:middle
and the subframes, or just
for the mainframe only.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.836 --> 00:31:02.236 A:middle
and the subframes, or just
for the mainframe only.

00:31:04.806 --> 00:31:06.596 A:middle
So how do you create
a user script?

00:31:08.936 --> 00:31:12.526 A:middle
First, you get the script
string from somewhere.

00:31:12.776 --> 00:31:16.606 A:middle
In my case, I just have it as
a string literal in my code.

00:31:16.926 --> 00:31:22.236 A:middle
Then you create a WK user script
object and pass the source code

00:31:22.596 --> 00:31:24.806 A:middle
and here I've highlighted
the when and where.

00:31:25.276 --> 00:31:29.026 A:middle
So we want this user script
to run at document start time

00:31:29.346 --> 00:31:30.596 A:middle
but only for the mainframe.

00:31:30.786 --> 00:31:35.916 A:middle
And then you tell the user
content controller to go ahead

00:31:35.916 --> 00:31:40.286 A:middle
and add the user
scripts, and that's it.

00:31:40.556 --> 00:31:43.936 A:middle
Now, what can user scripts do?

00:31:44.076 --> 00:31:47.626 A:middle
User scripts can do
anything that scripts running

00:31:47.626 --> 00:31:48.656 A:middle
on the web page can do.

00:31:49.956 --> 00:31:52.496 A:middle
So that includes
using the down API

00:31:52.736 --> 00:31:54.456 A:middle
to change the document
structures.

00:31:55.996 --> 00:32:00.746 A:middle
Adding event listeners for
onload events or click events


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:55.996 --> 00:32:00.746 A:middle
Adding event listeners for
onload events or click events

00:32:00.746 --> 00:32:02.266 A:middle
or keyboard events or any event.

00:32:04.156 --> 00:32:06.936 A:middle
You can load external
resources like images

00:32:06.936 --> 00:32:08.776 A:middle
and even XML-HTTP requests.

00:32:10.036 --> 00:32:14.586 A:middle
And you can also communicate
back to the application,

00:32:14.866 --> 00:32:17.036 A:middle
and this is where
script messages come in.

00:32:18.316 --> 00:32:20.656 A:middle
So script messages are messages

00:32:20.746 --> 00:32:24.156 A:middle
that user scripts send
to the application.

00:32:28.116 --> 00:32:33.076 A:middle
They consist of JSON
data, so objects,

00:32:33.076 --> 00:32:35.096 A:middle
arrays, strings, etcetera.

00:32:36.536 --> 00:32:38.356 A:middle
When you send them
from your web page,

00:32:38.806 --> 00:32:40.476 A:middle
we automatically convert them

00:32:40.476 --> 00:32:42.396 A:middle
to the corresponding
objective C-types.

00:32:42.526 --> 00:32:46.616 A:middle
So N as dictionaries, N as
arrays, N as strings, etcetera.

00:32:49.146 --> 00:32:52.156 A:middle
So when you want to listen for
script messages in your app,

00:32:52.276 --> 00:32:54.696 A:middle
you want to register a
script message handler.

00:32:57.366 --> 00:32:59.816 A:middle
This involves creating
an object that conforms

00:32:59.816 --> 00:33:02.166 A:middle
to the WK script
message handler protocol.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.816 --> 00:33:02.166 A:middle
to the WK script
message handler protocol.

00:33:04.276 --> 00:33:06.856 A:middle
This protocol has 1 method
that you have to implement

00:33:07.136 --> 00:33:08.586 A:middle
that receives script message.

00:33:08.926 --> 00:33:13.906 A:middle
And then you tell the
user content controller

00:33:14.066 --> 00:33:17.146 A:middle
to add the script message
handler and you give it a name.

00:33:17.536 --> 00:33:20.656 A:middle
And this name is
really important

00:33:20.926 --> 00:33:25.316 A:middle
because it is how your web
page communicates back to you.

00:33:26.876 --> 00:33:29.706 A:middle
So when you've added a
script message handler,

00:33:30.036 --> 00:33:34.066 A:middle
we express it window dot WebKit
dot message handlers dot your

00:33:34.066 --> 00:33:35.986 A:middle
name dot post message function.

00:33:37.796 --> 00:33:40.616 A:middle
Here's how you use this
post message function.

00:33:41.106 --> 00:33:44.776 A:middle
You get your message in
JSON form from somewhere,

00:33:45.306 --> 00:33:49.076 A:middle
and then you call post message
and you pass along the message.

00:33:50.836 --> 00:33:52.776 A:middle
So on the receiving side,

00:33:52.976 --> 00:33:56.656 A:middle
WebKit will call it
receives script message

00:33:56.656 --> 00:33:59.006 A:middle
on the correct user
script message handler,

00:33:59.956 --> 00:34:04.296 A:middle
and the body property of
the WK script message object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.956 --> 00:34:04.296 A:middle
and the body property of
the WK script message object

00:34:04.296 --> 00:34:06.636 A:middle
that is passed along here
will have your message

00:34:06.636 --> 00:34:07.816 A:middle
automatically converted.

00:34:10.646 --> 00:34:13.755 A:middle
There are also some other
properties in WK script message,

00:34:13.936 --> 00:34:18.876 A:middle
you can find out which web page
posted the message, and the name

00:34:18.876 --> 00:34:20.326 A:middle
that was used to
post the message.

00:34:23.755 --> 00:34:26.866 A:middle
One interesting thing
about script messages is

00:34:27.065 --> 00:34:30.466 A:middle
that it's just not user scripts
that can send script messages.

00:34:30.876 --> 00:34:33.346 A:middle
Your web page can
also send messages.

00:34:35.275 --> 00:34:39.045 A:middle
This is really cool if you
have a website and an app

00:34:39.045 --> 00:34:40.856 A:middle
and you want the
website to be able

00:34:40.856 --> 00:34:42.826 A:middle
to communicate with your app.

00:34:43.476 --> 00:34:46.916 A:middle
But it also means that if
you have a generic browser

00:34:46.916 --> 00:34:49.516 A:middle
that can load any
website, you don't want

00:34:49.516 --> 00:34:53.216 A:middle
to blindly trust messages that
are posted by these websites.

00:34:53.786 --> 00:34:56.196 A:middle
So make sure you do the
right message validation

00:34:56.196 --> 00:34:57.636 A:middle
and then check that
the object is

00:34:57.636 --> 00:35:01.936 A:middle
of the expected types
and so forth.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.636 --> 00:35:01.936 A:middle
of the expected types
and so forth.

00:35:02.496 --> 00:35:06.406 A:middle
So now I'd like to ask Beth
to come up on stage again

00:35:06.406 --> 00:35:08.476 A:middle
and show off WKPedia for iPad.

00:35:08.796 --> 00:35:09.126 A:middle
Beth.

00:35:13.516 --> 00:35:15.606 A:middle
[ Applause ]

00:35:16.106 --> 00:35:16.676 A:middle
&gt;&gt; Thanks, Anders.

00:35:17.576 --> 00:35:19.626 A:middle
So I'll show you
WKPedia for iPad

00:35:19.626 --> 00:35:21.866 A:middle
and then we'll add
some user scripts

00:35:21.866 --> 00:35:25.246 A:middle
and some script messaging to
add these cool new features.

00:35:26.596 --> 00:35:30.926 A:middle
Okay, so back into Xcode, so
I'm using the same Xcode project

00:35:31.286 --> 00:35:33.916 A:middle
for both versions
of WKPedia actually.

00:35:34.246 --> 00:35:40.186 A:middle
So I'm just going to close up
the OS X version, open iOS code,

00:35:40.616 --> 00:35:44.316 A:middle
and switch my scheme to the iOS
scheme, so that now when I build

00:35:44.316 --> 00:35:47.806 A:middle
and run, I'll be building and
running for the iPad simulator.

00:35:48.346 --> 00:35:50.386 A:middle
All right, so let me
show you what we have.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:05.056 --> 00:36:08.156 A:middle
All right, here's
WKPedia for the iPad.

00:36:08.156 --> 00:36:11.426 A:middle
So again, our idea that we
want to use user scripts

00:36:11.426 --> 00:36:14.116 A:middle
for is we want to hide
some of this content,

00:36:14.116 --> 00:36:15.436 A:middle
we're going to hide
this side bar

00:36:15.576 --> 00:36:18.096 A:middle
so that we can maximize
the screen space

00:36:18.096 --> 00:36:20.046 A:middle
on this smaller screen,
and we also want

00:36:20.046 --> 00:36:22.676 A:middle
to hide this table
of contents section.

00:36:23.036 --> 00:36:26.356 A:middle
And then we want to extract
all of the data from the table

00:36:26.356 --> 00:36:29.736 A:middle
of contents section and
put it into a UI table view

00:36:29.736 --> 00:36:30.986 A:middle
that we already have in place.

00:36:31.396 --> 00:36:33.326 A:middle
So we can do this
with two user scripts.

00:36:33.636 --> 00:36:37.246 A:middle
First we will add a user
script to hide the things

00:36:37.246 --> 00:36:38.326 A:middle
on the page that we want hidden.

00:36:38.326 --> 00:36:40.686 A:middle
And then we'll go back and fill

00:36:40.686 --> 00:36:42.776 A:middle
in our UI table view
with another one.

00:36:43.946 --> 00:36:47.406 A:middle
All right, so first I'm going

00:36:47.406 --> 00:36:49.916 A:middle
to add a JavaScript
file to my project.

00:36:52.736 --> 00:36:55.916 A:middle
So I have one here
called hide dot js.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.436 --> 00:37:03.656 A:middle
So this is a really
simple JavaScript file.

00:37:03.656 --> 00:37:06.636 A:middle
First I'm creating
a style element

00:37:06.636 --> 00:37:09.206 A:middle
and I'm appending it
into the document.

00:37:09.556 --> 00:37:12.086 A:middle
And the style element, I'm
giving it just three styles.

00:37:12.226 --> 00:37:14.966 A:middle
So we used the Safari
Web Inspector to look

00:37:15.206 --> 00:37:17.816 A:middle
at what the Wikipedia
code looks like right now,

00:37:17.816 --> 00:37:20.166 A:middle
and we saw that the table
of contents that we want

00:37:20.166 --> 00:37:22.456 A:middle
to hide has a class name of TOC.

00:37:22.636 --> 00:37:25.566 A:middle
So I'm adding another
style to that class.

00:37:25.886 --> 00:37:29.276 A:middle
I'm setting it to display none,
and I'm making that important

00:37:29.276 --> 00:37:33.166 A:middle
so that it will override any
other display styles they have

00:37:33.166 --> 00:37:33.706 A:middle
set on it.

00:37:34.146 --> 00:37:38.176 A:middle
And the side panel has an ID
of NW panel, so I'm setting

00:37:38.176 --> 00:37:39.486 A:middle
that to display none as well.

00:37:39.936 --> 00:37:42.606 A:middle
And finally, I just want to
adjust the margin on the content

00:37:42.746 --> 00:37:44.786 A:middle
to make sure it fills
in that extra area now

00:37:44.786 --> 00:37:45.996 A:middle
that the side panel's gone.

00:37:46.436 --> 00:37:49.926 A:middle
Okay, so this is the JavaScript
that I want my app to invoke.

00:37:49.926 --> 00:37:54.226 A:middle
So now we just need to add
some code to invoke it.

00:37:54.566 --> 00:37:58.016 A:middle
So WebView controller,
this is my main class

00:37:58.016 --> 00:37:59.536 A:middle
in my iPad version.

00:37:59.946 --> 00:38:02.316 A:middle
You'll see this is where
again we have a property


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.946 --> 00:38:02.316 A:middle
You'll see this is where
again we have a property

00:38:02.316 --> 00:38:05.096 A:middle
for our WKWebView should
look awfully familiar.

00:38:06.856 --> 00:38:11.356 A:middle
So here I have a currently empty
method called add user scripts

00:38:11.356 --> 00:38:12.546 A:middle
to content controller.

00:38:12.546 --> 00:38:15.596 A:middle
So you can see this is
invoked from load view.

00:38:15.996 --> 00:38:19.186 A:middle
So and then it's passing in
the WK user content controller,

00:38:19.186 --> 00:38:20.786 A:middle
which is a part of
the configuration.

00:38:20.786 --> 00:38:23.486 A:middle
So Anders mentioned the
configuration earlier

00:38:23.486 --> 00:38:24.766 A:middle
on in the talk.

00:38:24.766 --> 00:38:26.466 A:middle
So user scripts are an example

00:38:26.466 --> 00:38:28.246 A:middle
of something that's part
of the configuration.

00:38:28.246 --> 00:38:31.356 A:middle
So that's an example of why you
want your different WKWebViews

00:38:31.556 --> 00:38:34.296 A:middle
to share a configuration, so
they all get the user scripts.

00:38:34.456 --> 00:38:39.276 A:middle
All right, so let's
invoke this script.

00:38:39.716 --> 00:38:41.796 A:middle
It's just three lines of code,

00:38:41.796 --> 00:38:43.786 A:middle
so first we're creating
an N S string

00:38:43.936 --> 00:38:46.666 A:middle
with the contents
of URL hide dot js.

00:38:46.666 --> 00:38:49.936 A:middle
So we're going to take that file
that I just added to the project

00:38:50.236 --> 00:38:51.856 A:middle
and turn it into an N S string.

00:38:52.386 --> 00:38:57.906 A:middle
Then I'm creating a WK user
script object with that string.

00:38:57.906 --> 00:38:59.866 A:middle
I'm giving it an injection time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:00.116 --> 00:39:03.736 A:middle
of WK script injection
time at document start.

00:39:03.876 --> 00:39:05.626 A:middle
So this means this
script will be injected

00:39:05.626 --> 00:39:09.146 A:middle
and it will run right after
the document element is created

00:39:09.146 --> 00:39:10.466 A:middle
before anything else happens.

00:39:10.466 --> 00:39:12.866 A:middle
That's good, that's what I
want to happen for this script,

00:39:12.866 --> 00:39:14.966 A:middle
because I want to make
sure those styles are there

00:39:14.966 --> 00:39:15.576 A:middle
right away.

00:39:15.576 --> 00:39:18.446 A:middle
I don't want the chance
for the table of contents

00:39:18.446 --> 00:39:20.856 A:middle
and the side bar to appear and
only then does my script run,

00:39:20.856 --> 00:39:21.866 A:middle
so then they disappear.

00:39:22.126 --> 00:39:22.896 A:middle
That would be terrible.

00:39:22.896 --> 00:39:24.706 A:middle
So document start,
that's what I want.

00:39:24.706 --> 00:39:26.196 A:middle
And yeah, for the
mainframe only.

00:39:26.736 --> 00:39:29.346 A:middle
Okay, then finally I just
need to add the user script

00:39:29.736 --> 00:39:31.126 A:middle
to the user content controller,

00:39:31.126 --> 00:39:33.626 A:middle
and that should be
all I have to do.

00:39:33.626 --> 00:39:35.236 A:middle
So let's build and run.

00:39:44.396 --> 00:39:47.966 A:middle
And success, the side panel is
gone, it's not longer there.

00:39:47.966 --> 00:39:51.396 A:middle
We just have the article taking
up the full width of the page.

00:39:51.726 --> 00:39:55.406 A:middle
And we also have hidden the
table of contents section,

00:39:55.406 --> 00:39:57.086 A:middle
we go right into
the history section.

00:39:57.466 --> 00:40:01.146 A:middle
Awesome. So now let's
add a second user script


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:57.466 --> 00:40:01.146 A:middle
Awesome. So now let's
add a second user script

00:40:01.436 --> 00:40:04.186 A:middle
to get the data from that
table of contents section,

00:40:04.396 --> 00:40:05.926 A:middle
put it into our UI table view.

00:40:08.866 --> 00:40:12.946 A:middle
So first we'll add a second
JavaScript file to our project.

00:40:17.206 --> 00:40:20.376 A:middle
So this goes through to that
table of contents section,

00:40:20.536 --> 00:40:23.186 A:middle
it bundles up all the data we
want, puts it into an array,

00:40:23.366 --> 00:40:25.146 A:middle
and then it sends it -- this
is the important part --

00:40:25.146 --> 00:40:27.766 A:middle
it sends it as a
message back to my app.

00:40:28.416 --> 00:40:30.276 A:middle
So let's make sure
this code gets invoked,

00:40:30.276 --> 00:40:32.126 A:middle
and then I'll show
you the code that runs

00:40:32.126 --> 00:40:36.766 A:middle
when the JavaScript
sends the message back.

00:40:36.996 --> 00:40:39.016 A:middle
So back here in my
add user scripts

00:40:39.016 --> 00:40:42.196 A:middle
to content controller method,
I'll add a little bit more code.

00:40:45.896 --> 00:40:50.686 A:middle
Okay, I'm creating another N S
string with the contents of URL.

00:40:50.856 --> 00:40:54.066 A:middle
This time it's with
my fetch dot js class.

00:40:54.206 --> 00:40:56.996 A:middle
So we're putting that
JavaScript into an NS string,

00:40:57.256 --> 00:41:00.776 A:middle
then creating a WK user
script with that string.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:57.256 --> 00:41:00.776 A:middle
then creating a WK user
script with that string.

00:41:01.066 --> 00:41:02.956 A:middle
And this one I want
to be injected

00:41:02.956 --> 00:41:04.496 A:middle
at the document end time.

00:41:04.756 --> 00:41:07.726 A:middle
So this time I want to make sure
that the DOM has been built up,

00:41:08.036 --> 00:41:11.126 A:middle
that it has all of those
elements representing the table

00:41:11.126 --> 00:41:13.186 A:middle
of contents in it
before my script runs.

00:41:13.186 --> 00:41:15.106 A:middle
Otherwise, it's not
going to find anything.

00:41:16.296 --> 00:41:18.066 A:middle
And again, for the
mainframe only,

00:41:18.286 --> 00:41:19.776 A:middle
I'll add that as a user script

00:41:19.776 --> 00:41:23.156 A:middle
and then this is an important
line of code I need to call this

00:41:23.156 --> 00:41:26.486 A:middle
so the JavaScript can
call back into my app.

00:41:26.486 --> 00:41:29.396 A:middle
So add script message
handler, set it to self,

00:41:29.396 --> 00:41:31.356 A:middle
and give it a name, did
fetch table of contents.

00:41:31.736 --> 00:41:33.916 A:middle
So when the JavaScript
calls back into my app,

00:41:33.916 --> 00:41:38.136 A:middle
I'll make this a little
wider, this is the method

00:41:38.286 --> 00:41:41.476 A:middle
that will be called, did
receive script message.

00:41:41.836 --> 00:41:44.706 A:middle
So what I'm doing in that
method is I'm making sure

00:41:44.706 --> 00:41:47.476 A:middle
that this is the script that
I'm expecting to be calling,

00:41:47.476 --> 00:41:49.056 A:middle
it did fetch table of contents.

00:41:49.556 --> 00:41:53.566 A:middle
And if so, I'm calling
into my UI table view class

00:41:54.286 --> 00:41:56.026 A:middle
with a method that
I've written there.

00:41:56.026 --> 00:41:57.496 A:middle
So I'll show that to you.

00:41:57.926 --> 00:42:03.496 A:middle
So here in my UI table
view code, I'm just going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.926 --> 00:42:03.496 A:middle
So here in my UI table
view code, I'm just going

00:42:03.496 --> 00:42:06.976 A:middle
to make sure that this
message body this is the data

00:42:06.976 --> 00:42:09.006 A:middle
that was sent to me
straight from the JavaScript,

00:42:09.146 --> 00:42:10.126 A:middle
making sure it's an array

00:42:10.126 --> 00:42:11.796 A:middle
because that's what
I'm expecting.

00:42:12.006 --> 00:42:15.536 A:middle
Then I call make entries, which
is implemented right up here.

00:42:15.536 --> 00:42:18.476 A:middle
And I go through that array and
I make sure it's all the data

00:42:18.476 --> 00:42:19.756 A:middle
that I'm expecting it to be,

00:42:19.756 --> 00:42:21.916 A:middle
that I've written my
script to send over.

00:42:22.196 --> 00:42:24.106 A:middle
It's a string representing
the title.

00:42:24.326 --> 00:42:26.806 A:middle
It's the URL representing
the URL

00:42:26.806 --> 00:42:28.656 A:middle
that that title would
navigate to so

00:42:28.656 --> 00:42:30.696 A:middle
that we can have our
app navigate to that URL

00:42:30.936 --> 00:42:34.046 A:middle
when the user taps on it.

00:42:34.046 --> 00:42:37.006 A:middle
And if I have all of that
data like I'm expecting it,

00:42:37.006 --> 00:42:40.656 A:middle
I create a table of contents
entry and I add it to an array.

00:42:40.876 --> 00:42:44.316 A:middle
And then finally back here this
is where I invoked that method,

00:42:44.316 --> 00:42:46.236 A:middle
I'm going to tell the table view

00:42:46.236 --> 00:42:47.726 A:middle
to reload its data
at this point.

00:42:47.726 --> 00:42:50.226 A:middle
And then that data should
all be in there, okay.

00:42:51.176 --> 00:42:55.696 A:middle
So set this all up,
let's see if it works.

00:42:55.696 --> 00:42:57.496 A:middle
Let's build and run.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:05.346 --> 00:43:08.646 A:middle
So here we are, WKPedia, every
thing's hidden still, great.

00:43:09.226 --> 00:43:11.916 A:middle
Contents did not
quite work, all right.

00:43:12.046 --> 00:43:16.536 A:middle
So I suspect that I have
a bug in my JavaScript,

00:43:17.076 --> 00:43:19.576 A:middle
and one thing that's
really cool is

00:43:19.576 --> 00:43:22.606 A:middle
that I can actually inspect
all of the web content

00:43:22.606 --> 00:43:26.226 A:middle
in my WKWebView using
the Safari web inspector.

00:43:26.666 --> 00:43:28.416 A:middle
I can even inspect
the user scripts

00:43:28.416 --> 00:43:30.056 A:middle
that I've injected,
which is pretty cool.

00:43:30.476 --> 00:43:32.956 A:middle
But don't worry, only you
can do this with your app,

00:43:33.086 --> 00:43:34.886 A:middle
other people won't be
able to inspect your app.

00:43:35.876 --> 00:43:38.066 A:middle
So let me open the inspector.

00:43:40.296 --> 00:43:43.026 A:middle
Let's make sure this
happens on all pages.

00:43:43.026 --> 00:43:48.516 A:middle
Go to a new page, still no
table of contents, okay.

00:43:54.096 --> 00:43:54.896 A:middle
So.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:02.386 --> 00:44:05.396 A:middle
Here, if I go over into
my resources panel,

00:44:06.106 --> 00:44:08.666 A:middle
here let me zoom
this in for actually.

00:44:08.666 --> 00:44:12.396 A:middle
You can see that I have
my user scripts over here

00:44:13.026 --> 00:44:14.656 A:middle
under the extra scripts section.

00:44:14.966 --> 00:44:18.966 A:middle
So under user script 2, this
is the script I want to look

00:44:18.966 --> 00:44:20.606 A:middle
at so I can add a
breakpoint there

00:44:20.606 --> 00:44:22.436 A:middle
and just reload right
in the inspector.

00:44:22.726 --> 00:44:25.506 A:middle
All right, let's
get rid of that.

00:44:25.806 --> 00:44:28.966 A:middle
Okay, let's step through
to OC links, all right.

00:44:29.016 --> 00:44:30.276 A:middle
Do we get into the loop?

00:44:30.276 --> 00:44:35.246 A:middle
We do. Great, we get the
texts, not a text break.

00:44:35.486 --> 00:44:38.146 A:middle
Okay, well, there's the bug,
we had 2 breaks in a row

00:44:38.146 --> 00:44:39.996 A:middle
so we never got to the
code that added any

00:44:39.996 --> 00:44:41.156 A:middle
of this data to an array.

00:44:41.526 --> 00:44:45.076 A:middle
So this should be an easy bug
to fix now that I've spotted it.

00:44:46.196 --> 00:44:47.846 A:middle
So let's go back into Xcode.

00:44:47.846 --> 00:44:48.956 A:middle
There she is, all right,
let's build and run.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:04.196 --> 00:45:06.776 A:middle
Yes, we have our
table of contents.

00:45:07.126 --> 00:45:10.176 A:middle
So now I have our
table of contents.

00:45:10.836 --> 00:45:15.056 A:middle
If I click around here, I'll
navigate to the right section

00:45:15.056 --> 00:45:17.526 A:middle
of the document because I
was sure to include that data

00:45:17.526 --> 00:45:19.556 A:middle
when I passed it
back from the script.

00:45:20.216 --> 00:45:21.536 A:middle
And there you have it.

00:45:22.136 --> 00:45:27.046 A:middle
So today we've built a
dedicated Wikipedia browser app

00:45:27.106 --> 00:45:29.186 A:middle
for Mac and for iOS.

00:45:29.536 --> 00:45:31.336 A:middle
We've added some
advanced features

00:45:31.336 --> 00:45:33.786 A:middle
to make our app interact
with our web content.

00:45:34.026 --> 00:45:36.376 A:middle
And we've done it all with
the modern WebKit API.

00:45:36.806 --> 00:45:40.976 A:middle
So that's all I have for you,
I'll hand it back to Anders now.

00:45:41.046 --> 00:45:41.826 A:middle
&gt;&gt; Thanks, Beth.

00:45:42.076 --> 00:45:44.976 A:middle
Wow, this is really going to
make my Wikipedia browsing

00:45:45.026 --> 00:45:46.986 A:middle
so much more efficient
on my way to work.

00:45:47.646 --> 00:45:53.666 A:middle
So the Modern WebKit
API available for iOS 8

00:45:54.096 --> 00:45:58.306 A:middle
and OS X Yosemite same
API on both platforms.

00:45:59.996 --> 00:46:02.656 A:middle
You get the full
JavaScript Nitro engine,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.996 --> 00:46:02.656 A:middle
You get the full
JavaScript Nitro engine,

00:46:02.746 --> 00:46:04.736 A:middle
including the fourth
tier compiler.

00:46:06.326 --> 00:46:13.136 A:middle
It's multi-process, which
is great for responsiveness

00:46:13.136 --> 00:46:15.046 A:middle
and also for battery life.

00:46:16.116 --> 00:46:21.036 A:middle
And with user script and script
messages, web pages can talk

00:46:21.036 --> 00:46:22.586 A:middle
to your app and vice versa.

00:46:24.586 --> 00:46:28.666 A:middle
Now, we've only shown a
handful of classes here,

00:46:29.176 --> 00:46:32.166 A:middle
but the Modern WebKit API
has much more to offer.

00:46:34.836 --> 00:46:39.926 A:middle
So here's what I want you to
do, adopt the Modern WebKit API.

00:46:40.726 --> 00:46:42.856 A:middle
If you're thinking
of writing a new app,

00:46:44.066 --> 00:46:47.666 A:middle
I would strongly consider
using the new API.

00:46:49.916 --> 00:46:53.066 A:middle
If you already have an app
that is using either UIWebView

00:46:53.296 --> 00:46:56.706 A:middle
or WebView, don't worry,
those API's are still there.

00:46:57.116 --> 00:47:00.976 A:middle
But we are committed to this
new API, the Modern WebKit API,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.116 --> 00:47:00.976 A:middle
But we are committed to this
new API, the Modern WebKit API,

00:47:01.416 --> 00:47:06.466 A:middle
and some features, like faster
JavaScript are only available

00:47:06.466 --> 00:47:09.576 A:middle
in the new API.

00:47:09.576 --> 00:47:13.026 A:middle
And since this is a new
API, we would really love

00:47:13.026 --> 00:47:17.886 A:middle
to hear what you think about it,
so buy radars, come to the labs,

00:47:17.886 --> 00:47:22.086 A:middle
bring your code, post
in the developer forums.

00:47:23.806 --> 00:47:27.046 A:middle
If you want to contact our
frameworks evangelism team,

00:47:27.046 --> 00:47:28.756 A:middle
you can do so at
this email address.

00:47:29.116 --> 00:47:31.846 A:middle
There's more information
on WebKit and Safari

00:47:31.846 --> 00:47:33.226 A:middle
on the Safari Dev Center.

00:47:33.726 --> 00:47:35.616 A:middle
And the Modern WebKit
API is part

00:47:35.616 --> 00:47:37.666 A:middle
of the WebKit Open Source
Project, so you can go

00:47:37.666 --> 00:47:39.216 A:middle
to WebKit.org and check it out.

00:47:39.676 --> 00:47:44.406 A:middle
You can also go to the developer
forums and post your questions

00:47:44.606 --> 00:47:48.036 A:middle
and we'll make sure
to answer them.

00:47:48.206 --> 00:47:52.906 A:middle
Related sessions, if you have an
app and a website and you want

00:47:52.906 --> 00:47:54.586 A:middle
to make sure they work together,

00:47:54.886 --> 00:47:57.566 A:middle
there's a great session this
afternoon called Your App,

00:47:57.566 --> 00:47:58.996 A:middle
Your Website, and Safari.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.226 --> 00:48:03.346 A:middle
On Thursday, there's a session
about the web inspector.

00:48:03.526 --> 00:48:06.616 A:middle
And on Friday morning, there's
a really interesting session

00:48:06.616 --> 00:48:10.476 A:middle
where engineers on the iWork
team talk about best practices

00:48:10.476 --> 00:48:13.156 A:middle
for sharing code
between iOS and OS X.

00:48:13.206 --> 00:48:15.666 A:middle
And thank you very
much for coming.

00:48:16.156 --> 00:48:16.856 A:middle
Thanks

