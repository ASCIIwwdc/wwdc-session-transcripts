WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:12.596 --> 00:00:15.086 A:middle
&gt;&gt; Good morning and
welcome to session 508.

00:00:15.276 --> 00:00:16.155 A:middle
I'm Brad Ford.

00:00:16.596 --> 00:00:18.886 A:middle
I'm an Engineer in the
Camera Software Group.

00:00:20.086 --> 00:00:22.336 A:middle
And hopefully you're not
here to learn about Swift,

00:00:22.336 --> 00:00:24.516 A:middle
because we're going to
talk about cameras today,

00:00:24.836 --> 00:00:28.666 A:middle
specifically camera developments
on Yosemite and iOS 8.

00:00:28.666 --> 00:00:31.136 A:middle
If you want to hear about that
you've come to the right place.

00:00:35.596 --> 00:00:37.766 A:middle
If you're new to Camera
Capture in general on OS X

00:00:38.096 --> 00:00:41.376 A:middle
or iOS we invite you to review
our past sessions from WWDC.

00:00:41.376 --> 00:00:45.366 A:middle
They're available right
within your WWDC app or online

00:00:45.366 --> 00:00:46.836 A:middle
at developer.apple.com.

00:00:47.436 --> 00:00:49.896 A:middle
They provide great background
information for today's talk

00:00:49.896 --> 00:00:52.186 A:middle
and they also show you the
progression of our API set

00:00:52.186 --> 00:00:53.276 A:middle
over the last four years.

00:00:53.806 --> 00:00:56.946 A:middle
And seeing as we're so close

00:00:56.946 --> 00:00:59.736 A:middle
to lunchtime we thought we'd
present you a little menu

00:00:59.736 --> 00:01:00.326 A:middle
of our own.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.736 --> 00:01:00.326 A:middle
of our own.

00:01:00.866 --> 00:01:02.816 A:middle
We'll begin with
a light appetizer

00:01:02.816 --> 00:01:06.646 A:middle
of Yosemite camera developments
and iOS updates followed

00:01:06.646 --> 00:01:09.166 A:middle
by our manual camera
controls main course

00:01:09.446 --> 00:01:10.616 A:middle
and then we'll finish things off

00:01:10.616 --> 00:01:13.006 A:middle
with some tasty bracketed
capture for dessert.

00:01:13.526 --> 00:01:18.726 A:middle
There is a lot to digest
here so let's get going.

00:01:18.796 --> 00:01:21.926 A:middle
First up is Capture in AVKit.

00:01:22.766 --> 00:01:27.416 A:middle
AVKit is sort of like
AppKit except it's for audio

00:01:27.416 --> 00:01:29.926 A:middle
and video thus the name AVKit.

00:01:29.926 --> 00:01:33.146 A:middle
It is to AV Foundation as
AppKit is to Foundation.

00:01:33.496 --> 00:01:35.876 A:middle
So, it provides view
classes and standard UI

00:01:36.486 --> 00:01:39.576 A:middle
for common media operations
like media playback

00:01:39.576 --> 00:01:41.496 A:middle
and now for capture as well.

00:01:42.196 --> 00:01:47.486 A:middle
Here's a first look at
what AVCaptureView looks

00:01:47.486 --> 00:01:48.516 A:middle
like on OS X.

00:01:48.986 --> 00:01:52.086 A:middle
It's a standardized UI for
capture and it's built on top

00:01:52.086 --> 00:01:53.756 A:middle
of AV Foundation's
capture classes.

00:01:53.756 --> 00:01:58.256 A:middle
If it looks similar to QuickTime
Player 10, that's no mistake.

00:01:58.256 --> 00:02:01.256 A:middle
It's QuickTime Player 10
actually uses an AVCaptureView


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.256 --> 00:02:01.256 A:middle
It's QuickTime Player 10
actually uses an AVCaptureView

00:02:01.386 --> 00:02:02.166 A:middle
in Yosemite.

00:02:03.016 --> 00:02:06.056 A:middle
Let's take a quick look
around the feature set.

00:02:06.856 --> 00:02:11.736 A:middle
It provides a nice HUD
with standard UI for record

00:02:11.736 --> 00:02:15.556 A:middle
and volume controls and
an optional drop down menu

00:02:15.626 --> 00:02:17.696 A:middle
for audio and video
capture device picking.

00:02:18.176 --> 00:02:21.036 A:middle
Now, for a quick refresher

00:02:21.036 --> 00:02:23.466 A:middle
on how AVFoundation's
capture classes work.

00:02:23.916 --> 00:02:25.996 A:middle
At the center of our
capture universe is an AV

00:02:25.996 --> 00:02:26.916 A:middle
capture session.

00:02:27.546 --> 00:02:29.806 A:middle
That's the object that you
tell to start and stop running.

00:02:30.426 --> 00:02:32.356 A:middle
It doesn't do anything
very interesting, however,

00:02:32.356 --> 00:02:33.836 A:middle
until you provide
it with some input.

00:02:34.676 --> 00:02:36.816 A:middle
We represent these
as AVCaptureInputs.

00:02:36.816 --> 00:02:41.256 A:middle
Here I have an AVCapture camera
and a microphone as devices

00:02:42.326 --> 00:02:43.846 A:middle
and the data needs
to flow somewhere.

00:02:43.916 --> 00:02:46.696 A:middle
And we represent these
as AVCaptureOutputs.

00:02:46.806 --> 00:02:50.076 A:middle
Here I have a concrete
AVCaptureMovieFileOutput,

00:02:50.416 --> 00:02:52.036 A:middle
which is used for
writing movie files.

00:02:52.826 --> 00:02:56.366 A:middle
The connections from inputs to
outputs flow through the session

00:02:56.756 --> 00:02:57.546 A:middle
and are referred

00:02:57.546 --> 00:03:00.006 A:middle
to as AVCaptureConnections
in our API set.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.546 --> 00:03:00.006 A:middle
to as AVCaptureConnections
in our API set.

00:03:00.606 --> 00:03:03.226 A:middle
Now, let's refer all this
back to the new AVCaptureView.

00:03:03.486 --> 00:03:04.356 A:middle
How does that all work?

00:03:05.356 --> 00:03:07.666 A:middle
Well, in the default
case, the simple case,

00:03:09.156 --> 00:03:12.536 A:middle
you just instantiate an
AVCaptureView and all

00:03:12.536 --> 00:03:14.376 A:middle
of this is taken
care of for you.

00:03:14.626 --> 00:03:16.696 A:middle
You either instantiate it
or drop it into your NIB

00:03:16.696 --> 00:03:19.606 A:middle
and it will manage that
AVCapture session for you.

00:03:20.146 --> 00:03:22.936 A:middle
All you need to do is implement
a single delegate method

00:03:23.226 --> 00:03:25.866 A:middle
to make recording work
and it looks like this.

00:03:26.356 --> 00:03:28.966 A:middle
There's a single
method, which gets called

00:03:29.116 --> 00:03:30.936 A:middle
when someone clicks
on the Record button.

00:03:31.796 --> 00:03:35.206 A:middle
In the simple case all you need
do is pass the file output,

00:03:35.776 --> 00:03:36.466 A:middle
the call

00:03:36.466 --> 00:03:39.286 A:middle
to startRecordingToOutputFile
and you're done.

00:03:39.716 --> 00:03:41.776 A:middle
You have a fully
functioning recording UI.

00:03:43.596 --> 00:03:45.476 A:middle
The second case is the custom

00:03:45.996 --> 00:03:48.396 A:middle
or slightly more
complicated mode of running.

00:03:49.016 --> 00:03:51.416 A:middle
In this mode of running
you provide your own

00:03:51.416 --> 00:03:54.276 A:middle
AVCaptureSession
configured to your liking.

00:03:54.816 --> 00:03:57.726 A:middle
So, you could set it with a
custom AVCaptureSession preset,

00:03:57.786 --> 00:04:00.946 A:middle
a custom frame rate,
anything that you'd like.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:57.786 --> 00:04:00.946 A:middle
a custom frame rate,
anything that you'd like.

00:04:01.456 --> 00:04:04.286 A:middle
AVCaptureView will
still manage the inputs

00:04:04.286 --> 00:04:08.416 A:middle
for you and provide the UI.

00:04:08.616 --> 00:04:09.966 A:middle
That's it for AVCaptureView.

00:04:09.966 --> 00:04:13.106 A:middle
Let's move on to a great new
feature called iOS Screen

00:04:13.106 --> 00:04:15.166 A:middle
Recording on OS X.

00:04:15.446 --> 00:04:16.596 A:middle
Try to wrap your
brain around that.

00:04:18.386 --> 00:04:22.166 A:middle
New in Yosemite you can plug
your iPhone or iOS device

00:04:22.266 --> 00:04:25.956 A:middle
into a Mac and it shows
up as a selectable camera.

00:04:26.936 --> 00:04:29.256 A:middle
So, you can do stuff like
this in QuickTime Player.

00:04:29.546 --> 00:04:30.976 A:middle
You have the standard
recording UI.

00:04:31.516 --> 00:04:35.546 A:middle
[ Applause ]

00:04:36.046 --> 00:04:37.746 A:middle
And you can record what's
happening on your iOS screen

00:04:37.746 --> 00:04:40.496 A:middle
and then you can publish
for instance a how-to video,

00:04:41.516 --> 00:04:44.066 A:middle
give something to your mom to
show her how to do something

00:04:44.646 --> 00:04:48.746 A:middle
or you can do an app
preview, which we'll talk

00:04:48.746 --> 00:04:49.426 A:middle
about more in a minute.

00:04:49.966 --> 00:04:51.796 A:middle
There are some special
considerations, however.

00:04:52.406 --> 00:04:54.946 A:middle
First of all, iOS
devices are presented

00:04:54.946 --> 00:04:58.376 A:middle
as CoreMedia IO DAL
plug-ins the same way

00:04:58.376 --> 00:05:00.876 A:middle
as any third party
camera interface.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.376 --> 00:05:00.876 A:middle
as any third party
camera interface.

00:05:01.696 --> 00:05:03.116 A:middle
But, we consider them special,

00:05:03.116 --> 00:05:06.096 A:middle
because they're really a screen
grabbing device not a live

00:05:06.146 --> 00:05:06.766 A:middle
camera feed.

00:05:07.156 --> 00:05:08.846 A:middle
So, we don't want to
confuse shipping apps

00:05:08.876 --> 00:05:12.736 A:middle
by having this weird camera show
up suddenly and unexpectedly.

00:05:13.016 --> 00:05:15.726 A:middle
Therefore, you need to opt
in to get this behavior

00:05:15.816 --> 00:05:20.106 A:middle
to see iOS devices as
AVCapture devices in your app

00:05:20.106 --> 00:05:21.206 A:middle
and this is how you do it.

00:05:21.486 --> 00:05:23.106 A:middle
There's a single property
call that you make

00:05:23.466 --> 00:05:26.776 A:middle
on the CoreMedia IO
system object telling it

00:05:26.816 --> 00:05:29.336 A:middle
to allow screen capture devices.

00:05:29.786 --> 00:05:32.176 A:middle
Once you've opted in, if
you iterate through the list

00:05:32.176 --> 00:05:35.626 A:middle
of AVCapture devices you'll
find your iOS devices there.

00:05:35.626 --> 00:05:40.436 A:middle
And as you plug them in or
unplug them they'll come and go.

00:05:41.186 --> 00:05:44.666 A:middle
There is in fact, a whole
session devoted to this topic

00:05:44.896 --> 00:05:47.776 A:middle
and its tomorrow at
3:15 in Russian Hill.

00:05:48.666 --> 00:05:50.636 A:middle
Also, if you'd like to
learn more specifically

00:05:50.636 --> 00:05:53.246 A:middle
about how the DAL part
works, we invite you to come

00:05:53.246 --> 00:05:56.376 A:middle
and visit us in the labs.

00:05:56.376 --> 00:05:57.756 A:middle
All right, that's
it for Yosemite.

00:05:57.826 --> 00:06:00.726 A:middle
Let's move on to our iOS
8 Capture Enhancements.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.826 --> 00:06:00.726 A:middle
Let's move on to our iOS
8 Capture Enhancements.

00:06:01.646 --> 00:06:05.026 A:middle
First up, machine-readable
codes aka barcodes.

00:06:05.756 --> 00:06:07.276 A:middle
Last year we introduced support

00:06:07.276 --> 00:06:09.856 A:middle
for barcode detection during
real-time video capture

00:06:10.296 --> 00:06:13.236 A:middle
and we support a long list of
bar codes as you can see here.

00:06:14.716 --> 00:06:17.896 A:middle
In iOS 8 we're supporting
three new symbology types,

00:06:18.026 --> 00:06:21.956 A:middle
Data Matrix, Interleaved
2 of 5 and ITF14.

00:06:24.086 --> 00:06:27.666 A:middle
Next up, we're continuing
with our efforts

00:06:27.666 --> 00:06:30.046 A:middle
to provide greater
transparency to users.

00:06:30.496 --> 00:06:33.006 A:middle
If you'll recall in iOS
7, for the first time,

00:06:33.076 --> 00:06:34.886 A:middle
these dialogues showed up.

00:06:35.346 --> 00:06:36.816 A:middle
The first time your app tries

00:06:36.846 --> 00:06:39.596 A:middle
to use the microphone you
get the microphone dialogue

00:06:40.296 --> 00:06:43.066 A:middle
and in some regions the
first time your app attempts

00:06:43.066 --> 00:06:45.736 A:middle
to use the camera, it would
show the second dialogue.

00:06:46.186 --> 00:06:47.956 A:middle
We only showed that
dialogue in regions

00:06:47.956 --> 00:06:49.496 A:middle
where it was required by law.

00:06:50.106 --> 00:06:53.366 A:middle
In iOS 8, however, we're
requiring user consent

00:06:53.486 --> 00:06:55.866 A:middle
to use the camera or
mic in all regions.

00:06:55.956 --> 00:06:59.226 A:middle
A couple of reasons for that,
it's a good thing for you

00:06:59.226 --> 00:07:02.186 A:middle
as developers, because you
get a more consistent behavior


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.226 --> 00:07:02.186 A:middle
as developers, because you
get a more consistent behavior

00:07:02.426 --> 00:07:03.986 A:middle
across all regions.

00:07:03.986 --> 00:07:05.266 A:middle
It's easier to debug your code.

00:07:05.706 --> 00:07:08.456 A:middle
And for us it's great, because
we have a more consistent

00:07:08.456 --> 00:07:10.496 A:middle
platform experience
and people feel

00:07:10.496 --> 00:07:12.556 A:middle
like their privacy
is being respected.

00:07:13.726 --> 00:07:16.206 A:middle
You can refer back to
last year's session 610

00:07:16.386 --> 00:07:18.906 A:middle
for coding examples of how
to deal with these dialogues.

00:07:20.536 --> 00:07:22.816 A:middle
All right, I hope you
enjoyed the appetizer,

00:07:22.816 --> 00:07:24.976 A:middle
because it's time
for the main course.

00:07:25.496 --> 00:07:29.606 A:middle
We've done this for
four years now, I think.

00:07:29.606 --> 00:07:31.376 A:middle
AVFoundation came
out four years ago.

00:07:31.376 --> 00:07:34.476 A:middle
And so for four years you've
been coming to the labs.

00:07:34.476 --> 00:07:37.296 A:middle
You've been talking to us,
filing enhancement requests,

00:07:37.296 --> 00:07:39.726 A:middle
filing bug reports and
we read all of them.

00:07:39.726 --> 00:07:41.376 A:middle
There have been some
really interesting

00:07:41.376 --> 00:07:41.976 A:middle
enhancement requests.

00:07:49.156 --> 00:07:51.276 A:middle
In fact, there have been a
lot of enhancement requests.

00:07:52.186 --> 00:07:58.446 A:middle
No, like a lot of enhancement
requests and it turns out a lot

00:07:58.446 --> 00:08:01.526 A:middle
of you want the same
things and we listen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.446 --> 00:08:01.526 A:middle
of you want the same
things and we listen.

00:08:01.766 --> 00:08:03.566 A:middle
We read all of those bug reports

00:08:03.746 --> 00:08:06.456 A:middle
and so we know what the
majority of you want.

00:08:07.686 --> 00:08:11.676 A:middle
Your top two feature
requests were direct access

00:08:11.676 --> 00:08:15.406 A:middle
to the H.264 video encoder
during real-time capture

00:08:15.736 --> 00:08:17.636 A:middle
and manual camera controls.

00:08:18.136 --> 00:08:19.976 A:middle
Good news, you're getting
both of them in iOS 8.

00:08:20.516 --> 00:08:26.026 A:middle
[ Applause ]

00:08:26.526 --> 00:08:28.376 A:middle
So, H.264 video encoder.

00:08:29.256 --> 00:08:30.956 A:middle
We're introducing
support for access

00:08:30.986 --> 00:08:34.566 A:middle
to the hardware H.264 video
encoder via the video toolbox

00:08:34.566 --> 00:08:36.856 A:middle
APIs, which have already
been available on Mac OS X,

00:08:37.176 --> 00:08:39.066 A:middle
but now they're available
on iOS as well.

00:08:39.616 --> 00:08:41.686 A:middle
What this means for you
as a capture client is

00:08:41.686 --> 00:08:43.796 A:middle
if you're using a video
data output you get

00:08:43.796 --> 00:08:44.846 A:middle
uncompressed buffers.

00:08:44.846 --> 00:08:46.036 A:middle
Now, you can compress them.

00:08:46.476 --> 00:08:50.256 A:middle
You can do I-frame
insertion, bitrate adjustment,

00:08:50.256 --> 00:08:52.006 A:middle
choose what kind
of GOPs you want,

00:08:52.156 --> 00:08:54.316 A:middle
a whole lot of features
at your disposal.

00:08:55.716 --> 00:08:58.336 A:middle
There is in fact, too much
to talk about at one session

00:08:58.336 --> 00:09:02.426 A:middle
so we're going to do it again
tomorrow, Thursday 11:30


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.336 --> 00:09:02.426 A:middle
so we're going to do it again
tomorrow, Thursday 11:30

00:09:02.426 --> 00:09:05.826 A:middle
where we'll just talk about the
specifics of H.264 encoding.

00:09:06.426 --> 00:09:09.246 A:middle
Don't miss it.

00:09:09.516 --> 00:09:12.306 A:middle
Now onto the meat of the matter,
which is manual camera controls.

00:09:12.866 --> 00:09:16.596 A:middle
Our aim here is nothing short of
making iOS the premier platform

00:09:16.886 --> 00:09:18.746 A:middle
for computational
and pro photography.

00:09:19.386 --> 00:09:24.456 A:middle
Now, when I say manual
controls what does that evoke?

00:09:24.456 --> 00:09:26.006 A:middle
What sort of picture
comes to your mind?

00:09:26.676 --> 00:09:29.886 A:middle
Is it something like this,

00:09:31.876 --> 00:09:34.106 A:middle
lots of dangerous
looking knobs and buttons?

00:09:35.566 --> 00:09:36.076 A:middle
Well, it's true.

00:09:36.076 --> 00:09:38.046 A:middle
Manual camera controls
aren't for everyone.

00:09:38.496 --> 00:09:41.906 A:middle
It's the age-old problem,
automatic versus manual.

00:09:42.346 --> 00:09:45.406 A:middle
Well, our automatic controls
work great for most apps

00:09:45.776 --> 00:09:47.956 A:middle
and manual controls
offer a greater degree

00:09:47.956 --> 00:09:50.586 A:middle
of creative control and
more freedom to experiment.

00:09:51.176 --> 00:09:53.716 A:middle
But, with great power
comes great responsibility.

00:09:53.926 --> 00:09:57.026 A:middle
So, while we're providing the
power you must provide the

00:09:57.026 --> 00:09:58.906 A:middle
responsibility and
the common sense.

00:09:59.476 --> 00:10:01.716 A:middle
The manual shifter sure
makes for a fun drive,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.476 --> 00:10:01.716 A:middle
The manual shifter sure
makes for a fun drive,

00:10:01.936 --> 00:10:04.546 A:middle
but it's not going to prevent
you from going from second gear

00:10:04.546 --> 00:10:06.806 A:middle
into fifth or forgetting
to push the clutch in

00:10:06.806 --> 00:10:07.836 A:middle
and grinding your gears.

00:10:08.056 --> 00:10:08.956 A:middle
You see where I'm
going with that.

00:10:10.816 --> 00:10:13.286 A:middle
All right, we're going to talk
about four things in particular,

00:10:13.546 --> 00:10:18.196 A:middle
focus, exposure, exposure
compensation and white balance.

00:10:20.006 --> 00:10:23.786 A:middle
Again, referring to our
diagram of AVCapture objects all

00:10:23.786 --> 00:10:25.866 A:middle
of the manual control
APIs I'm going to talk

00:10:25.866 --> 00:10:26.826 A:middle
about are implemented

00:10:26.826 --> 00:10:29.456 A:middle
in a single class,
the AVCaptureDevice.

00:10:29.976 --> 00:10:32.786 A:middle
First up is manual focus.

00:10:34.476 --> 00:10:37.376 A:middle
Focus refers to the sharpness
of objects in the frame

00:10:37.956 --> 00:10:39.966 A:middle
and we have a great
autofocus mechanism.

00:10:40.336 --> 00:10:44.246 A:middle
Its job is to try to keep the
most important things sharp.

00:10:44.646 --> 00:10:47.016 A:middle
But, with manual focus you've
got some more creative control.

00:10:47.346 --> 00:10:50.586 A:middle
For instance, you could allow
a pro photographer to soften

00:10:50.586 --> 00:10:54.566 A:middle
up the image such as right here
or do a dramatic focus pull.

00:10:55.026 --> 00:10:56.336 A:middle
You as a developer might want

00:10:56.336 --> 00:10:58.546 A:middle
to develop your own
focus stacking algorithm,

00:10:58.546 --> 00:11:01.266 A:middle
so you can pull different
objects in and out of focus.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.546 --> 00:11:01.266 A:middle
so you can pull different
objects in and out of focus.

00:11:02.006 --> 00:11:05.566 A:middle
If you're a scientist or a
writer of medical applications,

00:11:05.926 --> 00:11:06.406 A:middle
you might want

00:11:06.406 --> 00:11:08.376 A:middle
to programmatically
move the lens position

00:11:08.376 --> 00:11:10.096 A:middle
around for experiments.

00:11:11.306 --> 00:11:12.436 A:middle
Here's how it works.

00:11:12.926 --> 00:11:15.486 A:middle
You've got a subject, here
it's the candle on the left

00:11:16.226 --> 00:11:17.826 A:middle
and you've got a
sensor on the right.

00:11:18.456 --> 00:11:21.596 A:middle
In the middle there's a lens
and the job of the lens is

00:11:21.596 --> 00:11:24.226 A:middle
to focus light rays
onto the sensor.

00:11:24.876 --> 00:11:27.906 A:middle
Focus is altered by
moving the lens nearer

00:11:27.906 --> 00:11:29.446 A:middle
or farther from the sensor.

00:11:29.916 --> 00:11:32.116 A:middle
And the farther the
lens is from the sensor,

00:11:32.506 --> 00:11:34.146 A:middle
distant objects look sharper.

00:11:34.296 --> 00:11:35.436 A:middle
So, here we've got a problem.

00:11:35.776 --> 00:11:37.236 A:middle
The candle image is blurry

00:11:37.566 --> 00:11:40.036 A:middle
because our lens is focusing
light rays from the candle

00:11:40.336 --> 00:11:41.396 A:middle
in front of the sensor.

00:11:41.956 --> 00:11:45.246 A:middle
But, as we move the lens
closer to the sensor we see

00:11:45.246 --> 00:11:46.746 A:middle
that the candle image
becomes sharp,

00:11:46.746 --> 00:11:48.906 A:middle
because the light rays
converge in the right place.

00:11:50.676 --> 00:11:52.546 A:middle
Now, let's talk a
few focus terms.

00:11:53.436 --> 00:11:54.796 A:middle
First is depth of field.

00:11:55.616 --> 00:11:58.456 A:middle
This is the distance between
the nearest and farthest objects

00:11:58.456 --> 00:12:00.476 A:middle
that can be judged
to be in focus.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.456 --> 00:12:00.476 A:middle
that can be judged
to be in focus.

00:12:01.036 --> 00:12:04.276 A:middle
At the near end we have
what's called macro

00:12:04.676 --> 00:12:08.066 A:middle
and that's the closest distance
at which the lens can focus.

00:12:08.176 --> 00:12:10.516 A:middle
At the far end is infinity.

00:12:11.906 --> 00:12:15.436 A:middle
Somewhere in between there is
a sweet spot called hyperfocal

00:12:15.436 --> 00:12:18.236 A:middle
distance and that's the distance

00:12:18.286 --> 00:12:20.686 A:middle
that maximizes your
depth of field.

00:12:21.126 --> 00:12:23.746 A:middle
Because if you find this
position and focus there,

00:12:24.036 --> 00:12:26.326 A:middle
everything from infinity to half

00:12:26.326 --> 00:12:30.336 A:middle
of the hyperfocal distance
is going to be sharp.

00:12:30.476 --> 00:12:31.976 A:middle
The last is lens position

00:12:32.036 --> 00:12:33.836 A:middle
and that's what makes
all this magic happen.

00:12:34.236 --> 00:12:37.136 A:middle
When you move the lens position
you are moving the distance

00:12:37.136 --> 00:12:40.166 A:middle
of the lens from the sensor
and therefore altering focus.

00:12:41.346 --> 00:12:42.146 A:middle
Now, quickly let's talk

00:12:42.146 --> 00:12:44.746 A:middle
about what you can do
already in iOS 7 and earlier.

00:12:45.616 --> 00:12:48.846 A:middle
We provide great automatic
controls in a AVCaptureDevice.

00:12:49.136 --> 00:12:53.386 A:middle
Three modes: locked,
one shot autofocus,

00:12:53.456 --> 00:12:56.636 A:middle
which sweeps the lens
position through all ranges

00:12:56.636 --> 00:12:58.786 A:middle
until it finds sharp focus
and then parks it there.

00:12:59.636 --> 00:13:02.506 A:middle
And continuous autofocus,
which gives the camera freedom


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.636 --> 00:13:02.506 A:middle
And continuous autofocus,
which gives the camera freedom

00:13:02.506 --> 00:13:05.296 A:middle
to refocus anytime it
thinks the scene has become

00:13:05.296 --> 00:13:06.266 A:middle
sufficiently blurry.

00:13:07.576 --> 00:13:14.376 A:middle
We also provide, there
we go, a focus point

00:13:14.376 --> 00:13:15.746 A:middle
of interest, which is settable.

00:13:15.836 --> 00:13:18.156 A:middle
It lets you tap to focus
on a particular area

00:13:18.576 --> 00:13:20.406 A:middle
so that it becomes sharp.

00:13:20.406 --> 00:13:23.806 A:middle
And you can also know
when the lens is moving

00:13:23.986 --> 00:13:27.146 A:middle
by key value observing the
isAdjustingFocus property.

00:13:28.096 --> 00:13:31.036 A:middle
Last year we offered
some specialty modifiers

00:13:31.036 --> 00:13:31.926 A:middle
for autofocus.

00:13:33.196 --> 00:13:36.756 A:middle
The first is range restriction
and that hints the AF algorithm

00:13:36.756 --> 00:13:38.886 A:middle
to limit its search
to a particular range.

00:13:39.866 --> 00:13:43.016 A:middle
The near range is good if you
have something that only wants

00:13:43.016 --> 00:13:44.636 A:middle
to search up close,
for instance,

00:13:44.676 --> 00:13:46.216 A:middle
a barcode scanning app.

00:13:46.696 --> 00:13:49.806 A:middle
We also have the far
range, which is good

00:13:49.806 --> 00:13:53.846 A:middle
for distant objects such
as oh, barcodes painted

00:13:53.846 --> 00:13:54.716 A:middle
on the sides of buildings.

00:13:55.666 --> 00:14:00.356 A:middle
And then finally we have smooth
autofocus, which is a modifier


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:55.666 --> 00:14:00.356 A:middle
And then finally we have smooth
autofocus, which is a modifier

00:14:00.356 --> 00:14:03.176 A:middle
that slows down the AF
algorithm and steps it

00:14:03.176 --> 00:14:06.406 A:middle
in smaller increments so that it
avoids the throbbing artifacts

00:14:06.466 --> 00:14:08.876 A:middle
that you don't want to see
when you're recording a video.

00:14:10.236 --> 00:14:14.556 A:middle
Now, new in iOS 8 we
allow full manual control

00:14:14.556 --> 00:14:18.026 A:middle
of the lens position when you're
locking focus and we allow you

00:14:18.026 --> 00:14:20.516 A:middle
to key value observe
the exact lens position

00:14:20.566 --> 00:14:22.246 A:middle
at any time, in any focus mode.

00:14:23.356 --> 00:14:26.506 A:middle
But, I think a demo is worth a
thousand words so let me call

00:14:26.506 --> 00:14:28.986 A:middle
up Aparna from the
Camera Software Team

00:14:28.986 --> 00:14:29.556 A:middle
to give you a demo.

00:14:29.556 --> 00:14:29.976 A:middle
Take it away, Aparna.

00:14:30.516 --> 00:14:34.576 A:middle
[ Applause ]

00:14:35.076 --> 00:14:35.666 A:middle
&gt;&gt; Thanks Brad.

00:14:36.196 --> 00:14:36.956 A:middle
Hi everyone.

00:14:36.956 --> 00:14:37.466 A:middle
I'm Aparna.

00:14:37.686 --> 00:14:39.626 A:middle
I'm an engineer in the
Camera Software Team.

00:14:39.626 --> 00:14:41.726 A:middle
I'm very excited to be
here and show the demo

00:14:41.726 --> 00:14:43.006 A:middle
for manual focus control.

00:14:43.006 --> 00:14:46.576 A:middle
So, I have the app on here

00:14:46.576 --> 00:14:48.996 A:middle
and there are two
modes, auto unlock.

00:14:48.996 --> 00:14:50.716 A:middle
The auto is same as today,

00:14:51.026 --> 00:14:54.776 A:middle
but I have the lens position
slider here whose values are

00:14:54.776 --> 00:14:56.816 A:middle
updated based on the key values

00:14:56.816 --> 00:14:59.666 A:middle
for the lens position
property during the autofocus.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.446 --> 00:15:05.276 A:middle
So, as you can see I'm trying
to focus on this flower here.

00:15:05.276 --> 00:15:06.936 A:middle
The lens position is changing.

00:15:07.336 --> 00:15:12.906 A:middle
Now, if I want to focus at Brad
here, I have to move my phone

00:15:13.306 --> 00:15:15.066 A:middle
and bring Brad in focus.

00:15:16.106 --> 00:15:19.256 A:middle
Now, let me switch to
the new Locked mode.

00:15:19.256 --> 00:15:21.546 A:middle
Here I have full control
on the lens position

00:15:21.826 --> 00:15:23.376 A:middle
so I can move my slider

00:15:23.376 --> 00:15:25.756 A:middle
and bring my target
of interest in focus.

00:15:26.366 --> 00:15:30.266 A:middle
So, I am going to move the
slider here and frame a scene

00:15:30.266 --> 00:15:35.396 A:middle
with Brad in focus
and I can take a shot

00:15:35.396 --> 00:15:38.276 A:middle
and I can change
the slider position,

00:15:38.276 --> 00:15:42.476 A:middle
I mean the lens position and
bring the flower in focus.

00:15:42.916 --> 00:15:45.976 A:middle
So, that's manual focus
control in iOS 8, thank you.

00:15:46.516 --> 00:15:52.276 A:middle
[ Applause ]

00:15:52.776 --> 00:15:53.726 A:middle
&gt;&gt; Great, thank you Aparna.

00:15:55.586 --> 00:15:56.906 A:middle
That magic was all provided

00:15:56.906 --> 00:15:59.776 A:middle
for by this magical
lensPosition property,

00:15:59.776 --> 00:16:02.076 A:middle
which was being key-value
observed and that's how you saw


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.776 --> 00:16:02.076 A:middle
which was being key-value
observed and that's how you saw

00:16:02.076 --> 00:16:04.516 A:middle
that slider flying all over
the place every time the lens

00:16:04.516 --> 00:16:05.046 A:middle
was moving.

00:16:05.896 --> 00:16:07.646 A:middle
It's a key-value
observable property

00:16:08.376 --> 00:16:11.836 A:middle
and its range is
from zero to one.

00:16:12.216 --> 00:16:16.226 A:middle
Zero means macro or the
closest that the lens can focus.

00:16:17.236 --> 00:16:20.376 A:middle
One means completely
stretched out or the farthest

00:16:20.376 --> 00:16:23.486 A:middle
that it can park,
which may be infinity

00:16:23.486 --> 00:16:26.266 A:middle
or it may be beyond infinity
and we'll talk about that later.

00:16:28.676 --> 00:16:31.746 A:middle
Instead of a simple setter
property AVCaptureDevice

00:16:31.776 --> 00:16:33.376 A:middle
provides a compound setter,

00:16:34.396 --> 00:16:37.276 A:middle
setFocusModeLocked
WithLensPosition

00:16:37.546 --> 00:16:38.366 A:middle
completionHandler.

00:16:38.496 --> 00:16:41.106 A:middle
That's a mouthful, but it
does three important things.

00:16:41.746 --> 00:16:44.766 A:middle
It locks focus at an
explicit lens position

00:16:45.456 --> 00:16:48.796 A:middle
and it calls you back when
the command has completed

00:16:49.136 --> 00:16:51.086 A:middle
and it does so with a timestamp.

00:16:51.606 --> 00:16:53.976 A:middle
And that sync time is
the presentation time

00:16:54.336 --> 00:16:56.816 A:middle
of the first video frame,
which reflects your change.

00:16:57.156 --> 00:16:58.846 A:middle
This is far superior

00:16:58.846 --> 00:17:00.936 A:middle
to the adjusting focus
key-value observation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.846 --> 00:17:00.936 A:middle
to the adjusting focus
key-value observation

00:17:00.936 --> 00:17:02.286 A:middle
because you know exactly

00:17:02.586 --> 00:17:05.316 A:middle
which frame you can
synchronize this with.

00:17:06.376 --> 00:17:09.866 A:middle
Now, the sync time is
on the timeline or clock

00:17:09.866 --> 00:17:11.246 A:middle
of the AVCaptureDevice.

00:17:11.626 --> 00:17:14.695 A:middle
That's important, because if
you're going to synchronize it

00:17:14.695 --> 00:17:17.136 A:middle
with things coming out of
an output you will need

00:17:17.136 --> 00:17:19.246 A:middle
to sync the time to
a different clock.

00:17:19.726 --> 00:17:22.506 A:middle
AVCaptureVideoDataOutput
buffers are going to be

00:17:22.506 --> 00:17:25.896 A:middle
on the AVCapture session's
master clocks timeline.

00:17:26.715 --> 00:17:30.066 A:middle
The way you would do it is
by using CMSync services.

00:17:30.406 --> 00:17:34.356 A:middle
Here I've taken the time
provided and the master clock

00:17:34.426 --> 00:17:37.436 A:middle
from the session and I call
CMSyncConvertTime to go

00:17:37.436 --> 00:17:40.246 A:middle
from the device clock
to the master clock

00:17:40.396 --> 00:17:42.706 A:middle
and now I have my
synchronization point

00:17:42.776 --> 00:17:43.706 A:middle
for output buffers.

00:17:45.966 --> 00:17:48.836 A:middle
Next, there's a special
lens position parameter

00:17:48.836 --> 00:17:51.406 A:middle
that you can pass to that
setter called current.

00:17:51.496 --> 00:17:55.426 A:middle
And what that does is say I want
you to set the lens position

00:17:55.426 --> 00:17:57.216 A:middle
to exactly where it is right now

00:17:57.346 --> 00:17:58.426 A:middle
and then tell me
when you're done.

00:17:58.936 --> 00:18:00.846 A:middle
So, it will lock it in
the position where it is,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.936 --> 00:18:00.846 A:middle
So, it will lock it in
the position where it is,

00:18:00.846 --> 00:18:03.036 A:middle
but it does so without
avoiding race conditions.

00:18:03.406 --> 00:18:06.176 A:middle
Imagine if you tried to get the
lens position and then set it.

00:18:06.726 --> 00:18:08.116 A:middle
Well, if the lens is moving

00:18:08.116 --> 00:18:09.606 A:middle
at the time you may
have actually set it

00:18:09.606 --> 00:18:11.916 A:middle
to the wrong point, because
it will now jump back

00:18:11.916 --> 00:18:13.056 A:middle
to an undesired position.

00:18:14.556 --> 00:18:16.136 A:middle
So, the following
two are equivalent.

00:18:16.766 --> 00:18:19.556 A:middle
If you set it with the new
flavor using the current

00:18:19.616 --> 00:18:22.746 A:middle
property and no
completionHandler it's the same

00:18:22.746 --> 00:18:24.506 A:middle
as calling the old
focus mode locked.

00:18:25.946 --> 00:18:29.346 A:middle
Now, why did we choose to
go with unit-less values,

00:18:29.566 --> 00:18:32.436 A:middle
scalar values from zero
one rather than a distance

00:18:32.436 --> 00:18:33.516 A:middle
in meters, for instance?

00:18:34.146 --> 00:18:36.286 A:middle
The reason lies in
our implementation

00:18:36.346 --> 00:18:38.016 A:middle
on focus on iOS devices.

00:18:38.426 --> 00:18:41.446 A:middle
The lens is physically moved
with a spring and a magnet.

00:18:42.776 --> 00:18:45.126 A:middle
That means that there is
some hysteresis involved

00:18:45.126 --> 00:18:49.186 A:middle
when it moves, or bounce, and
that bounce prevents precise,

00:18:49.186 --> 00:18:51.816 A:middle
repeatable positioning
at a particular distance.

00:18:52.346 --> 00:18:54.396 A:middle
And also, that means

00:18:54.426 --> 00:18:56.576 A:middle
that gravity will
affect spring stretch.

00:18:56.606 --> 00:18:59.326 A:middle
So, a lens position of
.5 will be different

00:18:59.326 --> 00:19:03.826 A:middle
if you're pointing it straight
out versus up versus down.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.326 --> 00:19:03.826 A:middle
if you're pointing it straight
out versus up versus down.

00:19:04.436 --> 00:19:07.676 A:middle
Also, the lens position distance
may vary from device to device

00:19:07.756 --> 00:19:10.056 A:middle
or over time as the
spring stretches out more.

00:19:10.466 --> 00:19:12.006 A:middle
For all these reasons,
we chose to go

00:19:12.006 --> 00:19:15.656 A:middle
with the scalar value instead
of an absolute distance.

00:19:15.976 --> 00:19:17.936 A:middle
And I'd like to caution
you to not try

00:19:17.936 --> 00:19:20.696 A:middle
to correlate lens position
with a particular distance,

00:19:20.726 --> 00:19:22.496 A:middle
because as I said,
it changes depending

00:19:22.496 --> 00:19:25.746 A:middle
on gravity and other factors.

00:19:26.776 --> 00:19:30.176 A:middle
Next up is how to help
users achieve sharp focus.

00:19:31.136 --> 00:19:33.626 A:middle
One inherent problem with having
a small device is is it has a

00:19:33.626 --> 00:19:34.476 A:middle
small screen

00:19:34.866 --> 00:19:38.176 A:middle
and AVCaptureVideoPreviewLayer
is not at the resolution

00:19:38.176 --> 00:19:40.676 A:middle
of the buffers that you're
getting from the camera usually.

00:19:40.996 --> 00:19:43.636 A:middle
It's at screen resolution
meaning that it's scaled down.

00:19:44.046 --> 00:19:47.366 A:middle
So, how can you help people
know if they're in good focus?

00:19:47.366 --> 00:19:52.466 A:middle
A couple possible techniques,
you could zoom the AV cap-

00:19:52.466 --> 00:19:55.026 A:middle
using AVCaptureDevice you could
zoom the video preview layer

00:19:55.026 --> 00:19:58.116 A:middle
up so that people
can see larger pixels

00:19:58.116 --> 00:19:59.266 A:middle
and make a better decision


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.106 --> 00:20:03.326 A:middle
or if you're using a video data
output you're getting the buffer

00:20:03.326 --> 00:20:05.336 A:middle
so you could compute
your own focus score

00:20:05.666 --> 00:20:07.786 A:middle
and then highlight the
areas that are sharp.

00:20:07.956 --> 00:20:08.976 A:middle
That's sometimes
called focus peaking.

00:20:09.076 --> 00:20:13.696 A:middle
That's it for our first
third of manual controls,

00:20:13.696 --> 00:20:15.366 A:middle
now onto manual exposure.

00:20:17.816 --> 00:20:20.206 A:middle
Exposure refers to the
brightness of an image,

00:20:20.566 --> 00:20:24.616 A:middle
which means how much light hits
the sensor and for how long.

00:20:25.586 --> 00:20:28.616 A:middle
Our auto exposure tries really
hard to keep the scene well lit.

00:20:28.816 --> 00:20:29.476 A:middle
That's its job.

00:20:30.076 --> 00:20:33.326 A:middle
With manual exposure again
you've got some more freedom.

00:20:33.326 --> 00:20:35.566 A:middle
You can go for a more
stylized look like here.

00:20:35.926 --> 00:20:39.416 A:middle
You could go for instance, from
something unrealistically bright

00:20:39.896 --> 00:20:43.346 A:middle
to something kind of ghostly
dark or somewhere in between.

00:20:43.456 --> 00:20:44.986 A:middle
You could get some motion blur.

00:20:45.226 --> 00:20:46.486 A:middle
You could provide some grain.

00:20:47.546 --> 00:20:49.226 A:middle
Manual exposure also allows you

00:20:49.226 --> 00:20:52.466 A:middle
to devise your own alternate
auto exposure algorithm

00:20:52.526 --> 00:20:53.776 A:middle
to Apple's if you prefer.

00:20:55.386 --> 00:20:58.486 A:middle
Now, when talking about exposure
you have to draw a triangle.

00:20:58.626 --> 00:20:59.716 A:middle
That's the way we do things.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.276 --> 00:21:01.986 A:middle
There are three components
to exposure

00:21:02.506 --> 00:21:08.436 A:middle
and they are shutter speed,
ISO and lens aperture.

00:21:10.216 --> 00:21:11.296 A:middle
First up, shutter speed.

00:21:12.296 --> 00:21:15.006 A:middle
Shutter speed is the length
of the time that shutter-

00:21:15.006 --> 00:21:16.646 A:middle
that the shutter is
open to let light in.

00:21:16.856 --> 00:21:18.956 A:middle
In a conventional camera
there is a physical shutter,

00:21:19.206 --> 00:21:21.446 A:middle
which opens and for all
the time that it's open,

00:21:21.446 --> 00:21:23.966 A:middle
it's letting light into
that dark room and then

00:21:24.136 --> 00:21:26.516 A:middle
when it closes that's
all the light you get.

00:21:26.876 --> 00:21:27.726 A:middle
So, looking at the picture

00:21:27.726 --> 00:21:30.006 A:middle
on the left you see
a short exposure.

00:21:30.416 --> 00:21:33.336 A:middle
It lets in less light, because
it's open for less time,

00:21:33.746 --> 00:21:34.816 A:middle
but the image is crisp.

00:21:35.036 --> 00:21:38.106 A:middle
The motion is crisp compared
to the image on the left,

00:21:38.426 --> 00:21:43.396 A:middle
which lets in more light so it
has the- it can be brighter.

00:21:43.966 --> 00:21:46.346 A:middle
But, it also lets
in more motion blur,

00:21:46.346 --> 00:21:47.496 A:middle
because it's open for longer.

00:21:48.206 --> 00:21:51.246 A:middle
Long exposures are great for
photographing stationary scenes

00:21:51.246 --> 00:21:54.356 A:middle
in low light, but they're not
so good when shooting things

00:21:54.356 --> 00:21:56.416 A:middle
that move around a lot
like, say, my kids.

00:21:57.596 --> 00:22:00.146 A:middle
Shutter speed is
measured in seconds.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:57.596 --> 00:22:00.146 A:middle
Shutter speed is
measured in seconds.

00:22:00.716 --> 00:22:03.726 A:middle
The second one is ISO and
that's a borrowed term

00:22:03.926 --> 00:22:06.326 A:middle
from film photography if
you've ever done that.

00:22:06.676 --> 00:22:08.146 A:middle
It refers to the sensitivity

00:22:08.146 --> 00:22:09.986 A:middle
of the chemicals in
the film to light.

00:22:10.576 --> 00:22:13.286 A:middle
So, a higher ISO film
is more sensitive

00:22:13.286 --> 00:22:14.736 A:middle
to light than a low ISO film.

00:22:15.536 --> 00:22:19.396 A:middle
And as you can see from the
higher ISO image a higher ISO

00:22:19.396 --> 00:22:21.176 A:middle
number means it's
going to be brighter.

00:22:21.286 --> 00:22:22.256 A:middle
It's more sensitive.

00:22:22.746 --> 00:22:26.706 A:middle
But, it does that at the cost
of introducing some noise

00:22:26.706 --> 00:22:29.146 A:middle
or grain into the photo.

00:22:29.146 --> 00:22:31.906 A:middle
So, as you can see
in the cloth flower

00:22:31.906 --> 00:22:34.796 A:middle
on the right there is definitely
more grain to the image,

00:22:35.136 --> 00:22:39.426 A:middle
more noise compared to
the one on the left.

00:22:39.896 --> 00:22:41.146 A:middle
The third component of-

00:22:41.206 --> 00:22:43.586 A:middle
in the exposure triangle
is lens aperture.

00:22:44.556 --> 00:22:46.326 A:middle
It's the size of
the lens opening,

00:22:46.326 --> 00:22:48.516 A:middle
meaning how much can
it physically open

00:22:48.516 --> 00:22:50.166 A:middle
to let more light in.

00:22:50.266 --> 00:22:53.196 A:middle
On iOS cameras, the
lens aperture is fixed

00:22:53.196 --> 00:22:54.736 A:middle
on all products that
we have shipped.

00:22:55.166 --> 00:22:59.136 A:middle
So, that means practically on
iOS the only two things we have

00:22:59.136 --> 00:23:01.356 A:middle
to play with are
shutter speed and ISO.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.136 --> 00:23:01.356 A:middle
to play with are
shutter speed and ISO.

00:23:01.966 --> 00:23:06.936 A:middle
Now, what have we- what
do we support currently

00:23:06.936 --> 00:23:08.126 A:middle
in iOS 7 and earlier?

00:23:08.506 --> 00:23:12.276 A:middle
We have two exposure modes that
we support, the locked mode,

00:23:12.596 --> 00:23:13.756 A:middle
or the continuous mode.

00:23:14.426 --> 00:23:15.986 A:middle
And continuous, as
you might expect,

00:23:15.986 --> 00:23:20.346 A:middle
just continuously adjusts
the scene to get it well lit.

00:23:21.216 --> 00:23:23.446 A:middle
There is also an
exposurePointOfInterest settable

00:23:23.446 --> 00:23:25.776 A:middle
property that you can
use to tap to expose

00:23:26.146 --> 00:23:29.056 A:middle
if you've got a complicated
scene with various objects

00:23:29.056 --> 00:23:30.996 A:middle
that are light and
dark you can tell it

00:23:30.996 --> 00:23:32.536 A:middle
which thing you want
to expose on.

00:23:33.696 --> 00:23:36.826 A:middle
And finally, you can know when
exposure is being adjusted

00:23:36.826 --> 00:23:38.626 A:middle
through this key-value
observable property.

00:23:40.136 --> 00:23:42.996 A:middle
Now, new in iOS 8 we're
introducing support

00:23:42.996 --> 00:23:46.136 A:middle
for fully manual
exposure or what we call

00:23:46.136 --> 00:23:48.236 A:middle
in the API, custom exposure.

00:23:49.086 --> 00:23:50.956 A:middle
In custom mode you can get,

00:23:50.956 --> 00:23:55.476 A:middle
set and key-value observe
ISO and shutter speed.

00:23:55.796 --> 00:23:58.696 A:middle
Now, we refer to shutter
speed as exposure duration

00:23:58.986 --> 00:24:02.476 A:middle
in the API set since our cameras
don't have a physical shutter.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.986 --> 00:24:02.476 A:middle
in the API set since our cameras
don't have a physical shutter.

00:24:03.066 --> 00:24:05.046 A:middle
I'll use those two
terms interchangeably

00:24:05.046 --> 00:24:07.426 A:middle
from here on out.

00:24:08.156 --> 00:24:09.466 A:middle
I feel a demo coming on.

00:24:10.036 --> 00:24:11.626 A:middle
Let's have Matt Calhoun come up

00:24:11.706 --> 00:24:14.536 A:middle
and show us how manual
exposure works in AVCam, Matt.

00:24:15.516 --> 00:24:20.236 A:middle
[ Applause ]

00:24:20.736 --> 00:24:21.366 A:middle
&gt;&gt; Thank you Brad.

00:24:21.836 --> 00:24:23.226 A:middle
My name is Matthew Calhoun.

00:24:23.226 --> 00:24:25.446 A:middle
I'm also an engineer on
the Camera Software Team

00:24:26.226 --> 00:24:30.886 A:middle
and I'm very excited to show
you our manual exposure API

00:24:30.976 --> 00:24:31.696 A:middle
in action.

00:24:32.736 --> 00:24:35.266 A:middle
So, let me switch over
to the exposure mode

00:24:35.906 --> 00:24:37.426 A:middle
of our demo application

00:24:37.606 --> 00:24:42.726 A:middle
and we've got this nice
romantic scene prepared.

00:24:43.406 --> 00:24:46.676 A:middle
And you'll notice
that-let me go back

00:24:46.676 --> 00:24:48.746 A:middle
into focus mode and
put us in auto.

00:24:49.536 --> 00:24:50.366 A:middle
Now, we're in focus.

00:24:50.846 --> 00:24:52.506 A:middle
You'll notice that there
are a few more controls

00:24:52.506 --> 00:24:53.696 A:middle
in the exposure view.

00:24:54.756 --> 00:24:56.906 A:middle
But, I'd first like
to draw your attention

00:24:56.956 --> 00:24:58.926 A:middle
to the middle two sliders.

00:24:58.926 --> 00:25:00.726 A:middle
There's Duration
and there's ISO.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.926 --> 00:25:00.726 A:middle
There's Duration
and there's ISO.

00:25:01.596 --> 00:25:04.986 A:middle
And Duration, as Brad said, you
can think of as shutter speed.

00:25:05.356 --> 00:25:09.626 A:middle
And ISO, if this were a film
camera it would be film speed,

00:25:09.626 --> 00:25:11.706 A:middle
but in this case
it's the gain applied

00:25:11.756 --> 00:25:14.006 A:middle
to the sensor coming
off the signal

00:25:14.076 --> 00:25:15.746 A:middle
or the signal coming
off the sensor.

00:25:16.596 --> 00:25:19.186 A:middle
And you'll see since we're
in Auto Mode right now

00:25:20.106 --> 00:25:23.826 A:middle
as I move the device
around you will see duration

00:25:23.826 --> 00:25:25.926 A:middle
and ISO changing.

00:25:27.096 --> 00:25:31.616 A:middle
That is the auto exposure
algorithm in action trying

00:25:31.616 --> 00:25:34.516 A:middle
to achieve a perfect
exposure by changing duration

00:25:34.516 --> 00:25:36.396 A:middle
and ISO as the scene changes.

00:25:37.816 --> 00:25:40.286 A:middle
And as it does that I'd
like to draw your attention

00:25:40.406 --> 00:25:43.276 A:middle
to the slider above
Duration, which is Offset.

00:25:44.306 --> 00:25:46.896 A:middle
So, that's sort of
our exposure meter.

00:25:47.476 --> 00:25:49.956 A:middle
That's the- that
represents the difference

00:25:49.956 --> 00:25:52.976 A:middle
between our target exposure
and our actual exposure

00:25:53.366 --> 00:25:56.186 A:middle
and since we're in Auto
Mode that should be hovering

00:25:56.186 --> 00:25:58.176 A:middle
around zero all the
time, unless we're

00:25:58.176 --> 00:26:00.726 A:middle
in some extreme lighting
situation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.176 --> 00:26:00.726 A:middle
in some extreme lighting
situation

00:26:00.726 --> 00:26:03.536 A:middle
that we can't meet
the target exposure.

00:26:04.166 --> 00:26:12.476 A:middle
So, I'm going to lock the tripod
on this scene now and you'll see

00:26:12.476 --> 00:26:15.016 A:middle
that we're pretty well
exposed on the flowers now.

00:26:15.016 --> 00:26:20.786 A:middle
But, what if I want to enhance
the drama in this scene?

00:26:20.786 --> 00:26:23.376 A:middle
Well, that's exactly what
manual controls are for.

00:26:23.376 --> 00:26:26.846 A:middle
So, I'm going to switch
over to Custom Mode

00:26:26.846 --> 00:26:29.326 A:middle
and you may have noticed that
the sliders, the Duration

00:26:29.326 --> 00:26:31.306 A:middle
and ISO sliders became
enabled now.

00:26:32.026 --> 00:26:36.886 A:middle
So, that means that I can let's
see, let's get as little noise

00:26:36.886 --> 00:26:40.426 A:middle
in this scene as possible
by lowering the ISO.

00:26:40.476 --> 00:26:44.486 A:middle
And then since this
scene is static and I'm

00:26:44.486 --> 00:26:53.056 A:middle
on a tripod I can crank up
the Duration or lower and sort

00:26:53.056 --> 00:26:57.386 A:middle
of get what wouldn't be
considered a perfect exposure,

00:26:57.386 --> 00:27:01.356 A:middle
but may be perhaps a
more artistic exposure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.386 --> 00:27:01.356 A:middle
but may be perhaps a
more artistic exposure

00:27:02.346 --> 00:27:03.736 A:middle
and that is manual
exposure, thanks.

00:27:03.736 --> 00:27:03.976 A:middle
&gt;&gt; Thanks Matt.

00:27:04.516 --> 00:27:09.626 A:middle
[ Applause ]

00:27:10.126 --> 00:27:10.736 A:middle
Great demo.

00:27:11.706 --> 00:27:14.936 A:middle
So, let's talk about how
continuous auto exposure works.

00:27:15.216 --> 00:27:18.196 A:middle
I want to do that, because to
understand manual exposure you

00:27:18.196 --> 00:27:21.566 A:middle
really need to visualize how our
auto exposure internals work.

00:27:22.426 --> 00:27:23.466 A:middle
Here's a peek under the hood.

00:27:23.946 --> 00:27:26.776 A:middle
First, there is an auto
exposure or AE block

00:27:27.626 --> 00:27:31.916 A:middle
and its job is calculating
ideal exposure and it's fed

00:27:32.146 --> 00:27:34.006 A:middle
with metering stats
continuously.

00:27:35.156 --> 00:27:38.256 A:middle
So, it knows how far off of
that exposure target it is.

00:27:39.086 --> 00:27:42.596 A:middle
Then its job is to calculate
the right mixture of ISO

00:27:42.596 --> 00:27:44.666 A:middle
and duration to get
the scene well lit.

00:27:45.116 --> 00:27:47.196 A:middle
That's the AE loop,
constant feedback

00:27:47.196 --> 00:27:49.506 A:middle
through the metering
stats, constant adjustment

00:27:49.506 --> 00:27:50.546 A:middle
through ISO and duration.

00:27:51.816 --> 00:27:54.666 A:middle
In the locked exposure
mode, which we've had now

00:27:54.666 --> 00:27:58.236 A:middle
for several releases, that
AE block is still there.

00:27:58.236 --> 00:27:59.056 A:middle
It's still active.

00:27:59.996 --> 00:28:02.136 A:middle
So, it's still able to
set ISO and Duration,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.996 --> 00:28:02.136 A:middle
So, it's still able to
set ISO and Duration,

00:28:02.346 --> 00:28:04.416 A:middle
but the difference is
the metering stats engine

00:28:04.416 --> 00:28:05.276 A:middle
is disconnected.

00:28:05.616 --> 00:28:07.636 A:middle
So, ISO and Duration are
never going to change,

00:28:07.636 --> 00:28:09.036 A:middle
because the metering
isn't changing.

00:28:10.436 --> 00:28:13.936 A:middle
Now, the new custom exposure
mode, in iOS 8 we allow you

00:28:13.996 --> 00:28:15.806 A:middle
to manually control
ISO and Duration

00:28:15.806 --> 00:28:17.586 A:middle
with a new mode called Custom.

00:28:18.456 --> 00:28:21.776 A:middle
You set ISO and Duration
together in that one setter,

00:28:21.776 --> 00:28:23.426 A:middle
which by now should
look pretty familiar

00:28:24.296 --> 00:28:27.686 A:middle
and there's a completionHandler
that's fired on the first frame

00:28:27.686 --> 00:28:28.826 A:middle
where the change is reflected.

00:28:29.616 --> 00:28:31.246 A:middle
There are two special
parameters.

00:28:32.476 --> 00:28:35.526 A:middle
The first one means
don't touch the Duration.

00:28:35.526 --> 00:28:36.496 A:middle
Keep it where it is.

00:28:36.496 --> 00:28:38.926 A:middle
I only want to mess
around with ISO

00:28:39.006 --> 00:28:41.406 A:middle
and the second one is
keep the ISO where it is.

00:28:41.476 --> 00:28:44.666 A:middle
So, you could have a slider UI
where you're only adjusting ISO

00:28:44.666 --> 00:28:46.176 A:middle
or only adjusting Duration.

00:28:48.456 --> 00:28:52.876 A:middle
Now, we have supported
ranges: min and maxes for ISO

00:28:52.876 --> 00:28:54.016 A:middle
and exposure duration.

00:28:54.396 --> 00:28:58.246 A:middle
Those vary according to the
device format so take note.

00:28:58.636 --> 00:29:01.986 A:middle
They're implemented in the
AVCaptureDeviceFormat not


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.636 --> 00:29:01.986 A:middle
They're implemented in the
AVCaptureDeviceFormat not

00:29:01.986 --> 00:29:03.556 A:middle
in the AVCaptureDevice.

00:29:04.186 --> 00:29:09.756 A:middle
Min and max ISO and min and max
ExposureDuration tell you the

00:29:09.756 --> 00:29:12.346 A:middle
limits that you can use to
set these two properties

00:29:12.756 --> 00:29:15.806 A:middle
and do use them otherwise we'll
throw an exception if you try

00:29:15.806 --> 00:29:18.036 A:middle
to set an out of range value.

00:29:19.286 --> 00:29:22.206 A:middle
Also, as you might expect, we
have three observable properties

00:29:22.206 --> 00:29:25.316 A:middle
for the three elements in
the exposure triangle: ISO,

00:29:25.546 --> 00:29:27.656 A:middle
exposureDuration
and lensAperture.

00:29:28.356 --> 00:29:29.656 A:middle
LensAperture I'll remind you,

00:29:29.656 --> 00:29:31.326 A:middle
you can key-value
observe it all day long.

00:29:31.426 --> 00:29:32.736 A:middle
It's never going to change.

00:29:34.456 --> 00:29:36.806 A:middle
Now, how does custom
exposure mode work?

00:29:37.446 --> 00:29:39.726 A:middle
Well again, we have that
auto exposure block.

00:29:39.726 --> 00:29:40.446 A:middle
It's still there.

00:29:41.526 --> 00:29:43.396 A:middle
The metering stats are connected

00:29:43.546 --> 00:29:45.736 A:middle
so it's being fed
real-time stats

00:29:45.736 --> 00:29:48.076 A:middle
about how far off it
is from ideal exposure.

00:29:48.326 --> 00:29:50.276 A:middle
So, it can still
compute a target offset,

00:29:50.276 --> 00:29:51.556 A:middle
which you can use as a meter.

00:29:52.146 --> 00:29:54.266 A:middle
The difference is ISO
and Duration are cut off

00:29:54.726 --> 00:29:56.486 A:middle
and that's where you come in.

00:29:56.486 --> 00:29:59.346 A:middle
You get to set them
directly using these APIs,

00:29:59.646 --> 00:30:02.726 A:middle
but you can still use the target
offset to know how you're doing.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:59.646 --> 00:30:02.726 A:middle
but you can still use the target
offset to know how you're doing.

00:30:03.226 --> 00:30:08.446 A:middle
All right, now let's
talk about a close cousin

00:30:08.446 --> 00:30:11.156 A:middle
of manual exposure, which
is exposure compensation.

00:30:12.946 --> 00:30:14.956 A:middle
Exposure compensation
is a modifier

00:30:14.956 --> 00:30:16.436 A:middle
to our auto exposure block.

00:30:16.996 --> 00:30:20.336 A:middle
It lets you bias the AE
algorithm towards something

00:30:20.336 --> 00:30:22.026 A:middle
slightly darker or
slightly brighter.

00:30:22.026 --> 00:30:23.706 A:middle
It's kind of like a gentler,

00:30:23.796 --> 00:30:25.776 A:middle
kinder version of
manual controls.

00:30:25.776 --> 00:30:27.736 A:middle
So, if you don't want to
get your hands really dirty,

00:30:27.736 --> 00:30:31.506 A:middle
but you still want to affect
our AE algorithm somewhat,

00:30:31.706 --> 00:30:32.846 A:middle
you can use this instead.

00:30:33.766 --> 00:30:38.226 A:middle
So, it biases the decision of
the AE algorithm as I said,

00:30:38.606 --> 00:30:41.336 A:middle
towards something brighter or
darker and this can be used

00:30:41.336 --> 00:30:43.946 A:middle
in the Continuous AE mode
or in the locked mode.

00:30:45.026 --> 00:30:47.436 A:middle
The way it's expressed
is in f-stops.

00:30:47.436 --> 00:30:50.506 A:middle
If you've used a DSLR you'll
be familiar with this.

00:30:50.506 --> 00:30:56.096 A:middle
An f-stop or exposure value
is double the brightness

00:30:56.096 --> 00:30:58.096 A:middle
if you're going in
the positive direction

00:30:58.566 --> 00:31:00.356 A:middle
and it's half the
brightness if you're going


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.566 --> 00:31:00.356 A:middle
and it's half the
brightness if you're going

00:31:00.356 --> 00:31:01.316 A:middle
in the negative direction.

00:31:03.516 --> 00:31:05.276 A:middle
I know you all are going
to have a conniption fit

00:31:05.496 --> 00:31:08.976 A:middle
if you don't get another demo
right now so take it away Matt.

00:31:09.516 --> 00:31:14.736 A:middle
[ Applause ]

00:31:15.236 --> 00:31:21.846 A:middle
&gt;&gt; Okay, so let's go back
into Auto mode and we're going

00:31:21.846 --> 00:31:24.276 A:middle
to do something similar
to what we just did

00:31:24.276 --> 00:31:25.406 A:middle
with Manual controls,

00:31:25.406 --> 00:31:28.916 A:middle
except this this time I
don't really want to think

00:31:28.916 --> 00:31:31.706 A:middle
about a specific shutter
speed or a specific ISO.

00:31:31.706 --> 00:31:34.006 A:middle
I just want the AE
algorithm to handle it.

00:31:34.276 --> 00:31:36.716 A:middle
But, I do want to make the
scene lighter or darker.

00:31:37.406 --> 00:31:40.506 A:middle
So, that's exactly what
this last slider is for.

00:31:41.536 --> 00:31:46.846 A:middle
I simply move it to the left
to lower the exposure target

00:31:48.076 --> 00:31:52.606 A:middle
or move it to the
right to increase it.

00:31:53.316 --> 00:31:58.076 A:middle
And that exposure target is
locked in at a higher value now.

00:31:58.076 --> 00:32:02.996 A:middle
So, you'll see as I
move the device around,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.076 --> 00:32:02.996 A:middle
So, you'll see as I
move the device around,

00:32:02.996 --> 00:32:04.076 A:middle
let me lower it a little bit.

00:32:04.486 --> 00:32:08.396 A:middle
You should see Exposure
and Duration still updating

00:32:08.396 --> 00:32:09.806 A:middle
in response to scene changes.

00:32:10.626 --> 00:32:14.946 A:middle
But, they are being updated to
meet a lower exposure target.

00:32:16.246 --> 00:32:19.056 A:middle
So, I also would like to
show you how this works

00:32:19.056 --> 00:32:19.826 A:middle
in Locked mode.

00:32:19.826 --> 00:32:26.946 A:middle
It's very similar except that
in Locked mode we only respond

00:32:26.946 --> 00:32:29.346 A:middle
to changes in the bias.

00:32:29.576 --> 00:32:31.776 A:middle
So, Duration and
ISO will get updated

00:32:31.846 --> 00:32:34.156 A:middle
if I change the exposure target.

00:32:34.306 --> 00:32:38.216 A:middle
But, once I stop changing that
target if I move the device

00:32:38.216 --> 00:32:40.746 A:middle
around and point at
different scenes, Duration

00:32:40.746 --> 00:32:42.326 A:middle
and ISO will not change.

00:32:42.986 --> 00:32:44.856 A:middle
That is exposure compensation.

00:32:45.486 --> 00:32:45.966 A:middle
&gt;&gt; Cool.

00:32:46.286 --> 00:32:46.436 A:middle
&gt;&gt; Thanks.

00:32:46.586 --> 00:32:46.926 A:middle
&gt;&gt; Thank you Matt.

00:32:47.516 --> 00:32:52.886 A:middle
[ Applause ]

00:32:53.386 --> 00:32:58.156 A:middle
&gt;&gt; Exposure compensation is
supported in all exposure modes.

00:32:59.116 --> 00:33:02.086 A:middle
And by now you should be very
familiar with this pattern.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.116 --> 00:33:02.086 A:middle
And by now you should be very
familiar with this pattern.

00:33:02.686 --> 00:33:06.306 A:middle
We have a compound setter,
setExposureTargetBias.

00:33:06.306 --> 00:33:08.246 A:middle
We don't call it exposure
compensation in the API.

00:33:08.436 --> 00:33:09.686 A:middle
We call it target bias.

00:33:10.376 --> 00:33:12.246 A:middle
And you're provided
a completionHandler

00:33:12.586 --> 00:33:15.496 A:middle
on the first frame where your
change has been reflected.

00:33:17.466 --> 00:33:21.286 A:middle
The supported range, min and
max ExposureTargetBias are a

00:33:21.286 --> 00:33:23.686 A:middle
constant right now
on all devices.

00:33:24.156 --> 00:33:27.796 A:middle
The min is minus eight
and the max is plus eight,

00:33:28.296 --> 00:33:31.026 A:middle
but that may change in the
future so we do encourage you

00:33:31.026 --> 00:33:34.136 A:middle
to use these min and max
TargetBiasValues before

00:33:34.136 --> 00:33:34.576 A:middle
a setting.

00:33:35.196 --> 00:33:37.736 A:middle
We will throw an exception if
you use an out of range value.

00:33:39.506 --> 00:33:41.616 A:middle
There are some key-value
observable getters.

00:33:42.356 --> 00:33:44.636 A:middle
ExposureTargetBias is
again what we're calling

00:33:44.636 --> 00:33:45.856 A:middle
exposure compensation.

00:33:46.256 --> 00:33:48.706 A:middle
That will never change
unless you change it.

00:33:48.956 --> 00:33:52.006 A:middle
So, exposureTargetBias
is zero unless you set it

00:33:52.006 --> 00:33:52.556 A:middle
to something else.

00:33:53.576 --> 00:33:56.606 A:middle
The exposureTargetOffset,
as Matt just showed you,

00:33:56.926 --> 00:34:00.126 A:middle
is the thing that hovers
around zero usually if you're


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:56.926 --> 00:34:00.126 A:middle
is the thing that hovers
around zero usually if you're

00:34:00.126 --> 00:34:02.816 A:middle
in a well-mannered environment.

00:34:03.166 --> 00:34:05.716 A:middle
It's able to a good enough
job to get the scene well-lit,

00:34:05.856 --> 00:34:08.335 A:middle
and when it's well-lit,
targetOffset is at zero.

00:34:08.786 --> 00:34:12.255 A:middle
When you're at some extreme
condition the targetOffset might

00:34:12.255 --> 00:34:12.866 A:middle
move around.

00:34:13.235 --> 00:34:16.746 A:middle
You can use it as a meter.

00:34:17.396 --> 00:34:19.936 A:middle
Now, let's talk about how
exposure compensation works

00:34:19.936 --> 00:34:21.485 A:middle
with our familiar diagram now.

00:34:22.626 --> 00:34:24.565 A:middle
In Continuous Auto
Exposure mode,

00:34:25.396 --> 00:34:29.206 A:middle
we have again the metering stats
providing real-time information

00:34:29.206 --> 00:34:31.766 A:middle
to the block and its
setting ISO and Duration.

00:34:32.966 --> 00:34:36.775 A:middle
Now, you can bias that
decision of the AE block

00:34:36.775 --> 00:34:38.446 A:middle
by setting a new target bias.

00:34:39.106 --> 00:34:44.255 A:middle
The AE block uses those metered
stats plus your bias to set ISO

00:34:44.255 --> 00:34:47.085 A:middle
and Duration to a
new Target Offset.

00:34:47.085 --> 00:34:49.746 A:middle
Now, that offset is
influenced by your bias.

00:34:50.036 --> 00:34:53.556 A:middle
So, if you set a bias of plus
one then the Target Offset will

00:34:53.556 --> 00:34:59.236 A:middle
hit zero when the plus one
target has been reached.

00:34:59.666 --> 00:35:01.696 A:middle
Now, let's look at the
Locked Exposure mode.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.666 --> 00:35:01.696 A:middle
Now, let's look at the
Locked Exposure mode.

00:35:01.696 --> 00:35:02.856 A:middle
And this is pretty cool

00:35:02.856 --> 00:35:04.856 A:middle
that even though it's
locked you can still kind

00:35:04.966 --> 00:35:06.406 A:middle
of influence the exposure.

00:35:07.296 --> 00:35:09.876 A:middle
The metering stats are
disconnected so normally ISO

00:35:09.876 --> 00:35:11.576 A:middle
and Duration will
not change at all.

00:35:11.576 --> 00:35:12.156 A:middle
It's locked.

00:35:12.786 --> 00:35:15.616 A:middle
But, you can still set
bias and when you do

00:35:16.456 --> 00:35:19.956 A:middle
that it will now need to
fluctuate ISO and Duration

00:35:20.026 --> 00:35:22.546 A:middle
to meet that bias and
it will report all

00:35:22.546 --> 00:35:24.586 A:middle
of that in the Target Offset.

00:35:26.156 --> 00:35:29.116 A:middle
If you'd like to see a great
use of exposure compensation,

00:35:29.766 --> 00:35:33.216 A:middle
look no further than Apple's
own camera app in iOS 8.

00:35:33.816 --> 00:35:37.056 A:middle
You might have noticed by now
that if you tap, when you tap

00:35:37.056 --> 00:35:38.756 A:middle
to expose, you're
presented with a new UI.

00:35:39.126 --> 00:35:41.696 A:middle
It's sort of a brightness
UI with a little sun in it

00:35:42.296 --> 00:35:44.926 A:middle
and that shows you that
you can swipe up or down

00:35:45.426 --> 00:35:48.216 A:middle
to bias exposure up or down.

00:35:48.466 --> 00:35:50.026 A:middle
So, it's influencing
the AE algorithm

00:35:50.026 --> 00:35:52.096 A:middle
to pick something a little bit
brighter or a little bit darker.

00:35:52.616 --> 00:35:53.046 A:middle
Try it out.

00:35:53.046 --> 00:35:54.986 A:middle
It's really pretty cool.

00:35:56.016 --> 00:35:58.466 A:middle
All right, two down, one to go.

00:35:59.076 --> 00:36:00.656 A:middle
Let's talk about
Manual White Balance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.076 --> 00:36:00.656 A:middle
Let's talk about
Manual White Balance.

00:36:02.676 --> 00:36:05.846 A:middle
White balance is all
about making the color

00:36:05.846 --> 00:36:07.876 A:middle
in your photos look realistic.

00:36:09.116 --> 00:36:11.476 A:middle
Sounds simple enough
right, but it's not.

00:36:12.306 --> 00:36:14.986 A:middle
Different light sources have
different color temperatures.

00:36:15.596 --> 00:36:18.196 A:middle
For instance, daylight
casts kind

00:36:18.196 --> 00:36:22.056 A:middle
of a bluish tint whereas an
incandescent light would give

00:36:22.056 --> 00:36:24.586 A:middle
you something warmer
like a yellowish tint.

00:36:25.116 --> 00:36:28.916 A:middle
Now, our brain is really good at
adjusting to these color tints,

00:36:29.476 --> 00:36:30.956 A:middle
but cameras can't do that.

00:36:31.666 --> 00:36:34.646 A:middle
So, under a blue light source,
your camera needs to compensate

00:36:34.646 --> 00:36:37.396 A:middle
for that by boosting
up the opposite colors,

00:36:37.396 --> 00:36:39.236 A:middle
to boost up the red
to compensate.

00:36:39.236 --> 00:36:44.126 A:middle
All right, this is the nerdiest
slide you'll see here today.

00:36:44.956 --> 00:36:49.246 A:middle
This is a CIE 1931
chromaticity diagram.

00:36:49.706 --> 00:36:50.596 A:middle
You don't need to know that.

00:36:51.536 --> 00:36:54.866 A:middle
But, it shows us all the
colors visible to a human being

00:36:55.146 --> 00:36:59.266 A:middle
from pure blue, to bright
green on top, to bright red.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.126 --> 00:37:04.566 A:middle
And any point on the diagram
can be plotted with a little X

00:37:04.566 --> 00:37:07.586 A:middle
and Y value, as shown
here by these axes.

00:37:08.256 --> 00:37:11.366 A:middle
Take into account here that this
is 2D color we're talking about,

00:37:11.366 --> 00:37:13.086 A:middle
so brightness is orthogonal.

00:37:13.086 --> 00:37:14.626 A:middle
We're just talking about color.

00:37:15.336 --> 00:37:18.676 A:middle
So, on the X axis and
on the Y axis from zero

00:37:18.676 --> 00:37:21.806 A:middle
to one you can plot any
point on that color diagram.

00:37:22.136 --> 00:37:24.356 A:middle
And as you can see there are
going to be some crazy values

00:37:24.356 --> 00:37:28.186 A:middle
that are outside the range of
human visibility and, therefore,

00:37:28.186 --> 00:37:30.016 A:middle
they can't be faithfully
represented

00:37:30.116 --> 00:37:31.686 A:middle
or reproduced by a camera.

00:37:32.646 --> 00:37:34.976 A:middle
Also note that there is a
narrower range there that's

00:37:34.976 --> 00:37:37.516 A:middle
represented by a
tight little curve

00:37:38.626 --> 00:37:42.016 A:middle
and that curve there is
called the Planckian locus.

00:37:42.306 --> 00:37:43.396 A:middle
You also don't need
to know that.

00:37:43.466 --> 00:37:46.006 A:middle
But, every time you say
Planckian locus an angel get

00:37:46.006 --> 00:37:46.656 A:middle
its wings.

00:37:48.356 --> 00:37:51.446 A:middle
This little curve here
expresses the color temperatures

00:37:51.446 --> 00:37:55.496 A:middle
in degrees Kelvin with higher
numbers on the blue side,

00:37:55.646 --> 00:37:58.286 A:middle
that's hotter and lower
numbers on the red side

00:37:58.776 --> 00:38:00.666 A:middle
in degrees Kelvin again.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:58.776 --> 00:38:00.666 A:middle
in degrees Kelvin again.

00:38:01.616 --> 00:38:04.576 A:middle
And these are useful for
typical lighting situations.

00:38:04.576 --> 00:38:06.096 A:middle
In typical lighting situations,

00:38:06.446 --> 00:38:08.776 A:middle
the light will go right
along this nice curve.

00:38:09.516 --> 00:38:12.356 A:middle
Sometimes though you have
mixed lighting conditions

00:38:12.396 --> 00:38:14.396 A:middle
and it's not quite
as cut and dry

00:38:14.396 --> 00:38:16.156 A:middle
as just moving along that curve.

00:38:16.666 --> 00:38:18.946 A:middle
Sometimes you need to shift
a little bit to deviate

00:38:18.946 --> 00:38:20.916 A:middle
from the nice curve,
because there is a little bit

00:38:20.916 --> 00:38:22.996 A:middle
of a green shift
or a magenta shift

00:38:23.536 --> 00:38:25.656 A:middle
in that's what those little
tick marks are up there.

00:38:26.496 --> 00:38:29.246 A:middle
So, the Planckian locus is
talking about temperature

00:38:29.246 --> 00:38:32.076 A:middle
and the little hash
marks off of it are tint.

00:38:32.536 --> 00:38:36.976 A:middle
That's adjusting for red
or magenta or green shift.

00:38:39.206 --> 00:38:41.676 A:middle
Now, what possible
uses might you have

00:38:41.676 --> 00:38:42.986 A:middle
for manual white balance?

00:38:43.426 --> 00:38:45.746 A:middle
Well, our auto white balance
does a pretty good job.

00:38:45.746 --> 00:38:47.966 A:middle
It's trying to guess what
your lighting source is

00:38:48.036 --> 00:38:51.386 A:middle
and compensate for casts
that might be coming off

00:38:51.386 --> 00:38:52.346 A:middle
of that lighting source.

00:38:52.906 --> 00:38:54.776 A:middle
But, it's not perfect.

00:38:54.956 --> 00:38:56.036 A:middle
It might make mistakes.

00:38:56.036 --> 00:38:59.646 A:middle
If you have manual white balance
you can do a manual temperature

00:38:59.646 --> 00:39:00.226 A:middle
and tint UI.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.646 --> 00:39:00.226 A:middle
and tint UI.

00:39:01.056 --> 00:39:02.666 A:middle
You could come up
with some presets

00:39:03.026 --> 00:39:04.426 A:middle
for standard lighting conditions

00:39:04.426 --> 00:39:05.956 A:middle
and give the power
back to the user.

00:39:06.556 --> 00:39:08.396 A:middle
You could use a gray
card to assist

00:39:08.396 --> 00:39:11.976 A:middle
in doing a neutral white
balance or you just might want

00:39:11.976 --> 00:39:13.626 A:middle
to do some crazy color cast

00:39:13.626 --> 00:39:15.686 A:middle
and have little green
men in your pictures.

00:39:17.766 --> 00:39:20.186 A:middle
IOS devices compensate
for color casts

00:39:20.406 --> 00:39:22.906 A:middle
by boosting the opposite
color gain.

00:39:23.296 --> 00:39:25.516 A:middle
So for instance, if a scene
has too much blue it's

00:39:25.516 --> 00:39:29.346 A:middle
over on the left side, then
the red gain must be boosted

00:39:29.346 --> 00:39:32.236 A:middle
up a lot and the green
a little to compensate.

00:39:32.606 --> 00:39:37.326 A:middle
These gain values are calibrated
for our devices so they are said

00:39:37.326 --> 00:39:40.236 A:middle
to be device-dependent
gain values rather

00:39:40.236 --> 00:39:42.776 A:middle
than device-independent values

00:39:42.776 --> 00:39:44.546 A:middle
such as are represented
on this diagram.

00:39:46.376 --> 00:39:47.966 A:middle
Okay, what do we
already support?

00:39:48.166 --> 00:39:50.436 A:middle
Similar to exposure,
we have a locked mode

00:39:50.436 --> 00:39:52.576 A:middle
and a continuous
whiteBalanceMode,

00:39:53.136 --> 00:39:54.986 A:middle
which continuously
tries to adjust

00:39:54.986 --> 00:39:58.826 A:middle
for the lighting
source conditions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.586 --> 00:40:04.126 A:middle
And we let you know when the
white balance is being adjusted.

00:40:05.116 --> 00:40:08.766 A:middle
New in iOS 8 we give
you full manual control

00:40:08.766 --> 00:40:10.936 A:middle
of the device RGB gains.

00:40:11.386 --> 00:40:14.686 A:middle
This isn't, you know, just a
baby sort of temp and tint UI.

00:40:14.866 --> 00:40:16.196 A:middle
This is full control.

00:40:16.776 --> 00:40:20.536 A:middle
You can key-value observe
those device RGB gains.

00:40:21.176 --> 00:40:25.716 A:middle
And we also have support for
white balance using a gray card.

00:40:25.716 --> 00:40:26.966 A:middle
We'll get into that more later

00:40:28.266 --> 00:40:30.246 A:middle
and we provide conversion
routines to get you

00:40:30.356 --> 00:40:36.106 A:middle
from chromaticity values,
X and Y values to our gains

00:40:36.436 --> 00:40:39.836 A:middle
or from temperature tint
along that Planckian locus.

00:40:40.366 --> 00:40:41.776 A:middle
Another angel just
got its wings.

00:40:43.896 --> 00:40:46.256 A:middle
All right, I think it's
time for a demo of this.

00:40:46.476 --> 00:40:49.936 A:middle
Let's bring up both Matt
and Aparna to give us a demo

00:40:49.936 --> 00:40:50.996 A:middle
of manual white balance.

00:40:51.366 --> 00:40:51.946 A:middle
Take it away guys.

00:40:52.516 --> 00:40:57.516 A:middle
[ Applause ]

00:40:58.016 --> 00:41:02.726 A:middle
&gt;&gt; Okay, let's put exposure back
into Auto mode now and switch


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.016 --> 00:41:02.726 A:middle
&gt;&gt; Okay, let's put exposure back
into Auto mode now and switch

00:41:02.726 --> 00:41:04.146 A:middle
over to the white balance view.

00:41:04.406 --> 00:41:07.866 A:middle
And I'd like to show you just a
few of things that are possible

00:41:07.866 --> 00:41:09.526 A:middle
with the manual white
balance API.

00:41:10.986 --> 00:41:14.236 A:middle
So, we got a common theme
here, we've got a Mode switch

00:41:14.236 --> 00:41:17.206 A:middle
at the top and then a couple
of sliders and then a button

00:41:17.206 --> 00:41:18.606 A:middle
that I'll talk about
in just a moment.

00:41:19.856 --> 00:41:26.066 A:middle
The sliders are for temperature
and tint and, as Brad explained,

00:41:26.126 --> 00:41:29.516 A:middle
one goes between yellow cast
and blue cast and one goes

00:41:29.516 --> 00:41:31.986 A:middle
between green and
purple or magenta.

00:41:32.906 --> 00:41:35.976 A:middle
And since we're in Auto
mode and we have somewhat

00:41:35.976 --> 00:41:38.826 A:middle
of a mixed lighting
situation here in Moscone,

00:41:39.536 --> 00:41:42.986 A:middle
you can see the auto white
balance algorithm subtly

00:41:42.986 --> 00:41:47.926 A:middle
changing these values as
I move the device around.

00:41:48.636 --> 00:41:52.616 A:middle
But, what's more fun is
to go into the Locked mode

00:41:53.016 --> 00:41:54.856 A:middle
so that we can change
them ourselves

00:41:54.856 --> 00:41:57.796 A:middle
and let me point at
the flowers here.

00:41:58.676 --> 00:42:03.306 A:middle
So, in manual mode, you can
really see that we can go


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.676 --> 00:42:03.306 A:middle
So, in manual mode, you can
really see that we can go

00:42:03.306 --> 00:42:08.316 A:middle
between a yellowish cast, a
bluish cast and, with tint,

00:42:08.486 --> 00:42:14.366 A:middle
we can go between a magenta
cast and a greenish cast.

00:42:15.796 --> 00:42:20.146 A:middle
So, now let's go back to
Auto mode and let's talk

00:42:20.146 --> 00:42:22.956 A:middle
about another use case that
we've enabled, which is the use

00:42:22.956 --> 00:42:26.286 A:middle
of a gray card to
lock white balance

00:42:26.346 --> 00:42:28.966 A:middle
at an appropriate value
for a neutral gray.

00:42:29.066 --> 00:42:34.926 A:middle
So, you'll see down here,
we've got a yellow gray button.

00:42:35.866 --> 00:42:37.276 A:middle
How's that for cognitive
dissonance?

00:42:37.766 --> 00:42:44.996 A:middle
So, normally the auto white
balance algorithm does not

00:42:44.996 --> 00:42:47.756 A:middle
assume that you are pointing
your camera at a gray card.

00:42:47.756 --> 00:42:49.826 A:middle
In fact, it really has
no way of knowing that.

00:42:49.866 --> 00:42:51.426 A:middle
So, that's what this
gray button is for.

00:42:52.306 --> 00:42:54.456 A:middle
When we tap this
button we are going

00:42:54.456 --> 00:42:59.746 A:middle
to tell it-we are telling
the API essentially, "Okay,

00:42:59.746 --> 00:43:00.936 A:middle
we are looking at a gray card.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.746 --> 00:43:00.936 A:middle
we are looking at a gray card.

00:43:01.106 --> 00:43:03.116 A:middle
Give us the correct
values and then we're going

00:43:03.116 --> 00:43:04.636 A:middle
to lock at those values."

00:43:04.636 --> 00:43:09.296 A:middle
So, you should see a subtle,
in this light, change.

00:43:09.296 --> 00:43:15.706 A:middle
Let me go back to Auto and again
a subtle change in the color

00:43:15.706 --> 00:43:17.836 A:middle
of the scene when I
tap the gray button.

00:43:17.836 --> 00:43:19.556 A:middle
And notice that we've
gone automatically

00:43:19.556 --> 00:43:21.486 A:middle
from Auto to Locked mode.

00:43:22.336 --> 00:43:24.006 A:middle
That is manual white balance.

00:43:24.516 --> 00:43:24.976 A:middle
Thanks, Brad.

00:43:25.516 --> 00:43:30.516 A:middle
[ Applause ]

00:43:31.016 --> 00:43:34.000 A:middle
[ Silence ]

00:43:34.106 --> 00:43:34.986 A:middle
&gt;&gt; Awesome demos.

00:43:37.706 --> 00:43:40.266 A:middle
Alright, manual white
balance is my favorite

00:43:40.436 --> 00:43:44.296 A:middle
of the three new camera control
APIs and that's because we got

00:43:44.296 --> 00:43:47.516 A:middle
to introduce some new C
structs, always a good day

00:43:47.516 --> 00:43:50.296 A:middle
when you can introduce
a C struct.

00:43:51.016 --> 00:43:54.046 A:middle
We don't want you to set red,
green and blue individually.

00:43:54.046 --> 00:43:57.346 A:middle
They need to be set as a team
so therefore we need a struct

00:43:57.566 --> 00:44:00.006 A:middle
for red gain, green
gain and blue gain.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:57.566 --> 00:44:00.006 A:middle
for red gain, green
gain and blue gain.

00:44:00.006 --> 00:44:01.066 A:middle
You set them all at once.

00:44:02.266 --> 00:44:05.466 A:middle
Of course, there is a
max that you can set.

00:44:05.686 --> 00:44:07.726 A:middle
On all our devices
it's currently four.

00:44:08.006 --> 00:44:10.076 A:middle
That's the max white
balance gain you can set.

00:44:10.706 --> 00:44:15.976 A:middle
And so the legal range
is from one to four.

00:44:16.176 --> 00:44:19.206 A:middle
That may change in the future,
so do use maxWhiteBalanceGain.

00:44:20.616 --> 00:44:24.636 A:middle
Also as you saw from the UI that
Matt and Aparna just showed you,

00:44:25.006 --> 00:44:27.566 A:middle
the temp and tint sliders were
moving around in Auto mode.

00:44:27.566 --> 00:44:29.926 A:middle
That's because they
were observing the

00:44:29.926 --> 00:44:32.626 A:middle
deviceWhiteBalanceGains
and then converting them

00:44:32.626 --> 00:44:33.736 A:middle
into temperature and tint.

00:44:34.176 --> 00:44:34.286 A:middle
So,

00:44:34.286 --> 00:44:37.146 A:middle
these deviceWhiteBalanceGains
are key-value observable

00:44:37.516 --> 00:44:41.906 A:middle
and update constantly in
your-in the Auto mode.

00:44:42.616 --> 00:44:45.386 A:middle
So, here is what
the API set looks

00:44:45.386 --> 00:44:47.016 A:middle
like for manual white balance.

00:44:47.626 --> 00:44:49.476 A:middle
You set the white
balance mode to "locked"

00:44:49.776 --> 00:44:52.746 A:middle
with explicit RGB gain values.

00:44:53.346 --> 00:44:56.496 A:middle
Again, these are
device-dependent gain values not

00:44:56.496 --> 00:44:58.946 A:middle
device-independent
chromaticity values.

00:44:59.636 --> 00:45:03.216 A:middle
There is also a current special
parameter that you can set


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.636 --> 00:45:03.216 A:middle
There is also a current special
parameter that you can set

00:45:03.216 --> 00:45:05.476 A:middle
if you just want to lock
where it is right now.

00:45:07.126 --> 00:45:09.456 A:middle
Now, about those
conversion routines.

00:45:10.276 --> 00:45:12.236 A:middle
Of course, we need
structs for them too.

00:45:12.236 --> 00:45:15.706 A:middle
When we're talking about
chromaticity values or the X

00:45:15.706 --> 00:45:19.296 A:middle
and Y on that chromaticity
diagram they go from a min

00:45:19.296 --> 00:45:20.856 A:middle
of zero to a max of one.

00:45:21.136 --> 00:45:22.546 A:middle
Remember, not all
of them will fall

00:45:22.546 --> 00:45:25.376 A:middle
within human perceivable color

00:45:25.376 --> 00:45:28.346 A:middle
and then there's also
temperature and tint

00:45:28.416 --> 00:45:30.636 A:middle
as a struct, which
can be set together.

00:45:31.256 --> 00:45:34.066 A:middle
Temperature is a floating
point value in Kelvin

00:45:34.616 --> 00:45:39.446 A:middle
and tint is an offset for red,
or magenta, from zero to 150.

00:45:40.516 --> 00:45:44.186 A:middle
Positive values go in
the green direction,

00:45:44.186 --> 00:45:45.716 A:middle
negative in the magenta
direction.

00:45:46.856 --> 00:45:48.986 A:middle
Now, to convert them
unfortunately you need

00:45:48.986 --> 00:45:51.246 A:middle
to be very verbose so I need

00:45:51.246 --> 00:45:54.616 A:middle
to use three lines per
function call, but bear with me.

00:45:55.066 --> 00:45:59.346 A:middle
The first one is, when you
have RGB gains from the device

00:45:59.346 --> 00:46:01.496 A:middle
and you want to turn
those into X,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.346 --> 00:46:01.496 A:middle
and you want to turn
those into X,

00:46:01.496 --> 00:46:03.856 A:middle
Y chromaticity values,
you call this.

00:46:04.946 --> 00:46:07.416 A:middle
There is also, to go
in the other direction,

00:46:07.456 --> 00:46:09.816 A:middle
you can provide X and Y
values and we'll convert them

00:46:09.816 --> 00:46:12.196 A:middle
into our device-dependent
RGZB gain values.

00:46:13.036 --> 00:46:16.086 A:middle
Also, you can take our gains
and turn them into temperature

00:46:16.086 --> 00:46:18.176 A:middle
and tint and vice versa.

00:46:18.926 --> 00:46:22.586 A:middle
Now, note that our conversion
routines are more accurate the

00:46:22.586 --> 00:46:25.806 A:middle
closer you are to that curve,
to the Planckian locus.

00:46:26.526 --> 00:46:32.136 A:middle
The farther away you get the
crazier results might get.

00:46:33.106 --> 00:46:34.906 A:middle
As I said, some X
and Y temperature

00:46:34.906 --> 00:46:39.406 A:middle
and tint combinations will yield
out of range RGB gain values.

00:46:39.796 --> 00:46:41.396 A:middle
But, we're not going
to hide that from you.

00:46:41.786 --> 00:46:45.676 A:middle
If you call a conversion method
with a crazy X and Y value,

00:46:45.926 --> 00:46:47.246 A:middle
we are going to convert it

00:46:47.246 --> 00:46:51.536 A:middle
to the corresponding device RGB
gain value without clamping it.

00:46:52.266 --> 00:46:55.416 A:middle
But, that might not be a
legal value that you can use

00:46:55.416 --> 00:46:58.386 A:middle
when setting the white balance
gains on the AVCaptureDevice.

00:46:58.706 --> 00:47:02.826 A:middle
So, when using these conversion
utilities you must do your own


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.706 --> 00:47:02.826 A:middle
So, when using these conversion
utilities you must do your own

00:47:02.826 --> 00:47:03.596 A:middle
range checking.

00:47:03.596 --> 00:47:06.926 A:middle
You must check for out of range
values otherwise an exception

00:47:06.926 --> 00:47:07.416 A:middle
will be thrown.

00:47:09.326 --> 00:47:11.576 A:middle
Now, let's talk about
the gray card support

00:47:11.576 --> 00:47:13.016 A:middle
or what we call Gray world.

00:47:13.746 --> 00:47:14.836 A:middle
What is Gray world?

00:47:15.226 --> 00:47:18.696 A:middle
It is not the land of
perpetual depression.

00:47:19.136 --> 00:47:22.766 A:middle
It is-think of it
as an alternative

00:47:22.886 --> 00:47:24.876 A:middle
to our auto white
balance algorithm.

00:47:25.686 --> 00:47:30.106 A:middle
AWB is very complicated
and preferenced.

00:47:30.226 --> 00:47:32.536 A:middle
That's because it needs to
make guesses all the time

00:47:32.586 --> 00:47:35.786 A:middle
about what the lighting sources
are, but it can be tricked.

00:47:35.846 --> 00:47:39.166 A:middle
If for instance, you have
predominantly red in your scene

00:47:39.166 --> 00:47:41.506 A:middle
like a scene of autumn
leaves it might think

00:47:41.506 --> 00:47:42.816 A:middle
that that's your lighting source

00:47:42.816 --> 00:47:45.096 A:middle
when in fact it's just
predominantly the color

00:47:45.096 --> 00:47:45.696 A:middle
in the scene.

00:47:46.466 --> 00:47:48.876 A:middle
It needs to make
those assumptions

00:47:48.876 --> 00:47:50.396 A:middle
and sometimes it guesses wrong.

00:47:50.516 --> 00:47:53.636 A:middle
Well, you can remove the
guesswork by using a gray card.

00:47:54.366 --> 00:47:57.736 A:middle
And so the gray world is-think
of it as a parallel universe

00:47:58.056 --> 00:48:01.346 A:middle
of AWB values that are
computed all the time


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.056 --> 00:48:01.346 A:middle
of AWB values that are
computed all the time

00:48:01.726 --> 00:48:04.516 A:middle
as if you had a gray card
in front of the camera.

00:48:05.156 --> 00:48:07.826 A:middle
So, you can get the
regular device RGB gains

00:48:08.186 --> 00:48:11.716 A:middle
or you can get the alternate
gray world gains at any time.

00:48:12.726 --> 00:48:17.236 A:middle
And what it does is try to
make white look neutral white.

00:48:17.936 --> 00:48:20.276 A:middle
So, if you have a gray card
and you have a UI for this,

00:48:20.276 --> 00:48:21.916 A:middle
you can really take
the guesswork out.

00:48:24.096 --> 00:48:28.416 A:middle
It does assume that that neutral
subject or gray card fills

00:48:28.416 --> 00:48:32.686 A:middle
at least 50 percent of
the center of the frame.

00:48:32.876 --> 00:48:35.616 A:middle
Now, how might you
do this in a UI?

00:48:36.726 --> 00:48:39.666 A:middle
Well, you could prompt the user
to put a gray card in front

00:48:39.666 --> 00:48:43.296 A:middle
of the camera then you could
wait for the gains to settle

00:48:43.296 --> 00:48:47.146 A:middle
down for a minute and then
sample the gray world device

00:48:47.146 --> 00:48:51.886 A:middle
white balance gains property
and then lock white balance mode

00:48:52.166 --> 00:48:54.086 A:middle
with those gray world gains.

00:48:54.566 --> 00:48:57.476 A:middle
Now, you know you have a neutral
white and you've taken all

00:48:57.476 --> 00:49:00.186 A:middle
of the guesswork out of AWB.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:57.476 --> 00:49:00.186 A:middle
of the guesswork out of AWB.

00:49:01.146 --> 00:49:02.886 A:middle
That's it for the
manual controls.

00:49:03.186 --> 00:49:05.346 A:middle
Let's talk about where all
three of these are supported.

00:49:06.546 --> 00:49:08.896 A:middle
Manual focus, it's
supported everywhere,

00:49:09.106 --> 00:49:10.826 A:middle
everywhere where you
can focus our camera,

00:49:11.106 --> 00:49:13.656 A:middle
you can use the manual
controls all the way back

00:49:13.656 --> 00:49:14.716 A:middle
to an iPhone 4s.

00:49:16.346 --> 00:49:19.666 A:middle
Manual exposure and manual
white balance: no restrictions.

00:49:19.876 --> 00:49:23.616 A:middle
You can use them on all iOS
devices supported in iOS 8.

00:49:25.136 --> 00:49:29.266 A:middle
Also, the talk has generally
been geared towards digital

00:49:29.266 --> 00:49:30.816 A:middle
photography, still photography,

00:49:31.266 --> 00:49:34.316 A:middle
but you can use these
manual controls

00:49:34.606 --> 00:49:38.116 A:middle
with any AVCaptureSession
preset or any active format.

00:49:38.386 --> 00:49:40.116 A:middle
So, they're equally applicable

00:49:40.116 --> 00:49:42.616 A:middle
to video recording,
barcode scanning.

00:49:42.866 --> 00:49:46.626 A:middle
You can set manual
controls for any use case.

00:49:46.826 --> 00:49:48.696 A:middle
Whew, are you stuffed yet?

00:49:49.506 --> 00:49:51.726 A:middle
Is there any room
for dessert at all?

00:49:51.816 --> 00:49:53.856 A:middle
I hope so, because you're
going to want to hear

00:49:53.856 --> 00:49:54.826 A:middle
about bracketed capture.

00:49:57.476 --> 00:49:59.796 A:middle
Think of this as a twist
on the manual controls

00:49:59.796 --> 00:50:00.976 A:middle
that we've spent the
bulk of the talk on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.796 --> 00:50:00.976 A:middle
that we've spent the
bulk of the talk on.

00:50:03.826 --> 00:50:06.726 A:middle
All of the AVCaptureDevice
manual controls happen

00:50:06.726 --> 00:50:07.336 A:middle
in real time.

00:50:08.406 --> 00:50:11.496 A:middle
You set an exposure, it
executes your command.

00:50:11.936 --> 00:50:15.586 A:middle
That's great, but sometimes
you need to capture a moment

00:50:15.586 --> 00:50:18.066 A:middle
in time a variety
of different ways.

00:50:18.666 --> 00:50:21.156 A:middle
You need to capture one
picture but you want

00:50:21.156 --> 00:50:22.286 A:middle
to set different settings.

00:50:22.806 --> 00:50:25.736 A:middle
So, wouldn't it be great if
you could preprogram the camera

00:50:26.266 --> 00:50:29.646 A:middle
to give you several images
in a row of the same scene,

00:50:29.876 --> 00:50:32.486 A:middle
but with different exposure
values for each one.

00:50:32.916 --> 00:50:36.716 A:middle
And then issue that command and
have it execute that command

00:50:36.716 --> 00:50:39.076 A:middle
as a group and then give you
those three or four images back.

00:50:40.006 --> 00:50:41.846 A:middle
That's exactly what
bracketed capture is.

00:50:42.476 --> 00:50:47.546 A:middle
It's a burst of still images
taken with varied settings

00:50:47.546 --> 00:50:48.506 A:middle
from picture to picture.

00:50:49.966 --> 00:50:53.596 A:middle
Some common examples would
be an exposure bracket,

00:50:53.596 --> 00:50:54.566 A:middle
two different flavors.

00:50:54.806 --> 00:50:57.736 A:middle
The first is an auto
exposure bracket

00:50:57.926 --> 00:51:01.886 A:middle
where you are differing the
bias from image to image,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:57.926 --> 00:51:01.886 A:middle
where you are differing the
bias from image to image,

00:51:02.266 --> 00:51:04.396 A:middle
minus two, zero, plus two.

00:51:05.136 --> 00:51:08.006 A:middle
Some reasons for doing
that might be if you want

00:51:08.046 --> 00:51:12.266 A:middle
to do some highlight recovery
such as an HDR fusion algorithm.

00:51:12.476 --> 00:51:13.986 A:middle
You could take an
underexposed image,

00:51:13.986 --> 00:51:15.986 A:middle
an overexposed image,
fuse them together.

00:51:17.066 --> 00:51:19.996 A:middle
The other case is manual
where you have full control

00:51:19.996 --> 00:51:22.856 A:middle
over shutter speed and ISO and
you set those independently

00:51:22.856 --> 00:51:24.206 A:middle
for each image in the bracket.

00:51:25.216 --> 00:51:26.186 A:middle
Why might you want to do that?

00:51:26.566 --> 00:51:30.666 A:middle
Well, creative exposure effects,
different combinations of long

00:51:30.666 --> 00:51:32.366 A:middle
and short exposure
duration, for instance.

00:51:33.646 --> 00:51:36.486 A:middle
And the simplest of all
brackets is the bracket

00:51:36.486 --> 00:51:37.876 A:middle
where you don't vary anything.

00:51:38.476 --> 00:51:39.896 A:middle
It's just a simple burst bracket

00:51:39.896 --> 00:51:41.806 A:middle
and that might be good
for a finish line.

00:51:45.506 --> 00:51:48.156 A:middle
So, without further
ado let's have a demo

00:51:48.236 --> 00:51:50.186 A:middle
of bracketed capture with John.

00:51:50.626 --> 00:51:50.956 A:middle
Come on up.

00:51:51.516 --> 00:51:57.876 A:middle
[ Applause ]

00:51:58.376 --> 00:51:58.896 A:middle
&gt;&gt; Thanks, Brad.

00:51:59.066 --> 00:52:00.986 A:middle
My name is John Papandriopoulos.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.066 --> 00:52:00.986 A:middle
My name is John Papandriopoulos.

00:52:01.096 --> 00:52:02.796 A:middle
I'm great, it's great
to be here.

00:52:02.796 --> 00:52:04.686 A:middle
I'm an engineer on the
Camera Software Team.

00:52:04.766 --> 00:52:07.146 A:middle
So, this is a two-part demo.

00:52:07.146 --> 00:52:10.366 A:middle
The first part we're going to be
looking at exposure compensation

00:52:10.696 --> 00:52:13.416 A:middle
and performing a bracketed
capture of three frames

00:52:13.606 --> 00:52:18.836 A:middle
where we have an underexposed
frame or image, a well-lit image

00:52:18.896 --> 00:52:22.196 A:middle
and an overexposed
image using EV values

00:52:22.196 --> 00:52:24.396 A:middle
of minus two, zero and plus two.

00:52:24.766 --> 00:52:28.816 A:middle
So, let's go ahead and take a
capture and what we've done is,

00:52:28.896 --> 00:52:32.586 A:middle
as these frames have been
captured, we process them

00:52:32.586 --> 00:52:34.466 A:middle
in real-time and stripe them.

00:52:34.666 --> 00:52:38.856 A:middle
So, we actually take a
strip from the first image

00:52:39.166 --> 00:52:41.466 A:middle
and then put that
into an output buffer

00:52:41.466 --> 00:52:44.286 A:middle
that you see on the screen here.

00:52:44.286 --> 00:52:46.426 A:middle
The second one beneath
that comes

00:52:46.506 --> 00:52:51.016 A:middle
from the second captured frame,
in this case a well-lit frame

00:52:51.276 --> 00:52:54.946 A:middle
and then an underexposed
frame following that.

00:52:55.576 --> 00:53:00.216 A:middle
So, now I'm going to go into the
fully manual bracketed capture


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:55.576 --> 00:53:00.216 A:middle
So, now I'm going to go into the
fully manual bracketed capture

00:53:00.216 --> 00:53:02.936 A:middle
mode that we support
where we have full control

00:53:02.936 --> 00:53:04.216 A:middle
over ISO and duration.

00:53:04.216 --> 00:53:06.746 A:middle
What we're going to do in
this case is we're going

00:53:06.746 --> 00:53:09.986 A:middle
to perform a three
frame bracketed capture

00:53:10.106 --> 00:53:12.986 A:middle
where we have control over
the duration or shutter speed

00:53:13.196 --> 00:53:19.106 A:middle
and we're going to be setting
that for a short shutter speed,

00:53:19.336 --> 00:53:22.996 A:middle
a medium shutter speed and
then a fast shutter speed.

00:53:23.066 --> 00:53:26.266 A:middle
So Brad, if you were to walk
across there and we capture

00:53:26.266 --> 00:53:30.386 A:middle
that what we can see here is
that we have a blurry image

00:53:30.386 --> 00:53:31.546 A:middle
at the top of Brad's head.

00:53:31.946 --> 00:53:35.366 A:middle
That's where we had
a very slow shutter.

00:53:35.366 --> 00:53:38.786 A:middle
We have a little bit more
crisp for his chin there

00:53:38.986 --> 00:53:41.796 A:middle
and then you can see his
torso is quite crisp.

00:53:42.276 --> 00:53:45.136 A:middle
And if we look really
closely there you might see

00:53:45.136 --> 00:53:46.596 A:middle
that there's a lot
of noise there.

00:53:46.596 --> 00:53:50.006 A:middle
What we've had to do is adjust
the ISO and increase the gain

00:53:50.006 --> 00:53:52.926 A:middle
to compensate for the small
amount of light that was going

00:53:52.926 --> 00:53:54.836 A:middle
in at that fast shutter speed.

00:53:54.906 --> 00:53:56.976 A:middle
Thanks very much, can't wait
to see what you do with it.

00:53:57.516 --> 00:54:03.906 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:57.516 --> 00:54:03.906 A:middle
[ Applause ]

00:54:04.406 --> 00:54:06.976 A:middle
&gt;&gt; Thanks John for
slicing and dicing me.

00:54:08.796 --> 00:54:11.776 A:middle
Bracketed capture is all
implemented in a single class

00:54:12.466 --> 00:54:15.096 A:middle
and that's the
AVCaptureStillImageOutput.

00:54:15.406 --> 00:54:18.376 A:middle
That's the object that you use
to take pictures in our API.

00:54:19.206 --> 00:54:21.626 A:middle
So, how does it work?

00:54:23.166 --> 00:54:26.186 A:middle
Well, if you've used
AVCaptureStillImageOutput before

00:54:26.186 --> 00:54:29.556 A:middle
you'll be familiar with its
single image capture interface,

00:54:30.086 --> 00:54:30.816 A:middle
which is this.

00:54:30.816 --> 00:54:34.586 A:middle
You call captureStillImage
AsynchronouslyFrom Connection.

00:54:35.156 --> 00:54:38.256 A:middle
That takes a picture
and at some point

00:54:38.256 --> 00:54:42.046 A:middle
when it's done it calls you back
with that single image buffer.

00:54:43.076 --> 00:54:46.566 A:middle
For bracketed capture it
looks largely the same.

00:54:47.306 --> 00:54:51.246 A:middle
The bracketed capture interface
is captureStillImageBracket

00:54:51.466 --> 00:54:53.136 A:middle
AsynchronouslyFromConnection.

00:54:53.816 --> 00:54:56.736 A:middle
The only difference is that
it has a second parameter,

00:54:56.736 --> 00:55:00.496 A:middle
an additional parameter, which
is the settings array and that's


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:56.736 --> 00:55:00.496 A:middle
an additional parameter, which
is the settings array and that's

00:55:00.496 --> 00:55:03.786 A:middle
where you're giving it the array
of things that you want to vary

00:55:03.876 --> 00:55:06.536 A:middle
from picture to picture.

00:55:06.826 --> 00:55:09.296 A:middle
We have two new objects,
two new classes

00:55:09.756 --> 00:55:13.786 A:middle
to represent the settings for
a single image in the bracket.

00:55:14.476 --> 00:55:17.156 A:middle
The first is for the
exposure compensation

00:55:17.156 --> 00:55:18.796 A:middle
or auto exposure bracket.

00:55:19.376 --> 00:55:24.296 A:middle
So, one AVCaptureAutoExposure
BracketedStillImageSettings

00:55:24.396 --> 00:55:27.646 A:middle
object equals one of those
pictures in the bracket.

00:55:28.126 --> 00:55:31.646 A:middle
And here you get to set an
exposure target bias, minus one,

00:55:31.846 --> 00:55:37.796 A:middle
plus one, etc. For manual
exposure brackets you use an

00:55:37.796 --> 00:55:39.796 A:middle
object that lets
you set both ISO

00:55:39.866 --> 00:55:41.696 A:middle
and duration for
that one picture.

00:55:42.306 --> 00:55:46.026 A:middle
Now, there are some
dos and don'ts.

00:55:46.026 --> 00:55:47.606 A:middle
Let's cover the don'ts first.

00:55:48.136 --> 00:55:49.886 A:middle
In bracketed capture
we don't allow you

00:55:49.886 --> 00:55:52.216 A:middle
to mix bracketed
settings classes.

00:55:52.286 --> 00:55:54.326 A:middle
That means you can't
have a half manual,

00:55:54.396 --> 00:55:56.216 A:middle
half auto exposure bracket.

00:55:56.256 --> 00:55:59.466 A:middle
You have to have an all auto
or all manual exposure bracket.

00:55:59.936 --> 00:56:03.296 A:middle
Also, there is a limit to the
number of images you can take


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:59.936 --> 00:56:03.296 A:middle
Also, there is a limit to the
number of images you can take

00:56:03.296 --> 00:56:06.276 A:middle
in a bracket and you
must not request more

00:56:06.276 --> 00:56:09.176 A:middle
than maxBracketedCapture
StillImageCount.

00:56:09.846 --> 00:56:14.216 A:middle
That will vary from platform
to platform and also depends

00:56:14.216 --> 00:56:17.296 A:middle
on resolution and the output
format that you are asking for.

00:56:18.236 --> 00:56:22.746 A:middle
Now, the dos, do prepare for
the worst case and the way

00:56:22.746 --> 00:56:25.436 A:middle
that you do that is
by calling prepare.

00:56:25.846 --> 00:56:29.206 A:middle
You're telling the AVCapture
still image output at some point

00:56:29.206 --> 00:56:30.946 A:middle
in the future I am
going to take a bracket.

00:56:31.436 --> 00:56:33.796 A:middle
And you tell it what kind of
bracket you're going to take

00:56:33.796 --> 00:56:36.116 A:middle
by passing the exact settings
that you're going to use.

00:56:36.616 --> 00:56:39.616 A:middle
And by telling it beforehand to
prepare itself for that bracket,

00:56:39.946 --> 00:56:42.286 A:middle
it can do all of the buffer
allocations that it needs

00:56:42.286 --> 00:56:44.006 A:middle
to up front so that when you ask

00:56:44.006 --> 00:56:46.346 A:middle
for the bracket there'll
be no shutter lag.

00:56:46.346 --> 00:56:47.506 A:middle
It will happen very quickly.

00:56:48.796 --> 00:56:51.796 A:middle
You should always assume that
the sample buffers are coming

00:56:51.836 --> 00:56:53.566 A:middle
from a shared memory pool.

00:56:53.916 --> 00:56:56.816 A:middle
In other words, don't ask
for one bracketed capture

00:56:56.816 --> 00:56:59.266 A:middle
and then hold onto those buffers
and then ask for a second one,

00:56:59.406 --> 00:57:00.876 A:middle
because the second
one is going to fail.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:59.406 --> 00:57:00.876 A:middle
because the second
one is going to fail.

00:57:01.516 --> 00:57:03.736 A:middle
You must CFrelease
the buffers given

00:57:03.736 --> 00:57:06.536 A:middle
from the first bracket before
asking for a second bracket.

00:57:07.706 --> 00:57:12.316 A:middle
If you want to reclaim the
memory that was prepared

00:57:12.616 --> 00:57:14.676 A:middle
from a previous prepare
call the way

00:57:14.676 --> 00:57:17.226 A:middle
to do it is just call
prepare again with an array

00:57:17.226 --> 00:57:21.216 A:middle
of one object and that
will reclaim the memory.

00:57:21.806 --> 00:57:24.136 A:middle
Now, some fine details
about bracketed capture.

00:57:25.356 --> 00:57:26.896 A:middle
What happens-what's
the interaction

00:57:26.896 --> 00:57:29.196 A:middle
between the AVCaptureDevice
manual controls

00:57:29.196 --> 00:57:30.336 A:middle
and bracketed capture?

00:57:30.456 --> 00:57:31.836 A:middle
Well, the bracketed
capture wins.

00:57:32.316 --> 00:57:35.096 A:middle
So, when you're doing a
bracketed capture all the manual

00:57:35.096 --> 00:57:35.846 A:middle
controls you set

00:57:35.846 --> 00:57:38.706 A:middle
on the AVCaptureDevice
are temporarily overridden

00:57:38.706 --> 00:57:40.286 A:middle
and then they go back
to what they were

00:57:40.346 --> 00:57:41.526 A:middle
after the bracketed capture.

00:57:42.776 --> 00:57:47.416 A:middle
Also, flash and still image
stabilization are ignored during

00:57:47.416 --> 00:57:48.366 A:middle
a bracket.

00:57:49.186 --> 00:57:52.146 A:middle
And all images in a single
bracket must have the same

00:57:52.146 --> 00:57:57.306 A:middle
output format, be
it jpeg, 420f, VGRA.

00:57:58.066 --> 00:58:01.196 A:middle
Also note that because you
might be doing long durations,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:57:58.066 --> 00:58:01.196 A:middle
Also note that because you
might be doing long durations,

00:58:01.196 --> 00:58:04.566 A:middle
it might need to expose for a
long time, that it is typical

00:58:04.566 --> 00:58:08.916 A:middle
for you to see video preview
drop frames while an exposure

00:58:08.916 --> 00:58:09.866 A:middle
bracket is being taken.

00:58:11.416 --> 00:58:13.716 A:middle
And finally, bracketed
capture is supported

00:58:13.826 --> 00:58:16.496 A:middle
on all iOS devices in iOS 8.

00:58:18.376 --> 00:58:22.196 A:middle
Whew, that concludes our lovely
lunch, time for the check.

00:58:23.306 --> 00:58:24.056 A:middle
So, what do we got here?

00:58:24.056 --> 00:58:27.516 A:middle
We've got AVCaptureView
on Yosemite, a standard UI

00:58:28.336 --> 00:58:31.566 A:middle
for doing recording,
iOS screen recording

00:58:31.676 --> 00:58:35.286 A:middle
for app previews-for all
you people that make apps

00:58:35.286 --> 00:58:36.856 A:middle
on the App Store, you'll
want to check that out,

00:58:37.506 --> 00:58:40.056 A:middle
access to the hardware
video encoder in real-time,

00:58:40.326 --> 00:58:42.086 A:middle
special session about
that tomorrow,

00:58:42.706 --> 00:58:44.276 A:middle
powerful new camera controls.

00:58:44.426 --> 00:58:47.886 A:middle
We talked about focus,
exposure, exposure compensation

00:58:48.276 --> 00:58:51.866 A:middle
and white balance, and
finally, still image bracketing.

00:58:52.996 --> 00:58:57.666 A:middle
The two apps that we used today
for the demos, AVCamManual

00:58:57.666 --> 00:59:00.736 A:middle
and BracketStripes
are available now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:58:57.666 --> 00:59:00.736 A:middle
and BracketStripes
are available now.

00:59:01.046 --> 00:59:01.776 A:middle
So, if you go and look

00:59:01.776 --> 00:59:03.986 A:middle
at the session info you
can go download those,

00:59:04.326 --> 00:59:05.806 A:middle
see what we did there,
try them out.

00:59:07.696 --> 00:59:11.446 A:middle
For more information here's
our evangelism contact.

00:59:12.416 --> 00:59:14.686 A:middle
There are a number of
related sessions to this one,

00:59:14.686 --> 00:59:17.606 A:middle
both for AVFoundation and
for the photos framework.

00:59:17.986 --> 00:59:18.996 A:middle
Some have already happened.

00:59:19.496 --> 00:59:21.456 A:middle
If so, go check them
out in the videos

00:59:21.896 --> 00:59:23.206 A:middle
and there are some
still to come.

00:59:24.006 --> 00:59:24.976 A:middle
Thank you and have a great show.

00:59:25.016 --> 00:59:27.000 A:middle
[ Applause ]

