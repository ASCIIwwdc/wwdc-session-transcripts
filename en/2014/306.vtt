WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:13.046 --> 00:00:13.526 A:middle
&gt;&gt; Welcome.

00:00:13.716 --> 00:00:15.116 A:middle
Welcome to Friday.

00:00:15.116 --> 00:00:16.186 A:middle
Thanks for being here.

00:00:16.896 --> 00:00:18.586 A:middle
My name is Sal Soghoian.

00:00:18.586 --> 00:00:19.676 A:middle
I am the Product Manager

00:00:19.676 --> 00:00:22.686 A:middle
for Automation Technologies
at Apple, Inc.

00:00:23.236 --> 00:00:27.046 A:middle
And this is Session
306, this is a big day.

00:00:27.246 --> 00:00:30.266 A:middle
We get to welcome
JavaScript to the family

00:00:30.266 --> 00:00:32.776 A:middle
of scripting languages on OS X.

00:00:33.516 --> 00:00:36.616 A:middle
[ Applause ]

00:00:37.116 --> 00:00:38.956 A:middle
We've been waiting
a long time for this

00:00:38.956 --> 00:00:40.766 A:middle
and I know our customers
have, too,

00:00:40.766 --> 00:00:42.466 A:middle
and we're really
thrilled about it.

00:00:43.136 --> 00:00:46.006 A:middle
And before I get into the
details of the language

00:00:46.006 --> 00:00:49.486 A:middle
and how it works I'd like
to take a moment to reflect

00:00:49.486 --> 00:00:54.116 A:middle
on the state of automation,
beginning with Mavericks.

00:00:55.416 --> 00:00:59.386 A:middle
Now, in Mavericks we introduced
a host of new features,

00:00:59.596 --> 00:01:01.516 A:middle
some very powerful
things beginning

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:01.516 --> 00:01:05.296 A:middle
with notification support in
both the scripting language

00:01:05.296 --> 00:01:06.636 A:middle
and in Automator as well.

00:01:06.636 --> 00:01:10.376 A:middle
So it became very easy to
use notifications instead

00:01:10.376 --> 00:01:13.506 A:middle
of posting dialogues in
your automation routines.

00:01:14.226 --> 00:01:16.776 A:middle
We also introduced
Code Signing ability

00:01:16.776 --> 00:01:19.356 A:middle
in our Editor applications,
both in Automator

00:01:19.356 --> 00:01:21.926 A:middle
and in the Script
Editor, which is great

00:01:21.926 --> 00:01:25.966 A:middle
because then you could sign and
deliver Automation solutions

00:01:25.966 --> 00:01:28.296 A:middle
to your customers,
friends and coworkers.

00:01:29.096 --> 00:01:31.686 A:middle
We also introduced
a new construct

00:01:31.686 --> 00:01:34.886 A:middle
in AppleScript called the
"use" statement that acts

00:01:34.886 --> 00:01:39.246 A:middle
like an importer to import
functionality from applications

00:01:39.246 --> 00:01:43.746 A:middle
and frameworks and scripting
editions, and allow them

00:01:44.136 --> 00:01:46.136 A:middle
to be used in your scripts.

00:01:46.496 --> 00:01:49.986 A:middle
And by doing this we
also made it possible

00:01:49.986 --> 00:01:53.076 A:middle
to have Script Libraries
that we introduced.

00:01:53.556 --> 00:01:56.596 A:middle
And Script Libraries are
scripts that you create yourself

00:01:57.356 --> 00:02:00.746 A:middle
that contain your favorite
sub-routines or handlers,

00:02:01.286 --> 00:02:04.736 A:middle
and you can call and load these
libraries from scripts anywhere

00:02:04.736 --> 00:02:06.086 A:middle
in the operating system.

00:02:06.566 --> 00:02:11.206 A:middle
You can also take advantage of
AppleScript Objective-C and any

00:02:11.206 --> 00:02:13.316 A:middle
of the Cocoa calls
that you want to use.

00:02:13.576 --> 00:02:17.366 A:middle
So they were very powerful,
very useful they be introduced.

00:02:18.236 --> 00:02:21.276 A:middle
And then finally, we had
a new feature that worked

00:02:21.276 --> 00:02:24.666 A:middle
on English-only systems but we
thought it was so interesting

00:02:24.666 --> 00:02:26.256 A:middle
that we introduced it.

00:02:26.696 --> 00:02:30.056 A:middle
It was called Speakable
Workflows, and it allowed you

00:02:30.056 --> 00:02:35.516 A:middle
to take your Automator workflow
and save it as a speakable item

00:02:35.746 --> 00:02:37.646 A:middle
in the dictation architecture.

00:02:37.646 --> 00:02:40.396 A:middle
So you could say a command and
it would run your workflow.

00:02:40.946 --> 00:02:43.616 A:middle
And so Mavericks was a very
productive release for us,

00:02:43.616 --> 00:02:46.526 A:middle
we were very excited about
it, but we were also excited

00:02:46.526 --> 00:02:49.226 A:middle
about what we've
done in Yosemite

00:02:49.226 --> 00:02:52.996 A:middle
and how it builds upon the
groundwork we laid in Mavericks.

00:02:53.566 --> 00:02:56.776 A:middle
As part of this evolutionary
process,

00:02:57.166 --> 00:03:00.456 A:middle
we integrated Code Signing
with workflow files.


00:03:00.786 --> 00:03:03.926 A:middle
So not only applets but now
your workflow files can be

00:03:03.926 --> 00:03:05.216 A:middle
Code-Signed as well.

00:03:05.946 --> 00:03:08.666 A:middle
And because of changes
that we implemented

00:03:08.666 --> 00:03:12.586 A:middle
in the AppleScript language for
supporting optional parameters

00:03:12.586 --> 00:03:15.666 A:middle
in sub-routines and
handlers we were enabled

00:03:15.666 --> 00:03:19.236 A:middle
to upgrade the scripting
library support

00:03:19.236 --> 00:03:22.616 A:middle
so that you can now have your
favorite calls have optional

00:03:22.616 --> 00:03:24.486 A:middle
parameters and use
those as well.

00:03:25.016 --> 00:03:26.536 A:middle
Very good improvement there.

00:03:27.446 --> 00:03:30.586 A:middle
And listening to customer
requests that have been

00:03:31.166 --> 00:03:33.696 A:middle
for years and years,
requesting some way

00:03:33.696 --> 00:03:38.866 A:middle
to indicate a progress method
for their Automation routines,

00:03:38.896 --> 00:03:43.146 A:middle
we now have built-in
script progress indicators.

00:03:43.346 --> 00:03:48.836 A:middle
So, by calling simple properties
you can have your scripts

00:03:48.836 --> 00:03:52.506 A:middle
display a progress
indicator, a circle,

00:03:52.706 --> 00:03:56.646 A:middle
or even as a progress
bar in a floating window,

00:03:56.806 --> 00:03:59.996 A:middle
and all of this is done for
you automatically, all you have

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:00.036 --> 00:04:02.796 A:middle
to do is set properties
within your scripts.

00:04:03.256 --> 00:04:05.916 A:middle
So I think our customers
are going to really enjoy

00:04:05.916 --> 00:04:07.266 A:middle
that particular feature.

00:04:08.156 --> 00:04:10.806 A:middle
And we took the idea
of Speakable Workflows

00:04:10.806 --> 00:04:12.566 A:middle
and we've advanced it now

00:04:12.926 --> 00:04:16.366 A:middle
because of the dictation
architecture in Yosemite

00:04:16.366 --> 00:04:18.435 A:middle
that works with all languages.

00:04:19.125 --> 00:04:21.986 A:middle
We now have a new
template item in Automator

00:04:22.246 --> 00:04:24.806 A:middle
for creating a Dictation
Command.

00:04:25.266 --> 00:04:28.576 A:middle
So you create your workflow,
you save it, it gets saved

00:04:28.576 --> 00:04:32.186 A:middle
into the dictation architecture
and when you're in the process

00:04:32.186 --> 00:04:34.656 A:middle
of dictating or just
sitting at the machine,

00:04:34.936 --> 00:04:38.166 A:middle
you can say the name of your
command and it will execute.

00:04:38.736 --> 00:04:40.976 A:middle
Very interesting, very
powerful, I know you're going

00:04:40.976 --> 00:04:43.246 A:middle
to have a lot of
fun exploring that.

00:04:43.746 --> 00:04:47.106 A:middle
So that's just a quick
overview of where we've been,

00:04:47.516 --> 00:04:50.456 A:middle
but something that's been
on our minds for a long time

00:04:50.456 --> 00:04:52.576 A:middle
that we've happy
and very pleased

00:04:52.576 --> 00:04:55.766 A:middle
to have here today is
JavaScript for Automation.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.036 --> 00:05:01.496 A:middle
Now, those of you that are
familiar with JavaScript

00:05:01.496 --> 00:05:05.956 A:middle
from the web-based community,
this is not the JavaScript

00:05:05.956 --> 00:05:11.326 A:middle
for writing a DOM that uses CSS
and HTML5 to create a web app.

00:05:11.716 --> 00:05:15.366 A:middle
We're talking about extending
the JavaScript core language

00:05:15.866 --> 00:05:18.736 A:middle
to integrate with the open
scripting architecture.

00:05:19.016 --> 00:05:22.886 A:middle
And by doing this, you
have now gained the ability

00:05:22.886 --> 00:05:26.266 A:middle
to pull all those levers
inside of the scriptable apps

00:05:26.266 --> 00:05:30.096 A:middle
on your operating system to
perform the kind of repetitive

00:05:30.096 --> 00:05:33.856 A:middle
or interesting or complex
tasks that you do every day.

00:05:34.066 --> 00:05:38.526 A:middle
And now this power is available
to you through JavaScript.

00:05:39.296 --> 00:05:42.586 A:middle
Now many of you that write
JavaScript professionally

00:05:42.586 --> 00:05:47.676 A:middle
or as your focus, you're used
to using editors like BBEdit,

00:05:47.896 --> 00:05:53.136 A:middle
Sublime Text, WebStorm,
TextMate, things like that.

00:05:53.526 --> 00:05:58.596 A:middle
Initially, as you adapt to
JavaScript for Automation,

00:05:58.876 --> 00:06:00.326 A:middle
you'll write your first scripts

00:06:00.326 --> 00:06:02.666 A:middle
in the Script Editor
application.

00:06:03.146 --> 00:06:05.866 A:middle
And I'm going to give
you just a short overview

00:06:06.106 --> 00:06:09.546 A:middle
of this application, its
interface and preferences

00:06:09.856 --> 00:06:12.416 A:middle
so that you'll understand
what's happening

00:06:12.416 --> 00:06:14.896 A:middle
as David presents
JavaScript for you.

00:06:15.656 --> 00:06:19.246 A:middle
So let me take a look at the
Script Editor application.

00:06:19.886 --> 00:06:22.916 A:middle
So when you open the Script
Editor Application you get this

00:06:22.916 --> 00:06:25.756 A:middle
very simple interface,
this is a script window.

00:06:26.346 --> 00:06:29.966 A:middle
And it has a simple but
very powerful design to it,

00:06:30.506 --> 00:06:32.176 A:middle
beginning with the little slider

00:06:32.486 --> 00:06:35.246 A:middle
that separates the two
main panes of the window,

00:06:35.576 --> 00:06:38.966 A:middle
the script pane where you
enter the code for your script,

00:06:39.676 --> 00:06:42.656 A:middle
and the bottom pane
contains an event log.

00:06:42.996 --> 00:06:46.856 A:middle
So as the script is executing
you'll see the events listed

00:06:46.856 --> 00:06:49.586 A:middle
there with the results
coming in from the events.

00:06:49.886 --> 00:06:51.826 A:middle
And this is a live
log that happens

00:06:51.826 --> 00:06:53.796 A:middle
as the script is executing.

00:06:54.756 --> 00:06:58.146 A:middle
At the top there are
some simple controls

00:06:58.146 --> 00:06:59.826 A:middle
for basically compiling
the script

00:06:59.826 --> 00:07:01.726 A:middle
to make sure your
syntax is correct,


00:07:02.556 --> 00:07:05.596 A:middle
and there's also a control for
running or stopping your script.

00:07:06.566 --> 00:07:10.276 A:middle
Now, there at the bottom
here is a language control.

00:07:10.276 --> 00:07:12.656 A:middle
So make sure if you're
writing JavaScript

00:07:13.006 --> 00:07:17.516 A:middle
that this popup menu is set
for the JavaScript language.

00:07:18.116 --> 00:07:22.516 A:middle
And that's basically
the interface,

00:07:22.516 --> 00:07:27.156 A:middle
and the way that it works is
you enter your script code

00:07:27.586 --> 00:07:31.306 A:middle
into the top area, then
you click the Run button

00:07:32.136 --> 00:07:35.986 A:middle
and as it executes you can see

00:07:35.986 --> 00:07:37.856 A:middle
that there's a progress
indicator here

00:07:37.856 --> 00:07:40.456 A:middle
on the right showing the
progress of the script,

00:07:40.716 --> 00:07:42.976 A:middle
and you can watch
the event log go by.

00:07:43.596 --> 00:07:47.696 A:middle
Now this simple script that
exported open Keynote documents

00:07:47.726 --> 00:07:50.176 A:middle
to movies, you can
see the results of it

00:07:50.176 --> 00:07:52.466 A:middle
and how it was logged
and everything indicated

00:07:52.466 --> 00:07:54.686 A:middle
in the final result of
the script at the bottom.

00:07:55.106 --> 00:07:57.236 A:middle
So this is the interface
that you have

00:07:57.286 --> 00:07:59.186 A:middle
when you're executing scripts,

00:07:59.186 --> 00:08:01.426 A:middle
and as David shows
you the examples,


00:08:01.596 --> 00:08:03.626 A:middle
this is what you're
going to see.

00:08:04.226 --> 00:08:06.806 A:middle
There's some other important
preferences you should be aware

00:08:06.806 --> 00:08:09.096 A:middle
of and let me just
quickly show those to you.

00:08:09.536 --> 00:08:14.896 A:middle
So, in the Preferences menu
from the Application menu,

00:08:15.436 --> 00:08:19.556 A:middle
in the General Settings
pane there is a Default

00:08:19.556 --> 00:08:20.906 A:middle
Language popup.

00:08:20.906 --> 00:08:22.756 A:middle
If you're going to
be using JavaScript

00:08:22.756 --> 00:08:26.376 A:middle
as your primary language for
scripting you want to make sure

00:08:26.376 --> 00:08:29.576 A:middle
that you change this
value to JavaScript.

00:08:29.946 --> 00:08:32.135 A:middle
Now this says JavaScript 1.0.

00:08:32.135 --> 00:08:34.765 A:middle
This is JavaScript
for Automation 1.0.

00:08:34.765 --> 00:08:37.385 A:middle
It is not JavaScript 1.0.

00:08:37.385 --> 00:08:41.275 A:middle
We use the current JavaScript
core language as the basis.

00:08:41.346 --> 00:08:44.316 A:middle
So don't be freaked out
when you see 1.0 there.

00:08:44.796 --> 00:08:49.556 A:middle
Also, make sure that you
check the Show Script menu

00:08:49.556 --> 00:08:53.296 A:middle
in menu bar option, and what
this will do is activate the

00:08:53.376 --> 00:08:56.666 A:middle
system-wide Script Menu at the
top right of your menu bar.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:56.996 --> 00:09:00.946 A:middle
And from this Script Menu you
can host your favorite scripts

00:09:01.226 --> 00:09:03.646 A:middle
and you can make them
available contextually

00:09:03.646 --> 00:09:05.216 A:middle
within certain applications.

00:09:05.216 --> 00:09:08.306 A:middle
So if you write scripts for the
Finder, they can only appear

00:09:08.336 --> 00:09:09.246 A:middle
if the Finder's there.

00:09:09.246 --> 00:09:10.916 A:middle
If you write scripts for Pages,

00:09:11.056 --> 00:09:12.866 A:middle
they'll only appear
when Pages are there.

00:09:13.106 --> 00:09:16.166 A:middle
It's up to you, the Script
Menu runs shell scripts,

00:09:16.166 --> 00:09:19.246 A:middle
Apple scripts, applications,
workflows, JavaScripts,

00:09:20.006 --> 00:09:21.856 A:middle
any kind of scripting
language supported

00:09:21.856 --> 00:09:24.646 A:middle
by the operating system can
run from the Script Menu.

00:09:24.646 --> 00:09:26.576 A:middle
So you'll be taking
advantage of that.

00:09:27.356 --> 00:09:31.906 A:middle
In addition, if you want to set
certain coloring for the code

00:09:31.906 --> 00:09:35.516 A:middle
that you use, this formatting
pane is where you'll do that.

00:09:35.716 --> 00:09:39.096 A:middle
You can choose fonts, font
size and coloring to apply

00:09:39.506 --> 00:09:42.026 A:middle
to fit comfortably with
what you're used to.

00:09:43.306 --> 00:09:46.396 A:middle
Next, I'd like to
look at dictionaries.

00:09:46.876 --> 00:09:49.356 A:middle
Now, in the operating system,

00:09:49.356 --> 00:09:52.506 A:middle
every scriptable
application carries internally

00:09:52.506 --> 00:09:55.646 A:middle
within its bundle a
complete dictionary

00:09:55.646 --> 00:09:58.316 A:middle
of all the terms
that it understands.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.706 --> 00:10:02.576 A:middle
It will list all the classes and
all the methods and the commands

00:10:02.576 --> 00:10:06.396 A:middle
and the properties and elements
that it is familiar with.

00:10:06.626 --> 00:10:09.716 A:middle
So this is where you will
go to learn about how

00:10:09.716 --> 00:10:12.266 A:middle
to control a particular
application.

00:10:12.616 --> 00:10:14.826 A:middle
And what you do is you
choose Open Dictionary

00:10:14.826 --> 00:10:18.176 A:middle
from the File menu and in the
forthcoming dialogue choose

00:10:18.176 --> 00:10:18.966 A:middle
an application.

00:10:19.686 --> 00:10:23.046 A:middle
When you do that you'll
see a script viewer window

00:10:23.046 --> 00:10:25.606 A:middle
like this one for the
Keynote dictionary,

00:10:26.856 --> 00:10:29.936 A:middle
and this is what you
see when you look

00:10:29.936 --> 00:10:32.376 A:middle
at an application's
scripting dictionary,

00:10:32.376 --> 00:10:35.476 A:middle
and this is what you will do
to navigate that dictionary.

00:10:36.626 --> 00:10:38.896 A:middle
At the top is a Language button,

00:10:38.896 --> 00:10:41.416 A:middle
so this dictionary
viewer functions

00:10:41.536 --> 00:10:44.006 A:middle
for all the scripting
languages we support,

00:10:44.006 --> 00:10:48.216 A:middle
so it supports JavaScript,
AppleScript or Objective-C,

00:10:48.376 --> 00:10:49.906 A:middle
and you can change the mode

00:10:50.026 --> 00:10:52.736 A:middle
for viewing the content
right from this menu.

00:10:52.736 --> 00:10:57.976 A:middle
Now at the top part of
this window, the top pane

00:10:57.976 --> 00:10:59.826 A:middle
of this window, is
the Model Viewer.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:59.826 --> 00:11:01.976 A:middle
And this is where you
see how the objects

00:11:02.326 --> 00:11:06.086 A:middle
in the application
scripting model are reflected.

00:11:06.796 --> 00:11:11.496 A:middle
On the left-hand side, typically
a scripting dictionary is

00:11:11.496 --> 00:11:15.256 A:middle
grouped into suites, and these
suites are usually grouped

00:11:15.256 --> 00:11:17.806 A:middle
by functionality,
by what they do.

00:11:18.116 --> 00:11:20.046 A:middle
In this particular
example you'll see

00:11:20.046 --> 00:11:21.666 A:middle
that there's multiple suites.

00:11:22.096 --> 00:11:23.716 A:middle
There's suites for iWork.

00:11:24.206 --> 00:11:27.766 A:middle
Because Keynote is part of the
iWork family of applications,

00:11:28.546 --> 00:11:31.486 A:middle
the iWork Suites
of common objects

00:11:31.486 --> 00:11:34.076 A:middle
and common commands
are included there.

00:11:34.296 --> 00:11:37.286 A:middle
And then Keynote has
its own suite of things

00:11:37.286 --> 00:11:39.946 A:middle
that are particular for
the Keynote application.

00:11:39.946 --> 00:11:42.936 A:middle
And then once the
suite is selected,

00:11:43.336 --> 00:11:47.566 A:middle
you'll see in the next column
the methods and the classes

00:11:47.566 --> 00:11:50.146 A:middle
that belong to that
particular suite.

00:11:50.146 --> 00:11:53.126 A:middle
So here we have commands
like Export,

00:11:53.476 --> 00:11:55.746 A:middle
where you would export
a presentation.

00:11:55.746 --> 00:11:57.796 A:middle
And you see classes
like document.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.366 --> 00:12:02.136 A:middle
And then when you select a
class, you'll see the elements

00:12:02.356 --> 00:12:06.026 A:middle
that belong to that class
in the right-hand column,

00:12:06.376 --> 00:12:10.096 A:middle
and also the properties
of that particular class.

00:12:10.096 --> 00:12:14.126 A:middle
And here you see the properties
of a Keynote document.

00:12:14.896 --> 00:12:18.146 A:middle
Now for further information
and detail about these,

00:12:18.396 --> 00:12:21.666 A:middle
in the bottom half of the
window is the dictionary viewer.

00:12:21.666 --> 00:12:25.426 A:middle
And the dictionary viewer
contains the definitions for all

00:12:25.426 --> 00:12:27.146 A:middle
of those particular elements.

00:12:27.256 --> 00:12:29.496 A:middle
So when you want to
know about, well,

00:12:29.496 --> 00:12:32.466 A:middle
how do I script the Finder,
or how do I script Numbers,

00:12:32.756 --> 00:12:35.766 A:middle
how do I script Keynote,
how do I script Aperture?

00:12:36.376 --> 00:12:40.146 A:middle
You open a dictionary and this
is where you learn and explore

00:12:40.306 --> 00:12:43.006 A:middle
to find out how to
control those applications.

00:12:43.636 --> 00:12:46.756 A:middle
So that's the scripting
dictionary,

00:12:46.756 --> 00:12:49.026 A:middle
and that's the Script
Editor application.

00:12:49.026 --> 00:12:53.546 A:middle
So, let me get out of the way
and bring up David Steinberg,

00:12:53.846 --> 00:12:56.296 A:middle
who's the newest
member of our team,

00:12:56.296 --> 00:12:58.976 A:middle
to show you JavaScript
for Automation.

00:12:59.206 --> 00:12:59.996 A:middle
Enjoy this [applause].

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:02.226 --> 00:13:02.946 A:middle
&gt;&gt; Thank you, Sal.

00:13:03.856 --> 00:13:04.596 A:middle
Hello, everyone.

00:13:04.596 --> 00:13:06.256 A:middle
Thank you for being here.

00:13:06.256 --> 00:13:07.206 A:middle
It's a great honor.

00:13:07.286 --> 00:13:09.546 A:middle
I'm really excited to be showing
you this awesome new feature

00:13:09.846 --> 00:13:12.606 A:middle
of OS X Yosemite,
JavaScript for Automation.

00:13:13.066 --> 00:13:17.586 A:middle
So today's talk will cover what
JavaScript for Automation is

00:13:17.966 --> 00:13:21.386 A:middle
and how it works, how you can
use JavaScript for Automation

00:13:21.826 --> 00:13:23.726 A:middle
from basic to more
advanced techniques,

00:13:24.236 --> 00:13:25.106 A:middle
and finally we'll talk

00:13:25.106 --> 00:13:27.446 A:middle
about where you can use
JavaScript for Automation.

00:13:28.036 --> 00:13:32.466 A:middle
So to talk about what
JavaScript for Automation is,

00:13:33.186 --> 00:13:36.906 A:middle
let's take a look at
the underlying pieces.

00:13:37.056 --> 00:13:39.576 A:middle
Automation allows you
to accomplish tasks

00:13:39.746 --> 00:13:43.056 A:middle
on your Mac automatically,
from simple tasks,

00:13:43.516 --> 00:13:46.776 A:middle
such as changing the name of
a hundred files all at once,

00:13:47.276 --> 00:13:51.436 A:middle
to more complex tasks, such as
sending personalized directions

00:13:51.486 --> 00:13:53.436 A:middle
to guests before a
party you're having.

00:13:54.626 --> 00:13:58.656 A:middle
I'd like to demonstrate the
power of Automation to you now.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.536 --> 00:14:02.026 A:middle
So I work for Acme
Widgets, we're a company

00:14:02.026 --> 00:14:03.956 A:middle
that makes widgets,
as you might expect.

00:14:04.706 --> 00:14:07.466 A:middle
We have three main
clients, Japan, USA,

00:14:07.466 --> 00:14:10.976 A:middle
and then across Europe, and here
I have a chart detailing some

00:14:10.976 --> 00:14:13.826 A:middle
of our widgets' prices and
the regions they go to,

00:14:13.826 --> 00:14:15.796 A:middle
and the particular
currency, and so on.

00:14:16.486 --> 00:14:19.666 A:middle
And now I have four
upcoming presentations.

00:14:20.246 --> 00:14:22.856 A:middle
First, I have to give a
presentation to the president

00:14:22.856 --> 00:14:26.006 A:middle
of the company about all of
the regions that we work with,

00:14:26.446 --> 00:14:28.976 A:middle
all of their individual
prices, currencies, and so on,

00:14:29.056 --> 00:14:31.376 A:middle
and then I have to give
presentations to each

00:14:31.376 --> 00:14:35.006 A:middle
of those regions only detailing
the particular information

00:14:35.006 --> 00:14:36.236 A:middle
that pertains to that region.

00:14:36.976 --> 00:14:38.466 A:middle
So, now I'm thinking, okay,

00:14:38.526 --> 00:14:39.846 A:middle
I have four Keynotes
I have to make.

00:14:40.506 --> 00:14:41.726 A:middle
Well, let's start
with the first.

00:14:41.826 --> 00:14:45.086 A:middle
I have all my data here,
it's formatted as I want it,

00:14:45.366 --> 00:14:47.586 A:middle
I have some images that I
can use related to this data.

00:14:47.586 --> 00:14:51.006 A:middle
How about I write a script
that does this for me?

00:14:51.636 --> 00:14:53.556 A:middle
Well, I've done just that.

00:14:53.996 --> 00:14:56.926 A:middle
So here I have a script, don't
worry about understanding all

00:14:56.926 --> 00:14:59.836 A:middle
of it at the moment, but it's a
JavaScript for Automation script

00:14:59.836 --> 00:15:02.196 A:middle
that uses this Numbers document

00:15:02.616 --> 00:15:05.236 A:middle
and produces a full slide
deck for me in Keynote.

00:15:05.756 --> 00:15:09.796 A:middle
So if I run this here, we see
our slides are being created

00:15:09.846 --> 00:15:13.776 A:middle
for us with the information
that we got from that data,

00:15:13.776 --> 00:15:17.466 A:middle
and now we have an entire slide
deck ready for my president

00:15:17.466 --> 00:15:19.596 A:middle
to see, detailing
all of our widgets,

00:15:19.876 --> 00:15:22.756 A:middle
their prices per region,
currency, and so on.

00:15:23.036 --> 00:15:23.766 A:middle
This is perfect.

00:15:24.326 --> 00:15:27.476 A:middle
Okay, so I've accomplished
one, completely automatically.

00:15:27.586 --> 00:15:31.326 A:middle
I have three more to do,
and each of those are going

00:15:31.326 --> 00:15:33.186 A:middle
to be pretty much
the exact same.

00:15:33.406 --> 00:15:36.346 A:middle
Same number of slides, same
images, same information,

00:15:36.746 --> 00:15:39.546 A:middle
changed per region with
particular currency and so on.

00:15:40.116 --> 00:15:42.716 A:middle
And in fact, all of that
information is already

00:15:42.716 --> 00:15:45.386 A:middle
in this presentation I have
here, I just need to slim it

00:15:45.386 --> 00:15:46.576 A:middle
down for each version.

00:15:47.426 --> 00:15:49.076 A:middle
So I wrote myself
a helper script,

00:15:49.236 --> 00:15:50.586 A:middle
I'm going to use
it multiple times,

00:15:50.586 --> 00:15:52.216 A:middle
so I put it in my script menu.

00:15:52.886 --> 00:15:55.176 A:middle
And what this does
is it lets me say,

00:15:55.696 --> 00:15:57.016 A:middle
where am I presenting today?

00:15:57.086 --> 00:15:59.716 A:middle
Well, today I'm going to
be presenting in Japan.

00:15:59.816 --> 00:16:03.086 A:middle
So I just slim down my
Keynote to the few slides

00:16:03.086 --> 00:16:04.276 A:middle
that are important, put it

00:16:04.276 --> 00:16:06.676 A:middle
in presentation mode
and I'm able to go.

00:16:06.676 --> 00:16:08.186 A:middle
Hello everyone, thank
you for being here.

00:16:08.186 --> 00:16:09.236 A:middle
Let's talk about prices.

00:16:09.236 --> 00:16:10.716 A:middle
It's been a real
pleasure, have a good day.

00:16:11.496 --> 00:16:13.586 A:middle
Now [laughter], right?

00:16:14.086 --> 00:16:17.296 A:middle
Now, I'm going to be giving
a presentation for the USA.

00:16:17.796 --> 00:16:20.566 A:middle
Okay, I don't want to make
another slide deck all together,

00:16:20.566 --> 00:16:23.116 A:middle
I'm going to use my nice
little helper here, USA.

00:16:23.416 --> 00:16:24.906 A:middle
Hello everybody, thank
you for being here.

00:16:24.906 --> 00:16:26.006 A:middle
Let's talk some dollars.

00:16:26.006 --> 00:16:27.716 A:middle
It's been a real
pleasure, have a nice day.

00:16:28.386 --> 00:16:28.936 A:middle
Beautiful.

00:16:29.176 --> 00:16:34.006 A:middle
That entire automatable
process was automated for me

00:16:34.236 --> 00:16:35.936 A:middle
with just a couple little
scripts that I wrote.

00:16:36.546 --> 00:16:39.736 A:middle
That made my life easier,
got my work done faster.

00:16:40.086 --> 00:16:42.186 A:middle
And that is the power
of Automation.

00:16:44.516 --> 00:16:48.696 A:middle
[ Applause ]

00:16:49.196 --> 00:16:52.126 A:middle
Those demos were made possible
by scripting applications,

00:16:52.606 --> 00:16:55.696 A:middle
and applications that are built
using Cocoa automatically have a

00:16:55.696 --> 00:16:58.406 A:middle
certain level of scriptability,
such as being able

00:16:58.406 --> 00:17:00.106 A:middle
to be told to open, or to print.


00:17:01.046 --> 00:17:02.016 A:middle
And a wide variety

00:17:02.016 --> 00:17:04.415 A:middle
of applications have fully
embraced scriptability,

00:17:04.836 --> 00:17:07.455 A:middle
detailing the Object
Model of the application

00:17:07.766 --> 00:17:13.376 A:middle
and offering rich suites of
functionality beyond the basics.

00:17:13.935 --> 00:17:17.506 A:middle
Apple events are the underlying
communication mechanism behind

00:17:17.506 --> 00:17:18.566 A:middle
application scripting.

00:17:19.386 --> 00:17:22.026 A:middle
They provide access to the
scriptable pieces and parts

00:17:22.026 --> 00:17:24.116 A:middle
of an application
that are defined

00:17:24.116 --> 00:17:27.116 A:middle
in an application's scripting
dictionary, as Sal showed,

00:17:27.715 --> 00:17:31.286 A:middle
detailing what objects can
be interacted with and how.

00:17:31.426 --> 00:17:32.816 A:middle
So when you script
an application

00:17:33.126 --> 00:17:36.496 A:middle
in whatever language you may,
its scripting dictionary is read

00:17:36.496 --> 00:17:37.996 A:middle
and then Apple events are used

00:17:37.996 --> 00:17:39.436 A:middle
to communicate with
the application.

00:17:40.446 --> 00:17:42.696 A:middle
So let's take a look at an
example of an Object Model.

00:17:43.266 --> 00:17:47.576 A:middle
Here we have Mail, which
has an application object

00:17:48.376 --> 00:17:52.176 A:middle
with an inbox property, with
a messages element array,

00:17:52.576 --> 00:17:54.806 A:middle
with each element
individually accessible.

00:17:55.466 --> 00:17:58.556 A:middle
So for example, we could
pinpoint the second message

00:17:58.556 --> 00:18:02.486 A:middle
of the inbox of the application
mail, as an object specifier,


00:18:02.846 --> 00:18:05.286 A:middle
or a reference to
that particular object

00:18:05.286 --> 00:18:07.226 A:middle
in that particular application.

00:18:08.736 --> 00:18:10.766 A:middle
This is great, we've
looked really closely

00:18:10.766 --> 00:18:13.446 A:middle
at the things behind Automation
and application scripting.

00:18:14.216 --> 00:18:16.876 A:middle
Now let's talk about
JavaScript and how the power

00:18:16.876 --> 00:18:18.606 A:middle
of Automation was brought to it.

00:18:19.766 --> 00:18:23.396 A:middle
JavaScript is a scripting
language with C-like syntax

00:18:23.596 --> 00:18:25.456 A:middle
and objects with
prototype-based inheritance.

00:18:26.096 --> 00:18:26.886 A:middle
It's most well known

00:18:26.886 --> 00:18:29.686 A:middle
in the browser being the
scripting language of HTML5.

00:18:29.756 --> 00:18:32.226 A:middle
But it's also become
quite popular

00:18:32.226 --> 00:18:36.316 A:middle
as a server-side scripting
language, evidenced by Node.js.

00:18:36.716 --> 00:18:40.036 A:middle
JavaScript on OS X is
powered by JavaScriptCore,

00:18:40.216 --> 00:18:42.196 A:middle
the engine used by
WebKit and Safari.

00:18:44.166 --> 00:18:47.686 A:middle
JavaScript for Automation
is built on JavaScriptCore.

00:18:48.326 --> 00:18:51.576 A:middle
It's using the modern JavaScript
environment, and it's a kind

00:18:51.576 --> 00:18:52.916 A:middle
of server-side JavaScript,

00:18:53.196 --> 00:18:56.336 A:middle
or as we like to call it
OS Automation JavaScript.

00:18:56.866 --> 00:18:58.946 A:middle
And while the underlying
engine is the same,

00:18:59.466 --> 00:19:01.296 A:middle
JavaScript for Automation
is quite different


00:19:01.296 --> 00:19:02.646 A:middle
from running scripts
in your browser.

00:19:03.376 --> 00:19:04.986 A:middle
When you use JavaScript
for Automation,

00:19:05.056 --> 00:19:08.096 A:middle
you can do everything that
you as the Mac user can do.

00:19:08.096 --> 00:19:10.516 A:middle
And this is very different
from browser scripts

00:19:10.516 --> 00:19:12.276 A:middle
that don't have access
to your personal data

00:19:12.486 --> 00:19:14.676 A:middle
or the applications on your Mac.

00:19:15.106 --> 00:19:17.626 A:middle
And in browser scripts you
might expect a window object

00:19:17.626 --> 00:19:20.216 A:middle
or a document object, but you're
not going to have those here.

00:19:20.216 --> 00:19:21.686 A:middle
You have a host of
different objects

00:19:21.686 --> 00:19:24.906 A:middle
that you can interact
with, to automate your Mac.

00:19:25.196 --> 00:19:27.646 A:middle
So how exactly was this
brought to JavaScript?

00:19:28.436 --> 00:19:31.626 A:middle
Well to recap, applications
have scripting dictionaries

00:19:31.696 --> 00:19:33.946 A:middle
that detail what can be
interacted with and how,

00:19:34.536 --> 00:19:36.156 A:middle
and Apple events are
used to communicate

00:19:36.156 --> 00:19:37.056 A:middle
with those applications.

00:19:37.846 --> 00:19:38.566 A:middle
So to bring this

00:19:38.616 --> 00:19:42.386 A:middle
to JavaScriptCore we built the
JavaScript Apple Event Bridge

00:19:42.666 --> 00:19:44.426 A:middle
that reads those
scripting dictionaries

00:19:44.756 --> 00:19:46.656 A:middle
and then uses Apple
events to communicate

00:19:46.656 --> 00:19:47.716 A:middle
with the applications.

00:19:48.476 --> 00:19:51.476 A:middle
So now that we've seen what
JavaScript for Automation is

00:19:51.666 --> 00:19:54.946 A:middle
and how it works, let's look
at how we can use JavaScript

00:19:54.946 --> 00:19:58.686 A:middle
for Automation, beginning
with scripting applications.

00:19:59.336 --> 00:20:04.426 A:middle
We introduced an
application object


00:20:04.736 --> 00:20:07.816 A:middle
into a JavaScript context,
which is the main entrance point

00:20:07.886 --> 00:20:10.406 A:middle
to all of the scriptable pieces
and parts of an application.

00:20:11.276 --> 00:20:12.886 A:middle
So, the most common way

00:20:13.016 --> 00:20:15.356 A:middle
to access an application
is by name.

00:20:16.046 --> 00:20:18.066 A:middle
Here we're accessing
the Safari application.

00:20:18.846 --> 00:20:21.526 A:middle
And beyond name we can
also access applications

00:20:21.526 --> 00:20:25.816 A:middle
by Bundle ID, by
Path, by Process ID,

00:20:25.816 --> 00:20:30.476 A:middle
and we can get the application
that's running the script we're

00:20:30.476 --> 00:20:34.026 A:middle
currently in by getting
the current application.

00:20:35.076 --> 00:20:36.986 A:middle
So now that we have
this application object,

00:20:36.986 --> 00:20:39.306 A:middle
we're going to want
to interact with it.

00:20:39.496 --> 00:20:43.156 A:middle
Let's look at some examples of
the syntax for doing just that.

00:20:44.436 --> 00:20:47.636 A:middle
Accessing properties is
accomplished using dot notation.

00:20:48.676 --> 00:20:51.406 A:middle
To access elements, you
use square brackets.

00:20:52.586 --> 00:20:57.046 A:middle
To call commands, you call them
as functions using parentheses.

00:20:57.906 --> 00:21:01.416 A:middle
And you can create new objects
by calling class constructors


00:21:01.616 --> 00:21:03.916 A:middle
as functions, again,
using parentheses.

00:21:04.866 --> 00:21:07.496 A:middle
So let's take a look at
getting and setting properties.

00:21:08.366 --> 00:21:12.336 A:middle
Let's say we're scripting
Safari, we create a reference

00:21:12.386 --> 00:21:16.236 A:middle
to the first document of
Safari, and now we can do things

00:21:16.266 --> 00:21:18.296 A:middle
like get the document's URL.

00:21:19.576 --> 00:21:21.006 A:middle
See the parentheses at the end?

00:21:21.616 --> 00:21:24.866 A:middle
We're calling this property
as a function because we want

00:21:24.866 --> 00:21:27.886 A:middle
to actually send the get
event to the application

00:21:27.916 --> 00:21:29.606 A:middle
and get the string value.

00:21:29.996 --> 00:21:32.176 A:middle
We don't simply want
to reference to the URL

00:21:32.176 --> 00:21:34.456 A:middle
of the document, we want
to call it as a function

00:21:34.546 --> 00:21:35.866 A:middle
and get that string value.

00:21:36.866 --> 00:21:38.976 A:middle
We can also set the
document's URL,

00:21:39.126 --> 00:21:42.636 A:middle
and this sends the set
event to the application

00:21:42.716 --> 00:21:43.916 A:middle
and actually sets the URL.

00:21:46.156 --> 00:21:48.536 A:middle
Let's say we want to get a
particular window in Safari.

00:21:49.756 --> 00:21:52.926 A:middle
Well, there are three ways to
access elements in JavaScript

00:21:52.926 --> 00:22:00.316 A:middle
for Automation: by
index, by name and by ID.

00:22:01.426 --> 00:22:03.676 A:middle
Each has benefits and
risks associated with it

00:22:03.676 --> 00:22:05.816 A:middle
and it's important you
understand the Object Model

00:22:05.816 --> 00:22:07.676 A:middle
of the application that
you're scripting to know

00:22:07.676 --> 00:22:11.476 A:middle
when it's best to use which.

00:22:11.656 --> 00:22:14.416 A:middle
So already with just these
basics we can do some pretty

00:22:14.416 --> 00:22:15.156 A:middle
amazing things.

00:22:15.876 --> 00:22:17.016 A:middle
Let's put it to use.

00:22:18.686 --> 00:22:21.406 A:middle
First, I'd like to just
open up Script Editor.

00:22:22.306 --> 00:22:25.416 A:middle
We've got a little JavaScript
here, just straight JavaScript.

00:22:26.126 --> 00:22:29.796 A:middle
Creating a string, some
text, and then I'm going

00:22:29.796 --> 00:22:32.136 A:middle
to use console.log,
just like I expect

00:22:32.136 --> 00:22:33.716 A:middle
in JavaScript, to log this text.

00:22:34.396 --> 00:22:37.136 A:middle
And when I log this,
it's going to show

00:22:37.136 --> 00:22:39.216 A:middle
up in the event log
on a lower panel.

00:22:39.216 --> 00:22:40.996 A:middle
So I'm going to open
the event log,

00:22:41.766 --> 00:22:43.826 A:middle
and if I run this script we see

00:22:43.826 --> 00:22:45.706 A:middle
"hello world" was logged
just like we wanted.

00:22:46.126 --> 00:22:46.656 A:middle
This is great.

00:22:46.656 --> 00:22:48.336 A:middle
This is the JavaScript
I'm used to.

00:22:48.996 --> 00:22:50.426 A:middle
It's doing exactly
what we wanted.

00:22:50.496 --> 00:22:52.416 A:middle
This is hugely useful
for debugging,

00:22:52.416 --> 00:22:54.306 A:middle
we can log throughout a
script to see what's going on.

00:22:55.046 --> 00:22:58.126 A:middle
But let's say I wanted to
write some text and I wanted it

00:22:58.126 --> 00:23:01.726 A:middle
to exist even after I quit
Script Editor, or perhaps I want

00:23:01.726 --> 00:23:05.056 A:middle
to style that text, change
its font or color and so on.

00:23:06.226 --> 00:23:07.416 A:middle
Now we can start interacting

00:23:07.416 --> 00:23:09.586 A:middle
with applications
to accomplish that.

00:23:11.936 --> 00:23:14.766 A:middle
So here we have a TextEdit
document named Log,

00:23:14.956 --> 00:23:15.826 A:middle
and I'm going to use this

00:23:15.826 --> 00:23:19.576 A:middle
across a couple demos
to write some text.

00:23:19.706 --> 00:23:21.986 A:middle
First, this is a simple script,

00:23:23.696 --> 00:23:27.336 A:middle
we access the TextEdit
application, we get a reference

00:23:27.456 --> 00:23:31.056 A:middle
to the Log document, then
we set the document's text

00:23:31.276 --> 00:23:33.656 A:middle
and we style its
font, size and color.

00:23:35.056 --> 00:23:37.616 A:middle
So before I run this I'm
going to open the Event Log

00:23:37.616 --> 00:23:40.026 A:middle
and we'll be able to see the
events that are being sent

00:23:40.026 --> 00:23:41.916 A:middle
to this application
to accomplish this.

00:23:43.016 --> 00:23:44.186 A:middle
So when I run this script,

00:23:45.016 --> 00:23:48.006 A:middle
we see "I love JavaScript" was
logged just like we wanted,

00:23:48.266 --> 00:23:51.826 A:middle
styled just liked we wanted, and
in the bottom here we see all

00:23:51.826 --> 00:23:54.286 A:middle
of the events that were sent
to accomplish this task.

00:23:54.926 --> 00:23:56.936 A:middle
So this is great, we have
some persistent text,

00:23:57.306 --> 00:23:59.056 A:middle
it's been beautified
just like we wanted.

00:23:59.526 --> 00:24:01.206 A:middle
But what if we want to
do this multiple times


00:24:01.206 --> 00:24:02.106 A:middle
from the same script?

00:24:03.016 --> 00:24:06.896 A:middle
Well, instead of repeating the
functionality again and again,

00:24:06.896 --> 00:24:09.376 A:middle
we're playing in JavaScript,
we can write a function.

00:24:10.326 --> 00:24:11.666 A:middle
And I've done just that.

00:24:12.406 --> 00:24:15.546 A:middle
Here we have a function that
accepts some text to log

00:24:15.546 --> 00:24:17.736 A:middle
and an optional formatting
parameter.

00:24:18.566 --> 00:24:23.626 A:middle
Then, just like before, we
access the TextEdit application,

00:24:23.966 --> 00:24:27.556 A:middle
we get a reference to the
log document, but now instead

00:24:27.556 --> 00:24:31.036 A:middle
of setting the document's entire
text, we're going to append

00:24:31.036 --> 00:24:32.496 A:middle
to the last paragraph.

00:24:33.006 --> 00:24:35.726 A:middle
Then we're going to style
based on formatting you pass in

00:24:36.176 --> 00:24:37.126 A:middle
or some default values.

00:24:37.126 --> 00:24:40.856 A:middle
Now that we have our log,
we call it three times

00:24:40.856 --> 00:24:44.716 A:middle
at the bottom here, passing in
parameters for formatting twice,

00:24:44.986 --> 00:24:47.036 A:middle
and the last time we
use default values.

00:24:47.796 --> 00:24:53.316 A:middle
So if I run this script, we see
that our text was logged just

00:24:53.316 --> 00:24:55.536 A:middle
like we wanted, styled
as we wanted.

00:24:55.536 --> 00:24:58.496 A:middle
And this is great, we're able
to log as many times as we want,

00:24:58.656 --> 00:25:01.286 A:middle
style any different way that
we choose, every single time.


00:25:01.976 --> 00:25:07.206 A:middle
So this is powerful stuff simply
by accessing an application,

00:25:07.206 --> 00:25:09.016 A:middle
an element, and a
couple properties,

00:25:09.526 --> 00:25:11.926 A:middle
right out of the box,
power at your fingertips,

00:25:12.256 --> 00:25:13.446 A:middle
and it's really easy
to approach.

00:25:13.446 --> 00:25:18.486 A:middle
Let's look at some other
ways that we might want

00:25:18.486 --> 00:25:19.806 A:middle
to interact with applications.

00:25:21.796 --> 00:25:24.376 A:middle
Let's say we're scripting Mail
and we want to access some

00:25:24.376 --> 00:25:25.646 A:middle
of the messages in our inbox,

00:25:26.086 --> 00:25:28.536 A:middle
but we don't want the entire
messages element array

00:25:28.536 --> 00:25:31.306 A:middle
of the inbox, that's a whole
lot of messages usually.

00:25:31.846 --> 00:25:36.086 A:middle
Let's say we want to get only
the messages whose subject

00:25:36.086 --> 00:25:36.876 A:middle
is JavaScript.

00:25:38.056 --> 00:25:39.756 A:middle
Using the special "whose" method

00:25:39.946 --> 00:25:42.086 A:middle
of element arrays
we can do just that.

00:25:42.206 --> 00:25:45.316 A:middle
By passing in a dictionary of
properties we'd like to match

00:25:45.316 --> 00:25:48.946 A:middle
on those elements we now receive
an array only containing the

00:25:48.946 --> 00:25:52.746 A:middle
elements that match.

00:25:53.346 --> 00:25:55.676 A:middle
Objects have certain commands
that they can respond to

00:25:56.616 --> 00:25:58.856 A:middle
and you can call those
commands as methods locally

00:25:58.986 --> 00:26:01.386 A:middle
that send the command
events to the application.


00:26:02.716 --> 00:26:04.436 A:middle
So again, let's say
we're scripting Mail,

00:26:04.996 --> 00:26:08.666 A:middle
we have a reference to the
first message of our inbox,

00:26:09.096 --> 00:26:10.676 A:middle
and we want to open it.

00:26:10.846 --> 00:26:13.606 A:middle
Well, we could tell
the message to open,

00:26:14.976 --> 00:26:17.876 A:middle
we could also tell Mail
to open the message.

00:26:18.256 --> 00:26:20.056 A:middle
And both of these are
entirely equivalent.

00:26:20.586 --> 00:26:24.416 A:middle
Some commands take
named parameters,

00:26:25.166 --> 00:26:27.476 A:middle
and so you accomplish this
by passing in a dictionary

00:26:27.476 --> 00:26:28.756 A:middle
of those named parameters.

00:26:29.296 --> 00:26:32.206 A:middle
Here, for example, we're
creating a reply to our message,

00:26:32.506 --> 00:26:33.856 A:middle
we're going to reply
to everybody

00:26:34.266 --> 00:26:35.686 A:middle
and we're not going
to open a window.

00:26:37.106 --> 00:26:41.076 A:middle
Now remember, you can always
use the dictionary viewer

00:26:41.076 --> 00:26:44.656 A:middle
in Script Editor to see
which named parameters go

00:26:44.656 --> 00:26:46.526 A:middle
with which commands, which
commands can be called

00:26:46.526 --> 00:26:47.856 A:middle
on which objects, and so on.

00:26:47.936 --> 00:26:49.866 A:middle
It's a phenomenal
tool and really useful

00:26:49.866 --> 00:26:52.216 A:middle
when you're building
more complex scripts.

00:26:54.476 --> 00:26:56.746 A:middle
Some commands take
files as parameters,

00:26:57.606 --> 00:27:00.116 A:middle
such as opening a
document using TextEdit.


00:27:01.016 --> 00:27:04.386 A:middle
So to accomplish this we've
introduced a path object

00:27:04.386 --> 00:27:07.176 A:middle
into the environment that
you construct with a string

00:27:07.176 --> 00:27:10.066 A:middle
that has a string with a file
path inside and now you can use

00:27:10.066 --> 00:27:13.636 A:middle
that path object anywhere that a
file is expected as a parameter.

00:27:14.996 --> 00:27:17.056 A:middle
So we could open our
document just like we wanted.

00:27:17.936 --> 00:27:20.546 A:middle
Be aware that if you
pass a string instead

00:27:20.546 --> 00:27:22.906 A:middle
of a path wherever
a file's expected,

00:27:22.906 --> 00:27:23.946 A:middle
you will receive an error.

00:27:24.106 --> 00:27:28.046 A:middle
So let's say we want to
create a document instead

00:27:28.046 --> 00:27:29.966 A:middle
of simply opening
one in TextEdit.

00:27:31.206 --> 00:27:33.556 A:middle
Well, we're scripting TextEdit,

00:27:34.176 --> 00:27:37.536 A:middle
we can call the document class
constructor as a function.

00:27:38.476 --> 00:27:42.616 A:middle
But now to actually create this
object inside the application,

00:27:42.706 --> 00:27:45.796 A:middle
bring it to life, we're
going to push the document

00:27:46.126 --> 00:27:47.786 A:middle
onto the documents
element array.

00:27:47.786 --> 00:27:51.106 A:middle
And that actually creates
it inside the application.

00:27:51.666 --> 00:27:53.066 A:middle
Then we can interact
with it just

00:27:53.066 --> 00:27:55.226 A:middle
like any other objects
inside the application.

00:27:55.576 --> 00:27:56.946 A:middle
We can set its text,
for example.

00:27:57.856 --> 00:28:01.736 A:middle
And optionally, when you
create objects, you can pass


00:28:01.736 --> 00:28:04.156 A:middle
in a dictionary of properties
you'd like to have set

00:28:04.216 --> 00:28:05.916 A:middle
on that object when
it's created.

00:28:06.206 --> 00:28:09.046 A:middle
Here we're creating a
document, passing in some text

00:28:09.046 --> 00:28:10.326 A:middle
when we instantiate it.

00:28:10.546 --> 00:28:12.896 A:middle
We push again on the
appropriate array,

00:28:12.896 --> 00:28:15.136 A:middle
and it's created
inside the application,

00:28:15.556 --> 00:28:18.486 A:middle
living and breathing, ready
for us to interact with.

00:28:18.846 --> 00:28:21.306 A:middle
So this is a wide
range of functionality,

00:28:21.376 --> 00:28:24.276 A:middle
inherently available in
applications, property access,

00:28:24.276 --> 00:28:27.096 A:middle
element access, calling
commands, creating objects.

00:28:27.786 --> 00:28:31.226 A:middle
But there are script
plug-ins, plug-ins for scripts

00:28:31.666 --> 00:28:34.336 A:middle
that allow you to extend the
functionality of an application.

00:28:35.026 --> 00:28:38.796 A:middle
And the OS has a set of
standard scripting additions

00:28:38.996 --> 00:28:39.536 A:middle
that it ships.

00:28:40.086 --> 00:28:42.156 A:middle
These are available from
every scripting environment,

00:28:42.976 --> 00:28:44.606 A:middle
including JavaScript
for Automation.

00:28:45.576 --> 00:28:47.376 A:middle
So let's say that we're
scripting the current

00:28:47.376 --> 00:28:49.286 A:middle
application and we
want to be able

00:28:49.286 --> 00:28:50.306 A:middle
to use these standard additions.

00:28:51.146 --> 00:28:55.216 A:middle
To do so we're going to set the
includeStandardAdditions flag

00:28:55.216 --> 00:28:59.276 A:middle
to true, and then we can do
things like tell the application

00:28:59.276 --> 00:29:01.596 A:middle
to beep, which is hugely
useful for debugging,

00:29:02.216 --> 00:29:04.696 A:middle
tell the application
to speak some text,

00:29:05.206 --> 00:29:06.546 A:middle
which can extend
our functionality

00:29:06.546 --> 00:29:07.476 A:middle
to a wider audience.

00:29:07.666 --> 00:29:10.866 A:middle
We can also do things like
display alerts and dialogues,

00:29:11.126 --> 00:29:14.856 A:middle
which is great because now
we have user interaction

00:29:15.056 --> 00:29:17.036 A:middle
incorporated with
scripting applications.

00:29:18.866 --> 00:29:20.256 A:middle
So we've covered a
lot of different ways

00:29:20.256 --> 00:29:22.286 A:middle
that we can actually
script applications,

00:29:22.346 --> 00:29:23.876 A:middle
their Object Models, and so on.

00:29:24.726 --> 00:29:28.106 A:middle
Let's look at other uses of
JavaScript for Automation.

00:29:29.376 --> 00:29:32.826 A:middle
Remember earlier when we racked
the logging functionality

00:29:32.826 --> 00:29:35.256 A:middle
in a function so we could use it
multiple times from one script?

00:29:36.476 --> 00:29:37.816 A:middle
Well what if we wanted to log

00:29:37.816 --> 00:29:40.086 A:middle
from multiple scripts,
not just one?

00:29:41.106 --> 00:29:43.146 A:middle
This is the perfect
use of a library.

00:29:43.676 --> 00:29:47.426 A:middle
I've taken that log
function and I've saved it

00:29:47.426 --> 00:29:51.086 A:middle
in a script named Toolbox in
the Script Library's folder.

00:29:51.476 --> 00:29:54.396 A:middle
And now I can access this
library and its functions

00:29:54.396 --> 00:29:56.276 A:middle
from any other script
that I write.

00:29:56.906 --> 00:30:01.936 A:middle
To accomplish this I instantiate
a library object by name,

00:30:02.406 --> 00:30:06.946 A:middle
and file extension is optional,
and then I can those functions

00:30:07.266 --> 00:30:09.556 A:middle
as methods on that
library object.

00:30:09.916 --> 00:30:11.946 A:middle
So this code would log
just like we did before.

00:30:12.696 --> 00:30:15.576 A:middle
And the beautiful thing about
Libraries is they can be written

00:30:15.576 --> 00:30:17.696 A:middle
in JavaScript and Apple Script,

00:30:17.986 --> 00:30:19.836 A:middle
and used in JavaScript
for Automation.

00:30:21.556 --> 00:30:23.036 A:middle
So now let's take a look at how

00:30:23.036 --> 00:30:25.736 A:middle
to create applets using
JavaScript for Automation.

00:30:27.116 --> 00:30:29.966 A:middle
Applets are applications
saved by Script Editor,

00:30:30.116 --> 00:30:33.126 A:middle
and when you run an applet
the script that's saved inside

00:30:33.126 --> 00:30:34.226 A:middle
is run.

00:30:34.886 --> 00:30:37.346 A:middle
Applets have a certain
number of events

00:30:37.486 --> 00:30:38.766 A:middle
that you can create
handlers for,

00:30:39.066 --> 00:30:42.746 A:middle
such as when the applet is
run, when the applet is told

00:30:42.746 --> 00:30:44.826 A:middle
to open documents
or print documents.

00:30:45.506 --> 00:30:47.816 A:middle
There's a special idle
handler that allows you

00:30:47.816 --> 00:30:49.136 A:middle
to perform periodic tasks.

00:30:49.986 --> 00:30:53.566 A:middle
And you can also create handlers
for when an applet is reopened,

00:30:53.916 --> 00:30:54.896 A:middle
or when an applet is quit.

00:30:55.866 --> 00:30:58.946 A:middle
And just like Libraries, you can
have any other functions inside

00:30:58.946 --> 00:31:00.646 A:middle
your applet and those
can be called.

00:31:00.646 --> 00:31:04.826 A:middle
So let's take a look at an
example of a basic applet

00:31:05.246 --> 00:31:07.176 A:middle
that uses a Script Library.

00:31:07.686 --> 00:31:13.556 A:middle
Here we have our log document
like before, and let's look

00:31:13.556 --> 00:31:16.006 A:middle
at the script inside
of this applet here.

00:31:16.616 --> 00:31:21.256 A:middle
At the top we instantiate
our Toolbox Library,

00:31:21.796 --> 00:31:25.466 A:middle
then in our run handler
we log Run in green.

00:31:26.256 --> 00:31:28.536 A:middle
In our idle handler,
we log Idle in orange.

00:31:28.946 --> 00:31:31.266 A:middle
And in quit handler,
we log Quit in red.

00:31:32.236 --> 00:31:36.526 A:middle
So if I double click this
applet to run it we see that Run

00:31:36.526 --> 00:31:40.306 A:middle
and Idle were logged just
like we wanted, and if I go

00:31:40.306 --> 00:31:42.916 A:middle
and quit the applet, we see

00:31:42.916 --> 00:31:45.256 A:middle
that Quit was also
logged, which is great.

00:31:45.776 --> 00:31:47.046 A:middle
This is exactly what we wanted.

00:31:47.196 --> 00:31:50.366 A:middle
And this is a very basic example
of using a couple handlers

00:31:50.366 --> 00:31:51.976 A:middle
and an applet and
using a Library.

00:31:52.166 --> 00:31:53.956 A:middle
But imagine the possibilities
here.

00:31:54.286 --> 00:31:56.766 A:middle
This is double-clickable
JavaScript sitting

00:31:56.766 --> 00:31:58.736 A:middle
on my desktop, ready to interact

00:31:58.736 --> 00:32:00.426 A:middle
with all the scriptable
applications,

00:32:00.906 --> 00:32:02.706 A:middle
Script Libraries and more.

00:32:04.066 --> 00:32:07.526 A:middle
Speaking of more, we've looked
at scripting the Object Model

00:32:07.526 --> 00:32:10.186 A:middle
of an application
extensively, but what if we want

00:32:10.186 --> 00:32:12.256 A:middle
to script the user
interface of an application?

00:32:12.766 --> 00:32:17.406 A:middle
This is accomplished
by using accessibility,

00:32:18.076 --> 00:32:21.426 A:middle
which allows applications
on your Mac to interact

00:32:21.426 --> 00:32:23.626 A:middle
with your Mac on your behalf.

00:32:23.916 --> 00:32:26.726 A:middle
System Events uses
the accessibility APIs

00:32:26.726 --> 00:32:29.156 A:middle
to expose the user
interface of an application.

00:32:29.266 --> 00:32:31.176 A:middle
And in JavaScript
for Automation,

00:32:31.386 --> 00:32:35.006 A:middle
you use the System Events
application to access the pieces

00:32:35.006 --> 00:32:36.616 A:middle
and parts of a user interface.

00:32:36.956 --> 00:32:40.086 A:middle
So let's look at an example.

00:32:40.396 --> 00:32:43.326 A:middle
First, we're going to access
the System Events application.

00:32:44.156 --> 00:32:47.506 A:middle
Then we're going to
access the Notes process

00:32:47.776 --> 00:32:51.196 A:middle
of the System Events processes
elements array, and we're going

00:32:51.196 --> 00:32:53.136 A:middle
to set it to a variable,
notesUI.

00:32:54.146 --> 00:32:56.856 A:middle
Now we can do things
like close a window,

00:32:57.186 --> 00:32:59.726 A:middle
by clicking the first
button of the first window

00:32:59.726 --> 00:33:00.646 A:middle
of Notes user interface.

00:33:00.646 --> 00:33:04.236 A:middle
Let's say we want to send some
keystrokes to this application.

00:33:04.616 --> 00:33:06.606 A:middle
Well to do so, we're going

00:33:06.606 --> 00:33:10.336 A:middle
to access the Notes application
itself and activate it,

00:33:10.336 --> 00:33:11.596 A:middle
bringing it to the front,

00:33:12.006 --> 00:33:16.576 A:middle
and then we could call the
SystemEvents.keystroke command,

00:33:17.026 --> 00:33:19.396 A:middle
passing in 'm', using
'command down'

00:33:19.656 --> 00:33:21.806 A:middle
to simulate a minimize event.

00:33:22.716 --> 00:33:25.826 A:middle
To use accessibility
it must be enabled

00:33:25.826 --> 00:33:28.086 A:middle
in the Privacy preferences,
for applications

00:33:28.086 --> 00:33:29.946 A:middle
like Script Editor,
and so on, to use it.

00:33:29.946 --> 00:33:32.296 A:middle
And the first time you try
to use it, accessibility,

00:33:32.296 --> 00:33:34.926 A:middle
you will be prompted
to enable it.

00:33:35.386 --> 00:33:37.066 A:middle
Okay, so we've looked
at another way

00:33:37.066 --> 00:33:39.216 A:middle
to script an application,
its user interface.

00:33:39.216 --> 00:33:42.686 A:middle
We've looked at scripting Object
Models, Libraries, and Applets.

00:33:43.346 --> 00:33:46.076 A:middle
Now let's look at a more
advanced use of JavaScript

00:33:46.076 --> 00:33:51.376 A:middle
for Automation using system
APIs, which provide access

00:33:51.496 --> 00:33:54.796 A:middle
to really powerful and important
things like the file system

00:33:55.006 --> 00:33:57.816 A:middle
and Cocoa app development
in JavaScript.

00:33:59.896 --> 00:34:02.886 A:middle
We introduced two objects
into the environment

00:34:03.376 --> 00:34:05.946 A:middle
that are your means for
interacting with system APIs.

00:34:06.726 --> 00:34:08.216 A:middle
ObjC and $.

00:34:08.946 --> 00:34:10.835 A:middle
And for those coming from
a browser environment,

00:34:10.906 --> 00:34:12.946 A:middle
$ may mean something
very special to you,

00:34:13.335 --> 00:34:15.576 A:middle
but in our environment
it's a very different $.

00:34:16.216 --> 00:34:22.085 A:middle
ObjC can be used to do things
like bridging JavaScript values

00:34:22.246 --> 00:34:26.476 A:middle
into Objective-C, bridging
Objective-C objects

00:34:26.536 --> 00:34:30.206 A:middle
into JavaScript, and
importing frameworks

00:34:30.206 --> 00:34:31.196 A:middle
that you'd like to use.

00:34:32.666 --> 00:34:35.585 A:middle
So once you've imported a
framework you can access its

00:34:35.585 --> 00:34:39.196 A:middle
classes and functions and
so on using the $ object,

00:34:39.866 --> 00:34:44.076 A:middle
and you can also call $ as
a function, as a shorthand

00:34:44.076 --> 00:34:46.815 A:middle
for bridging JavaScript
values into Objective-C.

00:34:47.906 --> 00:34:51.246 A:middle
So now let's talk about
calling methods on objects.

00:34:52.206 --> 00:34:55.416 A:middle
Well, to begin let's look
at some Objective-C code.

00:34:56.286 --> 00:34:58.896 A:middle
It's quite simple, we're
going to create an NSString

00:34:58.896 --> 00:35:01.096 A:middle
and then we're going to
write that string to a file.

00:35:01.626 --> 00:35:04.946 A:middle
This is the equivalent
JavaScript

00:35:04.946 --> 00:35:06.736 A:middle
for Automation code
to accomplish this.

00:35:06.906 --> 00:35:08.926 A:middle
And there are a couple key
things to focus on here.

00:35:09.866 --> 00:35:13.586 A:middle
First, the Foundation
Framework is available to you

00:35:13.586 --> 00:35:15.916 A:middle
out of the box when you're
using JavaScript for Automation.

00:35:16.356 --> 00:35:18.716 A:middle
So we don't need to
import Foundation.

00:35:19.966 --> 00:35:24.196 A:middle
Then, we use the $ object to
access the NSString class,

00:35:24.946 --> 00:35:28.186 A:middle
we call alloc, and because
it takes no parameters,

00:35:28.186 --> 00:35:29.466 A:middle
we don't need parentheses.

00:35:29.656 --> 00:35:31.236 A:middle
We do not use parentheses here.

00:35:31.986 --> 00:35:34.846 A:middle
Then, we call
initWithUTF8String,

00:35:35.296 --> 00:35:37.856 A:middle
and we're going to be passing
in a parameter, so we call it

00:35:37.856 --> 00:35:39.426 A:middle
as a function and
pass in our parameter.

00:35:40.826 --> 00:35:44.876 A:middle
Now, the method to write to a
file takes multiple parameters,

00:35:45.326 --> 00:35:47.266 A:middle
so we're going to
convert the selector

00:35:47.526 --> 00:35:50.526 A:middle
to a JavaScript method
name, that can catenating

00:35:50.526 --> 00:35:53.476 A:middle
and camelCasing the pieces
together, and then we call it

00:35:53.476 --> 00:35:56.066 A:middle
as a function, passing in the
parameters in the right order.

00:35:56.566 --> 00:35:59.996 A:middle
So now that we've seen
how to write to a file,

00:36:00.916 --> 00:36:02.036 A:middle
let's actually see it in use.

00:36:03.566 --> 00:36:05.206 A:middle
This is a little script.

00:36:05.306 --> 00:36:08.476 A:middle
At the top we create an
NSString with some text we'd

00:36:08.476 --> 00:36:09.466 A:middle
like to write to a file.

00:36:10.366 --> 00:36:12.526 A:middle
Then we create an
NSString with a file path,

00:36:12.526 --> 00:36:15.826 A:middle
and we call this
stringByExpandingTildeInPath

00:36:16.126 --> 00:36:18.046 A:middle
method on it to get
the full path.

00:36:18.726 --> 00:36:21.306 A:middle
And then we write the
string to that file.

00:36:21.306 --> 00:36:23.186 A:middle
And when we write this,

00:36:23.666 --> 00:36:25.696 A:middle
it's going to appear
in this folder here.

00:36:26.766 --> 00:36:30.656 A:middle
So if I run this script,
our file was created,

00:36:30.656 --> 00:36:33.296 A:middle
our text was written
just like we wanted.

00:36:33.626 --> 00:36:34.406 A:middle
This is phenomenal.

00:36:35.666 --> 00:36:39.936 A:middle
And this is a simple example,
but you can imagine the power

00:36:39.936 --> 00:36:42.916 A:middle
and utility that the system
APIs bring to the JavaScript

00:36:42.916 --> 00:36:44.116 A:middle
for Automation environment.

00:36:46.056 --> 00:36:51.856 A:middle
Let's look at other ways that we
can interact with these API's.

00:36:51.856 --> 00:36:53.916 A:middle
Let's say we create
a new NSTask object.

00:36:54.606 --> 00:36:57.696 A:middle
Well, to access its properties
we're going to use dot notation.

00:36:58.516 --> 00:37:02.016 A:middle
So we can access the running
property, get its Boolean value

00:37:02.016 --> 00:37:02.976 A:middle
and react accordingly.

00:37:02.976 --> 00:37:07.626 A:middle
We could also set its
launchPath property, like so.

00:37:07.716 --> 00:37:09.456 A:middle
This will actually
set it on the object.

00:37:10.636 --> 00:37:13.366 A:middle
An interesting thing
of a JavaScript

00:37:13.366 --> 00:37:16.616 A:middle
for Automation bridge,
is the bridged nil.

00:37:17.556 --> 00:37:20.556 A:middle
So, nil in Objective-C
is somewhat similar

00:37:20.556 --> 00:37:22.606 A:middle
to the undefined in JavaScript,

00:37:22.936 --> 00:37:24.036 A:middle
but they're not exactly
the same,

00:37:24.036 --> 00:37:25.386 A:middle
and they differ in key ways.

00:37:26.766 --> 00:37:29.346 A:middle
In Objective-C it's absolutely
valid to call a method

00:37:29.346 --> 00:37:32.046 A:middle
on a nil object, and you'll
receive another nil object.

00:37:32.446 --> 00:37:36.426 A:middle
But in JavaScript, if you call
a method on an undefined object,

00:37:36.636 --> 00:37:37.626 A:middle
you will receive an error.

00:37:38.266 --> 00:37:41.506 A:middle
Therefore, we do not
bridge nil undefined,

00:37:41.506 --> 00:37:43.566 A:middle
we keep it as a bridged
nil object

00:37:43.706 --> 00:37:45.366 A:middle
that you can interact with.

00:37:46.876 --> 00:37:50.736 A:middle
So to create a bridged nil
object, we call the $ function

00:37:50.736 --> 00:37:52.026 A:middle
without any parameters.

00:37:52.946 --> 00:37:55.196 A:middle
Why might you want to
create a bridged nil object,

00:37:55.196 --> 00:37:55.796 A:middle
you're asking?

00:37:56.266 --> 00:37:59.216 A:middle
Well, this allows you
to accomplish things

00:37:59.216 --> 00:38:00.306 A:middle
like pass-by-reference.

00:38:01.136 --> 00:38:04.916 A:middle
So here we're creating a new
NSXMLDocument, and we're going

00:38:04.916 --> 00:38:08.146 A:middle
to pass our bridged nil
object, our error variable,

00:38:08.396 --> 00:38:10.046 A:middle
as the third and
final parameter.

00:38:10.046 --> 00:38:12.796 A:middle
And what'll happen
behind the scenes is

00:38:12.796 --> 00:38:14.816 A:middle
if an NSError object is created,

00:38:14.976 --> 00:38:17.416 A:middle
the bridged nil object
will be replaced by it,

00:38:17.746 --> 00:38:19.786 A:middle
and now our error
variable will point

00:38:19.786 --> 00:38:21.116 A:middle
at that and we can use that.

00:38:21.676 --> 00:38:24.336 A:middle
So once we've created our
document, we can check

00:38:24.536 --> 00:38:27.406 A:middle
if it's nil by calling
the isNil method on it,

00:38:27.776 --> 00:38:31.356 A:middle
and if it is nil we could,
for example, log the user info

00:38:31.406 --> 00:38:34.046 A:middle
from the now populated
error object.

00:38:36.756 --> 00:38:40.376 A:middle
Another exciting thing that
you can do using system APIs is

00:38:40.376 --> 00:38:41.746 A:middle
subclassing objects.

00:38:42.356 --> 00:38:45.946 A:middle
So to accomplish this, you call
the registerSubclass method

00:38:46.066 --> 00:38:50.116 A:middle
on the ObjC object, you pass
in a name of your Subclass,

00:38:50.936 --> 00:38:54.716 A:middle
its superclass, although this
is optional, and will default

00:38:54.716 --> 00:39:00.066 A:middle
to NSObject, any protocols
that your class made here, too.

00:39:01.366 --> 00:39:04.526 A:middle
Properties are defined
as an object

00:39:04.996 --> 00:39:07.226 A:middle
where the keys are the
names of the property

00:39:07.226 --> 00:39:09.576 A:middle
and the values are the
type of the property.

00:39:10.196 --> 00:39:13.126 A:middle
And methods are, again,

00:39:13.126 --> 00:39:15.706 A:middle
an object where the
keys are the selector

00:39:15.706 --> 00:39:18.576 A:middle
and the value is an
object detailing the types

00:39:18.576 --> 00:39:20.546 A:middle
of the method and
its implementation.

00:39:21.366 --> 00:39:24.676 A:middle
Now if you're defining a
function or a method, excuse me,

00:39:24.936 --> 00:39:27.666 A:middle
that's declared in a
protocol or on a superclass,

00:39:27.846 --> 00:39:30.936 A:middle
the types are optional, but for
demonstration purposes we'll

00:39:30.936 --> 00:39:31.536 A:middle
show them here.

00:39:32.676 --> 00:39:33.846 A:middle
So now let's put this to use.

00:39:34.476 --> 00:39:36.146 A:middle
Let's see using a subclass

00:39:36.346 --> 00:39:40.446 A:middle
and creating something
using system APIs.

00:39:40.656 --> 00:39:44.016 A:middle
So here I have an applet, and
this is the script inside,

00:39:44.486 --> 00:39:47.596 A:middle
and this produces a
Cocoa application,

00:39:47.596 --> 00:39:51.006 A:middle
a temperature converter, nice
little guy for us to use.

00:39:51.356 --> 00:39:52.886 A:middle
And there are two
things I'd like to point

00:39:52.886 --> 00:39:54.356 A:middle
out before we actually run this.

00:39:54.746 --> 00:39:57.486 A:middle
You'll see at the top
that we import Cocoa.

00:39:57.726 --> 00:40:00.816 A:middle
Now this allows us to access
things like NSWindow, and so on.

00:40:01.776 --> 00:40:03.736 A:middle
We create our windows
and our inputs,

00:40:04.306 --> 00:40:06.676 A:middle
and then we register
our subclass,

00:40:07.496 --> 00:40:09.906 A:middle
named TemperatureConverter,
that has two methods,

00:40:10.086 --> 00:40:12.046 A:middle
to convert from Celsius
to Fahrenheit,

00:40:12.196 --> 00:40:13.636 A:middle
and from Fahrenheit to Celsius.

00:40:14.356 --> 00:40:17.676 A:middle
And you can see that all of the
logic inside of these methods,

00:40:17.676 --> 00:40:20.406 A:middle
all of the math is
in JavaScript.

00:40:20.956 --> 00:40:24.406 A:middle
Then we create a new
TemperatureConverter object,

00:40:24.846 --> 00:40:27.666 A:middle
hook it up to our inputs, and
bring the window to the front.

00:40:28.526 --> 00:40:29.436 A:middle
So let's run this.

00:40:30.526 --> 00:40:33.866 A:middle
Close this here, and if I double
click this Applet to run it,

00:40:35.596 --> 00:40:40.106 A:middle
we have a nice little Cocoa
application written entirely

00:40:40.106 --> 00:40:40.846 A:middle
in JavaScript.

00:40:41.516 --> 00:40:43.546 A:middle
[ Applause ]

00:40:44.046 --> 00:40:45.246 A:middle
Of course, it does
what we promise.

00:40:45.656 --> 00:40:48.026 A:middle
We can convert our
Fahrenheit to Celsius,

00:40:48.026 --> 00:40:50.016 A:middle
our Celsius to Fahrenheit
and so on.

00:40:50.196 --> 00:40:52.046 A:middle
And this is a little example.

00:40:52.596 --> 00:40:53.426 A:middle
Look at this.

00:40:53.426 --> 00:40:56.076 A:middle
We can create a Cocoa
application in JavaScript,

00:40:56.186 --> 00:40:57.606 A:middle
imagine what you
can do from here.

00:40:57.936 --> 00:40:59.456 A:middle
With all this at
your fingertips,

00:40:59.616 --> 00:41:03.946 A:middle
there is power ready to be used.

00:41:03.946 --> 00:41:06.396 A:middle
And definitely make sure
to check out the JavaScript

00:41:06.396 --> 00:41:07.736 A:middle
for Automation for
release notes,

00:41:07.996 --> 00:41:10.596 A:middle
where you can see other great
things you can do using system

00:41:10.596 --> 00:41:14.036 A:middle
APIs, like binding C
functions into the environment,

00:41:15.276 --> 00:41:17.196 A:middle
another mechanism for
pass-by-reference,

00:41:18.516 --> 00:41:20.976 A:middle
and also passing functions
where blocks are expected.

00:41:24.596 --> 00:41:27.656 A:middle
All right, so we've done
a beautiful whirlwind tour

00:41:27.656 --> 00:41:30.396 A:middle
of all the ways we can use
JavaScript for Automation,

00:41:31.106 --> 00:41:34.046 A:middle
from application scripting,
libraries and applets,

00:41:34.046 --> 00:41:36.426 A:middle
UI scripting, using system APIs.

00:41:36.676 --> 00:41:38.346 A:middle
I'm sure each and every
one of you is just itching

00:41:38.346 --> 00:41:39.256 A:middle
to get your hands on this.

00:41:39.796 --> 00:41:40.896 A:middle
I completely understand.

00:41:41.216 --> 00:41:42.596 A:middle
But before you do let's talk

00:41:42.596 --> 00:41:44.996 A:middle
about where you can use
JavaScript for Automation.

00:41:45.566 --> 00:41:50.386 A:middle
So as all the demos have
shown, you can use JavaScript

00:41:50.386 --> 00:41:52.166 A:middle
for Automation in Script Editor.

00:41:52.786 --> 00:41:56.376 A:middle
You can save Applets and
Droplets from Script Editor,

00:41:56.376 --> 00:41:59.616 A:middle
as we saw, and run them.

00:41:59.996 --> 00:42:03.116 A:middle
As Sal mentioned, and you
saw in the presentation demo,

00:42:03.506 --> 00:42:05.906 A:middle
you can save scripts in the
system-wide Script Menu,

00:42:05.906 --> 00:42:07.526 A:middle
and this is phenomenal for
scripts that you're going

00:42:07.526 --> 00:42:10.936 A:middle
to use repeatedly,
again and again.

00:42:11.096 --> 00:42:15.286 A:middle
Automator, which allows
you to produce workflows,

00:42:15.606 --> 00:42:17.876 A:middle
automating applications
and processes on your Macs,

00:42:18.546 --> 00:42:22.066 A:middle
now has a run JavaScript
Automator action

00:42:22.486 --> 00:42:24.966 A:middle
that lets you incorporate
JavaScript for Automation

00:42:25.236 --> 00:42:27.826 A:middle
into your workflows,
and once you've done

00:42:27.876 --> 00:42:33.116 A:middle
so you can save those workflows
as services that can be used

00:42:33.116 --> 00:42:35.326 A:middle
from any application
and across your system.

00:42:35.876 --> 00:42:40.216 A:middle
And finally, you can use
JavaScript for Automation

00:42:40.216 --> 00:42:43.806 A:middle
in Terminal using the
osascript command line tool.

00:42:43.806 --> 00:42:46.506 A:middle
And this is great, you
can incorporate JavaScript

00:42:46.506 --> 00:42:48.226 A:middle
for Automation into
a Bash script.

00:42:48.546 --> 00:42:50.886 A:middle
And for example, display
an alert when you're

00:42:50.886 --> 00:42:53.116 A:middle
about to finish a
long-running background process.

00:42:53.856 --> 00:42:56.426 A:middle
So we've seen some of the places
where you can use JavaScript

00:42:56.426 --> 00:43:01.616 A:middle
for Automation already,
now let's look at the rest.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:01.746 --> 00:43:05.376 A:middle
Let me set the scene, I
work as a photographer

00:43:05.376 --> 00:43:08.826 A:middle
in a travel magazine and I
take pictures for our cover.

00:43:09.226 --> 00:43:11.616 A:middle
And every week I have to
send those cover photos

00:43:11.616 --> 00:43:12.736 A:middle
to the same person

00:43:13.276 --> 00:43:15.936 A:middle
to be approved before I
can submit them the print.

00:43:16.956 --> 00:43:20.566 A:middle
Every week I sent the same
email message to the same person

00:43:20.856 --> 00:43:23.126 A:middle
and all I'm changing
are the pictures.

00:43:23.956 --> 00:43:28.726 A:middle
So, I whipped up a little
droplet here using the

00:43:29.676 --> 00:43:34.166 A:middle
openDocuments handler that
accesses the mail application,

00:43:34.346 --> 00:43:35.876 A:middle
creates a new mail message

00:43:35.876 --> 00:43:37.946 A:middle
for us using some
pre-canned content.

00:43:38.686 --> 00:43:43.306 A:middle
It then uses the Contact
application to get my recipient

00:43:43.306 --> 00:43:46.396 A:middle
of the email message, gets their
name and their email address,

00:43:47.326 --> 00:43:49.896 A:middle
puts it on the message, and
then for each of the pictures

00:43:49.896 --> 00:43:52.066 A:middle
that we've dropped on this
droplet we're going to add them

00:43:52.066 --> 00:43:55.146 A:middle
as attachments to the message,
activate mail and have it ready

00:43:55.146 --> 00:43:58.336 A:middle
to send whenever I'd like.

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.576 --> 00:44:00.966 A:middle
So, here are some of
the photos I took.

00:44:00.966 --> 00:44:03.766 A:middle
I happen to know the last
three are the most beautiful,

00:44:03.766 --> 00:44:07.836 A:middle
so I'm going to drop those
right here onto this droplet.

00:44:08.216 --> 00:44:11.726 A:middle
Our mail message is
created, the content's there,

00:44:11.726 --> 00:44:15.006 A:middle
our recipient's there and all
the pictures we wanted are ready

00:44:15.006 --> 00:44:15.846 A:middle
for us to go.

00:44:16.226 --> 00:44:22.706 A:middle
My workflow was cut from
100% down to 5, 10, 0%.

00:44:23.416 --> 00:44:24.516 A:middle
This made my life easier.

00:44:25.196 --> 00:44:27.576 A:middle
And while I have
this script open,

00:44:28.466 --> 00:44:30.486 A:middle
I'd like to mention
another problem that I have.

00:44:31.376 --> 00:44:34.036 A:middle
I read a lot of JavaScript for
Automation, as you might expect,

00:44:34.436 --> 00:44:36.676 A:middle
and I regularly have
Script Editor windows open,

00:44:36.916 --> 00:44:38.396 A:middle
multiples all at once.

00:44:38.906 --> 00:44:41.346 A:middle
Sometimes I'm running a
Library that I'm going to use

00:44:41.346 --> 00:44:43.216 A:middle
in another script
and I want to be able

00:44:43.216 --> 00:44:44.596 A:middle
to see everything
at the same time.

00:44:45.626 --> 00:44:49.086 A:middle
And so before I hopped on the
Automation train, I might've had

00:44:49.086 --> 00:44:52.306 A:middle
to drag these windows around
the screen, resize them,

00:44:52.306 --> 00:44:54.326 A:middle
make sure corners aren't
overlapping each other,

00:44:54.326 --> 00:44:55.466 A:middle
and so on and so forth.

00:44:56.516 --> 00:44:58.896 A:middle
But then I realized,
why don't I automate it?

WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.546 --> 00:45:01.826 A:middle
So I whipped up this script here

00:45:02.456 --> 00:45:04.516 A:middle
that accesses the Script
Editor application,

00:45:05.166 --> 00:45:08.636 A:middle
it gets all of the windows, and
then using the number of windows

00:45:08.636 --> 00:45:12.206 A:middle
and the size of the screen
it carefully, meticulously,

00:45:12.356 --> 00:45:15.106 A:middle
programmatically
tiles the windows

00:45:15.106 --> 00:45:17.276 A:middle
around the screen,
based on their size.

00:45:18.216 --> 00:45:21.416 A:middle
So if I run this from the
script menu, because I use it

00:45:21.416 --> 00:45:24.056 A:middle
so frequently, we see all

00:45:24.056 --> 00:45:26.566 A:middle
of my windows were tiled
exactly as I wanted.

00:45:26.866 --> 00:45:28.836 A:middle
I can see everything
all at the same time.

00:45:29.036 --> 00:45:31.536 A:middle
This is beautiful for
developing multiple scripts

00:45:31.536 --> 00:45:32.276 A:middle
at the same time.

00:45:33.326 --> 00:45:35.696 A:middle
So I used JavaScript
for Automation

00:45:35.996 --> 00:45:38.886 A:middle
to make writing JavaScript
for Automation even easier.

00:45:39.356 --> 00:45:42.606 A:middle
It's powerful, it's
flexible and it's everywhere.

00:45:44.516 --> 00:45:49.686 A:middle
[ Applause ]

00:45:50.186 --> 00:45:53.586 A:middle
Now, speaking of flexibility,
and power, and everywhere,

00:45:53.906 --> 00:45:57.796 A:middle
in fact, we've proven to
ourselves how easy it is

00:45:58.006 --> 00:46:00.666 A:middle
to extend popular Text
Editors for JavaScript,

00:46:00.926 --> 00:46:03.846 A:middle
like Sublime Text, and
TextMate, to extend

00:46:03.846 --> 00:46:06.586 A:middle
and to execute JavaScript
for Automation code

00:46:06.746 --> 00:46:08.526 A:middle
that we're writing in
those applications.

00:46:09.576 --> 00:46:12.716 A:middle
And to prove it to you how
easy it is to write JavaScript

00:46:12.716 --> 00:46:15.706 A:middle
for Automation anywhere
and run it, we've whipped

00:46:15.706 --> 00:46:17.876 A:middle
up this automated workflow

00:46:18.296 --> 00:46:22.476 A:middle
that uses the new Run
JavaScript action,

00:46:22.476 --> 00:46:26.726 A:middle
and what we do is we
access the content

00:46:26.946 --> 00:46:30.776 A:middle
of the front-most document,
we evaluate that as a script,

00:46:31.836 --> 00:46:35.866 A:middle
then we display the result
and we optionally copy it

00:46:35.866 --> 00:46:37.936 A:middle
to the clipboard if we'd like.

00:46:39.156 --> 00:46:42.266 A:middle
I've saved this as a service
and I've attached that service

00:46:42.266 --> 00:46:48.766 A:middle
to a hotkey, so now my work is
very, very slim and easy to do.

00:46:49.886 --> 00:46:52.416 A:middle
I would like you to notice
I'm in TextEdit right now

00:46:52.866 --> 00:46:53.736 A:middle
and I have JavaScript

00:46:53.736 --> 00:46:55.936 A:middle
for Automation code
written in a document.

00:46:56.796 --> 00:46:59.386 A:middle
So using that Automator
workflow as a service attached

00:46:59.386 --> 00:47:05.066 A:middle
to this hotkey, I can
run this, code executing

00:47:05.226 --> 00:47:08.236 A:middle
from the TextEdit IDE
that I love so much,

00:47:08.236 --> 00:47:10.536 A:middle
that I've created using
JavaScript for Automation.

00:47:11.296 --> 00:47:14.166 A:middle
We get our result, we
could copy to the clipboard

00:47:14.166 --> 00:47:15.466 A:middle
but not right now, thank you.

00:47:16.136 --> 00:47:18.566 A:middle
And so, that's amazing.

00:47:18.656 --> 00:47:20.966 A:middle
I just run JavaScript for
Automation from TextEdit,

00:47:20.966 --> 00:47:23.526 A:middle
and this is to show that
you can use JavaScript

00:47:23.526 --> 00:47:26.086 A:middle
for Automation how you'd
like, where you'd like.

00:47:26.086 --> 00:47:27.776 A:middle
It's extraordinarily extensible

00:47:27.776 --> 00:47:29.406 A:middle
and it's extraordinarily
flexible.

00:47:29.936 --> 00:47:36.386 A:middle
And as we mentioned before,
you can use JavaScript

00:47:36.386 --> 00:47:39.436 A:middle
for Automation from Terminal
using the osascript command

00:47:39.436 --> 00:47:39.856 A:middle
line tool.

00:47:41.116 --> 00:47:42.936 A:middle
So, let's look at an example.

00:47:42.936 --> 00:47:47.896 A:middle
We're going to be calling the
osascript command line tool

00:47:47.896 --> 00:47:48.796 A:middle
with a couple flags.

00:47:49.236 --> 00:47:51.016 A:middle
We're going to be using
the JavaScript language.

00:47:51.446 --> 00:47:54.826 A:middle
We want our result to print
a source, and then we pass

00:47:54.826 --> 00:47:55.986 A:middle
in some JavaScript to run.

00:47:57.076 --> 00:47:59.156 A:middle
This is what I talked
about before.

00:47:59.526 --> 00:48:01.726 A:middle
We can display an alert, so
imagine this could be a part

00:48:01.726 --> 00:48:04.916 A:middle
of a bash process at the
end that'll show us an alert

00:48:04.916 --> 00:48:06.336 A:middle
when our process
is about to finish.

00:48:07.256 --> 00:48:10.406 A:middle
So if I run this, our
alert was displayed just

00:48:10.406 --> 00:48:11.826 A:middle
like we wanted, which is great.

00:48:12.516 --> 00:48:16.246 A:middle
We get our result, we could
react accordingly if we wanted.

00:48:17.156 --> 00:48:19.326 A:middle
And another really
exciting new feature

00:48:19.326 --> 00:48:21.886 A:middle
of osascript is an
interactive mode.

00:48:22.856 --> 00:48:25.886 A:middle
So a variety of programming
languages, like Ruby and Python,

00:48:25.886 --> 00:48:27.626 A:middle
have interactive
modes that allow you

00:48:27.626 --> 00:48:30.286 A:middle
to interactively program
in those environments,

00:48:30.786 --> 00:48:33.076 A:middle
and now this is possible
from osascript.

00:48:33.756 --> 00:48:38.566 A:middle
So, to do so I'm going
to call osascript,

00:48:38.566 --> 00:48:42.696 A:middle
our language is JavaScript, and
I'm going to pass the -i flag

00:48:42.746 --> 00:48:44.266 A:middle
to say I'm going in
interactive mode.

00:48:44.266 --> 00:48:47.206 A:middle
Now to demo this
interactive mode,

00:48:47.206 --> 00:48:49.246 A:middle
I'm going to be interacting
with Safari.

00:48:50.266 --> 00:48:53.806 A:middle
So, I'm going to create
a variable and set it

00:48:53.806 --> 00:48:57.016 A:middle
to the Safari application, we
see that Safari was activated

00:48:57.046 --> 00:49:01.226 A:middle
for us, making it a
little better to see.

00:49:01.816 --> 00:49:03.546 A:middle
Then we can do things

00:49:03.546 --> 00:49:06.816 A:middle
like create a reference
to the first window.

00:49:07.136 --> 00:49:08.796 A:middle
Let's say we want to
get that window's name

00:49:09.926 --> 00:49:12.046 A:middle
and simply call the name
property as a function.

00:49:12.376 --> 00:49:14.116 A:middle
Favorites, like we
expect, that's great.

00:49:14.116 --> 00:49:17.516 A:middle
This is a lot of fun, but
let's spice it up a bit.

00:49:17.816 --> 00:49:20.086 A:middle
Let's create a new tab
and add that to the window

00:49:20.316 --> 00:49:22.166 A:middle
in real-time, interactively.

00:49:22.916 --> 00:49:25.346 A:middle
First, we'll create a new tab,

00:49:25.346 --> 00:49:28.716 A:middle
and we'll have the
URL be apple.com.

00:49:30.156 --> 00:49:33.686 A:middle
Then, to actually create this
in the application I'm going

00:49:33.686 --> 00:49:36.496 A:middle
to push it onto the
window's tabs element array.

00:49:38.186 --> 00:49:41.786 A:middle
And, before I do though, I know
that I want to bring the tab

00:49:41.786 --> 00:49:45.006 A:middle
to the front when I do this,
and I can't quite remember,

00:49:45.356 --> 00:49:48.706 A:middle
I think it's the front
tab or there's a property

00:49:48.706 --> 00:49:50.706 A:middle
that I can summon a window
to bring it to the front.

00:49:51.456 --> 00:49:53.776 A:middle
So, we're interacting
with this live,

00:49:53.776 --> 00:49:55.906 A:middle
before I do this let's make
sure that I know what I'm doing.

00:49:55.906 --> 00:49:57.266 A:middle
So I'm going to bring
up Script Editor

00:49:57.266 --> 00:50:03.546 A:middle
and I'm going access the
Library window and let's see,


00:50:03.706 --> 00:50:05.726 A:middle
we'll access Safari
scripting Dictionary.

00:50:05.966 --> 00:50:09.046 A:middle
Great. Okay, we'll look
at the Safari suite.

00:50:09.256 --> 00:50:12.986 A:middle
Yes, window, thank you,
ah, the currentTab,

00:50:12.986 --> 00:50:14.576 A:middle
not the frontTab, excuse me.

00:50:14.836 --> 00:50:18.816 A:middle
So now that I have this property
I know exactly how to create,

00:50:19.196 --> 00:50:21.376 A:middle
how to set the tab
to the current tab,

00:50:21.526 --> 00:50:22.306 A:middle
bringing it to the front.

00:50:23.006 --> 00:50:25.446 A:middle
So if I push out of the
array and bring the tab

00:50:25.446 --> 00:50:29.856 A:middle
to the front we've just now
live, interactively added a tab

00:50:29.856 --> 00:50:32.796 A:middle
to this window, and had a whole
lot of fun in the process.

00:50:33.516 --> 00:50:36.616 A:middle
[ Applause ]

00:50:37.116 --> 00:50:40.046 A:middle
And beyond being a cool way
to interact with applications,

00:50:40.386 --> 00:50:43.116 A:middle
this is phenomenal for
exploring their scriptability,

00:50:43.236 --> 00:50:44.936 A:middle
for learning JavaScript
for Automation.

00:50:44.936 --> 00:50:48.756 A:middle
It's a great tool to have.

00:50:48.956 --> 00:50:49.786 A:middle
All right.

00:50:50.006 --> 00:50:53.816 A:middle
So we've covered what JavaScript
for Automation is, how it works,

00:50:54.356 --> 00:50:57.126 A:middle
how you can use it and
where you can use it.

00:50:57.916 --> 00:51:01.846 A:middle
To summarize, JavaScript
for Automation is built


00:51:01.846 --> 00:51:05.006 A:middle
on JavaScriptCore, a modern
JavaScript environment

00:51:05.006 --> 00:51:07.676 A:middle
and it's built on the Open
Scripting Architecture,

00:51:07.956 --> 00:51:12.816 A:middle
which has been part of the
Mac OS since before OS X.

00:51:13.426 --> 00:51:16.246 A:middle
JavaScript for Automation has
been integrated system-wide

00:51:16.246 --> 00:51:19.416 A:middle
at all layers, from high-level
application scripting,

00:51:19.606 --> 00:51:22.096 A:middle
to system services, to
use in the terminal,

00:51:22.326 --> 00:51:23.546 A:middle
and accessing system APIs.

00:51:24.546 --> 00:51:29.646 A:middle
And as you saw, JavaScript
for Automation is flexible,

00:51:30.066 --> 00:51:32.046 A:middle
it allows you to
accomplish tasks

00:51:32.166 --> 00:51:34.976 A:middle
and solve problems the
best way that you see fit.

00:51:36.456 --> 00:51:40.406 A:middle
So, our call to action
today is go out

00:51:40.406 --> 00:51:42.546 A:middle
and script the scriptable
applications on your Mac.

00:51:43.976 --> 00:51:46.736 A:middle
For app developers, make
your applications scriptable

00:51:46.736 --> 00:51:48.896 A:middle
so other people can script
them and do amazing things.

00:51:50.656 --> 00:51:52.116 A:middle
And make sure to tell others

00:51:52.116 --> 00:51:54.806 A:middle
to make their applications
scriptable if it isn't already.

00:51:55.496 --> 00:51:58.596 A:middle
We have a phenomenal ecosystem,
we're really excited for more

00:51:58.596 --> 00:52:00.536 A:middle
and more applications
to join it every day.

00:52:00.536 --> 00:52:05.826 A:middle
To check out documentation,
make sure to go

00:52:05.826 --> 00:52:07.986 A:middle
to developer.apple.com,
for the JavaScript

00:52:07.986 --> 00:52:10.846 A:middle
for Automation release notes,
as well as some sample code.

00:52:11.486 --> 00:52:14.436 A:middle
We are having a phenomenal time
with this great new feature,

00:52:14.436 --> 00:52:16.276 A:middle
we cannot wait for you
to get your hands on it.

00:52:16.736 --> 00:52:17.666 A:middle
Thank you very much.

00:52:18.516 --> 00:52:32.640 A:middle
[ Applause ]
