WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.696 --> 00:00:12.126 A:middle
&gt;&gt; Alright.

00:00:12.266 --> 00:00:14.306 A:middle
Good morning, still, right?

00:00:14.646 --> 00:00:17.306 A:middle
Sorry, I've been up
here a little while.

00:00:17.306 --> 00:00:19.056 A:middle
I forgot what time it is.

00:00:19.426 --> 00:00:21.276 A:middle
Welcome to Building
Interruptible

00:00:21.276 --> 00:00:22.596 A:middle
and Responsive Interactions.

00:00:23.416 --> 00:00:27.526 A:middle
So Andy and I want to
spend some time talking

00:00:27.526 --> 00:00:30.346 A:middle
about how you can build
interactions into your apps

00:00:30.686 --> 00:00:33.506 A:middle
that are really fluid and
make the user interaction

00:00:33.506 --> 00:00:36.546 A:middle
with the content in your app
really smooth and natural

00:00:37.076 --> 00:00:39.736 A:middle
and avoid any sort
of jarring changes

00:00:40.116 --> 00:00:42.376 A:middle
as you transition
between things.

00:00:42.746 --> 00:00:44.926 A:middle
And if you were just here
for the Scroll View session,

00:00:44.926 --> 00:00:46.026 A:middle
I'm going to start
out with something

00:00:46.026 --> 00:00:47.816 A:middle
that probably won't
be too surprising

00:00:47.816 --> 00:00:50.916 A:middle
and show you a scroll view, just
to give you an idea of the kind

00:00:50.916 --> 00:00:52.356 A:middle
of things that we're
talking about here.

00:00:53.226 --> 00:00:56.556 A:middle
So here I've got a nice bird
that's in a UIScrollView,

00:00:56.776 --> 00:00:58.666 A:middle
and I'm zooming and
scrolling and stuff.

00:00:58.666 --> 00:01:03.526 A:middle
The thing I want to draw your
attention to is the transitions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.666 --> 00:01:03.526 A:middle
The thing I want to draw your
attention to is the transitions

00:01:03.526 --> 00:01:06.886 A:middle
between the user dragging around
in a scroll view and letting go

00:01:06.886 --> 00:01:09.706 A:middle
and how animations start
and then grabbing again

00:01:09.706 --> 00:01:11.156 A:middle
as the animations
are in progress.

00:01:11.156 --> 00:01:14.256 A:middle
So I can zoom in on this
bird and I can drag it down

00:01:14.256 --> 00:01:15.956 A:middle
and it'll bounce
against the edge.

00:01:16.146 --> 00:01:18.156 A:middle
But if I keep grabbing
it, there's never a time

00:01:18.156 --> 00:01:19.596 A:middle
where I can't start scrolling.

00:01:19.896 --> 00:01:20.676 A:middle
It always works.

00:01:20.896 --> 00:01:24.816 A:middle
And I can scroll around and it's
all a very smooth transition.

00:01:24.816 --> 00:01:26.406 A:middle
And that's what we want to talk

00:01:26.406 --> 00:01:29.006 A:middle
about this morning
is transitions.

00:01:29.816 --> 00:01:31.276 A:middle
So what kinds of transitions?

00:01:31.786 --> 00:01:33.436 A:middle
Well, three transitions
in particular.

00:01:34.216 --> 00:01:38.016 A:middle
Number one: transitioning from
gestures into animations and how

00:01:38.016 --> 00:01:39.496 A:middle
to do that really,
really smoothly.

00:01:40.276 --> 00:01:43.856 A:middle
Number two: transitioning from
animations to other animations.

00:01:44.656 --> 00:01:46.436 A:middle
And I'm sure you've already
guessed what number three is:

00:01:46.836 --> 00:01:50.066 A:middle
transitioning from animations
back into gesture control.

00:01:50.666 --> 00:01:53.336 A:middle
So the key to making all

00:01:53.336 --> 00:01:56.106 A:middle
of these interactions really
smooth is just making sure

00:01:56.106 --> 00:01:58.756 A:middle
that the transitions
between these states are

00:01:58.756 --> 00:01:59.966 A:middle
as seamless as possible.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:01.066 --> 00:02:03.236 A:middle
And so let's start out by
talking about transitioning

00:02:03.236 --> 00:02:05.416 A:middle
from your gestures
into your animations.

00:02:06.466 --> 00:02:08.026 A:middle
So it's often the case
that you're doing something

00:02:08.026 --> 00:02:11.026 A:middle
like dragging content around
using a PanGestureRecognizer.

00:02:11.396 --> 00:02:13.496 A:middle
And you're maybe having it
track your finger directly

00:02:13.496 --> 00:02:16.706 A:middle
because that's a really great
way on a multi-touch device

00:02:16.966 --> 00:02:19.326 A:middle
to optimize gesture
interactions.

00:02:19.656 --> 00:02:21.666 A:middle
But then when you
lift, you might want

00:02:21.666 --> 00:02:22.716 A:middle
to start some animations,

00:02:22.716 --> 00:02:25.096 A:middle
something like what a scroll
view does, to do a deceleration

00:02:25.096 --> 00:02:26.516 A:middle
or something of that nature.

00:02:26.876 --> 00:02:28.056 A:middle
And you want that
transition point

00:02:28.056 --> 00:02:29.126 A:middle
to be as smooth as you can.

00:02:29.746 --> 00:02:32.306 A:middle
So let's take a look at two
possible ways to do this.

00:02:33.566 --> 00:02:35.736 A:middle
I've got this on loop, so I'm
just going to leave it up here

00:02:35.736 --> 00:02:37.746 A:middle
for like 15 minutes and
we can just stare at it

00:02:37.796 --> 00:02:39.876 A:middle
for the rest of the day.

00:02:41.086 --> 00:02:43.736 A:middle
The bottom one is looking a
lot smoother than that top one.

00:02:44.106 --> 00:02:46.676 A:middle
We've got two fingers that
are dragging these boxes.

00:02:47.286 --> 00:02:49.636 A:middle
This one comes off
when the finger lifts

00:02:49.636 --> 00:02:52.596 A:middle
with the same velocity and it
comes to rest nice and smoothly.

00:02:53.066 --> 00:02:57.156 A:middle
The top one, as soon as I lift
my finger it snaps to a stop

00:02:57.156 --> 00:03:00.256 A:middle
and then slowly starts up
and then comes to rest.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:57.156 --> 00:03:00.256 A:middle
and then slowly starts up
and then comes to rest.

00:03:00.806 --> 00:03:02.966 A:middle
So we want to figure out
a way that we can make all

00:03:02.966 --> 00:03:04.346 A:middle
of our transitions from gestures

00:03:04.346 --> 00:03:06.606 A:middle
to animations behave
like that bottom box.

00:03:07.106 --> 00:03:10.896 A:middle
And the first part to making
this happen is to figure

00:03:10.896 --> 00:03:13.166 A:middle
out what velocity we want
to start our animation at.

00:03:14.076 --> 00:03:16.646 A:middle
So number-one concern:
compute velocity.

00:03:17.756 --> 00:03:20.576 A:middle
Now, if you're using some of the
standard UI gesture recognizers,

00:03:20.576 --> 00:03:21.826 A:middle
this is really easy to do

00:03:21.826 --> 00:03:23.226 A:middle
because it's actually
already done for you.

00:03:23.226 --> 00:03:25.836 A:middle
So if you're using a
UIPanGestureRecognizer,

00:03:26.166 --> 00:03:27.846 A:middle
you've got this velocity
and view method

00:03:27.846 --> 00:03:29.486 A:middle
and you can just pass in a view

00:03:29.486 --> 00:03:31.886 A:middle
and you'll get back the velocity
the panning was happening at

00:03:32.336 --> 00:03:33.986 A:middle
and whatever coordinate
space you need

00:03:34.386 --> 00:03:35.556 A:middle
to start your animation.

00:03:36.446 --> 00:03:37.186 A:middle
So that's really easy.

00:03:37.646 --> 00:03:40.716 A:middle
If you're using a pinch or a
rotation gesture recognizer,

00:03:40.996 --> 00:03:44.296 A:middle
you get the exact same kind of
thing, just for whatever it is

00:03:44.296 --> 00:03:45.076 A:middle
that you're computing.

00:03:45.076 --> 00:03:46.626 A:middle
In the case of
PinchGestureRecognizer,

00:03:46.626 --> 00:03:48.276 A:middle
you're getting the
velocity of the scale.

00:03:48.746 --> 00:03:51.196 A:middle
And for the rotation you're
getting angular velocity

00:03:51.516 --> 00:03:52.266 A:middle
for that rotation.

00:03:53.186 --> 00:03:54.856 A:middle
So computing is really
easy if you're using one

00:03:54.856 --> 00:03:56.296 A:middle
of these standard
gesture recognizers.

00:03:56.696 --> 00:03:58.886 A:middle
If you're not, computing
velocity is still a pretty

00:03:58.886 --> 00:03:59.866 A:middle
straightforward thing to do.

00:03:59.866 --> 00:04:01.646 A:middle
Velocity is just
distance over time,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.866 --> 00:04:01.646 A:middle
Velocity is just
distance over time,

00:04:01.976 --> 00:04:04.236 A:middle
so if you just keep accumulating
your distance and your times

00:04:04.236 --> 00:04:06.096 A:middle
and keeping track of that,
you can compute the velocity

00:04:06.096 --> 00:04:07.246 A:middle
that you should start yourself

00:04:07.246 --> 00:04:08.946 A:middle
for whatever interaction
you're interested in.

00:04:09.496 --> 00:04:10.676 A:middle
So that part's pretty
straightforward.

00:04:10.676 --> 00:04:12.206 A:middle
The interesting part is,

00:04:12.206 --> 00:04:14.466 A:middle
how do we start our
animation at that velocity?

00:04:14.466 --> 00:04:18.696 A:middle
So let's take a look at the
standard UIKitAnimation method.

00:04:18.755 --> 00:04:22.186 A:middle
We've got animateWithDuration,
delay, options,

00:04:22.446 --> 00:04:24.656 A:middle
animations, completion.

00:04:25.456 --> 00:04:26.566 A:middle
So there's no velocity in there.

00:04:26.806 --> 00:04:30.086 A:middle
So that's not going to
be obviously an easy way

00:04:30.086 --> 00:04:30.856 A:middle
to go about doing this.

00:04:31.256 --> 00:04:34.376 A:middle
But happily last year with
iOS 7 we introduced a new more

00:04:34.376 --> 00:04:35.846 A:middle
expressive version
of this method

00:04:36.186 --> 00:04:38.156 A:middle
that had two new
parameters in it.

00:04:38.806 --> 00:04:41.866 A:middle
We've got usingSpringWithDamping
and initialSpringVelocity.

00:04:42.016 --> 00:04:43.636 A:middle
So that is looking a
little more promising.

00:04:45.106 --> 00:04:47.126 A:middle
So let's focus on that
initialSpringVelocity.

00:04:47.786 --> 00:04:50.056 A:middle
This is the thing that is going
to let us pass the velocity

00:04:50.056 --> 00:04:52.316 A:middle
out of our gesture recognizer
or wherever we computed it

00:04:52.516 --> 00:04:53.746 A:middle
and start an animation
that feels

00:04:53.746 --> 00:04:55.756 A:middle
like it's coming off the
finger really, really smoothly.

00:04:56.576 --> 00:04:58.646 A:middle
So how do we compute this
initialSpringVelocity?

00:04:58.706 --> 00:05:00.916 A:middle
Do we just take that velocity
that we had and pass it in?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.706 --> 00:05:00.916 A:middle
Do we just take that velocity
that we had and pass it in?

00:05:01.586 --> 00:05:03.126 A:middle
Obviously if the answer was yes,

00:05:03.126 --> 00:05:04.326 A:middle
I wouldn't really be
talking about this.

00:05:04.326 --> 00:05:06.036 A:middle
So we're probably going to
have to do something else.

00:05:06.646 --> 00:05:08.146 A:middle
So let's take a look
at an example,

00:05:08.146 --> 00:05:10.436 A:middle
assuming that we were panning
some object and we want

00:05:10.436 --> 00:05:13.166 A:middle
to start having it decelerate
just along the x-axis

00:05:13.166 --> 00:05:15.356 A:middle
for simplicity's sake,
and see what we do.

00:05:15.996 --> 00:05:16.846 A:middle
So we've got a box.

00:05:16.846 --> 00:05:17.726 A:middle
We were panning that around.

00:05:17.726 --> 00:05:20.586 A:middle
It's at point 50 right now, x
coordinate 50, and we're going

00:05:20.586 --> 00:05:22.356 A:middle
to have it animate over
to the right side there

00:05:22.356 --> 00:05:23.966 A:middle
to x coordinate 150.

00:05:24.496 --> 00:05:27.866 A:middle
Now, let's assume
that we calculated

00:05:27.866 --> 00:05:30.486 A:middle
that our horizontal velocity
was about 50 points per second,

00:05:30.566 --> 00:05:33.596 A:middle
so that's where we
start this animation at.

00:05:33.676 --> 00:05:35.686 A:middle
To figure out what
velocity we want to pass

00:05:35.686 --> 00:05:36.916 A:middle
in for the
initialSpringVelocity,

00:05:36.916 --> 00:05:39.776 A:middle
we actually have to compute
a normalized velocity.

00:05:40.296 --> 00:05:42.176 A:middle
The coordinate space that
this method is expecting

00:05:42.176 --> 00:05:45.826 A:middle
to get the velocity in is a
normalized coordinate space.

00:05:46.106 --> 00:05:48.956 A:middle
And we want to normalize it
based on the total distance

00:05:48.956 --> 00:05:51.526 A:middle
that this object is going to
travel during the animation.

00:05:52.266 --> 00:05:54.236 A:middle
So first we have to
calculate that distance.

00:05:54.236 --> 00:05:56.906 A:middle
So we've got our
destination value, that's 150.

00:05:57.316 --> 00:06:00.646 A:middle
We want to subtract from
that the starting point.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:57.316 --> 00:06:00.646 A:middle
We want to subtract from
that the starting point.

00:06:00.646 --> 00:06:01.906 A:middle
So we subtract off 50.

00:06:02.156 --> 00:06:04.336 A:middle
And we get a total distance
traveled of 100 points.

00:06:05.206 --> 00:06:07.466 A:middle
So then to figure out
the velocity to pass in,

00:06:07.466 --> 00:06:09.946 A:middle
we just normalize the
velocity we want by dividing

00:06:09.946 --> 00:06:11.086 A:middle
by that total distance.

00:06:11.406 --> 00:06:12.936 A:middle
So we take our 50
points per second,

00:06:13.326 --> 00:06:15.456 A:middle
divide by the total
distance traveled of 100,

00:06:15.656 --> 00:06:17.486 A:middle
and we get an initial
velocity of .5.

00:06:18.846 --> 00:06:21.016 A:middle
That .5 we just passed
in, then, to the method

00:06:21.016 --> 00:06:23.636 A:middle
that we just took a look at
as our initialSpringVelocity.

00:06:24.066 --> 00:06:27.286 A:middle
So UIViewAnimateWithDuration,
we can give it a time,

00:06:27.556 --> 00:06:30.316 A:middle
how long it's going to take,
delays, all those other things

00:06:30.316 --> 00:06:31.946 A:middle
that you normally
do, and just pass

00:06:31.946 --> 00:06:33.336 A:middle
in that additional
velocity parameter

00:06:33.336 --> 00:06:34.386 A:middle
and we'll get a really
nice effect.

00:06:35.136 --> 00:06:36.616 A:middle
So then if we take a look
at what that's going to end

00:06:36.616 --> 00:06:39.146 A:middle
up doing, we can see that
if we drag this box around,

00:06:39.506 --> 00:06:41.896 A:middle
we get it coming off our
finger really smoothly.

00:06:42.326 --> 00:06:44.556 A:middle
And, additionally, we
get a nice bounce there

00:06:44.556 --> 00:06:45.716 A:middle
at the end as it comes to rest.

00:06:46.206 --> 00:06:48.026 A:middle
That bounce was the
other parameter we saw

00:06:48.306 --> 00:06:51.026 A:middle
and you can tweak that to
get a different kind of feel,

00:06:51.026 --> 00:06:52.716 A:middle
whatever feels good
in your apps.

00:06:53.076 --> 00:06:56.226 A:middle
You can get nice springy
animations as they come to rest

00:06:56.596 --> 00:06:58.376 A:middle
with a smooth velocity
coming off your finger.

00:06:59.336 --> 00:07:03.056 A:middle
So that's what you can do with
standard UIView animations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.336 --> 00:07:03.056 A:middle
So that's what you can do with
standard UIView animations.

00:07:03.346 --> 00:07:04.516 A:middle
But there's other
options, as well.

00:07:04.916 --> 00:07:05.796 A:middle
So let's say maybe you wanted

00:07:05.796 --> 00:07:09.566 A:middle
to do something a little more
advanced and have more types

00:07:09.566 --> 00:07:11.596 A:middle
of interactions with
other views on screen

00:07:11.876 --> 00:07:13.586 A:middle
or more complicated
decelerations

00:07:13.586 --> 00:07:14.526 A:middle
than just a spring.

00:07:15.636 --> 00:07:17.536 A:middle
So also in iOS 7, we
introduced a class

00:07:17.536 --> 00:07:18.786 A:middle
called UIDynamicAnimator.

00:07:19.516 --> 00:07:22.196 A:middle
And this is another great way
to go about getting animations

00:07:22.196 --> 00:07:23.386 A:middle
that feel like they
come off your finger

00:07:23.386 --> 00:07:25.456 A:middle
at the exact velocity that
you were interacting with.

00:07:26.176 --> 00:07:29.266 A:middle
So let's look at how we'd set
that up in a UIViewController

00:07:29.376 --> 00:07:31.866 A:middle
in order to get some animations
going with the DynamicAnimator.

00:07:32.466 --> 00:07:34.666 A:middle
So first off we would
create a UIDynamicAnimator.

00:07:34.946 --> 00:07:36.436 A:middle
Now I'm doing this in
SWF, so there's a couple

00:07:36.436 --> 00:07:37.366 A:middle
of interesting things
we can talk

00:07:37.366 --> 00:07:38.426 A:middle
about while we go through this.

00:07:38.846 --> 00:07:41.366 A:middle
Here -- I'm assuming this is a
property on our view controller

00:07:41.366 --> 00:07:45.996 A:middle
and I've typed it as a
UIDynamicAnimator question mark.

00:07:45.996 --> 00:07:48.616 A:middle
And I actually just
made that an equal sign.

00:07:48.616 --> 00:07:49.626 A:middle
It should be a colon.

00:07:49.976 --> 00:07:52.266 A:middle
I literally changed this on
the stage before I got up here

00:07:52.266 --> 00:07:53.036 A:middle
because I thought it was wrong

00:07:53.036 --> 00:07:54.006 A:middle
and now I just realized
while I'm

00:07:54.006 --> 00:07:56.526 A:middle
up here I changed it
to the wrong thing.

00:07:56.806 --> 00:07:58.406 A:middle
So don't write code in Keynote.

00:07:58.406 --> 00:07:58.996 A:middle
It's a bad idea.

00:07:59.476 --> 00:08:02.936 A:middle
I'm trying to declare
a DynamicAnimator


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.476 --> 00:08:02.936 A:middle
I'm trying to declare
a DynamicAnimator

00:08:03.246 --> 00:08:06.056 A:middle
of type UIDynamicAnimator
optional,

00:08:06.136 --> 00:08:08.156 A:middle
an optional UIDynamicAnimator,
because we're going to go

00:08:08.156 --> 00:08:09.116 A:middle
and initialize this later.

00:08:09.396 --> 00:08:11.256 A:middle
The reason that this one
needs to be optional here is

00:08:12.026 --> 00:08:14.776 A:middle
because UIDynamicAnimator,
when you create one,

00:08:15.016 --> 00:08:18.206 A:middle
takes a UI view at
creation time.

00:08:18.286 --> 00:08:21.286 A:middle
And you don't have a UI
view at creation time

00:08:21.286 --> 00:08:23.346 A:middle
of UIViewController because
you want view controllers

00:08:23.346 --> 00:08:24.396 A:middle
to load their views lazily.

00:08:24.826 --> 00:08:26.286 A:middle
So we want to start
out with this being nil

00:08:26.286 --> 00:08:27.296 A:middle
and then initialize it later.

00:08:28.066 --> 00:08:30.226 A:middle
So, anyway, we've declared
our property for it.

00:08:30.226 --> 00:08:31.896 A:middle
We'll go and set it
up a little bit later.

00:08:32.456 --> 00:08:35.666 A:middle
Now we've got our
dynamicItemBehavior,

00:08:35.765 --> 00:08:37.876 A:middle
which is a class
that participates

00:08:37.876 --> 00:08:39.956 A:middle
in this UIDynamic system and
this is where we're going

00:08:39.956 --> 00:08:43.556 A:middle
to attach views that we want to
have dynamics associated with.

00:08:43.905 --> 00:08:45.496 A:middle
So we create a
UIDynamicItemBehavior

00:08:45.566 --> 00:08:48.006 A:middle
and we can initialize
this here as a constant

00:08:48.336 --> 00:08:50.306 A:middle
because we don't need
to provide any views

00:08:50.306 --> 00:08:51.186 A:middle
at the time we create it.

00:08:51.186 --> 00:08:53.006 A:middle
It lets us add or
remove views over time,

00:08:53.336 --> 00:08:54.306 A:middle
so we'll create it
ahead of time,

00:08:54.856 --> 00:08:56.176 A:middle
create our
UIDynamicItemBehavior.

00:08:56.976 --> 00:08:58.996 A:middle
And now we'll override the
viewDidLoad method because,

00:08:59.296 --> 00:09:01.606 A:middle
when a view controller goes to
load a view, it's going to load


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.296 --> 00:09:01.606 A:middle
when a view controller goes to
load a view, it's going to load

00:09:01.606 --> 00:09:04.496 A:middle
up all the view bits and then
there's a good place to go

00:09:04.556 --> 00:09:06.056 A:middle
and add additional
initialization

00:09:06.056 --> 00:09:08.946 A:middle
after the view's
loaded in viewDidLoad.

00:09:08.946 --> 00:09:11.176 A:middle
So we'll call super just to
make sure that it gets a chance

00:09:11.176 --> 00:09:12.466 A:middle
to do any work it
was going to do.

00:09:12.466 --> 00:09:15.306 A:middle
And then we can go and set up
the rest of our dynamic system.

00:09:15.726 --> 00:09:17.906 A:middle
So we have that optional
UIDynamicAnimator.

00:09:17.906 --> 00:09:19.376 A:middle
This is a great place
to initialize it

00:09:19.376 --> 00:09:20.656 A:middle
because now we know
we have a view.

00:09:20.956 --> 00:09:22.866 A:middle
So we can create our
UIDynamicAnimator.

00:09:23.416 --> 00:09:26.376 A:middle
We have our view now,
so we can pass it in.

00:09:26.606 --> 00:09:28.016 A:middle
We also want to set a
couple of properties

00:09:28.486 --> 00:09:31.176 A:middle
on the dynamic animator, just
so that as we set velocities

00:09:31.176 --> 00:09:32.726 A:middle
and get some deceleration
animations,

00:09:32.796 --> 00:09:34.236 A:middle
things will come
to rest smoothly.

00:09:34.476 --> 00:09:36.506 A:middle
So we're going to
set our resistance

00:09:36.506 --> 00:09:37.616 A:middle
and angular resistance

00:09:37.936 --> 00:09:39.886 A:middle
to a value I just
picked randomly of 3.

00:09:40.206 --> 00:09:42.146 A:middle
You can pick different values
and get different feels.

00:09:43.056 --> 00:09:45.616 A:middle
And then, finally, we're
going to add that behavior.

00:09:45.646 --> 00:09:48.216 A:middle
We created the
dynamicItemBehavior earlier.

00:09:48.406 --> 00:09:49.526 A:middle
We're going to associate it now

00:09:49.526 --> 00:09:51.036 A:middle
with the DynamicAnimator
now that we have it.

00:09:51.596 --> 00:09:53.686 A:middle
And so that's pretty
much all there is

00:09:53.686 --> 00:09:54.806 A:middle
for setting up the system.

00:09:55.136 --> 00:09:57.366 A:middle
So then we have to figure
out how to transfer velocity

00:09:57.366 --> 00:09:59.656 A:middle
into this dynamic
system from our gestures

00:09:59.656 --> 00:10:00.916 A:middle
because that's really
what this is all about.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.656 --> 00:10:00.916 A:middle
because that's really
what this is all about.

00:10:01.346 --> 00:10:03.876 A:middle
So let's take a look
at how we do that.

00:10:03.876 --> 00:10:06.876 A:middle
The first thing we want to do is
find out what view we're going

00:10:06.876 --> 00:10:10.476 A:middle
to be associating
this velocity in.

00:10:10.636 --> 00:10:12.626 A:middle
So we've got the
panGestureRecognizer.

00:10:12.626 --> 00:10:14.006 A:middle
Let's assume that it's
attached to some view

00:10:14.006 --> 00:10:14.996 A:middle
that we're dragging around.

00:10:15.536 --> 00:10:16.626 A:middle
We'll get the target view.

00:10:17.636 --> 00:10:20.226 A:middle
Now this is what
you would often do

00:10:20.226 --> 00:10:23.396 A:middle
in a UIGestureRecognizer target
action method, so I'm assuming

00:10:23.396 --> 00:10:24.176 A:middle
that we're doing that here.

00:10:24.566 --> 00:10:26.496 A:middle
So let's do the normal switch
statement that you would see

00:10:26.496 --> 00:10:28.906 A:middle
within a target action method
for a gesture recognizer.

00:10:28.906 --> 00:10:30.886 A:middle
So we'll get the
panGestureRecognizer state

00:10:30.886 --> 00:10:31.466 A:middle
and switch on that.

00:10:31.866 --> 00:10:33.796 A:middle
Now, right now we're just
talking about transitioning

00:10:33.866 --> 00:10:36.136 A:middle
from the gesture to an
animation, so we won't worry

00:10:36.136 --> 00:10:38.026 A:middle
about any state other
than ended because that's

00:10:38.026 --> 00:10:39.416 A:middle
when you perform
this transition.

00:10:39.416 --> 00:10:41.856 A:middle
So let's go and deal
with the ended case.

00:10:43.056 --> 00:10:45.456 A:middle
So now we have to get the
velocity that we want to move

00:10:45.716 --> 00:10:46.856 A:middle
into the dynamic system,

00:10:46.856 --> 00:10:48.506 A:middle
so we'll ask the
panGestureRecognizer

00:10:48.506 --> 00:10:49.286 A:middle
for the velocity.

00:10:49.816 --> 00:10:52.346 A:middle
And the view usually that you'll
be doing here, if we're dragging

00:10:52.346 --> 00:10:55.206 A:middle
around the view it was attached
to, we want to get the velocity

00:10:55.206 --> 00:10:56.546 A:middle
in that view's super view

00:10:56.746 --> 00:10:58.026 A:middle
because that's the
coordinate space

00:10:58.026 --> 00:11:00.436 A:middle
that the view's geometry
is going to be in.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.026 --> 00:11:00.436 A:middle
that the view's geometry
is going to be in.

00:11:01.106 --> 00:11:02.116 A:middle
So we'll get the velocity

00:11:02.116 --> 00:11:04.836 A:middle
in that target view's
superview's coordinate space.

00:11:05.426 --> 00:11:07.596 A:middle
And then we'll just ask
the dynamicItemBehavior

00:11:07.596 --> 00:11:09.216 A:middle
to add some linear velocity.

00:11:09.726 --> 00:11:12.316 A:middle
Adding linear velocity will
just increase the velocity

00:11:12.316 --> 00:11:13.846 A:middle
in the dynamic system
of the object

00:11:13.876 --> 00:11:16.176 A:middle
by whatever the current
velocity was

00:11:16.176 --> 00:11:17.616 A:middle
that we were dragging
it around by.

00:11:18.046 --> 00:11:19.636 A:middle
So we can add that
into the system

00:11:20.056 --> 00:11:22.226 A:middle
and then it'll smoothly
decelerate

00:11:22.226 --> 00:11:23.636 A:middle
from whatever the
gesture was doing.

00:11:24.076 --> 00:11:26.066 A:middle
So, again, now if we do look
at some boxes and view this,

00:11:26.376 --> 00:11:27.616 A:middle
we can see that as
we drag these things

00:11:27.616 --> 00:11:29.186 A:middle
around they decelerate smoothly.

00:11:29.546 --> 00:11:30.716 A:middle
But because this is dynamics,

00:11:30.716 --> 00:11:32.156 A:middle
they can also interact
with one another.

00:11:32.566 --> 00:11:33.656 A:middle
So as they collide,
they're going

00:11:33.656 --> 00:11:34.946 A:middle
to start doing other
interesting things.

00:11:35.336 --> 00:11:36.156 A:middle
So this is a great way

00:11:36.156 --> 00:11:39.926 A:middle
to get more advanced behaviors
while still preserving these

00:11:39.926 --> 00:11:40.936 A:middle
really smooth transitions.

00:11:42.096 --> 00:11:44.416 A:middle
So we've talked about two
ways to go about doing this.

00:11:44.746 --> 00:11:46.436 A:middle
We've got animateWithDuration.

00:11:46.946 --> 00:11:49.246 A:middle
Now, there's different reasons
why you might choose one

00:11:49.246 --> 00:11:52.316 A:middle
or the other, and there's no one
right answer for all situations.

00:11:52.696 --> 00:11:56.226 A:middle
animateWithDuration, one of the
nice properties of doing this is

00:11:56.226 --> 00:11:58.536 A:middle
that it creates server-side
animations.

00:11:58.856 --> 00:12:00.426 A:middle
Now, what that means
is that the animations


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.856 --> 00:12:00.426 A:middle
Now, what that means
is that the animations

00:12:00.426 --> 00:12:02.876 A:middle
that are created using those
spring velocities that we talked

00:12:02.876 --> 00:12:05.536 A:middle
about at the beginning, those
are actually going to execute

00:12:05.536 --> 00:12:08.586 A:middle
in another process out of the
context of your application.

00:12:09.126 --> 00:12:11.556 A:middle
So even if you end up doing
some work in your application

00:12:11.556 --> 00:12:13.506 A:middle
that maybe blocks your main
thread for a little while,

00:12:13.856 --> 00:12:16.226 A:middle
the other render server is
running at a higher priority.

00:12:16.226 --> 00:12:18.786 A:middle
So it's going to be optimized
to make sure that we try not

00:12:18.786 --> 00:12:20.496 A:middle
to drop frames on
that animation,

00:12:20.816 --> 00:12:22.566 A:middle
even if your app has a
lot of heavy work going

00:12:22.566 --> 00:12:23.366 A:middle
on in the main thread.

00:12:23.856 --> 00:12:26.546 A:middle
So it becomes easier to
maintain smooth animations

00:12:26.546 --> 00:12:29.296 A:middle
if you just offload it onto
the render server by using

00:12:29.296 --> 00:12:30.516 A:middle
that animateWithDuration method.

00:12:31.356 --> 00:12:32.876 A:middle
Now, of course, the
other option we talked

00:12:32.876 --> 00:12:35.226 A:middle
about is UIKitDynamics,
so UIDynamicAnimator.

00:12:35.986 --> 00:12:37.716 A:middle
Now, one of the big
benefits of this is

00:12:37.716 --> 00:12:40.166 A:middle
that you get even more
advanced interactions.

00:12:40.436 --> 00:12:42.306 A:middle
And as we'll see a little
bit later when we talk

00:12:42.306 --> 00:12:45.256 A:middle
about more transitions, some of
the transitions can be easier

00:12:45.256 --> 00:12:47.006 A:middle
when you're using
a UIDynamicAnimator

00:12:47.256 --> 00:12:49.356 A:middle
than when you're using the
server-side animations,

00:12:49.736 --> 00:12:51.896 A:middle
because with UIDynamicAnimator
everything is happening

00:12:51.896 --> 00:12:53.966 A:middle
in your process, in
your address space.

00:12:54.616 --> 00:12:57.286 A:middle
Now, the downside of that is
it means it is going to rely

00:12:57.286 --> 00:12:58.876 A:middle
on your main thread
turning often enough

00:12:58.876 --> 00:13:01.366 A:middle
that the DynamicAnimator can
update the dynamic system


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.876 --> 00:13:01.366 A:middle
that the DynamicAnimator can
update the dynamic system

00:13:01.636 --> 00:13:03.576 A:middle
and get everything
committed for the next frame.

00:13:04.076 --> 00:13:06.846 A:middle
So if your app happens to do
a bunch of work or, you know,

00:13:06.846 --> 00:13:08.316 A:middle
is taking more time
to get something done,

00:13:08.316 --> 00:13:10.526 A:middle
it's easier to drop frames
if you're not being careful.

00:13:11.076 --> 00:13:13.346 A:middle
So UIDynamicAnimator is a
very powerful way to do it.

00:13:13.346 --> 00:13:15.336 A:middle
You just have to be a little
bit more careful to make sure

00:13:15.336 --> 00:13:18.066 A:middle
that you're optimizing your app
to avoid dropping any frames.

00:13:19.396 --> 00:13:21.206 A:middle
Now, there are other options

00:13:21.206 --> 00:13:22.526 A:middle
that are a little
bit more advanced.

00:13:22.976 --> 00:13:24.556 A:middle
And, in fact, the thing

00:13:24.556 --> 00:13:27.456 A:middle
that UIDynamicAnimator is
built on is CADisplayLink.

00:13:27.846 --> 00:13:29.216 A:middle
Now CADisplayLink is a class

00:13:29.216 --> 00:13:31.276 A:middle
that calls you back
once every frame.

00:13:31.796 --> 00:13:33.746 A:middle
So a frame is going to get
rendered, you get called back

00:13:33.746 --> 00:13:36.126 A:middle
to go update your app in
whatever way you want.

00:13:36.786 --> 00:13:40.156 A:middle
Now, that will give you 60 Hertz
callbacks and so you can try

00:13:40.156 --> 00:13:42.146 A:middle
and update your animations
at 60 Hertz.

00:13:42.146 --> 00:13:43.826 A:middle
That's exactly how
DynamicAnimator does it.

00:13:44.186 --> 00:13:45.556 A:middle
So if you have some
really custom thing

00:13:45.556 --> 00:13:48.186 A:middle
that you can't accomplish with
one of these other technologies,

00:13:48.186 --> 00:13:49.906 A:middle
you could build your
own animations

00:13:50.266 --> 00:13:51.596 A:middle
to do things yourself.

00:13:51.866 --> 00:13:53.666 A:middle
Now, of course, this is an
even more advanced thing.

00:13:53.666 --> 00:13:55.276 A:middle
We're not going to go into
exactly how you would go

00:13:55.276 --> 00:13:57.446 A:middle
about writing arbitrary
animations.

00:13:57.446 --> 00:13:59.316 A:middle
If you have an idea of
something you might want to do,

00:13:59.706 --> 00:14:01.596 A:middle
you probably can go
build it yourself.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.706 --> 00:14:01.596 A:middle
you probably can go
build it yourself.

00:14:02.346 --> 00:14:03.116 A:middle
But some of you that are

00:14:03.116 --> 00:14:04.996 A:middle
out there may be thinking,
"Well, wait, hang on.

00:14:04.996 --> 00:14:05.896 A:middle
There's another option.

00:14:05.896 --> 00:14:07.896 A:middle
Why aren't we talking
about NSTimer?"

00:14:09.086 --> 00:14:12.316 A:middle
This was a common thing
before CADisplayLink existed.

00:14:12.316 --> 00:14:15.226 A:middle
You just set NSTimer, set
it callback at 60 Hertz,

00:14:15.606 --> 00:14:16.776 A:middle
and drive animations off that.

00:14:17.746 --> 00:14:19.606 A:middle
Well, to understand why we're
not going to talk about that

00:14:19.606 --> 00:14:21.406 A:middle
as a really viable
option, let's take a look

00:14:21.406 --> 00:14:24.906 A:middle
at a timeline showing what
happens over time for NSTimer,

00:14:25.046 --> 00:14:27.576 A:middle
CADisplayLink, and all
of the display frames

00:14:27.576 --> 00:14:28.426 A:middle
that are coming on screen.

00:14:28.926 --> 00:14:30.156 A:middle
So here I've got
some vertical bars.

00:14:30.156 --> 00:14:32.296 A:middle
Each one of those
represents a display frame.

00:14:33.266 --> 00:14:37.376 A:middle
Now let's take a look at
what CADisplayLink does

00:14:37.486 --> 00:14:38.786 A:middle
within each of those gaps.

00:14:39.136 --> 00:14:41.216 A:middle
So because we're rendering
at 60 Hertz on iOS,

00:14:41.736 --> 00:14:43.956 A:middle
each gap there represents
about 16 milliseconds.

00:14:43.956 --> 00:14:45.806 A:middle
It's a little bit more than
that, but that's roughly right.

00:14:46.756 --> 00:14:49.146 A:middle
So that's how much time you
have in between any two frames.

00:14:49.946 --> 00:14:51.356 A:middle
Now CADisplayLink, as I said,

00:14:51.356 --> 00:14:52.696 A:middle
is going to call you
back once per frame.

00:14:53.226 --> 00:14:55.246 A:middle
And the place where it calls
you back is going to try and be

00:14:55.426 --> 00:14:57.886 A:middle
as tight as possible to where
the frames are happening.

00:14:58.256 --> 00:14:59.756 A:middle
So you're going to
get these green dots;

00:14:59.756 --> 00:15:02.276 A:middle
that's callback times that
are associated roughly


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.756 --> 00:15:02.276 A:middle
that's callback times that
are associated roughly

00:15:02.276 --> 00:15:03.616 A:middle
with where the frames happen.

00:15:05.036 --> 00:15:06.266 A:middle
So what happens with NSTimer?

00:15:06.996 --> 00:15:08.946 A:middle
Well, it depends.

00:15:08.946 --> 00:15:11.186 A:middle
NSTimer, you might
get them there.

00:15:11.186 --> 00:15:12.826 A:middle
Maybe you'll get them
at the beginning.

00:15:13.236 --> 00:15:15.026 A:middle
Maybe you'll get them
closer to the end.

00:15:15.426 --> 00:15:16.696 A:middle
But let's say you get
them in the middle.

00:15:17.766 --> 00:15:19.966 A:middle
You actually aren't really sure
where you're going to get them

00:15:19.966 --> 00:15:21.846 A:middle
because when you get them
depends on when you happen

00:15:21.846 --> 00:15:22.996 A:middle
to set up the NSTimer.

00:15:23.376 --> 00:15:25.686 A:middle
NSTimer isn't synchronized
with the display in any way,

00:15:25.686 --> 00:15:27.916 A:middle
so when you get the
callbacks will depend exactly

00:15:27.916 --> 00:15:29.136 A:middle
on when you set up the timer.

00:15:29.316 --> 00:15:31.636 A:middle
If you set it up for
a 60 Hertz interval,

00:15:31.636 --> 00:15:34.966 A:middle
it'll be 16 milliseconds
from whenever you set it up,

00:15:35.476 --> 00:15:36.976 A:middle
depending on where in
the frame that was.

00:15:36.976 --> 00:15:37.766 A:middle
So it could be anywhere.

00:15:37.766 --> 00:15:38.386 A:middle
It's hard to know.

00:15:39.116 --> 00:15:40.056 A:middle
Now, why is that a problem?

00:15:40.906 --> 00:15:42.666 A:middle
Well, looking at how
much time we have now,

00:15:42.666 --> 00:15:45.426 A:middle
we had 16 milliseconds
for this whole frame.

00:15:46.086 --> 00:15:47.996 A:middle
With NSTimer there we've
got about 8 milliseconds

00:15:47.996 --> 00:15:50.556 A:middle
from the time that it got
called until the next frame,

00:15:50.716 --> 00:15:52.436 A:middle
assuming that it happened to
be set up right in the middle.

00:15:53.406 --> 00:15:55.676 A:middle
Now, even then, you might
not see why exactly that's

00:15:55.676 --> 00:15:56.246 A:middle
a problem.

00:15:56.246 --> 00:15:58.486 A:middle
I mean, so it's eight
milliseconds.

00:15:58.486 --> 00:15:59.886 A:middle
You can probably get
done in less than eight,

00:15:59.886 --> 00:16:01.926 A:middle
or if you can't, then alright,
you're always in the next frame.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.886 --> 00:16:01.926 A:middle
or if you can't, then alright,
you're always in the next frame.

00:16:02.496 --> 00:16:03.746 A:middle
Well, the trouble
comes in the places

00:16:03.746 --> 00:16:05.586 A:middle
where maybe you aren't
always either

00:16:05.586 --> 00:16:06.926 A:middle
in the current frame
or the next frame.

00:16:07.786 --> 00:16:10.356 A:middle
So let's say that it actually
takes you about 8 milliseconds

00:16:10.356 --> 00:16:12.666 A:middle
to set up your frame and get it
committed to the render server.

00:16:13.276 --> 00:16:15.486 A:middle
So if we look at our second
frame here out of these

00:16:15.486 --> 00:16:16.776 A:middle
that I have listed, let's say

00:16:16.776 --> 00:16:19.346 A:middle
that the first time we get it
done in eight milliseconds,

00:16:19.346 --> 00:16:21.836 A:middle
but that happens to
miss being rendered

00:16:21.836 --> 00:16:22.946 A:middle
to the screen for this frame.

00:16:22.946 --> 00:16:25.886 A:middle
So it goes over and
it'll come in, you know,

00:16:25.886 --> 00:16:27.356 A:middle
another 16 milliseconds later.

00:16:27.356 --> 00:16:28.506 A:middle
So we missed that frame.

00:16:28.506 --> 00:16:31.576 A:middle
Now the trouble is that
maybe the next time we happen

00:16:31.576 --> 00:16:33.936 A:middle
to get things done a little bit
faster and do make that frame.

00:16:34.836 --> 00:16:37.286 A:middle
What that's effectively going to
end up meaning is that the frame

00:16:37.286 --> 00:16:40.126 A:middle
where we missed will really
just never display to the user.

00:16:40.616 --> 00:16:42.016 A:middle
It'll be as if it
just disappeared.

00:16:42.016 --> 00:16:44.196 A:middle
And that's going to end up
looking like a dropped frame.

00:16:44.706 --> 00:16:46.896 A:middle
So we're rendering
within eight milliseconds.

00:16:46.896 --> 00:16:49.736 A:middle
It's only taking us eight, and
we have 16 to get things done,

00:16:49.736 --> 00:16:52.416 A:middle
so it seems like we should never
drop a frame because we're well

00:16:52.416 --> 00:16:53.536 A:middle
under the total frame time.

00:16:53.886 --> 00:16:54.986 A:middle
But yet we just dropped a frame

00:16:54.986 --> 00:16:56.106 A:middle
because we were right
on that border.

00:16:57.216 --> 00:17:00.016 A:middle
With CADisplayLink, if it was
taking us eight milliseconds


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.216 --> 00:17:00.016 A:middle
With CADisplayLink, if it was
taking us eight milliseconds

00:17:00.016 --> 00:17:02.246 A:middle
because we started close to
the beginning, we still have

00:17:02.246 --> 00:17:04.556 A:middle
that extra eight-millisecond
buffer time every time,

00:17:04.556 --> 00:17:06.165 A:middle
so there's no way we're
going to miss that frame.

00:17:07.526 --> 00:17:10.945 A:middle
Now, if you do take 16
milliseconds you might get back

00:17:10.945 --> 00:17:13.675 A:middle
into that same situation, but if
it's taking you 16 milliseconds

00:17:13.675 --> 00:17:15.576 A:middle
to prepare a frame, you're
basically never going

00:17:15.576 --> 00:17:16.636 A:middle
to hit 60 Hertz anyway.

00:17:17.006 --> 00:17:19.096 A:middle
So at that point you're back to,
you have to optimize your app.

00:17:19.656 --> 00:17:21.445 A:middle
But if you're finding that
you're optimizing things

00:17:21.445 --> 00:17:23.705 A:middle
and you're using an NSTimer and
you've got it as fast as you can

00:17:23.705 --> 00:17:25.886 A:middle
and you're still dropping
frames, it's probably

00:17:25.886 --> 00:17:27.326 A:middle
because you're using an NSTimer

00:17:27.326 --> 00:17:29.236 A:middle
and just hitting
this variability,

00:17:29.406 --> 00:17:31.196 A:middle
and you should switch to
using a CADisplayLink.

00:17:31.566 --> 00:17:33.386 A:middle
So NSTimer's never
really the right solution

00:17:33.386 --> 00:17:34.956 A:middle
for doing client-side
animations.

00:17:35.826 --> 00:17:38.386 A:middle
So that's the story
for transitioning

00:17:38.386 --> 00:17:39.516 A:middle
from a gesture to an animation.

00:17:39.726 --> 00:17:42.286 A:middle
To give you an idea of now how
to transition from animations

00:17:42.286 --> 00:17:44.846 A:middle
to other animations, Andy's
going to come up on stage

00:17:44.846 --> 00:17:45.976 A:middle
and talk a little
bit about that.

00:17:46.516 --> 00:17:51.196 A:middle
[ Applause ]

00:17:51.696 --> 00:17:52.336 A:middle
&gt;&gt; Thanks, Josh.

00:17:52.686 --> 00:17:54.666 A:middle
So you've got an animation going

00:17:55.316 --> 00:17:56.366 A:middle
and you want to change
directions.

00:17:56.366 --> 00:18:00.516 A:middle
Many of you have probably
seen this issue before.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.366 --> 00:18:00.516 A:middle
Many of you have probably
seen this issue before.

00:18:00.796 --> 00:18:01.966 A:middle
You've got this purple circle.

00:18:01.966 --> 00:18:03.046 A:middle
You say, "Go to the other side."

00:18:04.196 --> 00:18:07.606 A:middle
And in the middle of its
animation, you say, "Wait, no,

00:18:07.606 --> 00:18:09.986 A:middle
go back the other way," because
maybe the user pressed a button.

00:18:11.446 --> 00:18:15.276 A:middle
And then what happens is
the circle jumps all the way

00:18:15.276 --> 00:18:17.646 A:middle
to the right side and animates
from there to the left.

00:18:18.896 --> 00:18:21.856 A:middle
This is a pretty common bug
that we see in applications,

00:18:21.856 --> 00:18:24.186 A:middle
and it's one of the reasons
why people will, for instance,

00:18:24.226 --> 00:18:27.046 A:middle
disable user interaction
on their animations,

00:18:27.046 --> 00:18:28.286 A:middle
to get around issues like this.

00:18:29.536 --> 00:18:33.436 A:middle
Now, there's always been
a UIViewAnimation option

00:18:33.816 --> 00:18:35.406 A:middle
that can help deal
with these scenarios.

00:18:35.406 --> 00:18:37.936 A:middle
It's called
UIViewAnimationOption

00:18:37.936 --> 00:18:39.246 A:middle
BeginFromCurrentState.

00:18:39.246 --> 00:18:42.226 A:middle
And this is what it
looks like by contrast.

00:18:42.626 --> 00:18:44.896 A:middle
So there's no jump in position.

00:18:46.036 --> 00:18:46.606 A:middle
And that's great.

00:18:48.676 --> 00:18:52.036 A:middle
But there is a jump in velocity.

00:18:53.616 --> 00:18:55.166 A:middle
If you look at this animation,

00:18:55.166 --> 00:18:58.086 A:middle
it's kind of like
it hits a brick wall

00:18:58.086 --> 00:19:01.016 A:middle
and then it starts going
back the other direction.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.086 --> 00:19:01.016 A:middle
and then it starts going
back the other direction.

00:19:01.886 --> 00:19:05.086 A:middle
There's a more fluid option
that I'm going to talk about now

00:19:05.086 --> 00:19:06.906 A:middle
and I'm going to
introduce you to it.

00:19:06.906 --> 00:19:08.446 A:middle
It's called additive animations.

00:19:08.896 --> 00:19:10.376 A:middle
Take a look at how this looks.

00:19:10.656 --> 00:19:14.576 A:middle
The circle on the bottom moves
and it preserves both position

00:19:14.576 --> 00:19:17.226 A:middle
and velocity when it
changes direction.

00:19:17.226 --> 00:19:19.116 A:middle
Both of those are smooth.

00:19:19.116 --> 00:19:20.376 A:middle
Let's see that one more time.

00:19:20.956 --> 00:19:23.406 A:middle
You can see
BeginFromCurrentState,

00:19:23.406 --> 00:19:24.766 A:middle
it's kind of like
it hits a wall.

00:19:25.386 --> 00:19:28.486 A:middle
Additive animations, the
velocity component is smooth.

00:19:29.996 --> 00:19:35.616 A:middle
So absolute animations have
been the default on iOS, so far,

00:19:35.616 --> 00:19:37.686 A:middle
but starting now with iOS 8,

00:19:37.926 --> 00:19:41.276 A:middle
additive animations are actually
going to be the default behavior

00:19:41.506 --> 00:19:43.056 A:middle
for all UIKit created
animations,

00:19:44.756 --> 00:19:46.696 A:middle
[applause] most UIKit
created animations.

00:19:47.576 --> 00:19:50.166 A:middle
We'll talk a little bit
more later about exactly

00:19:50.166 --> 00:19:51.696 A:middle
when this is going to
work and when it's not.

00:19:52.456 --> 00:19:56.746 A:middle
But the long and short of that
is that, if you have this code,

00:19:56.746 --> 00:20:00.096 A:middle
a typical animation
thing, you are going to get


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:56.746 --> 00:20:00.096 A:middle
a typical animation
thing, you are going to get

00:20:00.646 --> 00:20:01.556 A:middle
that desired behavior.

00:20:03.026 --> 00:20:05.556 A:middle
So, I do want you to actually
understand what's going

00:20:05.556 --> 00:20:06.446 A:middle
on behind the scenes here.

00:20:06.956 --> 00:20:07.926 A:middle
I think that's really important

00:20:07.926 --> 00:20:09.286 A:middle
to taking advantage
of this new feature.

00:20:09.286 --> 00:20:12.126 A:middle
So let's walk through how
Cocoa Touch actually manages

00:20:12.126 --> 00:20:13.236 A:middle
animations in the system.

00:20:13.386 --> 00:20:15.276 A:middle
What's happening behind the
scenes to make this happen?

00:20:15.716 --> 00:20:17.736 A:middle
So you've got this
circle and you tell it,

00:20:17.736 --> 00:20:18.476 A:middle
"Go to the other side."

00:20:18.846 --> 00:20:22.126 A:middle
You say, "Animate that
x position to 500."

00:20:23.496 --> 00:20:26.006 A:middle
So if you were to ask the circle

00:20:26.816 --> 00:20:29.076 A:middle
for its center's x value
immediately after making

00:20:29.076 --> 00:20:30.576 A:middle
that call, it would return 500.

00:20:31.916 --> 00:20:32.796 A:middle
So you think, "Okay, well,

00:20:32.796 --> 00:20:34.666 A:middle
that means the circle
should draw all the way

00:20:34.666 --> 00:20:37.146 A:middle
on the right side,"
but it doesn't.

00:20:37.146 --> 00:20:40.426 A:middle
The first frame that the circle
is rendered is still going to be

00:20:40.426 --> 00:20:43.226 A:middle
at 0 because it's going
to animate from 0 to 500.

00:20:44.086 --> 00:20:47.506 A:middle
And the reason that that
happens is the distinction

00:20:47.506 --> 00:20:52.076 A:middle
between presentation layers and
-- presentation layer's values

00:20:52.286 --> 00:20:53.806 A:middle
and model layer's values.

00:20:54.166 --> 00:20:56.146 A:middle
So if you're unfamiliar
with that distinction,

00:20:56.146 --> 00:20:58.116 A:middle
I suggest watching the
talk that Josh and I gave

00:20:58.116 --> 00:21:00.546 A:middle
in 2011 called Understand
UIKit Rendering.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.116 --> 00:21:00.546 A:middle
in 2011 called Understand
UIKit Rendering.

00:21:00.726 --> 00:21:02.256 A:middle
I'm mostly going to
assume that you understand

00:21:02.256 --> 00:21:03.106 A:middle
that distinction already.

00:21:03.656 --> 00:21:07.696 A:middle
The point is that where the
layer's value is -- I'm sorry.

00:21:07.696 --> 00:21:09.776 A:middle
The layer's current
value is not necessarily

00:21:09.776 --> 00:21:10.616 A:middle
where it's going to draw.

00:21:10.616 --> 00:21:12.886 A:middle
There's a presentation value
that's used for rendering.

00:21:13.146 --> 00:21:15.076 A:middle
So right now the presentation
value of this layer is 0.

00:21:15.076 --> 00:21:17.176 A:middle
And the reason that it's 0 is

00:21:17.176 --> 00:21:20.906 A:middle
that there is this CAAnimation
object which UIKit has created

00:21:21.106 --> 00:21:22.306 A:middle
and attached to the layer.

00:21:23.166 --> 00:21:24.906 A:middle
It encapsulates a few
pieces of information.

00:21:25.446 --> 00:21:27.306 A:middle
You'll note that it
has a fromValue set.

00:21:28.416 --> 00:21:32.096 A:middle
Now, fromValue was read out of
the model value of the layer.

00:21:32.096 --> 00:21:34.876 A:middle
The model value of the layer
was 00, so the fromValue

00:21:34.876 --> 00:21:36.086 A:middle
of this animation is 00.

00:21:37.066 --> 00:21:39.316 A:middle
You'll note that there
is no toValue and that's

00:21:39.356 --> 00:21:42.176 A:middle
because the way this works
is that at every frame,

00:21:42.686 --> 00:21:47.026 A:middle
the toValue is going to
be the current model value

00:21:47.026 --> 00:21:47.486 A:middle
of the layer.

00:21:48.166 --> 00:21:50.086 A:middle
So if we were to
read this animation

00:21:50.356 --> 00:21:52.376 A:middle
in natural text we
would say, "Okay,

00:21:52.536 --> 00:21:56.236 A:middle
this is an animation that's
going to animate from 00

00:21:56.686 --> 00:21:58.666 A:middle
to the current model
value of the layer,

00:21:58.666 --> 00:22:00.356 A:middle
which happens currently
to be 500


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.666 --> 00:22:00.356 A:middle
which happens currently
to be 500

00:22:00.776 --> 00:22:03.146 A:middle
over one second starting
from 1000.1.

00:22:04.346 --> 00:22:08.236 A:middle
So this animation emits a
value of 00 for time 1000.1

00:22:09.486 --> 00:22:11.896 A:middle
and that's why the
presentation value is 00.

00:22:12.886 --> 00:22:15.496 A:middle
The next frame we render, it
emits a slightly greater time.

00:22:15.696 --> 00:22:18.396 A:middle
That is the value that we use
for the presentation layer

00:22:18.396 --> 00:22:20.086 A:middle
and that's how we
move across screen.

00:22:20.496 --> 00:22:23.136 A:middle
Now, if we were to start
reversing direction partway

00:22:23.136 --> 00:22:26.536 A:middle
through this animation,
say we set the center

00:22:26.536 --> 00:22:28.696 A:middle
of the circle back to
0, then just as before,

00:22:28.696 --> 00:22:31.356 A:middle
the model layer's value
jumps immediately back to 0.

00:22:32.776 --> 00:22:35.256 A:middle
But it's not going to
draw at 0 immediately.

00:22:36.156 --> 00:22:38.876 A:middle
So in terms of these
CAAnimations, the next thing

00:22:38.876 --> 00:22:42.656 A:middle
that happens is just going to be

00:22:42.656 --> 00:22:46.336 A:middle
that we destroy the
current CAAnimation.

00:22:46.876 --> 00:22:50.666 A:middle
And that's going to be
why you see that jump.

00:22:51.106 --> 00:22:53.126 A:middle
We create a new CAAnimation
to replace it.

00:22:53.676 --> 00:22:57.536 A:middle
And, just like before, we get
that new CAAnimation's fromValue

00:22:57.726 --> 00:22:59.696 A:middle
from the current
layer's model value,

00:22:59.786 --> 00:23:01.686 A:middle
which was 500 in this case.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.786 --> 00:23:01.686 A:middle
which was 500 in this case.

00:23:01.686 --> 00:23:03.416 A:middle
Now, we didn't make it
all the way to the 500,

00:23:03.416 --> 00:23:05.756 A:middle
but the model value was 500.

00:23:06.026 --> 00:23:08.916 A:middle
So this animation's fromValue is
500, and that means if we were

00:23:08.916 --> 00:23:10.766 A:middle
to read this in natural
text that we're going

00:23:10.766 --> 00:23:13.686 A:middle
to be interpolating from
500 to 0 over a second.

00:23:13.946 --> 00:23:15.996 A:middle
And indeed, the next
frame we render,

00:23:16.516 --> 00:23:18.916 A:middle
the animation emits a value
of 500 and we go ahead and use

00:23:18.916 --> 00:23:21.376 A:middle
that to render the
circle's position.

00:23:21.376 --> 00:23:22.596 A:middle
And that's why we
have that jump.

00:23:23.476 --> 00:23:26.746 A:middle
So we'll animate from 500
back to 0 across the screen

00:23:27.076 --> 00:23:28.266 A:middle
until we finally get to 0.

00:23:30.056 --> 00:23:32.406 A:middle
BeginFromCurrentState
is a little different,

00:23:33.256 --> 00:23:35.096 A:middle
and I'd like you to understand
how that works, as well.

00:23:35.356 --> 00:23:36.306 A:middle
So say that we're at this point.

00:23:36.306 --> 00:23:37.806 A:middle
We were partway through
the animation

00:23:38.096 --> 00:23:39.966 A:middle
and then we emit the code
to reverse direction.

00:23:39.966 --> 00:23:43.486 A:middle
So we say, "Animate again.

00:23:43.486 --> 00:23:45.256 A:middle
This time begin from
current state."

00:23:46.706 --> 00:23:50.756 A:middle
Well, again, we're going
to destroy the animation

00:23:50.756 --> 00:23:53.126 A:middle
that was preexisting and
create a new animation.

00:23:53.306 --> 00:23:56.586 A:middle
But this time, we're going
to create a new animation

00:23:56.586 --> 00:24:00.586 A:middle
with a fromValue derived from
the presentation layer's value,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.586 --> 00:24:00.586 A:middle
with a fromValue derived from
the presentation layer's value,

00:24:01.046 --> 00:24:02.786 A:middle
rather than from the
model layer's value.

00:24:02.786 --> 00:24:05.176 A:middle
Now, at the time this
animation was created,

00:24:05.646 --> 00:24:09.436 A:middle
the presentation value was 150,
and so we make an animation

00:24:09.736 --> 00:24:12.246 A:middle
which is going to
animate from 150

00:24:12.316 --> 00:24:15.366 A:middle
to 0 instead of from 500 to 0.

00:24:16.526 --> 00:24:18.206 A:middle
And, therefore, the next
frame that's rendered,

00:24:18.526 --> 00:24:20.666 A:middle
the animation emits
a value of 150

00:24:21.016 --> 00:24:22.786 A:middle
and so we don't have
that positional jump.

00:24:24.066 --> 00:24:25.256 A:middle
So it seems like
everything's good.

00:24:25.256 --> 00:24:26.696 A:middle
We're animating back
towards the origin.

00:24:27.566 --> 00:24:32.106 A:middle
But we still had that kind of
brick-wall feeling as we looked

00:24:32.106 --> 00:24:34.096 A:middle
at these three circles
earlier, and I'd like you

00:24:34.096 --> 00:24:36.036 A:middle
to understand why
that is now, as well.

00:24:36.036 --> 00:24:38.726 A:middle
So say that we're going to
be animating this circle

00:24:38.726 --> 00:24:40.626 A:middle
from the left side of the screen
to the right side of the screen

00:24:40.756 --> 00:24:43.536 A:middle
and just taking snapshots at
a regular interval as it goes.

00:24:44.146 --> 00:24:45.936 A:middle
The snapshots might look
something like this.

00:24:47.276 --> 00:24:50.076 A:middle
Now, if partway through that
animation we were to stop

00:24:50.076 --> 00:24:52.486 A:middle
and try reversing direction
of the circle again,

00:24:53.286 --> 00:24:56.566 A:middle
and then if we were to take
snapshots at the same interval,

00:24:57.026 --> 00:24:59.326 A:middle
we would get snapshots that
looked a little bit like this.

00:24:59.746 --> 00:25:01.896 A:middle
So the first thing we notice is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.746 --> 00:25:01.896 A:middle
So the first thing we notice is

00:25:03.146 --> 00:25:05.176 A:middle
that we are animating
a smaller distance

00:25:05.176 --> 00:25:06.066 A:middle
over the same amount of time.

00:25:07.086 --> 00:25:08.646 A:middle
And that's going to create
a problem because we can see

00:25:08.646 --> 00:25:10.486 A:middle
that the slopes of these
two lines are not the same.

00:25:11.386 --> 00:25:12.376 A:middle
That's not going to be smooth.

00:25:13.776 --> 00:25:16.566 A:middle
But that's not the
whole problem.

00:25:16.566 --> 00:25:18.316 A:middle
You might think, "Okay, we
could adjust the duration.

00:25:18.776 --> 00:25:19.606 A:middle
We can get around this."

00:25:20.276 --> 00:25:21.436 A:middle
Let's think about easing.

00:25:22.026 --> 00:25:24.486 A:middle
If we're doing ease-in,
ease-out,

00:25:24.726 --> 00:25:26.216 A:middle
this might be what those
snapshots looked like.

00:25:26.216 --> 00:25:28.606 A:middle
And then if we were to
stop partway through

00:25:28.606 --> 00:25:31.476 A:middle
and reverse direction, that
problem would be exacerbated.

00:25:32.786 --> 00:25:38.306 A:middle
Looking at a plot, this
is the situation we have.

00:25:38.496 --> 00:25:39.516 A:middle
Really, the issue we have is

00:25:39.516 --> 00:25:41.186 A:middle
that the velocity
component isn't smooth.

00:25:41.796 --> 00:25:43.296 A:middle
There's that kink in
the middle of the graph.

00:25:44.246 --> 00:25:46.576 A:middle
And that kink is exactly what
additive animations are going

00:25:46.576 --> 00:25:48.476 A:middle
to help us solve.

00:25:48.656 --> 00:25:51.406 A:middle
So I'd like you to understand
how additive animations actually

00:25:51.406 --> 00:25:52.416 A:middle
work under the hood.

00:25:53.576 --> 00:25:56.446 A:middle
Returning to this example
here, let's say we try

00:25:56.446 --> 00:25:57.526 A:middle
to animate across the screen.

00:25:58.096 --> 00:26:01.186 A:middle
As before, we're going to
create a new CAAnimation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.096 --> 00:26:01.186 A:middle
As before, we're going to
create a new CAAnimation

00:26:01.606 --> 00:26:03.456 A:middle
and we're going to have this
additive flag set to YES.

00:26:03.606 --> 00:26:05.726 A:middle
This is a property that
already exists on CAAnimation.

00:26:05.966 --> 00:26:07.426 A:middle
You can use it in
previous versions of iOS.

00:26:07.426 --> 00:26:10.396 A:middle
It's just that UI is configuring
this for you now by default.

00:26:12.716 --> 00:26:14.626 A:middle
The fromValue is a
little different.

00:26:14.686 --> 00:26:16.876 A:middle
The toValue is now present,
so let's talk about those.

00:26:17.516 --> 00:26:20.376 A:middle
The fromValue and the toValue
are interpreted relatively

00:26:20.376 --> 00:26:22.306 A:middle
to the model value
at every frame

00:26:22.546 --> 00:26:24.316 A:middle
with an additive animation.

00:26:24.316 --> 00:26:26.816 A:middle
That's basically the purpose
of additive animations.

00:26:27.306 --> 00:26:31.036 A:middle
So we create a fromValue by
subtracting the previous value

00:26:31.036 --> 00:26:33.446 A:middle
from the destination value,
basically 2 minus from.

00:26:34.206 --> 00:26:37.406 A:middle
And we create the toValue
by just assigning it to 0.

00:26:38.066 --> 00:26:39.726 A:middle
So what that's going to
do is at every frame,

00:26:40.636 --> 00:26:43.826 A:middle
that animation is going
to emit a contribution --

00:26:45.226 --> 00:26:49.386 A:middle
here, minus 500 -- which,
when added to the model value,

00:26:50.406 --> 00:26:54.976 A:middle
currently 500, will form
the presentation value, 0.

00:26:55.166 --> 00:26:57.906 A:middle
So 500 plus negative 500 is 0

00:26:57.906 --> 00:26:59.596 A:middle
and that's why the
first frame is

00:26:59.596 --> 00:27:00.856 A:middle
that circle all the
way on the left.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.596 --> 00:27:00.856 A:middle
that circle all the
way on the left.

00:27:01.366 --> 00:27:02.856 A:middle
And as it starts moving
towards the right,

00:27:03.066 --> 00:27:05.586 A:middle
the animation's contribution
decreases.

00:27:05.586 --> 00:27:06.996 A:middle
It's always getting closer to 0.

00:27:07.566 --> 00:27:10.516 A:middle
So minus 500, minus
450, minus 400,

00:27:10.686 --> 00:27:12.196 A:middle
and the sum is getting
closer to 0.

00:27:12.626 --> 00:27:16.616 A:middle
So now partway through, if
we reverse direction, again,

00:27:16.616 --> 00:27:18.736 A:middle
the model value jumps
over to the left side.

00:27:19.076 --> 00:27:21.026 A:middle
But this time we're not going
to destroy that animation.

00:27:21.686 --> 00:27:24.976 A:middle
We're going to make a second
animation and add it on top.

00:27:26.106 --> 00:27:29.046 A:middle
So now we're going to use both
of those animations' values,

00:27:31.216 --> 00:27:36.096 A:middle
0 plus negative 300
plus 500 is 200.

00:27:37.076 --> 00:27:38.976 A:middle
And you'll see even though
we've added this animation

00:27:38.976 --> 00:27:42.206 A:middle
to reverse direction, we
overshot a little bit.

00:27:42.206 --> 00:27:44.206 A:middle
We didn't reverse
direction instantly,

00:27:44.206 --> 00:27:47.946 A:middle
and that's because we can't
do that without making a jump

00:27:47.946 --> 00:27:49.036 A:middle
in velocity component.

00:27:49.416 --> 00:27:50.946 A:middle
So here we overshot
a little bit,

00:27:51.336 --> 00:27:53.356 A:middle
but now the second
animation's going

00:27:53.356 --> 00:27:56.496 A:middle
to overtake the first
animation all the way

00:27:56.496 --> 00:27:57.676 A:middle
until we get back to the origin.

00:27:58.126 --> 00:27:58.606 A:middle
So they stack.

00:27:59.516 --> 00:28:03.926 A:middle
[ Applause ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.516 --> 00:28:03.926 A:middle
[ Applause ]

00:28:04.426 --> 00:28:05.106 A:middle
I'm glad you like it.

00:28:06.226 --> 00:28:07.296 A:middle
So we get back to the origin,

00:28:07.536 --> 00:28:10.886 A:middle
they both have a 0
value, everything's happy.

00:28:11.326 --> 00:28:14.276 A:middle
We had this graph, and
now we have this graph.

00:28:15.576 --> 00:28:18.666 A:middle
[applause] Alright, excellent.

00:28:19.166 --> 00:28:21.886 A:middle
So I promised that I would
tell you a little more detail

00:28:21.886 --> 00:28:23.846 A:middle
about when this is going to work
and when it's not going to work.

00:28:24.146 --> 00:28:25.876 A:middle
So there are a set of keys

00:28:25.876 --> 00:28:27.876 A:middle
on which this behavior
is supported.

00:28:28.286 --> 00:28:30.766 A:middle
Basically they're
your geometric keys.

00:28:31.946 --> 00:28:33.806 A:middle
So this kind of stuff is
all going to work fine

00:28:33.806 --> 00:28:35.606 A:middle
for moving objects around
on the screen, scaling them,

00:28:35.776 --> 00:28:37.336 A:middle
rotating them; that's
all going to be fine.

00:28:38.246 --> 00:28:40.166 A:middle
There are certain kinds
of rotations, though,

00:28:40.166 --> 00:28:41.686 A:middle
which work and ones which don't.

00:28:41.686 --> 00:28:45.146 A:middle
So, just really briefly,
if you were to actually try

00:28:45.146 --> 00:28:48.546 A:middle
to animate the layer's transform
property, you're only going

00:28:48.546 --> 00:28:51.996 A:middle
to get this additive behavior
for affine transformations.

00:28:52.196 --> 00:28:54.766 A:middle
The definition of an
affine transformation is

00:28:54.766 --> 00:28:58.326 A:middle
that it keeps parallel
lines smooth

00:28:59.266 --> 00:29:00.666 A:middle
after the transformation's
applied.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.266 --> 00:29:00.666 A:middle
after the transformation's
applied.

00:29:00.666 --> 00:29:03.426 A:middle
So the bird on the left, we've
rotated it about the z-axis.

00:29:03.426 --> 00:29:04.646 A:middle
Those parallel lines --

00:29:04.866 --> 00:29:06.276 A:middle
I'm sorry, parallel
lines are not smooth.

00:29:06.276 --> 00:29:06.966 A:middle
They're still parallel.

00:29:07.486 --> 00:29:10.376 A:middle
Parallel lines
pre-transformation remain

00:29:10.376 --> 00:29:12.086 A:middle
parallel after the
transformation.

00:29:12.336 --> 00:29:13.436 A:middle
That is an affine transform.

00:29:13.766 --> 00:29:16.096 A:middle
So the bird on the left,
parallel lines still parallel;

00:29:16.646 --> 00:29:18.496 A:middle
bird on the right, parallel
lines no longer parallel.

00:29:18.786 --> 00:29:23.116 A:middle
So a rotation animation
that is like the bird

00:29:23.116 --> 00:29:25.426 A:middle
on the left will use
additive animations;

00:29:25.676 --> 00:29:28.466 A:middle
and rotation animations, like
the bird on the right, will not.

00:29:29.256 --> 00:29:31.066 A:middle
There's a few other
compatibility requirements,

00:29:31.066 --> 00:29:31.486 A:middle
as well.

00:29:32.436 --> 00:29:34.846 A:middle
This feature will not work
with keyframe animations

00:29:34.846 --> 00:29:37.816 A:middle
at the time being and
it also will not work

00:29:37.816 --> 00:29:39.866 A:middle
if there are pre-existing
repeating animations

00:29:40.116 --> 00:29:41.976 A:middle
because that could
get you to a place

00:29:41.976 --> 00:29:43.736 A:middle
where you have an
unlimited number

00:29:43.736 --> 00:29:45.156 A:middle
of animations stacking forever.

00:29:45.676 --> 00:29:46.776 A:middle
It's not good for the system.

00:29:47.456 --> 00:29:48.626 A:middle
Finally, it will also not work

00:29:48.826 --> 00:29:50.496 A:middle
if you've gone behind
UIKit's back

00:29:50.496 --> 00:29:53.156 A:middle
and created preexisting absolute
animations on that layer.

00:29:53.836 --> 00:29:57.406 A:middle
But these are, perhaps,
not common situations.

00:29:58.746 --> 00:30:01.076 A:middle
Now, I said that not
all keys are supported.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.746 --> 00:30:01.076 A:middle
Now, I said that not
all keys are supported.

00:30:01.076 --> 00:30:02.676 A:middle
For instance, alpha
is not supported.

00:30:02.936 --> 00:30:05.506 A:middle
And you don't really know what
setting the circle's tintColor

00:30:05.506 --> 00:30:06.216 A:middle
is going to do.

00:30:06.216 --> 00:30:07.826 A:middle
You know that that's
an animatable property,

00:30:07.826 --> 00:30:10.436 A:middle
but you don't really
know what that means.

00:30:10.856 --> 00:30:13.766 A:middle
And so you can be defensive

00:30:14.676 --> 00:30:18.456 A:middle
about whether properties support
additive animations or not

00:30:18.816 --> 00:30:21.016 A:middle
by continuing to use
BeginFromCurrentState.

00:30:21.296 --> 00:30:26.686 A:middle
So for center.x, for that
animation, we're not going

00:30:26.686 --> 00:30:28.446 A:middle
to use the old
BeginFromCurrentState behavior

00:30:28.446 --> 00:30:28.976 A:middle
behind the scenes.

00:30:28.976 --> 00:30:30.856 A:middle
We are still going to make
that additive animation.

00:30:31.096 --> 00:30:33.546 A:middle
But for the other two
properties, for alpha

00:30:33.546 --> 00:30:34.826 A:middle
and for the tint color, then

00:30:34.826 --> 00:30:37.556 A:middle
at least you'll get position
preserving transitions.

00:30:38.116 --> 00:30:41.016 A:middle
So you can go ahead and
use BeginFromCurrentState,

00:30:41.366 --> 00:30:43.086 A:middle
center.x will be additive,

00:30:43.466 --> 00:30:46.056 A:middle
the others will use
the presentation value

00:30:46.056 --> 00:30:46.966 A:middle
in their reverse directions.

00:30:47.896 --> 00:30:49.756 A:middle
The other thing that's
interesting

00:30:49.756 --> 00:30:51.496 A:middle
about this transition is
sort of a side effect.

00:30:51.956 --> 00:30:54.366 A:middle
You know, UIKit doesn't
actually have a way for you

00:30:54.366 --> 00:30:55.906 A:middle
to cancel in-flight
animations right now.

00:30:55.906 --> 00:30:56.766 A:middle
There's no way to do that.

00:30:57.816 --> 00:30:59.516 A:middle
So some people do it like this.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:00.556 --> 00:31:02.896 A:middle
They make a new animation
with a 0 duration,

00:31:03.576 --> 00:31:05.586 A:middle
and you just set the
value to something else.

00:31:05.916 --> 00:31:08.556 A:middle
Now, that will sort of stop
in-flight animations just

00:31:08.606 --> 00:31:09.676 A:middle
because the behavior

00:31:09.676 --> 00:31:11.516 A:middle
of UIKitAnimations
has always been that,

00:31:11.776 --> 00:31:14.456 A:middle
when you make a new animation,
we throw out the old one,

00:31:14.706 --> 00:31:15.726 A:middle
replace it with the new one,

00:31:15.726 --> 00:31:18.146 A:middle
and this new one's going
to be 0 seconds long.

00:31:19.256 --> 00:31:21.736 A:middle
But, as we just saw,
we don't throw

00:31:21.736 --> 00:31:23.186 A:middle
out those animations anymore.

00:31:24.176 --> 00:31:26.476 A:middle
So this is not going to stop
any in-flight animations.

00:31:26.746 --> 00:31:27.876 A:middle
Instead you just have to drop

00:31:27.876 --> 00:31:32.876 A:middle
down to the CAAnimation API
directly to do your work.

00:31:33.066 --> 00:31:35.816 A:middle
One other thing to keep in mind
is behavior completion handlers.

00:31:36.866 --> 00:31:37.616 A:middle
These animations stack.

00:31:38.806 --> 00:31:40.376 A:middle
So before, if you
had an animation

00:31:40.376 --> 00:31:43.286 A:middle
with a completion handler, you
started reversing direction.

00:31:44.666 --> 00:31:46.706 A:middle
As I said, we were going
to remove that animation,

00:31:46.706 --> 00:31:48.266 A:middle
so when we remove
that animation,

00:31:48.266 --> 00:31:49.416 A:middle
we call your completion handler.

00:31:49.996 --> 00:31:51.406 A:middle
The argument is finished,

00:31:51.966 --> 00:31:53.486 A:middle
and so when we call
your completion handler,

00:31:53.486 --> 00:31:55.146 A:middle
we call it with a
value of false,

00:31:55.216 --> 00:31:56.696 A:middle
because the animation
didn't finish.

00:31:57.496 --> 00:32:00.116 A:middle
And then we'll create
the new animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:57.496 --> 00:32:00.116 A:middle
And then we'll create
the new animation.

00:32:00.476 --> 00:32:01.576 A:middle
And when that one completes,

00:32:01.576 --> 00:32:02.616 A:middle
we'll call that completion
handler.

00:32:02.616 --> 00:32:05.236 A:middle
Well, in the additive
animations world,

00:32:06.006 --> 00:32:08.026 A:middle
if you have an additive
animation

00:32:08.026 --> 00:32:12.806 A:middle
with completion handler and then
you reverse directions, then --

00:32:12.806 --> 00:32:15.116 A:middle
remember, we don't throw
out that animation.

00:32:15.116 --> 00:32:16.636 A:middle
We make a new animation.

00:32:17.846 --> 00:32:20.916 A:middle
And so we don't have
a completion handler

00:32:20.916 --> 00:32:21.586 A:middle
to call right now.

00:32:21.956 --> 00:32:22.946 A:middle
The animation's still going.

00:32:23.926 --> 00:32:26.776 A:middle
It's only when we actually get
to the end of the animation

00:32:27.006 --> 00:32:28.286 A:middle
that we call the
completion handler,

00:32:28.286 --> 00:32:31.386 A:middle
and we call the completion
handler with a finished argument

00:32:31.386 --> 00:32:34.486 A:middle
of true, because that
first animation did finish.

00:32:34.816 --> 00:32:36.796 A:middle
It's just that another
animation was added on top.

00:32:37.656 --> 00:32:40.276 A:middle
So this could be
surprising, potentially,

00:32:41.016 --> 00:32:42.936 A:middle
and what I'm telling you
is, do not be surprised.

00:32:43.676 --> 00:32:47.426 A:middle
[laughter] So, in summary,

00:32:48.306 --> 00:32:49.906 A:middle
transitions will be
smoother by default.

00:32:51.106 --> 00:32:51.796 A:middle
This is a great thing.

00:32:53.046 --> 00:32:55.746 A:middle
However, there are some kinds
of animations that are not

00:32:55.746 --> 00:32:56.716 A:middle
yet supported with this system

00:32:56.716 --> 00:32:59.006 A:middle
and so you should still
use BeginFromCurrentState

00:32:59.006 --> 00:33:02.166 A:middle
if you're not sure about whether
you're animating a supported


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.006 --> 00:33:02.166 A:middle
if you're not sure about whether
you're animating a supported

00:33:02.166 --> 00:33:03.696 A:middle
key, a supported
scenario or not.

00:33:03.696 --> 00:33:04.116 A:middle
That's fine.

00:33:04.606 --> 00:33:06.436 A:middle
We'll do the best
thing we can do.

00:33:07.706 --> 00:33:09.396 A:middle
And, finally, do keep in mind

00:33:09.396 --> 00:33:10.846 A:middle
that those completion
handlers may stack

00:33:11.356 --> 00:33:14.146 A:middle
because that does
actually represent a change

00:33:14.146 --> 00:33:15.526 A:middle
in when we are calling you back.

00:33:16.746 --> 00:33:18.426 A:middle
So we've talked about
how to transition

00:33:18.666 --> 00:33:21.246 A:middle
from animation to animation.

00:33:22.206 --> 00:33:23.876 A:middle
And now that you've got
these animations inflight,

00:33:24.876 --> 00:33:27.906 A:middle
you do still want to be able to
interact with your application.

00:33:28.276 --> 00:33:30.976 A:middle
So Josh is going to come back
up and talk about transitioning

00:33:30.976 --> 00:33:32.576 A:middle
from animations to gestures.

00:33:33.516 --> 00:33:38.146 A:middle
[ Applause ]

00:33:38.646 --> 00:33:39.016 A:middle
&gt;&gt; Alright.

00:33:39.056 --> 00:33:39.636 A:middle
Thanks, Andy.

00:33:40.246 --> 00:33:41.076 A:middle
We're getting close.

00:33:41.076 --> 00:33:42.896 A:middle
We've got one transition
point left

00:33:43.046 --> 00:33:45.046 A:middle
that we're still finding
we've got some issues with.

00:33:45.626 --> 00:33:47.246 A:middle
And by default probably
you're noticing

00:33:47.246 --> 00:33:49.666 A:middle
that in this transition point,
going from your animation back

00:33:49.666 --> 00:33:52.386 A:middle
to your gesture, you're actually
by default not actually able

00:33:52.386 --> 00:33:53.736 A:middle
to even start an interaction.

00:33:54.316 --> 00:33:56.306 A:middle
So before we can even talk
about making it smooth,

00:33:56.306 --> 00:34:00.096 A:middle
we have to talk about how to
allow gestures and touch events


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:56.306 --> 00:34:00.096 A:middle
we have to talk about how to
allow gestures and touch events

00:34:00.096 --> 00:34:02.766 A:middle
and interactions to begin
while you're in the middle

00:34:02.766 --> 00:34:03.836 A:middle
of one of these animations.

00:34:04.876 --> 00:34:06.676 A:middle
So let's go and take a look
at why this is the case

00:34:06.676 --> 00:34:08.416 A:middle
and what we can do about it.

00:34:08.585 --> 00:34:11.406 A:middle
So here we've got some big
view and I've put a subview

00:34:11.406 --> 00:34:14.656 A:middle
in that I've colored blue
just to make it stand out.

00:34:14.656 --> 00:34:16.166 A:middle
And we're going to say
that we're taking that view

00:34:16.166 --> 00:34:19.346 A:middle
and we're animating it over to
the right into this position

00:34:19.346 --> 00:34:20.525 A:middle
on the right side of the screen

00:34:20.525 --> 00:34:23.876 A:middle
with some standard
UIKitAnimation using the

00:34:23.876 --> 00:34:26.196 A:middle
UIViewAnimateWithDuration API.

00:34:26.846 --> 00:34:28.056 A:middle
And let's say it's
halfway through.

00:34:28.656 --> 00:34:31.786 A:middle
And halfway through, we want
to start interacting with it.

00:34:33.216 --> 00:34:37.786 A:middle
So let's say that a touch comes
down on the screen and it comes

00:34:37.786 --> 00:34:39.835 A:middle
down on top of where
that is visually

00:34:39.866 --> 00:34:40.896 A:middle
in the presentation layer.

00:34:42.106 --> 00:34:43.226 A:middle
Now the default thing
that you get

00:34:43.226 --> 00:34:45.886 A:middle
if you just do
UIViewAnimateWithDuration is

00:34:45.886 --> 00:34:48.416 A:middle
that animations that are
in progress as a result

00:34:48.416 --> 00:34:50.766 A:middle
of that do not allow
user interaction during

00:34:50.766 --> 00:34:51.366 A:middle
the animation.

00:34:52.616 --> 00:34:54.585 A:middle
So that view is going
to get hit tested

00:34:55.126 --> 00:34:58.166 A:middle
and the touch will be
attached to that view,

00:34:58.626 --> 00:35:01.486 A:middle
but because the interaction
is disabled by default,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.626 --> 00:35:01.486 A:middle
but because the interaction
is disabled by default,

00:35:01.706 --> 00:35:03.576 A:middle
what you'll find is that the
touch actually doesn't get

00:35:03.576 --> 00:35:05.356 A:middle
delivered anywhere and
just gets swallowed.

00:35:05.426 --> 00:35:06.456 A:middle
It just disappears.

00:35:06.456 --> 00:35:07.686 A:middle
It's as if it didn't
even happen.

00:35:11.846 --> 00:35:14.996 A:middle
So obviously we want to fix
that, and the way that we can go

00:35:14.996 --> 00:35:18.526 A:middle
about doing it is by using an
animation option called UIView

00:35:18.526 --> 00:35:20.576 A:middle
animation option called
UIViewAnimationOption

00:35:20.576 --> 00:35:21.126 A:middle
AllowsUserInteraction.

00:35:21.126 --> 00:35:22.196 A:middle
Not too surprising, the name.

00:35:22.646 --> 00:35:25.036 A:middle
And you can pass this
into the UIViewAnimation

00:35:25.036 --> 00:35:26.486 A:middle
AnimateWithDuration APIs.

00:35:27.796 --> 00:35:29.926 A:middle
And this will enable interaction
during these animations.

00:35:30.846 --> 00:35:33.626 A:middle
Now, once you've opted in to
allowing user interaction,

00:35:34.106 --> 00:35:36.396 A:middle
you're basically
saying, "I've got this.

00:35:36.396 --> 00:35:38.916 A:middle
I'm an advanced developer
here and I know what I'm doing

00:35:38.916 --> 00:35:40.576 A:middle
and I'm going to take
care of making sure

00:35:40.576 --> 00:35:41.616 A:middle
that the right thing happens."

00:35:42.296 --> 00:35:45.486 A:middle
So, you know, by default,
UIKit is making it safe

00:35:45.486 --> 00:35:47.696 A:middle
so that you don't have
weird things going on.

00:35:47.696 --> 00:35:49.566 A:middle
But once you opt in, you're
saying that you're going to deal

00:35:49.566 --> 00:35:51.206 A:middle
with it and you know how
to do the right thing.

00:35:51.206 --> 00:35:53.926 A:middle
So let's talk about
what the right thing is.

00:35:54.676 --> 00:35:56.086 A:middle
So, again, let's
look at what happens

00:35:56.086 --> 00:35:57.386 A:middle
if a touch comes
down in that view.

00:35:58.346 --> 00:36:00.446 A:middle
Now, this part is probably
going to be a little surprising


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.346 --> 00:36:00.446 A:middle
Now, this part is probably
going to be a little surprising

00:36:00.446 --> 00:36:01.476 A:middle
at first if you've tried it.

00:36:02.056 --> 00:36:03.986 A:middle
What actually happens
is that you'll find

00:36:03.986 --> 00:36:07.176 A:middle
that the touch gets hit tested
to that big view in the back,

00:36:07.826 --> 00:36:09.386 A:middle
which probably wasn't
what we meant

00:36:09.386 --> 00:36:11.176 A:middle
because we touch visually
on what was there.

00:36:12.396 --> 00:36:14.836 A:middle
In fact, if you go
and put a touch

00:36:14.836 --> 00:36:17.206 A:middle
down where we're moving
the additive view to,

00:36:17.206 --> 00:36:20.146 A:middle
where it's going to animate
to, you'll find the thing

00:36:20.146 --> 00:36:21.156 A:middle
that we hit test is the thing

00:36:21.156 --> 00:36:22.926 A:middle
that is currently
animating over to there.

00:36:23.996 --> 00:36:26.356 A:middle
Understanding why
that happens goes back

00:36:26.356 --> 00:36:28.406 A:middle
to what Andy was saying about
the difference between model

00:36:28.406 --> 00:36:29.536 A:middle
and presentation values.

00:36:30.026 --> 00:36:31.816 A:middle
Once you've enabled user
interaction, you're saying

00:36:31.816 --> 00:36:33.636 A:middle
that you're going to take
control of this whole system

00:36:33.636 --> 00:36:35.926 A:middle
and you're going to decide the
right place to go do a hit test.

00:36:35.926 --> 00:36:38.836 A:middle
Because we don't
actually know if the thing

00:36:38.836 --> 00:36:40.456 A:middle
that you're animating is
something that you intend

00:36:40.456 --> 00:36:44.036 A:middle
to interact with or just
something that is animating

00:36:44.036 --> 00:36:45.926 A:middle
in a system, but you're
actually trying to interact

00:36:45.926 --> 00:36:46.856 A:middle
with the thing behind it.

00:36:48.226 --> 00:36:50.256 A:middle
So really we're hit
testing the model values

00:36:50.256 --> 00:36:52.866 A:middle
of all these layers, but
if you want to interact

00:36:52.866 --> 00:36:54.226 A:middle
with the thing that's
animating, you really want

00:36:54.226 --> 00:36:55.996 A:middle
to be hit testing the
presentation values.

00:36:56.566 --> 00:37:00.806 A:middle
So we have to go talk about how
we can make a presentation layer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:56.566 --> 00:37:00.806 A:middle
So we have to go talk about how
we can make a presentation layer

00:37:00.806 --> 00:37:03.316 A:middle
hit test, instead of a
default model value hit test.

00:37:04.506 --> 00:37:08.966 A:middle
And to do that we can override
the hitTest withEvent method

00:37:08.966 --> 00:37:11.946 A:middle
on our UIView that's animating
to make it so that it's going

00:37:11.946 --> 00:37:13.756 A:middle
to hit test its presentation
value instead

00:37:13.756 --> 00:37:14.486 A:middle
of its model value.

00:37:15.046 --> 00:37:19.986 A:middle
Now, by default, the method
is going to take a point.

00:37:20.056 --> 00:37:22.576 A:middle
It's the point in the view
that is being hit tested

00:37:23.096 --> 00:37:24.906 A:middle
and that's the view,
or the point

00:37:24.906 --> 00:37:26.746 A:middle
that UIKit thinks
you have touched.

00:37:27.156 --> 00:37:28.826 A:middle
But, as I mentioned, it's
done that in model space.

00:37:28.826 --> 00:37:32.046 A:middle
So we have to convert it back to
presentation layer space to see

00:37:32.046 --> 00:37:34.176 A:middle
if it's currently inside where
we are as we're animating.

00:37:34.956 --> 00:37:36.506 A:middle
So we can take that
point that's passed in

00:37:36.506 --> 00:37:38.006 A:middle
and convert it back
into our superview.

00:37:38.586 --> 00:37:41.046 A:middle
So we'll convertPoint
toView or superview.

00:37:41.806 --> 00:37:43.796 A:middle
Once we've got it into
superview's coordinate space,

00:37:43.796 --> 00:37:46.516 A:middle
then we can convert it back into
our presentation layer space.

00:37:46.966 --> 00:37:49.436 A:middle
So we convert out using
model space and then back

00:37:49.436 --> 00:37:51.826 A:middle
in using presentation
space so that we can see

00:37:51.826 --> 00:37:53.936 A:middle
where it is inside of
where we are currently,

00:37:53.936 --> 00:37:55.926 A:middle
given that we have an
animation in progress.

00:37:56.566 --> 00:38:00.136 A:middle
So we can do that by getting
our presentation layer and using


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:56.566 --> 00:38:00.136 A:middle
So we can do that by getting
our presentation layer and using

00:38:00.136 --> 00:38:02.546 A:middle
that to do the conversion back
into our coordinate space.

00:38:03.306 --> 00:38:05.096 A:middle
Once we've got that converted
into the right space,

00:38:05.126 --> 00:38:06.076 A:middle
then we can just call super

00:38:06.076 --> 00:38:07.486 A:middle
and let it do what
it was going to do.

00:38:07.486 --> 00:38:10.516 A:middle
So return super.hitTest, passing
in the converted point now

00:38:10.516 --> 00:38:11.626 A:middle
in presentation space

00:38:11.916 --> 00:38:13.876 A:middle
and everything else can just
move on as it had before.

00:38:15.346 --> 00:38:17.616 A:middle
So once we've done that,
we can go take a look

00:38:17.616 --> 00:38:18.506 A:middle
at what was going on again.

00:38:18.896 --> 00:38:21.416 A:middle
Now we've enabled these
interactions, we touch down,

00:38:21.486 --> 00:38:22.616 A:middle
and now the right view is going

00:38:22.616 --> 00:38:24.836 A:middle
to get hit giving what we
were trying to accomplish.

00:38:25.406 --> 00:38:30.286 A:middle
Now, keep in mind
that other APIs --

00:38:30.656 --> 00:38:32.386 A:middle
like touch, location and view --

00:38:32.856 --> 00:38:35.066 A:middle
are also assuming model
space conversions.

00:38:35.306 --> 00:38:36.406 A:middle
All the UIKit behaviors

00:38:36.406 --> 00:38:38.326 A:middle
by default are converting
using model space.

00:38:38.616 --> 00:38:40.046 A:middle
So if you've now
enabled hit testing

00:38:40.046 --> 00:38:42.716 A:middle
into something that's animating
and you're in the progress

00:38:42.716 --> 00:38:45.926 A:middle
of doing that animation and you
want to start handling touches

00:38:45.926 --> 00:38:48.396 A:middle
in the view, if you ask for
that touch location in view,

00:38:48.396 --> 00:38:49.676 A:middle
it's going to be
back in model space.

00:38:49.676 --> 00:38:52.006 A:middle
So you would have to be
careful to go and make sure

00:38:52.006 --> 00:38:54.426 A:middle
that you know which space
you're interacting in.

00:38:55.756 --> 00:38:58.526 A:middle
So really, the reason that the
default is disabled is because,

00:38:58.526 --> 00:39:00.826 A:middle
once you enable interactions,
you have to start knowing more


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.526 --> 00:39:00.826 A:middle
once you enable interactions,
you have to start knowing more

00:39:00.826 --> 00:39:02.406 A:middle
about what's going
on and being careful

00:39:02.406 --> 00:39:03.946 A:middle
to be using the correct
coordinate spaces.

00:39:05.076 --> 00:39:07.586 A:middle
But most of the time, this is
actually probably not going

00:39:07.586 --> 00:39:09.776 A:middle
to be a problem, because
usually if you're enabling

00:39:09.776 --> 00:39:11.396 A:middle
under interaction on
something that's animating,

00:39:11.396 --> 00:39:13.256 A:middle
you're probably trying
to grab the thing

00:39:13.256 --> 00:39:14.296 A:middle
and stop the animation.

00:39:14.936 --> 00:39:16.296 A:middle
So really what we're
going to talk

00:39:16.296 --> 00:39:18.026 A:middle
about now is how we
stop the animation.

00:39:18.026 --> 00:39:19.896 A:middle
That's the key part that
we're interested in right now.

00:39:20.306 --> 00:39:21.406 A:middle
We've got hit testing working.

00:39:21.706 --> 00:39:23.656 A:middle
Once we're touching down,
how do we stop an animation?

00:39:23.976 --> 00:39:26.846 A:middle
Now, as Andy mentioned,
there is no direct API

00:39:26.846 --> 00:39:28.706 A:middle
on UIKit to stop an animation.

00:39:29.126 --> 00:39:31.226 A:middle
So we're going to use the
CALayer API to do that.

00:39:31.656 --> 00:39:33.596 A:middle
But there's another interesting
component that we have to keep

00:39:33.596 --> 00:39:37.346 A:middle
in mind, because Andy just ran
you through the whole story

00:39:37.346 --> 00:39:39.566 A:middle
of how things go when there
are animations on a layer.

00:39:40.346 --> 00:39:44.286 A:middle
And part of that is that
the model value is already

00:39:44.286 --> 00:39:44.976 A:middle
at its final location.

00:39:46.106 --> 00:39:49.556 A:middle
So if we just removed the
animation from the layer,

00:39:50.126 --> 00:39:51.636 A:middle
that was the thing that was
keeping it in the center

00:39:51.636 --> 00:39:52.896 A:middle
of the screen visually
right now,

00:39:52.896 --> 00:39:54.176 A:middle
so it would snap to the end.

00:39:54.606 --> 00:39:57.306 A:middle
So we would touch down on the
object, remove the animation,

00:39:57.306 --> 00:39:58.626 A:middle
and it would snap out
from under our finger

00:39:58.626 --> 00:39:59.616 A:middle
and land wherever it was going.

00:39:59.956 --> 00:40:00.526 A:middle
So we don't want that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.956 --> 00:40:00.526 A:middle
So we don't want that.

00:40:01.236 --> 00:40:03.216 A:middle
We have to go get the
presentation values

00:40:03.216 --> 00:40:05.496 A:middle
of where it currently is
on screen and set those

00:40:05.496 --> 00:40:07.746 A:middle
to be the new model values
so that there's no jump.

00:40:08.706 --> 00:40:10.716 A:middle
Now let's assume the thing we
were doing was animating just

00:40:10.716 --> 00:40:12.256 A:middle
its position, its
location on screen.

00:40:12.686 --> 00:40:15.146 A:middle
I'll give you an example of how
that would look in that case.

00:40:15.276 --> 00:40:17.616 A:middle
Of course, if you're animating
something else, like its bounds

00:40:17.616 --> 00:40:19.596 A:middle
or some other property, you'd
have to do the same thing

00:40:19.596 --> 00:40:21.046 A:middle
for whatever property
you're animating.

00:40:21.756 --> 00:40:23.166 A:middle
So in this case we're
just doing the center,

00:40:23.166 --> 00:40:25.246 A:middle
so let's get the
view, get its layer,

00:40:25.876 --> 00:40:28.156 A:middle
get the layer's presentation
layer, which is going to be

00:40:28.156 --> 00:40:30.346 A:middle
where it is on screen right
now; and in this case,

00:40:30.346 --> 00:40:32.006 A:middle
I'm asking for its position
because that's where --

00:40:32.476 --> 00:40:33.586 A:middle
its location on screen.

00:40:33.586 --> 00:40:34.556 A:middle
So we'll store that away here.

00:40:36.016 --> 00:40:37.896 A:middle
Then we just want to set that
to be the new model value

00:40:37.896 --> 00:40:39.856 A:middle
so that once we remove the
animation it doesn't jump.

00:40:39.856 --> 00:40:40.766 A:middle
It's going to end up right here.

00:40:41.456 --> 00:40:46.146 A:middle
Now, presentation - I'm
sorry, UIView's property

00:40:46.146 --> 00:40:47.346 A:middle
for this is called center.

00:40:47.696 --> 00:40:49.246 A:middle
CALayer's is called position.

00:40:49.246 --> 00:40:51.336 A:middle
They're actually the same thing,
so you can just assign one

00:40:51.336 --> 00:40:52.626 A:middle
to the other and not
really worry about it.

00:40:52.626 --> 00:40:53.556 A:middle
They are the same property.

00:40:53.556 --> 00:40:55.946 A:middle
They just have a different name
in UIKit and Core Animation.

00:40:56.866 --> 00:40:59.176 A:middle
So once we've set that, now
the model value is putting it

00:40:59.176 --> 00:41:00.416 A:middle
where we thought it
would be visually,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.176 --> 00:41:00.416 A:middle
where we thought it
would be visually,

00:41:00.416 --> 00:41:01.676 A:middle
because that's the
presentation value.

00:41:01.676 --> 00:41:03.046 A:middle
So we can just go and
remove the animation.

00:41:03.436 --> 00:41:05.516 A:middle
Now, in this case I'm
taking the shortcut

00:41:05.516 --> 00:41:06.846 A:middle
and just removing
all animations.

00:41:07.206 --> 00:41:09.176 A:middle
Now, you probably want to be a
little more careful than that

00:41:09.176 --> 00:41:10.186 A:middle
when you're doing it yourself

00:41:10.186 --> 00:41:12.226 A:middle
to make sure you're removing
only the animations you really

00:41:12.226 --> 00:41:13.036 A:middle
mean to be removing.

00:41:13.036 --> 00:41:14.596 A:middle
You have to be cognizant
of whether

00:41:14.596 --> 00:41:15.636 A:middle
or not there are others there.

00:41:16.156 --> 00:41:16.956 A:middle
But that's the key to it,

00:41:16.956 --> 00:41:18.496 A:middle
is just removing the
right animations.

00:41:18.596 --> 00:41:23.636 A:middle
So I mentioned that things were
going to be a little easier

00:41:23.796 --> 00:41:24.486 A:middle
when we were talking

00:41:24.486 --> 00:41:26.696 A:middle
about UIDynamicAnimator
earlier in the talk.

00:41:27.006 --> 00:41:28.516 A:middle
Now, this is the place
where things get easier

00:41:28.516 --> 00:41:29.916 A:middle
when you're using
a dynamic animator.

00:41:30.316 --> 00:41:33.356 A:middle
Because DynamicAnimator
doesn't have presentation

00:41:33.356 --> 00:41:36.326 A:middle
and model space, we don't have
this same complication of having

00:41:36.326 --> 00:41:38.026 A:middle
to figure out where it
is on-screen compared

00:41:38.026 --> 00:41:39.526 A:middle
to where the model is
or anything like that.

00:41:39.986 --> 00:41:41.856 A:middle
DynamicAnimator, it's
all just wherever it is

00:41:41.856 --> 00:41:43.336 A:middle
and it's happening
in your process

00:41:43.336 --> 00:41:45.836 A:middle
and the model value is
the correct position

00:41:45.836 --> 00:41:46.636 A:middle
on screen right now.

00:41:47.766 --> 00:41:48.586 A:middle
So stopping this

00:41:49.046 --> 00:41:51.006 A:middle
for a DynamicAnimator
is a lot simpler.

00:41:51.006 --> 00:41:53.536 A:middle
So let's take a look at that
code that we wrote earlier

00:41:53.646 --> 00:41:54.946 A:middle
in our GestureRecognizer method

00:41:54.946 --> 00:41:56.576 A:middle
where we were handling
the ended case.

00:41:56.996 --> 00:41:59.016 A:middle
Now, of course, we're trying
to deal with new touches coming

00:41:59.016 --> 00:42:00.776 A:middle
down so we want to
handle the began case


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.016 --> 00:42:00.776 A:middle
down so we want to
handle the began case

00:42:00.776 --> 00:42:01.786 A:middle
on our Gesture Recognizer.

00:42:01.826 --> 00:42:02.876 A:middle
So we'll make some
space for that.

00:42:04.386 --> 00:42:06.396 A:middle
And my suggestion for
what you would do here --

00:42:06.566 --> 00:42:08.336 A:middle
there's a couple of things you
could do, but the one I'm going

00:42:08.336 --> 00:42:09.366 A:middle
to suggest as a good option --

00:42:09.366 --> 00:42:12.016 A:middle
is to actually just remove
the thing that was animating

00:42:12.016 --> 00:42:14.766 A:middle
from the dynamic item behavior,
because once you've removed it,

00:42:14.766 --> 00:42:16.896 A:middle
it's no longer going to interact
with any of the other views;

00:42:16.896 --> 00:42:20.086 A:middle
it's going to lose any
velocity it may have had,

00:42:20.086 --> 00:42:22.266 A:middle
because you just took it
out of the dynamic system;

00:42:22.576 --> 00:42:24.106 A:middle
and now you'll be
able to manipulate it

00:42:24.106 --> 00:42:24.936 A:middle
and move it around yourself.

00:42:25.506 --> 00:42:27.826 A:middle
So we can take the dynamic item
behavior and remove the thing

00:42:27.826 --> 00:42:29.506 A:middle
that we're trying to interact
with, our target view.

00:42:30.466 --> 00:42:32.416 A:middle
Now, of course, once we've
removed it, it's no longer going

00:42:32.416 --> 00:42:34.896 A:middle
to have any new velocity when
we try to add velocity later,

00:42:34.896 --> 00:42:36.826 A:middle
so we have to put it back
in when the gesture's done.

00:42:37.256 --> 00:42:38.726 A:middle
So we'll take that
dynamicItemBehavior

00:42:38.726 --> 00:42:39.656 A:middle
and add it back at the end.

00:42:39.656 --> 00:42:41.906 A:middle
And there's other things
you could do instead.

00:42:41.906 --> 00:42:43.946 A:middle
If you really wanted to leave
it in the dynamic system,

00:42:43.946 --> 00:42:45.796 A:middle
you could subtract off
the current velocity

00:42:45.796 --> 00:42:46.936 A:middle
so it would just come to a rest.

00:42:47.426 --> 00:42:49.766 A:middle
But, first of all, the easiest
thing to do is to remove it,

00:42:49.766 --> 00:42:52.016 A:middle
and it's also probably what
you mean in a lot of cases,

00:42:52.296 --> 00:42:54.856 A:middle
because it'll stop it from
smacking against other views

00:42:54.856 --> 00:42:57.346 A:middle
in your system as
you drag it around.

00:42:59.336 --> 00:43:03.516 A:middle
So now we've really dealt
with most of the transitions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.336 --> 00:43:03.516 A:middle
So now we've really dealt
with most of the transitions

00:43:03.516 --> 00:43:04.286 A:middle
that we wanted to talk about.

00:43:04.286 --> 00:43:07.396 A:middle
We got our gesture to animation
going, we got animation

00:43:07.396 --> 00:43:08.326 A:middle
to animation going,

00:43:08.506 --> 00:43:10.546 A:middle
we got animation back
to gestures working.

00:43:10.846 --> 00:43:12.106 A:middle
So it seems like
everything's good.

00:43:12.106 --> 00:43:13.726 A:middle
We all -- visually,
everything looks great.

00:43:14.756 --> 00:43:17.406 A:middle
So we should be done, but
we've got 15 minutes left,

00:43:17.566 --> 00:43:20.646 A:middle
so what's going on?

00:43:20.926 --> 00:43:25.046 A:middle
Well, there's some complications
that really start to come

00:43:25.046 --> 00:43:27.166 A:middle
into things once you do
this in a real application.

00:43:27.646 --> 00:43:28.696 A:middle
So far everything
we've been talking

00:43:28.696 --> 00:43:29.866 A:middle
about is pretty theoretical.

00:43:29.986 --> 00:43:31.916 A:middle
If you're just doing animations,
it's all pretty easy.

00:43:32.426 --> 00:43:34.726 A:middle
But if you -- in any real
application you have other

00:43:34.726 --> 00:43:36.976 A:middle
state, transient
animation state,

00:43:37.016 --> 00:43:39.676 A:middle
that exists only during
transitions or animations.

00:43:39.976 --> 00:43:42.276 A:middle
Maybe when you start some
transition, you create a bunch

00:43:42.276 --> 00:43:44.166 A:middle
of extra views to use
during that animation,

00:43:44.166 --> 00:43:46.036 A:middle
and then when the animation
is done, you destroy them.

00:43:46.036 --> 00:43:48.496 A:middle
You have to know what the
right times are to create

00:43:48.496 --> 00:43:49.496 A:middle
and destroy these things.

00:43:49.846 --> 00:43:53.016 A:middle
And if we're stacking animations
with additive animations

00:43:53.016 --> 00:43:54.336 A:middle
and we're figuring out
that we're starting

00:43:54.336 --> 00:43:56.806 A:middle
and removing things in the
middle by allowing interaction

00:43:56.806 --> 00:43:59.446 A:middle
with gestures, it's no
longer immediately obvious

00:43:59.446 --> 00:44:02.136 A:middle
where the right places are
to make some of these changes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.446 --> 00:44:02.136 A:middle
where the right places are
to make some of these changes

00:44:02.136 --> 00:44:03.926 A:middle
to your view hierarchy
to set up and tear

00:44:03.926 --> 00:44:05.516 A:middle
down your transient
animation state.

00:44:06.356 --> 00:44:08.226 A:middle
So we're not going to
go through too much

00:44:08.226 --> 00:44:09.486 A:middle
in slides about this actually.

00:44:09.486 --> 00:44:11.786 A:middle
What we're going to do is just
do a demo showing you how you

00:44:11.786 --> 00:44:13.726 A:middle
can make this happen
in a real app.

00:44:13.726 --> 00:44:16.086 A:middle
So Andy's going to come back
up and write an app for you

00:44:16.306 --> 00:44:16.966 A:middle
that does all of that.

00:44:17.756 --> 00:44:18.556 A:middle
&gt;&gt; Thank you very much.

00:44:18.946 --> 00:44:21.756 A:middle
I am extremely excited
about this part of the talk.

00:44:21.756 --> 00:44:24.066 A:middle
I don't think we've ever talked
about this topic publicly

00:44:24.066 --> 00:44:26.586 A:middle
and we've been confronting it a
great deal ourselves as we think

00:44:26.586 --> 00:44:30.256 A:middle
about how to effectively deal
with these kinds of problems.

00:44:30.446 --> 00:44:32.846 A:middle
We want everything to be
fluid as much as possible

00:44:32.846 --> 00:44:37.186 A:middle
in our system, and that means
wrestling with these problems.

00:44:37.246 --> 00:44:40.606 A:middle
There's a superstructure of
state around your animations

00:44:41.416 --> 00:44:43.106 A:middle
which you need to deal with,
which you can't forget.

00:44:43.786 --> 00:44:45.976 A:middle
So I have a very
important application here.

00:44:45.976 --> 00:44:47.836 A:middle
It's been a key thing for us.

00:44:48.806 --> 00:44:52.666 A:middle
We're using it as a test ground
for this experimentation,

00:44:52.936 --> 00:44:53.896 A:middle
and it's called Toggle Bird.

00:44:54.416 --> 00:44:58.666 A:middle
Now, sometimes you need a bird.

00:44:58.886 --> 00:45:04.166 A:middle
So, great features, you press
a button and get a bird.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.886 --> 00:45:04.166 A:middle
So, great features, you press
a button and get a bird.

00:45:04.366 --> 00:45:05.176 A:middle
Sometimes you don't want a bird.

00:45:05.336 --> 00:45:06.416 A:middle
You press a button and
the bird goes away.

00:45:07.196 --> 00:45:08.056 A:middle
Now you don't have
a bird anymore.

00:45:08.256 --> 00:45:08.596 A:middle
That's great.

00:45:10.196 --> 00:45:12.986 A:middle
But, sometimes you're
indecisive.

00:45:13.886 --> 00:45:15.396 A:middle
You say, "Okay, well,
does this bird --

00:45:15.396 --> 00:45:17.056 A:middle
no, I don't actually
want the bird.

00:45:17.276 --> 00:45:19.526 A:middle
I was overeager with the bird.

00:45:20.096 --> 00:45:20.986 A:middle
Put the bird away.

00:45:20.986 --> 00:45:21.716 A:middle
Go away, bird."

00:45:21.936 --> 00:45:24.346 A:middle
But you can't, because
the button's disabled.

00:45:25.596 --> 00:45:26.676 A:middle
And that's frustrating.

00:45:27.096 --> 00:45:29.966 A:middle
You don't really want the
feeling where an animation's

00:45:29.966 --> 00:45:31.946 A:middle
in progress and so
the world must stop

00:45:32.536 --> 00:45:33.936 A:middle
until the animation is done.

00:45:34.496 --> 00:45:37.676 A:middle
So we could look at our code
and say, "Oh, okay, well,

00:45:37.876 --> 00:45:40.456 A:middle
I see a couple of pretty
big red flags here.

00:45:40.876 --> 00:45:42.866 A:middle
Looks like we're disabling

00:45:42.866 --> 00:45:46.306 A:middle
and re-enabling the birdToggle
button when this animation's

00:45:46.306 --> 00:45:49.206 A:middle
in flight, so I'll just go
ahead and comment out that code

00:45:49.206 --> 00:45:50.106 A:middle
and then everything
will be cool.

00:45:50.106 --> 00:45:52.926 A:middle
You know, the button's not
disabled anymore, looks good."

00:45:53.616 --> 00:45:56.546 A:middle
Let's walk through
this method together

00:45:57.016 --> 00:45:58.606 A:middle
because I think it
actually illustrates a lot

00:45:58.606 --> 00:46:01.456 A:middle
of the common problems that
people have when trying


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.606 --> 00:46:01.456 A:middle
of the common problems that
people have when trying

00:46:01.546 --> 00:46:03.076 A:middle
to make this kind of thing work.

00:46:04.266 --> 00:46:07.086 A:middle
So this is just the setter
for the birdExpanded property,

00:46:07.196 --> 00:46:08.806 A:middle
which you'll see
is just a property.

00:46:09.766 --> 00:46:12.756 A:middle
And this is a property
which is animatable,

00:46:13.306 --> 00:46:14.656 A:middle
which means I've
designed it so that,

00:46:14.936 --> 00:46:16.866 A:middle
if you set this property
inside an animation block,

00:46:16.866 --> 00:46:17.866 A:middle
then it'll be animated.

00:46:18.616 --> 00:46:19.506 A:middle
I think that's a nice pattern.

00:46:20.086 --> 00:46:24.046 A:middle
We do that by inheriting the
parent's animation context

00:46:24.646 --> 00:46:26.276 A:middle
by making a UIView
animation block

00:46:26.546 --> 00:46:27.686 A:middle
that is a 0-length duration.

00:46:27.776 --> 00:46:29.636 A:middle
So you'll see here
there's a toggleBird method

00:46:29.976 --> 00:46:33.666 A:middle
that sets the birdExpanded
property inside an

00:46:33.666 --> 00:46:34.336 A:middle
animation block.

00:46:34.336 --> 00:46:36.176 A:middle
That's how that part works.

00:46:36.176 --> 00:46:37.566 A:middle
So let's walk through
the rest of it together.

00:46:38.256 --> 00:46:40.496 A:middle
There's a bit of state
that we keep track of.

00:46:40.956 --> 00:46:42.136 A:middle
Is the bird expanded?

00:46:42.846 --> 00:46:47.146 A:middle
And if the bird is supposed
to be expanded anew,

00:46:47.476 --> 00:46:50.136 A:middle
we make a birdDrawerView,
set it up.

00:46:50.426 --> 00:46:53.096 A:middle
We want it to animate from,
you know, being full-width

00:46:53.096 --> 00:46:56.166 A:middle
but 0 height, so we do a
little layout initially.

00:46:56.206 --> 00:46:57.766 A:middle
So this is kind of
like a preamble.

00:46:58.276 --> 00:46:59.786 A:middle
You know, we're making
some stuff that we need,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:00.066 --> 00:47:03.086 A:middle
get it set up, and then we
actually do the animation.

00:47:03.086 --> 00:47:06.206 A:middle
This is the part that is now
additive, so that's great.

00:47:06.556 --> 00:47:09.036 A:middle
You know, we're just changing
this constraint's constant,

00:47:09.486 --> 00:47:11.146 A:middle
telling it to layout inside
of an animation block.

00:47:11.146 --> 00:47:14.706 A:middle
That will synthesize the correct
bounds and position animations

00:47:15.436 --> 00:47:16.486 A:middle
to actually get things moving.

00:47:16.486 --> 00:47:19.076 A:middle
And finally there's
something of a post-amble

00:47:19.316 --> 00:47:20.706 A:middle
when that animation's completed.

00:47:21.376 --> 00:47:24.136 A:middle
If the bird is no longer
supposed to be expanded,

00:47:24.426 --> 00:47:27.376 A:middle
we clean this up because
the bird is being drawn

00:47:27.926 --> 00:47:29.386 A:middle
with some very novel

00:47:29.386 --> 00:47:31.786 A:middle
and expensive rendering
technologies, and we don't want

00:47:31.786 --> 00:47:33.586 A:middle
to waste system resources
on that.

00:47:34.066 --> 00:47:36.126 A:middle
You know, you've got
to be good Samaritans.

00:47:36.526 --> 00:47:39.126 A:middle
So this is the entirety
of what's going on here,

00:47:40.166 --> 00:47:46.906 A:middle
and the problem arises when we
remove these enabled setters

00:47:47.226 --> 00:47:51.166 A:middle
because we can run through this
method multiple times while the

00:47:51.166 --> 00:47:52.176 A:middle
animation's in flight.

00:47:53.396 --> 00:47:57.686 A:middle
This completion block, as I said
earlier, is going to run even

00:47:57.686 --> 00:47:59.566 A:middle
if there are new
animations related

00:47:59.566 --> 00:48:00.736 A:middle
to the bird also running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:59.566 --> 00:48:00.736 A:middle
to the bird also running.

00:48:01.926 --> 00:48:06.086 A:middle
So we really have a more
complex state machine going

00:48:06.086 --> 00:48:08.746 A:middle
on than it seems at first.

00:48:09.356 --> 00:48:12.616 A:middle
So I'm just going to jump
right to the solution here.

00:48:12.716 --> 00:48:14.306 A:middle
Only a few lines change.

00:48:14.726 --> 00:48:16.636 A:middle
And first let me prove

00:48:16.636 --> 00:48:19.056 A:middle
that I have solved our
bird toggling problems.

00:48:19.456 --> 00:48:20.146 A:middle
It's very nice.

00:48:20.786 --> 00:48:22.916 A:middle
We can be indecisive
about the bird safely.

00:48:24.326 --> 00:48:26.256 A:middle
And here in the code I've
only changed a few lines.

00:48:26.836 --> 00:48:29.866 A:middle
I've got a new ibar,
and that ibar is going

00:48:29.866 --> 00:48:33.496 A:middle
to be tracking how many
active transitions we have.

00:48:33.716 --> 00:48:37.356 A:middle
So at the bottom, every time the
birdExpanded property changes,

00:48:37.356 --> 00:48:40.176 A:middle
we increment that; and
every time a bird expansion

00:48:40.176 --> 00:48:42.846 A:middle
or contraction animation
completes, we decrement it.

00:48:43.396 --> 00:48:44.816 A:middle
So we're just keeping
track of the number

00:48:44.816 --> 00:48:46.566 A:middle
of in-flight state
transitions currently.

00:48:46.566 --> 00:48:49.616 A:middle
And then we change our
preamble and post-amble

00:48:49.616 --> 00:48:50.796 A:middle
to consider that counter.

00:48:51.536 --> 00:48:54.006 A:middle
We say, "Okay, well,
only do this preamble

00:48:54.396 --> 00:48:58.376 A:middle
if we're transitioning from
not having any animations

00:48:58.596 --> 00:49:00.186 A:middle
to having some animations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.596 --> 00:49:00.186 A:middle
to having some animations.

00:49:01.556 --> 00:49:03.956 A:middle
Similarly, only do
our post-amble

00:49:03.956 --> 00:49:07.216 A:middle
if we're transitioning
from having animations

00:49:07.426 --> 00:49:09.256 A:middle
to no longer having
any animations at all."

00:49:09.926 --> 00:49:12.756 A:middle
And that alone solves
this problem.

00:49:13.246 --> 00:49:17.966 A:middle
I do want to show you
what this would look

00:49:17.966 --> 00:49:20.446 A:middle
like with iOS 7-style
animations.

00:49:20.846 --> 00:49:25.736 A:middle
Note that the bird jumps to
the finished value when I try

00:49:25.736 --> 00:49:26.816 A:middle
to make it reverse direction.

00:49:28.696 --> 00:49:33.386 A:middle
So even if I were to use the
BeginFromCurrentState option

00:49:33.976 --> 00:49:36.656 A:middle
to try to use presentation
values.

00:49:37.656 --> 00:49:39.116 A:middle
You see that when I
reverse direction,

00:49:39.116 --> 00:49:40.946 A:middle
it's kind of like the
bird hits a brick wall.

00:49:42.936 --> 00:49:49.266 A:middle
Now, we much prefer the
additive animation solution.

00:49:50.446 --> 00:49:51.156 A:middle
It's much smoother.

00:49:54.326 --> 00:49:56.436 A:middle
So all that's great, and I
want to show you quickly,

00:49:56.496 --> 00:50:00.826 A:middle
I'm just going to comment
this a little more in order


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:56.496 --> 00:50:00.826 A:middle
I'm just going to comment
this a little more in order

00:50:00.826 --> 00:50:04.736 A:middle
to make clear how general this
structure I've created is.

00:50:04.946 --> 00:50:06.846 A:middle
Almost everything I've
written here doesn't have to do

00:50:06.846 --> 00:50:08.106 A:middle
with birds or toggling.

00:50:08.696 --> 00:50:11.206 A:middle
That is the key point,
because you might be writing a

00:50:11.206 --> 00:50:11.986 A:middle
frog toggler.

00:50:13.306 --> 00:50:15.616 A:middle
You know, I don't know; I
want you to be creative.

00:50:15.916 --> 00:50:17.236 A:middle
So there's a few sections here.

00:50:17.236 --> 00:50:18.306 A:middle
There's a preamble section.

00:50:18.516 --> 00:50:21.206 A:middle
In the preamble section,
you can deal with all

00:50:21.206 --> 00:50:22.356 A:middle
of the possible states.

00:50:23.106 --> 00:50:25.726 A:middle
We only have a preamble for
the bird becoming expanded.

00:50:26.076 --> 00:50:27.356 A:middle
You could have a
preamble the other way.

00:50:28.076 --> 00:50:30.796 A:middle
Similarly, this counter, that's
not about birds or toggling.

00:50:31.026 --> 00:50:32.676 A:middle
That's just about
transitioning between states.

00:50:33.966 --> 00:50:37.096 A:middle
And in the post-amble, we
don't have a post-amble

00:50:37.096 --> 00:50:38.516 A:middle
for the bird being expanded.

00:50:38.636 --> 00:50:41.426 A:middle
We could. We have a post-amble
for the bird being contracted.

00:50:41.996 --> 00:50:44.306 A:middle
I want to point out that we're
checking the state at the time

00:50:44.306 --> 00:50:46.626 A:middle
of the completion handler
being called rather

00:50:46.626 --> 00:50:49.916 A:middle
than the argument being passed
into this method because, again,

00:50:49.916 --> 00:50:51.126 A:middle
these completion
handlers can stack

00:50:51.496 --> 00:50:53.406 A:middle
and the state might no longer
be what you thought it was.

00:50:54.986 --> 00:50:57.326 A:middle
The one last thing I
want to point out is

00:50:57.326 --> 00:50:59.516 A:middle
that this is the
solution for two states,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:00.666 --> 00:51:02.686 A:middle
but if you have three states
that you could move between,

00:51:03.166 --> 00:51:04.576 A:middle
you could handle
that this way, too.

00:51:04.876 --> 00:51:07.806 A:middle
You just need a counter
for each of the states,

00:51:08.056 --> 00:51:11.196 A:middle
and that counter would track
how many transitions to or from

00:51:11.196 --> 00:51:12.206 A:middle
that state or in-flight.

00:51:12.746 --> 00:51:17.046 A:middle
Right now we only have one
counter, because the number

00:51:17.046 --> 00:51:19.756 A:middle
of transitions to or
from each of the states

00:51:19.756 --> 00:51:21.716 A:middle
in our bi-stable system
is always the same.

00:51:22.626 --> 00:51:24.646 A:middle
So this is a solution
which generalizes

00:51:25.636 --> 00:51:29.766 A:middle
and which doesn't have anything
to do with birds or toggling.

00:51:29.886 --> 00:51:31.556 A:middle
&gt;&gt; Alright, let's head
back to slides to wrap up.

00:51:32.036 --> 00:51:33.966 A:middle
&gt;&gt; Thank you.

00:51:34.516 --> 00:51:38.546 A:middle
[ Applause ]

00:51:39.046 --> 00:51:41.316 A:middle
As I said earlier, we don't want

00:51:41.316 --> 00:51:43.206 A:middle
to stop the world while
animations are in-flight.

00:51:43.206 --> 00:51:43.946 A:middle
They might be beautiful,

00:51:43.946 --> 00:51:45.316 A:middle
but your user is
trying to do things.

00:51:46.466 --> 00:51:47.666 A:middle
We also want to keep
things fluid.

00:51:48.556 --> 00:51:53.716 A:middle
So, use that gesture
velocity and translate it

00:51:53.716 --> 00:51:56.946 A:middle
into the animated actions which
result and makes an interface

00:51:56.946 --> 00:51:57.866 A:middle
which feels more responsive.

00:51:58.336 --> 00:52:00.776 A:middle
Once you've got animations
in flight,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:58.336 --> 00:52:00.776 A:middle
Once you've got animations
in flight,

00:52:01.066 --> 00:52:04.876 A:middle
make sure that they smoothly
transition to any new animations

00:52:05.036 --> 00:52:07.426 A:middle
which might replace those
first sets of animations.

00:52:08.756 --> 00:52:10.326 A:middle
Finally, as I was
saying a moment ago,

00:52:10.776 --> 00:52:11.626 A:middle
don't stop the world.

00:52:11.846 --> 00:52:13.236 A:middle
Try to make animations
interruptible

00:52:13.236 --> 00:52:13.976 A:middle
as much as possible.

00:52:14.266 --> 00:52:15.936 A:middle
It is more work,
but we've talked

00:52:15.936 --> 00:52:17.806 A:middle
through some techniques
for dealing with it.

00:52:19.016 --> 00:52:20.336 A:middle
And, finally, keep in mind

00:52:20.546 --> 00:52:22.576 A:middle
that there may be
additional associated state

00:52:22.826 --> 00:52:24.596 A:middle
on top of these animations.

00:52:25.956 --> 00:52:27.936 A:middle
That is often what
makes it more difficult

00:52:28.226 --> 00:52:31.366 A:middle
to enable user interaction
while animations are in flight.

00:52:31.806 --> 00:52:33.776 A:middle
But we've just talked
through one technique

00:52:33.776 --> 00:52:36.026 A:middle
which I think is quite
general for dealing with that.

00:52:36.546 --> 00:52:40.166 A:middle
And finally, if you
have more questions,

00:52:40.166 --> 00:52:41.196 A:middle
I encourage you to ask Jake.

00:52:41.856 --> 00:52:43.376 A:middle
We have a Core Animation
Programming Guide

00:52:43.376 --> 00:52:45.506 A:middle
which actually does talk
about many of these topics

00:52:45.766 --> 00:52:46.706 A:middle
and the developer forum

00:52:46.706 --> 00:52:48.556 A:middle
where you can ask
your peers questions.

00:52:49.176 --> 00:52:50.896 A:middle
I hope you've had a
fantastic conference

00:52:50.896 --> 00:52:52.506 A:middle
and I can't wait to
see what you make.

00:52:52.716 --> 00:52:54.166 A:middle
Thank you.

00:52:55.516 --> 00:52:57.850 A:middle
[ Applause ]

