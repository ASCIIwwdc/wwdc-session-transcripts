WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.516 --> 00:00:17.146 A:middle
[ Applause ]

00:00:17.646 --> 00:00:18.096 A:middle
&gt;&gt; Thank you.

00:00:18.396 --> 00:00:20.106 A:middle
So, good morning, everyone,

00:00:20.386 --> 00:00:23.156 A:middle
and welcome to the What's
New in SceneKit session.

00:00:24.476 --> 00:00:28.686 A:middle
So, SceneKit is a
framework to help you load

00:00:28.686 --> 00:00:31.966 A:middle
and integrate 3D objects or
3D scenes in your application.

00:00:32.976 --> 00:00:36.706 A:middle
It can be used for
different purposes, like UI,

00:00:36.846 --> 00:00:39.866 A:middle
data visualization, or
presentations, like here;

00:00:39.866 --> 00:00:44.836 A:middle
and now with this release
also to build casual 3D games.

00:00:45.296 --> 00:00:49.166 A:middle
It was first introduced
on the Mac on 10.8,

00:00:49.496 --> 00:00:51.526 A:middle
and it is now available on iOS.

00:00:53.426 --> 00:00:54.116 A:middle
Yeah, thank you.

00:00:55.516 --> 00:00:58.386 A:middle
[ Applause ]

00:00:58.886 --> 00:01:02.646 A:middle
Regarding the layering, SceneKit
is a high-level Objective-C API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.886 --> 00:01:02.646 A:middle
Regarding the layering, SceneKit
is a high-level Objective-C API.

00:01:03.476 --> 00:01:06.366 A:middle
It's built on top of
OpenGL and OpenGL ES,

00:01:06.786 --> 00:01:10.126 A:middle
and it can collaborate well with
those aerographic technologies,

00:01:10.266 --> 00:01:13.136 A:middle
like Core Image and Core
Animation, and also,

00:01:13.136 --> 00:01:15.636 A:middle
especially now, with
SpriteKit, and I will detail

00:01:15.636 --> 00:01:16.986 A:middle
that in the next slide.

00:01:17.506 --> 00:01:22.416 A:middle
In addition of being available
in iOS, which is really great,

00:01:23.146 --> 00:01:26.356 A:middle
we also have a set of cool new
features ready for this release,

00:01:27.006 --> 00:01:29.256 A:middle
like physics, particles
in physics fields.

00:01:29.826 --> 00:01:32.336 A:middle
I will present them
in the next slides.

00:01:33.666 --> 00:01:36.146 A:middle
Before that, some
related sessions.

00:01:37.396 --> 00:01:39.406 A:middle
So, I invite you
first to have a look

00:01:39.406 --> 00:01:40.896 A:middle
at last year's presentation,

00:01:41.526 --> 00:01:44.136 A:middle
since even if SceneKit
was OS X only,

00:01:44.656 --> 00:01:48.146 A:middle
everything represented last
year is applicable now on iOS.

00:01:49.426 --> 00:01:52.236 A:middle
Then this session is about
What's New in SceneKit.

00:01:52.236 --> 00:01:56.126 A:middle
We also have a more hands-on
session at 11:30, same room,

00:01:56.796 --> 00:01:58.986 A:middle
where we will show
how we build a little

00:01:58.986 --> 00:02:01.766 A:middle
but fully functional game, and
we'll explain how we did that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.986 --> 00:02:01.766 A:middle
but fully functional game, and
we'll explain how we did that.

00:02:03.076 --> 00:02:04.536 A:middle
Also, in case you missed it,

00:02:04.976 --> 00:02:06.836 A:middle
have a look at the
SpriteKit session

00:02:06.836 --> 00:02:10.506 A:middle
that was earlier this
week, since SceneKit

00:02:10.506 --> 00:02:12.306 A:middle
and SpriteKit can
really work well together

00:02:12.306 --> 00:02:13.926 A:middle
to achieve great results.

00:02:14.456 --> 00:02:19.536 A:middle
Okay, for this presentation,
I will start

00:02:19.536 --> 00:02:23.726 A:middle
with a very brief overview of
the SceneKit main principles.

00:02:24.766 --> 00:02:26.086 A:middle
It will be very quick.

00:02:26.086 --> 00:02:27.876 A:middle
If you want more
details, please refer

00:02:27.876 --> 00:02:29.286 A:middle
to last year's presentation.

00:02:29.586 --> 00:02:33.576 A:middle
And then I will present the
steps to create an application

00:02:33.576 --> 00:02:36.826 A:middle
that uses SceneKit and I
will present the new features

00:02:37.006 --> 00:02:37.746 A:middle
as I go along.

00:02:39.516 --> 00:02:40.506 A:middle
So, the overview.

00:02:41.876 --> 00:02:44.056 A:middle
So, a scene in SceneKit
is represented

00:02:44.056 --> 00:02:45.686 A:middle
by the SCNScene class.

00:02:46.056 --> 00:02:47.846 A:middle
If you are already
familiar with SpriteKit,

00:02:48.266 --> 00:02:50.816 A:middle
that's the equivalent
of SKScene.

00:02:51.756 --> 00:02:54.506 A:middle
So that's the top-level object,
and the scene has a root node

00:02:54.726 --> 00:02:58.866 A:middle
of the SCNNode class, and a
node represents a location

00:02:58.866 --> 00:02:59.676 A:middle
in 3D space.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.316 --> 00:03:02.596 A:middle
A node may have some child
nodes that are related

00:03:02.646 --> 00:03:05.936 A:middle
to their parent node, just
like SKNode are related

00:03:05.936 --> 00:03:09.276 A:middle
to their parent node, and then,

00:03:09.376 --> 00:03:12.126 A:middle
a node by itself doesn't
render anything onscreen.

00:03:12.296 --> 00:03:14.076 A:middle
It's just a location
in 3D space.

00:03:14.656 --> 00:03:17.276 A:middle
And unlike SpriteKit,
where you use subclasses

00:03:17.276 --> 00:03:20.226 A:middle
to render things onscreen,
here with SceneKit,

00:03:20.226 --> 00:03:21.966 A:middle
you attach attributes
to your nodes.

00:03:22.696 --> 00:03:24.976 A:middle
So attributes you can
attach as the following:

00:03:24.976 --> 00:03:28.306 A:middle
you can attach a light
or a camera or geometry.

00:03:29.046 --> 00:03:32.346 A:middle
And attaching a geometry to
a node means that you want

00:03:32.346 --> 00:03:34.886 A:middle
to render that geometry
at the node location.

00:03:35.676 --> 00:03:37.636 A:middle
So, if you want to
render the same geometry

00:03:37.636 --> 00:03:40.736 A:middle
in multiple places, you simply
share the same geometry instance

00:03:41.036 --> 00:03:41.886 A:middle
to multiple nodes.

00:03:42.656 --> 00:03:44.916 A:middle
So, let's go quickly
over these attributes.

00:03:45.306 --> 00:03:49.986 A:middle
So, the first one
is SCNGeometry.

00:03:50.446 --> 00:03:54.976 A:middle
It represents a geometry, so
a set of triangles, vertices,

00:03:54.976 --> 00:03:56.406 A:middle
normals, and texture
coordinates,

00:03:57.026 --> 00:03:58.626 A:middle
and it has also a
a number of materials

00:03:58.626 --> 00:04:00.666 A:middle
that controls the
appearance of the surface.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.626 --> 00:04:00.666 A:middle
that controls the
appearance of the surface.

00:04:02.336 --> 00:04:04.426 A:middle
Then, the second
attribute is SCNLight.

00:04:04.556 --> 00:04:06.676 A:middle
It represents a light source.

00:04:07.056 --> 00:04:11.006 A:middle
We support 4 types of lights:
to illuminate from a point,

00:04:11.356 --> 00:04:14.536 A:middle
in a direction, as a spot,
or equal in every directions

00:04:15.146 --> 00:04:16.805 A:middle
with the ambient light.

00:04:17.476 --> 00:04:20.286 A:middle
Then, next attribute, SCNCamera.

00:04:21.736 --> 00:04:24.796 A:middle
A node with a camera attached
can be used as a point of view

00:04:24.796 --> 00:04:26.996 A:middle
to render your scene,
so it's simple

00:04:26.996 --> 00:04:29.266 A:middle
as setting the pointOfView
property of your view

00:04:29.606 --> 00:04:31.826 A:middle
to one node that has
a camera attached.

00:04:32.256 --> 00:04:34.686 A:middle
For example, here is a point
of view to render the scene,

00:04:35.686 --> 00:04:36.916 A:middle
and here is another
point of view.

00:04:38.276 --> 00:04:41.526 A:middle
So, to sum up, when you
create a scene with SceneKit,

00:04:41.526 --> 00:04:43.086 A:middle
you first start by
creating nodes

00:04:43.086 --> 00:04:45.096 A:middle
and placing them in 3D space.

00:04:46.436 --> 00:04:47.876 A:middle
Then you can add a child node

00:04:48.036 --> 00:04:50.306 A:middle
that are relative to
their parent node.

00:04:51.476 --> 00:04:54.416 A:middle
Then you attach geometries
to these nodes

00:04:54.416 --> 00:04:55.826 A:middle
to render surfaces on-screen.

00:04:56.656 --> 00:04:58.096 A:middle
Then you configure the materials

00:04:58.236 --> 00:04:59.806 A:middle
to change their colors
and textures.

00:04:59.886 --> 00:05:03.666 A:middle
And finally, you can also attach
a light to one node if you want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.886 --> 00:05:03.666 A:middle
And finally, you can also attach
a light to one node if you want

00:05:03.666 --> 00:05:05.666 A:middle
to illuminate your scene.

00:05:06.216 --> 00:05:08.896 A:middle
So that's our very
brief introduction.

00:05:08.986 --> 00:05:11.556 A:middle
Now let's see how
to get started.

00:05:12.766 --> 00:05:18.386 A:middle
So, in Xcode 6, there is
now a new game template

00:05:18.386 --> 00:05:23.236 A:middle
from which you can choose to
create a SceneKit base game,

00:05:24.166 --> 00:05:25.696 A:middle
and this will create
a new application

00:05:25.696 --> 00:05:27.616 A:middle
with the SCNView
already set up for you.

00:05:28.246 --> 00:05:30.116 A:middle
If you already have
an application,

00:05:30.116 --> 00:05:32.136 A:middle
you can also use the
Interface Builder and drag

00:05:32.136 --> 00:05:34.726 A:middle
and drop SCNView from the
Interface Builder Library

00:05:34.856 --> 00:05:35.926 A:middle
into your application.

00:05:36.336 --> 00:05:39.926 A:middle
Note that SceneKit gives you
a view if you want to render

00:05:39.926 --> 00:05:42.766 A:middle
into a view, but there
is also SCNLayer on OS X,

00:05:42.766 --> 00:05:47.556 A:middle
and SCNRenderer if you
want to render off-screen

00:05:47.556 --> 00:05:49.336 A:middle
into an arbitrary
OpenGL context.

00:05:49.966 --> 00:05:53.286 A:middle
Now you know how
to render a scene;

00:05:53.286 --> 00:05:54.596 A:middle
let's see how to create one.

00:05:55.416 --> 00:05:58.006 A:middle
So, to create a scene, you
have basically 2 options:

00:05:58.006 --> 00:06:00.016 A:middle
you can user-create
everything programmatically,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.006 --> 00:06:00.016 A:middle
you can user-create
everything programmatically,

00:06:00.596 --> 00:06:01.956 A:middle
or you can load a
scene from a file.

00:06:03.116 --> 00:06:04.716 A:middle
To create a scene
programmatically,

00:06:05.626 --> 00:06:08.726 A:middle
you can use one of our
built-in parametric geometries,

00:06:09.076 --> 00:06:12.636 A:middle
like a box, a plane, a
torus, a cylinder, etcetera.

00:06:13.446 --> 00:06:17.146 A:middle
You can configure the
parameters, like width, length,

00:06:17.686 --> 00:06:20.076 A:middle
height, corner radius,
segment count, etcetera.

00:06:21.086 --> 00:06:25.406 A:middle
You also have SCNText to
create 3D text with extrusion

00:06:25.406 --> 00:06:28.336 A:middle
and chamfer and multiple
materials,

00:06:28.766 --> 00:06:31.236 A:middle
and it supports basically
all the fonts

00:06:31.236 --> 00:06:33.176 A:middle
and layouts supported
by Core Text.

00:06:34.006 --> 00:06:38.286 A:middle
You can also use SCNShape
to create a 3D object

00:06:38.716 --> 00:06:42.946 A:middle
from a 2D Bezier path by
extruding it and chamfering it.

00:06:42.946 --> 00:06:45.096 A:middle
So, for example, here
is a 2D Bezier pass,

00:06:45.166 --> 00:06:49.866 A:middle
and I can extrude it to create
a 3D object from it very easily.

00:06:50.426 --> 00:06:53.306 A:middle
And also, if you need, you can
also create your fully custom

00:06:53.306 --> 00:06:56.526 A:middle
geometry by placing
your custom vertices,

00:06:56.526 --> 00:06:58.136 A:middle
normal and texture coordinates.

00:06:58.136 --> 00:06:59.336 A:middle
So here you have
the full control

00:06:59.336 --> 00:07:03.546 A:middle
and with SCNGeometry API.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:59.336 --> 00:07:03.546 A:middle
and with SCNGeometry API.

00:07:03.546 --> 00:07:05.246 A:middle
And also new in this release,

00:07:05.666 --> 00:07:08.766 A:middle
you can also now
subdivide your geometry

00:07:08.946 --> 00:07:12.076 A:middle
with the subdivisionLevel
property of SCNGeometry.

00:07:12.776 --> 00:07:17.006 A:middle
This uses Pixar OpenSubdiv
technology to achieve this.

00:07:17.326 --> 00:07:18.326 A:middle
So, for example, here

00:07:18.996 --> 00:07:22.076 A:middle
on the left you have the
model not subdivided yet,

00:07:22.236 --> 00:07:25.266 A:middle
and on the right with 1
iteration of subdivision.

00:07:25.756 --> 00:07:30.776 A:middle
Okay, so that to create
scenes programmatically; now,

00:07:30.776 --> 00:07:32.796 A:middle
you can also load a
scene from a file.

00:07:33.526 --> 00:07:37.026 A:middle
And loading a scene from a file
lets you load a scene fully

00:07:37.026 --> 00:07:41.466 A:middle
configured by your artist that
will include all the geometries,

00:07:41.466 --> 00:07:44.106 A:middle
all the nodal hierarchies,
the lightings, the textures,

00:07:44.556 --> 00:07:45.856 A:middle
the position of your cameras,

00:07:46.146 --> 00:07:48.156 A:middle
all the skin information,
etcetera.

00:07:49.066 --> 00:07:51.566 A:middle
SceneKit supports
COLLADA documents

00:07:52.446 --> 00:07:54.586 A:middle
with the extension .dae.

00:07:55.016 --> 00:07:56.916 A:middle
It's an XML-based file format.

00:07:58.736 --> 00:08:02.236 A:middle
We now also support
the Alembic file format


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:58.736 --> 00:08:02.236 A:middle
We now also support
the Alembic file format

00:08:02.686 --> 00:08:05.106 A:middle
with the extension .abc.

00:08:05.906 --> 00:08:09.946 A:middle
So, Alembic is quite popular in
the video industry, for example,

00:08:10.736 --> 00:08:12.696 A:middle
and with Alembic you
can load geometries

00:08:12.696 --> 00:08:14.096 A:middle
and animations exclusively.

00:08:15.426 --> 00:08:18.606 A:middle
So, once you get your 3D
file from your artist,

00:08:19.316 --> 00:08:23.346 A:middle
you can have a preview of it in
Preview, or directly in Finder

00:08:23.346 --> 00:08:27.196 A:middle
with QuickLook, and you can
open it and have a preview

00:08:27.196 --> 00:08:28.386 A:middle
and do more with Xcode.

00:08:29.896 --> 00:08:32.826 A:middle
Xcode has a built-in
COLLADA editor

00:08:33.096 --> 00:08:36.285 A:middle
that will let you
inspect your 3D files.

00:08:37.506 --> 00:08:39.726 A:middle
To be clear, it's
not a modeling tool;

00:08:40.056 --> 00:08:42.796 A:middle
this is not where you
will create your models

00:08:42.796 --> 00:08:43.846 A:middle
and create your scene.

00:08:43.846 --> 00:08:47.696 A:middle
This is more a tool to
inspect the hierarchy of nodes,

00:08:47.696 --> 00:08:51.196 A:middle
their names, you can change the
materials, adjust the lighting,

00:08:51.196 --> 00:08:53.286 A:middle
and do the scan of
things, typically.

00:08:53.506 --> 00:08:56.676 A:middle
You can tune your scene for
your application with Xcode.

00:08:59.996 --> 00:09:01.806 A:middle
Once you have your
scene ready to load it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.996 --> 00:09:01.806 A:middle
Once you have your
scene ready to load it

00:09:01.806 --> 00:09:03.546 A:middle
at run time, it's easy.

00:09:03.546 --> 00:09:06.736 A:middle
You first add your COLLADA
file to your resource

00:09:06.736 --> 00:09:10.496 A:middle
as a normal resource,
and then, at runtime,

00:09:10.496 --> 00:09:17.706 A:middle
you use SCNScene sceneNamed
to load it, or Scene with URL.

00:09:18.116 --> 00:09:21.586 A:middle
New in this release, we also
provide an alternate way

00:09:21.586 --> 00:09:22.656 A:middle
to manage your assets,

00:09:23.176 --> 00:09:26.786 A:middle
and we call that
SceneKit Assets Catalogs.

00:09:27.826 --> 00:09:30.076 A:middle
An Asset Catalog
is simply a folder

00:09:30.316 --> 00:09:35.446 A:middle
with a .scnassets extension,
and what it does is that,

00:09:35.706 --> 00:09:39.116 A:middle
if you put your assets in it,
Xcode will copy this folder

00:09:39.116 --> 00:09:42.496 A:middle
at build-time by preserving
your folder hierarchy.

00:09:43.716 --> 00:09:44.786 A:middle
So, the first advantage is

00:09:44.916 --> 00:09:48.456 A:middle
that it lets you organize your
assets the way you want --

00:09:48.616 --> 00:09:50.726 A:middle
for example by having
your models in one folder,

00:09:50.726 --> 00:09:54.256 A:middle
your textures in another
one, your particles in

00:09:54.256 --> 00:09:57.226 A:middle
yet another one -- or
organize your assets by level

00:09:57.226 --> 00:09:58.236 A:middle
if you are building a game.

00:09:59.356 --> 00:10:00.956 A:middle
The second advantage is


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.356 --> 00:10:00.956 A:middle
The second advantage is

00:10:00.956 --> 00:10:03.516 A:middle
that Assets Catalogs will
give you some options

00:10:03.676 --> 00:10:08.016 A:middle
because the Assets Catalogs
are processed at build-time,

00:10:08.446 --> 00:10:11.676 A:middle
and so you have options
to optimize your assets

00:10:12.116 --> 00:10:16.766 A:middle
at build-time by, for example,
interleaving the geometry data

00:10:16.996 --> 00:10:22.496 A:middle
to be more efficient on iOS, or
by converting the orientations

00:10:22.496 --> 00:10:24.826 A:middle
of your models, too, so
that they are all consistent

00:10:24.996 --> 00:10:26.126 A:middle
across your game.

00:10:30.186 --> 00:10:33.736 A:middle
Okay, once you have your scene
loaded to display it, it's easy.

00:10:33.736 --> 00:10:36.596 A:middle
Simply assign your scene to your
view with the scene property.

00:10:37.196 --> 00:10:40.186 A:middle
The view will automatically
display the scene, and also,

00:10:40.516 --> 00:10:42.066 A:middle
if you modify your scene graph,

00:10:42.066 --> 00:10:44.276 A:middle
the view will automatically
reflect your changes.

00:10:44.666 --> 00:10:47.346 A:middle
There is no need to call
setNeedsDisplay,

00:10:47.956 --> 00:10:49.906 A:middle
for example.

00:10:50.606 --> 00:10:53.106 A:middle
Okay, so now we have seen how
to load and display your scene;

00:10:53.106 --> 00:10:55.026 A:middle
let's see how to give
life to those scenes.

00:10:56.296 --> 00:10:59.596 A:middle
To animate your objects,
you have several options.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:00.126 --> 00:11:02.486 A:middle
You can update the position

00:11:02.486 --> 00:11:04.916 A:middle
of your objects programmatically
at every frame.

00:11:05.886 --> 00:11:07.546 A:middle
You can configure animations

00:11:07.546 --> 00:11:11.286 A:middle
for a given duration
and let it play.

00:11:11.986 --> 00:11:12.706 A:middle
New in this release,

00:11:12.706 --> 00:11:14.626 A:middle
we introduce the
concept of actions.

00:11:14.786 --> 00:11:16.676 A:middle
I will present that.

00:11:16.816 --> 00:11:19.146 A:middle
You can also set
up some constraints

00:11:19.146 --> 00:11:20.476 A:middle
between your 3D objects.

00:11:20.746 --> 00:11:23.656 A:middle
And last I will present how
you can animate your scenes

00:11:23.656 --> 00:11:24.446 A:middle
using physics.

00:11:25.146 --> 00:11:28.826 A:middle
So first, the per-frame update.

00:11:28.826 --> 00:11:32.216 A:middle
If you need to update your
objects on a per-frame basis,

00:11:33.466 --> 00:11:37.626 A:middle
it is recommended to use one
of the delegate methods here.

00:11:37.986 --> 00:11:40.376 A:middle
So here is how the game
loops look like; so,

00:11:40.376 --> 00:11:43.366 A:middle
this is what is done at every
frame when your game runs.

00:11:44.286 --> 00:11:48.396 A:middle
So it's the combination of
delegate method that we call

00:11:48.396 --> 00:11:51.646 A:middle
and you implement and some
SceneKit internal processes,

00:11:51.746 --> 00:11:52.996 A:middle
like our rendering typically.

00:11:53.886 --> 00:11:56.806 A:middle
So basically, you will
implement the update method

00:11:57.266 --> 00:11:58.766 A:middle
to implement your game logic,

00:11:58.876 --> 00:12:01.636 A:middle
and you can here move your
objects programmatically.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.876 --> 00:12:01.636 A:middle
and you can here move your
objects programmatically.

00:12:02.046 --> 00:12:07.826 A:middle
It is recommended to use
these callbacks essentially

00:12:07.826 --> 00:12:11.876 A:middle
for performance reasons, because
when these callback are called,

00:12:12.116 --> 00:12:15.016 A:middle
the scene is already
loaded for you to modify it.

00:12:15.896 --> 00:12:19.986 A:middle
If you do it in your own thread,
your changes will be committed

00:12:20.086 --> 00:12:21.386 A:middle
on the next transaction

00:12:21.566 --> 00:12:23.866 A:middle
and it won't be necessarily
synchronized

00:12:23.966 --> 00:12:24.846 A:middle
with the current frame.

00:12:25.426 --> 00:12:29.336 A:middle
Note that you are also have
some callbacks to be notified

00:12:29.336 --> 00:12:30.636 A:middle
when the animations did apply

00:12:30.636 --> 00:12:32.976 A:middle
and when the physics did
stimulate if you need

00:12:32.976 --> 00:12:36.356 A:middle
to do whatever actions
after these operations.

00:12:37.456 --> 00:12:39.296 A:middle
So, that's for per-frame
updates.

00:12:40.046 --> 00:12:44.256 A:middle
Now, another way is to configure
actions - animation, sorry.

00:12:45.366 --> 00:12:49.096 A:middle
So, for animations, SceneKit
uses the same programming model

00:12:49.096 --> 00:12:51.976 A:middle
as Core Animation,
which supports implicit

00:12:51.976 --> 00:12:56.456 A:middle
and explicit animations, and
almost all the properties

00:12:56.456 --> 00:12:58.436 A:middle
of the scene graph
are animatable.

00:12:59.786 --> 00:13:03.546 A:middle
So, for implicit animations, it
works just like Core Animations:


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.786 --> 00:13:03.546 A:middle
So, for implicit animations, it
works just like Core Animations:

00:13:03.546 --> 00:13:07.756 A:middle
you first start a transaction
with a given duration,

00:13:08.836 --> 00:13:10.846 A:middle
then you modify whatever
property you want

00:13:10.846 --> 00:13:13.846 A:middle
on the scene graph, and
last you commit your changes

00:13:13.996 --> 00:13:15.396 A:middle
and it animates implicitly.

00:13:15.886 --> 00:13:22.516 A:middle
For explicit animations,
here we use directly the APIs

00:13:22.516 --> 00:13:23.426 A:middle
of Core Animation.

00:13:23.586 --> 00:13:25.666 A:middle
We support CABasicAnimation,

00:13:25.756 --> 00:13:28.396 A:middle
CAKeyFrameAnimation,
and CAAnimationGroup.

00:13:28.816 --> 00:13:33.216 A:middle
For example, here I set up
a simple basic animation

00:13:33.216 --> 00:13:34.886 A:middle
that targets the
rotation of my node,

00:13:35.606 --> 00:13:38.696 A:middle
then I configure its duration,
its destination value,

00:13:38.696 --> 00:13:41.946 A:middle
and set it to repeat forever,
and finally, I add my animation

00:13:41.946 --> 00:13:45.626 A:middle
with addAnimation forKey -
so, just like Core Animation.

00:13:46.006 --> 00:13:48.536 A:middle
And it makes my nodes to
rotate forever like this.

00:13:53.616 --> 00:13:54.896 A:middle
Okay, don't worry.

00:13:55.616 --> 00:14:00.736 A:middle
So, note that we also have
some extensions, some additions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:55.616 --> 00:14:00.736 A:middle
So, note that we also have
some extensions, some additions

00:14:00.836 --> 00:14:02.566 A:middle
in Core Animation animations.

00:14:02.826 --> 00:14:05.166 A:middle
The first one is
animation events.

00:14:05.636 --> 00:14:09.996 A:middle
Animation events lets you
trigger a custom block of code

00:14:09.996 --> 00:14:13.326 A:middle
at some specific
progress of you animation.

00:14:14.336 --> 00:14:17.416 A:middle
A typical example, for
example, is to play a sound

00:14:17.516 --> 00:14:19.266 A:middle
at some progress
in the animation.

00:14:19.626 --> 00:14:25.336 A:middle
For example, here, I'm playing
a sound at 60% of my animation,

00:14:25.336 --> 00:14:29.246 A:middle
so if I press Next, you
can see it calls my block

00:14:29.246 --> 00:14:31.116 A:middle
at 60% and plays that sound.

00:14:31.986 --> 00:14:33.566 A:middle
So that's the first addition,

00:14:33.566 --> 00:14:36.026 A:middle
and the second addition
is smooth transitions.

00:14:37.466 --> 00:14:42.116 A:middle
So this is useful to blend
one animation onto another.

00:14:42.556 --> 00:14:43.716 A:middle
So, for example, here,

00:14:43.986 --> 00:14:46.496 A:middle
the monster is playing
an idle animation.

00:14:47.986 --> 00:14:51.656 A:middle
If I press Next, I will start an
attack animation on top of it.

00:14:51.966 --> 00:14:53.706 A:middle
By default, without any fade-in

00:14:53.706 --> 00:14:56.976 A:middle
and fade-out duration,
it looks like this.

00:14:57.446 --> 00:14:59.936 A:middle
Okay, I will do it one more
time; look carefully at the end

00:14:59.936 --> 00:15:01.186 A:middle
of the attack animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:59.936 --> 00:15:01.186 A:middle
of the attack animation.

00:15:03.556 --> 00:15:06.246 A:middle
Okay, so this is not super
smooth, not really great,

00:15:07.376 --> 00:15:10.726 A:middle
and if I simply configure
the fadeInDuration

00:15:10.726 --> 00:15:12.936 A:middle
and fadeOutDuration of
the attack animation,

00:15:13.576 --> 00:15:16.146 A:middle
it will make the effect
of the attack animation

00:15:16.616 --> 00:15:18.746 A:middle
to smoothly increase
at the beginning

00:15:18.826 --> 00:15:20.816 A:middle
and smoothly decrease
at the end.

00:15:21.076 --> 00:15:23.526 A:middle
So, now look at the same thing.

00:15:24.206 --> 00:15:27.226 A:middle
Okay, one more time.

00:15:27.396 --> 00:15:29.536 A:middle
So now it's smooth,
so it's much better.

00:15:29.716 --> 00:15:30.736 A:middle
Yeah, thank you.

00:15:31.516 --> 00:15:35.426 A:middle
[ Applause ]

00:15:35.926 --> 00:15:38.696 A:middle
So that's much better, and also
that's super easy to configure.

00:15:39.606 --> 00:15:41.076 A:middle
So that's for animations.

00:15:41.886 --> 00:15:42.606 A:middle
Now, actions.

00:15:44.236 --> 00:15:46.206 A:middle
So, if you're already
familiar with SpriteKit,

00:15:46.206 --> 00:15:47.576 A:middle
you already know SKAction.

00:15:47.886 --> 00:15:50.346 A:middle
Here, SCNAnimations
just work the same.

00:15:50.856 --> 00:15:53.566 A:middle
And the main advantage
over animations is

00:15:53.566 --> 00:15:56.806 A:middle
that it makes really
easy to sequence group

00:15:56.806 --> 00:15:58.706 A:middle
and repeat simple actions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:00.446 --> 00:16:04.466 A:middle
However, it's limited to a
set of predefined actions

00:16:04.636 --> 00:16:06.416 A:middle
that works on SCNNode.

00:16:06.516 --> 00:16:10.536 A:middle
With animations, you can
really target whatever property

00:16:10.536 --> 00:16:11.266 A:middle
of the scene graph.

00:16:11.926 --> 00:16:17.316 A:middle
So to give you an example of how
easy it is to write an action,

00:16:17.426 --> 00:16:20.976 A:middle
here is an action that makes
my node to rotate forever.

00:16:21.726 --> 00:16:23.786 A:middle
So with just one line of
code, it's the equivalent

00:16:23.786 --> 00:16:26.906 A:middle
of the previous slide with Core
Animation with 6 lines of code.

00:16:27.486 --> 00:16:28.466 A:middle
So that's much simpler.

00:16:30.306 --> 00:16:32.736 A:middle
Here are some of the
predefined actions.

00:16:32.736 --> 00:16:36.556 A:middle
You can move your objects,
rotate, make them fade in,

00:16:36.556 --> 00:16:38.356 A:middle
fade out, remove
from the scene graph.

00:16:38.696 --> 00:16:41.506 A:middle
And note that you can also
implement your custom actions

00:16:41.686 --> 00:16:46.106 A:middle
by providing your
custom block if you want.

00:16:46.436 --> 00:16:50.386 A:middle
One difference between
animations and actions is

00:16:50.386 --> 00:16:53.456 A:middle
that actions directly target
the presentation tree.

00:16:54.266 --> 00:16:55.896 A:middle
If you are familiar
with Core Animation,

00:16:55.896 --> 00:16:58.326 A:middle
you know already the
concept of the model tree

00:16:58.326 --> 00:16:59.756 A:middle
versus the presentation tree.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.386 --> 00:17:02.606 A:middle
So, model tree contains
the value you set

00:17:02.606 --> 00:17:03.816 A:middle
and get programmatically,

00:17:04.256 --> 00:17:07.536 A:middle
and the presentation tree
contains the in-flight value

00:17:07.536 --> 00:17:09.146 A:middle
of any running animation.

00:17:09.846 --> 00:17:14.346 A:middle
So, the red dot here
presents node.position.

00:17:14.866 --> 00:17:19.076 A:middle
You can see that, with actions,
node.position corresponds

00:17:19.076 --> 00:17:21.215 A:middle
to the position of the
cube on the screen.

00:17:22.445 --> 00:17:26.955 A:middle
With animations, node.position
corresponds to the position

00:17:26.955 --> 00:17:29.096 A:middle
of the cube at the
end of the animation.

00:17:30.196 --> 00:17:32.756 A:middle
If you want to know the
position of the cube onscreen

00:17:32.756 --> 00:17:36.616 A:middle
with animations, you have to do
node.presentationNode.position,

00:17:36.836 --> 00:17:37.966 A:middle
just like Core Animation.

00:17:41.496 --> 00:17:43.586 A:middle
Okay, so that's about actions.

00:17:43.656 --> 00:17:44.276 A:middle
Now, physics.

00:17:45.636 --> 00:17:48.546 A:middle
SceneKit now has a
built-in physics engine,

00:17:48.816 --> 00:17:50.126 A:middle
zeroprode [phonetic].

00:17:50.276 --> 00:17:55.976 A:middle
So, the API is very
similar to SpriteKit.

00:17:56.206 --> 00:18:00.696 A:middle
To make a node physicalize, you
set the physics body property


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.206 --> 00:18:00.696 A:middle
To make a node physicalize, you
set the physics body property

00:18:00.696 --> 00:18:03.786 A:middle
of your node to a
SCNPhysicsBody instance.

00:18:04.826 --> 00:18:08.656 A:middle
For example, here I have a cube
that is not physicalized yet,

00:18:09.326 --> 00:18:12.456 A:middle
and by setting the physicsBody
property to a dynamic body,

00:18:12.806 --> 00:18:16.096 A:middle
it will automatically animate
with the physics simulation.

00:18:16.696 --> 00:18:21.366 A:middle
Now, dynamic bodies
automatically bounce

00:18:21.496 --> 00:18:24.686 A:middle
and collide together based on
their physicsBody properties,

00:18:25.316 --> 00:18:29.336 A:middle
it's automatic, and
then if you want

00:18:29.336 --> 00:18:31.036 A:middle
to manipulate those objects,

00:18:31.706 --> 00:18:35.096 A:middle
you should not set the position
programmatically directly.

00:18:35.376 --> 00:18:38.506 A:middle
Instead, you have to use forces
to manipulate those objects.

00:18:38.506 --> 00:18:43.096 A:middle
SCNPhysicsBody has some
methods for you to apply forces

00:18:43.096 --> 00:18:45.086 A:middle
and angular forces
to your objects.

00:18:45.286 --> 00:18:48.526 A:middle
So for example here, if I
apply a force from the center

00:18:48.526 --> 00:18:51.326 A:middle
of the scene to all these cubes,
I will make them to go away.

00:18:51.846 --> 00:18:51.946 A:middle
Okay.

00:18:55.126 --> 00:18:57.126 A:middle
So, that's dynamic bodies.

00:18:57.526 --> 00:18:59.156 A:middle
We also have static bodies.

00:18:59.506 --> 00:19:02.986 A:middle
Static bodies participate
to the physics simulation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.506 --> 00:19:02.986 A:middle
Static bodies participate
to the physics simulation,

00:19:03.096 --> 00:19:04.696 A:middle
but they never move;
they are static.

00:19:05.756 --> 00:19:09.466 A:middle
So for example here, these boxes
here are set to a static body,

00:19:10.166 --> 00:19:12.206 A:middle
and if I have some
dynamic spheres,

00:19:12.206 --> 00:19:13.826 A:middle
you can see that
they collide together

00:19:14.196 --> 00:19:17.556 A:middle
but that the static
objects don't move.

00:19:19.016 --> 00:19:21.016 A:middle
[ Blows Sharply ]

00:19:21.016 --> 00:19:27.000 A:middle
[ Laughter &amp; Applause ]

00:19:27.916 --> 00:19:28.846 A:middle
My son loves that, too.

00:19:30.716 --> 00:19:33.776 A:middle
One last kind of physics
body: kinematics body.

00:19:34.166 --> 00:19:37.346 A:middle
Kinematics bodies participate
to the physics simulation.

00:19:38.026 --> 00:19:39.966 A:middle
They don't move in
response to collision.

00:19:40.426 --> 00:19:41.726 A:middle
However, the difference here is

00:19:41.726 --> 00:19:45.216 A:middle
that you can move kinematics
bodies programmatically

00:19:45.486 --> 00:19:47.556 A:middle
by setting their
position or rotation.

00:19:47.556 --> 00:19:51.706 A:middle
For example here, I
have a rotating box

00:19:51.986 --> 00:19:53.656 A:middle
that is set as a kinematic body.

00:19:53.796 --> 00:19:56.506 A:middle
I can make it to rotate
with an action, for example,

00:19:56.996 --> 00:19:58.976 A:middle
and you can see that it
automatically collides

00:19:58.976 --> 00:20:02.616 A:middle
with dynamic spheres here
and make them bounce.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:58.976 --> 00:20:02.616 A:middle
with dynamic spheres here
and make them bounce.

00:20:05.546 --> 00:20:07.586 A:middle
Okay, so that's for
physics bodies.

00:20:08.366 --> 00:20:10.406 A:middle
Now, one note about
PhysicsShape.

00:20:10.956 --> 00:20:14.086 A:middle
The PhysicsShape is a
geometry that is used

00:20:14.086 --> 00:20:17.796 A:middle
by the physics engine to
perform the physics simulation.

00:20:18.296 --> 00:20:22.406 A:middle
By default, SceneKit will
automatically create a shape

00:20:22.406 --> 00:20:22.786 A:middle
for you.

00:20:23.306 --> 00:20:25.886 A:middle
So for example, if I had
some teapots, let's say,

00:20:26.576 --> 00:20:30.286 A:middle
SceneKit will automatically
build a shape for these teapots

00:20:30.286 --> 00:20:31.966 A:middle
by building the convex
hull for you.

00:20:33.096 --> 00:20:37.146 A:middle
That said, you can still
customize the physics shape

00:20:37.236 --> 00:20:37.876 A:middle
if you want.

00:20:38.086 --> 00:20:39.986 A:middle
The main reason can
be for performance.

00:20:40.776 --> 00:20:44.286 A:middle
If you use a built-in
primitive for the shape,

00:20:44.286 --> 00:20:47.156 A:middle
it will be more efficient
than the convex hull,

00:20:47.156 --> 00:20:49.936 A:middle
and the second reason can
be for better correctness.

00:20:50.706 --> 00:20:54.126 A:middle
Let's say you want to have an
object that rolls on the floor.

00:20:54.576 --> 00:20:58.486 A:middle
You will have better correctness
if you use a sphere or cylinder

00:20:58.746 --> 00:21:00.826 A:middle
than using a discretized
geometry.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:58.746 --> 00:21:00.826 A:middle
than using a discretized
geometry.

00:21:01.896 --> 00:21:05.566 A:middle
So, here are the primitives
that are natively supported

00:21:05.566 --> 00:21:08.546 A:middle
by the physics engine,
so spheres as usual,

00:21:08.546 --> 00:21:10.126 A:middle
spheres and boxes, etcetera.

00:21:10.936 --> 00:21:12.936 A:middle
Okay, next.

00:21:13.996 --> 00:21:16.256 A:middle
And, okay, next,
PhysicsBehavior.

00:21:16.536 --> 00:21:18.866 A:middle
The PhysicsBehavior
lets you customize the

00:21:18.866 --> 00:21:19.956 A:middle
physics simulation.

00:21:20.276 --> 00:21:24.046 A:middle
For example, we have a set of
joints available in the APIs

00:21:24.796 --> 00:21:27.956 A:middle
for you to connect objects
together, for example.

00:21:28.606 --> 00:21:34.176 A:middle
For instance here, these boxes
are connected by hinge joints.

00:21:34.946 --> 00:21:38.446 A:middle
To add a joint, simply use
addBehavior on the physicsWorld

00:21:38.446 --> 00:21:42.176 A:middle
of your scene, and the joint
will reference the two nodes it

00:21:42.176 --> 00:21:43.046 A:middle
has to connect.

00:21:43.906 --> 00:21:46.686 A:middle
To remove the behavior,
simply use removeBehavior,

00:21:46.846 --> 00:21:50.116 A:middle
and it will remove the joints.

00:21:52.756 --> 00:21:56.206 A:middle
Okay, so there are definitely
much more things I didn't cover

00:21:56.206 --> 00:21:59.496 A:middle
about physics, like
PhysicsFields for example,

00:21:59.496 --> 00:22:01.626 A:middle
but definitely a lot of
cool things to play with.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.496 --> 00:22:01.626 A:middle
but definitely a lot of
cool things to play with.

00:22:02.666 --> 00:22:09.686 A:middle
Now I will just show you a
quick demo, still about physics.

00:22:10.496 --> 00:22:13.636 A:middle
So, here is a little
sample code available

00:22:13.636 --> 00:22:16.756 A:middle
on the developer website that
is to illustrate the physics

00:22:16.756 --> 00:22:19.536 A:middle
in general and vehicles
in particular.

00:22:19.536 --> 00:22:21.086 A:middle
Vehicles have a specific
behavior.

00:22:21.886 --> 00:22:25.326 A:middle
When I touch the screen, I will
apply a force on the wheels

00:22:26.026 --> 00:22:27.576 A:middle
and so we'll be able
to start to drive.

00:22:30.086 --> 00:22:32.756 A:middle
Then I can control the
steering of my vehicle

00:22:32.966 --> 00:22:35.886 A:middle
with the accelerometer and
also with the game controller,

00:22:36.546 --> 00:22:39.516 A:middle
and the first thing
you can see , well,

00:22:39.516 --> 00:22:41.216 A:middle
the first thing you can see
is that I'm not a good driver,

00:22:41.866 --> 00:22:43.926 A:middle
but the second thing
you can see is

00:22:44.016 --> 00:22:46.596 A:middle
that vehicles automatically
collide

00:22:47.476 --> 00:22:50.606 A:middle
with dynamic bodies
and make them bounce.

00:22:51.446 --> 00:22:53.336 A:middle
Second thing, it also
works with static bodies.

00:22:53.336 --> 00:22:55.906 A:middle
So, for example, if I hit the
wall, the walls are static, ah,

00:22:55.906 --> 00:22:58.956 A:middle
oops, missed, woo, like that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:00.486 --> 00:23:05.726 A:middle
And -- okay, then you can also
notice the train here is made

00:23:05.726 --> 00:23:08.726 A:middle
of several objects that
are connected with joints,

00:23:08.896 --> 00:23:10.446 A:middle
so if I hit the train
you can see

00:23:10.446 --> 00:23:12.346 A:middle
that the objects move like that.

00:23:13.966 --> 00:23:16.676 A:middle
Also notice the smoke effect,
and we explain how we do

00:23:16.676 --> 00:23:18.236 A:middle
that later in the slides.

00:23:19.416 --> 00:23:20.856 A:middle
Now, we'll try to do one gentle.

00:23:20.856 --> 00:23:23.886 A:middle
Let me restart the game
like that and try to jump.

00:23:24.806 --> 00:23:26.626 A:middle
Woo! Okay, quite good.

00:23:26.706 --> 00:23:27.446 A:middle
Thank you, thank you.

00:23:28.516 --> 00:23:32.366 A:middle
[ Applause ]

00:23:32.866 --> 00:23:36.906 A:middle
Okay, and also note that this
game has some little overlays

00:23:36.906 --> 00:23:37.496 A:middle
on top of it.

00:23:38.036 --> 00:23:39.356 A:middle
They are made with SpriteKit;

00:23:39.566 --> 00:23:41.306 A:middle
we will explain how
we do that later.

00:23:42.326 --> 00:23:45.016 A:middle
So I'm talking about the
speed gauge on the right

00:23:45.016 --> 00:23:46.896 A:middle
and the camera button
on the left.

00:23:47.156 --> 00:23:48.816 A:middle
And so they are rendered
by SpriteKit,

00:23:48.816 --> 00:23:50.106 A:middle
but they are also
fully functional.

00:23:50.106 --> 00:23:52.506 A:middle
So, for example, if I click
the camera button here,

00:23:52.826 --> 00:23:54.586 A:middle
it is clickable, and
I can change the point

00:23:54.586 --> 00:23:56.136 A:middle
of view now to drive like that.

00:23:56.506 --> 00:24:00.836 A:middle
Ah! Okay, and you can
see that the transition


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.506 --> 00:24:00.836 A:middle
Ah! Okay, and you can
see that the transition

00:24:00.966 --> 00:24:03.736 A:middle
between the 2 point of view is
smooth because it's just done

00:24:03.736 --> 00:24:06.896 A:middle
between using an
implicit transaction,

00:24:07.506 --> 00:24:08.856 A:middle
and so that's really
super easy to do.

00:24:08.856 --> 00:24:10.856 A:middle
So this sample code
is available.

00:24:10.856 --> 00:24:14.786 A:middle
It is very small - sorry
- it's about 600 lines

00:24:14.786 --> 00:24:16.776 A:middle
of code, so very easy to do.

00:24:17.726 --> 00:24:18.296 A:middle
Thank you.

00:24:19.516 --> 00:24:22.456 A:middle
[ Applause ]

00:24:22.956 --> 00:24:26.096 A:middle
Okay, so still related to
animations and interactivity

00:24:26.096 --> 00:24:27.666 A:middle
in general, now constraints.

00:24:28.866 --> 00:24:31.866 A:middle
You can set an array of
constraints to a node.

00:24:32.026 --> 00:24:34.276 A:middle
These constraints will
be applied sequentially,

00:24:34.506 --> 00:24:37.556 A:middle
and they will be
applied at render time.

00:24:37.656 --> 00:24:40.506 A:middle
So, that means that the
constraints will never modify

00:24:40.506 --> 00:24:43.136 A:middle
your model tree, so
models that you set

00:24:43.136 --> 00:24:45.966 A:middle
and get programmatically,
it will be applied

00:24:45.966 --> 00:24:47.696 A:middle
at the very last
moment of the rendering.

00:24:48.546 --> 00:24:52.106 A:middle
We support custom constraints
where you can program your block

00:24:52.106 --> 00:24:57.266 A:middle
and apply whatever transform you
want on the node's transform.

00:24:58.686 --> 00:25:02.476 A:middle
We also support some
predefined constraints,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.686 --> 00:25:02.476 A:middle
We also support some
predefined constraints,

00:25:02.476 --> 00:25:03.606 A:middle
like the LookAtConstraint.

00:25:04.476 --> 00:25:08.986 A:middle
So, LookAtConstraint forces a
node to look at another node.

00:25:09.156 --> 00:25:12.386 A:middle
For example here, if
I set LookAtConstraint

00:25:12.506 --> 00:25:15.526 A:middle
to these arrows, it will
make my arrows to look

00:25:15.576 --> 00:25:17.916 A:middle
into the direction
of the sphere here,

00:25:18.436 --> 00:25:21.536 A:middle
and note that I'm doing it
inside an implicit transaction

00:25:21.586 --> 00:25:22.846 A:middle
to make a smooth transition.

00:25:23.066 --> 00:25:28.106 A:middle
And since it is done at render
time, I can just move my sphere

00:25:28.106 --> 00:25:29.656 A:middle
and you can see that
the constraints

00:25:29.656 --> 00:25:30.916 A:middle
automatically update.

00:25:32.406 --> 00:25:34.766 A:middle
Then a typical use case
is to use this constraint

00:25:34.766 --> 00:25:36.416 A:middle
on the node that
owns the camera.

00:25:36.416 --> 00:25:39.966 A:middle
For example, now to have my
camera to follow that node.

00:25:40.516 --> 00:25:43.116 A:middle
And since everything
are nodes in SceneKit,

00:25:43.256 --> 00:25:45.836 A:middle
you can also set this
constraint on the node

00:25:45.836 --> 00:25:47.966 A:middle
that owns the spotlight,
and now you can see

00:25:47.966 --> 00:25:50.776 A:middle
that I have my spotlight that
can follow this node as well.

00:25:53.396 --> 00:25:54.486 A:middle
Thank you.

00:25:55.516 --> 00:25:58.916 A:middle
[ Applause ]

00:25:59.416 --> 00:26:01.666 A:middle
New in this release, we are
adding one more constraint


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.416 --> 00:26:01.666 A:middle
New in this release, we are
adding one more constraint

00:26:01.916 --> 00:26:04.046 A:middle
that we named SCNIKConstraint.

00:26:04.526 --> 00:26:09.936 A:middle
IK stands for inverse
kinematics, and this one is hard

00:26:10.016 --> 00:26:13.896 A:middle
to explain by a French
guy, but I'll try.

00:26:13.896 --> 00:26:17.066 A:middle
IK constraints apply
on a node chain.

00:26:17.666 --> 00:26:21.226 A:middle
The node chain is specified as
a base node and a root node,

00:26:21.226 --> 00:26:24.156 A:middle
and the 2 nodes must be
in the same hierarchy.

00:26:25.676 --> 00:26:28.516 A:middle
The IK constraints
will force your node

00:26:28.706 --> 00:26:32.256 A:middle
to keep the same
original related distance

00:26:32.406 --> 00:26:33.276 A:middle
between each other.

00:26:34.616 --> 00:26:38.516 A:middle
So to give an example
here, I have a character

00:26:38.766 --> 00:26:40.626 A:middle
that is playing an
idle animation,

00:26:41.586 --> 00:26:45.066 A:middle
and when I press Next, it does
an attack animation like this.

00:26:45.816 --> 00:26:51.376 A:middle
So IK are often used to control
articulated things like the arm

00:26:51.376 --> 00:26:53.056 A:middle
of robots or characters.

00:26:54.236 --> 00:26:57.076 A:middle
Now, let's say I want to do
the same attack animation,

00:26:57.076 --> 00:26:58.956 A:middle
but this time I want
to hit this target.

00:26:59.916 --> 00:27:03.226 A:middle
By default, it will
just miss the target.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.916 --> 00:27:03.226 A:middle
By default, it will
just miss the target.

00:27:03.786 --> 00:27:10.376 A:middle
Now, I can use an IK
constraint to move the lift

00:27:10.376 --> 00:27:12.696 A:middle
of my node chain in the
direction of that target,

00:27:12.876 --> 00:27:15.306 A:middle
and the IK constraint will
automatically make sure

00:27:15.306 --> 00:27:19.416 A:middle
that the hand and the elbow and
the shoulder stay consistent.

00:27:19.946 --> 00:27:25.836 A:middle
And I can also modulate the
effect of the IK constraints

00:27:25.836 --> 00:27:29.406 A:middle
over time by modifying
the influence factor

00:27:29.406 --> 00:27:34.076 A:middle
of the IK constraint to make
its effect increase during

00:27:34.076 --> 00:27:34.666 A:middle
the animation.

00:27:34.666 --> 00:27:37.386 A:middle
So for example here, by
combining the attack animation

00:27:37.386 --> 00:27:40.166 A:middle
and the IKConstraint, I
can do something like this.

00:27:40.166 --> 00:27:41.406 A:middle
Hit the target.

00:27:42.196 --> 00:27:46.046 A:middle
Note that here I'm also using
a LookAtConstraint for the head

00:27:46.046 --> 00:27:47.996 A:middle
of the character
to make it to look

00:27:48.226 --> 00:27:49.506 A:middle
in the direction of the target.

00:27:50.366 --> 00:27:52.616 A:middle
So, if I move the target down,
you can see that the head

00:27:52.616 --> 00:27:54.106 A:middle
of the character
follows the target.

00:27:54.466 --> 00:27:56.586 A:middle
I can still use the
IK constraints

00:27:56.586 --> 00:27:58.866 A:middle
to hit the target like this.

00:27:59.306 --> 00:28:01.946 A:middle
I will do it one last
time because it's fun.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.306 --> 00:28:01.946 A:middle
I will do it one last
time because it's fun.

00:28:03.756 --> 00:28:05.976 A:middle
And beam! Okay.

00:28:06.516 --> 00:28:12.906 A:middle
[ Applause ]

00:28:13.406 --> 00:28:15.706 A:middle
Okay, now one note
about scriptability.

00:28:16.236 --> 00:28:18.976 A:middle
Note that in this release,
now SceneKit is fully bridged

00:28:18.976 --> 00:28:21.736 A:middle
with JavaScript using
JavaScript call APIs.

00:28:22.486 --> 00:28:26.276 A:middle
It's simple to set up: just
call SCNExportJavaScriptModule

00:28:26.666 --> 00:28:29.026 A:middle
and pass a JavaScript
Core Context.

00:28:29.636 --> 00:28:31.786 A:middle
This will set up the
JavaScript Core Context

00:28:31.786 --> 00:28:34.286 A:middle
with all the SceneKit
symbols and classes,

00:28:34.466 --> 00:28:38.246 A:middle
and once this is done you
can reference your 3D objects

00:28:38.246 --> 00:28:41.376 A:middle
from JavaScript and even write
whatever script you want.

00:28:42.216 --> 00:28:44.406 A:middle
To give you an idea
of how SceneKit looks

00:28:44.406 --> 00:28:47.236 A:middle
like in JavaScript,
you can do everything:

00:28:47.236 --> 00:28:50.276 A:middle
you can allocate objects, modify
whatever properties of course,

00:28:50.926 --> 00:28:53.006 A:middle
you can modify the
scene graph if you want,

00:28:53.006 --> 00:28:56.266 A:middle
and you can even start
implicit transaction

00:28:56.266 --> 00:28:59.046 A:middle
to do implicit animations with
JavaScript, and this is cool.

00:28:59.776 --> 00:29:05.096 A:middle
And JavaScript is very handy
for tools and debugging.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.776 --> 00:29:05.096 A:middle
And JavaScript is very handy
for tools and debugging.

00:29:05.426 --> 00:29:09.056 A:middle
For example, if you want to
have at any time to be able

00:29:09.056 --> 00:29:11.316 A:middle
to write a script in a
console to debug your game

00:29:11.666 --> 00:29:14.626 A:middle
or to have it console
in your own tools,

00:29:15.106 --> 00:29:16.376 A:middle
this is very convenient.

00:29:18.366 --> 00:29:20.986 A:middle
Okay? So that's all
for animations,

00:29:22.436 --> 00:29:24.266 A:middle
and so there are
definitely a lot

00:29:24.266 --> 00:29:26.616 A:middle
of things I did not cover
yet, like the skinning,

00:29:26.616 --> 00:29:28.196 A:middle
for example, the
morphing as well.

00:29:28.546 --> 00:29:31.076 A:middle
For this, please refer to
last year's presentation.

00:29:31.806 --> 00:29:34.496 A:middle
Now, I hand it over to Aymeric

00:29:34.676 --> 00:29:36.096 A:middle
for the rest of the
presentation.

00:29:36.136 --> 00:29:36.526 A:middle
Thank you.

00:29:37.516 --> 00:29:43.536 A:middle
[ Applause ]

00:29:44.036 --> 00:29:44.746 A:middle
&gt;&gt; Thanks, Thomas.

00:29:45.686 --> 00:29:46.496 A:middle
Good morning, everyone.

00:29:46.726 --> 00:29:49.646 A:middle
My name is Aymeric, and I'm
going to talk about rendering.

00:29:50.916 --> 00:29:53.526 A:middle
Thomas already showed
you how to load a scene

00:29:53.766 --> 00:29:55.216 A:middle
or create it from scratch.

00:29:56.446 --> 00:30:03.636 A:middle
We now see how you can make it
visually nice using material.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:56.446 --> 00:30:03.636 A:middle
We now see how you can make it
visually nice using material.

00:30:04.206 --> 00:30:06.276 A:middle
While geometry defines
the shape of a node,

00:30:06.596 --> 00:30:09.026 A:middle
material defines its appearance.

00:30:09.376 --> 00:30:14.296 A:middle
That means its color, its
transparency, and interactions

00:30:14.296 --> 00:30:17.466 A:middle
with light like diffuse
and specular reflections.

00:30:18.786 --> 00:30:22.956 A:middle
SceneKit uses the SCNMaterial
class to represent material.

00:30:24.126 --> 00:30:26.726 A:middle
You can imagine it
as a toolbox full

00:30:26.726 --> 00:30:31.606 A:middle
of properties controlling an
underlying optimized shadow.

00:30:32.416 --> 00:30:36.976 A:middle
Here is an example of a
nicely configured material.

00:30:37.866 --> 00:30:39.406 A:middle
A satellite image is used

00:30:39.406 --> 00:30:42.596 A:middle
as a diffuse map while
the oceans are masked

00:30:42.876 --> 00:30:44.776 A:middle
as the only specular areas.

00:30:45.896 --> 00:30:48.006 A:middle
A normal map is used
to simulate a mountain,

00:30:48.746 --> 00:30:52.536 A:middle
while an emission maps display
the city lights shining even

00:30:52.536 --> 00:30:53.046 A:middle
in the dark.

00:30:54.426 --> 00:30:59.206 A:middle
Finally, a cloud layer has been
added using a transparent map

00:30:59.396 --> 00:31:00.756 A:middle
on a separate object.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.396 --> 00:31:00.756 A:middle
on a separate object.

00:31:02.456 --> 00:31:04.256 A:middle
All these properties
uses instances

00:31:04.396 --> 00:31:07.186 A:middle
of SCNMaterialProperty class.

00:31:08.236 --> 00:31:12.816 A:middle
Let's see how we can
fill our contents.

00:31:12.816 --> 00:31:18.306 A:middle
First, we can set a plain color
using an NSColor or CGColorRef.

00:31:20.656 --> 00:31:22.386 A:middle
Then, of course, we
can set an image.

00:31:22.896 --> 00:31:27.396 A:middle
The easiest way to set an
image is using an image path,

00:31:27.636 --> 00:31:29.966 A:middle
either using an NS
string or an NS URL.

00:31:31.076 --> 00:31:33.226 A:middle
This is the most optimized way.

00:31:33.876 --> 00:31:37.566 A:middle
Simply save an extra copy of
the image in the system memory.

00:31:37.566 --> 00:31:43.196 A:middle
Of course, you can set image
using NSImage or UIImage,

00:31:44.016 --> 00:31:46.966 A:middle
but new in this release
we also support SKTexture.

00:31:48.006 --> 00:31:51.486 A:middle
This will allow you to use the
cool features of SpriteKit,

00:31:52.166 --> 00:31:55.286 A:middle
like [inaudible],
procedural node generation,

00:31:55.456 --> 00:31:59.296 A:middle
and automatic normal
map generation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:00.916 --> 00:32:06.706 A:middle
For dynamic contents, we
still support CALayer and,

00:32:06.706 --> 00:32:09.016 A:middle
new in this release,
SpriteKit Scene.

00:32:10.236 --> 00:32:13.506 A:middle
This video is played
using a SKVideo node.

00:32:17.356 --> 00:32:20.696 A:middle
For the reflective property,
we also support cube maps.

00:32:21.496 --> 00:32:22.426 A:middle
Cube maps are useful

00:32:22.426 --> 00:32:24.806 A:middle
to represent a complete
environment.

00:32:25.956 --> 00:32:28.946 A:middle
To set a cube map
on the property,

00:32:28.946 --> 00:32:31.696 A:middle
simply set an array
of 6 separate images.

00:32:37.596 --> 00:32:40.906 A:middle
If you want to customize the
standard materials of SceneKit,

00:32:41.526 --> 00:32:43.186 A:middle
you may want to use
shader modifiers.

00:32:44.216 --> 00:32:47.016 A:middle
Modifiers are little
snippets of GLSL code

00:32:47.176 --> 00:32:49.976 A:middle
that can be injected
at specific stages.

00:32:50.846 --> 00:32:53.696 A:middle
You can apply modifiers directly

00:32:54.086 --> 00:32:57.586 A:middle
into materials or
onto a geometry.

00:32:58.426 --> 00:33:00.456 A:middle
In this case, every
material used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:58.426 --> 00:33:00.456 A:middle
In this case, every
material used

00:33:00.456 --> 00:33:02.056 A:middle
by the geometry will
be modified.

00:33:04.896 --> 00:33:07.516 A:middle
Here are some examples
of shader modifiers.

00:33:08.446 --> 00:33:11.456 A:middle
The first, Ripple Effect is
working at the geometry stage.

00:33:12.456 --> 00:33:15.076 A:middle
The Liquid Noise Effect's
working at the surface stage,

00:33:15.756 --> 00:33:20.276 A:middle
while the Rim Lighting Effect is
obviously at the lighting stage.

00:33:20.746 --> 00:33:25.446 A:middle
Finally, we fake an old TV interlacing
mode using a fragment modifier.

00:33:26.616 --> 00:33:30.856 A:middle
For more information, for more
details about shader modifiers,

00:33:31.006 --> 00:33:32.786 A:middle
please refer to last
year's session.

00:33:32.786 --> 00:33:39.116 A:middle
If you want to completely
replace a specific material,

00:33:39.786 --> 00:33:42.736 A:middle
you can do so by
using SCNProgram.

00:33:43.466 --> 00:33:48.146 A:middle
These are GLSL programs like
Vertex and Fragment shaders,

00:33:48.236 --> 00:33:53.316 A:middle
and new this year but
only on OS X, geometry

00:33:53.316 --> 00:33:56.736 A:middle
and tessellation shaders
are supported too.

00:33:57.066 --> 00:33:59.826 A:middle
This will allow you to take the
full control of the rendering.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:00.506 --> 00:34:03.456 A:middle
SceneKit only provides
you geometry attributes

00:34:03.456 --> 00:34:05.796 A:middle
like position, normal,
and texture coordinates,

00:34:06.216 --> 00:34:09.216 A:middle
and transform uniforms
like model view

00:34:09.216 --> 00:34:10.416 A:middle
and projection matrices.

00:34:12.896 --> 00:34:18.246 A:middle
For even more control, you can
inject OpenGL code directly

00:34:18.246 --> 00:34:20.366 A:middle
before or after the
scene rendering.

00:34:21.686 --> 00:34:25.315 A:middle
This allows effects
like this vortex tunnel

00:34:25.315 --> 00:34:27.386 A:middle
that was done using
a full screen quad

00:34:27.485 --> 00:34:29.116 A:middle
on a custom fragment program.

00:34:30.016 --> 00:34:35.476 A:middle
You can also inject OpenGL
code on a specific node basis,

00:34:35.906 --> 00:34:40.826 A:middle
allowing you to inject code
during scene rendering among

00:34:40.826 --> 00:34:41.646 A:middle
those objects.

00:34:44.835 --> 00:34:47.255 A:middle
So, new in this release also,

00:34:47.295 --> 00:34:50.936 A:middle
we support overlaying a
SpriteKit scene directly

00:34:50.936 --> 00:34:52.735 A:middle
onto the SceneKit scene.

00:34:53.186 --> 00:34:54.896 A:middle
This is how we did
the speedometer

00:34:54.966 --> 00:34:57.996 A:middle
in the toy car demo
Thomas showed you earlier.

00:34:59.036 --> 00:35:03.156 A:middle
This is the preferred
way to all your UI needs,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.036 --> 00:35:03.156 A:middle
This is the preferred
way to all your UI needs,

00:35:04.076 --> 00:35:07.076 A:middle
because you only will have
to write once your event

00:35:07.076 --> 00:35:10.316 A:middle
and link code in SpriteKit, and
it will work on iOS, on OS X,

00:35:10.316 --> 00:35:12.446 A:middle
and it also quite performant

00:35:12.666 --> 00:35:16.656 A:middle
because SpriteKit nodes are
directly rendered in our buffer,

00:35:16.776 --> 00:35:18.156 A:middle
saving on extra compositing.

00:35:20.076 --> 00:35:23.636 A:middle
So, that's all for rendering
and rendering customization.

00:35:24.706 --> 00:35:29.756 A:middle
Let's now browse the effects
available in SceneKit to dress

00:35:29.756 --> 00:35:34.136 A:middle
up your scenes, starting
with particles.

00:35:35.676 --> 00:35:39.126 A:middle
Particle systems are commonly
used in movies and videogames

00:35:39.896 --> 00:35:43.556 A:middle
to simulate a large class
of effects, like fire, rain,

00:35:43.636 --> 00:35:44.826 A:middle
smoke, and explosions.

00:35:45.656 --> 00:35:49.546 A:middle
In this release, we introduce
a new SCNParticleSystem class

00:35:49.696 --> 00:35:53.166 A:middle
that will allow you all
of these effects and more.

00:35:53.916 --> 00:35:56.476 A:middle
Because particles have a
large number of properties,

00:35:57.096 --> 00:35:59.676 A:middle
we also provide you with
this new release of Xcode,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.026 --> 00:36:03.186 A:middle
a new 3D particle editor
that will allow you

00:36:03.186 --> 00:36:06.006 A:middle
to tweak almost all
properties of ParticleSystem.

00:36:07.136 --> 00:36:10.926 A:middle
So, let's see what kind of
effect we can achieve with it.

00:36:12.856 --> 00:36:15.956 A:middle
Here is a hot fire
effect that is done

00:36:15.956 --> 00:36:18.396 A:middle
with a flame texture
set as a particle image.

00:36:19.526 --> 00:36:22.006 A:middle
We animate the color
and the size

00:36:22.006 --> 00:36:23.806 A:middle
of the particle over
the lifespan.

00:36:24.936 --> 00:36:26.966 A:middle
We also use an additive
blending,

00:36:27.416 --> 00:36:31.276 A:middle
but we could also have used
a screen blending among other

00:36:31.276 --> 00:36:32.146 A:middle
blend modes.

00:36:35.296 --> 00:36:38.746 A:middle
ParticleSystem can be
local, like the one

00:36:38.746 --> 00:36:43.486 A:middle
in the background moving
as a [inaudible] or global

00:36:43.486 --> 00:36:45.546 A:middle
like the one in the front,

00:36:46.006 --> 00:36:48.836 A:middle
where particles are directly
emitted in workspace.

00:36:50.796 --> 00:36:53.346 A:middle
Particles can be
affected by gravity.

00:36:55.896 --> 00:37:00.316 A:middle
They can also collide
with nodes of any shapes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:55.896 --> 00:37:00.316 A:middle
They can also collide
with nodes of any shapes.

00:37:01.076 --> 00:37:03.356 A:middle
Just beware of your
triangle counts, though.

00:37:07.206 --> 00:37:11.446 A:middle
Particles can be
affected by physics fields

00:37:11.986 --> 00:37:15.446 A:middle
like this turbulence field
or this vortex field.

00:37:21.176 --> 00:37:25.316 A:middle
ParticleSystem can also generate
subsystems on specific events,

00:37:25.746 --> 00:37:28.506 A:middle
like particle bursts,
deaths or collision.

00:37:29.276 --> 00:37:33.536 A:middle
Here, each raindrop
generates a sub-splash system

00:37:33.826 --> 00:37:34.946 A:middle
when hitting the floor.

00:37:35.456 --> 00:37:41.816 A:middle
You can even apply custom
block on this particle event

00:37:42.036 --> 00:37:43.896 A:middle
or on each simulation step.

00:37:44.696 --> 00:37:47.436 A:middle
Here, the confettis are
laid down and stand still

00:37:47.846 --> 00:37:48.926 A:middle
when they touch the floor.

00:37:53.626 --> 00:37:56.416 A:middle
ParticleSystem can be
emitted from inside

00:37:56.416 --> 00:37:58.296 A:middle
or from the surface
of any shape.

00:37:59.246 --> 00:38:01.976 A:middle
These shapes are represented
using standard geometries.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.246 --> 00:38:01.976 A:middle
These shapes are represented
using standard geometries.

00:38:02.896 --> 00:38:04.766 A:middle
Please note that we recommend

00:38:04.766 --> 00:38:06.296 A:middle
that you use parametric
geometries

00:38:06.726 --> 00:38:08.546 A:middle
as they will provide
the best performances

00:38:08.896 --> 00:38:10.876 A:middle
and a better spatial
distribution.

00:38:16.126 --> 00:38:17.966 A:middle
Here are some kinds of
parametric geometries.

00:38:19.406 --> 00:38:23.396 A:middle
As I've said earlier, it
is the recommended way

00:38:23.636 --> 00:38:25.376 A:middle
to create ParticleSystem is

00:38:25.376 --> 00:38:27.926 A:middle
through the 3D Particle
Editor built into Xcode.

00:38:28.716 --> 00:38:32.206 A:middle
Starting from the provided
templates, you will be able

00:38:32.206 --> 00:38:34.726 A:middle
to tweak and customize
your system.

00:38:35.376 --> 00:38:41.586 A:middle
Then, you will save them as
.scnp files that you'll be able

00:38:43.156 --> 00:38:45.806 A:middle
to later load in your app.

00:38:47.296 --> 00:38:51.146 A:middle
One of the most important
visual cue regarding depths

00:38:51.146 --> 00:38:52.896 A:middle
and contact is shadows,

00:38:53.346 --> 00:38:56.426 A:middle
and SceneKit provides
several ways to do shadows.

00:38:57.796 --> 00:39:03.436 A:middle
The first way is to
directly bake your shadow map


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:57.796 --> 00:39:03.436 A:middle
The first way is to
directly bake your shadow map

00:39:03.436 --> 00:39:05.016 A:middle
into your authoring tool.

00:39:05.866 --> 00:39:08.866 A:middle
Then, you will use them
on the Multiply properties

00:39:09.096 --> 00:39:11.466 A:middle
of your receiving materials.

00:39:12.406 --> 00:39:15.136 A:middle
While this provides the
best looking shadows,

00:39:16.446 --> 00:39:20.966 A:middle
and they are quite efficient
as well, the effect will break

00:39:21.306 --> 00:39:25.606 A:middle
if you try to move your shadow
casters or even the light.

00:39:28.116 --> 00:39:30.776 A:middle
But SceneKit also
supports dynamic shadows.

00:39:32.246 --> 00:39:35.526 A:middle
All you have to do is enable
castsShadow on the spotlight or,

00:39:35.526 --> 00:39:38.746 A:middle
new this release, a
directional light.

00:39:39.376 --> 00:39:43.996 A:middle
Then your receivers, caster,
and even the light will be able

00:39:43.996 --> 00:39:47.046 A:middle
to move as the shadow map
will be generated each frame.

00:39:47.596 --> 00:39:52.116 A:middle
If you want to move
your shadow casters

00:39:52.756 --> 00:39:55.516 A:middle
but have a limited GPU budget,

00:39:56.206 --> 00:39:58.046 A:middle
you can also use
projected shadows

00:39:58.646 --> 00:40:03.626 A:middle
where a simple texture will fake
soft shadow when set on a gobo


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.646 --> 00:40:03.626 A:middle
where a simple texture will fake
soft shadow when set on a gobo

00:40:03.626 --> 00:40:05.216 A:middle
with a ShadowModeModulated.

00:40:05.766 --> 00:40:08.946 A:middle
The next session will
cover this in more detail.

00:40:12.196 --> 00:40:16.576 A:middle
New in this release, we also
added a global fog on the scene.

00:40:17.076 --> 00:40:20.956 A:middle
Just set a fog color,
the range you want it

00:40:21.006 --> 00:40:22.826 A:middle
to operate, and you're done.

00:40:24.006 --> 00:40:27.806 A:middle
You can even control or
animate the density of the fog.

00:40:31.436 --> 00:40:32.896 A:middle
Another commonly used effect

00:40:32.896 --> 00:40:34.986 A:middle
in games is the use
of depth of field.

00:40:35.996 --> 00:40:38.786 A:middle
Here again, with SceneKit
it's really easy to do.

00:40:39.196 --> 00:40:42.236 A:middle
All you have to do is tweak
a few focal properties

00:40:42.236 --> 00:40:46.106 A:middle
on the camera and you can
achieve effects like out

00:40:46.106 --> 00:40:50.866 A:middle
of focus in the background
or in the foreground.

00:40:51.196 --> 00:40:51.976 A:middle
It's that simple.

00:40:52.516 --> 00:40:59.096 A:middle
[ Applause ]

00:40:59.596 --> 00:41:02.566 A:middle
The integration of Core
Image also allows you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.596 --> 00:41:02.566 A:middle
The integration of Core
Image also allows you

00:41:02.566 --> 00:41:06.946 A:middle
to use several screen-space
fancy effects.

00:41:07.936 --> 00:41:11.876 A:middle
Applying on a single node or
hierarchy, you can do effects

00:41:11.876 --> 00:41:15.006 A:middle
like Gaussian blurs, distortion
like this Pixelate Effect,

00:41:15.396 --> 00:41:17.246 A:middle
or any kind of color
processing you want.

00:41:20.656 --> 00:41:24.626 A:middle
The last big new thing in this
release that I wanted to talk

00:41:24.626 --> 00:41:29.276 A:middle
about is the addition
of multi-pass technique.

00:41:29.556 --> 00:41:32.106 A:middle
Shadows, Core Image
filter, depth of field,

00:41:32.376 --> 00:41:35.326 A:middle
all of these are internally
built using techniques.

00:41:35.686 --> 00:41:39.756 A:middle
And now, with this release, we
offer you to create your own.

00:41:40.156 --> 00:41:41.486 A:middle
So, what is a technique?

00:41:42.136 --> 00:41:44.746 A:middle
A technique is a
sequence of passes.

00:41:45.356 --> 00:41:48.896 A:middle
Each pass can render the
scene, a specific object

00:41:49.296 --> 00:41:52.006 A:middle
or full-screen quad,
using custom vertex

00:41:52.006 --> 00:41:53.106 A:middle
and fragment programs.

00:41:54.096 --> 00:41:58.116 A:middle
Techniques have outputs, like
a color or depth render target.

00:41:58.476 --> 00:42:02.506 A:middle
They usually have inputs
that can be constant textures


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.476 --> 00:42:02.506 A:middle
They usually have inputs
that can be constant textures

00:42:02.666 --> 00:42:04.346 A:middle
or other passes render target.

00:42:05.716 --> 00:42:08.716 A:middle
They can also modify
states like blend states.

00:42:09.816 --> 00:42:12.276 A:middle
So, this passes from a graph

00:42:13.046 --> 00:42:16.036 A:middle
where render targets are
produced and consumed.

00:42:18.036 --> 00:42:20.806 A:middle
Techniques were designed
to be data-driven.

00:42:21.736 --> 00:42:23.536 A:middle
They can be entirely configured

00:42:23.536 --> 00:42:26.466 A:middle
through a property list
referencing external vertex

00:42:26.466 --> 00:42:27.276 A:middle
and fragment shader.

00:42:28.096 --> 00:42:30.216 A:middle
This setup allows
you quick iterations

00:42:30.986 --> 00:42:32.706 A:middle
and tweaking your effects

00:42:32.766 --> 00:42:34.776 A:middle
without rebuilding
your application.

00:42:35.356 --> 00:42:39.366 A:middle
Let's see how to
create a technique.

00:42:40.116 --> 00:42:43.756 A:middle
The easiest way is to load it
from a dictionary usually coming

00:42:43.756 --> 00:42:46.626 A:middle
from a property list, but
you can also create technique

00:42:46.626 --> 00:42:48.926 A:middle
by chaining several
techniques together.

00:42:49.846 --> 00:42:51.736 A:middle
When you have a technique,
simply set it

00:42:51.736 --> 00:42:53.716 A:middle
to a view and you're done.

00:42:55.516 --> 00:42:57.506 A:middle
Here's an example
of a simple depth

00:42:57.506 --> 00:42:59.326 A:middle
of field done using techniques.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.356 --> 00:43:03.726 A:middle
The first pass here
renders the scene normally,

00:43:03.836 --> 00:43:06.446 A:middle
writing into a color
on a depth buffer.

00:43:06.686 --> 00:43:10.656 A:middle
Then a second pass takes the
color buffer from the first one

00:43:10.656 --> 00:43:13.046 A:middle
and generates a blurred
version of it.

00:43:13.316 --> 00:43:17.206 A:middle
Finally, the third pass
combines the normal color buffer

00:43:17.206 --> 00:43:21.566 A:middle
and the blurred one
using the depth buffer

00:43:21.566 --> 00:43:22.586 A:middle
as a blending factor.

00:43:25.636 --> 00:43:28.466 A:middle
So, that's all for techniques.

00:43:28.936 --> 00:43:31.836 A:middle
So let's sum up what you should
take away from this session.

00:43:33.186 --> 00:43:35.876 A:middle
SceneKit now is available
on iOS.

00:43:36.446 --> 00:43:40.436 A:middle
It is ready for casual
games thanks to physics,

00:43:40.636 --> 00:43:41.986 A:middle
actions and animations.

00:43:42.566 --> 00:43:43.496 A:middle
It's also lot

00:43:43.576 --> 00:43:48.076 A:middle
of rendering possibilities using
standard materials and effects

00:43:48.076 --> 00:43:52.026 A:middle
like particles, and it has
a lot of control for you

00:43:52.626 --> 00:43:54.956 A:middle
to customize its
rendering with things

00:43:54.956 --> 00:43:56.806 A:middle
like shader modifiers
and techniques.

00:43:58.236 --> 00:44:00.156 A:middle
One last thing is, as
you may have guessed,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:58.236 --> 00:44:00.156 A:middle
One last thing is, as
you may have guessed,

00:44:00.386 --> 00:44:02.986 A:middle
this session was created
entirely in SceneKit,

00:44:03.306 --> 00:44:05.736 A:middle
and we are happy to give
it to you as a sample code.

00:44:06.516 --> 00:44:14.426 A:middle
[ Applause ]

00:44:14.926 --> 00:44:18.476 A:middle
So, I strongly encourage you to
download it and give it a try.

00:44:18.666 --> 00:44:20.366 A:middle
It's almost as fun as Swift.

00:44:21.516 --> 00:44:26.546 A:middle
[ Laughter &amp; Applause ]

00:44:27.046 --> 00:44:28.636 A:middle
For more information,

00:44:28.636 --> 00:44:31.156 A:middle
please contact our
Evangelist Allan and Filip.

00:44:31.666 --> 00:44:34.616 A:middle
We have a brand new
documentation for you

00:44:34.846 --> 00:44:39.196 A:middle
in the developer website
and also a dedicated forum.

00:44:40.066 --> 00:44:40.576 A:middle
Thanks.

00:44:41.016 --> 00:44:43.000 A:middle
[ Applause ]

