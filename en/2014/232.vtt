WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.656 --> 00:00:13.056 A:middle
&gt;&gt; So good afternoon, everybody.

00:00:14.066 --> 00:00:15.286 A:middle
My name is Jeff Watkins.

00:00:15.936 --> 00:00:17.446 A:middle
I'm an iOS Software Engineer.

00:00:17.866 --> 00:00:20.936 A:middle
I'm on the iTunes team and I
have the pleasure of talking

00:00:20.936 --> 00:00:21.416 A:middle
to you a little bit

00:00:21.416 --> 00:00:25.896 A:middle
about Advanced User
Interfaces with Collection View.

00:00:26.116 --> 00:00:30.216 A:middle
Recently, we got some brand
new designs for iTunes Connect.

00:00:31.446 --> 00:00:37.736 A:middle
And these were welcome new
designs for iOS 7 look and feel

00:00:38.386 --> 00:00:40.666 A:middle
and they were really fantastic.

00:00:40.706 --> 00:00:44.706 A:middle
They were brand new,
fresh, clean look and feel

00:00:45.216 --> 00:00:47.366 A:middle
and they gave us a
great opportunity

00:00:47.916 --> 00:00:50.696 A:middle
because we have been
making decisions

00:00:50.866 --> 00:00:53.106 A:middle
for our codes since iOS 2.

00:00:53.746 --> 00:00:58.706 A:middle
And as you can imagine, the
decisions that we made back

00:00:58.706 --> 00:01:02.936 A:middle
in iOS 2 were really
not the same decisions


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.706 --> 00:01:02.936 A:middle
in iOS 2 were really
not the same decisions

00:01:03.376 --> 00:01:05.056 A:middle
that we would be making today.

00:01:05.726 --> 00:01:08.156 A:middle
So, this was an ideal
opportunity for us

00:01:08.736 --> 00:01:12.296 A:middle
to take some time and pay
off some technical debt.

00:01:13.156 --> 00:01:15.926 A:middle
Now, we all know that
that's fancy speak for

00:01:16.086 --> 00:01:19.246 A:middle
"throw away the old code and
write some shiny new code."

00:01:19.886 --> 00:01:23.136 A:middle
But the reality is,
we really wanted

00:01:23.136 --> 00:01:27.126 A:middle
to build a really great
modern architecture

00:01:27.836 --> 00:01:29.856 A:middle
that would take us forward
a few more releases.

00:01:30.956 --> 00:01:33.156 A:middle
You know, everybody
thinks that they're going

00:01:33.156 --> 00:01:36.726 A:middle
to build this shiny,
glittering jewel

00:01:36.726 --> 00:01:38.976 A:middle
of an architecture that's
going to last forever.

00:01:39.426 --> 00:01:42.726 A:middle
But the reality is you get
two, maybe three releases

00:01:42.876 --> 00:01:44.956 A:middle
out of anything you
build and then it's time

00:01:44.956 --> 00:01:48.446 A:middle
to rethink things, but
this was our opportunity.

00:01:49.896 --> 00:01:54.086 A:middle
So, I'm really excited
to announce

00:01:54.086 --> 00:01:57.516 A:middle
that we have some sample code
that goes along with this talk.

00:01:58.226 --> 00:02:02.146 A:middle
But what makes this sample code
even more interesting is this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.226 --> 00:02:02.146 A:middle
But what makes this sample code
even more interesting is this

00:02:02.146 --> 00:02:03.806 A:middle
sample code is distilled

00:02:03.856 --> 00:02:06.956 A:middle
down from the actual source
code of iTunes Connect.

00:02:07.786 --> 00:02:11.396 A:middle
I have my manager and his chain
of management to thank for this

00:02:11.836 --> 00:02:13.896 A:middle
because this is kind of unusual.

00:02:14.206 --> 00:02:15.746 A:middle
Normally sample code
is something

00:02:15.746 --> 00:02:19.266 A:middle
that you would just sort of
whip together for your talk

00:02:20.236 --> 00:02:22.886 A:middle
and it covers the aspects
that you're talking about.

00:02:23.406 --> 00:02:26.286 A:middle
But it, you know, it
covers the bare minimum.

00:02:26.756 --> 00:02:32.576 A:middle
This actually is full,
rich data sources, full,

00:02:32.576 --> 00:02:36.386 A:middle
rich UICollectionViewLayout
and there's actually way more

00:02:36.386 --> 00:02:37.916 A:middle
in there that we're going
to talk about today.

00:02:38.516 --> 00:02:44.556 A:middle
[ Applause ]

00:02:45.056 --> 00:02:49.176 A:middle
Plus, I'm sure there are bugs.

00:02:49.786 --> 00:02:53.336 A:middle
But more importantly,
we'll be building on it

00:02:53.386 --> 00:02:55.066 A:middle
and improving it
as time goes on.

00:02:55.486 --> 00:02:57.586 A:middle
So, look for all
sorts of additions

00:02:57.626 --> 00:02:59.606 A:middle
to this sample code
as time goes on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:00.206 --> 00:03:02.976 A:middle
So, we had some requirements
just

00:03:02.976 --> 00:03:04.486 A:middle
like you all probably
get requirements

00:03:04.486 --> 00:03:08.556 A:middle
with your applications and I'd
like to go through those one

00:03:08.556 --> 00:03:13.036 A:middle
by one and take a look at
them and give you a little bit

00:03:13.246 --> 00:03:18.136 A:middle
of a sense of where we were
coming from and, you know,

00:03:18.136 --> 00:03:21.436 A:middle
a little bit sense of
the terror that I felt

00:03:21.606 --> 00:03:22.736 A:middle
when I took a look at them.

00:03:23.316 --> 00:03:26.796 A:middle
So first of all, we had
really complex data.

00:03:28.156 --> 00:03:32.506 A:middle
We started off with iTunes
Connect 2 supporting apps

00:03:32.506 --> 00:03:34.726 A:middle
and books, and that was great.

00:03:35.376 --> 00:03:38.326 A:middle
But now, we were going to
support all of the content types

00:03:38.326 --> 00:03:39.806 A:middle
that the store supports.

00:03:39.806 --> 00:03:45.306 A:middle
So we were going to add music,
we're going to add music,

00:03:46.356 --> 00:03:50.346 A:middle
as well as movies
and TV seasons.

00:03:50.906 --> 00:03:57.256 A:middle
Now, that was going to post a
significant challenge for us,

00:03:57.996 --> 00:03:59.916 A:middle
because each one of
these content types

00:03:59.916 --> 00:04:01.866 A:middle
as you can see has
multiple sections,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.916 --> 00:04:01.866 A:middle
as you can see has
multiple sections,

00:04:02.586 --> 00:04:07.186 A:middle
multiple different tabs
within there, we're talking

00:04:07.186 --> 00:04:08.636 A:middle
about an awful lot
of data that's going

00:04:08.636 --> 00:04:11.926 A:middle
to be a real difficult
time to manage.

00:04:12.516 --> 00:04:15.706 A:middle
On top of that, we really wanted

00:04:16.776 --> 00:04:18.106 A:middle
to have a single
loading indicator.

00:04:19.136 --> 00:04:21.935 A:middle
One of the things that I think
is really tremendously important

00:04:22.516 --> 00:04:26.076 A:middle
is that users know when
the content is available

00:04:26.286 --> 00:04:27.366 A:middle
and ready for interaction.

00:04:27.906 --> 00:04:32.086 A:middle
I really don't like it when an
application has a spinner here,

00:04:32.086 --> 00:04:34.336 A:middle
spinner there, and
I don't really know

00:04:34.336 --> 00:04:35.336 A:middle
if it's ready for me.

00:04:36.016 --> 00:04:38.876 A:middle
So I wanted to make
iTunes Connect really clear

00:04:39.646 --> 00:04:42.236 A:middle
that when the spinner was
gone, we were ready for you.

00:04:43.116 --> 00:04:45.966 A:middle
So, we were going
to have our spinner

00:04:45.966 --> 00:04:50.946 A:middle
where our spinner is going to go
away and there was the content.

00:04:50.946 --> 00:04:53.856 A:middle
Now, most of our designs looked

00:04:53.856 --> 00:04:56.316 A:middle
like UITableView
and this was easy.

00:04:57.036 --> 00:04:58.276 A:middle
We could have done
this in our sleep.

00:04:59.536 --> 00:05:03.426 A:middle
But, it got more interesting
on iPad because we needed


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.536 --> 00:05:03.426 A:middle
But, it got more interesting
on iPad because we needed

00:05:03.426 --> 00:05:04.866 A:middle
to support multiple columns.

00:05:06.416 --> 00:05:10.366 A:middle
Now, we could have hacked
together a solution for iPad

00:05:10.516 --> 00:05:12.866 A:middle
but that didn't feel
right, right?

00:05:13.096 --> 00:05:16.016 A:middle
Here we're trying to create
a future-looking modern

00:05:16.016 --> 00:05:19.876 A:middle
architecture where you
shouldn't consider hacks.

00:05:21.036 --> 00:05:24.956 A:middle
So, we really needed to do
something more sophisticated

00:05:25.046 --> 00:05:27.366 A:middle
for iPad and that's
when I started thinking,

00:05:27.616 --> 00:05:30.796 A:middle
"Let's take a look
at collection view."

00:05:31.006 --> 00:05:32.966 A:middle
Well, if you know
collection view,

00:05:32.966 --> 00:05:35.296 A:middle
you know there are
some limitations

00:05:35.366 --> 00:05:36.896 A:middle
with the standard flow layout.

00:05:37.646 --> 00:05:41.966 A:middle
Specifically, it doesn't
really support global headers

00:05:42.216 --> 00:05:44.216 A:middle
like you have in
table view, right?

00:05:44.216 --> 00:05:46.206 A:middle
And we needed to
support global headers.

00:05:46.206 --> 00:05:48.676 A:middle
We needed to be able to have
this one header that stuck

00:05:48.676 --> 00:05:51.556 A:middle
around as you tabbed
through your content.

00:05:52.666 --> 00:05:55.656 A:middle
So that made me start
thinking, "I'm going to have

00:05:55.656 --> 00:05:58.796 A:middle
to do something here and
I might wind up having

00:05:58.796 --> 00:05:59.696 A:middle
to write my own layout."


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.176 --> 00:06:05.796 A:middle
In addition, we also needed
to support pinned headers.

00:06:06.256 --> 00:06:08.406 A:middle
So, as we're scrolling
through our content,

00:06:09.166 --> 00:06:12.746 A:middle
it is really important that
we able-we'd be able to get

00:06:12.746 --> 00:06:16.806 A:middle
at those segmented controls
so that we could get

00:06:16.806 --> 00:06:18.426 A:middle
to the different
sections of our content.

00:06:19.796 --> 00:06:21.946 A:middle
So we needed to be able
to support pinned headers

00:06:22.176 --> 00:06:24.916 A:middle
and flow layout also doesn't
really support that either.

00:06:26.216 --> 00:06:29.496 A:middle
So, that kind of put
the nail in the coffin

00:06:29.636 --> 00:06:31.306 A:middle
of using the flow layout for us.

00:06:32.036 --> 00:06:35.576 A:middle
And that meant we're
going to have

00:06:35.576 --> 00:06:38.226 A:middle
to do a collection view
layout which I got to admit,

00:06:38.226 --> 00:06:39.946 A:middle
it was pretty exciting.

00:06:40.796 --> 00:06:43.696 A:middle
I also wanted to
add swipe to edit.

00:06:44.226 --> 00:06:45.936 A:middle
This was a new feature in iOS 7

00:06:45.936 --> 00:06:48.656 A:middle
and I thought it would be a
great addition to iTunes Connect

00:06:48.696 --> 00:06:51.996 A:middle
because it gives it that
modern interactive feel

00:06:52.736 --> 00:06:57.086 A:middle
and users can then swipe,
delete Xcode from their list

00:06:57.806 --> 00:07:01.406 A:middle
of favorites and move on.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.806 --> 00:07:01.406 A:middle
of favorites and move on.

00:07:02.516 --> 00:07:04.906 A:middle
[ Applause ]

00:07:05.406 --> 00:07:08.346 A:middle
Also, you know, if you've got a
list of favorites, you're going

00:07:08.346 --> 00:07:10.596 A:middle
to want to be able to
edit those, so we wanted

00:07:10.596 --> 00:07:18.466 A:middle
to support batch editing, and
likewise, you can delete Xcode.

00:07:19.656 --> 00:07:22.996 A:middle
Now, favorites wouldn't
be any good, right,

00:07:22.996 --> 00:07:24.846 A:middle
if you couldn't manipulate them,

00:07:24.846 --> 00:07:28.326 A:middle
if you couldn't reorder your
favorites because it'd be kind

00:07:28.326 --> 00:07:30.286 A:middle
of a drag if you got
a lot of favorites

00:07:30.566 --> 00:07:31.956 A:middle
and they're in the wrong order.

00:07:32.576 --> 00:07:37.236 A:middle
So we wanted to support drag
reordering as well and we needed

00:07:37.236 --> 00:07:39.616 A:middle
to support that with a custom
layout and that was going

00:07:39.616 --> 00:07:42.536 A:middle
to be a bit of a challenge but
I feel like I've been slagging

00:07:42.536 --> 00:07:45.066 A:middle
on Xcode so I'm going to put
it back at the top of the list

00:07:45.066 --> 00:07:49.046 A:middle
of favorites because they really
have hit it out of the park.

00:07:51.416 --> 00:07:51.976 A:middle
Come on.

00:07:52.516 --> 00:07:56.706 A:middle
[ Applause ]

00:07:57.206 --> 00:07:59.406 A:middle
With Swift and all of the
other stuff they've been doing,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:00.136 --> 00:08:07.276 A:middle
those guys-so, those were our
requirements and that was kind

00:08:07.276 --> 00:08:10.036 A:middle
of a lot, I mean on top of all
the other stuff that the rest

00:08:10.036 --> 00:08:10.806 A:middle
of the guys had to do.

00:08:11.376 --> 00:08:14.806 A:middle
But I want to talk about
the first one first

00:08:15.116 --> 00:08:19.346 A:middle
because without data, right,
iTunes Connect is nothing.

00:08:19.716 --> 00:08:22.166 A:middle
They would just be some
pretty pictures of your apps

00:08:22.166 --> 00:08:25.736 A:middle
and everything else which are
nice but nobody is going to want

00:08:25.736 --> 00:08:30.396 A:middle
to look at, you know,
lines and pretty pictures.

00:08:30.726 --> 00:08:34.056 A:middle
So, getting the data right
is the most important thing

00:08:34.056 --> 00:08:35.885 A:middle
and quite frankly, it was
the thing that I was really,

00:08:35.885 --> 00:08:41.806 A:middle
really convolutedly freaked out
about because five data types

00:08:41.806 --> 00:08:44.646 A:middle
and all these different
sections and, oh my goodness.

00:08:44.776 --> 00:08:47.646 A:middle
So, I really needed to
come up with some way

00:08:47.926 --> 00:08:49.996 A:middle
to minimize the complexity
of all that data.

00:08:51.546 --> 00:08:56.206 A:middle
And the way I took a look
at this is I took all

00:08:56.206 --> 00:08:59.656 A:middle
of the designs that our
HI guys and gals, in fact,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:00.126 --> 00:09:04.806 A:middle
mostly a gal had come up with,
and we lay them out and I kind

00:09:04.806 --> 00:09:07.656 A:middle
of squinted them, add them
and lay them out side by side

00:09:07.916 --> 00:09:10.736 A:middle
and I realized that there were
some real similarities here,

00:09:11.756 --> 00:09:12.436 A:middle
right?

00:09:12.706 --> 00:09:14.096 A:middle
If you squinted this,
you realized

00:09:14.096 --> 00:09:19.466 A:middle
that we've got some key values
stuff going on here and that

00:09:19.466 --> 00:09:21.796 A:middle
in particular showed up all
throughout the application.

00:09:22.796 --> 00:09:27.266 A:middle
We've also got this Status
section that shows up frequently

00:09:27.586 --> 00:09:32.186 A:middle
and we've got lots of sections
in our layouts that seem

00:09:32.186 --> 00:09:34.246 A:middle
to reappear all over the place.

00:09:35.106 --> 00:09:36.386 A:middle
And I thought to myself "Gosh.

00:09:37.256 --> 00:09:39.746 A:middle
This is really something that
we need to take advantage of."

00:09:39.746 --> 00:09:43.436 A:middle
We really need to be able
to reuse this kind of code.

00:09:44.886 --> 00:09:49.596 A:middle
But the problem is, if you've
been doing collection view

00:09:50.026 --> 00:09:50.816 A:middle
controllers in the past,

00:09:51.786 --> 00:09:55.166 A:middle
you know that there's really
challenges with code reuse

00:09:55.226 --> 00:09:59.956 A:middle
when it comes to data sources.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.046 --> 00:10:02.346 A:middle
The traditional approach
to a collection

00:10:02.346 --> 00:10:05.486 A:middle
of your data source has
you putting everything

00:10:05.486 --> 00:10:06.256 A:middle
in the view controller.

00:10:07.126 --> 00:10:10.126 A:middle
And as a result, you'll wind
up with one of the two things.

00:10:10.886 --> 00:10:13.716 A:middle
First, you can wind up with
a gigantic view controller.

00:10:14.526 --> 00:10:17.476 A:middle
And I'm sure you've all seen
this-not on your projects.

00:10:18.296 --> 00:10:21.896 A:middle
But you wind up with the
view controller that's

00:10:21.896 --> 00:10:24.176 A:middle
like 5,000 lines of code.

00:10:25.156 --> 00:10:29.026 A:middle
And it does everything
including things

00:10:29.026 --> 00:10:30.166 A:middle
that you don't do anymore.

00:10:31.436 --> 00:10:32.656 A:middle
I deleted all that code.

00:10:33.866 --> 00:10:37.706 A:middle
And so, we didn't want
that especially now,

00:10:37.706 --> 00:10:39.776 A:middle
I mean we're starting fresh,
right, we wouldn't want that.

00:10:40.946 --> 00:10:43.756 A:middle
The other option is we could
have had one view controller

00:10:43.956 --> 00:10:46.296 A:middle
for each content
type and that seems

00:10:46.296 --> 00:10:49.176 A:middle
like it's a better
approach but it's really not

00:10:49.516 --> 00:10:51.196 A:middle
because there's really
a lot of things

00:10:51.196 --> 00:10:54.266 A:middle
that the view controller
just does innately

00:10:55.246 --> 00:10:58.276 A:middle
and the way you wind up with
sharing common code is you wind

00:10:58.276 --> 00:11:00.446 A:middle
up pushing it down to
a common base class,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.276 --> 00:11:00.446 A:middle
up pushing it down to
a common base class,

00:11:01.336 --> 00:11:02.806 A:middle
which winds up being
the same thing

00:11:02.806 --> 00:11:04.446 A:middle
as having one gigantic
view controller

00:11:04.446 --> 00:11:06.556 A:middle
because you've pushed it
all to the base class.

00:11:06.906 --> 00:11:09.706 A:middle
So sure you've kind of hidden
it a little bit but now it's

00:11:09.706 --> 00:11:13.346 A:middle
down there and you're
just not looking at it.

00:11:13.346 --> 00:11:15.126 A:middle
And it doesn't at
all solve the problem

00:11:15.126 --> 00:11:17.516 A:middle
of code reuse across screens.

00:11:18.106 --> 00:11:20.406 A:middle
So we wanted a better solution.

00:11:21.296 --> 00:11:24.736 A:middle
Now fortunately, I had
the pleasure of working

00:11:24.736 --> 00:11:28.566 A:middle
on the Game Center team during
the iOS 7 redesign and they came

00:11:28.566 --> 00:11:30.326 A:middle
up with a solution to
this exact problem.

00:11:31.336 --> 00:11:33.226 A:middle
It's called Aggregate
Data Sources.

00:11:34.076 --> 00:11:36.276 A:middle
Now their data was a
little bit less complex

00:11:36.336 --> 00:11:38.516 A:middle
than ours by just a smidge.

00:11:39.166 --> 00:11:43.886 A:middle
But they hit upon the right
answer, which was building

00:11:43.886 --> 00:11:46.226 A:middle
up data sources from
smaller data sources.

00:11:46.636 --> 00:11:51.876 A:middle
There's nothing that says that
a UICollectionViewDataSource has

00:11:51.876 --> 00:11:53.346 A:middle
to be implemented on
your view controller.

00:11:54.476 --> 00:11:58.816 A:middle
In fact, I would encourage you
not to implement the data source

00:11:58.816 --> 00:11:59.586 A:middle
on your view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:00.776 --> 00:12:02.226 A:middle
In fact, I'd go so
far as to say,

00:12:02.226 --> 00:12:05.636 A:middle
never ever again implement
it on your view controller.

00:12:06.046 --> 00:12:08.046 A:middle
[ Applause ]

00:12:08.076 --> 00:12:09.546 A:middle
I mean, unless you
really want to,

00:12:10.146 --> 00:12:13.216 A:middle
but what we do here
is we implement it

00:12:13.216 --> 00:12:17.156 A:middle
as a general NSObject, and
then we build those together

00:12:17.876 --> 00:12:20.376 A:middle
to build a much more
sophisticated data source

00:12:21.226 --> 00:12:24.576 A:middle
and this goes a long way
to enabling code reuse.

00:12:25.006 --> 00:12:28.086 A:middle
Because as you can imagine,
we've got these little classes

00:12:28.206 --> 00:12:30.546 A:middle
of data sources that
we cobble together

00:12:30.546 --> 00:12:32.506 A:middle
and we reuse them
all over the place.

00:12:33.396 --> 00:12:36.326 A:middle
And as a result, we wound up
with a single view controller

00:12:36.326 --> 00:12:39.576 A:middle
for our product detail screen
that has only 14 methods.

00:12:40.786 --> 00:12:43.346 A:middle
Now, six of those
methods-before you get all upset

00:12:43.346 --> 00:12:47.436 A:middle
that I have 14 methods,
six of those methods,

00:12:47.976 --> 00:12:50.136 A:middle
five of them are building
the five content types

00:12:50.136 --> 00:12:53.236 A:middle
of data sources, one of
them is building the overall

00:12:53.236 --> 00:12:53.756 A:middle
data source.

00:12:54.726 --> 00:12:57.356 A:middle
And then the rest of them are
some action methods that bubble

00:12:57.356 --> 00:12:58.896 A:middle
up our responder chain.

00:12:59.296 --> 00:13:00.916 A:middle
I think there's some, you know,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:59.296 --> 00:13:00.916 A:middle
I think there's some, you know,

00:13:01.006 --> 00:13:03.216 A:middle
delegate methods in
there and whatnot.

00:13:03.266 --> 00:13:05.406 A:middle
So I mean, we do go
a little overboard.

00:13:05.516 --> 00:13:09.016 A:middle
I probably could
have cut it down but,

00:13:09.016 --> 00:13:10.636 A:middle
you know, we're getting there.

00:13:11.446 --> 00:13:17.036 A:middle
So let's take a look at the four
intrinsic aggregate data source

00:13:17.036 --> 00:13:18.766 A:middle
classes that you'll
see in a sample code.

00:13:20.276 --> 00:13:23.606 A:middle
The first and most
important one where all

00:13:23.606 --> 00:13:26.496 A:middle
of the action is
is AAPLDataSource.

00:13:26.896 --> 00:13:28.106 A:middle
That's the base data source.

00:13:28.576 --> 00:13:31.206 A:middle
That's where we implement the
UICollectionViewDataSource

00:13:31.206 --> 00:13:35.066 A:middle
protocol, as well as a host of
other good stuff that we'll talk

00:13:35.066 --> 00:13:36.306 A:middle
about in a little bit.

00:13:37.396 --> 00:13:41.326 A:middle
On top of that, we've layered
the AAPLSegmentedDataSource

00:13:42.356 --> 00:13:44.956 A:middle
and that can have multiple
children but only one

00:13:44.956 --> 00:13:45.966 A:middle
of them is active at a time.

00:13:46.726 --> 00:13:49.636 A:middle
Think of a UISegmentedControl,
in fact,

00:13:49.826 --> 00:13:50.976 A:middle
there's a good reason
to think of that.

00:13:50.976 --> 00:13:54.756 A:middle
It will vend out a header
with a UISegmentedControl

00:13:54.756 --> 00:13:57.956 A:middle
as part of its base behavior.

00:13:59.066 --> 00:14:02.006 A:middle
Then there's the
AAPLComposedDataSource


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.066 --> 00:14:02.006 A:middle
Then there's the
AAPLComposedDataSource

00:14:02.086 --> 00:14:03.946 A:middle
and that will take a
number of children.

00:14:04.666 --> 00:14:07.796 A:middle
They're all active at once
and it manages the mapping

00:14:07.796 --> 00:14:09.696 A:middle
between the external IndexPaths

00:14:10.226 --> 00:14:12.706 A:middle
and the internal
child IndexPaths.

00:14:13.726 --> 00:14:16.996 A:middle
And then there's this
AAPLBasicDataSource.

00:14:17.236 --> 00:14:19.946 A:middle
How many times have you
had just a list of things

00:14:20.026 --> 00:14:21.006 A:middle
and you just want to show them?

00:14:21.006 --> 00:14:23.466 A:middle
Well, that's what the
basic data source is for.

00:14:23.796 --> 00:14:26.166 A:middle
It takes an array of items.

00:14:26.556 --> 00:14:28.546 A:middle
It manages insertions,
deletions,

00:14:28.546 --> 00:14:30.606 A:middle
reorderings, all
that nasty stuff.

00:14:30.726 --> 00:14:32.376 A:middle
It sends out the
right notifications.

00:14:32.936 --> 00:14:34.336 A:middle
It only allows you
to have one section

00:14:34.336 --> 00:14:37.596 A:middle
because there's countless
times where that's all you need

00:14:38.456 --> 00:14:41.136 A:middle
and we wind up using
it all over the place.

00:14:41.606 --> 00:14:47.026 A:middle
So let's take a look in how we
use these four classes to build

00:14:47.026 --> 00:14:49.726 A:middle
up our product details
data source.

00:14:50.606 --> 00:14:54.486 A:middle
So first of all, the product
details data source is a

00:14:54.486 --> 00:14:58.126 A:middle
segmented data source
and it has four segments.

00:14:58.996 --> 00:15:02.376 A:middle
No surprise, one for
Details, one for Episodes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.996 --> 00:15:02.376 A:middle
No surprise, one for
Details, one for Episodes,

00:15:02.756 --> 00:15:04.876 A:middle
one for Reviews and
one for Trends.

00:15:05.176 --> 00:15:06.956 A:middle
Those correspond exactly

00:15:07.406 --> 00:15:10.226 A:middle
to the UISegmentedControl
in the headers.

00:15:11.216 --> 00:15:13.856 A:middle
That UISegmentedControl
is actually created

00:15:14.206 --> 00:15:17.656 A:middle
by the Segmented Data Source.

00:15:17.656 --> 00:15:24.266 A:middle
Now, the Details child
data source is a composed

00:15:24.466 --> 00:15:25.066 A:middle
data source.

00:15:25.826 --> 00:15:31.676 A:middle
And it has children
for the Status section,

00:15:31.796 --> 00:15:35.116 A:middle
Information and Description.

00:15:35.546 --> 00:15:37.526 A:middle
Each one of those is
its own data source.

00:15:38.556 --> 00:15:42.366 A:middle
The Information was one of
those key value data sources.

00:15:43.086 --> 00:15:47.276 A:middle
The Description is a
special textual data source.

00:15:47.506 --> 00:15:49.506 A:middle
And all of these are
pulling information

00:15:49.506 --> 00:15:53.036 A:middle
out of the product object.

00:15:53.556 --> 00:15:59.216 A:middle
Now, Episodes is just one
of those basic data sources

00:15:59.306 --> 00:16:00.976 A:middle
because we've just got
a list of Episodes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.306 --> 00:16:00.976 A:middle
because we've just got
a list of Episodes.

00:16:02.146 --> 00:16:03.556 A:middle
But this is where
it gets interesting

00:16:03.996 --> 00:16:08.386 A:middle
because as you can see,
Episodes have a show date.

00:16:09.056 --> 00:16:13.266 A:middle
Now we could take the date and
we could pass it off to the cell

00:16:13.266 --> 00:16:17.386 A:middle
and we could have the cell
create an NSDateFormatter

00:16:17.386 --> 00:16:19.846 A:middle
and we could render and do that,

00:16:20.006 --> 00:16:23.806 A:middle
but we've been told countless
times that's really the wrong

00:16:23.806 --> 00:16:25.166 A:middle
thing to do, right?

00:16:25.796 --> 00:16:28.316 A:middle
So this is what data
source has allow us

00:16:28.316 --> 00:16:32.416 A:middle
to do is we can encapsulate
task-specific logic,

00:16:33.156 --> 00:16:35.076 A:middle
presentation-specific logic.

00:16:36.136 --> 00:16:39.386 A:middle
So, in my Episode's data source,

00:16:39.996 --> 00:16:43.266 A:middle
that's where I have a date
formatter that's specific

00:16:43.266 --> 00:16:46.776 A:middle
to the Episodes and I do that
conversion of the NSDate,

00:16:47.176 --> 00:16:49.136 A:middle
that's in each episode,

00:16:49.466 --> 00:16:51.626 A:middle
into a string before I
jam it into the cell.

00:16:53.116 --> 00:16:57.446 A:middle
And that way, I get the best
performance rather than allowing

00:16:57.446 --> 00:16:59.526 A:middle
that to happen in each cell.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:00.956 --> 00:17:04.036 A:middle
Then Reviews is another
composed data source.

00:17:04.526 --> 00:17:07.955 A:middle
You're probably getting
tired of this but it's great.

00:17:07.955 --> 00:17:09.366 A:middle
Let me tell you.

00:17:09.366 --> 00:17:12.506 A:middle
And the composed data source
for Reviews has one for Ratings

00:17:13.286 --> 00:17:15.106 A:middle
and another one for
the Actual Reviews.

00:17:15.695 --> 00:17:19.846 A:middle
And we'll actually come back
to the Reviews data source

00:17:20.146 --> 00:17:23.675 A:middle
when we look at how things
load in the upcoming slides.

00:17:23.675 --> 00:17:27.215 A:middle
And then Trends is a
custom data source.

00:17:27.215 --> 00:17:30.376 A:middle
It derives directly from
the base data source.

00:17:30.706 --> 00:17:32.726 A:middle
Because we go out and
we fetch the trend data

00:17:32.816 --> 00:17:36.796 A:middle
and then we actually render
it in two separate sections.

00:17:36.796 --> 00:17:40.736 A:middle
One for the Graph and then
another for the Historical Data.

00:17:41.356 --> 00:17:46.896 A:middle
So that's how we build up a
product details data source

00:17:47.176 --> 00:17:50.116 A:middle
from all these little
aggregate data sources.

00:17:50.206 --> 00:17:53.006 A:middle
And that has an additional
benefit.

00:17:53.776 --> 00:17:56.066 A:middle
Because remember I
told that we wanted

00:17:56.066 --> 00:18:00.106 A:middle
to have a single
loading indicator, right?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.066 --> 00:18:00.106 A:middle
to have a single
loading indicator, right?

00:18:00.716 --> 00:18:07.096 A:middle
Well, we originally tried to
make our single point of truth

00:18:07.456 --> 00:18:09.796 A:middle
for whether we're loading
via the view controller.

00:18:10.596 --> 00:18:14.796 A:middle
And that's kind of tough because
the view controller really

00:18:14.796 --> 00:18:18.206 A:middle
doesn't know what all
is being loaded, right?

00:18:18.206 --> 00:18:21.006 A:middle
We've got five different
content types, multiple sections

00:18:21.346 --> 00:18:23.936 A:middle
with subsections within them.

00:18:24.196 --> 00:18:27.296 A:middle
Each one loads its own content,
how is it going to know?

00:18:27.296 --> 00:18:31.706 A:middle
Well it turns out, we
have one thing that knows

00:18:31.796 --> 00:18:35.096 A:middle
about everything and that's the
product details data source.

00:18:36.006 --> 00:18:39.006 A:middle
So the answer to
the whole problem

00:18:39.446 --> 00:18:43.696 A:middle
of who knows what's
loading, is the data source.

00:18:44.326 --> 00:18:46.726 A:middle
The data source is responsible
for loading its content.

00:18:46.946 --> 00:18:49.666 A:middle
And when you think about it,
it actually makes total sense.

00:18:50.726 --> 00:18:54.556 A:middle
And if you make the data
sources responsible,

00:18:55.266 --> 00:18:57.286 A:middle
they know just the
data they need to load.

00:18:58.356 --> 00:19:02.006 A:middle
They know exactly how to load it
and they're already responsible


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.356 --> 00:19:02.006 A:middle
They know exactly how to load it
and they're already responsible

00:19:02.006 --> 00:19:05.956 A:middle
for their own task-specific
logic so they can format it,

00:19:05.956 --> 00:19:09.476 A:middle
do whatever they need to and
make it ready for presentation.

00:19:10.496 --> 00:19:13.026 A:middle
So now, the view controller
kicks off the whole process

00:19:13.096 --> 00:19:18.306 A:middle
in -viewWillAppear by sending
a load data to the data source

00:19:18.636 --> 00:19:20.876 A:middle
which in turn propagates
that message

00:19:21.056 --> 00:19:22.536 A:middle
to its children as appropriate.

00:19:23.056 --> 00:19:26.066 A:middle
So for example, a segmented
data source will only send it

00:19:26.066 --> 00:19:27.806 A:middle
to the selected data source,

00:19:28.576 --> 00:19:32.816 A:middle
but a composed data source will
send it all of its children.

00:19:32.916 --> 00:19:36.776 A:middle
And because we're good computer
scientists just like all of you,

00:19:36.776 --> 00:19:42.046 A:middle
we use a state machine to
keep track of everything.

00:19:42.076 --> 00:19:42.596 A:middle
You would, right?

00:19:42.596 --> 00:19:45.726 A:middle
Let's take a look at
that state machine.

00:19:46.516 --> 00:19:48.546 A:middle
[ Applause ]

00:19:49.046 --> 00:19:54.076 A:middle
So the obviously named
AAPLLoadableContentStateMachine,

00:19:56.056 --> 00:19:59.356 A:middle
it's got a few states.

00:19:59.696 --> 00:20:02.676 A:middle
It's not as nasty
as it could be.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.696 --> 00:20:02.676 A:middle
It's not as nasty
as it could be.

00:20:03.486 --> 00:20:05.876 A:middle
All data sources start
off in the initial state

00:20:05.876 --> 00:20:08.346 A:middle
until they receive a
load content message.

00:20:09.336 --> 00:20:11.436 A:middle
Once they've received
the load content message,

00:20:11.656 --> 00:20:14.296 A:middle
then they transition into
the loading content state.

00:20:14.616 --> 00:20:16.056 A:middle
That's when we display
the spinner.

00:20:17.176 --> 00:20:19.036 A:middle
That's the only time we
ever display the spinner.

00:20:19.316 --> 00:20:22.026 A:middle
And if you noticed, you
can't ever get back there.

00:20:23.486 --> 00:20:25.966 A:middle
So when they get content
or they get an error

00:20:25.966 --> 00:20:29.636 A:middle
or they receive no content
from their respective sources,

00:20:30.846 --> 00:20:33.456 A:middle
they'll transition into
no content, content loaded

00:20:33.776 --> 00:20:38.166 A:middle
or an error state and will
display the appropriate view.

00:20:39.186 --> 00:20:41.056 A:middle
And we'll take a look at
exactly how that works.

00:20:42.206 --> 00:20:44.196 A:middle
So let's see how this all works

00:20:44.326 --> 00:20:47.486 A:middle
from a data source loading
data off the network

00:20:47.486 --> 00:20:48.726 A:middle
and from a UI standpoint.

00:20:48.726 --> 00:20:51.486 A:middle
So here we are in
the initial state.

00:20:51.646 --> 00:20:54.276 A:middle
And we've got my Cat
List Data Source.

00:20:54.276 --> 00:20:56.066 A:middle
This is from the
sample application

00:20:56.516 --> 00:20:58.096 A:middle
because I am cat crazy.

00:20:59.576 --> 00:21:02.626 A:middle
And yes, I was heartbroken
when we switched


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.576 --> 00:21:02.626 A:middle
And yes, I was heartbroken
when we switched

00:21:02.626 --> 00:21:04.196 A:middle
to California landmarks.

00:21:07.246 --> 00:21:11.406 A:middle
Yeah, I thought the Ocelot was
finally going to get its chance.

00:21:13.026 --> 00:21:15.386 A:middle
So were starting off
in the initial state

00:21:15.726 --> 00:21:17.406 A:middle
and we get the load
content message

00:21:18.056 --> 00:21:19.776 A:middle
and we transition
into loading content.

00:21:20.846 --> 00:21:23.436 A:middle
Then the data source, in this
case, it's going to request

00:21:23.436 --> 00:21:26.426 A:middle
out to its server,
"Get me some cats."

00:21:27.426 --> 00:21:30.426 A:middle
The server eventually comes
back and says, "Here you go."

00:21:31.186 --> 00:21:34.346 A:middle
Now depending on what the
response is, then it's going

00:21:34.346 --> 00:21:35.866 A:middle
to make a transition
into the right place.

00:21:36.466 --> 00:21:39.406 A:middle
And let's take a look at what
the UI does in this case.

00:21:40.086 --> 00:21:41.556 A:middle
So here we are in
the loading content,

00:21:41.556 --> 00:21:42.386 A:middle
we're showing the spinner

00:21:43.016 --> 00:21:46.196 A:middle
and let's imagine we
get back some cats.

00:21:48.146 --> 00:21:49.646 A:middle
So here we're going
to display the cats.

00:21:49.946 --> 00:21:51.746 A:middle
Like I said, this is
the sample application.

00:21:52.366 --> 00:21:55.296 A:middle
Assuming everything works
well, this will compile

00:21:55.296 --> 00:21:58.866 A:middle
and run exactly as
planned on your machines.

00:21:59.786 --> 00:22:03.176 A:middle
And we'll see our list of big
cats right there on our devices.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.786 --> 00:22:03.176 A:middle
And we'll see our list of big
cats right there on our devices.

00:22:05.316 --> 00:22:09.476 A:middle
However, if you know anything
about cats, they're never

00:22:09.476 --> 00:22:10.716 A:middle
where you expect them to be.

00:22:11.216 --> 00:22:15.176 A:middle
So more than likely, you're
going to try to load the cats

00:22:15.926 --> 00:22:17.946 A:middle
and you're going to be told,
there are no cats here.

00:22:19.406 --> 00:22:23.026 A:middle
Well, the great thing about this
is I had to do no work here,

00:22:23.596 --> 00:22:28.226 A:middle
which is great because cats
do a lot of work for you.

00:22:28.696 --> 00:22:31.966 A:middle
So in this case, all I set
up was the No Content message

00:22:31.966 --> 00:22:33.856 A:middle
and the No Content
title on my data source.

00:22:35.126 --> 00:22:36.296 A:middle
And behind the scenes,

00:22:36.296 --> 00:22:38.106 A:middle
the machinery took care
of everything else.

00:22:39.266 --> 00:22:42.366 A:middle
When I transition into the
No Content state, the layout

00:22:42.366 --> 00:22:44.276 A:middle
and the data sources take care

00:22:44.276 --> 00:22:45.646 A:middle
of presenting the
place holder for me.

00:22:46.776 --> 00:22:49.446 A:middle
It really takes a lot of
burden off of my shoulders.

00:22:50.676 --> 00:22:53.266 A:middle
Now, sometimes, things go wrong.

00:22:53.266 --> 00:22:57.956 A:middle
And then, we go from the
Loading Content state

00:22:58.306 --> 00:22:59.176 A:middle
into the Error state.

00:22:59.846 --> 00:23:01.886 A:middle
And similarly to No Content,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.846 --> 00:23:01.886 A:middle
And similarly to No Content,

00:23:02.736 --> 00:23:06.496 A:middle
if we've configured an Error
message and an Error title,

00:23:06.986 --> 00:23:09.526 A:middle
we'll get a placeholder telling
the user what's gone wrong.

00:23:10.086 --> 00:23:15.426 A:middle
So this is a really
great way that we found

00:23:15.426 --> 00:23:20.156 A:middle
to get our consistent UI
but it's a little bit more

00:23:20.156 --> 00:23:23.896 A:middle
than because in most cases,

00:23:24.636 --> 00:23:27.586 A:middle
we're not just loading
one thing, right?

00:23:28.056 --> 00:23:31.216 A:middle
I mentioned, we'd come back
to the Ratings and Reviews.

00:23:32.576 --> 00:23:34.916 A:middle
We load that information
separately.

00:23:35.706 --> 00:23:38.056 A:middle
We fetch the ratings and
we fetch the reviews.

00:23:39.126 --> 00:23:43.466 A:middle
Well, we can't update if we've
got a single loading indicator.

00:23:43.746 --> 00:23:46.256 A:middle
We can't update the
Collection View with the Ratings

00:23:46.786 --> 00:23:49.376 A:middle
and then the Reviews because
that wouldn't look right.

00:23:50.386 --> 00:23:52.396 A:middle
So we've got to update
everything all at once.

00:23:53.416 --> 00:23:57.436 A:middle
And in order to do that,
we needed a solution

00:23:57.786 --> 00:24:02.246 A:middle
that was elegant because
anything less would be


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.786 --> 00:24:02.246 A:middle
that was elegant because
anything less would be

00:24:02.706 --> 00:24:03.176 A:middle
just wrong.

00:24:04.106 --> 00:24:07.676 A:middle
So the solution that we came
up with relies on the fact

00:24:07.926 --> 00:24:10.356 A:middle
that we have a parent-child
relationship

00:24:10.456 --> 00:24:11.376 A:middle
to our data sources.

00:24:11.596 --> 00:24:13.456 A:middle
So let's take a look at that.

00:24:13.956 --> 00:24:16.636 A:middle
All of our data sources start
off in the initial state.

00:24:16.726 --> 00:24:20.016 A:middle
They get the load
content message

00:24:20.306 --> 00:24:22.906 A:middle
and then it all transitioned
into the loading content state

00:24:23.426 --> 00:24:27.316 A:middle
at which point, the ratings and
the reviews data sources send

00:24:27.316 --> 00:24:30.416 A:middle
out their request to the server.

00:24:30.596 --> 00:24:32.956 A:middle
Now, we all know that
the servers not going

00:24:32.956 --> 00:24:35.776 A:middle
to respond simultaneously
to both requests.

00:24:36.646 --> 00:24:37.726 A:middle
That's fantasy land.

00:24:38.746 --> 00:24:41.966 A:middle
So what happens is one of the
responses comes back first.

00:24:43.096 --> 00:24:45.286 A:middle
That data source will
process the response

00:24:45.496 --> 00:24:46.936 A:middle
but not update itself.

00:24:47.526 --> 00:24:49.436 A:middle
What it does is it
queues up a block

00:24:49.716 --> 00:24:52.656 A:middle
that actually will do the
update and it sends it

00:24:52.656 --> 00:24:56.596 A:middle
up to the parent chain and
that block will just sort

00:24:56.596 --> 00:24:59.296 A:middle
of hang out there for a bit.

00:24:59.496 --> 00:25:03.066 A:middle
Then, the next data source
will get its response,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:59.496 --> 00:25:03.066 A:middle
Then, the next data source
will get its response,

00:25:03.676 --> 00:25:06.096 A:middle
it does the same thing.

00:25:06.476 --> 00:25:08.286 A:middle
It transitions into
Content Loaded,

00:25:09.386 --> 00:25:11.186 A:middle
queues up an update block.

00:25:12.426 --> 00:25:15.786 A:middle
And then the parent will
discover, "Oh, look.

00:25:16.166 --> 00:25:18.316 A:middle
All of my children are loaded.

00:25:19.066 --> 00:25:21.996 A:middle
It's OK for me to transition
into Content Loaded."

00:25:23.026 --> 00:25:26.426 A:middle
And now I can call
performBatchUpdates

00:25:26.616 --> 00:25:29.476 A:middle
on the collectionView
and schedule all

00:25:29.476 --> 00:25:33.216 A:middle
of those update blocks
safely inside

00:25:33.216 --> 00:25:34.926 A:middle
of performBatchUpdates block.

00:25:36.516 --> 00:25:39.546 A:middle
[ Applause ]

00:25:40.046 --> 00:25:42.256 A:middle
The good thing about all these
is we don't get exceptions

00:25:42.746 --> 00:25:44.736 A:middle
because of our timing
inconsistencies.

00:25:44.856 --> 00:25:48.016 A:middle
And I don't know about you,
but I don't like exceptions.

00:25:48.666 --> 00:25:51.076 A:middle
My boss gets really grouchy.

00:25:51.686 --> 00:25:57.376 A:middle
So to recap, Aggregate Data
Sources were a great way for us

00:25:57.376 --> 00:25:59.186 A:middle
to reduce our view
controller complexity.

00:25:59.366 --> 00:26:03.076 A:middle
Our view controller only
does view controllery things.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.366 --> 00:26:03.076 A:middle
Our view controller only
does view controllery things.

00:26:03.806 --> 00:26:05.006 A:middle
It no longer involved

00:26:05.056 --> 00:26:06.716 A:middle
in the data source other
than setting it up.

00:26:06.716 --> 00:26:10.726 A:middle
And it went a long way
to promoting code reuse.

00:26:11.516 --> 00:26:15.836 A:middle
So now our code is scattered
in these aggregate data sources

00:26:15.836 --> 00:26:17.196 A:middle
that we use all over the place

00:26:17.816 --> 00:26:21.186 A:middle
and it isolates task-specific
logic that we use for setting

00:26:21.186 --> 00:26:23.796 A:middle
up ourselves into
the data sources

00:26:23.796 --> 00:26:24.516 A:middle
where they're appropriate.

00:26:25.616 --> 00:26:28.866 A:middle
And we got that single
loading indicator

00:26:28.866 --> 00:26:29.736 A:middle
that we were looking for.

00:26:30.326 --> 00:26:33.796 A:middle
So that was our first
two requirements.

00:26:33.796 --> 00:26:41.976 A:middle
So let's take a look
at the next four,

00:26:42.186 --> 00:26:47.716 A:middle
which necessitated a Custom
UICollectionViewLayout.

00:26:49.316 --> 00:26:52.166 A:middle
Now, I have a confession
to make.

00:26:52.556 --> 00:26:57.406 A:middle
The first time I built the
layout, I was very unhappy.

00:26:58.566 --> 00:26:59.106 A:middle
It worked.

00:26:59.936 --> 00:27:01.206 A:middle
It worked actually really well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:59.936 --> 00:27:01.206 A:middle
It worked actually really well.

00:27:01.996 --> 00:27:07.826 A:middle
But I am-how shall I put
this, hard to please?

00:27:08.746 --> 00:27:12.216 A:middle
And it didn't work
as well as I wanted.

00:27:13.106 --> 00:27:15.776 A:middle
And the reason is I didn't
collect all the information

00:27:15.776 --> 00:27:17.856 A:middle
that I should have.

00:27:17.856 --> 00:27:22.186 A:middle
I tried to be done and just
move on to other things.

00:27:22.776 --> 00:27:25.056 A:middle
So the message I want
you to take away from all

00:27:25.056 --> 00:27:26.586 A:middle
of this-and I'm sort
of skipping ahead

00:27:26.586 --> 00:27:31.576 A:middle
to the summary before I even
start-is do your bookkeeping.

00:27:32.116 --> 00:27:33.716 A:middle
Get all the information you can.

00:27:33.716 --> 00:27:37.006 A:middle
And at the very end, run
instruments to make sure

00:27:37.006 --> 00:27:38.526 A:middle
that you have enough memory

00:27:38.526 --> 00:27:40.936 A:middle
and you're not using
too much resources

00:27:41.506 --> 00:27:44.746 A:middle
and then prune back the
information you're keeping

00:27:45.356 --> 00:27:47.096 A:middle
but keep it all upfront.

00:27:47.806 --> 00:27:50.656 A:middle
So let's take a look at
the information I kept,

00:27:51.676 --> 00:27:56.386 A:middle
the information I didn't keep
and what I should have kept.

00:27:56.636 --> 00:28:01.456 A:middle
So first, what did I need to
keep and where did it belong?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:56.636 --> 00:28:01.456 A:middle
So first, what did I need to
keep and where did it belong?

00:28:01.976 --> 00:28:05.666 A:middle
So obviously, we got these
great designs from HI

00:28:06.396 --> 00:28:09.096 A:middle
and they're just
pictures, right?

00:28:09.576 --> 00:28:12.336 A:middle
We need to interpret that and
figure out what did we need

00:28:12.336 --> 00:28:16.996 A:middle
from that to actually layout
cells and headers and footers

00:28:16.996 --> 00:28:19.876 A:middle
and supplementary views
and decoration views

00:28:19.876 --> 00:28:20.646 A:middle
and the whole nine yards.

00:28:21.666 --> 00:28:25.426 A:middle
And then, kind of as a
footnote, where does it all go?

00:28:25.426 --> 00:28:28.596 A:middle
And I want to address that
first, get it out of the way.

00:28:29.966 --> 00:28:32.396 A:middle
Data sources vend
visual information.

00:28:33.076 --> 00:28:33.906 A:middle
They vend views.

00:28:35.056 --> 00:28:36.836 A:middle
Design metrics are
visual information.

00:28:37.556 --> 00:28:39.636 A:middle
I put them in the data source.

00:28:40.696 --> 00:28:42.966 A:middle
Partly because the data
sources are hierarchal

00:28:43.646 --> 00:28:45.446 A:middle
and they've got default metrics

00:28:45.446 --> 00:28:47.046 A:middle
and they've got section-based
metrics,

00:28:47.486 --> 00:28:49.086 A:middle
it just made sense
to put it there.

00:28:50.026 --> 00:28:52.116 A:middle
I could have put it in
a parallel structure

00:28:52.666 --> 00:28:54.096 A:middle
but then I would have
parallel structures

00:28:54.096 --> 00:28:55.716 A:middle
and that would have
been too crazy.

00:28:56.536 --> 00:28:57.906 A:middle
So, they're in the data sources.

00:28:58.036 --> 00:28:58.986 A:middle
That's where you'll find them.

00:28:59.616 --> 00:29:03.316 A:middle
So let's take a look
at the section metrics.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.616 --> 00:29:03.316 A:middle
So let's take a look
at the section metrics.

00:29:03.796 --> 00:29:08.236 A:middle
So here, we've got some Big
Cats and naturally we're going

00:29:08.236 --> 00:29:10.786 A:middle
to want to know the rowHeight.

00:29:10.936 --> 00:29:15.526 A:middle
We also want to know the
backgroundColor, right?

00:29:16.096 --> 00:29:19.776 A:middle
A lot of our sections
can be gray.

00:29:19.966 --> 00:29:20.636 A:middle
Some of them are white.

00:29:20.636 --> 00:29:23.446 A:middle
None of them are garish colors.

00:29:25.346 --> 00:29:27.536 A:middle
Obviously, we have some
that have separators

00:29:27.656 --> 00:29:31.116 A:middle
and separatorInsets but not all
of our sections have separators.

00:29:32.066 --> 00:29:35.896 A:middle
So we needed to be able to set
that on a per section bases.

00:29:36.036 --> 00:29:39.546 A:middle
We also needed to be able to
set a selectedBackgroundColor.

00:29:40.116 --> 00:29:46.696 A:middle
The way we determine whether or
not a cell appears selectable is

00:29:46.696 --> 00:29:48.356 A:middle
by the selectedBackgroundColor.

00:29:48.856 --> 00:29:52.596 A:middle
Whether it actually is
selectable is in code.

00:29:53.436 --> 00:29:58.646 A:middle
Now remember, we also support
multiple columns so we needed

00:29:58.646 --> 00:29:59.876 A:middle
to know, based on the section,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:00.006 --> 00:30:03.206 A:middle
how many columns it
should support and whether

00:30:03.206 --> 00:30:04.746 A:middle
or not it should show
a column separator.

00:30:07.216 --> 00:30:10.946 A:middle
For the headers and
footers, we similarly needed

00:30:10.946 --> 00:30:14.106 A:middle
to know the height, although
most of the time we set this

00:30:14.186 --> 00:30:16.416 A:middle
to zero which means
figure it out yourself,

00:30:17.576 --> 00:30:18.446 A:middle
thanks to auto layout.

00:30:19.726 --> 00:30:22.606 A:middle
We also wanted to know the
backgroundColor but most

00:30:22.606 --> 00:30:23.996 A:middle
of the time we set this to nil

00:30:24.326 --> 00:30:29.116 A:middle
which means inherited
from the section.

00:30:29.946 --> 00:30:34.626 A:middle
And we also want to specify
a padding because one

00:30:34.626 --> 00:30:35.596 A:middle
of the things that we saw

00:30:35.596 --> 00:30:38.826 A:middle
in our designs a lot was
exactly the same header

00:30:38.826 --> 00:30:43.496 A:middle
but with a little bit more
space between this instance

00:30:43.496 --> 00:30:45.686 A:middle
of the header and that
instance of the header.

00:30:46.706 --> 00:30:49.356 A:middle
And yeah, we could
define a subclass

00:30:49.856 --> 00:30:51.246 A:middle
to give us a little extra space

00:30:51.836 --> 00:30:55.126 A:middle
or we could just have
another metric that says, "Oh,

00:30:55.126 --> 00:30:56.856 A:middle
here we're going to have
10 points of spacing,

00:30:57.506 --> 00:30:58.386 A:middle
there we're going to have 20."

00:30:59.186 --> 00:30:59.926 A:middle
So we added padding.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:01.196 --> 00:31:04.076 A:middle
It actually wound up being
hugely helpful when we needed

00:31:04.076 --> 00:31:06.316 A:middle
to align things horizontally
as well.

00:31:07.486 --> 00:31:09.906 A:middle
So this gave us all the
information we needed

00:31:10.776 --> 00:31:14.826 A:middle
to lay things out in
our actual layout.

00:31:15.766 --> 00:31:17.826 A:middle
But some of this information
needed to be passed along

00:31:17.826 --> 00:31:20.806 A:middle
to the cells and the
headers and, to do that,

00:31:20.806 --> 00:31:22.266 A:middle
we had some Custom Attributes.

00:31:22.556 --> 00:31:24.936 A:middle
And I'm sure you all know
that you can create subclasses

00:31:25.046 --> 00:31:28.176 A:middle
of the layout attributes so
that's exactly what we did,

00:31:28.176 --> 00:31:33.236 A:middle
and we wound up with four plus
a few more Custom Attributes--

00:31:33.976 --> 00:31:36.726 A:middle
first of all, backgroundColor
and the selectedBackgroundColor,

00:31:37.266 --> 00:31:39.956 A:middle
and padding but also
pinnedHeader.

00:31:40.616 --> 00:31:44.216 A:middle
At one point, we thought
that we wanted our headers

00:31:44.216 --> 00:31:45.526 A:middle
to respond to being pinned.

00:31:45.886 --> 00:31:51.216 A:middle
For example, if we'd had a
navigation bar that was blue,

00:31:51.566 --> 00:31:55.896 A:middle
it would make perfect sense for
the header to reach the top pin

00:31:55.896 --> 00:32:00.046 A:middle
and change to be blue,
and it would need to know


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:55.896 --> 00:32:00.046 A:middle
and change to be blue,
and it would need to know

00:32:00.046 --> 00:32:01.386 A:middle
that it was pinned
in order to do that.

00:32:02.546 --> 00:32:06.346 A:middle
So those were the custom
attributes we decided to define

00:32:06.646 --> 00:32:09.216 A:middle
for headers and footers
and our cells.

00:32:10.376 --> 00:32:15.076 A:middle
Now remember, we also needed
to support Global Headers.

00:32:15.076 --> 00:32:19.476 A:middle
And to do that, I'm
going to let you

00:32:19.566 --> 00:32:22.266 A:middle
in on what I thought
was a secret.

00:32:22.266 --> 00:32:25.696 A:middle
It turns out it's not.

00:32:26.696 --> 00:32:27.506 A:middle
We're all familiar

00:32:27.506 --> 00:32:29.996 A:middle
with NSIndexPath normally
having two indices,

00:32:30.976 --> 00:32:32.826 A:middle
one for Section, one for Item.

00:32:33.976 --> 00:32:38.276 A:middle
Well, it seems that you can
also create an NSIndexPath

00:32:38.276 --> 00:32:41.666 A:middle
with one index and
when you do that,

00:32:42.336 --> 00:32:47.076 A:middle
you're creating a Global
Supplementary View indexPath

00:32:47.746 --> 00:32:50.136 A:middle
or a Global Decoration
View indexPath.

00:32:51.246 --> 00:32:53.946 A:middle
It makes no sense two create
these four items so don't try.

00:32:54.876 --> 00:32:58.666 A:middle
But this is how we
separated our global headers

00:32:59.356 --> 00:33:00.956 A:middle
from everything else.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.356 --> 00:33:00.956 A:middle
from everything else.

00:33:01.516 --> 00:33:03.876 A:middle
When we initially tried
this, I tried to lump them

00:33:03.876 --> 00:33:05.706 A:middle
in with section zero and
it just made no sense.

00:33:06.666 --> 00:33:10.766 A:middle
So now, I'm able to distinguish
them from everything else

00:33:11.146 --> 00:33:12.976 A:middle
and we treat global
headers differently.

00:33:13.386 --> 00:33:16.146 A:middle
When you look at the
sample code, you will notice

00:33:16.246 --> 00:33:19.206 A:middle
that the global headers
actually never go off screen.

00:33:19.986 --> 00:33:23.626 A:middle
They pin just underneath
the navigation bar.

00:33:24.336 --> 00:33:27.596 A:middle
They're treated as what we'll
call special attributes.

00:33:28.416 --> 00:33:31.886 A:middle
And they get updated as you
scroll so that they stay

00:33:31.886 --> 00:33:34.346 A:middle
in place and they do all
sorts of funny, fancy things.

00:33:35.816 --> 00:33:37.706 A:middle
Now, the code needs to
be a little bit smart

00:33:38.506 --> 00:33:40.766 A:middle
so that you check the
length of your index path,

00:33:41.076 --> 00:33:44.696 A:middle
so that you don't accidentally
call section and item

00:33:44.856 --> 00:33:46.376 A:middle
for these global index paths.

00:33:46.376 --> 00:33:51.176 A:middle
But other than that,
you're good.

00:33:51.386 --> 00:33:52.846 A:middle
Now, building a layout.

00:33:53.406 --> 00:33:57.726 A:middle
Earlier today, you might
have heard Olivier mention

00:33:58.126 --> 00:34:03.116 A:middle
that you want to be really
careful about using invalidation


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.126 --> 00:34:03.116 A:middle
that you want to be really
careful about using invalidation

00:34:03.606 --> 00:34:04.726 A:middle
or you want to be really careful

00:34:04.886 --> 00:34:06.636 A:middle
to use invalidation,
I should say.

00:34:07.036 --> 00:34:08.766 A:middle
And that's exactly the case.

00:34:09.186 --> 00:34:12.735 A:middle
You might be tempted to
build the most perfect,

00:34:13.826 --> 00:34:16.016 A:middle
single-pass layout engine.

00:34:16.876 --> 00:34:19.726 A:middle
Don't, because what you'll wind

00:34:19.726 --> 00:34:23.985 A:middle
up with is absolute
efficiency the first time.

00:34:24.755 --> 00:34:27.376 A:middle
And then someone will come in
and-the collection will come in

00:34:27.376 --> 00:34:29.735 A:middle
and say, "Hey, this
cell has changed."

00:34:30.386 --> 00:34:32.786 A:middle
And you'll have to
re-layout everything.

00:34:33.846 --> 00:34:36.795 A:middle
Or the origin has changed
because you've scrolled

00:34:37.076 --> 00:34:40.166 A:middle
and you'll have to lay out
everything and you'll just drop.

00:34:40.446 --> 00:34:41.516 A:middle
Your performance will die.

00:34:42.096 --> 00:34:45.596 A:middle
So let's take a look at the
pseudo-code so to speak,

00:34:45.596 --> 00:34:47.775 A:middle
for the layout that
we came up with.

00:34:48.585 --> 00:34:51.326 A:middle
And then, we're going
to show you a little bit

00:34:51.326 --> 00:34:55.166 A:middle
of how we snapshot the metrics
for one of our sections.

00:34:55.166 --> 00:34:58.026 A:middle
And I'll think you'll get a
good sense of why breaking this

00:34:58.026 --> 00:35:00.696 A:middle
up into sections is
really important.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.026 --> 00:35:00.696 A:middle
up into sections is
really important.

00:35:01.796 --> 00:35:06.356 A:middle
So first of all, if the data
source is changed significantly,

00:35:06.356 --> 00:35:09.106 A:middle
like it's a totally different
one or the total number

00:35:09.106 --> 00:35:11.516 A:middle
of sections have changed, we
just throw everything away.

00:35:12.146 --> 00:35:16.736 A:middle
And the reason for this is it's
probably more efficient for us

00:35:16.856 --> 00:35:19.026 A:middle
to just re-compute
everything than it would be

00:35:19.026 --> 00:35:21.686 A:middle
to compute the deltas because
our data sources are actually

00:35:21.686 --> 00:35:22.196 A:middle
pretty small.

00:35:23.146 --> 00:35:24.536 A:middle
If you've seen iTunes Connect,

00:35:24.986 --> 00:35:27.196 A:middle
you know that the actual
content isn't that big.

00:35:28.566 --> 00:35:32.056 A:middle
So, yeah, I could probably
come up with a clever way

00:35:32.056 --> 00:35:33.896 A:middle
to compute deltas
and everything else

00:35:34.306 --> 00:35:35.816 A:middle
but this wound up
being just easier.

00:35:36.886 --> 00:35:39.916 A:middle
And in the long run, getting
it done is sometimes just

00:35:39.916 --> 00:35:40.436 A:middle
as important.

00:35:42.826 --> 00:35:47.376 A:middle
Next, if the collection view's
width has changed or obviously

00:35:47.376 --> 00:35:48.406 A:middle
if I threw everything away,

00:35:49.156 --> 00:35:53.266 A:middle
then I need to regenerate all
the layout attributes as well

00:35:53.266 --> 00:35:56.246 A:middle
as collect all of the
special layout attributes.

00:35:56.546 --> 00:35:59.846 A:middle
So all of those global
headers and any pinned headers

00:35:59.846 --> 00:36:03.456 A:middle
that might have been
defined within the content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.846 --> 00:36:03.456 A:middle
that might have been
defined within the content.

00:36:03.526 --> 00:36:06.966 A:middle
So, I make that single pass
and I layout everything.

00:36:07.426 --> 00:36:15.136 A:middle
And then, if the origin has
changed because we've scrolled,

00:36:15.136 --> 00:36:19.266 A:middle
I update the position of any
special layout attributes.

00:36:20.606 --> 00:36:22.846 A:middle
Now when I go back and I
update all of this code

00:36:22.846 --> 00:36:25.456 A:middle
to support iOS 8,
I'm going to fix this

00:36:25.766 --> 00:36:27.476 A:middle
because I'll use the
new invalidation context

00:36:27.536 --> 00:36:30.516 A:middle
and this all will be different
but this is how we do it today.

00:36:31.246 --> 00:36:37.056 A:middle
So let's take a look at how
we snapshot the metrics.

00:36:37.166 --> 00:36:40.406 A:middle
So we have this hierarchal
structure of data sources.

00:36:41.486 --> 00:36:47.026 A:middle
And on your right, is the
product detail screen.

00:36:47.856 --> 00:36:52.256 A:middle
So we start with Section
0, which is the Status,

00:36:53.066 --> 00:36:57.646 A:middle
and we begin our snapshot at the
very least specific data source,

00:36:58.056 --> 00:36:59.576 A:middle
which is the Segmented
Data Source.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:00.316 --> 00:37:03.516 A:middle
Now in this case, these are
actually the default metrics

00:37:03.916 --> 00:37:06.066 A:middle
for the entire product details.

00:37:06.916 --> 00:37:08.866 A:middle
And that's rowHeight equals 44.

00:37:09.206 --> 00:37:10.626 A:middle
BackgroundColor equals
light-grey.

00:37:11.696 --> 00:37:15.346 A:middle
That means everything
is rowHeight equals 44,

00:37:15.726 --> 00:37:16.946 A:middle
backgroundColor equals
light-grey.

00:37:16.946 --> 00:37:18.666 A:middle
So that's what we start with.

00:37:19.516 --> 00:37:23.176 A:middle
Next, we move to the next
most specific data source

00:37:23.176 --> 00:37:25.636 A:middle
which is the composed
data source for details.

00:37:27.096 --> 00:37:30.126 A:middle
It just so happens that
it doesn't define any

00:37:30.126 --> 00:37:30.956 A:middle
metrics whatsoever.

00:37:31.156 --> 00:37:34.226 A:middle
Not default metrics, not
section-based metrics.

00:37:34.756 --> 00:37:38.246 A:middle
So then we can move on
to the status data source

00:37:39.346 --> 00:37:43.906 A:middle
which has section-based metrics
specifically for that section

00:37:44.546 --> 00:37:45.916 A:middle
of rowHeight equals 60

00:37:46.706 --> 00:37:48.976 A:middle
and selectedBackgroundColor
of mediumGrey.

00:37:49.916 --> 00:37:51.896 A:middle
Because remember, we
do the selection based

00:37:51.896 --> 00:37:52.706 A:middle
on the actual color.

00:37:53.846 --> 00:37:57.176 A:middle
So, we have these
overrides for rowHeight

00:37:57.936 --> 00:38:01.666 A:middle
and we have a new attribute for
the selectedBackgroundColor.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.936 --> 00:38:01.666 A:middle
and we have a new attribute for
the selectedBackgroundColor.

00:38:01.986 --> 00:38:04.536 A:middle
So you can imagine, if we
had to go through this,

00:38:05.566 --> 00:38:08.536 A:middle
every time we move the origin
of the collection view,

00:38:09.666 --> 00:38:12.946 A:middle
we'd get terrible frame rates.

00:38:13.146 --> 00:38:15.896 A:middle
So, it's really important
that we only do this

00:38:16.126 --> 00:38:17.766 A:middle
when it's absolutely necessary.

00:38:18.536 --> 00:38:20.416 A:middle
So we only do it when the
collection view changes.

00:38:21.046 --> 00:38:25.076 A:middle
But then, we go through and
we update our attributes

00:38:25.076 --> 00:38:26.876 A:middle
when we actually scroll.

00:38:27.486 --> 00:38:32.296 A:middle
So I spoke earlier about
Optional Layout Methods

00:38:32.926 --> 00:38:35.226 A:middle
and this is where my
whole confession comes in.

00:38:36.136 --> 00:38:37.356 A:middle
I did these out of order.

00:38:37.966 --> 00:38:40.216 A:middle
I know I spoke to some
of you in the lab earlier

00:38:40.746 --> 00:38:42.996 A:middle
and I gave you some
specific details.

00:38:43.526 --> 00:38:46.396 A:middle
I started with
-initialLayoutAttributes

00:38:46.396 --> 00:38:51.206 A:middle
and -finalLayoutAttributes and I
realize that, "Oh, my goodness.

00:38:51.556 --> 00:38:53.826 A:middle
In order to do
-initialLayoutAttributes

00:38:53.826 --> 00:38:57.086 A:middle
and -finalLayoutAttributes, I
need the update information."

00:38:57.316 --> 00:38:59.336 A:middle
So let me implement
-prepareForCollection

00:38:59.336 --> 00:39:04.476 A:middle
ViewUpdates and I'll just
grab the array of updates.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:59.336 --> 00:39:04.476 A:middle
ViewUpdates and I'll just
grab the array of updates.

00:39:05.116 --> 00:39:08.806 A:middle
I'll just stash those over
here because I need them.

00:39:09.016 --> 00:39:11.866 A:middle
And each time I would get called
for -initalLayoutAttributes,

00:39:11.866 --> 00:39:14.336 A:middle
I'd walk the array and I try
to figure out what was going on

00:39:15.386 --> 00:39:18.576 A:middle
and quickly my head exploded
because it was just too hard.

00:39:19.546 --> 00:39:24.156 A:middle
And I admit, I deleted
all the code.

00:39:24.306 --> 00:39:25.826 A:middle
I went on to other things

00:39:26.726 --> 00:39:29.186 A:middle
and it was weeks before I was
willing to come back to it.

00:39:29.186 --> 00:39:33.326 A:middle
And fortunately, in those weeks,
I talked to a lot of people.

00:39:33.326 --> 00:39:35.306 A:middle
I read a lot of the
documentation

00:39:35.306 --> 00:39:38.206 A:middle
and I finally figured out
what I was doing wrong.

00:39:38.206 --> 00:39:42.346 A:middle
And what I was doing wrong is
I wasn't doing my bookkeeping.

00:39:42.936 --> 00:39:45.406 A:middle
I wasn't collecting the
information that I needed.

00:39:46.676 --> 00:39:49.756 A:middle
And so let's talk
about that information

00:39:50.226 --> 00:39:52.356 A:middle
and more importantly let's talk

00:39:52.356 --> 00:39:54.566 A:middle
about the information
in the right order.

00:39:55.446 --> 00:39:57.376 A:middle
So this it turns out
is the right order.

00:39:57.756 --> 00:39:58.746 A:middle
Prepare for layout.

00:39:59.136 --> 00:40:01.636 A:middle
You probably already implement
this if you're doing a layout


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.136 --> 00:40:01.636 A:middle
You probably already implement
this if you're doing a layout

00:40:02.476 --> 00:40:04.826 A:middle
but there's some information
that we need to capture here,

00:40:05.076 --> 00:40:07.106 A:middle
not just building our layout.

00:40:08.056 --> 00:40:11.306 A:middle
And then -prepareForCollection
ViewUpdates followed

00:40:11.306 --> 00:40:14.216 A:middle
by -targetContentOffsetFor
ProposedContentOffset,

00:40:14.216 --> 00:40:17.906 A:middle
which is quite a mouthful, and
then -initialLayoutAttributes

00:40:17.906 --> 00:40:19.046 A:middle
and -finalLayoutAttributes.

00:40:19.606 --> 00:40:22.216 A:middle
So I'm going to talk
about -prepareLayout

00:40:22.216 --> 00:40:24.326 A:middle
and -prepareForCollection
ViewUpdates together

00:40:25.006 --> 00:40:27.806 A:middle
because they do sort of pair up.

00:40:28.556 --> 00:40:30.716 A:middle
First, -prepareLayout.

00:40:31.546 --> 00:40:34.026 A:middle
So here's my layout,
very colorful.

00:40:34.776 --> 00:40:39.796 A:middle
And when I get -prepareLayout,
what I do is I take a snapshot

00:40:41.016 --> 00:40:44.086 A:middle
of the current layout and
I keep it as my old layout.

00:40:45.596 --> 00:40:49.076 A:middle
In the process of building my
layout, I have a lookup table

00:40:49.306 --> 00:40:54.786 A:middle
between all the IndexPaths
to items, all the IndexPaths

00:40:54.836 --> 00:40:58.176 A:middle
to supplementary views, all the
IndexPaths to decoration views.

00:40:59.386 --> 00:41:01.246 A:middle
Remember I said,
keep everything.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.386 --> 00:41:01.246 A:middle
Remember I said,
keep everything.

00:41:02.206 --> 00:41:04.306 A:middle
Well, when I get called
for -prepareLayout,

00:41:05.046 --> 00:41:05.916 A:middle
I duplicate everything.

00:41:06.216 --> 00:41:08.506 A:middle
I stash it as the old layout.

00:41:09.696 --> 00:41:12.936 A:middle
Then, in -prepareForCollection
ViewUpdates,

00:41:13.906 --> 00:41:17.036 A:middle
I create a lookup table
for deletions, insertions

00:41:17.326 --> 00:41:18.516 A:middle
and everything that
was reloaded.

00:41:18.516 --> 00:41:21.556 A:middle
And I run through
the array of updates

00:41:22.626 --> 00:41:24.226 A:middle
and all the deletions
get tracked

00:41:25.626 --> 00:41:29.186 A:middle
and all the insertions
also get tracked.

00:41:29.316 --> 00:41:32.726 A:middle
So now, I know everything
that's going on in my layout.

00:41:32.726 --> 00:41:36.116 A:middle
And then before I'm done

00:41:36.116 --> 00:41:37.576 A:middle
with -prepareForCollection
ViewUpdates,

00:41:38.066 --> 00:41:42.726 A:middle
I calculate the delta in the
height of the two layouts

00:41:43.756 --> 00:41:50.676 A:middle
as well as the change in
where the offset of the start

00:41:50.676 --> 00:41:51.916 A:middle
of my content should be.

00:41:52.346 --> 00:41:54.396 A:middle
Because I've got
content that's pinned

00:41:54.396 --> 00:41:56.366 A:middle
and possibly scrolled
off the screen.

00:41:56.696 --> 00:41:57.796 A:middle
It gets a little bit tricky.

00:41:58.526 --> 00:42:00.036 A:middle
And for the sake
of the examples,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.526 --> 00:42:00.036 A:middle
And for the sake
of the examples,

00:42:00.036 --> 00:42:01.076 A:middle
we're going to ignore all that.

00:42:01.966 --> 00:42:05.496 A:middle
But that all gets done
right here before I return

00:42:05.496 --> 00:42:07.256 A:middle
from prepareForCollection
ViewUpdates.

00:42:07.256 --> 00:42:11.006 A:middle
So, let's take a look at one

00:42:11.106 --> 00:42:13.616 A:middle
of the other methods
I didn't implement

00:42:14.426 --> 00:42:18.476 A:middle
and later wished I had, the
-targetContentOffset method.

00:42:19.616 --> 00:42:23.326 A:middle
Now, the documentation says that
this adjusts the scroll offset

00:42:24.306 --> 00:42:27.636 A:middle
and I didn't understand
viscerally,

00:42:27.636 --> 00:42:30.496 A:middle
how important this was
until I saw it in action.

00:42:30.806 --> 00:42:32.226 A:middle
And so I have animations
that I'm going

00:42:32.226 --> 00:42:34.386 A:middle
to show you just how
important this is.

00:42:35.006 --> 00:42:39.476 A:middle
It's used by my layout actually
to calculate the pinning offset

00:42:39.956 --> 00:42:43.226 A:middle
and the delta that I use
to prevent unwanted motion.

00:42:43.306 --> 00:42:45.996 A:middle
And the trick is I get
this calculation correct,

00:42:46.146 --> 00:42:48.106 A:middle
which took a little while,

00:42:48.106 --> 00:42:50.326 A:middle
but then I used it
in so many places.

00:42:51.636 --> 00:42:53.636 A:middle
So let's take a look at
that exactly how that works.

00:42:54.356 --> 00:42:57.736 A:middle
Before I implemented this,
here I've got my old content

00:42:58.396 --> 00:43:02.426 A:middle
and it's 320 by 1000 and
I'm scrolled all the way


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.396 --> 00:43:02.426 A:middle
and it's 320 by 1000 and
I'm scrolled all the way

00:43:03.226 --> 00:43:04.546 A:middle
to the bottom.

00:43:04.546 --> 00:43:07.376 A:middle
And I put in some new content
which is considerably shorter

00:43:08.526 --> 00:43:12.146 A:middle
and collection view, remember,
does a lot of work for us

00:43:12.606 --> 00:43:15.126 A:middle
and it says, "Hey,
that's not valid.

00:43:15.596 --> 00:43:16.416 A:middle
I'll help you out.

00:43:17.266 --> 00:43:20.146 A:middle
I'll adjust your
contentOffset to 0, 165.

00:43:20.146 --> 00:43:22.496 A:middle
I'll animate everything
down for you."

00:43:22.986 --> 00:43:26.136 A:middle
Well remember, I'm
not easy to please

00:43:26.906 --> 00:43:27.906 A:middle
and I don't want it there.

00:43:27.906 --> 00:43:31.336 A:middle
I want to be able to see
the new content beginning

00:43:31.336 --> 00:43:32.236 A:middle
at the new content.

00:43:32.656 --> 00:43:34.656 A:middle
That's kind of why
I put it there.

00:43:34.756 --> 00:43:38.586 A:middle
So, that means to me that I
need to change my contentOffset.

00:43:39.986 --> 00:43:44.816 A:middle
So, after implementing
target contentOffset

00:43:44.816 --> 00:43:50.856 A:middle
for proposed contentOffset, here
I've got my old content again

00:43:50.856 --> 00:43:54.826 A:middle
with the original
contentOffset of 0, 432.

00:43:55.366 --> 00:43:59.546 A:middle
And this time, I propose-give
a new contentOffset of 0,

00:43:59.546 --> 00:44:04.206 A:middle
0 and notice, whoosh,
everything slides down


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.546 --> 00:44:04.206 A:middle
0 and notice, whoosh,
everything slides down

00:44:04.536 --> 00:44:07.286 A:middle
and I can see my content
at the correct position.

00:44:08.386 --> 00:44:12.936 A:middle
But I'm still not happy because
my content shouldn't be moving.

00:44:13.706 --> 00:44:16.636 A:middle
If you've seen the sample app
or you've seen iTunes Connect

00:44:17.146 --> 00:44:19.766 A:middle
or if you've seen Game
Center, you actually know

00:44:19.766 --> 00:44:23.236 A:middle
that I wanted my content
not just to come in.

00:44:23.956 --> 00:44:26.536 A:middle
I wanted my content to
slide in from the side

00:44:27.076 --> 00:44:28.516 A:middle
because frankly that's cool.

00:44:29.476 --> 00:44:32.816 A:middle
And if I've got content
that slides in from the top

00:44:33.226 --> 00:44:36.566 A:middle
and slides in from the side, my
users are going to get seasick.

00:44:36.926 --> 00:44:37.836 A:middle
I don't want that.

00:44:37.836 --> 00:44:39.566 A:middle
I'm going to get
one-star reviews for that.

00:44:40.176 --> 00:44:45.366 A:middle
So the solution is -initial
and -finalLayoutAttributes.

00:44:45.626 --> 00:44:49.146 A:middle
That function that I tried
to do first is the final one

00:44:49.146 --> 00:44:50.006 A:middle
that I needed to implement.

00:44:50.896 --> 00:44:51.956 A:middle
And just a reminder,

00:44:52.866 --> 00:44:55.896 A:middle
initialLayoutAttributes is
called if the view will be

00:44:55.896 --> 00:44:57.376 A:middle
on the screen after the update.

00:44:57.836 --> 00:45:00.906 A:middle
finalLayoutAttributes is
called if the view was


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:57.836 --> 00:45:00.906 A:middle
finalLayoutAttributes is
called if the view was

00:45:00.906 --> 00:45:02.986 A:middle
on the screen before the
update and they're both going

00:45:02.986 --> 00:45:05.396 A:middle
to be called for a view
that remains on the screen.

00:45:06.626 --> 00:45:09.646 A:middle
And I know you're not
going to believe this

00:45:09.646 --> 00:45:14.196 A:middle
until you see the code, but it's
actually really simple once all

00:45:14.196 --> 00:45:15.396 A:middle
the information is
been processed.

00:45:16.696 --> 00:45:19.646 A:middle
So, let's look at some more
animations before I let you see

00:45:19.646 --> 00:45:19.966 A:middle
the code.

00:45:20.466 --> 00:45:24.916 A:middle
On the left here, we see what's
happening to the viewport.

00:45:25.806 --> 00:45:29.526 A:middle
On the right is what the
user actually sees, OK?

00:45:29.846 --> 00:45:34.376 A:middle
Without initialLayoutAttributes,
the blue content is stuck

00:45:34.966 --> 00:45:39.546 A:middle
where it really is and the
viewport slides up to meet it

00:45:39.546 --> 00:45:43.016 A:middle
and that makes that
unwanted animation.

00:45:44.996 --> 00:45:50.316 A:middle
However, after I've implemented
initialLayoutAttributes,

00:45:50.856 --> 00:45:54.086 A:middle
you'll notice that the
new content is synced

00:45:54.086 --> 00:45:57.896 A:middle
up with the viewport and
as the viewport transitions

00:45:57.896 --> 00:46:01.956 A:middle
to its new location, the
new content animates with it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:57.896 --> 00:46:01.956 A:middle
to its new location, the
new content animates with it

00:46:01.956 --> 00:46:06.516 A:middle
and appears to stand still.

00:46:06.726 --> 00:46:10.116 A:middle
Now, everything is
moving but nothing appears

00:46:10.116 --> 00:46:12.006 A:middle
like it's moving, and
that's what's important.

00:46:12.006 --> 00:46:15.066 A:middle
So, let's take a look
at the actual code.

00:46:15.066 --> 00:46:16.936 A:middle
I promise you it's
actually really simple.

00:46:18.296 --> 00:46:21.226 A:middle
So, this is the first half.

00:46:21.386 --> 00:46:26.596 A:middle
We start off by getting the
section then we get a copy

00:46:26.796 --> 00:46:29.346 A:middle
of the layout attributes,
and obviously we need to copy

00:46:29.346 --> 00:46:31.836 A:middle
because we're going to modify
them possibly and we don't want

00:46:31.836 --> 00:46:33.146 A:middle
to modify the real attributes

00:46:33.186 --> 00:46:35.326 A:middle
because then we'll be
modifying the real attributes

00:46:35.816 --> 00:46:37.896 A:middle
and then our cells
will be horrible.

00:46:38.516 --> 00:46:41.316 A:middle
So then, we just
determine whether

00:46:41.316 --> 00:46:44.106 A:middle
or not this particular item
was inserted or reloaded.

00:46:44.676 --> 00:46:46.936 A:middle
Remember I said we did
all this calculation

00:46:47.156 --> 00:46:48.656 A:middle
in -prepareForCollection
ViewUpdates,

00:46:49.146 --> 00:46:53.246 A:middle
and now that means we've only
got these two lines of code.

00:46:54.656 --> 00:46:57.046 A:middle
Then it was inserted.

00:46:57.766 --> 00:47:01.796 A:middle
We changed the alpha to be
0 so it's going to fade in.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:57.766 --> 00:47:01.796 A:middle
We changed the alpha to be
0 so it's going to fade in.

00:47:02.286 --> 00:47:08.636 A:middle
If it was reloaded and it
didn't exist in the old layout,

00:47:09.296 --> 00:47:11.426 A:middle
remember I created the
snapshot of the old layout.

00:47:12.326 --> 00:47:16.186 A:middle
So, if there is no item at that
IndexPath in the old layout

00:47:16.936 --> 00:47:19.066 A:middle
when it was reloaded,
we want it to fade in.

00:47:19.676 --> 00:47:21.186 A:middle
It's perfectly OK.

00:47:21.496 --> 00:47:24.416 A:middle
If there was an item there the
previous time then it's just

00:47:24.416 --> 00:47:24.966 A:middle
going to change.

00:47:25.396 --> 00:47:26.686 A:middle
I'm OK with that.

00:47:27.476 --> 00:47:32.166 A:middle
And then finally, we want to
offset the origin of the item

00:47:33.026 --> 00:47:35.496 A:middle
by the delta of the
content offset.

00:47:36.136 --> 00:47:42.746 A:middle
And that way, everything is
going to stay exactly in place.

00:47:42.936 --> 00:47:46.226 A:middle
So, to recap, bookkeeping
is critical

00:47:46.666 --> 00:47:48.076 A:middle
to making your layout work.

00:47:48.376 --> 00:47:50.106 A:middle
If you don't have the
information you need,

00:47:50.336 --> 00:47:52.786 A:middle
there's no way you can
make these methods work.

00:47:53.916 --> 00:47:57.566 A:middle
And then the optional methods
really make a huge difference.

00:47:58.006 --> 00:48:01.376 A:middle
They're the difference between
a layout that technically works


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:58.006 --> 00:48:01.376 A:middle
They're the difference between
a layout that technically works

00:48:01.816 --> 00:48:03.066 A:middle
and a layout that's just great.

00:48:03.936 --> 00:48:06.986 A:middle
So, middle four requirements.

00:48:06.986 --> 00:48:09.026 A:middle
I think we did a pretty
good job with that.

00:48:09.976 --> 00:48:14.516 A:middle
The last three I thought were
just going to be, you know,

00:48:15.026 --> 00:48:17.416 A:middle
a little something extra that
we'd add to the application.

00:48:18.336 --> 00:48:22.346 A:middle
And they changed from being
a little something extra

00:48:22.346 --> 00:48:25.276 A:middle
when they started to
take a little bit of time

00:48:25.456 --> 00:48:27.986 A:middle
so let's take a look at them.

00:48:28.196 --> 00:48:31.066 A:middle
In order to add Swipe to
Edit, obviously we needed

00:48:31.066 --> 00:48:32.776 A:middle
to add actions to our cells.

00:48:33.426 --> 00:48:36.036 A:middle
And there's any numbers of ways
we could have added actions.

00:48:36.456 --> 00:48:39.336 A:middle
But in this case, we add
them directly to the cells.

00:48:40.346 --> 00:48:43.286 A:middle
And here we are because we're
going to use this as an example.

00:48:43.746 --> 00:48:47.746 A:middle
We're adding two actions
to a cell, makeFavorite

00:48:48.266 --> 00:48:49.946 A:middle
and swipeToDeleteCell.

00:48:50.556 --> 00:48:54.856 A:middle
You can see that each action
has a title and a selector.

00:48:55.636 --> 00:48:59.356 A:middle
Those selectors when they
get-- when the actions invoked,

00:48:59.766 --> 00:49:01.316 A:middle
bubble up the responder chain


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:59.766 --> 00:49:01.316 A:middle
bubble up the responder chain

00:49:01.506 --> 00:49:03.356 A:middle
and our view controller
catches them.

00:49:04.536 --> 00:49:07.186 A:middle
Now, for swipe to
edit and batch editing

00:49:07.186 --> 00:49:08.226 A:middle
and the whole nine yards,

00:49:08.986 --> 00:49:11.286 A:middle
we needed some additional
custom attributes.

00:49:12.306 --> 00:49:17.636 A:middle
We needed the columnIndex,
the editing state, and whether

00:49:17.636 --> 00:49:18.836 A:middle
or not a cell was movable.

00:49:19.296 --> 00:49:22.286 A:middle
And I think those will become
apparent why we needed them

00:49:22.286 --> 00:49:22.976 A:middle
in just a moment.

00:49:23.896 --> 00:49:27.716 A:middle
So, for Swipe to Edit with
one column, this works exactly

00:49:27.716 --> 00:49:29.456 A:middle
as you would expect, right?

00:49:29.696 --> 00:49:33.446 A:middle
Swipe over, you get the two
buttons, you tap on a button,

00:49:34.036 --> 00:49:35.656 A:middle
actually goes up
the responder chain,

00:49:36.036 --> 00:49:37.186 A:middle
view controller catches it.

00:49:37.476 --> 00:49:40.266 A:middle
Hooray, all is good.

00:49:41.286 --> 00:49:44.786 A:middle
Now, in the case of the delete
action, that's all handled

00:49:44.786 --> 00:49:45.896 A:middle
by the base view controller.

00:49:46.436 --> 00:49:51.146 A:middle
For two columns, it gets a
little bit more complicated

00:49:51.506 --> 00:49:55.056 A:middle
because, just like Game
Center, we wanted it to appear

00:49:55.906 --> 00:50:01.166 A:middle
that our cell was sliding
underneath the other content.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:55.906 --> 00:50:01.166 A:middle
that our cell was sliding
underneath the other content.

00:50:02.496 --> 00:50:07.066 A:middle
And in order to do that, we
needed to have the column index

00:50:07.536 --> 00:50:09.786 A:middle
as an attribute on the cell.

00:50:10.536 --> 00:50:13.806 A:middle
So when the column index is not
0, we display a little gradient

00:50:14.366 --> 00:50:17.146 A:middle
and therefore everything looks
like it's sliding underneath.

00:50:17.706 --> 00:50:21.946 A:middle
So for batch editing,
we have an attribute

00:50:22.056 --> 00:50:23.236 A:middle
for whether it's editing.

00:50:23.786 --> 00:50:27.406 A:middle
And when that changes to No, we
animate out our editing controls

00:50:27.406 --> 00:50:31.656 A:middle
and if movable is Yes, then
we'll also display the gripper.

00:50:32.656 --> 00:50:36.216 A:middle
And movable is actually
determined based on a query

00:50:36.216 --> 00:50:39.416 A:middle
to your data source or
our data source really.

00:50:40.006 --> 00:50:43.386 A:middle
And as you would expect,
you tap on the twisty thing

00:50:43.966 --> 00:50:45.306 A:middle
and out come the
editing controls.

00:50:47.346 --> 00:50:51.876 A:middle
And because I am much
addicted to state machines,

00:50:52.406 --> 00:50:57.166 A:middle
it is all controlled by
another state machine.

00:50:58.086 --> 00:50:59.886 A:middle
This manages all of our
gesture recognizers,

00:50:59.926 --> 00:51:03.676 A:middle
the UIPanGestureRecognizer, the
UILongPressGestureRecognizer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.926 --> 00:51:03.676 A:middle
the UIPanGestureRecognizer, the
UILongPressGestureRecognizer.

00:51:03.736 --> 00:51:06.896 A:middle
The states are somewhat complex.

00:51:07.996 --> 00:51:10.026 A:middle
The diagram gives
you an indication.

00:51:10.466 --> 00:51:12.406 A:middle
The reason for that
is that we have

00:51:12.406 --> 00:51:14.156 A:middle
to respond to external stimulus.

00:51:14.506 --> 00:51:16.716 A:middle
So for example, if you have
a toolbar that has an Edit

00:51:16.716 --> 00:51:19.016 A:middle
and a Done button that toggles.

00:51:19.016 --> 00:51:23.486 A:middle
If you're editing and the user
taps Done, at any given moment,

00:51:23.486 --> 00:51:24.936 A:middle
we have to shut it all down

00:51:25.346 --> 00:51:27.926 A:middle
and transition back
into the idle state.

00:51:28.816 --> 00:51:32.806 A:middle
And so, that means that things
are a little bit more complex.

00:51:33.926 --> 00:51:37.486 A:middle
I'd love to revisit this and
see if I can't, you know,

00:51:37.616 --> 00:51:41.266 A:middle
simplify it, but it
works and that's,

00:51:41.666 --> 00:51:42.786 A:middle
you know, a key criteria.

00:51:44.176 --> 00:51:46.546 A:middle
It only works with our
layout in our cells.

00:51:47.536 --> 00:51:51.396 A:middle
I tried at some length to
generalize it a little bit more,

00:51:51.996 --> 00:51:56.016 A:middle
but it works and
that's a great feature.

00:51:56.726 --> 00:51:57.956 A:middle
So, Drag to Reorder.

00:51:58.846 --> 00:52:00.426 A:middle
It required some layout changes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:58.846 --> 00:52:00.426 A:middle
It required some layout changes.

00:52:00.996 --> 00:52:03.016 A:middle
In order to make
everything work correctly,

00:52:03.836 --> 00:52:05.546 A:middle
we need to add a layout gap.

00:52:06.716 --> 00:52:09.636 A:middle
So as you're dragging
the cell around,

00:52:09.966 --> 00:52:13.366 A:middle
we needed to split apart
the existing cells.

00:52:14.726 --> 00:52:18.116 A:middle
And we also needed to take the
cell that you were dragging

00:52:18.446 --> 00:52:20.776 A:middle
and mark it as Hidden.

00:52:20.916 --> 00:52:22.726 A:middle
And we also needed to make sure

00:52:22.726 --> 00:52:25.636 A:middle
that our layout calculation
was fast enough.

00:52:25.636 --> 00:52:28.566 A:middle
I'm not going to pretend that
it's as fast as it's going

00:52:28.566 --> 00:52:32.996 A:middle
to get because I'm not done
yet, but it was fast enough.

00:52:34.046 --> 00:52:36.236 A:middle
It feels reasonably fluid.

00:52:36.776 --> 00:52:39.476 A:middle
It's good enough for
the first release.

00:52:40.706 --> 00:52:42.886 A:middle
Now, it does require
data source support.

00:52:43.436 --> 00:52:46.686 A:middle
So by default, the data source
normally answers, "Nope,

00:52:46.686 --> 00:52:47.416 A:middle
you can't move that one.

00:52:47.906 --> 00:52:50.066 A:middle
Nope, you can't edit
that," so on and so forth.

00:52:50.696 --> 00:52:53.776 A:middle
So, in order to actually
implement drag reordering

00:52:53.776 --> 00:52:56.726 A:middle
in your code, you're going
to want to say, "Oh yes,

00:52:56.756 --> 00:52:57.636 A:middle
you can move those thing.

00:52:57.636 --> 00:52:59.456 A:middle
You can drag those things."

00:52:59.576 --> 00:53:03.276 A:middle
And so there are some methods
on your data source that need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.576 --> 00:53:03.276 A:middle
And so there are some methods
on your data source that need

00:53:03.276 --> 00:53:04.896 A:middle
to have the right responses.

00:53:06.206 --> 00:53:09.776 A:middle
But it really was an
incremental change to our layout

00:53:09.776 --> 00:53:11.866 A:middle
and an incremental change
to our data sources.

00:53:12.446 --> 00:53:17.936 A:middle
So, that's the last
three requirements.

00:53:18.906 --> 00:53:23.646 A:middle
And they were a little bit of
a challenge but they were just,

00:53:24.356 --> 00:53:25.476 A:middle
you know, a little bit extra.

00:53:26.926 --> 00:53:31.346 A:middle
So in summary, the aggregate
data sources went a long way

00:53:31.346 --> 00:53:33.516 A:middle
to simplifying our
complex designs.

00:53:33.916 --> 00:53:36.706 A:middle
When I first saw the
designs that HI gave us,

00:53:36.706 --> 00:53:38.986 A:middle
I was a little bit terrified.

00:53:39.846 --> 00:53:40.716 A:middle
There was a lot there.

00:53:40.716 --> 00:53:45.316 A:middle
We had a very short
time and I'm glad

00:53:45.316 --> 00:53:47.026 A:middle
that we found a way
to make it easier.

00:53:48.296 --> 00:53:50.516 A:middle
And for UICollectionView?

00:53:51.216 --> 00:53:53.306 A:middle
Bookkeeping, bookkeeping,
bookkeeping.

00:53:53.606 --> 00:53:54.676 A:middle
Keep all the data.

00:53:55.876 --> 00:53:56.916 A:middle
Don't let it out of your sight.

00:53:58.286 --> 00:54:00.376 A:middle
At the very end,
when you're concerned


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:58.286 --> 00:54:00.376 A:middle
At the very end,
when you're concerned

00:54:00.376 --> 00:54:03.346 A:middle
that you're using too much
memory, fire up Instruments.

00:54:04.126 --> 00:54:06.206 A:middle
Let Instruments tell you if
you're using too much memory.

00:54:07.656 --> 00:54:09.376 A:middle
And then finally, Swipe to Edit,

00:54:09.376 --> 00:54:11.526 A:middle
Drag Reordering-they're
just incremental things.

00:54:12.006 --> 00:54:13.956 A:middle
You can do it.

00:54:13.956 --> 00:54:16.046 A:middle
And they're sample code.

00:54:16.776 --> 00:54:19.486 A:middle
Pull it out of there and
make it part of your own.

00:54:20.066 --> 00:54:22.096 A:middle
So, for more information,

00:54:22.576 --> 00:54:24.756 A:middle
talk to the incomparable
Jake Behrens.

00:54:25.466 --> 00:54:27.676 A:middle
I'm told he has great shoes.

00:54:28.596 --> 00:54:31.116 A:middle
Documentation, take a look

00:54:31.116 --> 00:54:34.876 A:middle
at the iOS documentation
online and the Dev Forums.

00:54:34.996 --> 00:54:36.526 A:middle
There's great material there.

00:54:37.266 --> 00:54:38.966 A:middle
We've been known to
hang out there as well.

00:54:40.126 --> 00:54:42.086 A:middle
There were related
sessions this morning.

00:54:42.616 --> 00:54:44.016 A:middle
I'm sure they'll be
online this evening.

00:54:44.776 --> 00:54:46.116 A:middle
So, thank you so much for coming

00:54:46.116 --> 00:54:48.776 A:middle
and I hope you enjoyed
this evening.

00:54:50.516 --> 00:54:53.350 A:middle
[ Applause ]

