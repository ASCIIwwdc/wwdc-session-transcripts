WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.216 --> 00:00:11.726 A:middle
&gt;&gt; Good morning.

00:00:12.806 --> 00:00:17.546 A:middle
Welcome to Session 709, "Cross
Platform Nearby Networking".

00:00:19.226 --> 00:00:21.766 A:middle
My name is Demijan, and
I'm a Software Engineer

00:00:21.826 --> 00:00:23.896 A:middle
in the Real-time
Networking Team at Apple.

00:00:24.566 --> 00:00:28.196 A:middle
Last year we introduced a new
framework called Multipeer

00:00:28.196 --> 00:00:31.406 A:middle
Connectivity in iOS,
which makes it really,

00:00:31.406 --> 00:00:36.186 A:middle
really easy to discover and
communicate with nearby devices.

00:00:37.306 --> 00:00:42.186 A:middle
Building a network with nearby
devices can be accomplished

00:00:42.496 --> 00:00:44.266 A:middle
with only a few lines of code.

00:00:45.036 --> 00:00:48.956 A:middle
Many, many apps have decided
to adopt Multipeer Connectivity

00:00:49.216 --> 00:00:51.106 A:middle
for their nearby
networking needs.

00:00:51.966 --> 00:00:55.376 A:middle
And some of the use cases we've
seen have really made us smile,

00:00:55.906 --> 00:00:58.266 A:middle
so I'd like to mention
some of them to you today.

00:00:59.846 --> 00:01:05.686 A:middle
First, iTranslate Voice:
iTranslate Voice is an app


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:59.846 --> 00:01:05.686 A:middle
First, iTranslate Voice:
iTranslate Voice is an app

00:01:06.426 --> 00:01:09.676 A:middle
that brings real-time
translation to iOS users.

00:01:11.556 --> 00:01:13.526 A:middle
They use Multipeer Connectivity

00:01:13.766 --> 00:01:17.486 A:middle
to connect multiple devices
together and enable people

00:01:17.486 --> 00:01:19.546 A:middle
who don't share a
common language

00:01:19.806 --> 00:01:22.216 A:middle
to communicate with each other.

00:01:22.216 --> 00:01:25.986 A:middle
One person speaks a
sentence into their device

00:01:25.986 --> 00:01:31.176 A:middle
in their language, and the other
person hears the translation

00:01:31.176 --> 00:01:33.426 A:middle
of that sentence on
the other device.

00:01:34.206 --> 00:01:36.936 A:middle
It's really, really cool.

00:01:37.276 --> 00:01:40.466 A:middle
Second example is an app
called Metronome Touch.

00:01:41.316 --> 00:01:45.036 A:middle
Metronome Touch synchronizes
multiple metronomes,

00:01:45.606 --> 00:01:50.406 A:middle
and a metronome is a tool
that musicians use to play

00:01:50.406 --> 00:01:53.316 A:middle
to the same beat or
follow the same tempo.

00:01:54.686 --> 00:01:58.256 A:middle
Now Metronome Touch uses
Multipeer Connectivity

00:01:58.526 --> 00:02:01.746 A:middle
to accurately synchronize
multiple iOS devices


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:58.526 --> 00:02:01.746 A:middle
to accurately synchronize
multiple iOS devices

00:02:02.196 --> 00:02:06.266 A:middle
so that the metronome on each
device ticks in perfect sync.

00:02:06.876 --> 00:02:13.946 A:middle
And, third, FireChat,
FireChat brings nearby chatting

00:02:14.186 --> 00:02:15.176 A:middle
to our customers.

00:02:15.886 --> 00:02:20.146 A:middle
People who are nearby can now
communicate with each other even

00:02:20.146 --> 00:02:22.186 A:middle
when there is no internet
connection available.

00:02:23.036 --> 00:02:25.806 A:middle
This type of application
can be particularly useful

00:02:26.046 --> 00:02:29.346 A:middle
in environments, like subway
stations or airplanes,

00:02:29.346 --> 00:02:31.726 A:middle
for example, but
also in countries

00:02:32.036 --> 00:02:33.686 A:middle
with limited internet access.

00:02:34.556 --> 00:02:38.156 A:middle
We've seen many other use cases
for Multipeer Connectivity

00:02:38.376 --> 00:02:41.246 A:middle
and some of the prevalent ones
have been to exchange data,

00:02:41.706 --> 00:02:44.656 A:middle
such as files, and to
to-do lists for example,

00:02:45.116 --> 00:02:47.136 A:middle
and remote control
functionality.

00:02:48.426 --> 00:02:52.256 A:middle
Now throughout the year we've
heard a lot of good feedback

00:02:52.256 --> 00:02:54.706 A:middle
from you guys and we've
heard a lot of good ideas,

00:02:55.396 --> 00:02:59.526 A:middle
but one request that has come
up over and over again has been

00:02:59.526 --> 00:03:02.356 A:middle
to bring Multipeer
Connectivity to the Mac.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.526 --> 00:03:02.356 A:middle
to bring Multipeer
Connectivity to the Mac.

00:03:03.706 --> 00:03:06.396 A:middle
So this year I'm
really happy to announce

00:03:06.716 --> 00:03:08.976 A:middle
that we're bringing
Multipeer Connectivity

00:03:09.276 --> 00:03:11.946 A:middle
to OS X starting with Yosemite.

00:03:12.416 --> 00:03:14.826 A:middle
From now on you will be able

00:03:14.826 --> 00:03:19.826 A:middle
to do cross-platform nearby
networking between iOS

00:03:19.826 --> 00:03:24.166 A:middle
and OS X devices just as easily
as you have been so far on iOS.

00:03:25.956 --> 00:03:28.476 A:middle
And the API is exactly the same,

00:03:28.786 --> 00:03:32.486 A:middle
so you should be
ready in no time.

00:03:32.526 --> 00:03:35.496 A:middle
All right, so let's talk
about the agenda for today.

00:03:36.516 --> 00:03:40.416 A:middle
First, I want to talk about
some basics so we set the stage

00:03:40.416 --> 00:03:41.446 A:middle
for the rest of the talk.

00:03:42.366 --> 00:03:45.786 A:middle
Then I will talk about
Multipeer Connectivity on OS X,

00:03:46.406 --> 00:03:50.656 A:middle
where I'll focus on some of
the specifics that are true

00:03:50.656 --> 00:03:54.636 A:middle
for development on OS X and
for the OS X experience.

00:03:55.786 --> 00:03:58.486 A:middle
Next, I will talk about
a few best practices.

00:03:59.326 --> 00:04:03.106 A:middle
And, finally, I'd like to cover
a few more advanced topics,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.326 --> 00:04:03.106 A:middle
And, finally, I'd like to cover
a few more advanced topics,

00:04:03.426 --> 00:04:06.566 A:middle
namely custom discovery
and authentication.

00:04:08.516 --> 00:04:10.646 A:middle
So let's start with the basics.

00:04:11.396 --> 00:04:15.446 A:middle
Multipeer Connectivity supports
three wireless technologies

00:04:15.446 --> 00:04:21.696 A:middle
on iOS-Bluetooth, Infrastructure
Wi-Fi, and Peer-to-Peer Wi-Fi.

00:04:22.736 --> 00:04:28.466 A:middle
On OS X we will support
Ethernet, Infrastructure Wi-Fi,

00:04:29.016 --> 00:04:30.896 A:middle
and Peer-to-Peer Wi-Fi, as well.

00:04:32.136 --> 00:04:35.426 A:middle
So I'd like to talk about
Peer-to-Peer Wi-Fi for a moment.

00:04:35.936 --> 00:04:39.506 A:middle
Peer-to-Peer Wi-Fi
enables you to communicate

00:04:39.506 --> 00:04:42.786 A:middle
with other nearby devices
even if they're not connected

00:04:42.786 --> 00:04:46.216 A:middle
to the same access point,
or if they're not connected

00:04:46.216 --> 00:04:47.386 A:middle
to an access point at all.

00:04:48.616 --> 00:04:50.186 A:middle
So, many of you have wondered

00:04:50.186 --> 00:04:52.666 A:middle
which devices support
Peer-to-Peer networking.

00:04:53.006 --> 00:04:55.556 A:middle
So I'd like to talk
about that a bit.

00:04:55.936 --> 00:04:57.916 A:middle
Well, on iOS it's pretty simple.

00:04:58.446 --> 00:05:02.776 A:middle
If your iOS device has the new
Lightning Connector then it


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:58.446 --> 00:05:02.776 A:middle
If your iOS device has the new
Lightning Connector then it

00:05:02.776 --> 00:05:04.486 A:middle
supports Peer-to-Peer Wi-Fi.

00:05:04.946 --> 00:05:08.376 A:middle
If it doesn't, it won't
support Peer-to-Peer Wi-Fi,

00:05:08.866 --> 00:05:11.376 A:middle
but on those devices you
can still use Bluetooth

00:05:11.726 --> 00:05:13.046 A:middle
and Infrastructure Wi-Fi.

00:05:14.276 --> 00:05:17.256 A:middle
For Macs, the story
is also pretty simple.

00:05:17.536 --> 00:05:21.106 A:middle
If you have a Mac that
was released in 2012

00:05:21.476 --> 00:05:25.826 A:middle
or later then it will have
support for Peer-to-Peer Wi-Fi.

00:05:27.016 --> 00:05:30.446 A:middle
Okay, so let's establish
some terminology

00:05:30.446 --> 00:05:32.246 A:middle
that we will use throughout
the rest of the talk.

00:05:32.596 --> 00:05:37.326 A:middle
First, nearby, by nearby I
will mean anything that is

00:05:37.326 --> 00:05:40.146 A:middle
within the range of supported
wireless technologies.

00:05:40.996 --> 00:05:44.776 A:middle
A peer, a peer will be a device,

00:05:44.826 --> 00:05:47.236 A:middle
either our own or
a nearby device.

00:05:48.696 --> 00:05:52.586 A:middle
An advertiser will be a device
that makes itself discoverable

00:05:52.586 --> 00:05:54.096 A:middle
to other devices nearby.

00:05:55.226 --> 00:05:58.546 A:middle
And the browser will be a
device that is searching

00:05:58.616 --> 00:06:01.266 A:middle
or discovering other
nearby devices.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:58.616 --> 00:06:01.266 A:middle
or discovering other
nearby devices.

00:06:02.566 --> 00:06:05.476 A:middle
Multipeer Connectivity
happens in two phases.

00:06:06.206 --> 00:06:08.036 A:middle
First, the discovery phase,

00:06:08.976 --> 00:06:10.946 A:middle
where the devices
discover each other

00:06:11.226 --> 00:06:13.216 A:middle
and establish a communication
session

00:06:13.216 --> 00:06:15.126 A:middle
by sending invitations
to each other.

00:06:16.096 --> 00:06:19.916 A:middle
Then when they're connected into
a session, the second phase,

00:06:19.916 --> 00:06:21.636 A:middle
called the session
phase, begins,

00:06:21.926 --> 00:06:23.696 A:middle
where they can exchange
data with each other.

00:06:24.726 --> 00:06:27.446 A:middle
So let's start with
the discovery phase.

00:06:28.436 --> 00:06:30.766 A:middle
The first approach
to discovery phase

00:06:30.766 --> 00:06:34.536 A:middle
that we support is UI-based
and it's the most simple one.

00:06:36.056 --> 00:06:39.916 A:middle
We have a browser
and an advertiser.

00:06:40.976 --> 00:06:44.776 A:middle
An advertiser has to
instantiate a peer ID object,

00:06:45.226 --> 00:06:48.696 A:middle
a session object, and an
advertiser assistant object.

00:06:49.326 --> 00:06:51.736 A:middle
It then starts by
calling the start method.

00:06:53.326 --> 00:06:56.426 A:middle
The browser similarly
instantiates a peer ID,

00:06:56.946 --> 00:06:59.376 A:middle
a session, and the
browser view controller.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:00.076 --> 00:07:02.426 A:middle
It then presents the
browser view controller

00:07:02.426 --> 00:07:04.586 A:middle
to the user to start browsing.

00:07:05.786 --> 00:07:09.066 A:middle
The rest of the process will
be entirely user-driven,

00:07:09.366 --> 00:07:12.816 A:middle
and you will be notified when
the peers connect into a session

00:07:13.206 --> 00:07:16.796 A:middle
with the session delegate
method, peer:didChangeState,

00:07:17.486 --> 00:07:20.446 A:middle
where the state will be
specified as connected.

00:07:20.676 --> 00:07:24.586 A:middle
So that was the UI-based
approach.

00:07:25.296 --> 00:07:27.116 A:middle
The programmatic
approach requires you

00:07:27.116 --> 00:07:28.386 A:middle
to do a little bit more work,

00:07:28.386 --> 00:07:30.646 A:middle
but it gives you much
more flexibility.

00:07:31.206 --> 00:07:35.296 A:middle
So, again, we have a
browser and an advertiser.

00:07:36.606 --> 00:07:40.646 A:middle
The advertiser instantiates a
nearby service object instead

00:07:40.646 --> 00:07:42.306 A:middle
of an advertiser
assistant object.

00:07:43.406 --> 00:07:47.526 A:middle
And the browser instantiates a
nearby service browser object

00:07:47.526 --> 00:07:49.176 A:middle
instead of the browser
view controller.

00:07:50.936 --> 00:07:55.926 A:middle
The browser starts by calling
startBrowsingForPeers method,

00:07:56.016 --> 00:08:00.826 A:middle
and the advertiser starts by
calling startAdvertisingPeer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:56.016 --> 00:08:00.826 A:middle
and the advertiser starts by
calling startAdvertisingPeer.

00:08:01.306 --> 00:08:03.956 A:middle
So now both of them
are-the browser is browsing,

00:08:04.176 --> 00:08:05.846 A:middle
and the advertiser
is advertising.

00:08:07.236 --> 00:08:11.346 A:middle
When the browser discovers the
advertiser you will be notified

00:08:11.346 --> 00:08:13.656 A:middle
with a delegate method,
foundPeer.

00:08:14.446 --> 00:08:18.006 A:middle
At that time the browser
can send an invitation

00:08:18.276 --> 00:08:23.426 A:middle
to the advertiser by calling
the invitePeer method.

00:08:23.816 --> 00:08:29.526 A:middle
When the browser calls the
invitePeer method an invitation

00:08:29.526 --> 00:08:31.386 A:middle
will be sent out
to the advertiser,

00:08:31.906 --> 00:08:34.785 A:middle
and when the advertiser receives
the invitation you will be

00:08:34.785 --> 00:08:38.226 A:middle
notified with the did receive
invitation from peer method.

00:08:38.716 --> 00:08:42.456 A:middle
At that time, the advertiser
has to decide whether it wants

00:08:42.456 --> 00:08:46.786 A:middle
to accept or reject
the invitation.

00:08:47.216 --> 00:08:49.386 A:middle
And let's say it
accepts the invitation,

00:08:50.516 --> 00:08:52.966 A:middle
then a message will be
sent back to the browser,

00:08:52.966 --> 00:08:55.296 A:middle
and they will start
connecting into a session.

00:08:56.036 --> 00:08:58.576 A:middle
When they connect with
each other, again,

00:08:58.926 --> 00:09:00.966 A:middle
you will be notified
with the delegate method,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.926 --> 00:09:00.966 A:middle
you will be notified
with the delegate method,

00:09:01.116 --> 00:09:05.726 A:middle
peer:DidChangeState, where
the state will be specified

00:09:06.066 --> 00:09:06.836 A:middle
as connected.

00:09:07.406 --> 00:09:11.506 A:middle
So this was the discovery phase.

00:09:11.956 --> 00:09:14.156 A:middle
Let's now cover the
session phase.

00:09:15.366 --> 00:09:17.136 A:middle
So in the session
phase we assume

00:09:17.136 --> 00:09:19.176 A:middle
that the nearby peers
are already connected

00:09:19.176 --> 00:09:22.206 A:middle
with each other, and now what
they want to do is they want

00:09:22.296 --> 00:09:23.946 A:middle
to exchange data
with each other.

00:09:24.086 --> 00:09:29.386 A:middle
Well, Multipeer Connectivity
supports three sets of APIs

00:09:29.606 --> 00:09:32.856 A:middle
for exchanging that
data-messages,

00:09:33.816 --> 00:09:36.656 A:middle
streaming, and resources.

00:09:37.876 --> 00:09:39.356 A:middle
Let's start with messages.

00:09:39.966 --> 00:09:45.656 A:middle
A message is a chunk of data
with well-defined boundaries.

00:09:45.726 --> 00:09:50.766 A:middle
If you want to send a message
you can use the sendData method,

00:09:51.146 --> 00:09:54.746 A:middle
where you will pass the
message as the first parameter,

00:09:54.926 --> 00:09:57.326 A:middle
encapsulated in an
NSData object.

00:09:58.106 --> 00:10:02.086 A:middle
You will also have to specify
an array of peers that you want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.106 --> 00:10:02.086 A:middle
You will also have to specify
an array of peers that you want

00:10:02.466 --> 00:10:03.906 A:middle
to receive the message.

00:10:04.866 --> 00:10:07.316 A:middle
When you receive a message
you will be notified

00:10:07.346 --> 00:10:11.016 A:middle
with a delegate method,
didReceiveData, which will pass

00:10:11.086 --> 00:10:13.726 A:middle
to you the message
and the sender.

00:10:14.116 --> 00:10:18.586 A:middle
Now if you want to send really
large amounts of data or data

00:10:18.586 --> 00:10:22.696 A:middle
without well-defined boundaries,
such as a live audio stream,

00:10:22.696 --> 00:10:26.276 A:middle
for example, then you might
be better served using our

00:10:26.276 --> 00:10:27.366 A:middle
streaming APIs.

00:10:28.536 --> 00:10:31.486 A:middle
And to start a stream
you can call the method,

00:10:31.486 --> 00:10:35.836 A:middle
startStreamWithName, which
will give you an NSOutputStream

00:10:35.836 --> 00:10:39.516 A:middle
object that you can use to
stream data to the recipient.

00:10:40.036 --> 00:10:42.866 A:middle
The recipient will be notified

00:10:42.866 --> 00:10:44.886 A:middle
where the delegate
method didReceiveStream,

00:10:45.256 --> 00:10:48.816 A:middle
and that method will give
it an NSInputStream object

00:10:48.886 --> 00:10:54.036 A:middle
that the recipient can use
to receive streaming data.

00:10:54.206 --> 00:11:01.136 A:middle
And, third, resources, we
support files and web URLs


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:54.206 --> 00:11:01.136 A:middle
And, third, resources, we
support files and web URLs

00:11:01.136 --> 00:11:04.376 A:middle
to send as resources, and
you can send a resource

00:11:04.376 --> 00:11:09.096 A:middle
by using sendResourceAtURL
method, where you specify

00:11:09.096 --> 00:11:12.376 A:middle
that the URL method of the
resource you want to send

00:11:12.716 --> 00:11:14.906 A:middle
and you specify which peer
you want to send it to.

00:11:16.276 --> 00:11:18.176 A:middle
You will also have to pass

00:11:18.176 --> 00:11:20.036 A:middle
to the framework a
completion handler,

00:11:20.446 --> 00:11:22.716 A:middle
and that completion
handler will be called

00:11:22.986 --> 00:11:25.186 A:middle
when the resource has
finished transmitting

00:11:25.566 --> 00:11:28.336 A:middle
or if something went wrong
during the transmission.

00:11:28.906 --> 00:11:33.316 A:middle
Now the receiver, when it
starts receiving a resource,

00:11:33.556 --> 00:11:35.496 A:middle
will be notified with
a delegate method,

00:11:35.796 --> 00:11:38.106 A:middle
didStartReceiving
ResourceWithName,

00:11:38.956 --> 00:11:42.386 A:middle
and when the resource finishes
being received it will be

00:11:42.386 --> 00:11:46.186 A:middle
notified with a delegate method,
didFinishResourceWithName.

00:11:47.356 --> 00:11:50.566 A:middle
Okay, so in summary, we've
covered the discovery phase

00:11:50.936 --> 00:11:51.946 A:middle
and the session phase.

00:11:52.496 --> 00:11:56.166 A:middle
You can do UI-based discovery
or programmatic discovery,

00:11:56.166 --> 00:11:57.996 A:middle
which gives you a
bit more flexibility,

00:11:58.586 --> 00:12:01.916 A:middle
and in the session phase you
can use APIs to send data


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.586 --> 00:12:01.916 A:middle
and in the session phase you
can use APIs to send data

00:12:02.316 --> 00:12:07.586 A:middle
where we support messages,
streaming and resources.

00:12:09.066 --> 00:12:13.476 A:middle
Much more in-depth information
about these topics can be seen

00:12:13.736 --> 00:12:17.326 A:middle
at our last year's
WWDC presentation,

00:12:17.486 --> 00:12:18.596 A:middle
which you can see online.

00:12:21.776 --> 00:12:27.226 A:middle
All right, let's proceed with
Multipeer Connectivity on OS X.

00:12:28.116 --> 00:12:34.886 A:middle
The good news is that the APIs
on OS X are exactly the same

00:12:35.126 --> 00:12:40.726 A:middle
as APIs on iOS, nevertheless,
there are some differences

00:12:41.016 --> 00:12:43.846 A:middle
that are different to the
OS X experience and I would

00:12:43.846 --> 00:12:47.156 A:middle
like to talk about those now.

00:12:47.466 --> 00:12:50.566 A:middle
Let's start with
UI-based discovery.

00:12:51.586 --> 00:12:53.596 A:middle
Imagine I have an app.

00:12:54.056 --> 00:12:56.186 A:middle
I have a Mac, which
is running an app

00:12:56.546 --> 00:12:58.346 A:middle
that uses Multipeer
Connectivity.

00:12:58.916 --> 00:13:01.286 A:middle
I want to see if
somebody is around,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.916 --> 00:13:01.286 A:middle
I want to see if
somebody is around,

00:13:01.516 --> 00:13:03.696 A:middle
so I bring up the
browser view controller.

00:13:05.116 --> 00:13:08.636 A:middle
The browser's view controller
is presented as a modal sheet,

00:13:08.946 --> 00:13:13.276 A:middle
and in the lower left corner you
can see an activity indicator,

00:13:13.586 --> 00:13:15.626 A:middle
which indicates to us
that we're browsing.

00:13:16.516 --> 00:13:18.056 A:middle
Currently there is
no one nearby.

00:13:19.966 --> 00:13:22.746 A:middle
Let's then assume
that Gabe comes nearby

00:13:22.846 --> 00:13:24.586 A:middle
and Gabe is also running an app

00:13:24.956 --> 00:13:26.666 A:middle
that uses Multipeer
Connectivity.

00:13:27.676 --> 00:13:31.306 A:middle
Moments later, we'll see in
our UI that Gabe is nearby,

00:13:32.806 --> 00:13:37.606 A:middle
and if I want to invite
Gabe into a session I have

00:13:37.656 --> 00:13:40.126 A:middle
to press the Invite
button in the table view.

00:13:40.786 --> 00:13:42.926 A:middle
So I go ahead and do that.

00:13:43.746 --> 00:13:46.336 A:middle
When I do that, an invitation
will be sent out to Gabe.

00:13:46.726 --> 00:13:50.286 A:middle
And when Gabe receives the
invitation, we will present,

00:13:50.286 --> 00:13:53.786 A:middle
the framework will present an
alert that will notify Gabe

00:13:53.786 --> 00:13:55.856 A:middle
that I want to connect to him.

00:13:56.496 --> 00:14:00.476 A:middle
At this time Gabe needs
to decide whether he wants


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:56.496 --> 00:14:00.476 A:middle
At this time Gabe needs
to decide whether he wants

00:14:00.516 --> 00:14:02.456 A:middle
to accept or decline
the invitation.

00:14:02.716 --> 00:14:06.016 A:middle
So let's assume Gabe is
game and wants to accept,

00:14:06.016 --> 00:14:08.696 A:middle
and accepts the invitation,
so he clicks on Accept.

00:14:08.696 --> 00:14:11.286 A:middle
And an accept message
is sent back to me.

00:14:11.896 --> 00:14:14.816 A:middle
At that moment we
will start connecting,

00:14:14.816 --> 00:14:17.446 A:middle
and when we're finished
connecting it will say

00:14:17.446 --> 00:14:21.406 A:middle
so in the UI next to Gabe,
and I will be able to click

00:14:21.406 --> 00:14:24.816 A:middle
on the Done button, which
will dismiss the browser view

00:14:24.816 --> 00:14:27.706 A:middle
controller, and I
am connected to Gabe

00:14:28.026 --> 00:14:31.626 A:middle
and start exchanging
data with him.

00:14:32.256 --> 00:14:38.106 A:middle
So this was the flow for
UI discovery on Mac OS X.

00:14:38.946 --> 00:14:41.666 A:middle
Let's now see how you can
implement this in code.

00:14:42.906 --> 00:14:45.276 A:middle
Now, first, you have to
instantiate an advertiser,

00:14:45.516 --> 00:14:47.966 A:middle
and this is done much
the same, like on iOS.

00:14:48.456 --> 00:14:51.346 A:middle
First, you instantiate the
advertiser assistant object

00:14:51.836 --> 00:14:54.226 A:middle
and you start it.

00:14:55.826 --> 00:14:59.546 A:middle
Now for the
MCBrowserViewController on OS X,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:00.166 --> 00:15:05.596 A:middle
subclass is NSViewController,
unlike UIViewController in iOS.

00:15:06.646 --> 00:15:10.096 A:middle
Note that NSViewController
has seen substantial changes

00:15:10.096 --> 00:15:13.446 A:middle
in Yosemite, and you can see
or you can hear much more

00:15:13.446 --> 00:15:16.176 A:middle
about those changes in
the session, "Storyboards

00:15:16.176 --> 00:15:17.146 A:middle
and View Controllers".

00:15:18.246 --> 00:15:21.636 A:middle
So to set up the browser
view controller on OS X,

00:15:21.636 --> 00:15:24.856 A:middle
I have to instantiate it, and
I have to set the delegate.

00:15:26.346 --> 00:15:29.596 A:middle
Then I have to-then I present
the browser view controller

00:15:29.936 --> 00:15:32.666 A:middle
by using one of the new
NSViewController APIs,

00:15:33.456 --> 00:15:35.526 A:middle
presentViewControllerAsSheet,

00:15:36.266 --> 00:15:39.096 A:middle
and I pass the browser
view controller object.

00:15:41.056 --> 00:15:45.416 A:middle
Note that "self" here is a
subclass of an NSViewController.

00:15:46.066 --> 00:15:47.926 A:middle
We realize that you might be,

00:15:47.926 --> 00:15:52.236 A:middle
that your architecture might not
be based on NSViewControllers,

00:15:52.596 --> 00:15:54.126 A:middle
and in that case you might want

00:15:54.126 --> 00:15:56.516 A:middle
to present the view
controller using the

00:15:56.576 --> 00:15:58.386 A:middle
NSAppBeginSheet method.

00:15:59.236 --> 00:16:02.056 A:middle
Well, if you want to do
that you can do that,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.236 --> 00:16:02.056 A:middle
Well, if you want to do
that you can do that,

00:16:02.056 --> 00:16:04.876 A:middle
but first you will have
to get an NSWindow object

00:16:05.236 --> 00:16:06.546 A:middle
for the browser view controller.

00:16:07.196 --> 00:16:10.496 A:middle
And you can do so by using
one of the new methods

00:16:10.496 --> 00:16:14.286 A:middle
on NS window called
windowWithContentViewController.

00:16:15.146 --> 00:16:17.816 A:middle
That method will give
you back an NS window

00:16:17.966 --> 00:16:21.346 A:middle
for the browser view
controller, and once you have

00:16:21.486 --> 00:16:25.706 A:middle
that NSWindow object you
can use the beginSheet API

00:16:26.366 --> 00:16:28.776 A:middle
to present the browser view
controller to the user.

00:16:29.696 --> 00:16:32.816 A:middle
When the user is done using
the browser, it will click

00:16:32.816 --> 00:16:35.186 A:middle
on either Done or Cancel button,

00:16:35.386 --> 00:16:39.006 A:middle
and when that happens you will
be notified via the delegate

00:16:39.006 --> 00:16:41.926 A:middle
methods,
browserViewControllerDidFinish

00:16:42.236 --> 00:16:44.396 A:middle
and browserView
ControllerWasCancelled,

00:16:44.396 --> 00:16:45.096 A:middle
respectively.

00:16:46.146 --> 00:16:48.806 A:middle
In those methods you'll have
the opportunity to react

00:16:48.966 --> 00:16:53.076 A:middle
to whatever action the user
has taken and you will have

00:16:53.076 --> 00:16:55.326 A:middle
to dismiss the browser
view controller

00:16:55.656 --> 00:16:58.176 A:middle
by using the
dismissViewController method.

00:16:58.736 --> 00:17:01.486 A:middle
Next, I want to talk
about entitlements.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:58.736 --> 00:17:01.486 A:middle
Next, I want to talk
about entitlements.

00:17:02.796 --> 00:17:07.136 A:middle
If you are sandboxed, either
voluntarily or because you ship

00:17:07.136 --> 00:17:08.955 A:middle
on the app store you will have

00:17:09.026 --> 00:17:11.346 A:middle
to set entitlements
appropriately.

00:17:11.925 --> 00:17:15.965 A:middle
Multipeer Connectivity you
need support for both incoming

00:17:16.316 --> 00:17:18.915 A:middle
and outgoing connections,
so you'll have

00:17:18.976 --> 00:17:21.566 A:middle
to enable entitlements
for these operations.

00:17:22.156 --> 00:17:25.226 A:middle
If you don't do that, then
Multipeer Connectivity

00:17:25.226 --> 00:17:28.656 A:middle
on OS X just won't work,
so make sure you do that.

00:17:29.876 --> 00:17:32.086 A:middle
And that's really
everything that is different.

00:17:32.786 --> 00:17:35.196 A:middle
Everything else, like
programmatic discovery

00:17:35.466 --> 00:17:41.026 A:middle
and sending data, for instance,
is exactly the same as on iOS,

00:17:41.376 --> 00:17:44.406 A:middle
so you should be
ready in no time.

00:17:44.826 --> 00:17:47.446 A:middle
Okay, at this point I would
like to invite Eric on stage,

00:17:47.446 --> 00:17:48.706 A:middle
who will show you a demo.

00:17:49.406 --> 00:17:50.706 A:middle
&gt;&gt; Thanks, good morning,
everyone.

00:17:51.016 --> 00:17:53.946 A:middle
My name is Eric, and today I'd
like to show you a quick demo

00:17:53.946 --> 00:17:57.976 A:middle
of Multipeer Connectivity,
so let's switch over.

00:17:59.456 --> 00:18:02.156 A:middle
Great, so let's say
we're at a party


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.456 --> 00:18:02.156 A:middle
Great, so let's say
we're at a party

00:18:02.366 --> 00:18:03.856 A:middle
and everyone is taking photos.

00:18:04.196 --> 00:18:06.516 A:middle
It would be really cool if we
could collect all those photos

00:18:06.616 --> 00:18:08.816 A:middle
onto a map and display them

00:18:08.816 --> 00:18:12.376 A:middle
on a really large screen
for everyone to see.

00:18:12.376 --> 00:18:14.296 A:middle
To simulate this
sort of application,

00:18:14.626 --> 00:18:17.326 A:middle
today we have two iOS devices.

00:18:17.446 --> 00:18:20.286 A:middle
Here I have a white
iPhone and a pink iPhone,

00:18:20.816 --> 00:18:22.656 A:middle
and we also have a Mac,

00:18:23.216 --> 00:18:25.566 A:middle
and we'll be using
Multipeer Connectivity

00:18:25.686 --> 00:18:26.816 A:middle
to connect them together.

00:18:27.206 --> 00:18:31.086 A:middle
And whenever the iOS devices
take photos they'll transmit

00:18:31.086 --> 00:18:32.296 A:middle
them over to the Mac.

00:18:32.736 --> 00:18:34.736 A:middle
So let's take a look
at this in more detail.

00:18:35.286 --> 00:18:37.436 A:middle
Over here we have the Mac app,

00:18:38.036 --> 00:18:40.896 A:middle
on the left-hand side
we'll have a photo roll,

00:18:40.986 --> 00:18:44.406 A:middle
where the new photos will
pop in, and over here

00:18:44.406 --> 00:18:46.436 A:middle
on the right-hand side
we'll have a larger view

00:18:46.506 --> 00:18:49.056 A:middle
of the latest photo that we got.

00:18:49.056 --> 00:18:51.126 A:middle
Down here in the corner we
have a little Browse button.

00:18:51.606 --> 00:18:53.166 A:middle
So let's get started.

00:18:53.286 --> 00:18:56.166 A:middle
I'll go ahead and click
on the Browse button.

00:18:56.346 --> 00:18:58.226 A:middle
So here's the browser
that we saw earlier.

00:18:58.796 --> 00:19:00.456 A:middle
Right now it's currently empty.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.796 --> 00:19:00.456 A:middle
Right now it's currently empty.

00:19:00.816 --> 00:19:04.916 A:middle
When I launch the iPhone app
it will start advertising,

00:19:05.216 --> 00:19:07.516 A:middle
and the browser will
be able to discover it,

00:19:07.516 --> 00:19:08.606 A:middle
and it'll pop up in the list.

00:19:09.026 --> 00:19:13.606 A:middle
So I'll go ahead and do
that here, so there it is.

00:19:14.026 --> 00:19:19.346 A:middle
And I can go ahead and do
the same on the other iPhone.

00:19:19.496 --> 00:19:23.126 A:middle
Great, so now we have
both of the devices.

00:19:23.126 --> 00:19:25.616 A:middle
We can go ahead and
invite the white iPhone.

00:19:25.806 --> 00:19:28.956 A:middle
Over here I received the
invitation, so I'll go ahead

00:19:28.956 --> 00:19:32.276 A:middle
and tap Accept, and we
can see that it connected.

00:19:33.086 --> 00:19:36.166 A:middle
I'll do the same for the
pink iPhone, so invite it,

00:19:36.476 --> 00:19:37.666 A:middle
and over here I'll accept.

00:19:38.816 --> 00:19:42.276 A:middle
Great, so now both of the
devices are connected,

00:19:42.336 --> 00:19:44.206 A:middle
we can go ahead and
click on the Done button

00:19:44.406 --> 00:19:48.136 A:middle
to dismiss the browser, and we
can start taking some photos.

00:19:48.796 --> 00:19:51.746 A:middle
So I'll grab the white
iPhone, and let's see

00:19:51.866 --> 00:19:53.976 A:middle
if we can get a shot of
this camera right here.

00:19:54.136 --> 00:20:00.676 A:middle
Great, so it's sort of an
antique camera, I guess.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:54.136 --> 00:20:00.676 A:middle
Great, so it's sort of an
antique camera, I guess.

00:20:00.676 --> 00:20:04.636 A:middle
Let's see that with the
phone, we can compare them.

00:20:05.306 --> 00:20:09.976 A:middle
So you can see how far
we've come with the cameras.

00:20:09.976 --> 00:20:12.426 A:middle
Here's let me switch over
to the pink iPhone phone,

00:20:12.426 --> 00:20:15.856 A:middle
and let me take a picture
of this little rabbit thing.

00:20:17.786 --> 00:20:25.116 A:middle
Great, let's see, maybe I can
take one of myself, and then,

00:20:26.256 --> 00:20:28.486 A:middle
let's see, we'll switch over.

00:20:29.006 --> 00:20:31.796 A:middle
Here's a little thing
of bismuth.

00:20:32.696 --> 00:20:38.026 A:middle
Great, okay, so let's see
if we can take a quick look

00:20:38.026 --> 00:20:40.286 A:middle
at what the iOS side looks like.

00:20:41.996 --> 00:20:46.616 A:middle
Okay, great, now that
was a quick demonstration

00:20:46.806 --> 00:20:50.716 A:middle
of cross-platform nearby
networking with Multipeer.

00:20:50.716 --> 00:20:53.216 A:middle
So let's talk a little bit
about how I built the demo.

00:20:53.216 --> 00:20:57.176 A:middle
On the iOS side, I took a piece
of sample code called AB Cam

00:20:57.426 --> 00:20:59.796 A:middle
that teaches you how
to use the camera.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.296 --> 00:21:02.576 A:middle
Whenever we save
a new still image,

00:21:03.036 --> 00:21:05.736 A:middle
all we do is we take
the URL for the new file

00:21:05.736 --> 00:21:08.526 A:middle
and we use the sendResource
API we just saw,

00:21:08.886 --> 00:21:11.116 A:middle
and that sends it
over to the Mac side.

00:21:11.976 --> 00:21:14.866 A:middle
Over here on the Mac
side I took a piece

00:21:14.866 --> 00:21:16.486 A:middle
of sample code called
Image Browser

00:21:17.116 --> 00:21:18.516 A:middle
and it just teaches you how

00:21:18.516 --> 00:21:24.366 A:middle
to display a grid of
images, like this.

00:21:24.546 --> 00:21:27.286 A:middle
I added in Multipeer
Connectivity to bring

00:21:27.286 --> 00:21:30.806 A:middle
up the browser, and whenever we
receive a new resource we just

00:21:30.806 --> 00:21:34.576 A:middle
add that into the image
list's data source array.

00:21:35.546 --> 00:21:38.276 A:middle
So if you'd like to
learn more about how

00:21:38.276 --> 00:21:39.926 A:middle
to use Multipeer Connectivity

00:21:39.926 --> 00:21:41.996 A:middle
in your own apps we
hope you will check

00:21:41.996 --> 00:21:43.916 A:middle
out last year's iOS sample code,

00:21:44.236 --> 00:21:46.186 A:middle
it's called Multipeer
Group Chat.

00:21:46.186 --> 00:21:49.046 A:middle
And we're really looking
forward to seeing what sort

00:21:49.046 --> 00:21:51.256 A:middle
of new apps you guys
can come up with.

00:21:51.586 --> 00:21:53.376 A:middle
With that, I'd like to
hand it back to Demijan.

00:21:53.876 --> 00:21:54.866 A:middle
Thanks, everyone.

00:21:55.146 --> 00:21:55.826 A:middle
&gt;&gt; Thank you, Eric.

00:21:59.156 --> 00:22:02.726 A:middle
So Multipeer Connectivity
on OS X is much


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:59.156 --> 00:22:02.726 A:middle
So Multipeer Connectivity
on OS X is much

00:22:02.726 --> 00:22:04.936 A:middle
like Multipeer Connectivity
on iOS.

00:22:05.786 --> 00:22:10.846 A:middle
In this section we've shown you
the UI-based discovery on OS X,

00:22:10.846 --> 00:22:14.176 A:middle
and we've told you which
entitlements you need to enable

00:22:14.446 --> 00:22:19.186 A:middle
to make Multipeer
Connectivity work in OS X apps.

00:22:19.566 --> 00:22:23.126 A:middle
Next I'd like to talk
about a few best practices

00:22:23.506 --> 00:22:26.706 A:middle
that we thought you
guys should be aware of.

00:22:27.516 --> 00:22:32.996 A:middle
So let's assume we have two
devices, a Mac and a phone,

00:22:33.636 --> 00:22:36.166 A:middle
and let's say the
Mac is advertising

00:22:36.926 --> 00:22:38.706 A:middle
and the iPhone is browsing.

00:22:40.586 --> 00:22:43.806 A:middle
Moments later the iPhone
will discover the Mac

00:22:44.206 --> 00:22:47.716 A:middle
and it will have a reference or
it will have its peerID object.

00:22:49.026 --> 00:22:53.656 A:middle
Then let's assume that for
some reason the Mac goes away.

00:22:54.656 --> 00:22:57.396 A:middle
For instance, the user
could have closed the lid

00:22:57.526 --> 00:23:02.056 A:middle
for some reason or the user
could have reset the system


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.526 --> 00:23:02.056 A:middle
for some reason or the user
could have reset the system

00:23:02.056 --> 00:23:03.376 A:middle
because of a software update.

00:23:05.476 --> 00:23:11.336 A:middle
When the Mac comes back it will
instantiate a new peerID object

00:23:11.336 --> 00:23:15.506 A:middle
and a new advertiser, and
the iPhone will discover it,

00:23:15.926 --> 00:23:18.756 A:middle
but it will see a new
object for the peer,

00:23:18.896 --> 00:23:22.216 A:middle
which actually corresponds
to the same Mac.

00:23:22.636 --> 00:23:27.016 A:middle
So this can lead to many issues
because iPhone doesn't know

00:23:27.016 --> 00:23:30.896 A:middle
that these two objects actually
correspond to the same device.

00:23:32.246 --> 00:23:35.976 A:middle
So in order to circumvent
that problem, we recommend

00:23:36.266 --> 00:23:38.456 A:middle
that you reuse peerID objects.

00:23:39.246 --> 00:23:41.736 A:middle
After you've created
a peerID object

00:23:41.736 --> 00:23:45.456 A:middle
for the first time you can
store it in the user defaults,

00:23:45.896 --> 00:23:48.946 A:middle
so the next time you need it you
don't have to create a new one.

00:23:49.496 --> 00:23:53.936 A:middle
So if the Mac, when
it comes back,

00:23:53.936 --> 00:23:57.926 A:middle
reuses the first peerID object,
the iPhone won't be confused

00:23:57.926 --> 00:24:00.966 A:middle
and it will only have one
object that represents the Mac.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:57.926 --> 00:24:00.966 A:middle
and it will only have one
object that represents the Mac.

00:24:03.126 --> 00:24:05.396 A:middle
Now let's see how you
guys can do this in code.

00:24:06.766 --> 00:24:09.906 A:middle
Once you've instantiated
the peerID object,

00:24:09.906 --> 00:24:11.996 A:middle
you'll need to store it
in the user defaults.

00:24:12.506 --> 00:24:14.216 A:middle
And to do so, you'll first have

00:24:14.266 --> 00:24:16.946 A:middle
to serialize the
peerID object using the

00:24:16.946 --> 00:24:19.726 A:middle
archivedDataWithRootObject
method.

00:24:20.696 --> 00:24:23.116 A:middle
Once the peer is serialized

00:24:23.336 --> 00:24:27.046 A:middle
into an NSData object you can
save it in the user defaults.

00:24:27.736 --> 00:24:30.396 A:middle
Later when you need to
de-serialize it and retrieve it

00:24:30.396 --> 00:24:32.406 A:middle
from the defaults
you'll first have

00:24:32.446 --> 00:24:36.426 A:middle
to de-serialize it using
unarchiveObjectWithData method,

00:24:37.026 --> 00:24:40.256 A:middle
and then when you have the
original peerID object you can

00:24:40.256 --> 00:24:41.696 A:middle
use it in your application.

00:24:42.076 --> 00:24:47.216 A:middle
Next auto inviting, many of
you have made applications

00:24:47.496 --> 00:24:51.236 A:middle
that both advertise and
browse at the same time,

00:24:51.736 --> 00:24:55.776 A:middle
and when a browser sees an
advertiser it immediately sends

00:24:55.776 --> 00:24:56.456 A:middle
an invitation.

00:24:56.676 --> 00:24:58.656 A:middle
Basically, what you want
to achieve with this is,

00:24:58.656 --> 00:25:01.636 A:middle
if you want to abstract
away the connection process


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.656 --> 00:25:01.636 A:middle
if you want to abstract
away the connection process

00:25:01.636 --> 00:25:02.266 A:middle
from the user.

00:25:02.526 --> 00:25:05.836 A:middle
As soon as another user is
seen you want the devices

00:25:05.906 --> 00:25:06.866 A:middle
to connect to each other.

00:25:07.586 --> 00:25:10.126 A:middle
So let's assume we
have a Mac and a phone,

00:25:10.666 --> 00:25:12.796 A:middle
and both are browsing
and advertising.

00:25:13.706 --> 00:25:15.926 A:middle
So soon they will
discover each other,

00:25:15.926 --> 00:25:20.216 A:middle
and they will have a peerID
object of the other peer.

00:25:20.476 --> 00:25:23.296 A:middle
But now the question
is who will be the one

00:25:23.516 --> 00:25:24.676 A:middle
to send an invitation?

00:25:25.226 --> 00:25:27.366 A:middle
And here's where many
of you get confused.

00:25:28.796 --> 00:25:33.226 A:middle
So in order to solve this
problem you can use a

00:25:33.226 --> 00:25:37.236 A:middle
deterministic algorithm
that will on both sides come

00:25:37.236 --> 00:25:40.816 A:middle
to the same result so that
only one peer will be the one

00:25:40.816 --> 00:25:41.986 A:middle
to send an invitation.

00:25:42.926 --> 00:25:46.736 A:middle
Now there are many ways you
can do that, and one of them is

00:25:46.736 --> 00:25:51.076 A:middle
to use peer ID hash
values or hash value

00:25:51.076 --> 00:25:52.286 A:middle
of the peer ID object.

00:25:52.986 --> 00:25:57.136 A:middle
Since both sides have access to
the same two peer ID objects,

00:25:57.576 --> 00:25:59.826 A:middle
they will come to the
same determination as to

00:25:59.826 --> 00:26:01.546 A:middle
who has the higher hash value,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.826 --> 00:26:01.546 A:middle
who has the higher hash value,

00:26:02.086 --> 00:26:04.396 A:middle
and only one invitation
will be sent out.

00:26:05.876 --> 00:26:09.866 A:middle
Next I want to talk about
discovery info a little bit.

00:26:10.636 --> 00:26:14.206 A:middle
Multipeer Connectivity
uses Bonjour underneath

00:26:14.366 --> 00:26:19.166 A:middle
for discovery, and you have the
option to set additional data

00:26:19.606 --> 00:26:23.496 A:middle
for advertisers when
you instantiate them.

00:26:23.886 --> 00:26:27.106 A:middle
Now this additional data
is passed to the framework

00:26:27.106 --> 00:26:30.976 A:middle
in the form of an NSDictionary
that we call discoveryInfo,

00:26:32.076 --> 00:26:36.096 A:middle
and discoveryInfo is very useful
because it is made available

00:26:36.096 --> 00:26:39.396 A:middle
to the browsers when they
discover an advertiser.

00:26:40.106 --> 00:26:44.506 A:middle
So first thing I want to advise
is to keep discoveryInfo small,

00:26:45.266 --> 00:26:47.936 A:middle
this will make the discovery
experience much better

00:26:47.936 --> 00:26:48.816 A:middle
for your users.

00:26:50.976 --> 00:26:54.396 A:middle
Next both keys and values

00:26:54.486 --> 00:26:57.726 A:middle
in discoveryInfo must
be of type NSString.

00:26:58.656 --> 00:27:04.036 A:middle
If any key or any value in the
discoveryInfo dictionary is not


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:58.656 --> 00:27:04.036 A:middle
If any key or any value in the
discoveryInfo dictionary is not

00:27:04.036 --> 00:27:07.816 A:middle
of type NSString, the
framework will complain

00:27:07.896 --> 00:27:08.946 A:middle
and throw an exception.

00:27:11.406 --> 00:27:14.516 A:middle
Also, you should know
that each key value pair

00:27:14.516 --> 00:27:18.856 A:middle
in the discoveryInfo dictionary
underneath gets formatted

00:27:19.146 --> 00:27:21.316 A:middle
in a Bonjour text record entry,

00:27:22.696 --> 00:27:26.506 A:middle
and each Bonjour text record
entry has a specific format,

00:27:26.576 --> 00:27:27.916 A:middle
which is shown in this slide.

00:27:28.416 --> 00:27:33.486 A:middle
First the key, followed by an
equal sign, and then the value.

00:27:34.846 --> 00:27:40.046 A:middle
Note that each text record
entry is limited to 256 bytes,

00:27:40.986 --> 00:27:43.846 A:middle
and if any key-value
pair when formatted

00:27:43.846 --> 00:27:47.946 A:middle
as a text record
exceeds 256 bytes,

00:27:48.516 --> 00:27:51.216 A:middle
the framework will complain
again and throw an exception.

00:27:52.646 --> 00:27:55.276 A:middle
For more details
on Discovery Info

00:27:55.276 --> 00:27:58.136 A:middle
and Bonjour text records
I'd like to refer you

00:27:58.136 --> 00:28:02.386 A:middle
to the Bonjour RFC, which can
be obtained at the link quoted


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.136 --> 00:28:02.386 A:middle
to the Bonjour RFC, which can
be obtained at the link quoted

00:28:02.386 --> 00:28:03.626 A:middle
at the bottom of this slide.

00:28:06.266 --> 00:28:09.776 A:middle
Okay, so now we're ready to
tackle on some advanced topics,

00:28:10.006 --> 00:28:12.206 A:middle
and I'd like to start
with custom discovery.

00:28:12.636 --> 00:28:15.336 A:middle
We've covered two approaches
to discovery so far.

00:28:16.096 --> 00:28:19.226 A:middle
The first one was UI-based,
and it's really simple.

00:28:19.736 --> 00:28:22.996 A:middle
All you have to do is
instantiate an advertiser,

00:28:23.466 --> 00:28:24.856 A:middle
instantiate a browser,

00:28:25.206 --> 00:28:28.626 A:middle
and everything else is
entirely user-driven.

00:28:29.566 --> 00:28:32.226 A:middle
Now this approach is
very simple to implement,

00:28:32.616 --> 00:28:35.356 A:middle
but the framework
gives you the UI,

00:28:35.356 --> 00:28:37.546 A:middle
so you don't have much
flexibility there.

00:28:38.306 --> 00:28:40.806 A:middle
If you want to design
your own framework,

00:28:41.216 --> 00:28:42.976 A:middle
you can use the programmatic
approach.

00:28:43.756 --> 00:28:45.956 A:middle
Now the programmatic
approach requires you

00:28:45.956 --> 00:28:47.346 A:middle
to do a little bit more work,

00:28:47.846 --> 00:28:50.336 A:middle
but you have much more
flexibility in terms

00:28:50.336 --> 00:28:52.606 A:middle
of how you define
the user experience.

00:28:54.956 --> 00:28:57.386 A:middle
So even given that we
have these two approaches,

00:28:57.536 --> 00:29:00.746 A:middle
we realize that there may be
some of you who have the need


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:57.536 --> 00:29:00.746 A:middle
we realize that there may be
some of you who have the need

00:29:00.906 --> 00:29:05.746 A:middle
to have or to define the
discovery experience even more

00:29:05.746 --> 00:29:08.366 A:middle
or to customize it even more.

00:29:09.586 --> 00:29:12.316 A:middle
And for those, we
offer a third way,

00:29:12.686 --> 00:29:14.636 A:middle
which we call the
custom approach.

00:29:15.466 --> 00:29:19.306 A:middle
Now the custom approach might
be useful for those users

00:29:19.306 --> 00:29:22.266 A:middle
that operate in environments
that is not Bonjour friendly,

00:29:22.266 --> 00:29:25.556 A:middle
for instance, or you
may have the need

00:29:25.636 --> 00:29:29.196 A:middle
to exchange large amounts of
data during the discovery phase

00:29:29.666 --> 00:29:33.306 A:middle
and that data cannot fit in
the discoveryInfo dictionary.

00:29:34.696 --> 00:29:39.216 A:middle
So if you fit into one of those
categories you might find custom

00:29:39.296 --> 00:29:39.996 A:middle
discovery useful.

00:29:39.996 --> 00:29:42.976 A:middle
So let's go over custom
discovery in this section.

00:29:43.226 --> 00:29:48.926 A:middle
First, let me say that for
custom discovery you are

00:29:48.926 --> 00:29:52.836 A:middle
in full control of the discovery
process, so we will assume

00:29:53.076 --> 00:29:55.806 A:middle
that you will implement
a mechanism to discover

00:29:55.806 --> 00:30:00.556 A:middle
who is nearby and you will also
establish a one-to-one data link


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:55.806 --> 00:30:00.556 A:middle
who is nearby and you will also
establish a one-to-one data link

00:30:00.616 --> 00:30:01.956 A:middle
between nearby peers.

00:30:02.346 --> 00:30:03.626 A:middle
So this will be your job.

00:30:05.156 --> 00:30:08.726 A:middle
Now the goal for nearby
peers will be to connect

00:30:08.726 --> 00:30:11.836 A:middle
into a Multipeer session
where they can exchange data

00:30:11.836 --> 00:30:14.606 A:middle
with other peers on
a many-to-many basis.

00:30:15.776 --> 00:30:19.246 A:middle
So let's see how
they can do that.

00:30:19.696 --> 00:30:23.006 A:middle
Assuming that we've
discovered nearby peers

00:30:23.006 --> 00:30:25.066 A:middle
and we've established
a one-to-one data link

00:30:25.066 --> 00:30:28.846 A:middle
between them, let's see
what you have to do in order

00:30:28.846 --> 00:30:30.466 A:middle
to connect them into a session.

00:30:31.106 --> 00:30:35.416 A:middle
First, each peer will need to
instantiate a peerID object

00:30:35.996 --> 00:30:40.196 A:middle
and a session object, and then
it will have to-they will both

00:30:40.196 --> 00:30:42.476 A:middle
have to complete a
two-step process.

00:30:43.046 --> 00:30:47.376 A:middle
First, they will have to
exchange their peerID objects

00:30:47.376 --> 00:30:48.846 A:middle
over the one-to-one data link.

00:30:49.306 --> 00:30:51.706 A:middle
So, in order to do that,
they will first have

00:30:51.746 --> 00:30:55.056 A:middle
to serialize their peerID
object and pass them

00:30:55.056 --> 00:30:57.026 A:middle
over to the other peer.

00:30:57.736 --> 00:31:01.236 A:middle
Once the serialized ID object
is available they'll have


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.736 --> 00:31:01.236 A:middle
Once the serialized ID object
is available they'll have

00:31:01.276 --> 00:31:02.916 A:middle
to de-serialize it, and at

00:31:02.916 --> 00:31:08.086 A:middle
that moment they'll have the
peerID object of the other peer.

00:31:08.696 --> 00:31:11.836 A:middle
Once the peerID object
is available they'll have

00:31:11.886 --> 00:31:14.156 A:middle
to generate nearby
connection data

00:31:15.056 --> 00:31:17.646 A:middle
by calling
nearbyConnectionDataForPeer

00:31:17.646 --> 00:31:18.036 A:middle
method.

00:31:19.236 --> 00:31:23.106 A:middle
When nearby connection data
becomes available they will have

00:31:23.106 --> 00:31:26.846 A:middle
to exchange that object much
like before with the other peer,

00:31:27.706 --> 00:31:31.646 A:middle
so this is the second step
of the process, and when both

00:31:31.646 --> 00:31:33.156 A:middle
of these objects are available

00:31:33.156 --> 00:31:35.486 A:middle
on the other side
you can connect them

00:31:35.486 --> 00:31:40.526 A:middle
into a session using
connectPeer:withConnectionData

00:31:40.526 --> 00:31:40.936 A:middle
method.

00:31:41.396 --> 00:31:43.736 A:middle
When they are done
connecting, much like before,

00:31:44.076 --> 00:31:46.746 A:middle
you will be notified
with a delegate method,

00:31:46.906 --> 00:31:50.836 A:middle
peer:didChangeState, and
the state will be specified

00:31:51.176 --> 00:31:51.876 A:middle
as connected.

00:31:52.436 --> 00:31:56.866 A:middle
Okay, so let's see how
we can do this in code.

00:31:57.596 --> 00:31:58.736 A:middle
Now serializing

00:31:58.736 --> 00:32:01.156 A:middle
and de-serializing can
be accomplished much


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.736 --> 00:32:01.156 A:middle
and de-serializing can
be accomplished much

00:32:01.156 --> 00:32:04.606 A:middle
like we've described before
in the best practices section.

00:32:04.936 --> 00:32:09.746 A:middle
You can use, for serializing you
can use NSKeyedArchiver APIs,

00:32:10.436 --> 00:32:17.326 A:middle
and for de-serializing you can
use NSKeyedUnarchiver APIs.

00:32:18.256 --> 00:32:21.986 A:middle
So now that we've exchanged
the peerID objects we have

00:32:21.986 --> 00:32:23.376 A:middle
to generate connection data,

00:32:24.216 --> 00:32:27.426 A:middle
and to generate nearby
connection data you can use

00:32:27.426 --> 00:32:30.256 A:middle
nearbyConnectionData
withCompletionHandler method.

00:32:30.956 --> 00:32:32.456 A:middle
The framework, when it's done,

00:32:32.896 --> 00:32:36.356 A:middle
will call the completion
handler, where it will pass

00:32:36.486 --> 00:32:39.896 A:middle
to you the object that
contains nearby connection data.

00:32:40.966 --> 00:32:44.126 A:middle
Then you will have to send that
object over to the other side

00:32:47.196 --> 00:32:53.786 A:middle
and when all peers have both
objects for the peer they want

00:32:53.786 --> 00:32:55.546 A:middle
to connect with they can do

00:32:55.546 --> 00:32:59.956 A:middle
so by calling connectPeer
withNearbyConnectionData.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:01.036 --> 00:33:04.916 A:middle
In this method you also have the
opportunity to specify a timeout

00:33:04.916 --> 00:33:08.856 A:middle
in seconds, and this timeout
will let the framework know how

00:33:08.856 --> 00:33:10.076 A:middle
long you're willing to wait

00:33:10.376 --> 00:33:14.906 A:middle
until the peers successfully
connect in a session.

00:33:15.216 --> 00:33:18.206 A:middle
If for some reason you change
your mind during the connection

00:33:18.206 --> 00:33:19.986 A:middle
process you can cancel it

00:33:20.296 --> 00:33:22.636 A:middle
by calling cancelConnectPeer
method.

00:33:23.336 --> 00:33:28.146 A:middle
So in summary we've described
a fully customized discovery,

00:33:28.486 --> 00:33:32.126 A:middle
which you can use if you
can't use the UI-based

00:33:32.126 --> 00:33:34.086 A:middle
or the programmatic
approach for your needs.

00:33:34.836 --> 00:33:36.926 A:middle
It consists of a
two-step process.

00:33:37.506 --> 00:33:42.166 A:middle
First, you need to exchange the
peerID object, then you need

00:33:42.166 --> 00:33:45.716 A:middle
to exchange nearby connection
object, and when both

00:33:45.716 --> 00:33:47.266 A:middle
of these objects are available

00:33:47.266 --> 00:33:54.216 A:middle
for the other peer you can
connect it into a session.

00:33:54.906 --> 00:33:56.986 A:middle
Next up is authentication.

00:33:57.876 --> 00:34:02.106 A:middle
So some apps, for
instance, those that deal


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:57.876 --> 00:34:02.106 A:middle
So some apps, for
instance, those that deal

00:34:02.106 --> 00:34:06.776 A:middle
with money transactions think
an app that enables people

00:34:06.776 --> 00:34:11.856 A:middle
to split a taxi cab
bill will have to rely

00:34:11.856 --> 00:34:15.735 A:middle
on properly implemented
security to provide safe

00:34:16.036 --> 00:34:18.806 A:middle
and trustworthy experience
to their users.

00:34:21.835 --> 00:34:25.206 A:middle
Multipeer Connectivity
gives you the option

00:34:25.206 --> 00:34:28.025 A:middle
of enabling encryption
and authentication

00:34:28.025 --> 00:34:30.166 A:middle
for providing security
to your users.

00:34:30.896 --> 00:34:33.646 A:middle
Now enabling encryption is
pretty easy, all you have

00:34:33.646 --> 00:34:36.176 A:middle
to do is set the flag when
you instantiate the session,

00:34:36.996 --> 00:34:39.755 A:middle
but in authentication it is
a little bit more involved.

00:34:40.146 --> 00:34:42.306 A:middle
So let's take a look
at how you can deal

00:34:42.306 --> 00:34:44.386 A:middle
with authentication
in this section.

00:34:45.976 --> 00:34:48.485 A:middle
If you want to provide
authentication

00:34:48.485 --> 00:34:52.775 A:middle
to your users you will have
to make sure that each one

00:34:52.775 --> 00:34:55.606 A:middle
of your users has
a digital identity,

00:34:56.235 --> 00:34:58.716 A:middle
and a digital identity consists

00:34:58.716 --> 00:35:01.456 A:middle
of a private key
and a certificate.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:58.716 --> 00:35:01.456 A:middle
of a private key
and a certificate.

00:35:02.126 --> 00:35:07.056 A:middle
The users will use the private
key to sign their messages

00:35:08.246 --> 00:35:11.096 A:middle
and they will make their
certificate available

00:35:11.096 --> 00:35:15.216 A:middle
to other users so they can
verify if the signature is valid

00:35:15.756 --> 00:35:18.896 A:middle
and if they can trust
the sender.

00:35:20.566 --> 00:35:24.106 A:middle
In code, a digital
identity is represented

00:35:24.106 --> 00:35:26.276 A:middle
by a SecIdentityRef object.

00:35:27.136 --> 00:35:31.666 A:middle
The private key is represented
by a SecKeyRef object.

00:35:32.656 --> 00:35:34.666 A:middle
And the certificate
is represented

00:35:34.666 --> 00:35:36.756 A:middle
by a SecCertificateRef object.

00:35:39.166 --> 00:35:42.546 A:middle
There are multiple ways how
you can distribute digital

00:35:42.546 --> 00:35:44.086 A:middle
identities to your users.

00:35:44.706 --> 00:35:49.046 A:middle
Perhaps the best way is to
make identities available

00:35:49.046 --> 00:35:53.326 A:middle
on a trusted web server so that
the users can download them

00:35:53.326 --> 00:35:57.466 A:middle
from that trusted web
server from within the app.

00:35:57.466 --> 00:35:59.756 A:middle
Other ways include
e-mail attachments


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:00.216 --> 00:36:02.786 A:middle
or via a mobile device
management server.

00:36:04.026 --> 00:36:06.766 A:middle
For more detailed
information on this topic,

00:36:06.766 --> 00:36:11.176 A:middle
I'd like to refer you to the
Tech QA 1745, and the link

00:36:11.176 --> 00:36:14.216 A:middle
for this is also provided
at the bottom of this slide.

00:36:16.466 --> 00:36:19.996 A:middle
Now let's see how you can import
a digital identity in your code.

00:36:21.776 --> 00:36:27.256 A:middle
Usually the digital identity is
stored in a PKCS#12 data file,

00:36:27.636 --> 00:36:29.826 A:middle
and these files are
password-protected.

00:36:30.826 --> 00:36:33.716 A:middle
So the first thing you'll
need to do is get the password

00:36:33.716 --> 00:36:38.436 A:middle
for the file and store
it in a dictionary.

00:36:38.436 --> 00:36:41.616 A:middle
Next you will have to get
access to bytes in that file

00:36:41.786 --> 00:36:44.456 A:middle
by using dataWithContentsOfURL
method,

00:36:45.036 --> 00:36:50.246 A:middle
and once bytes are available you
can import the digital identity

00:36:50.246 --> 00:36:54.576 A:middle
by using SecPKCS12Import method.

00:36:55.446 --> 00:37:00.556 A:middle
This method will import the
digital identity from the bytes


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:55.446 --> 00:37:00.556 A:middle
This method will import the
digital identity from the bytes

00:37:00.556 --> 00:37:04.076 A:middle
that we have from the file
and store it in an array.

00:37:05.126 --> 00:37:07.416 A:middle
So now you know what
a digital identity is,

00:37:07.966 --> 00:37:10.096 A:middle
how to distribute
it to your users,

00:37:10.776 --> 00:37:14.646 A:middle
and how to import
it in your apps.

00:37:15.146 --> 00:37:17.406 A:middle
Note that only certificate part

00:37:17.406 --> 00:37:21.616 A:middle
of your digital identity is
made available to other users,

00:37:22.496 --> 00:37:26.066 A:middle
and the other users can use
that certificate to verify

00:37:26.316 --> 00:37:28.026 A:middle
if you are really who
you claim you are,

00:37:28.416 --> 00:37:31.356 A:middle
and they can make a decision
if they want to trust you.

00:37:31.926 --> 00:37:34.516 A:middle
So let's look at how
they can verify this.

00:37:34.816 --> 00:37:40.646 A:middle
An end-user certificate
can be issued

00:37:40.646 --> 00:37:46.376 A:middle
by a trusted root certificate
authority or it can be issued

00:37:46.376 --> 00:37:50.486 A:middle
by an untrusted intermediate
certificate authority whose

00:37:50.486 --> 00:37:54.476 A:middle
certificate was issued by a
trusted certificate authority.

00:37:55.936 --> 00:37:59.886 A:middle
This hierarchy of
certificates that starts

00:37:59.886 --> 00:38:03.426 A:middle
with the end-user certificate
on the left and ends


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:59.886 --> 00:38:03.426 A:middle
with the end-user certificate
on the left and ends

00:38:03.426 --> 00:38:05.386 A:middle
with the trusted
root certificate

00:38:05.386 --> 00:38:11.786 A:middle
on the right is often referred
to as the chain of trust.

00:38:12.356 --> 00:38:16.486 A:middle
Roughly speaking, when we
evaluate the chain of trust,

00:38:17.086 --> 00:38:22.396 A:middle
the following step-wise
procedure happens.

00:38:22.776 --> 00:38:25.546 A:middle
First, we inspect the
end user's certificate

00:38:25.796 --> 00:38:27.066 A:middle
and check if it's valid.

00:38:28.536 --> 00:38:32.086 A:middle
Let's assume it is, next,

00:38:32.426 --> 00:38:34.626 A:middle
we inspect the intermediate
certificate

00:38:34.626 --> 00:38:35.646 A:middle
and check if it's valid.

00:38:36.576 --> 00:38:40.886 A:middle
We also check if the end
user certificate was, indeed,

00:38:40.886 --> 00:38:43.946 A:middle
issued by the intermediate
certificate authority.

00:38:45.326 --> 00:38:48.836 A:middle
Say that checks out,
as well, finally,

00:38:49.546 --> 00:38:51.646 A:middle
we have to inspect
the root certificate,

00:38:52.996 --> 00:38:54.686 A:middle
and we check if it's valid.

00:38:55.576 --> 00:39:01.506 A:middle
We also check if the
intermediate certificate was,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:55.576 --> 00:39:01.506 A:middle
We also check if the
intermediate certificate was,

00:39:01.506 --> 00:39:05.376 A:middle
indeed, issued by the
trusted certificate authority,

00:39:05.956 --> 00:39:09.176 A:middle
and if that checks out, as well,

00:39:09.596 --> 00:39:12.516 A:middle
then the chain of
trust is valid.

00:39:13.026 --> 00:39:16.706 A:middle
So in code when you
evaluate the chain of trust,

00:39:17.036 --> 00:39:20.826 A:middle
the first thing you'll have to
do is create a policy object.

00:39:21.866 --> 00:39:25.136 A:middle
This policy object will
govern how the chain

00:39:25.136 --> 00:39:26.966 A:middle
of trust is evaluated.

00:39:28.886 --> 00:39:31.596 A:middle
Then you will have to
create the chain of trust,

00:39:32.606 --> 00:39:33.586 A:middle
and once you have the chain

00:39:33.586 --> 00:39:36.336 A:middle
of trust you will
have to evaluate it.

00:39:37.086 --> 00:39:39.296 A:middle
So let's see how you
can do this in code.

00:39:40.496 --> 00:39:42.386 A:middle
First, we need to
create the policy,

00:39:43.026 --> 00:39:48.706 A:middle
and for our purposes we can use
SecPolicyCreateBasicX509 API,

00:39:49.446 --> 00:39:53.716 A:middle
which will create a
policy, an X509 policy

00:39:53.716 --> 00:39:58.926 A:middle
because we're dealing with
X509-type certificates.

00:39:59.236 --> 00:40:01.236 A:middle
Next, we have to
create the trust object


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:59.236 --> 00:40:01.236 A:middle
Next, we have to
create the trust object

00:40:01.656 --> 00:40:05.586 A:middle
by using
SecTrustCreateWithCertificates

00:40:05.586 --> 00:40:11.036 A:middle
API, and we also have to
set anchor certificates.

00:40:11.696 --> 00:40:14.646 A:middle
By anchor certificates we
mean the root certificates

00:40:14.846 --> 00:40:16.516 A:middle
that can be trusted
by the system,

00:40:17.006 --> 00:40:20.346 A:middle
so we have to let the system
know which certificates can be

00:40:20.346 --> 00:40:23.716 A:middle
at the end of the
chain of trust.

00:40:23.946 --> 00:40:27.586 A:middle
Once that is established, we
can evaluate the chain of trust

00:40:27.996 --> 00:40:30.636 A:middle
by calling the SecTrustEvaluate
method,

00:40:31.736 --> 00:40:34.476 A:middle
and the result will be stored
in the second parameter.

00:40:35.706 --> 00:40:40.066 A:middle
Now if the result equals
kSecTrustUnspecified,

00:40:40.786 --> 00:40:44.086 A:middle
that means that the
chain of trust is valid.

00:40:44.926 --> 00:40:49.436 A:middle
So, with that, let's see how
you can set up authentication

00:40:49.736 --> 00:40:51.676 A:middle
in a Multipeer Connectivity
session.

00:40:52.186 --> 00:40:57.846 A:middle
You'll have to use the session
initializer initWithPeer

00:40:58.186 --> 00:41:01.346 A:middle
securityIdentity
encryption preference method.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.186 --> 00:41:01.346 A:middle
securityIdentity
encryption preference method.

00:41:02.476 --> 00:41:05.876 A:middle
And for the second parameter
securityIdentity you'll have

00:41:05.906 --> 00:41:10.846 A:middle
to pass an array, which
contains your digital identity

00:41:10.846 --> 00:41:14.736 A:middle
as the first parameter and
a chain of certificates

00:41:15.036 --> 00:41:19.836 A:middle
that validate your
identity as next elements.

00:41:20.386 --> 00:41:25.506 A:middle
When somebody tries to connect
to you, you will be notified

00:41:25.536 --> 00:41:28.266 A:middle
with the delegate method,
didReceiveCertificate,

00:41:28.636 --> 00:41:31.376 A:middle
where you will be passed
the chain of certificates

00:41:31.626 --> 00:41:33.106 A:middle
that represent the other peer.

00:41:34.016 --> 00:41:38.006 A:middle
At that time you will have to
decide whether you want to trust

00:41:38.006 --> 00:41:41.176 A:middle
that peer or whether you trust
that peer and whether you want

00:41:41.176 --> 00:41:44.336 A:middle
to proceed connecting to it.

00:41:44.976 --> 00:41:48.056 A:middle
At this moment you can use the
method for evaluating the chain

00:41:48.056 --> 00:41:50.866 A:middle
of trust that we discussed
a couple of slides ago.

00:41:51.546 --> 00:41:55.406 A:middle
And if you decide that the
chain of trust can be trusted,

00:41:55.406 --> 00:41:59.066 A:middle
is valid and can be trusted,
you can let the framework know

00:41:59.316 --> 00:42:01.276 A:middle
by calling the certificate
handler


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:59.316 --> 00:42:01.276 A:middle
by calling the certificate
handler

00:42:01.566 --> 00:42:04.926 A:middle
and passing it a Boolean,
so in this case a yes.

00:42:05.876 --> 00:42:08.466 A:middle
If you don't trust it
you can just pass it a no

00:42:08.676 --> 00:42:10.496 A:middle
and the framework will
reject the connection.

00:42:10.836 --> 00:42:13.546 A:middle
In summary, we've looked
at a bit more detail

00:42:13.826 --> 00:42:16.696 A:middle
about how you can
set up authentication

00:42:16.746 --> 00:42:18.866 A:middle
in your Multipeer
Connectivity apps.

00:42:19.496 --> 00:42:21.466 A:middle
We've looked at digital
identities

00:42:22.006 --> 00:42:24.736 A:middle
and we've described how
you can make them available

00:42:24.736 --> 00:42:28.986 A:middle
to your users and how you
can import them in your apps.

00:42:29.166 --> 00:42:32.546 A:middle
We've also looked at chains
of trust and how you can go

00:42:32.546 --> 00:42:34.046 A:middle
about evaluating them.

00:42:34.586 --> 00:42:37.506 A:middle
For more information, I
would like to refer you

00:42:37.506 --> 00:42:41.746 A:middle
to our Evangelist, Paul
Danbold, and you can check

00:42:41.746 --> 00:42:43.256 A:middle
out our documentation,

00:42:43.326 --> 00:42:45.906 A:middle
"Multipeer Connectivity
Framework Reference" guide.

00:42:46.686 --> 00:42:49.096 A:middle
And, as Eric mentioned,
we have some sample code

00:42:49.096 --> 00:42:51.946 A:middle
that you guys should check
out called MultipeerGroupChat.

00:42:52.826 --> 00:42:55.066 A:middle
We'll be available to
answer questions and hear

00:42:55.066 --> 00:42:58.676 A:middle
about your comments at
devforums.apple.com, as well.

00:42:59.176 --> 00:43:03.366 A:middle
There are a few related sessions
that I would like to call out.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:59.176 --> 00:43:03.366 A:middle
There are a few related sessions
that I would like to call out.

00:43:03.716 --> 00:43:05.946 A:middle
One is "What's New in
Foundation Networking",

00:43:06.386 --> 00:43:08.816 A:middle
and the other one is
"Storyboards and Controllers"

00:43:08.816 --> 00:43:11.966 A:middle
on OS X, where you can
hear more about what's new

00:43:12.196 --> 00:43:14.166 A:middle
with NSViewControllers
in Yosemite.

00:43:14.976 --> 00:43:15.976 A:middle
Thank you very much, everyone.

00:43:16.516 --> 00:43:19.500 A:middle
[ Applause ]

