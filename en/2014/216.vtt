WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:11.706 A:middle
[ Silence ]

00:00:12.206 --> 00:00:13.016 A:middle
&gt;&gt; Hi there.

00:00:13.666 --> 00:00:16.696 A:middle
My name's Jacob Xiao and
I'm really excited to talk

00:00:16.696 --> 00:00:19.016 A:middle
to you today about
Building Adaptive Apps.

00:00:20.256 --> 00:00:21.456 A:middle
Before we get started though,

00:00:21.456 --> 00:00:24.256 A:middle
I want to tell you what
we mean by "adaptive".

00:00:25.866 --> 00:00:27.966 A:middle
So first, let's go back.

00:00:28.296 --> 00:00:30.326 A:middle
In the beginning,
there was the iPhone.

00:00:31.206 --> 00:00:34.296 A:middle
One device, one screen,
it was pretty simple

00:00:34.296 --> 00:00:35.486 A:middle
to build applications for.

00:00:36.566 --> 00:00:38.436 A:middle
But then when you
consider rotation,

00:00:39.056 --> 00:00:41.646 A:middle
now you have this portrait
and landscape orientations,

00:00:42.536 --> 00:00:46.686 A:middle
and then after that, we
introduced the iPad as well

00:00:46.686 --> 00:00:49.846 A:middle
as the iPhone 5 with
its four-inch display,

00:00:49.906 --> 00:00:52.706 A:middle
and now you have all
these different devices

00:00:52.856 --> 00:00:54.306 A:middle
and all these different
screen sizes,

00:00:54.696 --> 00:00:58.686 A:middle
and it can seem intimidating
to design apps for.

00:00:58.856 --> 00:01:01.846 A:middle
Well, in iOS 8 we want
to make it simple for you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:58.856 --> 00:01:01.846 A:middle
Well, in iOS 8 we want
to make it simple for you

00:01:02.306 --> 00:01:06.796 A:middle
to build one application that's
both universal and is able

00:01:06.796 --> 00:01:09.646 A:middle
to adapt to all of
these different devices,

00:01:09.926 --> 00:01:11.746 A:middle
screen sizes, and orientations.

00:01:12.466 --> 00:01:16.956 A:middle
So today, I'd like to tell
you about some new concepts

00:01:16.956 --> 00:01:19.716 A:middle
that we've added for
adaptivity inside of UIKit,

00:01:20.666 --> 00:01:23.356 A:middle
and then we'll take a look at
some of the changes we've made

00:01:23.356 --> 00:01:26.086 A:middle
to both view controllers
and interface builder

00:01:26.376 --> 00:01:28.256 A:middle
to support this new
adaptive world.

00:01:28.546 --> 00:01:33.226 A:middle
All right, to start off, let's
take a look at size classes,

00:01:33.746 --> 00:01:37.266 A:middle
a new concept that we've
introduced in the iOS 8.

00:01:38.256 --> 00:01:41.626 A:middle
In the past you've used
UIInterfaceOrientation

00:01:41.626 --> 00:01:45.536 A:middle
and UIUser InterfaceIdiom to
differentiate between portrait

00:01:45.536 --> 00:01:49.486 A:middle
and landscape and iPhone
and iPad, but in iOS 8,

00:01:50.076 --> 00:01:52.776 A:middle
we're recommending against
using these two concepts,

00:01:53.616 --> 00:01:56.436 A:middle
and instead we're
advocating this new concept

00:01:56.436 --> 00:01:59.546 A:middle
that we call size classes.

00:01:59.546 --> 00:02:01.826 A:middle
So, let me show you a little
bit about what me mean


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.546 --> 00:02:01.826 A:middle
So, let me show you a little
bit about what me mean

00:02:02.126 --> 00:02:06.806 A:middle
by these differences that are
represented by size class.

00:02:06.806 --> 00:02:09.795 A:middle
If you think about a typical
iPad application and the screens

00:02:09.795 --> 00:02:11.876 A:middle
that it shows, you'll
see features

00:02:11.876 --> 00:02:15.716 A:middle
like Split View Controllers,
Form Sheets, and Popovers.

00:02:17.336 --> 00:02:19.656 A:middle
But really, none of these
features are specific

00:02:19.706 --> 00:02:24.276 A:middle
to the iPad itself, we're just
using these in this iPad version

00:02:24.276 --> 00:02:27.466 A:middle
of the application because
we have this large horizontal

00:02:27.466 --> 00:02:29.126 A:middle
canvas to display within.

00:02:30.436 --> 00:02:31.476 A:middle
Now on the other hand,

00:02:31.726 --> 00:02:33.546 A:middle
if you look at a typical
iPhone application,

00:02:33.546 --> 00:02:35.686 A:middle
you have a much more
constrained layout

00:02:36.196 --> 00:02:38.156 A:middle
where things are usually
presented fullscreen

00:02:38.306 --> 00:02:40.106 A:middle
and shown in a single column.

00:02:40.706 --> 00:02:43.436 A:middle
However this is also not
intrinsically tied to the fact

00:02:43.436 --> 00:02:46.416 A:middle
that it's an iPhone, but
it's just tied to the fact

00:02:46.416 --> 00:02:49.566 A:middle
that we have this smaller
horizontal canvas size.

00:02:49.726 --> 00:02:53.976 A:middle
And you'll see the same kind
of thing in the master side

00:02:53.976 --> 00:02:55.136 A:middle
of a Split View Controller,

00:02:55.816 --> 00:02:58.816 A:middle
and even in the content
of a Popover.

00:02:59.146 --> 00:03:00.546 A:middle
And both of these are on iPad.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.146 --> 00:03:00.546 A:middle
And both of these are on iPad.

00:03:02.116 --> 00:03:05.286 A:middle
So, we call this difference
"regular" and "compact",

00:03:06.196 --> 00:03:10.816 A:middle
and we call this axis the
horizontal size class.

00:03:12.436 --> 00:03:14.876 A:middle
Now, if we consider the
same kinds of distinctions

00:03:14.936 --> 00:03:18.046 A:middle
in the vertical direction,
you can see that on things

00:03:18.046 --> 00:03:20.176 A:middle
like an iPad or an iPhone,

00:03:20.676 --> 00:03:22.816 A:middle
we have these taller
full-size bars,

00:03:23.656 --> 00:03:26.186 A:middle
whereas in a more
constrained vertical situation

00:03:26.546 --> 00:03:30.056 A:middle
like an iPhone in landscape,
we have both condensed bars,

00:03:30.056 --> 00:03:33.536 A:middle
and now in iOS 8, we even hide
the status bar completely.

00:03:34.866 --> 00:03:39.046 A:middle
And we call these also regular
and compact, but this time

00:03:39.346 --> 00:03:42.516 A:middle
in the vertical size class.

00:03:42.696 --> 00:03:45.516 A:middle
Now, you can think of these two
size classes in a similar way

00:03:45.516 --> 00:03:46.606 A:middle
to the way size works.

00:03:47.236 --> 00:03:49.346 A:middle
Just like a size
has a horizontal

00:03:49.346 --> 00:03:52.116 A:middle
and vertical dimension,
so does a size class.

00:03:53.766 --> 00:03:56.856 A:middle
So if you put these two
concepts together, you get a two

00:03:56.856 --> 00:04:01.136 A:middle
by two grid that defines any
of the possibilities of regular


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:56.856 --> 00:04:01.136 A:middle
by two grid that defines any
of the possibilities of regular

00:04:01.136 --> 00:04:03.806 A:middle
and compact in both
the horizontal

00:04:03.806 --> 00:04:04.916 A:middle
and vertical directions.

00:04:05.876 --> 00:04:07.666 A:middle
And you can have a View
Controller with any

00:04:07.666 --> 00:04:10.146 A:middle
of these four possibilities,
which results

00:04:10.146 --> 00:04:13.576 A:middle
in different layouts
like you'd see here.

00:04:13.796 --> 00:04:15.766 A:middle
In addition to View
Controllers having any

00:04:15.916 --> 00:04:17.486 A:middle
of these size class
combinations,

00:04:17.886 --> 00:04:22.206 A:middle
our devices also have default
size classes that they'll use.

00:04:22.896 --> 00:04:25.256 A:middle
An iPad, in both
landscape and portrait,

00:04:25.676 --> 00:04:28.476 A:middle
will have a regular size
class in both the horizontal

00:04:28.476 --> 00:04:29.436 A:middle
and vertical direction.

00:04:30.376 --> 00:04:32.386 A:middle
An iPhone, when in portrait,

00:04:33.256 --> 00:04:36.566 A:middle
will have a compact
horizontal size class

00:04:36.986 --> 00:04:39.916 A:middle
and a regular vertical
size class, and when it's

00:04:39.916 --> 00:04:43.106 A:middle
in landscape it will be
compact in both the vertical

00:04:43.106 --> 00:04:44.846 A:middle
and horizontal size classes.

00:04:44.956 --> 00:04:48.546 A:middle
So this is all a
little theoretical.

00:04:48.546 --> 00:04:50.466 A:middle
Let's take a look at
a sample application

00:04:50.466 --> 00:04:51.766 A:middle
to see how this works
in practice.

00:04:52.756 --> 00:04:54.536 A:middle
All right, so the sample code

00:04:54.596 --> 00:04:56.816 A:middle
that I'll be showing
you today is available

00:04:56.996 --> 00:04:58.706 A:middle
on the WWDC website.

00:04:59.196 --> 00:05:01.546 A:middle
Just go to the Sample
Code section and search


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.196 --> 00:05:01.546 A:middle
Just go to the Sample
Code section and search

00:05:01.546 --> 00:05:04.626 A:middle
for Adaptive Photos, the
name of our sample app.

00:05:05.146 --> 00:05:07.206 A:middle
It's a basic photo
sharing application,

00:05:07.206 --> 00:05:09.696 A:middle
and this is what it
looks like on iPhone.

00:05:10.506 --> 00:05:14.166 A:middle
You can see our list of our
contacts, and I can tap on any

00:05:14.166 --> 00:05:16.856 A:middle
of these to see the photos
that they've sent to me.

00:05:17.556 --> 00:05:21.976 A:middle
If someone who's only sent me a
single photo, I'll go directly

00:05:22.056 --> 00:05:25.136 A:middle
to that image, and if they've
sent me multiple photos,

00:05:25.386 --> 00:05:27.626 A:middle
I can see a list of the
photos that they've sent me,

00:05:28.676 --> 00:05:30.786 A:middle
and then view individual ones.

00:05:33.456 --> 00:05:36.196 A:middle
Now, on the Photo page,
you'll notice that in addition

00:05:36.196 --> 00:05:39.256 A:middle
to the picture, we're also
showing a comment overlay

00:05:40.016 --> 00:05:42.336 A:middle
and a rating control that
lets me rate the photos

00:05:42.336 --> 00:05:44.506 A:middle
that they've sent me.

00:05:44.716 --> 00:05:48.506 A:middle
All right, now when I rotate
this application to landscape,

00:05:49.716 --> 00:05:51.416 A:middle
notice that our bars
become condensed

00:05:52.086 --> 00:05:55.106 A:middle
and the status bar
disappears entirely.

00:05:56.816 --> 00:06:00.396 A:middle
This all happens automatically,
but in our application,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:56.816 --> 00:06:00.396 A:middle
This all happens automatically,
but in our application,

00:06:00.396 --> 00:06:01.956 A:middle
we've done a few
more customizations.

00:06:02.676 --> 00:06:04.956 A:middle
Inside of a photo
view, when I rotate,

00:06:06.586 --> 00:06:09.416 A:middle
the Comments will
have smaller margins,

00:06:10.056 --> 00:06:12.716 A:middle
and the Rating Control will
shrink down to a smaller size.

00:06:12.856 --> 00:06:19.116 A:middle
Now, our application
is of course universal,

00:06:19.986 --> 00:06:27.906 A:middle
so let me run it inside
of the iPad simulator.

00:06:27.906 --> 00:06:30.446 A:middle
Here, you'll notice that I have
all of the same functionality,

00:06:31.256 --> 00:06:36.646 A:middle
and all of the same controls
inside of my Photo View,

00:06:37.256 --> 00:06:40.096 A:middle
but watch when I
rotate to landscape.

00:06:41.086 --> 00:06:43.446 A:middle
All of the bars still
have their full height,

00:06:43.636 --> 00:06:46.146 A:middle
and none of my controls
here have shrunk down.

00:06:46.626 --> 00:06:48.426 A:middle
And this is because we
still have this large,

00:06:48.466 --> 00:06:51.826 A:middle
vertical real estate, and in
our application we're using the

00:06:51.826 --> 00:06:54.956 A:middle
vertical size class instead
of the interface orientation,

00:06:55.476 --> 00:07:01.286 A:middle
so we get the right behavior
on both iPhone and iPad.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:55.476 --> 00:07:01.286 A:middle
so we get the right behavior
on both iPhone and iPad.

00:07:01.476 --> 00:07:03.046 A:middle
Now, one of the new
features we've added

00:07:03.046 --> 00:07:05.206 A:middle
in iOS 8 is a resizable
simulator.

00:07:06.096 --> 00:07:07.336 A:middle
So if you notice
here at the bottom,

00:07:07.336 --> 00:07:16.836 A:middle
I can type in new
dimensions and you'll see

00:07:16.836 --> 00:07:20.456 A:middle
that my application has resized,
and everything still looks great

00:07:20.626 --> 00:07:23.936 A:middle
because we're using Auto Layout
and standard system components.

00:07:24.576 --> 00:07:26.516 A:middle
But in addition to
just changing the size,

00:07:26.656 --> 00:07:31.966 A:middle
I can also change the
size class and now,

00:07:33.306 --> 00:07:35.786 A:middle
you'll see that we're
showing the iPhone version

00:07:35.786 --> 00:07:37.946 A:middle
of our application
even on the iPad just

00:07:37.946 --> 00:07:38.976 A:middle
by changing the size class.

00:07:45.256 --> 00:07:47.676 A:middle
So, I highly recommend that
you test out your application

00:07:48.186 --> 00:07:54.486 A:middle
with the new resizable
simulator in iOS 8.

00:07:54.756 --> 00:07:57.216 A:middle
All right, so now that you
know how size classes work

00:07:57.216 --> 00:07:59.166 A:middle
in general, how do
you actually get one

00:07:59.166 --> 00:08:00.836 A:middle
of these size classes
in your application?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.166 --> 00:08:00.836 A:middle
of these size classes
in your application?

00:08:01.816 --> 00:08:04.546 A:middle
Well, to do that, you use a
new system we call Traits.

00:08:06.186 --> 00:08:09.116 A:middle
Traits are essentially
properties that you can use

00:08:09.116 --> 00:08:12.556 A:middle
to determine how the layout of
your application should change

00:08:12.826 --> 00:08:14.096 A:middle
as its environment changes.

00:08:14.786 --> 00:08:18.296 A:middle
They consist of a
set of properties,

00:08:19.076 --> 00:08:21.266 A:middle
including the horizontal
and vertical size classes

00:08:21.296 --> 00:08:24.526 A:middle
that we just talked about, as
well as the userInterfaceIdiom

00:08:24.896 --> 00:08:26.246 A:middle
and also the displayScale.

00:08:27.806 --> 00:08:30.686 A:middle
Now, all of these traits are
wrapped up inside a container

00:08:30.686 --> 00:08:33.135 A:middle
that we call a Trait Collection.

00:08:34.155 --> 00:08:36.035 A:middle
This includes the
Trait Properties

00:08:36.676 --> 00:08:41.696 A:middle
and also their values, and
this new object is called a UI

00:08:41.696 --> 00:08:42.356 A:middle
Trait Collection.

00:08:42.356 --> 00:08:46.056 A:middle
To get one of these Trait
Collections you just need

00:08:46.056 --> 00:08:47.496 A:middle
to use a Trait Environment.

00:08:48.546 --> 00:08:51.666 A:middle
Trait Environments are a
new protocol that are able

00:08:51.766 --> 00:08:53.716 A:middle
to return their current
Trait Collection,

00:08:54.266 --> 00:08:57.036 A:middle
and these include
Screens, Windows,

00:08:57.906 --> 00:09:00.046 A:middle
View Controllers,
and also Views.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:57.906 --> 00:09:00.046 A:middle
View Controllers,
and also Views.

00:09:01.386 --> 00:09:03.946 A:middle
All of these are able to return
their current Trait Collection

00:09:03.946 --> 00:09:07.196 A:middle
to you to use to determine
how your interface should be

00:09:07.196 --> 00:09:07.666 A:middle
laid out.

00:09:09.116 --> 00:09:11.806 A:middle
One other object that's
also a Trait Environment is

00:09:11.806 --> 00:09:13.206 A:middle
a UIPresentationController.

00:09:14.116 --> 00:09:16.146 A:middle
This is a new helper
object that assists

00:09:16.146 --> 00:09:19.526 A:middle
with View Controller
presentation, and it's also able

00:09:19.526 --> 00:09:21.526 A:middle
to participate in adaptivity.

00:09:22.536 --> 00:09:25.346 A:middle
We don't have time to talk today
about presentation controllers,

00:09:25.706 --> 00:09:28.806 A:middle
but you can come back
tomorrow at 11:30 to the

00:09:28.806 --> 00:09:31.756 A:middle
"A Look Inside Presentation
Controllers" talk to learn more

00:09:31.756 --> 00:09:33.736 A:middle
about how presentation
controllers work,

00:09:34.226 --> 00:09:36.936 A:middle
including how they work
with traits and adaptivity.

00:09:37.026 --> 00:09:41.276 A:middle
Now all of these Trait
Environments make

00:09:41.276 --> 00:09:45.866 A:middle
up a hierarchy, and
the trait collections

00:09:45.866 --> 00:09:49.496 A:middle
that they have will flow
from parent to child.

00:09:49.496 --> 00:09:51.446 A:middle
So by default, the
trait collections

00:09:51.446 --> 00:09:54.526 A:middle
that any given child Trait
Environment has will be the ones

00:09:54.526 --> 00:09:56.136 A:middle
that it's inherited
from its parent,

00:09:56.626 --> 00:09:58.436 A:middle
all the way up to the
screen which makes

00:09:58.436 --> 00:09:59.866 A:middle
up the root Trait Environment.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.086 --> 00:10:04.606 A:middle
Now, in addition to getting
the current trait collection

00:10:04.606 --> 00:10:06.956 A:middle
from Trait Environments, they
also have another method,

00:10:07.606 --> 00:10:09.786 A:middle
and that's called
traitCollectionDidChange.

00:10:10.516 --> 00:10:12.346 A:middle
This gets called
whenever the traits

00:10:12.436 --> 00:10:14.956 A:middle
for a given Trait
Environment have just changed,

00:10:15.816 --> 00:10:17.986 A:middle
and you can override this
in your View Controller,

00:10:18.066 --> 00:10:21.776 A:middle
or View Subclass, to know when
you should be changing all

00:10:21.776 --> 00:10:24.706 A:middle
of your UI elements
that depend on traits,

00:10:25.966 --> 00:10:28.496 A:middle
and we'll see an example
of that a little bit later

00:10:28.496 --> 00:10:29.626 A:middle
in our sample application.

00:10:29.766 --> 00:10:33.826 A:middle
Now let's take a look at a
typical trait collection.

00:10:34.836 --> 00:10:36.556 A:middle
This trait collection
is one you might see

00:10:36.556 --> 00:10:37.996 A:middle
on an iPhone in portrait.

00:10:38.716 --> 00:10:40.866 A:middle
We have a compact
horizontal size class,

00:10:41.336 --> 00:10:44.366 A:middle
a regular vertical size
class, the idiom of phone,

00:10:44.596 --> 00:10:46.036 A:middle
and a display scale of two.

00:10:47.076 --> 00:10:49.306 A:middle
We call this a fully
specified trade collection

00:10:49.516 --> 00:10:51.736 A:middle
because it has values for
all of its trait properties.

00:10:51.736 --> 00:10:55.916 A:middle
Now it's also possible to have a
trait collection that's missing

00:10:55.966 --> 00:10:58.716 A:middle
some of its values, and
we call these missing

00:10:58.716 --> 00:11:00.486 A:middle
values Unspecified.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.716 --> 00:11:00.486 A:middle
values Unspecified.

00:11:01.336 --> 00:11:03.566 A:middle
Generally though, when you
ask a Trait Environment

00:11:03.566 --> 00:11:04.526 A:middle
for its trait collection,

00:11:04.966 --> 00:11:07.146 A:middle
you'll get back a fully
specified trait collection

00:11:07.396 --> 00:11:08.236 A:middle
like the one on the left.

00:11:09.216 --> 00:11:11.086 A:middle
However, if a Trait
Environment like a View

00:11:11.086 --> 00:11:14.256 A:middle
or a View Controller is not
inside of the view hierarchy,

00:11:14.726 --> 00:11:16.586 A:middle
you might get back
unspecified values

00:11:17.176 --> 00:11:18.856 A:middle
like the trait collection
on the right.

00:11:19.556 --> 00:11:21.866 A:middle
You'll also get back these
partially specified trait

00:11:21.866 --> 00:11:24.996 A:middle
collections if you create your
own trait collection using one

00:11:24.996 --> 00:11:25.986 A:middle
of our creation methods,

00:11:26.376 --> 00:11:28.536 A:middle
like traitCollectionWith
HorizontalSizeClass,

00:11:29.156 --> 00:11:31.086 A:middle
which would allow you to
create a trait collection just

00:11:31.086 --> 00:11:32.686 A:middle
like the one on the right.

00:11:33.716 --> 00:11:36.106 A:middle
Now, one operation
that we can perform

00:11:36.106 --> 00:11:38.756 A:middle
on multiple trait collections
is comparing them to each other.

00:11:39.916 --> 00:11:42.556 A:middle
And comparing a trait
collection involves asking

00:11:42.556 --> 00:11:44.736 A:middle
if one trait collection
contains another one.

00:11:44.816 --> 00:11:48.896 A:middle
Now, what this means
about containment is

00:11:48.896 --> 00:11:51.416 A:middle
that for any trait
that's specified

00:11:51.466 --> 00:11:54.766 A:middle
in a second trait collection,
the value of that trait

00:11:54.766 --> 00:11:56.146 A:middle
in the first trait
collection has

00:11:56.146 --> 00:11:58.226 A:middle
to have the same-has
to match exactly.

00:11:59.006 --> 00:12:02.476 A:middle
So here, the second trait
collection only has specified a


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:59.006 --> 00:12:02.476 A:middle
So here, the second trait
collection only has specified a

00:12:02.476 --> 00:12:06.096 A:middle
horizontal size class and those
horizontal size classes are

00:12:06.096 --> 00:12:09.076 A:middle
equal, so we'd say that the
first trait collection contains

00:12:09.076 --> 00:12:12.326 A:middle
the second one, and the way
you can ask this question

00:12:12.496 --> 00:12:16.186 A:middle
of trait collections is by using
the containsTraitsInCollection

00:12:16.186 --> 00:12:17.916 A:middle
method on UITraitCollection.

00:12:18.496 --> 00:12:21.486 A:middle
If we were to change the
horizontal size class

00:12:21.486 --> 00:12:23.136 A:middle
of the second trait
collection to regular,

00:12:24.116 --> 00:12:27.086 A:middle
you can see that now, these two
horizontal size classes don't

00:12:27.086 --> 00:12:29.726 A:middle
match, so the second trait
collection is now longer

00:12:29.726 --> 00:12:34.256 A:middle
contained by the first one.

00:12:34.616 --> 00:12:36.746 A:middle
Now, you can perform
these comparisons yourself

00:12:36.896 --> 00:12:38.906 A:middle
in your own code to
determine how you should lay

00:12:38.906 --> 00:12:41.176 A:middle
out your views or
View Controllers,

00:12:41.936 --> 00:12:45.276 A:middle
but UIkit also uses
this internally for some

00:12:45.536 --> 00:12:48.076 A:middle
of its functionality,
and one example

00:12:48.076 --> 00:12:49.956 A:middle
of that is the Appearance Proxy.

00:12:51.076 --> 00:12:54.366 A:middle
The Appearance Proxy is a system
that we introduced a while ago

00:12:54.566 --> 00:12:56.876 A:middle
for customizing the
properties of your views,

00:12:57.556 --> 00:13:01.696 A:middle
and we've extended it in iOS 8
to support trait collections.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.556 --> 00:13:01.696 A:middle
and we've extended it in iOS 8
to support trait collections.

00:13:02.666 --> 00:13:05.756 A:middle
We now have a new method,
appearanceForTraitCollection,

00:13:05.756 --> 00:13:08.126 A:middle
that returns you a
new appearance proxy

00:13:08.546 --> 00:13:10.406 A:middle
with a given trait collection
that you've passed in,

00:13:10.476 --> 00:13:13.426 A:middle
and any customizations
that you perform

00:13:13.586 --> 00:13:17.786 A:middle
on that appearance proxy will
only take effect on views

00:13:18.276 --> 00:13:21.336 A:middle
that are-that conform
to that trait collection

00:13:21.336 --> 00:13:22.076 A:middle
that you've passed in.

00:13:22.946 --> 00:13:25.606 A:middle
So, [applause] I'm
glad you like it.

00:13:27.706 --> 00:13:28.676 A:middle
Generally you pass

00:13:28.896 --> 00:13:30.966 A:middle
in a partially specified
trait collection

00:13:31.326 --> 00:13:35.006 A:middle
like a horizontal size class of
Compact, and then you'd be able

00:13:35.006 --> 00:13:37.676 A:middle
to customize all of your
views when they are inside

00:13:37.676 --> 00:13:41.466 A:middle
of a compact horizontal size
class, and this is really great

00:13:41.566 --> 00:13:43.326 A:middle
for customizing all of
your views together.

00:13:43.906 --> 00:13:47.776 A:middle
Another class that we've
added trait collection support

00:13:47.776 --> 00:13:49.066 A:middle
to is UIImage.

00:13:50.036 --> 00:13:53.866 A:middle
In the past, you'd have a 1X
and 2X version of your UIImages,

00:13:54.126 --> 00:13:56.586 A:middle
and you'd generally put
these in your image catalog.

00:13:57.636 --> 00:14:00.456 A:middle
However, in iOS 8, we've
extended this to allow you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:57.636 --> 00:14:00.456 A:middle
However, in iOS 8, we've
extended this to allow you

00:14:00.536 --> 00:14:02.526 A:middle
to add multiple versions
of your image

00:14:02.726 --> 00:14:03.896 A:middle
for different trait collections.

00:14:04.786 --> 00:14:08.996 A:middle
So for example, we could have
this smaller image that's used

00:14:08.996 --> 00:14:11.116 A:middle
when we have a vertically
compact size class,

00:14:11.186 --> 00:14:15.246 A:middle
and then the other image
that we use in any other time

00:14:15.246 --> 00:14:16.466 A:middle
for any other trait collections.

00:14:17.146 --> 00:14:21.106 A:middle
Now when you use one of these
images inside of a UIImageView,

00:14:21.106 --> 00:14:23.436 A:middle
the image view will
automatically pull

00:14:23.436 --> 00:14:24.886 A:middle
out the right version
of the image

00:14:25.096 --> 00:14:26.276 A:middle
for its current trait
collection.

00:14:27.106 --> 00:14:30.526 A:middle
So for example, if our image
view has a regular vertical size

00:14:30.526 --> 00:14:35.326 A:middle
class, we'd be using this larger
image, and what's really cool is

00:14:35.326 --> 00:14:36.866 A:middle
when our image view changes

00:14:36.986 --> 00:14:39.166 A:middle
to have a compact
vertical size class,

00:14:39.496 --> 00:14:42.016 A:middle
it will automatically update
the image that it's using

00:14:42.216 --> 00:14:43.326 A:middle
to be the smaller image,

00:14:43.576 --> 00:14:46.976 A:middle
and even change its own
intrinsic content size to shrink

00:14:46.976 --> 00:14:49.336 A:middle
down to exactly match
that image's size.

00:14:50.016 --> 00:14:53.926 A:middle
And this makes it really
easy for you to use images

00:14:53.926 --> 00:14:56.176 A:middle
that have different versions
for different trait collections,

00:14:56.426 --> 00:14:58.226 A:middle
and automatically get
the right behavior

00:14:58.546 --> 00:15:00.596 A:middle
in wherever your
application adapts to.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.546 --> 00:15:00.596 A:middle
in wherever your
application adapts to.

00:15:02.086 --> 00:15:04.106 A:middle
Now like I said, this
all happens automatically

00:15:04.176 --> 00:15:07.396 A:middle
with UIImageView, but we
also have a new class called

00:15:07.396 --> 00:15:09.866 A:middle
UIImageAsset that gives
you even more control.

00:15:09.946 --> 00:15:14.086 A:middle
An image asset wraps up all
of these different versions

00:15:14.086 --> 00:15:16.486 A:middle
of the image, and
it allows you to ask

00:15:16.486 --> 00:15:19.126 A:middle
for a specific image matching
a given trait collection

00:15:19.126 --> 00:15:21.726 A:middle
that you can pass in,
and you can even add

00:15:21.726 --> 00:15:23.546 A:middle
and remove your own
representations

00:15:23.546 --> 00:15:25.926 A:middle
of an image using other
methods on image assets,

00:15:26.526 --> 00:15:29.696 A:middle
so check out the UIImageAsset
header file to see all

00:15:29.696 --> 00:15:31.406 A:middle
of the details of
how this works.

00:15:31.406 --> 00:15:35.066 A:middle
Now, one last thing
that we can do

00:15:35.066 --> 00:15:36.976 A:middle
with trait collections
is add them together.

00:15:36.976 --> 00:15:40.186 A:middle
When we add one trait
collection to a second,

00:15:40.756 --> 00:15:44.226 A:middle
we get a combined trait
collection, and we can do

00:15:44.226 --> 00:15:46.736 A:middle
that with the traitCollection
WithTraitsFromCollections

00:15:46.736 --> 00:15:47.066 A:middle
method.

00:15:48.436 --> 00:15:51.746 A:middle
Any time that one of the
traits is unspecified,

00:15:52.056 --> 00:15:54.316 A:middle
except for in one of the trait
collections that we're adding,

00:15:54.736 --> 00:15:56.286 A:middle
we'll get only the
specified trait

00:15:56.456 --> 00:15:57.796 A:middle
in the final trait collection.

00:15:58.676 --> 00:16:01.966 A:middle
However, if there are multiple
versions, multiple values


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:58.676 --> 00:16:01.966 A:middle
However, if there are multiple
versions, multiple values

00:16:01.966 --> 00:16:03.566 A:middle
for the trait that are
being added together,

00:16:04.056 --> 00:16:06.776 A:middle
then the last trait collection
will be the one that wins.

00:16:07.556 --> 00:16:09.756 A:middle
So here, we're adding
Compact to Regular

00:16:09.756 --> 00:16:11.696 A:middle
for the horizontal size class,

00:16:11.696 --> 00:16:14.346 A:middle
so our resulting trait
collection will also have a

00:16:14.346 --> 00:16:17.276 A:middle
regular horizontal size
class, and we'll see

00:16:17.276 --> 00:16:19.456 A:middle
where this can be used a
little bit later in our talk.

00:16:20.076 --> 00:16:22.556 A:middle
Now that you know
how traits work,

00:16:22.806 --> 00:16:24.566 A:middle
let's see how we use
them in our application.

00:16:30.476 --> 00:16:32.976 A:middle
So, let's run our application
on the iPhone again -

00:16:41.326 --> 00:16:43.696 A:middle
- and we'll take a look
again at these two views

00:16:43.866 --> 00:16:45.046 A:middle
that change their appearance

00:16:45.736 --> 00:16:48.066 A:middle
when their vertical
size classes change.

00:16:48.636 --> 00:16:53.906 A:middle
The first one is our rating
control, and we can look

00:16:53.906 --> 00:16:55.126 A:middle
at the code for that right here.

00:16:56.516 --> 00:17:01.706 A:middle
All that we're doing in this
view is creating image views


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:56.516 --> 00:17:01.706 A:middle
All that we're doing in this
view is creating image views

00:17:02.726 --> 00:17:04.876 A:middle
and setting images on
them that we're pulling

00:17:04.876 --> 00:17:06.116 A:middle
out of our asset catalog.

00:17:07.205 --> 00:17:09.246 A:middle
There's actually no code
in here at all that deals

00:17:09.246 --> 00:17:10.695 A:middle
with traits or size classes.

00:17:11.506 --> 00:17:17.935 A:middle
Instead, we just have assets
that define a regular version

00:17:17.935 --> 00:17:20.816 A:middle
of the image, and a vertically
compact version of the image,

00:17:21.346 --> 00:17:23.935 A:middle
and our Image View
automatically updates

00:17:24.415 --> 00:17:25.996 A:middle
to give us this resizing
behavior

00:17:26.056 --> 00:17:28.996 A:middle
for our ratings control, and
since we're using Auto Layout,

00:17:29.056 --> 00:17:31.596 A:middle
our entire control
will shrink and grow

00:17:31.596 --> 00:17:33.066 A:middle
to match those images changing.

00:17:37.396 --> 00:17:40.406 A:middle
Notice that we also have black
versions of these images here,

00:17:40.496 --> 00:17:42.446 A:middle
and they're turning to be
blue in our application,

00:17:42.446 --> 00:17:46.356 A:middle
and this is because we've added
Image Rendering Mode support

00:17:46.566 --> 00:17:47.546 A:middle
to the asset catalog.

00:17:48.516 --> 00:17:56.356 A:middle
[ Applause ]

00:17:56.856 --> 00:18:00.086 A:middle
All right, next let's take
a look at our Overlay view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:56.856 --> 00:18:00.086 A:middle
All right, next let's take
a look at our Overlay view.

00:18:00.856 --> 00:18:06.926 A:middle
Here, in our intrinsic content
size method, we're looking

00:18:06.926 --> 00:18:09.676 A:middle
at the horizontal and
vertical size classes

00:18:09.736 --> 00:18:12.966 A:middle
that we're currently in, and
using that to determine margins

00:18:13.156 --> 00:18:15.046 A:middle
to add on to our
intrinsic content size,

00:18:15.166 --> 00:18:19.726 A:middle
and this is how we automatically
change between this larger

00:18:19.726 --> 00:18:23.336 A:middle
and smaller margins as we rotate
between a vertically compact

00:18:23.406 --> 00:18:25.306 A:middle
and regular size class.

00:18:25.856 --> 00:18:28.816 A:middle
However, we also need to
tell the system when it needs

00:18:28.816 --> 00:18:34.116 A:middle
to update this intrinsic
content size, and we do this

00:18:34.416 --> 00:18:36.466 A:middle
by overriding
traitCollectionDidChange.

00:18:37.346 --> 00:18:39.526 A:middle
Here, we check if
either the vertical

00:18:39.526 --> 00:18:42.216 A:middle
or horizontal size
class has changed along

00:18:42.216 --> 00:18:44.626 A:middle
with this trait collection
change, and if it has,

00:18:45.206 --> 00:18:47.326 A:middle
then we just invalidate
our intrinsic content size,

00:18:47.326 --> 00:18:51.436 A:middle
and that's all we have to do.

00:18:51.676 --> 00:18:53.006 A:middle
Now, one last view

00:18:53.006 --> 00:18:55.156 A:middle
in our application
is this Profile View,

00:18:55.596 --> 00:18:58.056 A:middle
and this shows some information
about the current user,

00:18:58.506 --> 00:19:00.046 A:middle
as well as the last
image that I've sent.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:58.506 --> 00:19:00.046 A:middle
as well as the last
image that I've sent.

00:19:01.026 --> 00:19:03.196 A:middle
However, when I rotate
this to landscape,

00:19:04.396 --> 00:19:05.746 A:middle
you'll see that our
layout changes

00:19:06.366 --> 00:19:09.136 A:middle
to show a side-by-side
view instead of this up

00:19:09.136 --> 00:19:11.476 A:middle
and down view, and
we've implemented

00:19:11.476 --> 00:19:14.206 A:middle
that by using Trait Collections
and Size Classes as well.

00:19:15.466 --> 00:19:17.296 A:middle
If I go to my Profile
View Controller,

00:19:18.686 --> 00:19:21.476 A:middle
you can see that we have
a method that updates all

00:19:21.476 --> 00:19:25.036 A:middle
of our auto layout constraints,
and it takes a trait collection

00:19:25.036 --> 00:19:27.996 A:middle
that we pass in, checks
its vertical size class,

00:19:28.536 --> 00:19:31.166 A:middle
and uses one set of
constraints when it's compact

00:19:31.536 --> 00:19:34.366 A:middle
to show the side-by-side
view, and uses a different set

00:19:34.366 --> 00:19:37.256 A:middle
of constraints, otherwise,
to show the up and down view.

00:19:37.256 --> 00:19:40.976 A:middle
All right, now let's look
back at slides, again.

00:19:48.086 --> 00:19:50.286 A:middle
The next thing I'd like to tell
you about is some of the details

00:19:50.496 --> 00:19:54.716 A:middle
of how our View Controllers have
adopted these concepts of traits

00:19:54.716 --> 00:19:57.636 A:middle
and size classes to
automatically perform,

00:19:57.636 --> 00:19:59.336 A:middle
be more adaptive in
your applications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:00.666 --> 00:20:01.916 A:middle
One of the View Controller
classes

00:20:01.916 --> 00:20:05.336 A:middle
that has changed the most in
iOS 8 is UISplitViewController.

00:20:06.236 --> 00:20:09.296 A:middle
In the past, you'd often
use a Split View Controller

00:20:09.556 --> 00:20:12.476 A:middle
in the iPad version of your
application, and then you'd have

00:20:12.476 --> 00:20:14.946 A:middle
to write a completely different
View Controller hierarchy

00:20:14.986 --> 00:20:16.196 A:middle
for your iPhone application.

00:20:17.126 --> 00:20:20.146 A:middle
Well in iOS 8, we've made the
Split View Controller available

00:20:20.146 --> 00:20:22.756 A:middle
on both platforms so you can
just write one View Controller

00:20:22.756 --> 00:20:25.576 A:middle
hierarchy that works
great on iPhone and iPad,

00:20:25.666 --> 00:20:28.086 A:middle
and that's what we've done
in our sample application.

00:20:29.496 --> 00:20:31.766 A:middle
However, we've even gone
a little bit further there

00:20:31.766 --> 00:20:33.836 A:middle
and forced the Split
View Controller

00:20:34.216 --> 00:20:37.376 A:middle
to have its side-by-side
two-column view in iPhone

00:20:37.376 --> 00:20:39.746 A:middle
in landscape just like
it would have in iPad.

00:20:40.506 --> 00:20:43.986 A:middle
So, let me show you
exactly how we did that.

00:20:44.136 --> 00:20:47.116 A:middle
Let's first take a look at the
Trait Environment hierarchy

00:20:47.416 --> 00:20:49.946 A:middle
that our application has
when it's on the iPad.

00:20:50.746 --> 00:20:54.776 A:middle
Here, you can see that the Split
View Controller is inheriting

00:20:54.776 --> 00:20:56.536 A:middle
its trait collections
from its parents

00:20:56.536 --> 00:20:59.706 A:middle
and this gives it a regular
horizontal size class.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:00.876 --> 00:21:02.146 A:middle
When the split View
Controller is

00:21:02.146 --> 00:21:03.826 A:middle
in a regular horizontal
size class,

00:21:04.396 --> 00:21:06.276 A:middle
it automatically will
show the two column view

00:21:06.456 --> 00:21:08.626 A:middle
that you expect on an iPad.

00:21:09.636 --> 00:21:11.196 A:middle
However, if we now change

00:21:11.626 --> 00:21:13.976 A:middle
to what our iPhone's
Trait Environment looks

00:21:13.976 --> 00:21:15.716 A:middle
like in landscape here,

00:21:16.446 --> 00:21:18.406 A:middle
you'll see that once again
the Split View Controller is

00:21:18.406 --> 00:21:19.886 A:middle
inheriting its trait
collections,

00:21:20.416 --> 00:21:23.056 A:middle
but here it has a compact
horizontal size class,

00:21:23.256 --> 00:21:26.496 A:middle
and this triggers it to
show the one column view.

00:21:27.006 --> 00:21:28.506 A:middle
Well, to change this
in our application,

00:21:29.016 --> 00:21:31.866 A:middle
we'll insert our own container
View Controller as the parent

00:21:31.866 --> 00:21:32.956 A:middle
of the Split View Controller.

00:21:33.766 --> 00:21:34.956 A:middle
Then, we'll use the new method

00:21:34.956 --> 00:21:37.796 A:middle
in iOS 8 called
setOverrideTraitCollection:

00:21:37.906 --> 00:21:38.926 A:middle
for ChildViewController.

00:21:42.256 --> 00:21:44.676 A:middle
This allows us to add
our own trait collection

00:21:45.216 --> 00:21:47.766 A:middle
to the one that's inherited
by the Child View Controller.

00:21:48.776 --> 00:21:51.986 A:middle
In this case, we'll be adding
a regular horizontal size class

00:21:51.986 --> 00:21:52.836 A:middle
in our trait collection,

00:21:53.126 --> 00:21:54.766 A:middle
and notice that it's
partially specified,

00:21:55.316 --> 00:21:57.866 A:middle
so when we add it together with
the inherited trait collection,

00:21:58.846 --> 00:22:01.726 A:middle
our Split View Controller will
now have a regular horizontal


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.846 --> 00:22:01.726 A:middle
our Split View Controller will
now have a regular horizontal

00:22:01.756 --> 00:22:04.456 A:middle
size class in addition
to what else it inherits

00:22:04.666 --> 00:22:05.676 A:middle
from its Trait Environments,

00:22:06.336 --> 00:22:09.506 A:middle
and this regular size
class will cause it

00:22:09.506 --> 00:22:11.656 A:middle
to show the two-column
split view appearance.

00:22:12.506 --> 00:22:15.626 A:middle
So what this ends up with
when we rotate from portrait

00:22:15.626 --> 00:22:18.966 A:middle
to landscape, is it will
change from one to two columns.

00:22:19.136 --> 00:22:24.886 A:middle
All right, now that we've seen
how we can change the trait

00:22:24.886 --> 00:22:27.956 A:middle
collections of our Child View
Controllers, let's take a look

00:22:27.956 --> 00:22:30.686 A:middle
in detail at how the trait
collection transition occurs,

00:22:31.026 --> 00:22:32.106 A:middle
for example, when we rotate.

00:22:32.816 --> 00:22:35.986 A:middle
In this case, we'd be rotating
from portrait to landscape,

00:22:36.476 --> 00:22:39.096 A:middle
and let's take a look at the
timeline of changes that occurs.

00:22:39.996 --> 00:22:43.226 A:middle
The first phase we have is
the setup where we get ready

00:22:43.356 --> 00:22:44.546 A:middle
to perform this transition.

00:22:45.446 --> 00:22:48.746 A:middle
Then, we show animations to
indicate the visual changes,

00:22:49.166 --> 00:22:51.816 A:middle
and when all of that's
done, we do some cleanup

00:22:52.446 --> 00:22:56.116 A:middle
to finalize the transition,
and in iOS 8,

00:22:56.586 --> 00:22:59.346 A:middle
when Trait Collections change
as part of this collection,

00:22:59.706 --> 00:23:01.946 A:middle
we've given you some
callbacks that you can tie


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:59.706 --> 00:23:01.946 A:middle
we've given you some
callbacks that you can tie

00:23:01.986 --> 00:23:04.156 A:middle
into to participate
in this change.

00:23:05.146 --> 00:23:07.966 A:middle
The first one is
willTransitionToTraitCollection:

00:23:08.016 --> 00:23:10.536 A:middle
withTransitionCoordinator,
and this gets called

00:23:10.536 --> 00:23:11.366 A:middle
at the very beginning

00:23:11.366 --> 00:23:13.966 A:middle
of the setup before the
trait collection has changed

00:23:13.966 --> 00:23:14.656 A:middle
to its new value.

00:23:16.046 --> 00:23:17.416 A:middle
You can use this to get ready

00:23:17.416 --> 00:23:18.826 A:middle
for the change that's
about to occur.

00:23:19.456 --> 00:23:23.086 A:middle
After that, the trait collection
change itself happens,

00:23:23.126 --> 00:23:24.506 A:middle
and immediately following

00:23:24.506 --> 00:23:26.676 A:middle
that we call
traitCollectionDidChange,

00:23:26.886 --> 00:23:29.666 A:middle
as I mentioned earlier,
and you can use this

00:23:29.666 --> 00:23:31.576 A:middle
in View Controllers
or View Subclasses.

00:23:32.696 --> 00:23:34.236 A:middle
However, that's not
the end of the story.

00:23:34.236 --> 00:23:36.946 A:middle
We still have these
Animation and Cleanup Stages,

00:23:37.746 --> 00:23:40.096 A:middle
and you can actually use the
willTransitionToTraitCollection

00:23:40.096 --> 00:23:41.856 A:middle
method to tie into
those, as well.

00:23:42.976 --> 00:23:45.176 A:middle
The transition coordinator
that you get passed

00:23:45.176 --> 00:23:48.876 A:middle
in this method has an animate
alongside method that allows you

00:23:48.946 --> 00:23:52.086 A:middle
to add your own animation
blocks to this transition

00:23:52.316 --> 00:23:55.686 A:middle
that will run along with the
transition's own animations,

00:23:55.686 --> 00:23:57.356 A:middle
for example, the
rotation in this case.

00:23:58.676 --> 00:24:01.126 A:middle
There's also a way to add
your own completion blocks


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.676 --> 00:24:01.126 A:middle
There's also a way to add
your own completion blocks

00:24:01.266 --> 00:24:03.696 A:middle
that will get run inside
of the cleanup stage.

00:24:03.696 --> 00:24:07.416 A:middle
So let's take a look at
where we might use these two

00:24:07.516 --> 00:24:08.666 A:middle
specific callbacks.

00:24:09.766 --> 00:24:11.846 A:middle
WillTransitionToTraitCollection
is great

00:24:11.846 --> 00:24:13.916 A:middle
for animating View
Controller changes along

00:24:13.916 --> 00:24:16.646 A:middle
with these trait collection
changes, so we use this

00:24:16.646 --> 00:24:20.146 A:middle
in our application in the
profile view that we just saw,

00:24:20.626 --> 00:24:23.236 A:middle
since we want this change
to occur right alongside

00:24:23.306 --> 00:24:24.486 A:middle
that rotation transition.

00:24:25.546 --> 00:24:26.046 A:middle
However,

00:24:26.046 --> 00:24:28.816 A:middle
WillTransitionToTraitCollection
is only available

00:24:28.816 --> 00:24:29.716 A:middle
on View Controllers,

00:24:29.976 --> 00:24:32.306 A:middle
not on other Trait
Environments like UIViews.

00:24:33.646 --> 00:24:36.586 A:middle
And so, traitCollectionDidChange
is great for use

00:24:36.586 --> 00:24:39.986 A:middle
in UIView subclasses where
you want to update your UI

00:24:40.546 --> 00:24:41.556 A:middle
as the traits are changing.

00:24:42.716 --> 00:24:43.636 A:middle
So we've used this one

00:24:44.086 --> 00:24:46.616 A:middle
in our Comment Overlay
View that you saw earlier.

00:24:46.616 --> 00:24:50.886 A:middle
So now that we've seen
these trait changes,

00:24:51.226 --> 00:24:54.146 A:middle
let's drill in a little bit
deeper into the behavior

00:24:54.146 --> 00:24:56.926 A:middle
that happens when a Split
View Controller collapses

00:24:57.386 --> 00:24:59.566 A:middle
from a two-column to
a one-column view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:04.216 --> 00:25:05.636 A:middle
As part of this change,

00:25:06.046 --> 00:25:07.996 A:middle
there are two changes
that need to occur.

00:25:08.926 --> 00:25:11.076 A:middle
The first thing that
has to happen is we need

00:25:11.076 --> 00:25:13.516 A:middle
to find a new primary
View Controller to show

00:25:13.516 --> 00:25:15.156 A:middle
in this collapsed
one-column state.

00:25:15.786 --> 00:25:19.416 A:middle
By default, Split View
Controller will use the primary

00:25:19.416 --> 00:25:22.176 A:middle
View Controller from your
expanded two-column state

00:25:22.276 --> 00:25:24.096 A:middle
as the new primary
View Controller

00:25:24.096 --> 00:25:26.296 A:middle
in your collapsed
one-column state as well.

00:25:27.366 --> 00:25:28.726 A:middle
However, you can
also change this

00:25:29.226 --> 00:25:31.966 A:middle
by overriding the
splitViewControllerDelegate

00:25:31.966 --> 00:25:35.366 A:middle
method, primaryViewControllerFor
CollapsingSplitViewController.

00:25:35.936 --> 00:25:38.346 A:middle
This allows you to return
any View Controller you want

00:25:38.626 --> 00:25:40.186 A:middle
to be the new primary
View Controller

00:25:40.276 --> 00:25:44.416 A:middle
in the collapsed version of
your Split View Controller.

00:25:44.466 --> 00:25:47.466 A:middle
Now, once that new primary View
Controller has been chosen,

00:25:47.916 --> 00:25:51.166 A:middle
the next step that has to happen
is the secondary View Controller

00:25:51.666 --> 00:25:54.186 A:middle
has to get merged into that
primary View Controller,

00:25:55.356 --> 00:25:57.976 A:middle
and in general, Split
View Controller will try

00:25:57.976 --> 00:26:00.116 A:middle
to automatically do the
right thing here as well.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:57.976 --> 00:26:00.116 A:middle
to automatically do the
right thing here as well.

00:26:00.776 --> 00:26:03.146 A:middle
In fact, in our sample
application we didn't need

00:26:03.146 --> 00:26:05.896 A:middle
to write or add any code to get
the behavior that you see here

00:26:06.396 --> 00:26:08.576 A:middle
where the secondary View
Controller, our Photo View,

00:26:09.006 --> 00:26:11.776 A:middle
automatically gets pushed onto
the Navigation Controller Stack

00:26:11.776 --> 00:26:14.076 A:middle
that we had from our
primary View Controller.

00:26:15.446 --> 00:26:17.136 A:middle
So generally, you won't
have to do anything here.

00:26:17.636 --> 00:26:20.166 A:middle
However, there may be some
special cases where you want

00:26:20.166 --> 00:26:22.166 A:middle
to interact a little
bit with this change.

00:26:22.696 --> 00:26:25.696 A:middle
One example of that from our
sample application is the No

00:26:25.696 --> 00:26:27.016 A:middle
Conversation Selected View.

00:26:28.106 --> 00:26:31.106 A:middle
We show this whenever we're
in the two-column wiew

00:26:31.536 --> 00:26:33.076 A:middle
and nothing has been
selected on the left.

00:26:33.996 --> 00:26:36.146 A:middle
However, if we just use
the default behavior,

00:26:36.216 --> 00:26:38.146 A:middle
the Split View Controller
would take

00:26:38.146 --> 00:26:41.356 A:middle
that Secondary View
Controller and push that on top

00:26:41.356 --> 00:26:42.386 A:middle
of our navigation stack,

00:26:43.206 --> 00:26:46.576 A:middle
but this No Conversation View
doesn't really add anything

00:26:46.576 --> 00:26:48.676 A:middle
to the single column view
because there's no way

00:26:48.676 --> 00:26:50.966 A:middle
that the user can
interact with it.

00:26:51.056 --> 00:26:53.796 A:middle
So, really we'd rather have
a view that looks like this

00:26:53.796 --> 00:26:56.816 A:middle
where we just show the top
level List View Controller

00:26:57.086 --> 00:27:00.706 A:middle
when we get collapsed,
and it's possible to do


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:57.086 --> 00:27:00.706 A:middle
when we get collapsed,
and it's possible to do

00:27:00.706 --> 00:27:03.056 A:middle
that with another
splitViewController method,

00:27:03.446 --> 00:27:06.496 A:middle
collapseSecondaryViewController:
ontoPrimaryViewController,

00:27:07.126 --> 00:27:09.376 A:middle
and I'll show you in detail
the code that we use to do

00:27:09.376 --> 00:27:12.766 A:middle
that in our sample app
a little bit later.

00:27:13.016 --> 00:27:15.606 A:middle
Next, let's look at the
transition that happens

00:27:15.606 --> 00:27:17.956 A:middle
in the opposite direction
when we expand

00:27:18.316 --> 00:27:22.276 A:middle
from a single column view
to the two-column view.

00:27:23.836 --> 00:27:26.686 A:middle
Once again, there are two
stages that need to occur.

00:27:27.276 --> 00:27:30.726 A:middle
We need to find the new primary
View Controller, and by default,

00:27:31.086 --> 00:27:34.246 A:middle
split View Controller will also
use the primary View Controller

00:27:34.246 --> 00:27:37.946 A:middle
from the collapsed view and the
expanded view, and once again,

00:27:38.086 --> 00:27:40.176 A:middle
you can use a Split View
Controller Delegate method

00:27:40.206 --> 00:27:41.206 A:middle
to change that behavior.

00:27:41.796 --> 00:27:43.686 A:middle
This one is
primaryViewControllerFor

00:27:43.686 --> 00:27:45.006 A:middle
ExpandingSplitViewController.

00:27:45.106 --> 00:27:49.786 A:middle
Now once that new primary View
Controller has been chosen,

00:27:50.576 --> 00:27:53.976 A:middle
we need to take the secondary
View Controller and recreate it

00:27:53.976 --> 00:27:58.176 A:middle
from the primary View
Controller that was collapsed,

00:27:58.226 --> 00:28:00.666 A:middle
and a Split View Controller will
automatically do the right thing


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.226 --> 00:28:00.666 A:middle
and a Split View Controller will
automatically do the right thing

00:28:00.756 --> 00:28:04.596 A:middle
here as well by popping off
our photo view and showing

00:28:04.596 --> 00:28:08.576 A:middle
that as the new secondary View
Controller in our Expanded view.

00:28:09.316 --> 00:28:11.206 A:middle
However, once again, we want

00:28:11.256 --> 00:28:12.636 A:middle
to do something a
little bit special

00:28:12.696 --> 00:28:13.866 A:middle
for the No Conversation view.

00:28:14.926 --> 00:28:16.836 A:middle
Here, if we were
showing the List view

00:28:16.836 --> 00:28:19.156 A:middle
when we were collapsed,
we want to recreate

00:28:19.156 --> 00:28:21.936 A:middle
that no conversation selected
view and make that appear

00:28:21.976 --> 00:28:25.326 A:middle
as the new Detail View
Controller on the right.

00:28:26.336 --> 00:28:29.526 A:middle
So we can do that using another
Split View Controller delegate

00:28:29.526 --> 00:28:29.826 A:middle
method,

00:28:30.096 --> 00:28:32.916 A:middle
separateSecondaryViewController
FromPrimaryViewController.

00:28:33.566 --> 00:28:36.106 A:middle
Now, I've just been telling you

00:28:36.186 --> 00:28:38.416 A:middle
that Split View Controller
is doing all of these merging

00:28:38.456 --> 00:28:41.386 A:middle
and unmerging of the secondary
View Controller automatically,

00:28:41.626 --> 00:28:42.936 A:middle
and that's not entirely true.

00:28:43.886 --> 00:28:46.496 A:middle
The primary View Controller
itself is actually helping

00:28:46.806 --> 00:28:48.236 A:middle
to do this merging
and unmerging,

00:28:48.736 --> 00:28:51.576 A:middle
and it's doing this using these
two methods on UIViewController,

00:28:52.726 --> 00:28:55.146 A:middle
collapseSecondaryViewController
forSplitViewController

00:28:55.646 --> 00:28:57.336 A:middle
and
separateSecondaryViewController

00:28:57.336 --> 00:28:58.286 A:middle
ForSplitViewController.

00:28:59.286 --> 00:29:01.776 A:middle
These get called by the
Split View Controller as part


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.286 --> 00:29:01.776 A:middle
These get called by the
Split View Controller as part

00:29:01.776 --> 00:29:05.306 A:middle
of its default implementation of
the collapsing and uncollapsing

00:29:05.556 --> 00:29:06.076 A:middle
that occurs,

00:29:07.106 --> 00:29:10.046 A:middle
and UINavigationController
implements these to push

00:29:10.046 --> 00:29:11.806 A:middle
and pop the secondary
View Controller

00:29:11.806 --> 00:29:12.956 A:middle
for you automatically.

00:29:13.866 --> 00:29:15.996 A:middle
However, you can
also implement these

00:29:16.136 --> 00:29:18.836 A:middle
in your own container View
Controllers to get the same kind

00:29:18.836 --> 00:29:20.826 A:middle
of behavior the navigation
controller has,

00:29:21.296 --> 00:29:23.606 A:middle
or even something completely
custom for your application.

00:29:24.206 --> 00:29:28.156 A:middle
Now, one other change
that we've made

00:29:28.156 --> 00:29:31.276 A:middle
to how View Controllers
work in iOS 8 is in the way

00:29:31.276 --> 00:29:32.886 A:middle
that you showViewControllers.

00:29:33.786 --> 00:29:36.026 A:middle
In the past, if you had
a leaf View Controller

00:29:36.126 --> 00:29:38.886 A:middle
like a table View Controller
and you showed a different one,

00:29:38.936 --> 00:29:43.316 A:middle
perhaps by tapping on the cell,
that View Controller would reach

00:29:43.316 --> 00:29:44.966 A:middle
up through the View
Controller hierarchy

00:29:45.226 --> 00:29:46.806 A:middle
and grab the navigation
controller

00:29:46.806 --> 00:29:49.716 A:middle
that it was embedded inside of
and call push View Controller

00:29:49.716 --> 00:29:52.456 A:middle
on that, but this is a
pretty tight coupling

00:29:52.496 --> 00:29:55.626 A:middle
between the leaf View Controller
and the exact environment

00:29:55.626 --> 00:29:58.166 A:middle
that it's inside of, and
we want to try to move away

00:29:58.166 --> 00:29:59.566 A:middle
from this pattern in iOS 8.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:01.516 --> 00:30:05.866 A:middle
[ Applause ]

00:30:06.366 --> 00:30:08.696 A:middle
So, instead we're
introducing two new methods

00:30:08.816 --> 00:30:11.456 A:middle
that help you de-couple
this, showViewController

00:30:11.686 --> 00:30:13.006 A:middle
and showDetailViewController.

00:30:14.016 --> 00:30:16.786 A:middle
These methods work by starting
at the leaf View Controller

00:30:17.226 --> 00:30:19.526 A:middle
and walking up its parent
View Controller hierarchy

00:30:19.826 --> 00:30:22.276 A:middle
until they find the right
Container View Controller

00:30:22.276 --> 00:30:23.736 A:middle
for that specific action.

00:30:24.766 --> 00:30:27.426 A:middle
So, let me show you how
these specific methods work.

00:30:28.176 --> 00:30:31.846 A:middle
We'll start with
ShowViewController

00:30:32.176 --> 00:30:35.656 A:middle
and how it behaves when it's
inside-when it's called inside

00:30:35.656 --> 00:30:37.026 A:middle
of a UINavigationController.

00:30:37.026 --> 00:30:41.426 A:middle
Here it will just push onto
the Navigation Controller,

00:30:41.926 --> 00:30:43.196 A:middle
so this is a great replacement

00:30:43.466 --> 00:30:46.496 A:middle
for that Self.Navigation
Controller/Push View Controller

00:30:46.556 --> 00:30:47.856 A:middle
approach that you saw earlier.

00:30:48.586 --> 00:30:50.256 A:middle
And what's great
about this method is

00:30:50.306 --> 00:30:51.816 A:middle
that it will actually adapt

00:30:51.996 --> 00:30:53.506 A:middle
to different View
Controller containers

00:30:53.796 --> 00:30:54.726 A:middle
and do something different.

00:30:55.526 --> 00:30:57.916 A:middle
For example, when you're inside
of a Split View Controller

00:30:57.916 --> 00:31:01.856 A:middle
and you call this method it
will instead show the new View


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:57.916 --> 00:31:01.856 A:middle
and you call this method it
will instead show the new View

00:31:01.856 --> 00:31:04.676 A:middle
Controller on the left side
of the Split View Controller

00:31:04.676 --> 00:31:06.286 A:middle
as the new Primary
View Controller.

00:31:07.596 --> 00:31:10.126 A:middle
In fact, even when you're
not inside of any container,

00:31:10.126 --> 00:31:12.776 A:middle
View Controller that implements
this method will still give you

00:31:12.826 --> 00:31:13.756 A:middle
some automatic behavior.

00:31:14.456 --> 00:31:16.726 A:middle
Here, we'll show
the View Controller

00:31:16.846 --> 00:31:18.956 A:middle
as a modal View Controller
presentation.

00:31:19.856 --> 00:31:22.196 A:middle
So, you can always be guaranteed
that the View Controller

00:31:22.196 --> 00:31:24.786 A:middle
that you pass to
ShowViewController will be shown

00:31:25.146 --> 00:31:27.886 A:middle
in exactly the right way
for its current environment.

00:31:28.446 --> 00:31:32.146 A:middle
Next, let's look at
showDetailViewController,

00:31:32.926 --> 00:31:35.346 A:middle
this works similarly
and it's implemented

00:31:35.486 --> 00:31:36.996 A:middle
by Split View Controller.

00:31:38.166 --> 00:31:40.866 A:middle
Here, the Split View Controller
will show the View Controller

00:31:40.866 --> 00:31:43.366 A:middle
you pass on the right
of its split.

00:31:44.576 --> 00:31:47.236 A:middle
However, if that Split View
Controller is collapsed,

00:31:47.236 --> 00:31:49.116 A:middle
as you might see in
an iPhone application,

00:31:49.826 --> 00:31:51.086 A:middle
then it will actually redirect

00:31:51.086 --> 00:31:54.196 A:middle
that showDetailViewController
method to showViewController

00:31:54.496 --> 00:31:56.906 A:middle
and re-send it to its own
Primary View Controller.

00:31:58.056 --> 00:31:59.896 A:middle
Let's look at a more
concrete example,

00:31:59.896 --> 00:32:02.046 A:middle
where we have
UINavigationController


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.896 --> 00:32:02.046 A:middle
where we have
UINavigationController

00:32:02.156 --> 00:32:04.826 A:middle
as the Primary View Controller
of the Split View Controller,

00:32:05.476 --> 00:32:06.586 A:middle
just like in our application.

00:32:07.396 --> 00:32:10.476 A:middle
Here, the Navigation Controller
gets the showViewController

00:32:10.476 --> 00:32:13.156 A:middle
method and will push just
like you saw earlier.

00:32:14.356 --> 00:32:14.546 A:middle
So,

00:32:14.546 --> 00:32:16.856 A:middle
this showDetailViewController
gives you great behavior

00:32:16.916 --> 00:32:18.906 A:middle
in a Split View Controller
where it'll show it

00:32:19.006 --> 00:32:22.226 A:middle
on the right-hand side if it's
expanded, but it will push

00:32:22.336 --> 00:32:23.606 A:middle
onto a Navigation Controller

00:32:23.606 --> 00:32:26.036 A:middle
if that's your Primary View
Controller when it's collapsed.

00:32:26.606 --> 00:32:30.796 A:middle
And once again just like
with showViewController,

00:32:31.076 --> 00:32:34.126 A:middle
showDetailViewController will
show that View Controller

00:32:34.126 --> 00:32:36.546 A:middle
as a model presentation
if it's not inside

00:32:36.546 --> 00:32:39.386 A:middle
of any container View
Controller that implements it.

00:32:40.616 --> 00:32:43.396 A:middle
So, these are those two
View - those two methods

00:32:43.616 --> 00:32:45.736 A:middle
and what their method
signature looks like but,

00:32:45.736 --> 00:32:47.116 A:middle
in addition to being
able to call them,

00:32:47.116 --> 00:32:48.906 A:middle
you can also implement these

00:32:49.066 --> 00:32:50.686 A:middle
in your own custom
View Controller methods

00:32:51.516 --> 00:32:53.836 A:middle
and this lets you get exactly
the same kind of behavior

00:32:53.986 --> 00:32:55.156 A:middle
as Navigation Controller

00:32:55.336 --> 00:32:57.466 A:middle
and Split View Controller
will get inside of all

00:32:57.466 --> 00:32:58.906 A:middle
of your custom View Controllers.

00:32:59.516 --> 00:33:03.516 A:middle
[ Silence ]


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.516 --> 00:33:03.516 A:middle
[ Silence ]

00:33:04.016 --> 00:33:08.000 A:middle
[ Applause ]

00:33:08.846 --> 00:33:10.526 A:middle
Next, I'd like to
tell you a little bit

00:33:10.526 --> 00:33:12.836 A:middle
about how these methods
are actually implemented.

00:33:12.836 --> 00:33:16.436 A:middle
And that's using a new method
called targetViewController

00:33:16.436 --> 00:33:17.616 A:middle
ForAction:sender.

00:33:19.086 --> 00:33:22.306 A:middle
This does all the work of going
up the View Controller hierarchy

00:33:22.686 --> 00:33:24.666 A:middle
until the right View
Controller gets found.

00:33:25.236 --> 00:33:27.926 A:middle
For example, if we call
showViewController we'd walk

00:33:27.926 --> 00:33:29.906 A:middle
up until we find the
Navigation Controller

00:33:30.076 --> 00:33:32.336 A:middle
since that's the first View
Controller that implements it

00:33:32.886 --> 00:33:34.716 A:middle
or if we called
showDetailViewController we

00:33:34.956 --> 00:33:36.986 A:middle
would keep walking up the
View Controller hierarchy

00:33:37.676 --> 00:33:39.186 A:middle
until we got to the
Split View Controller.

00:33:39.906 --> 00:33:41.726 A:middle
And
targetViewControllerForAction

00:33:42.056 --> 00:33:44.456 A:middle
works by looking at the
View Controller and seeing

00:33:44.456 --> 00:33:46.976 A:middle
if it's overwritten the action
method that you've passed in,

00:33:47.256 --> 00:33:49.706 A:middle
and also whether that
View Controller wants

00:33:49.706 --> 00:33:51.166 A:middle
to receive that specific action.

00:33:52.096 --> 00:33:53.746 A:middle
And the great thing
about this is

00:33:53.746 --> 00:33:57.066 A:middle
that since its public you can
use it to make your own methods

00:33:57.376 --> 00:33:58.866 A:middle
that work just like
ShowViewController

00:33:58.866 --> 00:34:00.136 A:middle
and ShowDetailViewController,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.866 --> 00:34:00.136 A:middle
and ShowDetailViewController,

00:34:00.736 --> 00:34:03.126 A:middle
and we'll see some
specific examples of this

00:34:03.336 --> 00:34:05.076 A:middle
as we've used it in
our sample application.

00:34:07.316 --> 00:34:10.056 A:middle
The last topic that I'd
like to mention is View

00:34:10.056 --> 00:34:11.136 A:middle
Controller presentation.

00:34:11.835 --> 00:34:14.186 A:middle
In iOS 8 we've made
this adaptive as well.

00:34:14.815 --> 00:34:16.136 A:middle
So if you show a Popover,

00:34:16.136 --> 00:34:19.065 A:middle
a View Controller presentation
will now automatically adapt

00:34:19.065 --> 00:34:21.456 A:middle
that to a fullscreen
presentation when you're

00:34:21.456 --> 00:34:23.706 A:middle
in a horizontally
compact size class.

00:34:24.696 --> 00:34:26.896 A:middle
Once again we don't have time
to talk about that today,

00:34:27.166 --> 00:34:28.846 A:middle
but I highly encourage
you to go to the

00:34:28.846 --> 00:34:31.065 A:middle
"A Look Inside Presentation
Controllers" talk,

00:34:31.216 --> 00:34:32.576 A:middle
which is tomorrow at 11:30.

00:34:32.576 --> 00:34:35.516 A:middle
It will show you all about how
Presentation Controllers work

00:34:36.005 --> 00:34:38.815 A:middle
and also how you can use them
with traits and adaptivity.

00:34:39.735 --> 00:34:42.596 A:middle
All right, let's look
at a demo of how all

00:34:42.596 --> 00:34:45.016 A:middle
of those View Controller
features work

00:34:45.016 --> 00:34:45.775 A:middle
in our application.

00:34:46.176 --> 00:34:50.966 A:middle
First, let's look at
that profile view again

00:34:50.966 --> 00:34:54.666 A:middle
and let me show you what
its transition looks

00:34:54.666 --> 00:34:55.585 A:middle
like in slow motion.

00:34:57.036 --> 00:35:00.416 A:middle
Notice that our labels and image
view are moving right along


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:57.036 --> 00:35:00.416 A:middle
Notice that our labels and image
view are moving right along

00:35:00.416 --> 00:35:02.276 A:middle
with the rotation transition.

00:35:02.846 --> 00:35:07.806 A:middle
And as I indicated,
the way we do that is

00:35:07.806 --> 00:35:09.936 A:middle
by calling this
updateConstraints

00:35:09.936 --> 00:35:12.666 A:middle
ForTraitCollection
method inside a

00:35:12.666 --> 00:35:15.536 A:middle
willTransitionToTraitCollection
with transition coordinator.

00:35:16.636 --> 00:35:19.416 A:middle
Here we just use the
animateAlongsideTransition

00:35:19.416 --> 00:35:21.056 A:middle
method of the transition
coordinator,

00:35:22.006 --> 00:35:23.456 A:middle
call that updateConstraints
method

00:35:24.236 --> 00:35:27.566 A:middle
and then make our view
update its layout.

00:35:28.556 --> 00:35:32.416 A:middle
This will automatically cause
this layout-these layout

00:35:32.416 --> 00:35:35.566 A:middle
constraints to change alongside
that rotation transition.

00:35:36.996 --> 00:35:41.166 A:middle
All right, now let's look at
how we can override the traits

00:35:41.436 --> 00:35:44.136 A:middle
for our Split View
Controller to automatically get

00:35:44.136 --> 00:35:46.586 A:middle
that landscape view
that shows two columns.

00:35:47.756 --> 00:35:50.106 A:middle
We'll just add this
viewWillTransitionToSize method

00:35:50.886 --> 00:35:53.896 A:middle
and here, if our width
is larger than 320,

00:35:54.746 --> 00:35:58.486 A:middle
we'll add this Forced Trait
Collection, which is -

00:35:58.486 --> 00:36:00.456 A:middle
has a horizontal size
class of regular.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:58.486 --> 00:36:00.456 A:middle
has a horizontal size
class of regular.

00:36:01.346 --> 00:36:03.646 A:middle
This is one of those partially
specified Trait Collections

00:36:03.796 --> 00:36:04.736 A:middle
that we talked about earlier.

00:36:04.736 --> 00:36:10.746 A:middle
When we set that trait
collection we'll use the

00:36:10.746 --> 00:36:13.176 A:middle
setOverrideTraitCollection
ForChildViewController method

00:36:13.416 --> 00:36:15.016 A:middle
to add it to our
Child View Controller,

00:36:15.326 --> 00:36:17.256 A:middle
which in this case is a
Split View Controller.

00:36:18.556 --> 00:36:21.486 A:middle
Now when I run the
application again you'll see

00:36:25.676 --> 00:36:30.976 A:middle
that we can rotate to landscape
and get this two-column view.

00:36:34.566 --> 00:36:37.426 A:middle
And everything just works
in iPhone as you'd expect

00:36:37.426 --> 00:36:43.866 A:middle
and in landscape it works
just as it would on the iPad.

00:36:44.336 --> 00:36:48.096 A:middle
Now let's look in detail at how
we implemented the collapsing

00:36:48.096 --> 00:36:49.066 A:middle
and expanding behavior.

00:36:50.146 --> 00:36:52.376 A:middle
This happens in our Split View
Controller delegate method.

00:36:55.276 --> 00:36:57.986 A:middle
First, we have the
collapseSecondaryViewController:

00:36:58.126 --> 00:37:02.086 A:middle
ontoPrimaryViewController method
and here we want to use this


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.126 --> 00:37:02.086 A:middle
ontoPrimaryViewController method
and here we want to use this

00:37:02.566 --> 00:37:08.136 A:middle
for when we're collapsing
and we're going from a -

00:37:08.136 --> 00:37:10.696 A:middle
showing the No Conversation
view to hiding it

00:37:10.996 --> 00:37:13.706 A:middle
and only showing
this top level list.

00:37:14.336 --> 00:37:16.966 A:middle
First, we'll ask the
Secondary View Controller

00:37:17.276 --> 00:37:19.416 A:middle
if it contains a
photo and we did this

00:37:19.446 --> 00:37:22.346 A:middle
by adding a category method
to your View Controller

00:37:22.706 --> 00:37:25.126 A:middle
to return whether or not any
given View Controller shows a

00:37:25.126 --> 00:37:29.066 A:middle
photo and, if we do
not have any photo

00:37:29.066 --> 00:37:31.666 A:middle
in our current Secondary View
Controller, we'll return yes.

00:37:32.566 --> 00:37:34.196 A:middle
This tells the Split
View Controller

00:37:34.336 --> 00:37:37.816 A:middle
that we've handled the collapse
ourselves and turns off any

00:37:37.816 --> 00:37:40.046 A:middle
of its default behaviors
which would have pushed

00:37:40.046 --> 00:37:43.866 A:middle
that Secondary View Controller
on top of the navigation stack.

00:37:44.776 --> 00:37:47.356 A:middle
We also have some
logic here to make sure

00:37:47.596 --> 00:37:50.326 A:middle
that we don't push a
View Controller on top

00:37:50.326 --> 00:37:53.016 A:middle
of any View Controllers that
don't match its current photo.

00:37:53.446 --> 00:37:55.626 A:middle
You can look at the
sample application yourself

00:37:55.856 --> 00:37:57.056 A:middle
to see exactly how this works.

00:37:57.996 --> 00:38:01.076 A:middle
Finally, we return "no"
here when there was a photo


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.996 --> 00:38:01.076 A:middle
Finally, we return "no"
here when there was a photo

00:38:01.126 --> 00:38:02.916 A:middle
and this tells the
Split View Controller

00:38:02.916 --> 00:38:04.266 A:middle
that we didn't implement
the collapse

00:38:04.496 --> 00:38:08.296 A:middle
and so it will implement-it will
perform that behavior itself.

00:38:08.296 --> 00:38:11.936 A:middle
And that's how we get
the automatic behavior

00:38:12.126 --> 00:38:15.286 A:middle
of pushing this photo view
off the navigation stack.

00:38:16.466 --> 00:38:18.286 A:middle
Now if we look in
the other direction,

00:38:18.496 --> 00:38:22.446 A:middle
where we're expanding our Split
View Controller we'll take a

00:38:22.696 --> 00:38:25.666 A:middle
look at all of the View
Controllers that are on top

00:38:25.666 --> 00:38:27.556 A:middle
of the navigation stack and,

00:38:27.556 --> 00:38:30.456 A:middle
if any of them contain a
photo, we'll return "no".

00:38:31.436 --> 00:38:35.086 A:middle
This also indicates to the Split
View Controller that we want it

00:38:35.086 --> 00:38:39.236 A:middle
to perform its default behavior
here so if we had a photo

00:38:40.136 --> 00:38:41.826 A:middle
and we were expanding then

00:38:42.916 --> 00:38:45.646 A:middle
that photo would
automatically get popped off

00:38:45.646 --> 00:38:48.026 A:middle
of the navigation stack
and shown on the right.

00:38:48.476 --> 00:38:49.946 A:middle
If we didn't contain
any photo though,

00:38:49.946 --> 00:38:52.306 A:middle
we'll want to create our
Empty View Controller

00:38:52.606 --> 00:38:53.756 A:middle
and that's how we re-show

00:38:53.756 --> 00:38:55.906 A:middle
that No Conversation view
when we're expanding.

00:38:55.906 --> 00:39:03.446 A:middle
Now let's take a look at
how our application moves


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:55.906 --> 00:39:03.446 A:middle
Now let's take a look at
how our application moves

00:39:03.446 --> 00:39:04.626 A:middle
between View Controllers.

00:39:05.076 --> 00:39:07.596 A:middle
First we'll look at the
Conversation View Controller.

00:39:08.616 --> 00:39:10.836 A:middle
This is the one that's
shown here when one

00:39:10.836 --> 00:39:12.896 A:middle
of our conversations
have multiple photos.

00:39:12.896 --> 00:39:16.836 A:middle
If we look at the
method that gets called

00:39:16.886 --> 00:39:18.926 A:middle
when we select a
table view cell,

00:39:19.556 --> 00:39:20.966 A:middle
we create our new
View Controller

00:39:21.556 --> 00:39:23.176 A:middle
and we call
ShowDetailViewController

00:39:23.366 --> 00:39:24.316 A:middle
on that new View Controller.

00:39:25.736 --> 00:39:27.956 A:middle
This shows it on the right
of the Split View Controller

00:39:28.086 --> 00:39:33.516 A:middle
if we're expanded and, as I
mentioned, it will push it

00:39:33.516 --> 00:39:35.516 A:middle
onto the navigation
stack if we're collapsed

00:39:35.926 --> 00:39:39.166 A:middle
without us having to write
any device specific checks

00:39:39.246 --> 00:39:39.746 A:middle
in our code.

00:39:40.476 --> 00:39:44.926 A:middle
We can also look at our
List View Controller,

00:39:45.316 --> 00:39:47.716 A:middle
which has similar but slightly
more complicated behavior.

00:39:48.826 --> 00:39:51.946 A:middle
And that's so that we can
show a single View Controller

00:39:51.946 --> 00:39:53.666 A:middle
immediately if there
is only one photo,

00:39:54.576 --> 00:39:56.096 A:middle
or this Conversation
View Controller

00:39:56.166 --> 00:39:57.036 A:middle
if there is more than one.

00:39:58.556 --> 00:40:01.766 A:middle
Here we check if for any
given row we should show


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:39:58.556 --> 00:40:01.766 A:middle
Here we check if for any
given row we should show

00:40:01.766 --> 00:40:02.736 A:middle
that Conversation View

00:40:02.736 --> 00:40:06.456 A:middle
and if we're showing the
Conversation View we create it

00:40:06.456 --> 00:40:07.616 A:middle
and use ShowViewController.

00:40:08.716 --> 00:40:11.326 A:middle
This method will
always push onto the -

00:40:11.456 --> 00:40:15.076 A:middle
onto its navigation controller
even when we're expanded

00:40:15.356 --> 00:40:16.176 A:middle
in the two-column view.

00:40:16.736 --> 00:40:21.446 A:middle
On the other hand, if we only
have single photo we'll create

00:40:21.446 --> 00:40:24.016 A:middle
that View Controller and
call ShowDetailViewController

00:40:24.606 --> 00:40:26.556 A:middle
which gives us the
same behavior as we had

00:40:27.846 --> 00:40:30.206 A:middle
in the Conversation
View Controller case.

00:40:31.476 --> 00:40:34.736 A:middle
Now one more thing that you'll
notice in our application is

00:40:34.926 --> 00:40:37.736 A:middle
that when we rotate to
transition between a single

00:40:37.736 --> 00:40:42.616 A:middle
and two column view these
disclosure indicators are hiding

00:40:42.666 --> 00:40:46.086 A:middle
and appearing and this is
to maintain the behavior

00:40:46.726 --> 00:40:50.696 A:middle
that whenever tapping on a row
would push we show a disclosure

00:40:50.696 --> 00:40:53.536 A:middle
indicator and whenever it
wouldn't we don't show the

00:40:53.536 --> 00:40:54.456 A:middle
disclosure indicator.

00:40:55.616 --> 00:40:59.866 A:middle
So in a single-column,
collapsed view we push on all

00:40:59.866 --> 00:41:04.026 A:middle
of these rows, but in the
expanded view we only push


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.866 --> 00:41:04.026 A:middle
of these rows, but in the
expanded view we only push

00:41:04.136 --> 00:41:05.756 A:middle
on these multiple
conversation views.

00:41:06.556 --> 00:41:12.066 A:middle
And we did that by adding our
own category to UIViewController

00:41:12.846 --> 00:41:14.466 A:middle
that implements two new methods,

00:41:15.776 --> 00:41:17.876 A:middle
willShowing
ViewControllerPushWithSender

00:41:18.196 --> 00:41:20.476 A:middle
and willShowingDetail
ViewControllerPushWithSender.

00:41:21.236 --> 00:41:23.056 A:middle
These correspond to
the ShowViewController

00:41:23.136 --> 00:41:25.146 A:middle
and ShowDetailViewController
methods that we talked

00:41:25.146 --> 00:41:28.596 A:middle
about earlier, and they just
return whether calling one

00:41:28.596 --> 00:41:30.816 A:middle
of those methods would
cause a push to occur or not

00:41:31.286 --> 00:41:32.986 A:middle
which we use to determine
whether or not

00:41:32.986 --> 00:41:34.166 A:middle
to show a disclosure indicator.

00:41:34.776 --> 00:41:38.106 A:middle
The way we implement these is

00:41:38.106 --> 00:41:40.576 A:middle
by using the
targetViewControllerForAction

00:41:40.576 --> 00:41:41.776 A:middle
method that we just
talked about,

00:41:42.546 --> 00:41:46.286 A:middle
we pass in the same action will
showing View Controller push

00:41:46.286 --> 00:41:49.726 A:middle
with sender and then we get
back a targetViewController

00:41:50.016 --> 00:41:51.096 A:middle
that implements that method.

00:41:51.766 --> 00:41:54.326 A:middle
Once we have our
targetViewController we just

00:41:54.326 --> 00:41:56.436 A:middle
need to ask it whether
it will push or not

00:41:57.196 --> 00:41:59.066 A:middle
and if we don't have a
target we'll return no.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:00.686 --> 00:42:03.166 A:middle
Then, you just need to
override those methods

00:42:03.496 --> 00:42:05.916 A:middle
and Navigation Controller
to return yes,

00:42:06.346 --> 00:42:08.606 A:middle
then showing a View
Controller here will always push

00:42:09.786 --> 00:42:12.416 A:middle
and will override it in Split
View Controller to return no,

00:42:13.016 --> 00:42:15.546 A:middle
since here showing a View
Controller will show it

00:42:15.636 --> 00:42:17.566 A:middle
in the left hand column
as I mentioned earlier.

00:42:18.896 --> 00:42:19.916 A:middle
Now, the behavior

00:42:20.006 --> 00:42:22.796 A:middle
for willShowingDetailView
ControllerPush is slightly more

00:42:22.796 --> 00:42:25.396 A:middle
complicated, because
here we need to check

00:42:25.396 --> 00:42:26.556 A:middle
if we're collapsed first

00:42:27.546 --> 00:42:30.526 A:middle
and if we're collapsed then
we'll take our current Primary

00:42:30.526 --> 00:42:32.716 A:middle
View Controller and
we'll redirect the

00:42:32.716 --> 00:42:34.486 A:middle
willShowingDetailViewController
method

00:42:34.866 --> 00:42:37.906 A:middle
to willShowingViewController,
and this is the same kind

00:42:37.906 --> 00:42:40.226 A:middle
of behavior that Split
View Controller implements

00:42:40.406 --> 00:42:41.746 A:middle
with showDetailViewController.

00:42:42.956 --> 00:42:45.856 A:middle
So, now that we've seen
how those are implemented,

00:42:46.526 --> 00:42:47.566 A:middle
let's look at how we used it

00:42:47.936 --> 00:42:50.086 A:middle
in our Table View
Controller classes.

00:42:51.936 --> 00:42:53.996 A:middle
Here, when we're laying out one

00:42:53.996 --> 00:42:57.086 A:middle
of our cells we'll call will
showing detail View Controller

00:42:57.136 --> 00:43:00.066 A:middle
push and that's because the
method that we would call


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:57.136 --> 00:43:00.066 A:middle
push and that's because the
method that we would call

00:43:00.066 --> 00:43:02.106 A:middle
when it was tapped is
showDetailViewController.

00:43:03.216 --> 00:43:05.446 A:middle
We'll get back the
result of whether or not

00:43:05.776 --> 00:43:10.036 A:middle
that action will push and we'll
use it to set the accessory type

00:43:10.156 --> 00:43:12.046 A:middle
to either disclosure
indicator or none.

00:43:13.516 --> 00:43:15.136 A:middle
This is how we get these showing

00:43:15.186 --> 00:43:16.866 A:middle
and hiding disclosure
indicators.

00:43:17.936 --> 00:43:21.916 A:middle
Now, we also use these methods
to determine whether or not

00:43:22.086 --> 00:43:25.576 A:middle
to deselect a row when
it gets popped too

00:43:26.356 --> 00:43:28.626 A:middle
and you can take a look at the
sample application yourself

00:43:28.956 --> 00:43:30.206 A:middle
to see exactly how that works

00:43:30.606 --> 00:43:32.826 A:middle
by using the same
willShowingView Controller

00:43:32.886 --> 00:43:34.666 A:middle
and willShowingDetail
ViewController methods.

00:43:35.436 --> 00:43:40.416 A:middle
The last thing I'd like to show
you is a new notification we

00:43:40.416 --> 00:43:41.486 A:middle
added in iOS 8,

00:43:42.156 --> 00:43:44.696 A:middle
UIViewControllerShow
DetailTargetDidChange

00:43:44.696 --> 00:43:46.816 A:middle
notification and
this is important

00:43:46.816 --> 00:43:49.166 A:middle
for telling our table
view when it needs

00:43:49.166 --> 00:43:50.856 A:middle
to update its disclosure views.

00:43:51.646 --> 00:43:53.096 A:middle
This notification gets triggered

00:43:53.096 --> 00:43:55.746 A:middle
by Split View Controller
whenever the target

00:43:56.076 --> 00:43:59.466 A:middle
that would be used for
showDetailViewController changes

00:43:59.466 --> 00:44:03.976 A:middle
and this is when a Split View
Controller expands or collapses


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.466 --> 00:44:03.976 A:middle
and this is when a Split View
Controller expands or collapses

00:44:05.036 --> 00:44:09.246 A:middle
so we use this notification
to go through all of our cells

00:44:09.516 --> 00:44:11.676 A:middle
and update their
disclosure indicators.

00:44:12.656 --> 00:44:14.496 A:middle
That's all for our
sample application,

00:44:14.966 --> 00:44:16.496 A:middle
but I really encourage
you to download it

00:44:16.576 --> 00:44:18.326 A:middle
from the WWDC website.

00:44:18.826 --> 00:44:21.426 A:middle
Remember, it's called
adaptive photos and take a look

00:44:21.626 --> 00:44:23.666 A:middle
at how it implements
all of these features.

00:44:24.126 --> 00:44:30.176 A:middle
Next, I'd like to hand things
over to Tony to talk to you

00:44:30.176 --> 00:44:32.046 A:middle
about some of the changes we've
made to Interface Builder,

00:44:32.046 --> 00:44:33.916 A:middle
Interface Builder for
supporting adaptivity.

00:44:34.516 --> 00:44:38.886 A:middle
[ Applause ]

00:44:39.386 --> 00:44:39.956 A:middle
&gt;&gt; Thanks Jacob.

00:44:41.216 --> 00:44:43.586 A:middle
Hi, I'm Tony Ricciardi
and I'm an engineer

00:44:43.586 --> 00:44:44.606 A:middle
on the Interface Builder team.

00:44:45.926 --> 00:44:48.766 A:middle
Jacob just introduced a
few new concepts in iOS 8

00:44:48.766 --> 00:44:51.706 A:middle
for developing adaptive
UIs such as Size Classes

00:44:51.706 --> 00:44:52.476 A:middle
and Trait Collections.

00:44:52.596 --> 00:44:55.036 A:middle
Now I'm going to show you guys
a few new features we've added

00:44:55.036 --> 00:44:57.026 A:middle
to Xcode to help you
work with these concepts.

00:44:58.366 --> 00:45:04.146 A:middle
In Xcode 6, you can
customize your layout


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.366 --> 00:45:04.146 A:middle
In Xcode 6, you can
customize your layout

00:45:04.146 --> 00:45:06.866 A:middle
for multiple Size Classes
using a single Interface

00:45:06.866 --> 00:45:07.586 A:middle
Builder document.

00:45:08.436 --> 00:45:11.186 A:middle
That means you can now target
both the iPhone and the iPad

00:45:11.416 --> 00:45:12.776 A:middle
with one storyboard or XIB.

00:45:13.306 --> 00:45:17.436 A:middle
You can deploy these documents
backwards to older versions

00:45:17.436 --> 00:45:25.776 A:middle
of iOS, and you can preview your
layout for different devices,

00:45:26.166 --> 00:45:29.256 A:middle
orientations and OS
versions all within Xcode.

00:45:31.026 --> 00:45:34.036 A:middle
Now documents using this
feature will require Xcode 6

00:45:34.036 --> 00:45:36.176 A:middle
and auto layout, so
they won't be compatible

00:45:36.176 --> 00:45:38.686 A:middle
with older versions of Xcode.

00:45:38.826 --> 00:45:40.806 A:middle
Let's head over to
Xcode and take a look.

00:45:44.826 --> 00:45:46.836 A:middle
Okay, so here we
have the storyboard

00:45:46.896 --> 00:45:49.356 A:middle
for an adventure game I
have designed for the iPad.

00:45:49.676 --> 00:45:53.036 A:middle
Today I want to extend this
storyboard to target the iPhone.

00:45:53.036 --> 00:45:53.796 A:middle
Before I get started,

00:45:53.796 --> 00:45:55.686 A:middle
let me show you the app
running in the stimulator.

00:45:57.216 --> 00:45:59.406 A:middle
This is the main menu
for my adventure game.

00:45:59.856 --> 00:46:02.116 A:middle
On the left I have a few
buttons that control the content


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:59.856 --> 00:46:02.116 A:middle
On the left I have a few
buttons that control the content

00:46:02.116 --> 00:46:03.256 A:middle
that shows up on the right side.

00:46:04.136 --> 00:46:05.676 A:middle
The Play button takes
you to this menu

00:46:05.676 --> 00:46:06.936 A:middle
for choosing your character,

00:46:06.936 --> 00:46:08.406 A:middle
which can either be
a Warrior or a Mage.

00:46:09.836 --> 00:46:11.776 A:middle
The Store button takes
you to the store page

00:46:12.106 --> 00:46:14.036 A:middle
and this button takes
you to the Settings page.

00:46:14.576 --> 00:46:19.036 A:middle
As you can see, I've
implemented this UI using

00:46:19.036 --> 00:46:20.186 A:middle
a UISplitViewController.

00:46:21.606 --> 00:46:23.786 A:middle
Over here I have my
Primary View Controller

00:46:23.786 --> 00:46:24.646 A:middle
with those three buttons.

00:46:25.986 --> 00:46:31.706 A:middle
Up here, I have my
character menu and, down here,

00:46:32.096 --> 00:46:34.456 A:middle
I have my Store page
and my Settings page.

00:46:35.616 --> 00:46:37.476 A:middle
Each of these three
buttons is connected to one

00:46:37.476 --> 00:46:39.446 A:middle
of those Secondary View
Controllers using a

00:46:39.446 --> 00:46:40.156 A:middle
replace segue.

00:46:40.786 --> 00:46:42.476 A:middle
That means that when you
tap one of those buttons,

00:46:42.756 --> 00:46:44.966 A:middle
the Secondary View Controller
is going to be replaced

00:46:45.346 --> 00:46:48.536 A:middle
by the View Controller that
is connected to that button.

00:46:50.776 --> 00:46:53.136 A:middle
So as I mentioned today
I want to enable -

00:46:53.186 --> 00:46:56.996 A:middle
I want to extend the storyboard
to target the iPhone and to do

00:46:56.996 --> 00:46:58.706 A:middle
that I'm going to
enable Size Classes.

00:46:59.176 --> 00:47:01.106 A:middle
I'm going to head over
to the File Inspector


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.176 --> 00:47:01.106 A:middle
I'm going to head over
to the File Inspector

00:47:01.386 --> 00:47:03.076 A:middle
and check the U Size
Classes box.

00:47:04.126 --> 00:47:06.306 A:middle
When I do that, I get
this dialog telling me

00:47:06.306 --> 00:47:08.146 A:middle
that my document is
going to be upgraded,

00:47:09.006 --> 00:47:11.036 A:middle
upgrading will enable
auto layout

00:47:11.206 --> 00:47:14.456 A:middle
and it will convert your segues
to the new adaptive segue types.

00:47:15.306 --> 00:47:17.576 A:middle
If you've viewed storyboards
before, you're familiar

00:47:17.576 --> 00:47:20.596 A:middle
with the usual segue
types like push, model,

00:47:20.596 --> 00:47:23.506 A:middle
and replace that allow you
to display View Controller

00:47:23.506 --> 00:47:24.446 A:middle
when an event is triggered.

00:47:25.156 --> 00:47:28.636 A:middle
In Xcode 6 we've added some
new segue types that correspond

00:47:28.636 --> 00:47:31.446 A:middle
to the new View Controller API
that Jacob discussed earlier,

00:47:31.816 --> 00:47:34.406 A:middle
like showViewController and
showDetailViewController.

00:47:34.996 --> 00:47:37.216 A:middle
When you enable Size Classes it
will automatically upgrade your

00:47:37.216 --> 00:47:40.596 A:middle
segue to those new types.

00:47:40.736 --> 00:47:43.326 A:middle
So, as you can see after
I enabled Size Classes,

00:47:43.326 --> 00:47:47.056 A:middle
my View Controller got
resized to this 480 by 480

00:47:47.056 --> 00:47:49.776 A:middle
to the second, this square
represents sizes of any width

00:47:50.026 --> 00:47:52.836 A:middle
and any height so, when you
see this square your edits will

00:47:52.836 --> 00:47:57.816 A:middle
apply to all Size Classes
unless you override your layout

00:47:57.816 --> 00:47:59.186 A:middle
for a specific size class.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:00.016 --> 00:48:03.366 A:middle
In my case, I've already
designed my layout to work well

00:48:03.366 --> 00:48:05.196 A:middle
for the iPad and now I want

00:48:05.196 --> 00:48:07.226 A:middle
to override my layout
for the iPhone.

00:48:07.456 --> 00:48:11.486 A:middle
To do that I'm going to use
this button here at the bottom

00:48:11.486 --> 00:48:16.096 A:middle
of the canvas, this
button allows me to choose

00:48:16.156 --> 00:48:17.696 A:middle
which Size Classes
I'm editing for.

00:48:19.106 --> 00:48:20.426 A:middle
Each of these squares in this 3

00:48:20.426 --> 00:48:23.256 A:middle
by 3 grid represents a
combination of a width class

00:48:23.256 --> 00:48:26.646 A:middle
and a height class, currently
the middle square is selected

00:48:26.706 --> 00:48:28.756 A:middle
and that corresponds to
any width and any height.

00:48:29.596 --> 00:48:30.716 A:middle
When this square is selected,

00:48:30.796 --> 00:48:33.106 A:middle
you're editing your default
layout, which is inherited

00:48:33.106 --> 00:48:34.396 A:middle
by all the other configurations.

00:48:35.186 --> 00:48:38.706 A:middle
In the top left, we have
a square for compact width

00:48:38.706 --> 00:48:40.836 A:middle
and compact height
and that corresponds

00:48:40.956 --> 00:48:42.836 A:middle
to an iPhone in landscape.

00:48:43.356 --> 00:48:46.696 A:middle
In the bottom right, we have
a square for regular width

00:48:46.696 --> 00:48:49.586 A:middle
and regular height, which
corresponds to an iPad,

00:48:50.626 --> 00:48:52.356 A:middle
and in my case since
I'm interested

00:48:52.356 --> 00:48:54.976 A:middle
in overriding my layout
for an iPhone in portrait,

00:48:55.276 --> 00:48:56.936 A:middle
I'm going to head over
to the bottom left

00:48:57.096 --> 00:48:58.016 A:middle
where I have a square

00:48:58.086 --> 00:49:00.766 A:middle
for compact width
and regular height.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.086 --> 00:49:00.766 A:middle
for compact width
and regular height.

00:49:03.696 --> 00:49:07.206 A:middle
When I choose that square, my
View Controller grows narrow

00:49:07.206 --> 00:49:09.286 A:middle
and tall to show me
that I'm now editing

00:49:09.286 --> 00:49:12.396 A:middle
for compact width
and regular height.

00:49:12.826 --> 00:49:15.026 A:middle
Also, you might have noticed
this bar at the bottom

00:49:15.026 --> 00:49:17.516 A:middle
of the canvas turns blue to
show me I'm no longer editing

00:49:17.516 --> 00:49:18.566 A:middle
for the default layout.

00:49:20.116 --> 00:49:23.196 A:middle
As you can see in this
configuration, my image view

00:49:23.196 --> 00:49:24.706 A:middle
and my buttons are
getting clipped.

00:49:25.946 --> 00:49:27.866 A:middle
So, this is going to
require a couple of fixes.

00:49:28.266 --> 00:49:31.416 A:middle
First I want to give my image
view a smaller image to use

00:49:31.416 --> 00:49:33.836 A:middle
when the width is
compact and second I want

00:49:33.866 --> 00:49:35.596 A:middle
to change those buttons
to be stacked on top

00:49:35.596 --> 00:49:37.176 A:middle
of each other vertically rather

00:49:37.176 --> 00:49:38.916 A:middle
than sitting side-by-side
like they are now.

00:49:40.136 --> 00:49:41.716 A:middle
Let's fix the image view first.

00:49:41.716 --> 00:49:44.796 A:middle
I'm going to head over to my
asset catalog using the jump bar

00:49:45.546 --> 00:49:48.026 A:middle
and then I'm going to
select my logo image set

00:49:48.196 --> 00:49:51.656 A:middle
and then I'm going to head over
to the inspector and up here

00:49:51.836 --> 00:49:54.926 A:middle
for the width attribute I'm
going to choose any and compact.

00:49:56.496 --> 00:49:58.866 A:middle
That gives me a couple
of new slots here.

00:49:59.456 --> 00:50:01.626 A:middle
The images that I put into
these slots are going to be used


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:49:59.456 --> 00:50:01.626 A:middle
The images that I put into
these slots are going to be used

00:50:01.626 --> 00:50:04.306 A:middle
at runtime instead of my default
images whenever the width

00:50:04.306 --> 00:50:04.876 A:middle
is compact.

00:50:05.676 --> 00:50:07.846 A:middle
I already have a couple
of images waiting here

00:50:07.846 --> 00:50:10.436 A:middle
in the finder, so I'm just going

00:50:10.436 --> 00:50:14.236 A:middle
to drag those over
to those slots.

00:50:18.536 --> 00:50:21.496 A:middle
Okay, now I'm going to head
back to the storyboard and,

00:50:21.496 --> 00:50:23.716 A:middle
as you can see, that image
view has been updated

00:50:23.716 --> 00:50:25.736 A:middle
with that smaller image and
it's no longer getting clipped.

00:50:25.736 --> 00:50:27.756 A:middle
Now let's fix these buttons.

00:50:27.756 --> 00:50:31.026 A:middle
I'm going to start by
just selecting the buttons

00:50:31.416 --> 00:50:33.836 A:middle
so you can take a look
at their constraints.

00:50:34.676 --> 00:50:37.166 A:middle
For those of you who are
unfamiliar with auto layout,

00:50:37.166 --> 00:50:39.496 A:middle
I'm not going to go
into too much detail

00:50:39.686 --> 00:50:41.336 A:middle
in layout constraints
for this demo.

00:50:41.786 --> 00:50:43.386 A:middle
I recommend checking
out our session

00:50:43.386 --> 00:50:44.526 A:middle
from last year's conference.

00:50:45.006 --> 00:50:47.406 A:middle
However, I do want to point out
that there is a hidden view here

00:50:47.406 --> 00:50:48.526 A:middle
between these two buttons

00:50:48.916 --> 00:50:50.986 A:middle
and that view only exists
to hold constraints.

00:50:52.086 --> 00:50:55.166 A:middle
It has a couple of constraints
centering it in its container

00:50:55.416 --> 00:50:57.636 A:middle
and it has a few more
constraints pinning the buttons

00:50:57.696 --> 00:51:01.146 A:middle
to it, but most importantly it
has this width constraint here


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:57.696 --> 00:51:01.146 A:middle
to it, but most importantly it
has this width constraint here

00:51:01.936 --> 00:51:04.506 A:middle
and that allows me to control
how far apart the buttons are

00:51:04.506 --> 00:51:05.056 A:middle
from each other.

00:51:05.396 --> 00:51:07.486 A:middle
So, if I wanted to
move them farther apart

00:51:07.486 --> 00:51:09.546 A:middle
or closer together I
would just have to edit

00:51:09.546 --> 00:51:10.316 A:middle
that width constraint.

00:51:12.116 --> 00:51:14.956 A:middle
However, now that I want
these buttons to be laid

00:51:14.956 --> 00:51:18.126 A:middle
out vertically, I no
longer need this view or any

00:51:18.126 --> 00:51:19.916 A:middle
of its constraints to
hold the buttons together.

00:51:20.726 --> 00:51:23.256 A:middle
So, the next thing I'm going
to do is clear the restraints

00:51:23.316 --> 00:51:25.386 A:middle
by using this menu at
the bottom of the canvas.

00:51:25.766 --> 00:51:30.366 A:middle
I'm just going to choose clear
constraints and when I do

00:51:30.366 --> 00:51:32.346 A:middle
that the constraints
disappear from the canvas

00:51:34.136 --> 00:51:36.706 A:middle
and you might wonder if that's
going to cause my layout

00:51:36.706 --> 00:51:38.496 A:middle
to stop working for the iPad.

00:51:38.896 --> 00:51:41.476 A:middle
However, since I'm currently
editing for compact width

00:51:41.476 --> 00:51:43.646 A:middle
and regular height my
edits will only apply

00:51:43.646 --> 00:51:44.686 A:middle
to that configuration.

00:51:45.286 --> 00:51:46.836 A:middle
If we take a look
at the outline view,

00:51:47.236 --> 00:51:50.796 A:middle
you can see that those
constraints are still there

00:51:50.796 --> 00:51:53.106 A:middle
in my document they've
just been turned off

00:51:53.336 --> 00:51:54.566 A:middle
for the current editing mode.

00:51:55.156 --> 00:51:59.466 A:middle
Okay, the next thing I'm going
to do is remove this view

00:51:59.736 --> 00:52:03.336 A:middle
since I no longer need it
there to hold the buttons next


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:51:59.736 --> 00:52:03.336 A:middle
since I no longer need it
there to hold the buttons next

00:52:03.406 --> 00:52:04.396 A:middle
to each other horizontally.

00:52:04.396 --> 00:52:07.086 A:middle
So, I'm going to go over
to the Attributes Inspector

00:52:07.346 --> 00:52:10.006 A:middle
and down here at the bottom
we have this check box

00:52:10.006 --> 00:52:10.856 A:middle
that says Installed.

00:52:11.746 --> 00:52:14.906 A:middle
Installed means that the view
is present in the view hierarchy

00:52:14.906 --> 00:52:17.536 A:middle
at runtime as a subview
of its container.

00:52:18.266 --> 00:52:21.616 A:middle
I want this view to be installed
in all configurations except

00:52:21.766 --> 00:52:25.446 A:middle
for compact width and regular
height so, I'm going to add -

00:52:25.446 --> 00:52:28.366 A:middle
I'm going to use this "+" button
here to add a customization

00:52:28.436 --> 00:52:30.856 A:middle
for compact width
and regular height.

00:52:31.936 --> 00:52:34.676 A:middle
When I do that, I get a
new Installed checkbox and,

00:52:34.676 --> 00:52:37.426 A:middle
when I uncheck that box,
the view disappears,

00:52:37.966 --> 00:52:40.756 A:middle
and if we take another
look at the outline view

00:52:40.756 --> 00:52:42.826 A:middle
over here you can see that
it's once again still there

00:52:42.826 --> 00:52:44.526 A:middle
in my document but it's
just been turned off

00:52:44.526 --> 00:52:44.976 A:middle
for this editing mode.

00:52:45.516 --> 00:52:50.456 A:middle
[ Applause ]

00:52:50.956 --> 00:52:53.286 A:middle
Okay, now I'm just going to
drag around these buttons

00:52:53.496 --> 00:52:56.356 A:middle
so that they're going to be
laid out vertically rather

00:52:56.456 --> 00:52:58.746 A:middle
than sitting side-by-side.

00:52:59.516 --> 00:53:05.106 A:middle
Okay, then I'll select the
buttons and that label there


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:59.516 --> 00:53:05.106 A:middle
Okay, then I'll select the
buttons and that label there

00:53:05.106 --> 00:53:07.376 A:middle
and I'm going to go back to this
menu and this time I'm going

00:53:07.376 --> 00:53:09.956 A:middle
to ask Interface Builder to
just give me some suggested

00:53:09.956 --> 00:53:11.196 A:middle
constraints for those views.

00:53:11.716 --> 00:53:17.306 A:middle
Okay, at this point I could
hit the Run button and try this

00:53:17.306 --> 00:53:20.106 A:middle
out in the iPhone simulator
but instead what I'm going

00:53:20.106 --> 00:53:22.846 A:middle
to do is show you how you can
preview your layout directly

00:53:22.846 --> 00:53:23.606 A:middle
within Xcode.

00:53:24.476 --> 00:53:27.686 A:middle
So, I'm going to go up
to the top and I'm going

00:53:27.826 --> 00:53:32.706 A:middle
to open the assistant
editor then I'm going

00:53:32.706 --> 00:53:35.226 A:middle
to use the jump bar to go
over to the Preview Assistant.

00:53:37.176 --> 00:53:42.086 A:middle
And since I'm interested in
previewing for the iPhone 4

00:53:42.256 --> 00:53:44.476 A:middle
in portrait, I'm going
to use this "+" button

00:53:44.476 --> 00:53:47.146 A:middle
and choose iPhone
4-inch, and there we go,

00:53:47.146 --> 00:53:49.236 A:middle
now I can see my layout
as it would appear

00:53:49.236 --> 00:53:49.966 A:middle
on an iPhone portrait.

00:53:50.516 --> 00:53:55.866 A:middle
[ Applause ]

00:53:56.366 --> 00:53:57.216 A:middle
If I wanted to try it

00:53:57.216 --> 00:53:59.576 A:middle
out in landscape I can use
this button here at the bottom

00:53:59.576 --> 00:54:02.376 A:middle
of the preview to
rotate it, or if I want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.576 --> 00:54:02.376 A:middle
of the preview to
rotate it, or if I want

00:54:02.376 --> 00:54:05.196 A:middle
to see both orientations at
the same time I can use the

00:54:05.196 --> 00:54:09.136 A:middle
"+" button again to add
another preview and now

00:54:09.136 --> 00:54:11.066 A:middle
that lets me see both
orientations at once.

00:54:11.986 --> 00:54:15.316 A:middle
As you can see in landscape the
buttons are once again sitting

00:54:15.506 --> 00:54:18.626 A:middle
side-by-side and that's because
we've only changed our layout

00:54:18.706 --> 00:54:20.436 A:middle
for compact width
and regular height.

00:54:21.046 --> 00:54:24.556 A:middle
An iPhone in landscape
corresponds to compact width,

00:54:24.556 --> 00:54:27.336 A:middle
compact height and so
those edits didn't apply.

00:54:27.956 --> 00:54:31.136 A:middle
Just in case you
didn't believe me,

00:54:31.136 --> 00:54:33.366 A:middle
now I'll actually run
this in the simulator.

00:54:39.836 --> 00:54:43.036 A:middle
All right, so here we have
my Primary View Controller

00:54:43.036 --> 00:54:46.166 A:middle
with those three buttons and, as
you can see, it's now fullscreen

00:54:46.166 --> 00:54:47.186 A:middle
since we're running on a phone.

00:54:48.406 --> 00:54:51.296 A:middle
When I tap the Play button it
takes me to my character menu

00:54:51.366 --> 00:54:53.586 A:middle
and those buttons are
stacked vertically just

00:54:53.586 --> 00:54:56.976 A:middle
like we expected, and
when I rotate they move

00:54:56.976 --> 00:55:03.856 A:middle
to sit side-by-side.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:56.976 --> 00:55:03.856 A:middle
to sit side-by-side.

00:55:04.066 --> 00:55:05.406 A:middle
Let's recap what we
saw in that demo.

00:55:06.646 --> 00:55:09.956 A:middle
First, we used auto layout
to design a flexible UI

00:55:10.316 --> 00:55:12.136 A:middle
that works well for
multiple Size Classes.

00:55:12.546 --> 00:55:15.756 A:middle
For example, my image view
used a horizontal centering

00:55:15.756 --> 00:55:17.926 A:middle
constraint to position itself

00:55:17.926 --> 00:55:21.986 A:middle
for both compact width
and regular width.

00:55:22.146 --> 00:55:24.776 A:middle
Next, I showed you how
you can override subviews

00:55:24.776 --> 00:55:27.896 A:middle
and constraints for specific
Size Classes when you need to.

00:55:28.216 --> 00:55:31.516 A:middle
I did this to give my buttons
a vertical layout for iPhones

00:55:31.516 --> 00:55:35.906 A:middle
in portrait and a separate
layout for all other cases.

00:55:37.296 --> 00:55:40.616 A:middle
And finally I showed you how you
can preview different devices

00:55:40.616 --> 00:55:44.026 A:middle
and orientations, OS
versions, even localizations,

00:55:44.226 --> 00:55:47.276 A:middle
all within Xcode using the
Preview Assistant Editor.

00:55:49.496 --> 00:55:51.516 A:middle
Today you saw a lot
of new concepts

00:55:51.516 --> 00:55:52.696 A:middle
for developing adaptive UIs.

00:55:53.806 --> 00:55:56.856 A:middle
Jacob introduced you to Trait
Collections and Size Classes

00:55:56.856 --> 00:55:58.276 A:middle
which allow you to
modify your UI

00:55:58.766 --> 00:56:01.926 A:middle
in response to changes in size.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:55:58.766 --> 00:56:01.926 A:middle
in response to changes in size.

00:56:02.126 --> 00:56:04.686 A:middle
He also introduced a
new API that allows you

00:56:04.686 --> 00:56:06.436 A:middle
to decouple Child
View Controllers

00:56:06.436 --> 00:56:08.866 A:middle
from their containers
and to collapse

00:56:08.866 --> 00:56:10.736 A:middle
and expand
UISplitViewControllers.

00:56:12.166 --> 00:56:14.256 A:middle
Finally I showed you some
new features we've added

00:56:14.256 --> 00:56:16.006 A:middle
to Interface Builder
and Xcode 6.

00:56:17.376 --> 00:56:20.516 A:middle
If you'd like more information
you can contact our Evangelists

00:56:20.516 --> 00:56:22.066 A:middle
or you can post on
the Developer Forum.

00:56:23.376 --> 00:56:25.726 A:middle
We recommend checking out the
other View Controller-related

00:56:25.726 --> 00:56:27.266 A:middle
sessions from this
year's conference

00:56:27.486 --> 00:56:30.366 A:middle
and we'll also be having an
Interface Builder session later

00:56:30.366 --> 00:56:31.536 A:middle
this afternoon in this room.

00:56:32.266 --> 00:56:33.376 A:middle
And with that, thank you

00:56:33.376 --> 00:56:35.426 A:middle
and I hope you enjoyed
Developing Adaptive UIs

00:56:35.566 --> 00:56:36.296 A:middle
[applause] in iOS 8.

00:56:36.296 --> 00:56:37.016 A:middle
-

00:56:37.016 --> 00:56:41.886 A:middle
[ Applause ]

