WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.316 --> 00:00:12.176 A:middle
&gt;&gt; Hello, everyone.

00:00:12.716 --> 00:00:15.366 A:middle
I assume you guys are all here

00:00:15.366 --> 00:00:17.426 A:middle
because you care
about battery life.

00:00:18.676 --> 00:00:21.486 A:middle
And if you don't, well, I
got your bosses to thank

00:00:21.486 --> 00:00:24.856 A:middle
because they're probably the
ones that sent you here today.

00:00:26.046 --> 00:00:27.966 A:middle
Well, either way, thank
you so much for coming

00:00:27.966 --> 00:00:30.566 A:middle
to the second half of
Writing Energy Efficient Code.

00:00:31.806 --> 00:00:32.526 A:middle
My name is Albert.

00:00:32.526 --> 00:00:35.416 A:middle
I'm an engineer on the
iOS Software Power team.

00:00:36.216 --> 00:00:39.106 A:middle
And today, I want to talk
about how to apply some

00:00:39.106 --> 00:00:42.346 A:middle
of the energy concepts and
principles that, you know,

00:00:42.346 --> 00:00:43.616 A:middle
was discussed in
the first session

00:00:44.126 --> 00:00:46.126 A:middle
to the various different
technologies

00:00:46.126 --> 00:00:49.006 A:middle
and features you might be
using in your application.

00:00:50.196 --> 00:00:53.956 A:middle
So, last year we introduced the
energy menu in OS X Mavericks,

00:00:54.696 --> 00:01:00.986 A:middle
and this year we're introducing
the Battery Usage Menu in iOS.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:54.696 --> 00:01:00.986 A:middle
and this year we're introducing
the Battery Usage Menu in iOS.

00:01:01.476 --> 00:01:06.346 A:middle
Now, this menu aims to break
down your iOS device's energy

00:01:06.346 --> 00:01:08.206 A:middle
and battery use by application.

00:01:09.836 --> 00:01:13.606 A:middle
Both of those menus will
help educate as well

00:01:13.606 --> 00:01:15.816 A:middle
as provide our users
with information

00:01:15.816 --> 00:01:20.226 A:middle
on where their battery has gone
in their devices because we know

00:01:20.226 --> 00:01:22.176 A:middle
that our users care
about battery life.

00:01:23.556 --> 00:01:26.156 A:middle
According to surveys,
one of the top reasons

00:01:26.156 --> 00:01:27.746 A:middle
that would prompt
someone to spend money

00:01:28.096 --> 00:01:31.366 A:middle
to buy a new phone is
better battery life.

00:01:32.606 --> 00:01:35.136 A:middle
So, our users do care about the
battery life of their devices.

00:01:35.726 --> 00:01:38.286 A:middle
And with both of these
menus, our message is clear.

00:01:39.296 --> 00:01:42.466 A:middle
We, at Apple, also care
about battery life.

00:01:43.636 --> 00:01:47.696 A:middle
We go to great lengths
and efforts to ensure

00:01:47.696 --> 00:01:50.646 A:middle
that our laptops and
mobile devices have some

00:01:50.646 --> 00:01:54.576 A:middle
of the best battery life
in the industry and we do

00:01:54.576 --> 00:01:59.996 A:middle
that because we know that great
battery life is a key part


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.056 --> 00:02:02.096 A:middle
of great user experience.

00:02:02.136 --> 00:02:05.876 A:middle
Now, as a developer myself,

00:02:06.036 --> 00:02:08.866 A:middle
I know that oftentimes
schedules are tight, right?

00:02:08.866 --> 00:02:11.356 A:middle
Requirements are always
changing and getting features

00:02:11.356 --> 00:02:15.106 A:middle
and functionalities to
work is your top priority.

00:02:15.106 --> 00:02:17.046 A:middle
However, what I hoped
to show you today is

00:02:17.046 --> 00:02:20.046 A:middle
that by keeping energy
in mind, as you design

00:02:20.046 --> 00:02:22.976 A:middle
and architecture applications,
you might actually be able

00:02:22.976 --> 00:02:24.576 A:middle
to simplify your
development cycles.

00:02:24.866 --> 00:02:30.496 A:middle
I hope that you will be able
to walk away with APIs or ideas

00:02:30.496 --> 00:02:33.076 A:middle
on how you can minimize
and reduce the energy use

00:02:33.076 --> 00:02:37.216 A:middle
of your applications, and
really, my goal today is

00:02:37.216 --> 00:02:40.346 A:middle
to help you prevent your
application from going

00:02:40.346 --> 00:02:42.776 A:middle
up to the top of our
battery list unnecessarily.

00:02:43.346 --> 00:02:47.026 A:middle
So, through the next hour,
we'll go through a quick recap

00:02:47.116 --> 00:02:48.916 A:middle
of what Anthony has
discussed in the first session

00:02:49.766 --> 00:02:51.636 A:middle
and then we'll talk
about how to apply some

00:02:51.636 --> 00:02:53.606 A:middle
of those principles
to networking.

00:02:54.116 --> 00:02:58.706 A:middle
After that, I want to show you
how you can actually measure the

00:02:58.706 --> 00:03:02.476 A:middle
energy usage of your application
through some tools that we have,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.706 --> 00:03:02.476 A:middle
energy usage of your application
through some tools that we have,

00:03:03.316 --> 00:03:06.156 A:middle
and then we'll camp
on the idea of sleep

00:03:06.836 --> 00:03:08.046 A:middle
for the rest of our session.

00:03:08.506 --> 00:03:14.656 A:middle
So with that, let's begin our
session with a quick recap.

00:03:16.336 --> 00:03:18.506 A:middle
So, in the first session,
for those of you guys

00:03:18.506 --> 00:03:21.336 A:middle
who weren't able to attend,
Anthony briefly talked

00:03:21.336 --> 00:03:23.536 A:middle
about two energy concepts

00:03:23.656 --> 00:03:25.466 A:middle
that really anchor
energy efficient coding.

00:03:26.346 --> 00:03:30.376 A:middle
First is the idea of
fixed cost or what I would

00:03:30.466 --> 00:03:34.836 A:middle
like to simply refer to
as the overhead cost.

00:03:35.026 --> 00:03:37.996 A:middle
Resources on our system, by
default, stay in idle state

00:03:38.186 --> 00:03:39.406 A:middle
and this is to conserve power.

00:03:40.556 --> 00:03:42.306 A:middle
Now, when your app
requests to do some work,

00:03:43.216 --> 00:03:45.226 A:middle
the system will need to
power up that resource.

00:03:45.936 --> 00:03:48.976 A:middle
We need to keep the resource up
while you're doing your work.

00:03:49.086 --> 00:03:52.356 A:middle
And then most resources go
through an intermediate state

00:03:52.576 --> 00:03:55.346 A:middle
where the resources are kept up
in case some other work needs

00:03:55.346 --> 00:03:56.806 A:middle
to be done very shortly.

00:03:57.236 --> 00:03:59.856 A:middle
Now this is so that you
won't have to pay or wait

00:03:59.856 --> 00:04:00.756 A:middle
for the resource to boot


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.856 --> 00:04:00.756 A:middle
for the resource to boot

00:04:00.756 --> 00:04:02.756 A:middle
up again while you're
doing-while you're doing

00:04:02.756 --> 00:04:03.176 A:middle
your work.

00:04:03.576 --> 00:04:06.276 A:middle
But the system does stay up a
little bit-the resources stay

00:04:06.276 --> 00:04:08.586 A:middle
up a little bit even after
you finish your work.

00:04:08.676 --> 00:04:10.296 A:middle
And finally, when
the resource decides

00:04:10.296 --> 00:04:11.576 A:middle
that there's no more
work to be done,

00:04:11.926 --> 00:04:13.366 A:middle
it'll go back down
to idle state.

00:04:13.466 --> 00:04:17.116 A:middle
So, as you can see on the screen
here, the area in the green is,

00:04:17.216 --> 00:04:18.976 A:middle
you know, the work that you're
doing in your application,

00:04:19.315 --> 00:04:22.065 A:middle
but the area under in
blue is the fixed cost

00:04:22.065 --> 00:04:23.046 A:middle
or the overhead cost.

00:04:23.826 --> 00:04:26.496 A:middle
And there is these
intermediate stanzas

00:04:26.496 --> 00:04:28.336 A:middle
between where the
resource is still kept

00:04:28.336 --> 00:04:30.546 A:middle
up while you're not
doing any work.

00:04:30.546 --> 00:04:33.636 A:middle
So, if you want to
minimize the energy used

00:04:33.636 --> 00:04:36.416 A:middle
for your applications, you'll
want to do as much work

00:04:36.416 --> 00:04:38.036 A:middle
as you can while you
do have the resource

00:04:38.036 --> 00:04:40.976 A:middle
so you can minimize the overhead
cost of doing your work.

00:04:41.926 --> 00:04:45.286 A:middle
Second is the idea of
trading power for energy.

00:04:46.306 --> 00:04:49.386 A:middle
Now, a lot of resources on our
systems have different power

00:04:49.386 --> 00:04:51.696 A:middle
and performance states
and that's

00:04:51.696 --> 00:04:54.496 A:middle
to conserve power
while still ensuring

00:04:54.496 --> 00:04:56.196 A:middle
that we can provide
fluid performances.

00:04:57.616 --> 00:05:00.536 A:middle
We all know, hopefully,
that energy is a factor


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:57.616 --> 00:05:00.536 A:middle
We all know, hopefully,
that energy is a factor

00:05:00.536 --> 00:05:04.136 A:middle
of both the power used as
well as the time it takes

00:05:04.406 --> 00:05:05.876 A:middle
for you to finish your work.

00:05:06.916 --> 00:05:09.526 A:middle
As you can see on the screen
on the figure on your right,

00:05:09.686 --> 00:05:12.376 A:middle
the idea here is that
by doing as much work

00:05:12.376 --> 00:05:17.446 A:middle
as you can-although, you could
potentially be using a lot more

00:05:17.446 --> 00:05:20.506 A:middle
power instantaneously-you'll
be able

00:05:20.506 --> 00:05:23.746 A:middle
to finish your work quicker,
minimizing the overhead cost

00:05:23.746 --> 00:05:25.826 A:middle
as well as the overall
energy used.

00:05:26.736 --> 00:05:30.666 A:middle
Essentially, you're trading
power for time to reduce energy.

00:05:31.586 --> 00:05:33.656 A:middle
So, that's trading
power for energy.

00:05:34.986 --> 00:05:38.016 A:middle
Now, as developers, I know
that these concepts can be kind

00:05:38.016 --> 00:05:41.096 A:middle
of abstract and hard to apply
when you're actually coding.

00:05:41.716 --> 00:05:43.836 A:middle
So, Anthony boiled
it down for you guys.

00:05:44.356 --> 00:05:48.546 A:middle
Here's what reducing energy use
really comes down to and that's

00:05:48.936 --> 00:05:51.346 A:middle
to do it never, to do
it at a better time,

00:05:52.026 --> 00:05:54.776 A:middle
to do it more efficiently
and to do it less.

00:05:55.926 --> 00:05:59.406 A:middle
You'll want to do work never,
do work at a better time,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:00.246 --> 00:06:04.026 A:middle
do work more efficiently
and do work less.

00:06:04.216 --> 00:06:05.996 A:middle
That's what reducing
energy really comes down to.

00:06:07.316 --> 00:06:09.036 A:middle
Now, Anthony went into
great detail on how

00:06:09.036 --> 00:06:12.176 A:middle
to apply these principles to
minimizing the system activity

00:06:12.176 --> 00:06:14.656 A:middle
of your applications in
reducing-essentially,

00:06:14.656 --> 00:06:15.736 A:middle
reducing the CPU usage.

00:06:16.476 --> 00:06:18.316 A:middle
So, let me just quickly go
over that for you real quick.

00:06:18.426 --> 00:06:20.646 A:middle
For doing it never, Anthony
talked about reacting

00:06:20.736 --> 00:06:22.786 A:middle
to app transitions, right?

00:06:22.786 --> 00:06:24.576 A:middle
If your application is
going into the background

00:06:24.656 --> 00:06:26.996 A:middle
or is not going to
be the frontmost app,

00:06:26.996 --> 00:06:29.226 A:middle
make sure you stop
any unnecessary work,

00:06:29.296 --> 00:06:30.506 A:middle
such as any type of rendering

00:06:30.506 --> 00:06:33.006 A:middle
because your users
will not see it.

00:06:33.926 --> 00:06:36.886 A:middle
Now, for doing it at a
better time, Anthony talked

00:06:36.886 --> 00:06:40.626 A:middle
about two scheduling APIs
that you would consider using

00:06:41.586 --> 00:06:43.486 A:middle
and that's the
NSBackgroundActivityScheduler

00:06:43.486 --> 00:06:47.356 A:middle
for OS X and the NSURLSession
for both iOS and OS X

00:06:47.626 --> 00:06:49.286 A:middle
to schedule your
network transactions.

00:06:49.486 --> 00:06:49.996 A:middle
Now, we'll talk

00:06:49.996 --> 00:06:54.316 A:middle
about NSURLSession a
little bit more later.

00:06:54.846 --> 00:06:58.286 A:middle
For doing it more
efficiently, Anthony talked

00:06:58.286 --> 00:07:02.346 A:middle
about the new quality of
service APIs and he really went


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:58.286 --> 00:07:02.346 A:middle
about the new quality of
service APIs and he really went

00:07:02.346 --> 00:07:06.066 A:middle
into detail on how you can
set the appropriate quality

00:07:06.066 --> 00:07:09.266 A:middle
of servers with the priority of
your NSOperation or GCD queues

00:07:09.656 --> 00:07:11.206 A:middle
so you can do your
work more efficiently.

00:07:12.956 --> 00:07:15.646 A:middle
And finally, for doing it less,
Anthony mentioned the importance

00:07:15.646 --> 00:07:17.806 A:middle
of coalescing your
timers, right?

00:07:17.806 --> 00:07:20.296 A:middle
You want to coalesce your
timers to let your system,

00:07:20.406 --> 00:07:22.096 A:middle
your CPU idle as
much as you can.

00:07:23.356 --> 00:07:27.066 A:middle
Now, before I continue, I wanted
to take a quick detour and talk

00:07:27.066 --> 00:07:28.806 A:middle
about something new for iOS.

00:07:30.196 --> 00:07:32.916 A:middle
Now, up until now, we've
seen many developer bugs

00:07:32.916 --> 00:07:35.586 A:middle
where their applications
that are running

00:07:35.586 --> 00:07:38.726 A:middle
in the background are
utilizing a lot of CPU

00:07:38.826 --> 00:07:41.336 A:middle
for an extended period of time.

00:07:41.516 --> 00:07:43.586 A:middle
This should be considered bugs

00:07:43.586 --> 00:07:45.966 A:middle
because there are pretty
clear guidelines on why

00:07:45.966 --> 00:07:49.306 A:middle
and when an iOS app can
run in the background.

00:07:49.836 --> 00:07:51.976 A:middle
So, as you help developers
catch these bugs,

00:07:52.076 --> 00:07:55.856 A:middle
as well as minimize the
battery impact on the device

00:07:55.856 --> 00:07:59.476 A:middle
when this happens, we've
implemented a CPU monitor

00:07:59.536 --> 00:08:02.196 A:middle
that will kick in when your
applications are running-are


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.536 --> 00:08:02.196 A:middle
that will kick in when your
applications are running-are

00:08:02.196 --> 00:08:03.206 A:middle
considered background running.

00:08:03.296 --> 00:08:10.286 A:middle
Now, what this will mean for
your applications is-well,

00:08:10.286 --> 00:08:12.786 A:middle
it really shouldn't
mean anything, right?

00:08:12.786 --> 00:08:15.816 A:middle
The CPU limits that we've
set are purely meant

00:08:15.816 --> 00:08:17.286 A:middle
to catch runaway usage.

00:08:18.316 --> 00:08:21.866 A:middle
They're set at a limit where
if you're doing the normal type

00:08:21.866 --> 00:08:24.116 A:middle
of work that you've
requested according

00:08:24.116 --> 00:08:26.446 A:middle
to the background modes that
you have in your applications,

00:08:26.716 --> 00:08:28.606 A:middle
you should not be
affected in any way.

00:08:29.616 --> 00:08:33.006 A:middle
However, if you do end
up hitting the CPU limit,

00:08:33.686 --> 00:08:37.076 A:middle
your app will be terminated
and a log will be generated

00:08:37.076 --> 00:08:39.385 A:middle
to help you identify
that this has happened.

00:08:39.876 --> 00:08:41.206 A:middle
Here's what this
log will look like.

00:08:43.056 --> 00:08:45.066 A:middle
So, up top, you'll
see that the way

00:08:45.066 --> 00:08:48.216 A:middle
to identify is the exception
type, which is EXC-RESOURCE

00:08:48.456 --> 00:08:50.736 A:middle
and the subtype,
you'll see CPU-FATAL.

00:08:51.276 --> 00:08:52.986 A:middle
This is how you'll know
that your application

00:08:52.986 --> 00:08:54.816 A:middle
that was running in the
background was terminated.

00:08:55.676 --> 00:08:58.426 A:middle
And on the bottom, we've
included some microstackshots

00:08:58.426 --> 00:09:01.096 A:middle
of what your application
was doing right before we


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.426 --> 00:09:01.096 A:middle
of what your application
was doing right before we

00:09:01.096 --> 00:09:01.786 A:middle
terminated it.

00:09:02.186 --> 00:09:04.626 A:middle
This should help you
identify in your CodePath

00:09:04.896 --> 00:09:08.756 A:middle
where you had your runaway CPU
usage so that you can fix it.

00:09:09.556 --> 00:09:13.026 A:middle
So this is really-now, this will
not only preserve battery life

00:09:13.026 --> 00:09:16.226 A:middle
but it will help our developers,
which is you guys, to catch bugs

00:09:16.356 --> 00:09:17.446 A:middle
that you might not have known.

00:09:18.146 --> 00:09:21.346 A:middle
So once again, this is new
and we'll begin in iOS 8.

00:09:21.856 --> 00:09:25.886 A:middle
So, let me go back to
the recap-and I wanted

00:09:25.886 --> 00:09:28.176 A:middle
to mention one last thing
that Anthony talked about

00:09:28.646 --> 00:09:31.826 A:middle
and that's really on
energy-an energy efficient way

00:09:31.826 --> 00:09:33.156 A:middle
to do graphics and animation.

00:09:33.706 --> 00:09:36.386 A:middle
And the two points that
he talked about were

00:09:36.656 --> 00:09:39.456 A:middle
to avoid extraneous
screen updates, right?

00:09:39.456 --> 00:09:42.126 A:middle
Don't be updating the screen
when it's not necessary

00:09:42.386 --> 00:09:45.766 A:middle
and to review the
blur effect usage.

00:09:46.926 --> 00:09:50.756 A:middle
Now, blur is a great way to
include depth as well as,

00:09:50.806 --> 00:09:53.226 A:middle
you know, to provide
layering effect for your UIs.

00:09:53.386 --> 00:09:57.206 A:middle
However, with all great
things, they can cost more.

00:09:58.096 --> 00:10:01.196 A:middle
So, you'll want to review,
you know, all the animations


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:58.096 --> 00:10:01.196 A:middle
So, you'll want to review,
you know, all the animations

00:10:01.196 --> 00:10:03.476 A:middle
or frame changes that you're
doing behind your blur and try

00:10:03.476 --> 00:10:05.246 A:middle
to minimize them
as much as possible

00:10:05.246 --> 00:10:06.946 A:middle
so that you can provide
your users

00:10:06.946 --> 00:10:10.126 A:middle
with a great UI while
helping them conserve their

00:10:10.126 --> 00:10:11.326 A:middle
battery life.

00:10:14.436 --> 00:10:16.986 A:middle
So, that pretty much
sums up our recap.

00:10:17.596 --> 00:10:20.536 A:middle
If you have any questions
about what I just, you know,

00:10:20.536 --> 00:10:22.416 A:middle
breezed through,
feel free to swing

00:10:22.416 --> 00:10:23.756 A:middle
by our labs this afternoon.

00:10:23.846 --> 00:10:25.836 A:middle
You know, once again,
we have one at 2 o'clock

00:10:25.836 --> 00:10:28.096 A:middle
in the Core OS Lab
and tomorrow at 3:15.

00:10:28.636 --> 00:10:31.186 A:middle
Anthony, myself, as well as
our colleagues, will be happy

00:10:31.186 --> 00:10:34.546 A:middle
to answer any questions that you
may have or check out the video

00:10:34.546 --> 00:10:35.386 A:middle
when it becomes available.

00:10:35.656 --> 00:10:38.926 A:middle
Anthony really goes into great
detail on all these things

00:10:38.926 --> 00:10:41.746 A:middle
that I just, you know,
quickly talked about.

00:10:43.776 --> 00:10:46.536 A:middle
So, to begin our session
today, I want to start

00:10:46.536 --> 00:10:48.456 A:middle
by talking about networking.

00:10:48.856 --> 00:10:55.066 A:middle
We live in a time where
the way we get information,

00:10:55.176 --> 00:10:57.786 A:middle
the way we shop, the way
we connect with friends,

00:10:58.236 --> 00:11:01.576 A:middle
or the way we backup important
data, or, you know, memories,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.236 --> 00:11:01.576 A:middle
or the way we backup important
data, or, you know, memories,

00:11:02.016 --> 00:11:03.096 A:middle
is really through networking.

00:11:03.836 --> 00:11:07.486 A:middle
I go as far as to say that
there's probably very few apps

00:11:07.976 --> 00:11:10.576 A:middle
in the App Store that
don't do any networking

00:11:10.576 --> 00:11:14.086 A:middle
and so it's important that we
discuss how we can do networking

00:11:14.566 --> 00:11:15.906 A:middle
in an energy efficient way.

00:11:16.906 --> 00:11:19.516 A:middle
So, let's start with a
very generic example.

00:11:20.046 --> 00:11:23.976 A:middle
Let's say today your requirement
is to develop an application

00:11:24.096 --> 00:11:25.656 A:middle
to send some data
to your servers.

00:11:27.356 --> 00:11:30.856 A:middle
So, an easy way to do this
and the most intuitive way

00:11:30.856 --> 00:11:34.366 A:middle
to do this would be, right when
data comes we'll, you know,

00:11:34.366 --> 00:11:36.536 A:middle
go ahead and send it off
to the servers, right?

00:11:36.536 --> 00:11:40.256 A:middle
So, as you can see as data is
coming in, we're firing up,

00:11:40.376 --> 00:11:42.296 A:middle
we're setting up connections,
sending into our servers.

00:11:43.156 --> 00:11:45.076 A:middle
Let's see what the energy cost
looks like for doing this.

00:11:47.716 --> 00:11:50.126 A:middle
So, here you have a couple of
data syncs coming in, right?

00:11:50.486 --> 00:11:53.956 A:middle
And let's assume that the data
that you're sending is small

00:11:54.756 --> 00:11:57.196 A:middle
so you think to yourself, "Well,
I'm just, you know, sending,

00:11:57.666 --> 00:12:00.156 A:middle
like, small packets up to our
server every once in a while.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.666 --> 00:12:00.156 A:middle
like, small packets up to our
server every once in a while.

00:12:00.156 --> 00:12:03.386 A:middle
It's probably not going to
use that much energy, right?"

00:12:04.716 --> 00:12:07.456 A:middle
Well, given what we just
talked about in overhead costs,

00:12:09.036 --> 00:12:11.346 A:middle
by default, the radios
on our system are idle

00:12:11.346 --> 00:12:13.876 A:middle
and the radios are the resources
that you're going to utilize

00:12:13.876 --> 00:12:16.716 A:middle
to send your network, to send
your packets to your servers.

00:12:17.636 --> 00:12:21.176 A:middle
So, in order to send these data
packets, the system has to bring

00:12:21.176 --> 00:12:25.116 A:middle
up the radios, keep the radios
up while you're doing your work.

00:12:25.646 --> 00:12:27.776 A:middle
And then, if you take a look
at the transfers happening

00:12:27.776 --> 00:12:30.756 A:middle
to your left, you'll see
that, you know, like we said,

00:12:31.006 --> 00:12:32.436 A:middle
even though there are times

00:12:32.436 --> 00:12:34.486 A:middle
where you're not actually
sending the packets out,

00:12:34.936 --> 00:12:36.596 A:middle
the radios are actually kept up.

00:12:37.386 --> 00:12:39.196 A:middle
This is the overhead cost
that we talked about earlier.

00:12:39.486 --> 00:12:41.986 A:middle
And then, if you look at
the transfer on your right,

00:12:41.986 --> 00:12:44.886 A:middle
even though you're only
sending one small data packet,

00:12:45.956 --> 00:12:48.056 A:middle
you're still paying the
cost to bring the radios

00:12:48.136 --> 00:12:50.956 A:middle
up for you to do that, right?

00:12:50.956 --> 00:12:54.166 A:middle
So, there's a big overhead
cost in using the radios.

00:12:54.796 --> 00:12:57.756 A:middle
Now, not to complicate
things, but depending

00:12:57.756 --> 00:13:00.166 A:middle
on which technology you're
using to do your transfers,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:57.756 --> 00:13:00.166 A:middle
on which technology you're
using to do your transfers,

00:13:00.536 --> 00:13:02.676 A:middle
the cost of both
the time out as well

00:13:02.676 --> 00:13:04.336 A:middle
as the energy used
can vary greatly.

00:13:04.416 --> 00:13:06.446 A:middle
All right, to give
you guys an idea,

00:13:07.036 --> 00:13:10.236 A:middle
if you're simply web browsing
constantly on an iPhone 5S,

00:13:11.056 --> 00:13:12.886 A:middle
if you're doing it
through Wi-Fi,

00:13:12.886 --> 00:13:14.616 A:middle
your battery will
last about 10 hours.

00:13:15.406 --> 00:13:17.126 A:middle
However, if you're
doing this through 3G,

00:13:17.126 --> 00:13:20.826 A:middle
it will only last you about 8.

00:13:21.106 --> 00:13:24.206 A:middle
So, the technology you utilize

00:13:24.206 --> 00:13:27.206 A:middle
to do your transfers will
affect the energy used

00:13:27.596 --> 00:13:30.676 A:middle
in your network transactions,
right, whether you're on Wi-Fi,

00:13:30.986 --> 00:13:35.526 A:middle
or cellular, or even, you know,
different cellular carriers kind

00:13:35.526 --> 00:13:37.546 A:middle
of impacts the energy you
use through your networking.

00:13:38.796 --> 00:13:42.646 A:middle
Not only that, your network
condition, your signal strength

00:13:42.646 --> 00:13:46.306 A:middle
as well as your network
throughput can impact the time

00:13:46.306 --> 00:13:49.136 A:middle
it takes as well as the
energy we use to send off

00:13:49.136 --> 00:13:50.096 A:middle
to your network transactions.

00:13:50.756 --> 00:13:52.986 A:middle
Networking can be
quite expensive

00:13:53.066 --> 00:13:54.456 A:middle
if not done intelligently.

00:13:55.166 --> 00:13:56.506 A:middle
So, let's go back
and take a look

00:13:56.506 --> 00:13:59.806 A:middle
at our simple web server
example, and this time instead

00:13:59.806 --> 00:14:03.656 A:middle
of sending in one at a time,
let's implement a simple buffer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.806 --> 00:14:03.656 A:middle
of sending in one at a time,
let's implement a simple buffer.

00:14:04.206 --> 00:14:10.906 A:middle
So, let's buffer the data on
our device before we send it.

00:14:11.176 --> 00:14:14.456 A:middle
Now, instead of paying the
overhead cost to send each

00:14:14.456 --> 00:14:17.086 A:middle
of those packets, your energy
will look something more

00:14:17.086 --> 00:14:18.026 A:middle
like this.

00:14:18.656 --> 00:14:22.236 A:middle
As you can see while
you're accumulating data,

00:14:22.716 --> 00:14:24.516 A:middle
your radio-the radios
get to stay idle

00:14:24.516 --> 00:14:26.176 A:middle
and so you're not
paying the overhead cost.

00:14:26.406 --> 00:14:29.106 A:middle
And once you do need to
send a group of data,

00:14:29.106 --> 00:14:31.276 A:middle
although you do still need
to bring up the radios,

00:14:31.956 --> 00:14:33.736 A:middle
it's not-it's a lot more
worth it now, right?

00:14:33.736 --> 00:14:36.636 A:middle
You're sending a lot more
data while paying less

00:14:36.676 --> 00:14:39.666 A:middle
of an overhead cost
or actually-sorry,

00:14:39.666 --> 00:14:41.416 A:middle
you're sending the
same amount of data

00:14:41.416 --> 00:14:44.336 A:middle
but paying less overhead cost.

00:14:44.336 --> 00:14:45.276 A:middle
So, it's important to know

00:14:45.276 --> 00:14:48.346 A:middle
that the way you schedule your
network operations can greatly

00:14:48.346 --> 00:14:50.516 A:middle
impact the energy use
in your application.

00:14:52.166 --> 00:14:54.026 A:middle
So, let's think about
how we can apply some

00:14:54.026 --> 00:14:55.686 A:middle
of the principles Anthony
talked about earlier

00:14:56.196 --> 00:14:58.446 A:middle
to the networking you're
doing in your application

00:14:58.536 --> 00:15:01.476 A:middle
to help reduce this energy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.536 --> 00:15:01.476 A:middle
to help reduce this energy.

00:15:01.476 --> 00:15:04.346 A:middle
So, for doing it more
efficiently, we just looked

00:15:04.346 --> 00:15:07.176 A:middle
at the importance of coalescing
your transactions, right?

00:15:07.176 --> 00:15:10.786 A:middle
By doing more at once, you're
paying less of an overhead cost

00:15:11.186 --> 00:15:13.266 A:middle
and you're reducing
the energy used

00:15:13.406 --> 00:15:16.216 A:middle
by sending the same
amount of packets.

00:15:17.386 --> 00:15:19.676 A:middle
Now, for doing it less
and never, it's simple.

00:15:20.456 --> 00:15:21.806 A:middle
Cut down your transfers, right?

00:15:21.896 --> 00:15:25.216 A:middle
The best way to conserve
energy is to do less work.

00:15:25.536 --> 00:15:27.726 A:middle
So think about you-think
about creative ways

00:15:27.726 --> 00:15:30.576 A:middle
that you can reduce the data
sizes in your application.

00:15:31.226 --> 00:15:33.086 A:middle
If you're sending media-like,

00:15:33.086 --> 00:15:36.366 A:middle
let's say you're uploading a
photo to a social media website.

00:15:37.086 --> 00:15:40.136 A:middle
And, you know, if the photo
is never going to be displayed

00:15:40.136 --> 00:15:44.096 A:middle
at its full quality, consider
reducing the image quality first

00:15:44.356 --> 00:15:45.796 A:middle
before you send it
out to your servers.

00:15:46.616 --> 00:15:48.566 A:middle
Compression is also
another easy way.

00:15:48.566 --> 00:15:49.436 A:middle
If you're sending files,

00:15:49.776 --> 00:15:52.226 A:middle
compress that file before you
send it up to your servers

00:15:52.656 --> 00:15:54.636 A:middle
to reduce the amount of
data that you're sending.

00:15:55.596 --> 00:15:57.056 A:middle
Now, on top of reducing
data sizes,

00:15:57.596 --> 00:16:00.636 A:middle
make sure you think about-make
sure you try to avoid,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.596 --> 00:16:00.636 A:middle
make sure you think about-make
sure you try to avoid,

00:16:00.636 --> 00:16:02.406 A:middle
as much as you can,
redundant transfers, right?

00:16:02.406 --> 00:16:04.446 A:middle
And make sure you
cache information

00:16:04.446 --> 00:16:05.466 A:middle
that you've already downloaded.

00:16:06.236 --> 00:16:08.056 A:middle
This will not only
help you save energy

00:16:08.056 --> 00:16:10.216 A:middle
but it can also improve
the performance

00:16:10.216 --> 00:16:11.676 A:middle
of your application, right?

00:16:11.676 --> 00:16:13.876 A:middle
Since the next time you need an
asset, you don't have to wait

00:16:13.876 --> 00:16:15.016 A:middle
for it to be downloaded again.

00:16:15.016 --> 00:16:17.336 A:middle
It will already be
readily available.

00:16:18.236 --> 00:16:20.116 A:middle
Also, use resumable
transactions.

00:16:20.846 --> 00:16:24.726 A:middle
Especially on mobile devices,
network connections can go in

00:16:24.726 --> 00:16:26.016 A:middle
and out fairly frequent,

00:16:26.576 --> 00:16:28.786 A:middle
so you want to make sure
you're using transactions

00:16:28.786 --> 00:16:30.166 A:middle
that can be paused and resumed.

00:16:30.166 --> 00:16:33.236 A:middle
So, if you detect the network
condition is bad, you can pause,

00:16:33.406 --> 00:16:35.816 A:middle
and you don't have to
resend those chunks of data

00:16:35.816 --> 00:16:39.476 A:middle
that was lost when you
do get to send them.

00:16:39.556 --> 00:16:43.066 A:middle
Now, finally, with networking
conditions, you won't-you want

00:16:43.066 --> 00:16:45.466 A:middle
to make sure that you handle
your network errors properly,

00:16:45.656 --> 00:16:45.776 A:middle
right?

00:16:45.776 --> 00:16:48.026 A:middle
And make sure you have good
timeout or retry policies.

00:16:48.026 --> 00:16:51.076 A:middle
It does not make any sense
for you to continuously try

00:16:51.076 --> 00:16:53.796 A:middle
to send data to your
servers when you can't.

00:16:54.266 --> 00:16:57.706 A:middle
So, these are just some
of the things to consider

00:16:57.816 --> 00:16:59.776 A:middle
on how you can reduce
the data sizes

00:16:59.776 --> 00:17:01.096 A:middle
of your network transactions.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.776 --> 00:17:01.096 A:middle
of your network transactions.

00:17:02.616 --> 00:17:04.836 A:middle
Finally, for doing
it at a better time,

00:17:05.266 --> 00:17:06.816 A:middle
we have consider tolerance.

00:17:07.366 --> 00:17:08.326 A:middle
Basically, you want

00:17:08.326 --> 00:17:10.476 A:middle
to understand the requirements
of your application.

00:17:10.606 --> 00:17:13.266 A:middle
Is this network-does this
networking transaction need

00:17:13.266 --> 00:17:14.276 A:middle
to happen immediately, right?

00:17:14.616 --> 00:17:19.536 A:middle
As we've just looked at earlier,
the technology we use as well

00:17:19.536 --> 00:17:22.566 A:middle
as the signal conditions can
greatly impact the energy use

00:17:22.566 --> 00:17:24.766 A:middle
of your application when you're
doing those transactions.

00:17:25.126 --> 00:17:28.086 A:middle
So, if the-if the
conditions aren't ideal,

00:17:28.086 --> 00:17:30.836 A:middle
can we wait on this
network transaction?

00:17:30.836 --> 00:17:34.356 A:middle
You know, this is especially
important for larger downloads

00:17:34.606 --> 00:17:38.176 A:middle
such as, let's say, you're
backing up a user's data or,

00:17:38.326 --> 00:17:39.516 A:middle
you know, you're
downloading a movie

00:17:39.516 --> 00:17:42.626 A:middle
that probably is just
purely meant to be put

00:17:42.626 --> 00:17:44.026 A:middle
in the user's media library.

00:17:45.096 --> 00:17:47.706 A:middle
Those things won't have
an immediate user impact

00:17:48.336 --> 00:17:50.606 A:middle
and so consider doing
those at a better time.

00:17:51.236 --> 00:17:53.406 A:middle
And we'll talk about
NSURLSession more later

00:17:53.406 --> 00:17:57.496 A:middle
on an easy way to do this,
but let's take a look back

00:17:57.496 --> 00:17:59.636 A:middle
at our example first to
see how we can apply some

00:17:59.636 --> 00:18:01.656 A:middle
of these principles to
help reduce the energy


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:59.636 --> 00:18:01.656 A:middle
of these principles to
help reduce the energy

00:18:01.966 --> 00:18:02.976 A:middle
of your network.

00:18:03.246 --> 00:18:06.256 A:middle
So, we already determined
that by buffering your data,

00:18:06.516 --> 00:18:08.116 A:middle
you greatly reduce
the overhead cost.

00:18:08.236 --> 00:18:11.496 A:middle
Now, let's implement a simple
check on the device to make sure

00:18:11.496 --> 00:18:13.186 A:middle
that the data is
actually relevant.

00:18:13.426 --> 00:18:16.946 A:middle
Let's say you simply diff the
current data versus the previous

00:18:16.946 --> 00:18:19.836 A:middle
to make sure that something has
actually changed before you send

00:18:19.836 --> 00:18:20.616 A:middle
it off, right?

00:18:20.916 --> 00:18:25.126 A:middle
Now, I have been able to reduce
the data size of my transfer

00:18:25.126 --> 00:18:27.246 A:middle
and finally, let's make sure

00:18:27.436 --> 00:18:30.316 A:middle
that the signal conditions are
good before we send it off,

00:18:30.506 --> 00:18:30.646 A:middle
you know?

00:18:30.646 --> 00:18:32.186 A:middle
And then, obviously,
here I'm assuming

00:18:32.186 --> 00:18:34.466 A:middle
that this data is not
needed immediately,

00:18:34.566 --> 00:18:37.196 A:middle
so there is some
tolerance before I need

00:18:37.236 --> 00:18:38.456 A:middle
to do this transaction.

00:18:39.126 --> 00:18:41.486 A:middle
Now, by implementing these
three things, I've been able

00:18:41.486 --> 00:18:44.896 A:middle
to save a lot of energy while
still providing the data

00:18:44.896 --> 00:18:46.446 A:middle
that needs to be provided.

00:18:47.956 --> 00:18:51.506 A:middle
So by now, I mean, a lot of you
guys are probably asking like,

00:18:51.506 --> 00:18:52.706 A:middle
"This is not easy at all, right?

00:18:52.706 --> 00:18:53.976 A:middle
Especially with signal
conditions,

00:18:53.976 --> 00:18:56.856 A:middle
especially with retries-like,
this is not an easy thing

00:18:56.856 --> 00:18:58.956 A:middle
to implement and it kind
of goes way over my head."

00:18:59.416 --> 00:19:02.466 A:middle
Well, this is where I'll
talk about NSURLSession.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.416 --> 00:19:02.466 A:middle
Well, this is where I'll
talk about NSURLSession.

00:19:02.656 --> 00:19:05.686 A:middle
This is an API that will allow
you to easily integrate pause

00:19:05.686 --> 00:19:09.686 A:middle
and resume as well as implement
caching with NSURLCaching.

00:19:11.256 --> 00:19:15.466 A:middle
Now, one of the good
features in this API is,

00:19:15.466 --> 00:19:16.646 A:middle
as Anthony has mentioned
earlier,

00:19:16.646 --> 00:19:19.256 A:middle
the ability to create
background sessions.

00:19:20.146 --> 00:19:22.846 A:middle
So, with background
sessions, you're actually able

00:19:22.846 --> 00:19:24.656 A:middle
to do your downloads
out of process.

00:19:25.446 --> 00:19:28.926 A:middle
And this is especially
important for iOS apps

00:19:28.976 --> 00:19:32.946 A:middle
because your application won't
get to run all the time, right?

00:19:32.946 --> 00:19:36.226 A:middle
So with background sessions,
you no longer have to rush

00:19:36.226 --> 00:19:37.956 A:middle
to download everything
you want immediately.

00:19:38.556 --> 00:19:40.556 A:middle
You just simply-you can
create a background session

00:19:40.556 --> 00:19:42.536 A:middle
and allow the system
to do that for you

00:19:42.536 --> 00:19:47.146 A:middle
and your app will be alerted
whenever the transactions are

00:19:47.146 --> 00:19:48.606 A:middle
done or if it errors out.

00:19:49.686 --> 00:19:54.916 A:middle
Now, within iOS, when your
applications are moved

00:19:54.916 --> 00:19:55.576 A:middle
to the background,

00:19:56.646 --> 00:19:59.436 A:middle
these background sessions will
actually also automatically

00:19:59.436 --> 00:20:02.976 A:middle
opt-in to throughput monitoring
as well as automatic retries.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.436 --> 00:20:02.976 A:middle
opt-in to throughput monitoring
as well as automatic retries.

00:20:03.336 --> 00:20:04.236 A:middle
So, those are some things

00:20:04.236 --> 00:20:07.346 A:middle
that will be automatically
taken care of for you in iOS.

00:20:07.346 --> 00:20:11.726 A:middle
Now, one of the features that
Anthony mentioned, and I'm going

00:20:11.726 --> 00:20:14.296 A:middle
to once again stress the
importance of-for you

00:20:14.296 --> 00:20:17.936 A:middle
to consider using this as the
discretionary flag, right?

00:20:17.936 --> 00:20:20.186 A:middle
You can set for your
background sessions,

00:20:20.476 --> 00:20:22.336 A:middle
you can set it to
be discretionary.

00:20:22.596 --> 00:20:25.316 A:middle
And by doing this, you're
basically telling the system,

00:20:25.316 --> 00:20:27.496 A:middle
this is one of those
"let's do it

00:20:27.496 --> 00:20:29.416 A:middle
at a better time"
type transactions.

00:20:30.726 --> 00:20:32.546 A:middle
The system will automatically
know

00:20:32.696 --> 00:20:34.236 A:middle
that this isn't needed
immediately

00:20:34.236 --> 00:20:36.416 A:middle
and find the most
power optimal time

00:20:36.976 --> 00:20:38.706 A:middle
to schedule your
network transactions.

00:20:39.256 --> 00:20:41.676 A:middle
And all of this is transparent
to your app, so you don't need

00:20:41.676 --> 00:20:42.616 A:middle
to know anything about it.

00:20:42.876 --> 00:20:45.686 A:middle
You'll simply get alerted
when the transaction is done

00:20:45.816 --> 00:20:47.416 A:middle
or if it errors out, right?

00:20:47.416 --> 00:20:50.026 A:middle
Anthony also mentioned
that you can adjust the

00:20:50.026 --> 00:20:50.756 A:middle
scheduling window.

00:20:50.756 --> 00:20:53.836 A:middle
You can give the system
a certain amount of time

00:20:54.116 --> 00:20:56.106 A:middle
that you want this
transaction to occur.

00:20:56.996 --> 00:20:59.836 A:middle
And, generally, you want to
set it to be over 12 hours

00:20:59.836 --> 00:21:02.946 A:middle
to allow the system to actually
be able to schedule it since,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.836 --> 00:21:02.946 A:middle
to allow the system to actually
be able to schedule it since,

00:21:02.946 --> 00:21:04.896 A:middle
you know, networking
connections can go in and out

00:21:04.896 --> 00:21:06.816 A:middle
and the user can be
using their devices.

00:21:07.156 --> 00:21:09.466 A:middle
But, you know, make sure you
set this to over 12 hours

00:21:09.726 --> 00:21:11.486 A:middle
and the system will do its best

00:21:11.486 --> 00:21:13.186 A:middle
to schedule your
network transaction

00:21:13.606 --> 00:21:14.466 A:middle
within this time window.

00:21:14.966 --> 00:21:17.276 A:middle
Now, if it is unable to,
an error will be thrown

00:21:17.276 --> 00:21:18.726 A:middle
and then you can
react accordingly.

00:21:18.896 --> 00:21:20.776 A:middle
For instance, you
know, immediately try

00:21:20.776 --> 00:21:23.436 A:middle
to do your networking
transactions or, you know,

00:21:23.576 --> 00:21:26.746 A:middle
once again schedule another one,
giving, you know, another window

00:21:26.886 --> 00:21:30.276 A:middle
for you to wait if this
transaction can happen

00:21:30.276 --> 00:21:30.906 A:middle
at a later time.

00:21:32.296 --> 00:21:36.006 A:middle
So, here is a code snippet
of what this may look

00:21:36.006 --> 00:21:39.296 A:middle
like in your application and
it's quite simple, right?

00:21:39.296 --> 00:21:42.656 A:middle
All you have to do is make sure
you set up your configuration.

00:21:43.216 --> 00:21:46.336 A:middle
So, here I have a background
session configuration setup.

00:21:46.996 --> 00:21:49.336 A:middle
And, you know, here
I can set some flags.

00:21:49.336 --> 00:21:51.986 A:middle
For instance, I only want to do
this when users are connected

00:21:51.986 --> 00:21:55.356 A:middle
to Wi-Fi because I know that
that's more power efficient.

00:21:55.436 --> 00:21:57.346 A:middle
And also I want to
save my user's money

00:21:57.526 --> 00:21:59.526 A:middle
because obviously
data costs money.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:00.916 --> 00:22:03.376 A:middle
Then we set our discretionary
flag, right?

00:22:03.376 --> 00:22:05.826 A:middle
So this is where I tell
the system, "You take care

00:22:05.826 --> 00:22:08.606 A:middle
of downloading this at
whatever time you think is best.

00:22:08.676 --> 00:22:09.626 A:middle
Just tell me when it's done."

00:22:10.446 --> 00:22:13.366 A:middle
And then I say, "I want it
within the next 18 hours."

00:22:15.306 --> 00:22:17.236 A:middle
Now, you just have to
create your session

00:22:17.316 --> 00:22:19.066 A:middle
with the configuration
that we just created.

00:22:19.766 --> 00:22:21.506 A:middle
Create task and send it off.

00:22:21.946 --> 00:22:22.336 A:middle
That's it.

00:22:22.556 --> 00:22:24.816 A:middle
The system will now do all
the downloading for you

00:22:25.346 --> 00:22:28.026 A:middle
in an energy efficient
way and all

00:22:28.026 --> 00:22:29.806 A:middle
of this is transparent
to your application.

00:22:30.716 --> 00:22:33.096 A:middle
So, this is really
a great API for you

00:22:33.096 --> 00:22:34.846 A:middle
to do your networking
transactions

00:22:34.846 --> 00:22:36.056 A:middle
in an energy efficient way.

00:22:36.366 --> 00:22:39.366 A:middle
For more information, you
know, check out the "What's New

00:22:39.366 --> 00:22:43.066 A:middle
in Foundation Networking"
video when it becomes available

00:22:43.066 --> 00:22:44.796 A:middle
or swing by the networking labs.

00:22:45.766 --> 00:22:48.256 A:middle
But let's sum up
networking, right?

00:22:48.376 --> 00:22:50.936 A:middle
Essentially, networking
comes down to these three Ts,

00:22:51.846 --> 00:22:53.536 A:middle
all right-to coalesce
your transactions,

00:22:54.136 --> 00:22:58.746 A:middle
to cutdown your transfers, and
to consider tolerance, right?

00:22:58.746 --> 00:23:00.646 A:middle
So keep these three
things in mind


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:58.746 --> 00:23:00.646 A:middle
So keep these three
things in mind

00:23:00.646 --> 00:23:03.116 A:middle
as you are designing
how you're going

00:23:03.116 --> 00:23:04.516 A:middle
to schedule your
networking operations

00:23:04.766 --> 00:23:07.496 A:middle
to minimize the energy
use of networking.

00:23:08.656 --> 00:23:12.706 A:middle
So, we talked a lot about
different techniques and,

00:23:12.836 --> 00:23:14.806 A:middle
you know, APIs for
you to be able

00:23:14.926 --> 00:23:17.156 A:middle
to reduce the energy
use of your application.

00:23:18.016 --> 00:23:20.606 A:middle
How do you know that you've
actually achieved that

00:23:20.746 --> 00:23:22.306 A:middle
or how can you actually measure

00:23:22.306 --> 00:23:24.246 A:middle
and profile the energy
use of your application?

00:23:24.696 --> 00:23:26.356 A:middle
I hope that's the next
question that you've thought

00:23:26.356 --> 00:23:27.866 A:middle
of because that's what
we're going to talk about.

00:23:28.856 --> 00:23:33.316 A:middle
So, on for OS X developers,

00:23:33.446 --> 00:23:36.836 A:middle
you could do this directly
through Xcode, right?

00:23:36.836 --> 00:23:38.316 A:middle
In the Xcode debugger,
as you can see,

00:23:38.316 --> 00:23:40.846 A:middle
there is this little
energy section here

00:23:40.846 --> 00:23:42.486 A:middle
that can really help
you kind of understand,

00:23:42.486 --> 00:23:45.506 A:middle
at least to some
extent, the energy impact

00:23:45.506 --> 00:23:47.076 A:middle
of your application
as it's running.

00:23:49.306 --> 00:23:51.656 A:middle
For iOS developers,
however, you will not be able

00:23:51.656 --> 00:23:53.486 A:middle
to use Xcode to do this.

00:23:54.676 --> 00:23:56.476 A:middle
What you will be able to do is

00:23:56.476 --> 00:24:00.306 A:middle
to pre-record a trace of-you
know, let's say you want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.476 --> 00:24:00.306 A:middle
to pre-record a trace of-you
know, let's say you want

00:24:00.306 --> 00:24:02.436 A:middle
to profile some activity,
you can record a trace

00:24:02.696 --> 00:24:05.796 A:middle
of the system's energy usage as
well as some other information,

00:24:06.166 --> 00:24:09.056 A:middle
and then you can use the
Energy Diagnostics tools

00:24:09.056 --> 00:24:12.856 A:middle
and instruments to help you
visualize what's going on.

00:24:13.856 --> 00:24:17.456 A:middle
To record this trace, simply
navigate to the Instruments menu

00:24:17.946 --> 00:24:20.056 A:middle
and this is in Settings
Developer menu.

00:24:20.126 --> 00:24:22.106 A:middle
You'll see an Instruments
menu that you can select

00:24:22.596 --> 00:24:25.126 A:middle
and simply click Energy.

00:24:25.616 --> 00:24:27.596 A:middle
And, you know, selectively
you can choose

00:24:27.596 --> 00:24:31.506 A:middle
to record networking information
as well and just hit Start.

00:24:31.996 --> 00:24:34.186 A:middle
Now the system will begin
recording your traces

00:24:34.496 --> 00:24:36.796 A:middle
and you can just simply navigate
through your application,

00:24:37.046 --> 00:24:39.456 A:middle
do whatever work you
wanted to do to profile it.

00:24:39.456 --> 00:24:42.166 A:middle
And then when you're done,
come back to this menu

00:24:42.226 --> 00:24:43.746 A:middle
and hit Stop Recording.

00:24:45.176 --> 00:24:47.076 A:middle
Now your traces are recorded.

00:24:47.076 --> 00:24:51.836 A:middle
I do want to mention there's
a little subtext right there.

00:24:51.836 --> 00:24:53.526 A:middle
I don't know if those of you
in the back can see this,

00:24:53.766 --> 00:24:57.376 A:middle
but basically, we'll only
save one trace at a time.

00:24:57.896 --> 00:25:00.876 A:middle
So, if you click
Start Recording again,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:57.896 --> 00:25:00.876 A:middle
So, if you click
Start Recording again,

00:25:01.276 --> 00:25:03.796 A:middle
your previous trace
will be erased.

00:25:04.096 --> 00:25:04.996 A:middle
So, keep that in mind.

00:25:05.896 --> 00:25:07.576 A:middle
Now, you have your
traces recorded.

00:25:07.576 --> 00:25:09.556 A:middle
Simply connect your
device, you know,

00:25:09.556 --> 00:25:11.796 A:middle
to your Macs, to your laptops.

00:25:11.796 --> 00:25:15.756 A:middle
And then through the Instruments
Energy Diagnostics menu,

00:25:15.836 --> 00:25:19.076 A:middle
you just have to click
Import Data from device.

00:25:19.186 --> 00:25:22.286 A:middle
That's what that, you know,
highlighted blue selection is.

00:25:22.716 --> 00:25:25.506 A:middle
And then your traces will
be-you'll be able to pull

00:25:25.506 --> 00:25:27.386 A:middle
up your traces on instruments

00:25:27.496 --> 00:25:28.906 A:middle
with the Energy Diagnostics
tool.

00:25:29.446 --> 00:25:32.286 A:middle
So, I'm going to go ahead

00:25:32.286 --> 00:25:37.536 A:middle
and show you guys what this
may look like for an iOS app.

00:25:37.786 --> 00:25:40.316 A:middle
So, this should help
familiarize you guys

00:25:40.316 --> 00:25:44.536 A:middle
with the energy diagnostics
tool that we have to help you,

00:25:44.966 --> 00:25:47.436 A:middle
you know, kind of visualize
the energy impact of your apps.

00:25:48.226 --> 00:25:51.176 A:middle
So, as you can see here
I prerecorded two traces

00:25:51.276 --> 00:25:53.436 A:middle
that I'm going to
show, but let's focus

00:25:53.436 --> 00:25:54.296 A:middle
on this first one here.

00:25:55.776 --> 00:26:00.376 A:middle
So, up top of energy diagnostics
we have energy used, right?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:55.776 --> 00:26:00.376 A:middle
So, up top of energy diagnostics
we have energy used, right?

00:26:00.376 --> 00:26:03.006 A:middle
And this really tells
you the system energy

00:26:03.296 --> 00:26:05.026 A:middle
as your application was running.

00:26:05.906 --> 00:26:08.006 A:middle
And if you look at the
details page on the bottom,

00:26:08.176 --> 00:26:11.476 A:middle
it might be hard to see,
so, let me see if I can zoom

00:26:11.476 --> 00:26:13.376 A:middle
in on this-Great,there you go.

00:26:14.526 --> 00:26:16.786 A:middle
So, you'll see that
energy used is, you know,

00:26:16.786 --> 00:26:19.756 A:middle
really an instantaneous
reading based on one to 20.

00:26:20.266 --> 00:26:22.256 A:middle
Twenty means you're
using a lot of energy

00:26:22.496 --> 00:26:24.886 A:middle
and one means you're
using very little energy.

00:26:24.946 --> 00:26:32.306 A:middle
So, you can see as I've recorded
this trace about-for about,

00:26:32.306 --> 00:26:35.906 A:middle
let's see, 13 minutes-you'll
be able to see that energy is,

00:26:35.906 --> 00:26:37.146 A:middle
you know, generally pretty high.

00:26:37.416 --> 00:26:40.276 A:middle
What I'm doing here is
every about 30 seconds,

00:26:40.276 --> 00:26:42.336 A:middle
I'm firing off a network
connection, right?

00:26:42.516 --> 00:26:45.426 A:middle
Here to the Connections tab,
you'll see all your connections.

00:26:45.846 --> 00:26:48.336 A:middle
And you can actually even
see CPU activity, right?

00:26:48.336 --> 00:26:51.566 A:middle
So, CPU is fairly active since
every 30 seconds I'm firing

00:26:51.566 --> 00:26:52.726 A:middle
up network connection.

00:26:53.506 --> 00:26:56.406 A:middle
Now, to help you better debug,

00:26:56.556 --> 00:26:58.386 A:middle
you can also-you
also get information

00:26:58.386 --> 00:26:59.626 A:middle
such as network activity.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:00.166 --> 00:27:01.536 A:middle
So, you'll be able
to see, you know,

00:27:01.916 --> 00:27:04.296 A:middle
how many bytes you've
transferred

00:27:04.296 --> 00:27:07.076 A:middle
from your application,
what technology was going

00:27:07.076 --> 00:27:10.766 A:middle
through and, you know-let's
see, as you can see here,

00:27:10.956 --> 00:27:11.786 A:middle
you have your cellular.

00:27:11.786 --> 00:27:12.656 A:middle
You have Wi-Fi.

00:27:12.886 --> 00:27:13.936 A:middle
All right.

00:27:14.526 --> 00:27:16.586 A:middle
Let's come back out.

00:27:17.336 --> 00:27:18.766 A:middle
And then, we also
give you information

00:27:18.766 --> 00:27:20.106 A:middle
such as Display Brightness.

00:27:20.816 --> 00:27:23.486 A:middle
Now Display is also an area
that can use up a lot of energy

00:27:23.486 --> 00:27:25.916 A:middle
so you're-so, if your
application is, you know,

00:27:25.916 --> 00:27:28.816 A:middle
pushing the display up all the
way to its full brightness,

00:27:28.816 --> 00:27:31.166 A:middle
make sure you disable that
feature when it's not needed.

00:27:31.856 --> 00:27:34.846 A:middle
But here my display is
about 20 percent brightness,

00:27:35.166 --> 00:27:38.066 A:middle
might-and we give you
sleep-Sleep/Wake information

00:27:38.216 --> 00:27:39.156 A:middle
for your iOS devices.

00:27:39.156 --> 00:27:43.806 A:middle
So, if your device was asleep,
we'll still be able to show

00:27:43.806 --> 00:27:45.416 A:middle
that here and it will
look something more

00:27:45.416 --> 00:27:47.336 A:middle
like the dark red area here.

00:27:47.786 --> 00:27:50.276 A:middle
And then there's
Bluetooth, Wi-Fi and GPS.

00:27:50.476 --> 00:27:52.756 A:middle
Now these three are
purely on an on and off.

00:27:52.836 --> 00:27:57.866 A:middle
We only show you if
it's on or it's off.

00:27:58.946 --> 00:28:01.806 A:middle
So, this is energy diagnostics.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:58.946 --> 00:28:01.806 A:middle
So, this is energy diagnostics.

00:28:01.806 --> 00:28:05.436 A:middle
It's really a good way for
you to see the system energy,

00:28:05.736 --> 00:28:07.206 A:middle
what was going on in the system

00:28:07.466 --> 00:28:09.056 A:middle
when your application
is running.

00:28:09.556 --> 00:28:12.486 A:middle
Now, just to show
guys the importance

00:28:12.486 --> 00:28:15.826 A:middle
of coalescing your transactions,
I've recorded a second trace

00:28:15.826 --> 00:28:18.306 A:middle
where instead of every 30
seconds, as you can see here,

00:28:18.406 --> 00:28:21.436 A:middle
I'm only firing up
connection every about two

00:28:21.436 --> 00:28:23.396 A:middle
to three minutes
here-two minutes.

00:28:24.106 --> 00:28:25.446 A:middle
So, as you can see, you know,

00:28:25.536 --> 00:28:27.196 A:middle
it looks like I'm
sending a lot more data.

00:28:28.476 --> 00:28:30.976 A:middle
However, if you look at
the energy usage here,

00:28:31.396 --> 00:28:35.066 A:middle
and let's zoom in,
our previous trace,

00:28:35.656 --> 00:28:40.216 A:middle
our energy usage was pretty
much stuck around-let's see

00:28:40.306 --> 00:28:44.656 A:middle
if can get this to zoom
in...there you go-stuck

00:28:44.656 --> 00:28:48.066 A:middle
around 14, 15, 16,
throughout the whole trace.

00:28:49.326 --> 00:28:53.126 A:middle
However, simply by
coalescing my transactions,

00:28:53.646 --> 00:28:58.416 A:middle
now the energy usage of my
application, there you go,

00:28:59.256 --> 00:29:01.946 A:middle
you begin to see
some like sixes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:59.256 --> 00:29:01.946 A:middle
you begin to see
some like sixes,

00:29:01.946 --> 00:29:03.596 A:middle
sevens, and eights, right?

00:29:03.596 --> 00:29:05.936 A:middle
And then when you are firing
your transactions, once again,

00:29:06.536 --> 00:29:09.896 A:middle
the energy usage will go
up to 14, you know, 16, 17,

00:29:10.196 --> 00:29:13.146 A:middle
but it comes back down again.

00:29:13.146 --> 00:29:15.666 A:middle
So, it is important to coalesce
your network transactions

00:29:16.396 --> 00:29:18.556 A:middle
and this is energy diagnostics.

00:29:18.686 --> 00:29:19.886 A:middle
It's really a great way for you

00:29:19.886 --> 00:29:22.616 A:middle
to visualize the energy
use of your application.

00:29:23.266 --> 00:29:26.796 A:middle
So, we're about half way through
our session and we talked

00:29:26.796 --> 00:29:29.486 A:middle
about energy efficient
networking, applying some

00:29:29.486 --> 00:29:30.986 A:middle
of the principles through
the networking you're doing

00:29:30.986 --> 00:29:31.716 A:middle
in your application.

00:29:32.646 --> 00:29:35.316 A:middle
We talked about how to
use energy diagnostics

00:29:35.316 --> 00:29:38.196 A:middle
to measure the energy
impact of your application

00:29:38.246 --> 00:29:41.196 A:middle
for iOS devices and iOS apps.

00:29:41.906 --> 00:29:46.216 A:middle
Next, I'm going to camp
on the idea of sleep.

00:29:47.016 --> 00:29:51.116 A:middle
Now, what I'm about to talk
about will be-the concepts

00:29:51.216 --> 00:29:55.146 A:middle
that I'm going to discuss can
be applied for OS X developers.

00:29:55.676 --> 00:29:58.436 A:middle
However, I just want to point
out that the technologies

00:29:58.436 --> 00:30:00.136 A:middle
as well as features I
will be discussing more


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.436 --> 00:30:00.136 A:middle
as well as features I
will be discussing more

00:30:00.136 --> 00:30:04.606 A:middle
in detail are primarily on iOS
devices, so keep that in mind.

00:30:05.426 --> 00:30:08.386 A:middle
Now, a wise man once said,
"To sleep is to prepare

00:30:08.386 --> 00:30:09.786 A:middle
for the longer journey ahead."

00:30:09.786 --> 00:30:13.396 A:middle
Now, that's true for you and me

00:30:13.956 --> 00:30:17.486 A:middle
and that's also true
for our devices.

00:30:18.386 --> 00:30:21.896 A:middle
The battery life of our
devices really depends on sleep.

00:30:22.336 --> 00:30:27.006 A:middle
Once again, to give you guys
an idea on our favorite 5

00:30:27.006 --> 00:30:32.126 A:middle
or 5S-iPhone 5S like we saw
earlier-if you're doing constant

00:30:32.126 --> 00:30:35.436 A:middle
web browsing, you know,
the screen is on, right?

00:30:35.436 --> 00:30:38.176 A:middle
The radios are up, you
know, you're downloading

00:30:38.426 --> 00:30:42.896 A:middle
and uploading packets, you know,
the display is-the display is

00:30:42.896 --> 00:30:45.876 A:middle
on like I said and you know
your device is fairly active

00:30:45.876 --> 00:30:46.736 A:middle
when you're doing these things.

00:30:47.156 --> 00:30:49.796 A:middle
So, you'll get about eight
to 10 hours of battery life.

00:30:50.366 --> 00:30:53.576 A:middle
However, let's say
instead of web browsing,

00:30:53.576 --> 00:30:55.316 A:middle
you're simply just playing
audio on your device.

00:30:56.126 --> 00:30:58.176 A:middle
All right now, the
screen is off,

00:30:58.176 --> 00:31:00.476 A:middle
the system is a lot
less, you know, busy.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.176 --> 00:31:00.476 A:middle
the system is a lot
less, you know, busy.

00:31:00.476 --> 00:31:04.076 A:middle
It's probably doing some audio
packet audio-it's probably

00:31:04.356 --> 00:31:07.136 A:middle
decoding some audio packets,
running those to your speakers,

00:31:07.136 --> 00:31:09.706 A:middle
but it's fairly idle,
so, you know,

00:31:09.706 --> 00:31:11.166 A:middle
we get about 40 hours
of battery life.

00:31:11.956 --> 00:31:14.526 A:middle
However, if your system
is completely idle

00:31:14.626 --> 00:31:18.806 A:middle
and asleep you can get about
250 hours of battery life.

00:31:19.816 --> 00:31:22.196 A:middle
That's like 10 days'
worth of battery life.

00:31:24.106 --> 00:31:28.726 A:middle
Now, I know it's not really
practical for you to just look

00:31:28.726 --> 00:31:30.686 A:middle
at this number because
our users are not going

00:31:30.686 --> 00:31:33.996 A:middle
to just buy a device, leave
it on a table, hope it sleeps

00:31:34.146 --> 00:31:35.986 A:middle
so they can get 10 days'
worth of battery life.

00:31:36.366 --> 00:31:37.816 A:middle
That's not really useful at all.

00:31:38.306 --> 00:31:40.956 A:middle
However, the concept
is simple here, right?

00:31:41.266 --> 00:31:43.226 A:middle
The longer you allow
your devices to sleep,

00:31:44.036 --> 00:31:46.466 A:middle
the better battery
life it will get.

00:31:47.336 --> 00:31:51.206 A:middle
So, for our typical user,
when they turn off the screen

00:31:51.206 --> 00:31:53.646 A:middle
of their device, they either
set it aside or put it

00:31:53.646 --> 00:31:55.496 A:middle
in their pockets, they assume

00:31:55.496 --> 00:31:57.496 A:middle
that the device is
asleep, right?

00:31:57.496 --> 00:31:58.836 A:middle
They're not interacting
with the device.

00:31:59.126 --> 00:32:00.496 A:middle
It's, you know, out
of their sight.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:59.126 --> 00:32:00.496 A:middle
It's, you know, out
of their sight.

00:32:01.156 --> 00:32:02.956 A:middle
The device should not
be doing any work.

00:32:04.276 --> 00:32:06.306 A:middle
However, as developers, we know

00:32:06.306 --> 00:32:07.916 A:middle
that that is not
the case, right?

00:32:08.336 --> 00:32:10.626 A:middle
When the device is
seemingly asleep,

00:32:12.046 --> 00:32:15.526 A:middle
your apps are often waking
up the device to interact

00:32:15.526 --> 00:32:17.466 A:middle
with all these different
technologies and features

00:32:17.466 --> 00:32:20.006 A:middle
to provide their users with
up-to-date information.

00:32:20.526 --> 00:32:23.896 A:middle
Now, this is necessary,
obviously,

00:32:23.896 --> 00:32:25.986 A:middle
because our users expect,
you know, their emails

00:32:25.986 --> 00:32:28.816 A:middle
to be coming through, our
users expect the latest news

00:32:28.816 --> 00:32:30.976 A:middle
to be there when they, you
know, start using their device.

00:32:31.946 --> 00:32:35.256 A:middle
However, you know,
every time you do work,

00:32:36.466 --> 00:32:39.446 A:middle
you can pretty much expect
the device needs to be awake

00:32:40.516 --> 00:32:43.086 A:middle
and thus, even though you're
only doing a little bit of work,

00:32:43.386 --> 00:32:46.136 A:middle
and here's our favorite chart
again, our favorite graph.

00:32:46.136 --> 00:32:47.826 A:middle
Even though you're only
doing a little bit of work,

00:32:49.366 --> 00:32:51.586 A:middle
you're pretty much paying
the whole overhead cost

00:32:51.586 --> 00:32:53.236 A:middle
of keeping the device awake.

00:32:55.916 --> 00:33:00.136 A:middle
And worst of all is all of
this is happening transparent


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:55.916 --> 00:33:00.136 A:middle
And worst of all is all of
this is happening transparent

00:33:00.136 --> 00:33:00.786 A:middle
to our users.

00:33:01.886 --> 00:33:04.006 A:middle
So, if you're doing
a lot of work

00:33:04.006 --> 00:33:07.496 A:middle
in the background while
the-while seemingly the device

00:33:07.496 --> 00:33:11.066 A:middle
is asleep, when the user turns
on their device and wants

00:33:11.066 --> 00:33:12.926 A:middle
to use it again,
they'll be very confused

00:33:13.146 --> 00:33:14.336 A:middle
as to why their battery
has drained

00:33:15.196 --> 00:33:18.216 A:middle
and they will not
be happy customers.

00:33:18.216 --> 00:33:20.726 A:middle
So, it's especially
important for you

00:33:20.726 --> 00:33:23.016 A:middle
to minimize the energy
use of your applications

00:33:23.416 --> 00:33:24.846 A:middle
when they're running
in the background.

00:33:25.816 --> 00:33:29.756 A:middle
And, really, the best way to do
that is to minimize the number

00:33:29.756 --> 00:33:33.726 A:middle
of times your application has
to keep the device awake, right?

00:33:33.956 --> 00:33:36.586 A:middle
Do as much work as you can
so you minimize the number

00:33:36.586 --> 00:33:38.666 A:middle
of time you'll need
to be doing that work.

00:33:39.306 --> 00:33:42.356 A:middle
So, for the-with the
remaining time that we have,

00:33:42.356 --> 00:33:46.516 A:middle
I want to talk about these four
areas in Notifications, VoIP,

00:33:46.816 --> 00:33:48.636 A:middle
Location and Bluetooth.

00:33:49.176 --> 00:33:51.926 A:middle
I want to talk about some
of the best practices

00:33:51.926 --> 00:33:54.136 A:middle
as your applications are
utilizing these technologies

00:33:54.246 --> 00:33:55.546 A:middle
when it's running
in the background.

00:33:56.376 --> 00:33:57.956 A:middle
So, first, from notifications.

00:33:59.486 --> 00:34:03.026 A:middle
Notification is a great way
for your application to send,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:59.486 --> 00:34:03.026 A:middle
Notification is a great way
for your application to send,

00:34:03.276 --> 00:34:05.956 A:middle
you know, to just alert the
users of some information.

00:34:07.236 --> 00:34:09.906 A:middle
Now, it is important for
you to know, however,

00:34:09.906 --> 00:34:12.466 A:middle
every time you either
schedule a local notification

00:34:12.576 --> 00:34:14.226 A:middle
or send a remote
push notification,

00:34:15.436 --> 00:34:18.436 A:middle
the device will have to wake up
to display that for your users.

00:34:19.505 --> 00:34:21.235 A:middle
So make sure you
use those carefully.

00:34:21.726 --> 00:34:24.656 A:middle
If you're constantly sending or
scheduling local notifications

00:34:24.656 --> 00:34:26.565 A:middle
or sending remote
notifications from your servers,

00:34:27.456 --> 00:34:31.176 A:middle
pretty much the device-the
user's device will be awake

00:34:31.306 --> 00:34:33.295 A:middle
for a majority of the time.

00:34:33.856 --> 00:34:36.876 A:middle
Now, one thing that you
guys might not know is

00:34:36.876 --> 00:34:38.656 A:middle
with the push notifications
you send,

00:34:39.565 --> 00:34:41.505 A:middle
you can actually
set a push priority.

00:34:41.505 --> 00:34:44.056 A:middle
You can actually set a bit

00:34:44.056 --> 00:34:46.416 A:middle
that will determine the
priority of your push.

00:34:47.795 --> 00:34:50.496 A:middle
Now, by default, your pushes
are sent with priority 10,

00:34:50.686 --> 00:34:54.116 A:middle
which is deliver this
immediately whenever you can,

00:34:54.396 --> 00:34:55.926 A:middle
so our servers will
attempt to do that.

00:34:56.335 --> 00:34:59.766 A:middle
However, if you're simply trying
to notify or alert the user

00:34:59.766 --> 00:35:02.816 A:middle
of something that is not needed
to be displayed immediately,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.766 --> 00:35:02.816 A:middle
of something that is not needed
to be displayed immediately,

00:35:03.046 --> 00:35:04.796 A:middle
consider setting your
priority at five.

00:35:05.386 --> 00:35:09.476 A:middle
This will tell our servers to,
you know, send this push maybe

00:35:09.476 --> 00:35:11.166 A:middle
at a better time
for your device.

00:35:11.456 --> 00:35:14.396 A:middle
For instance, let's say another
immediate-another high priority

00:35:14.396 --> 00:35:16.296 A:middle
push is coming through,
then let's just go ahead

00:35:16.296 --> 00:35:19.146 A:middle
and send this push through
with the high priority push.

00:35:19.346 --> 00:35:22.636 A:middle
But it won't actively send
it unless it's a power

00:35:22.636 --> 00:35:24.266 A:middle
optimal time.

00:35:24.446 --> 00:35:26.866 A:middle
So, consider using this for
your push notifications.

00:35:28.116 --> 00:35:29.856 A:middle
Now, one thing we do want you

00:35:29.856 --> 00:35:34.296 A:middle
to start using notifications
for is VoIP.

00:35:34.356 --> 00:35:37.526 A:middle
Now, this is an area where
we've made great improvements

00:35:37.726 --> 00:35:41.166 A:middle
in iOS 8.

00:35:41.446 --> 00:35:43.746 A:middle
So, when VoIP was first
introduced in iOS,

00:35:44.746 --> 00:35:46.086 A:middle
we required the VoIP apps

00:35:46.146 --> 00:35:48.156 A:middle
to maintain their own
persistent connections.

00:35:49.256 --> 00:35:51.986 A:middle
This meant that periodic
keep-alives had to be sent

00:35:52.176 --> 00:35:55.286 A:middle
from your servers to the
VoIP app and vice-versa.

00:35:56.626 --> 00:36:00.926 A:middle
Now, if the device was asleep,
the device will need to wake


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:56.626 --> 00:36:00.926 A:middle
Now, if the device was asleep,
the device will need to wake

00:36:00.926 --> 00:36:03.136 A:middle
up for your applications
to be able to respond

00:36:03.136 --> 00:36:08.126 A:middle
to these keep-alive packets
and this meant periodic wakes.

00:36:09.876 --> 00:36:11.846 A:middle
Not only was this
bad for battery life

00:36:12.836 --> 00:36:16.176 A:middle
but it also made developing
VoIP apps fairly complex,

00:36:16.526 --> 00:36:17.896 A:middle
as some of these algorithms

00:36:17.896 --> 00:36:20.866 A:middle
to manage our connections can
be very, very complicated.

00:36:22.336 --> 00:36:25.716 A:middle
To simplify the development
process as well

00:36:25.716 --> 00:36:27.616 A:middle
as conserve the battery
life on our systems,

00:36:28.596 --> 00:36:35.156 A:middle
in iOS 8 we've introduced a new
way to do VoIP and that's VoIP

00:36:35.156 --> 00:36:36.466 A:middle
through the PushKit framework.

00:36:37.346 --> 00:36:39.976 A:middle
This new VoIP mechanism
allows you to communicate

00:36:39.976 --> 00:36:43.306 A:middle
with your VoIP apps through
the Apple's Push Notification

00:36:43.306 --> 00:36:43.936 A:middle
Service, right?

00:36:44.256 --> 00:36:46.376 A:middle
In this way, you no longer need

00:36:46.376 --> 00:36:48.036 A:middle
to maintain your
persistent connections.

00:36:48.376 --> 00:36:50.646 A:middle
Meaning, you won't
have to constantly wake

00:36:50.646 --> 00:36:55.376 A:middle
up the device just so that
your connections won't timeout.

00:36:55.496 --> 00:36:58.206 A:middle
Now with these VoIP pushes,
your app will be allowed

00:36:58.516 --> 00:37:01.296 A:middle
to receive runtime to
process these VoIP pushes.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:58.516 --> 00:37:01.296 A:middle
to receive runtime to
process these VoIP pushes.

00:37:02.036 --> 00:37:05.726 A:middle
So your app will get runtime
whenever a VoIP push is sent

00:37:05.726 --> 00:37:06.356 A:middle
to your device.

00:37:06.356 --> 00:37:10.526 A:middle
And the best of all is your apps
will be able to do this even

00:37:10.526 --> 00:37:12.186 A:middle
if the user terminated the app

00:37:12.486 --> 00:37:13.976 A:middle
or for any reason your
app was terminated.

00:37:14.141 --> 00:37:16.141 A:middle
[ Applause ]

00:37:16.266 --> 00:37:16.566 A:middle
Thank you.

00:37:17.056 --> 00:37:18.706 A:middle
Someone's enthusiastic
about this.

00:37:19.866 --> 00:37:21.356 A:middle
And this is great, right?

00:37:21.356 --> 00:37:24.526 A:middle
Previously, in iOS, if a user
terminates your VoIP app,

00:37:25.296 --> 00:37:28.216 A:middle
the connection is gone and you'd
no longer be able to communicate

00:37:28.296 --> 00:37:31.006 A:middle
with that device, your servers
won't be able to communicate

00:37:31.006 --> 00:37:31.816 A:middle
with the device anymore.

00:37:31.816 --> 00:37:34.766 A:middle
Now, we will do that
for you and so even

00:37:34.766 --> 00:37:36.186 A:middle
if the user terminates your app

00:37:36.386 --> 00:37:38.266 A:middle
or for any other reason
the app terminates,

00:37:39.186 --> 00:37:40.886 A:middle
you will still be
able to communicate

00:37:40.886 --> 00:37:43.356 A:middle
with your apps using
these VoIP pushes.

00:37:44.076 --> 00:37:46.166 A:middle
And finally, to help
with performance as well

00:37:46.166 --> 00:37:49.346 A:middle
as to improve the call
setup times, we'll allow you

00:37:49.346 --> 00:37:52.676 A:middle
to include up to a 4k
payload in this VoIP pushes.

00:37:53.196 --> 00:37:56.386 A:middle
This is a lot more than
the 256 bytes you get

00:37:56.476 --> 00:37:57.256 A:middle
with regular pushes.

00:37:57.936 --> 00:38:00.116 A:middle
So this should help improve
the performance as well


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.936 --> 00:38:00.116 A:middle
So this should help improve
the performance as well

00:38:00.116 --> 00:38:02.046 A:middle
as the call setup times
of your applications.

00:38:03.646 --> 00:38:06.156 A:middle
Now, to adopt this new
framework, what you'll need

00:38:06.156 --> 00:38:10.226 A:middle
to do is link the new PushKit
framework, it's new in iOS 8,

00:38:11.246 --> 00:38:13.386 A:middle
and then you want
to register your app

00:38:13.416 --> 00:38:15.196 A:middle
to receive these
push notifications,

00:38:15.496 --> 00:38:16.296 A:middle
these VoIP pushes.

00:38:16.626 --> 00:38:18.966 A:middle
So, you'll do something like
this in your application,

00:38:18.966 --> 00:38:20.356 A:middle
didFinishLaunching delegate.

00:38:21.136 --> 00:38:23.846 A:middle
So, you want to create
a PKPushRegistry object

00:38:24.816 --> 00:38:26.756 A:middle
and then set the
delegate to yourself.

00:38:27.766 --> 00:38:29.416 A:middle
And we'll be implementing
two delegate methods

00:38:29.416 --> 00:38:30.886 A:middle
in a little bit.

00:38:30.966 --> 00:38:32.556 A:middle
But the main thing is you want

00:38:32.556 --> 00:38:35.956 A:middle
to set your desired
PushTypes to include VoIP.

00:38:36.646 --> 00:38:38.966 A:middle
And with these three
simple lines of code,

00:38:39.286 --> 00:38:41.956 A:middle
your app is now registered
to receive VoIP pushes.

00:38:41.956 --> 00:38:44.756 A:middle
I do want to remind
you guys with all-as

00:38:44.756 --> 00:38:47.756 A:middle
with all background
running modes, you will have

00:38:47.756 --> 00:38:50.466 A:middle
to make sure your app
has the VoIP background

00:38:50.466 --> 00:38:51.716 A:middle
remote requested.

00:38:51.716 --> 00:38:55.846 A:middle
So, now, let's talk about
the two delegate methods

00:38:55.996 --> 00:38:57.656 A:middle
that we're going to implement.

00:38:58.516 --> 00:39:00.396 A:middle
First, similar to Remote pushes,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.516 --> 00:39:00.396 A:middle
First, similar to Remote pushes,

00:39:00.396 --> 00:39:02.736 A:middle
you have to handle the push
token that's given to you.

00:39:03.296 --> 00:39:06.456 A:middle
Now, if you have both the Remote
push as well as the VoIP pushes

00:39:06.546 --> 00:39:10.866 A:middle
in your applications, you will
get two separate push tokens.

00:39:11.026 --> 00:39:13.236 A:middle
So, you'll need to send both
of those up to your servers

00:39:13.416 --> 00:39:15.616 A:middle
so you can communicate
with your app.

00:39:16.246 --> 00:39:20.236 A:middle
And then you have the delegate

00:39:20.236 --> 00:39:22.826 A:middle
to handle your incoming
push, right?

00:39:22.826 --> 00:39:26.436 A:middle
So this is where your app
will get-will start running

00:39:26.436 --> 00:39:27.196 A:middle
when a push comes.

00:39:27.536 --> 00:39:31.046 A:middle
So, here you can send
off your notifications

00:39:31.046 --> 00:39:32.126 A:middle
to your users-you know,

00:39:32.126 --> 00:39:34.536 A:middle
maybe it's the new interacting
notifications that you want

00:39:34.536 --> 00:39:38.526 A:middle
to display, right?-to alert the
users that a call has come in.

00:39:39.216 --> 00:39:41.706 A:middle
And here, you know, you
could probably begin to set

00:39:41.706 --> 00:39:43.486 A:middle
up your connections
with your servers

00:39:43.486 --> 00:39:44.976 A:middle
to begin establishing
your calls.

00:39:47.116 --> 00:39:49.786 A:middle
So, that's all you need
to do on the device side

00:39:49.786 --> 00:39:51.526 A:middle
to adopt this new
VoIP mechanism.

00:39:52.196 --> 00:39:55.486 A:middle
Now, on the server side, you'll
still need to be required

00:39:55.486 --> 00:39:56.956 A:middle
to do some more changes, right?

00:39:56.996 --> 00:39:59.816 A:middle
First, you want to go and
request the new push certificate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:00.336 --> 00:40:01.906 A:middle
for VoIP and you can do this

00:40:01.996 --> 00:40:03.976 A:middle
through the Apple's
Developer Portal.

00:40:04.046 --> 00:40:07.616 A:middle
And then, simply send
your pushes with the token

00:40:07.616 --> 00:40:10.826 A:middle
that you got and this new
push-VoIP push certificate

00:40:10.966 --> 00:40:12.286 A:middle
that you have.

00:40:12.286 --> 00:40:15.736 A:middle
Now, one thing to note is
this mechanism will only work

00:40:15.736 --> 00:40:17.516 A:middle
with devices running iOS 8.

00:40:17.516 --> 00:40:19.886 A:middle
So if you try to send
these VoIP pushes

00:40:19.886 --> 00:40:22.346 A:middle
to devices running iOS
7, it will not work.

00:40:22.346 --> 00:40:25.086 A:middle
So you need-you'll want to make
sure that you maintain some type

00:40:25.086 --> 00:40:26.946 A:middle
of compatibility
on your servers.

00:40:27.546 --> 00:40:31.886 A:middle
But this is a new way that
we're introducing for you

00:40:31.886 --> 00:40:34.706 A:middle
to do VoIP communication
with your applications

00:40:34.906 --> 00:40:36.576 A:middle
and this is new in iOS 8.

00:40:36.576 --> 00:40:40.076 A:middle
All right, next, I want
to talk about Location.

00:40:41.666 --> 00:40:44.886 A:middle
Location is a great way
for you to include context

00:40:45.136 --> 00:40:47.826 A:middle
in the information you
provide for your users, right?

00:40:47.826 --> 00:40:51.726 A:middle
Knowing where users are or
users have been will allow you

00:40:51.726 --> 00:40:55.706 A:middle
to provide better suggestions,
more relevant resources as well

00:40:55.706 --> 00:40:59.346 A:middle
as location-specific information
that could be immediately useful

00:40:59.346 --> 00:41:00.196 A:middle
for your applications.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:59.346 --> 00:41:00.196 A:middle
for your applications.

00:41:00.636 --> 00:41:02.986 A:middle
For my wife and I, one

00:41:02.986 --> 00:41:04.916 A:middle
of the most commonly
used features we use

00:41:04.916 --> 00:41:06.956 A:middle
on our phone is the
location-based restaurant

00:41:06.956 --> 00:41:07.926 A:middle
suggestions, right?

00:41:07.926 --> 00:41:10.826 A:middle
That really helps us to
be able to procrastinate

00:41:10.826 --> 00:41:12.886 A:middle
in deciding what we want to eat.

00:41:14.136 --> 00:41:16.516 A:middle
So, Location is a
great tool to integrate

00:41:16.716 --> 00:41:17.946 A:middle
in with your applications.

00:41:18.496 --> 00:41:22.136 A:middle
However, getting a user's
location can be unnecessarily

00:41:22.136 --> 00:41:25.176 A:middle
expensive if you're not
using the right APIs.

00:41:26.586 --> 00:41:29.076 A:middle
So, I'm going to talk
a little bit just

00:41:29.076 --> 00:41:31.426 A:middle
to whet your guys' appetite
on a couple location APIs

00:41:31.426 --> 00:41:35.036 A:middle
that you can consider using,
and I'm going to first start

00:41:35.036 --> 00:41:37.816 A:middle
by talking about
continuous location updates.

00:41:37.956 --> 00:41:42.286 A:middle
So, the continuous location
updates is a great way for you

00:41:42.286 --> 00:41:45.836 A:middle
to get fine-grained user
data, fine-grained information

00:41:45.836 --> 00:41:47.016 A:middle
about where your
users have been.

00:41:47.446 --> 00:41:50.106 A:middle
Now, there's two things
I want to point out here.

00:41:50.566 --> 00:41:54.556 A:middle
First is that using continuous
location updates can prevent

00:41:54.556 --> 00:41:57.946 A:middle
your device from going to sleep.

00:41:58.136 --> 00:42:00.166 A:middle
Whenever you call
startUpdatingLocation,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:58.136 --> 00:42:00.166 A:middle
Whenever you call
startUpdatingLocation,

00:42:01.256 --> 00:42:03.586 A:middle
the location hardware
will immediately begin

00:42:03.586 --> 00:42:05.716 A:middle
to stream location data
for your application.

00:42:06.876 --> 00:42:09.466 A:middle
Now, if you have the location
back on a running mode,

00:42:10.516 --> 00:42:13.136 A:middle
the device will have
to stay awake even

00:42:13.136 --> 00:42:15.836 A:middle
if your app is not
active to allow your app

00:42:16.726 --> 00:42:21.326 A:middle
to process this location data.

00:42:21.526 --> 00:42:24.606 A:middle
Now, if this location data is
coming in frequently enough,

00:42:24.876 --> 00:42:26.536 A:middle
usually because of the
accuracy that you sent,

00:42:26.806 --> 00:42:29.806 A:middle
your device will be kept
awake the whole time

00:42:30.076 --> 00:42:31.846 A:middle
and you'll be paying
the overhead cost

00:42:31.846 --> 00:42:35.776 A:middle
of keeping the device up while
you're receiving these updates.

00:42:36.236 --> 00:42:39.376 A:middle
Second, I talked about accuracy.

00:42:39.506 --> 00:42:42.206 A:middle
Accuracy makes a
difference, right?

00:42:42.206 --> 00:42:43.716 A:middle
Depending on the
accuracy level you set,

00:42:44.196 --> 00:42:46.046 A:middle
not only does this
affect the frequency

00:42:46.616 --> 00:42:49.446 A:middle
but core location uses
different technologies

00:42:49.506 --> 00:42:51.306 A:middle
to get a user's location to you.

00:42:52.496 --> 00:42:54.056 A:middle
Depending on the
accuracy level you set,

00:42:54.666 --> 00:42:56.696 A:middle
you will utilize
different technologies

00:42:57.026 --> 00:42:59.736 A:middle
and so it will have
varying amounts of cost


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:00.106 --> 00:43:01.446 A:middle
to get the user's location.

00:43:01.846 --> 00:43:05.956 A:middle
And, in general, the more
accurate you request,

00:43:06.486 --> 00:43:08.596 A:middle
the more energy it's
going to be required

00:43:09.056 --> 00:43:11.766 A:middle
on the location hardware site
to get that information for you.

00:43:13.356 --> 00:43:15.786 A:middle
So, know that continuous
location updates,

00:43:15.786 --> 00:43:19.376 A:middle
especially a high accuracy, can
be really, really expensive,

00:43:19.436 --> 00:43:23.586 A:middle
so you'll only want to use
this if it's necessary, right?

00:43:23.586 --> 00:43:24.866 A:middle
And make sure you, you know,

00:43:24.916 --> 00:43:27.326 A:middle
turn off continuous location
updates whenever it's

00:43:27.326 --> 00:43:27.826 A:middle
not needed.

00:43:29.346 --> 00:43:30.396 A:middle
If you won't be needing

00:43:30.396 --> 00:43:34.346 A:middle
to process user's location
data immediately or live,

00:43:35.096 --> 00:43:37.206 A:middle
if you're not going to be
providing users any feedback

00:43:37.336 --> 00:43:40.756 A:middle
with the location data that you
get back, consider using some

00:43:40.756 --> 00:43:44.126 A:middle
of the other more power-friendly
APIs that will still alert you

00:43:44.396 --> 00:43:47.156 A:middle
of users' locations when
you are interested in them.

00:43:47.766 --> 00:43:50.336 A:middle
And one of those is
deferred location updates.

00:43:51.086 --> 00:43:54.816 A:middle
So, this is a great API to use
if your app requires GPS level

00:43:54.816 --> 00:43:59.646 A:middle
of accuracy but won't need to
process that data live, right?

00:43:59.646 --> 00:44:03.416 A:middle
What happens here is that the
location hardware will buffer


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.646 --> 00:44:03.416 A:middle
What happens here is that the
location hardware will buffer

00:44:03.416 --> 00:44:05.916 A:middle
that data before it gets
sent to your application.

00:44:06.816 --> 00:44:09.446 A:middle
Now, you'll still be paying the
cost of utilizing, you know,

00:44:09.446 --> 00:44:11.326 A:middle
in our case since you're
requesting GPS level

00:44:11.326 --> 00:44:12.706 A:middle
of accuracy, the GPS.

00:44:13.636 --> 00:44:16.746 A:middle
However, you will allow the
device to be able to go to sleep

00:44:16.746 --> 00:44:19.216 A:middle
for longer periods of time.

00:44:19.216 --> 00:44:20.916 A:middle
And this is a great
way to, you know,

00:44:20.976 --> 00:44:22.896 A:middle
save energy while
still being able to get

00:44:22.896 --> 00:44:25.506 A:middle
that fine-grained user
location that you want.

00:44:26.196 --> 00:44:28.866 A:middle
So, if your application,
let's say, wants some type

00:44:28.866 --> 00:44:31.996 A:middle
of historical information like,
let's say, a run track app

00:44:31.996 --> 00:44:34.616 A:middle
or maybe you're implementing
some type of life tracking app,

00:44:34.986 --> 00:44:38.446 A:middle
you want to consider using this
because this will still give you

00:44:38.446 --> 00:44:41.106 A:middle
that fine-grained
continuous location data

00:44:41.106 --> 00:44:44.386 A:middle
that you wanted but
at a lower cost.

00:44:44.516 --> 00:44:46.306 A:middle
Now, if you don't need
GPS level of accuracy,

00:44:47.286 --> 00:44:50.746 A:middle
consider using the Significant
Location Change API, right?

00:44:51.096 --> 00:44:54.966 A:middle
This API will signify
the location hardware

00:44:54.966 --> 00:44:58.286 A:middle
to only notify your app if
the user has moved, you know,

00:44:58.286 --> 00:45:01.046 A:middle
a certain amount of distance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:58.286 --> 00:45:01.046 A:middle
a certain amount of distance.

00:45:01.046 --> 00:45:03.756 A:middle
And this is, you know, you
can expect pretty much updates

00:45:03.756 --> 00:45:08.266 A:middle
to come in, at least, when users
have traveled over 500 meters

00:45:09.096 --> 00:45:12.416 A:middle
or there's also a rate
limit of five minutes.

00:45:13.056 --> 00:45:16.466 A:middle
So, this is a great API to use
if your application is-needs

00:45:16.466 --> 00:45:17.976 A:middle
to update information
based on regions.

00:45:18.016 --> 00:45:20.406 A:middle
For instance, a weather
app, or let's say you want

00:45:20.406 --> 00:45:23.346 A:middle
to provide your users with
the nearest local attractions,

00:45:23.676 --> 00:45:23.876 A:middle
right?

00:45:24.476 --> 00:45:26.266 A:middle
And you want to use
significant location change

00:45:26.266 --> 00:45:29.606 A:middle
because now your device does not
have to wake up as frequently.

00:45:30.696 --> 00:45:33.086 A:middle
And finally, I wanted to
mention region monitoring.

00:45:33.696 --> 00:45:36.776 A:middle
This is a great API to use if
your application only cares

00:45:36.776 --> 00:45:39.036 A:middle
about when users are
entering or exiting

00:45:39.036 --> 00:45:41.276 A:middle
out of a specific
location, right?

00:45:41.276 --> 00:45:44.296 A:middle
You want to use this, let's say,
if you're developing an app,

00:45:44.296 --> 00:45:46.456 A:middle
let's say, of a museum, right?

00:45:46.456 --> 00:45:49.616 A:middle
You want to-when the user
gets closer to your museum,

00:45:49.876 --> 00:45:51.776 A:middle
you want to, let's
say, update the app

00:45:51.806 --> 00:45:54.616 A:middle
with the local attractions
that might be there.

00:45:55.536 --> 00:45:58.546 A:middle
You want to use a region
monitoring to set up a region

00:45:58.786 --> 00:45:59.546 A:middle
that you're interested in.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:00.486 --> 00:46:02.916 A:middle
Once you do that, you can
happily allow the device

00:46:02.916 --> 00:46:06.666 A:middle
in your app to go sleep while
the location hardware will check

00:46:06.666 --> 00:46:09.676 A:middle
for you if you get closer
to that region and only wake

00:46:09.676 --> 00:46:11.896 A:middle
up your app when you do.

00:46:11.896 --> 00:46:14.106 A:middle
So, once again, all
these are great APIs

00:46:14.106 --> 00:46:17.116 A:middle
that will help you
reduce the amount

00:46:17.216 --> 00:46:19.116 A:middle
of time the device
needs to stay awake.

00:46:19.676 --> 00:46:21.516 A:middle
Oh, one more thing
about location.

00:46:22.906 --> 00:46:25.846 A:middle
Please, please remember to
stop your location updates

00:46:26.176 --> 00:46:26.856 A:middle
when they're not needed.

00:46:26.956 --> 00:46:30.256 A:middle
I can't tell you how many
times we've, you know,

00:46:30.256 --> 00:46:32.746 A:middle
received battery complaints
only to find that, you know,

00:46:32.866 --> 00:46:35.366 A:middle
some application
forgot to unsubscribe

00:46:35.366 --> 00:46:37.506 A:middle
to their location updates
when they're not needed.

00:46:38.146 --> 00:46:39.496 A:middle
Please double check,
triple check,

00:46:39.496 --> 00:46:42.006 A:middle
because location
updates can be expensive

00:46:42.006 --> 00:46:43.566 A:middle
and it can keep your
devices awake.

00:46:44.006 --> 00:46:47.326 A:middle
So, please don't forget to
stop your location updates

00:46:47.326 --> 00:46:48.396 A:middle
when they're not needed.

00:46:48.396 --> 00:46:51.786 A:middle
So, I'm going to go
through a quick example

00:46:51.786 --> 00:46:53.406 A:middle
of what this might look
like for your application.

00:46:54.026 --> 00:46:57.076 A:middle
So, let's say, today you're
developing a run tracking app

00:46:57.076 --> 00:46:59.696 A:middle
and your requirements are
when the users are running,

00:46:59.876 --> 00:47:02.036 A:middle
you want to keep
track of their route.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:59.876 --> 00:47:02.036 A:middle
you want to keep
track of their route.

00:47:02.036 --> 00:47:05.246 A:middle
And, you know, also you have
this local store that you want

00:47:05.246 --> 00:47:08.456 A:middle
to update your app whenever the
user gets close to that store

00:47:08.456 --> 00:47:10.626 A:middle
to send the latest coupons
or discounts, right?

00:47:10.626 --> 00:47:14.436 A:middle
You want to entice your users
to go into your local store.

00:47:14.716 --> 00:47:17.926 A:middle
So, one way to do this is to
use continuous location updates.

00:47:18.886 --> 00:47:20.626 A:middle
Now, obviously, right,

00:47:21.006 --> 00:47:22.546 A:middle
when you're doing
continuous location updates,

00:47:22.626 --> 00:47:25.016 A:middle
in your code it would probably
look something more like this.

00:47:25.186 --> 00:47:27.606 A:middle
Whenever I get a location
update, make sure I store

00:47:27.606 --> 00:47:28.496 A:middle
if the users are running.

00:47:29.026 --> 00:47:30.676 A:middle
If the users are not running,

00:47:30.676 --> 00:47:31.916 A:middle
then you can drop
that location data.

00:47:32.946 --> 00:47:35.866 A:middle
Also, I want to check, every
time I get location data,

00:47:35.866 --> 00:47:38.146 A:middle
if I'm close to my
local store, right?

00:47:38.146 --> 00:47:41.826 A:middle
That way I can update the
device with the new coupons

00:47:42.086 --> 00:47:43.836 A:middle
so that your users will
want to go to your store.

00:47:44.556 --> 00:47:46.106 A:middle
So, let's take a look
at what this will look

00:47:46.106 --> 00:47:46.956 A:middle
like for your device.

00:47:46.956 --> 00:47:49.946 A:middle
As you can see the device
is on even though, you know,

00:47:49.946 --> 00:47:51.626 A:middle
the users have no
idea that this is on

00:47:51.976 --> 00:47:55.616 A:middle
and you're utilizing the GPS,
so location hardware is on.

00:47:55.736 --> 00:47:57.766 A:middle
Now, as the user
starts running, right,

00:47:57.766 --> 00:48:01.116 A:middle
you're constantly updating the
route but your device has kept


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:47:57.766 --> 00:48:01.116 A:middle
you're constantly updating the
route but your device has kept

00:48:01.116 --> 00:48:01.906 A:middle
on for the whole time.

00:48:02.596 --> 00:48:04.346 A:middle
And then, let's say
the user stops running

00:48:04.346 --> 00:48:07.026 A:middle
and now they're walking,
walk-slowly walking.

00:48:07.766 --> 00:48:09.466 A:middle
You're checking and checking
and finally, you get close

00:48:09.466 --> 00:48:11.376 A:middle
to your local store and you
can update your coupons.

00:48:11.946 --> 00:48:15.536 A:middle
And so, as you can see,
both the GPS hardware

00:48:15.536 --> 00:48:16.406 A:middle
and the device is kept

00:48:16.406 --> 00:48:17.756 A:middle
on the whole time while
you're doing this.

00:48:18.526 --> 00:48:19.236 A:middle
Now, let's use some

00:48:19.236 --> 00:48:22.256 A:middle
of the location efficient
APIs to do this, right?

00:48:22.256 --> 00:48:25.236 A:middle
So, now, instead of using
continuous location updates,

00:48:25.276 --> 00:48:27.996 A:middle
let's set up the deferred
location updates as well

00:48:27.996 --> 00:48:28.836 A:middle
as the region monitoring.

00:48:29.286 --> 00:48:31.406 A:middle
So, first thing this will
do is it will, kind of,

00:48:31.406 --> 00:48:32.896 A:middle
clean up your code
a little bit, right?

00:48:33.156 --> 00:48:35.746 A:middle
In your region monitoring
delegate, all you need

00:48:35.746 --> 00:48:38.506 A:middle
to do is just-you know, in
that function whenever you get

00:48:38.506 --> 00:48:40.366 A:middle
that callback, just
simply pull your server

00:48:40.366 --> 00:48:41.146 A:middle
from the new coupons.

00:48:41.796 --> 00:48:44.356 A:middle
And then you have your
location callbacks,

00:48:44.356 --> 00:48:46.626 A:middle
and in that function all you
need to do is basically take

00:48:46.626 --> 00:48:49.446 A:middle
that chunk of data that the
location hardware has buffered

00:48:49.446 --> 00:48:51.036 A:middle
for you and, you
know, simply store it

00:48:51.246 --> 00:48:52.136 A:middle
if the users are running.

00:48:52.956 --> 00:48:54.006 A:middle
So, with that, let's take a look

00:48:54.006 --> 00:48:55.576 A:middle
at what this does
for your device.

00:48:56.426 --> 00:48:58.766 A:middle
So, as the user is running,
the device is asleep until oh,

00:48:58.766 --> 00:49:00.226 A:middle
I've run this long a distance.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:48:58.766 --> 00:49:00.226 A:middle
I've run this long a distance.

00:49:00.316 --> 00:49:03.846 A:middle
So, now, I can opt in my
route when the device is on.

00:49:04.396 --> 00:49:06.626 A:middle
And then, you know, the
device can happily go

00:49:06.626 --> 00:49:08.926 A:middle
to sleep while the user
continues to run and then oh,

00:49:09.386 --> 00:49:10.646 A:middle
significant distance
have reached,

00:49:10.946 --> 00:49:12.196 A:middle
let me once again get this data.

00:49:12.196 --> 00:49:14.016 A:middle
As you can see just from now,

00:49:14.556 --> 00:49:16.746 A:middle
you have already reduced
the amount of time

00:49:16.746 --> 00:49:18.026 A:middle
that the device needs to stay up

00:49:18.066 --> 00:49:20.776 A:middle
and thus reducing
the energy cost.

00:49:20.846 --> 00:49:24.326 A:middle
Now, the users are done
running so, you know,

00:49:24.326 --> 00:49:26.966 A:middle
we don't need continuous-we
don't need deferred location

00:49:26.966 --> 00:49:27.556 A:middle
updates anymore.

00:49:27.846 --> 00:49:29.306 A:middle
So, let's stop that.

00:49:29.786 --> 00:49:33.406 A:middle
And then as users are
walking, walking, walking, oh,

00:49:34.176 --> 00:49:36.556 A:middle
now you reach and monitor API
will kick in and alert your app

00:49:36.916 --> 00:49:39.146 A:middle
and then your app can
wake up to respond

00:49:39.346 --> 00:49:41.846 A:middle
and to get the latest
coupons, right?

00:49:42.076 --> 00:49:46.406 A:middle
These location efficient
APIs are a great way for you

00:49:46.406 --> 00:49:48.736 A:middle
to get the same location data
that you might be wanting,

00:49:49.726 --> 00:49:51.556 A:middle
but more energy efficiently.

00:49:52.036 --> 00:49:54.336 A:middle
And so, I talked about a couple.

00:49:54.336 --> 00:49:55.896 A:middle
There's also something
I did not talk about.

00:49:56.186 --> 00:49:57.996 A:middle
There's the iBeacons
here and AutoPause.

00:49:57.996 --> 00:49:59.976 A:middle
I didn't really have time
to talk too much about.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:00.176 --> 00:50:02.896 A:middle
But there's a great document
online that will allow you

00:50:02.896 --> 00:50:06.276 A:middle
to get best practices on
what to do, which APIs to use

00:50:06.426 --> 00:50:07.436 A:middle
when you're using location.

00:50:07.736 --> 00:50:09.356 A:middle
And also new in iOS 8, I wanted

00:50:09.356 --> 00:50:10.966 A:middle
to mention there is a
significant location

00:50:10.966 --> 00:50:11.596 A:middle
visited API.

00:50:12.646 --> 00:50:13.786 A:middle
So, if you didn't get to check

00:50:13.786 --> 00:50:16.366 A:middle
out the core location session
yesterday, you'll want to check

00:50:16.856 --> 00:50:18.226 A:middle
out what's new in core location.

00:50:18.556 --> 00:50:21.006 A:middle
All right, so last, I wanted
to spend just a little bit

00:50:21.006 --> 00:50:22.556 A:middle
of time talking about Bluetooth.

00:50:23.666 --> 00:50:26.806 A:middle
So, with the advancement
of Bluetooth low energy,

00:50:27.436 --> 00:50:30.646 A:middle
Bluetooth accessories are now
becoming increasingly popular.

00:50:32.086 --> 00:50:34.706 A:middle
And with Core Bluetooth
introduced in iOS 5,

00:50:34.706 --> 00:50:39.256 A:middle
it's now easier than ever to
integrate Bluetooth accessories

00:50:39.256 --> 00:50:40.856 A:middle
with your iOS app, right?

00:50:40.856 --> 00:50:42.676 A:middle
This will allow you to
provide rich features

00:50:42.676 --> 00:50:45.566 A:middle
such as health monitoring,
right, the new health kit.

00:50:46.126 --> 00:50:48.756 A:middle
This will allow you to
provide information for users

00:50:48.996 --> 00:50:51.096 A:middle
that will allow you to do
fitness and activity tracking

00:50:51.266 --> 00:50:53.676 A:middle
as well as, you know,
item proximity sensing.

00:50:53.726 --> 00:50:57.556 A:middle
So, we could probably
spend, like,

00:50:57.556 --> 00:50:59.236 A:middle
a whole 'nother hour
here just talking

00:50:59.236 --> 00:51:02.646 A:middle
about how to-what are the best
practices on how to communicate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:50:59.236 --> 00:51:02.646 A:middle
about how to-what are the best
practices on how to communicate

00:51:02.646 --> 00:51:05.076 A:middle
with Bluetooth accessories,
you know, what's the best way,

00:51:05.396 --> 00:51:07.746 A:middle
what's the most energy
efficient way to design

00:51:07.746 --> 00:51:09.476 A:middle
and architect the communication.

00:51:09.806 --> 00:51:12.586 A:middle
But, due to the amount of time
that we have left, I simply want

00:51:12.586 --> 00:51:16.226 A:middle
to mention one thing, and
that's whenever you do Bluetooth

00:51:16.226 --> 00:51:19.566 A:middle
transfers, your device will
wake up for your app to be able

00:51:19.566 --> 00:51:23.846 A:middle
to receive it even if your app
is running in the background.

00:51:23.846 --> 00:51:26.486 A:middle
So, whenever I say
that, hopefully by now,

00:51:26.486 --> 00:51:28.526 A:middle
alarm bells begin to set
off in you heads, right?

00:51:28.526 --> 00:51:31.206 A:middle
"My device has to wake
up for my app to be able

00:51:31.206 --> 00:51:31.876 A:middle
to receive this data."

00:51:32.206 --> 00:51:34.246 A:middle
And, hopefully, this chart
somehow just, you know,

00:51:34.246 --> 00:51:36.596 A:middle
pops up in your head once
again, high overhead cost,

00:51:36.836 --> 00:51:38.776 A:middle
device wake, not
good for energy.

00:51:39.666 --> 00:51:43.856 A:middle
So, you want to think about
creative ways to minimize that.

00:51:44.386 --> 00:51:46.766 A:middle
So, once again, to help you
guys just kind of get some ideas

00:51:46.766 --> 00:51:49.716 A:middle
and visualize this, we're going
to go back to our running app

00:51:49.716 --> 00:51:52.986 A:middle
and let's say we integrated a
Bluetooth fitness band, right?

00:51:52.986 --> 00:51:55.166 A:middle
You now want to help track
user activity as well

00:51:55.166 --> 00:51:58.406 A:middle
as perhaps heart rate,
you know, blood pressure

00:51:58.406 --> 00:51:59.266 A:middle
when the users are running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:52:00.036 --> 00:52:03.446 A:middle
So, you know, we're going to use
an example that we've used over

00:52:03.446 --> 00:52:04.536 A:middle
and over again, and hopefully,

00:52:04.536 --> 00:52:06.526 A:middle
this idea will stick
in your head, right?

00:52:06.526 --> 00:52:07.986 A:middle
We're going to start by
just streaming the data.

00:52:08.856 --> 00:52:09.146 A:middle
All right.

00:52:09.146 --> 00:52:10.806 A:middle
So, now your fitness
data are coming in

00:52:10.806 --> 00:52:12.236 A:middle
and the device wakes up.

00:52:12.236 --> 00:52:15.066 A:middle
However, because you're
constantly streaming the device

00:52:15.066 --> 00:52:15.986 A:middle
can potentially be kept

00:52:16.106 --> 00:52:19.056 A:middle
up the whole time while
data is coming in.

00:52:19.296 --> 00:52:22.526 A:middle
So, our favorite solution
is buffering, right?

00:52:22.716 --> 00:52:25.556 A:middle
So, now, instead you're
buffering the location data

00:52:25.556 --> 00:52:28.526 A:middle
on your accessory site and
so your device doesn't have

00:52:28.526 --> 00:52:29.926 A:middle
to pay the cost to stay awake.

00:52:30.546 --> 00:52:31.936 A:middle
And once your buffer is full,

00:52:32.106 --> 00:52:34.946 A:middle
then you spend one
time-then you do, in one time,

00:52:35.336 --> 00:52:37.276 A:middle
to send all your data
over to your device

00:52:37.316 --> 00:52:40.386 A:middle
and the device only has to wake
up one time to process a lot

00:52:40.386 --> 00:52:43.536 A:middle
of data and then it
can go back to sleep.

00:52:44.226 --> 00:52:47.106 A:middle
Right, this is-this is something
we really want you to consider,

00:52:47.106 --> 00:52:50.956 A:middle
especially when you're not
really actively providing users

00:52:50.956 --> 00:52:52.756 A:middle
with information
immediately, right?

00:52:52.756 --> 00:52:55.466 A:middle
In our running tracking app,
this works because, you know,

00:52:55.466 --> 00:52:58.246 A:middle
our users probably won't be
checking their devices all the

00:52:58.246 --> 00:52:59.276 A:middle
time when they're running.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:00.116 --> 00:53:04.036 A:middle
So, you can coalesce your data
transactions, doing more work

00:53:04.036 --> 00:53:06.636 A:middle
at once, so you can minimize
the number of times you need

00:53:06.636 --> 00:53:08.026 A:middle
to keep the device awake, right.

00:53:08.026 --> 00:53:10.966 A:middle
You don't want to implement a
cool fitness band that's going

00:53:10.996 --> 00:53:13.406 A:middle
to constantly keep the
users' device awake even

00:53:13.406 --> 00:53:14.886 A:middle
when they don't care
about the information.

00:53:15.336 --> 00:53:17.206 A:middle
Because then the users are
going to put off their device,

00:53:17.206 --> 00:53:19.306 A:middle
you're going to see that
little energy drain bar

00:53:19.306 --> 00:53:21.126 A:middle
and when the user
wakes up their device,

00:53:21.736 --> 00:53:22.766 A:middle
they're not going to be happy.

00:53:23.846 --> 00:53:26.896 A:middle
So, the best way really
to reduce the energy cost

00:53:26.896 --> 00:53:29.426 A:middle
of your application when it's
running in the background is

00:53:29.426 --> 00:53:32.326 A:middle
to do as much work as you
can when you do get to run

00:53:32.326 --> 00:53:35.086 A:middle
so that you can minimize
the number of times you have

00:53:35.086 --> 00:53:37.736 A:middle
to wake up, right, and
to coalesce your work

00:53:37.916 --> 00:53:40.396 A:middle
so you can cut down your wakes.

00:53:41.176 --> 00:53:43.496 A:middle
So, let's take this one
step further, right?

00:53:43.756 --> 00:53:46.866 A:middle
So, we've talked about this run
tracking app and we know that,

00:53:46.966 --> 00:53:49.576 A:middle
once again, we've implemented
a buffer on the Bluetooth side,

00:53:50.046 --> 00:53:52.406 A:middle
but we're also implementing
using the deferred location

00:53:52.466 --> 00:53:53.656 A:middle
updates, right?

00:53:53.986 --> 00:53:56.736 A:middle
So, these-both of those
have greatly minimized them

00:53:56.736 --> 00:53:58.656 A:middle
for wakes, but we
can even do better.

00:53:59.436 --> 00:54:02.256 A:middle
So, let's say, now instead
of having these two channels


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:53:59.436 --> 00:54:02.256 A:middle
So, let's say, now instead
of having these two channels

00:54:02.256 --> 00:54:04.266 A:middle
of waking up your device,
let's coalesce them.

00:54:04.756 --> 00:54:06.966 A:middle
So, as users are running,

00:54:06.966 --> 00:54:08.596 A:middle
you're gathering data
on your fitness band.

00:54:09.086 --> 00:54:11.746 A:middle
But then, deferred location
updates wakes up your-wakes

00:54:11.746 --> 00:54:13.136 A:middle
up the device in your
app and says, "Hey,

00:54:13.136 --> 00:54:13.976 A:middle
you have location data."

00:54:15.056 --> 00:54:17.066 A:middle
While your device is
awake, let's just go ahead

00:54:17.066 --> 00:54:19.126 A:middle
and grab the data
from your fitness band

00:54:19.206 --> 00:54:21.996 A:middle
so you no longer have to
wake up the device again

00:54:22.126 --> 00:54:23.186 A:middle
when you have your
buffered data.

00:54:24.136 --> 00:54:27.906 A:middle
Then your app can process all
these things at once and go back

00:54:27.906 --> 00:54:30.266 A:middle
to sleep, helping
you conserve energy.

00:54:32.016 --> 00:54:36.216 A:middle
So. once again, the best way
for you to reduce energy use

00:54:36.216 --> 00:54:38.306 A:middle
of your app when it's
running in the background is

00:54:38.376 --> 00:54:41.736 A:middle
to coalesce your work so
you can cut down the wakes.

00:54:42.596 --> 00:54:43.976 A:middle
Cut down the number
of times you'll need

00:54:43.976 --> 00:54:45.386 A:middle
to wake up the device.

00:54:45.736 --> 00:54:48.156 A:middle
And especially in iOS, most
of the time you're running

00:54:48.156 --> 00:54:50.786 A:middle
in the background, you'll only
be doing a little bit of work

00:54:50.786 --> 00:54:51.776 A:middle
for short amounts of time.

00:54:52.246 --> 00:54:54.546 A:middle
So, you want to minimize
the number of times you do

00:54:54.546 --> 00:54:59.396 A:middle
that so you can help
produce energy.

00:54:59.396 --> 00:55:01.026 A:middle
So let's sum it up, right?


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:54:59.396 --> 00:55:01.026 A:middle
So let's sum it up, right?

00:55:01.656 --> 00:55:03.836 A:middle
And I want to leave you
guys with this quote.

00:55:04.926 --> 00:55:06.266 A:middle
Hopefully, you guys are
all familiar with this:

00:55:07.056 --> 00:55:09.226 A:middle
"With great power comes
great responsibility."

00:55:10.046 --> 00:55:14.066 A:middle
We've provided many tools and
APIs for you to, you know,

00:55:14.146 --> 00:55:16.236 A:middle
build these amazing apps.

00:55:16.576 --> 00:55:19.436 A:middle
Use those responsibly, right?

00:55:19.506 --> 00:55:22.216 A:middle
Keep in mind energy as
you design your apps

00:55:22.656 --> 00:55:25.046 A:middle
because it greatly
impacts user experience.

00:55:25.926 --> 00:55:29.456 A:middle
Find creative ways in your
apps to do work less or never,

00:55:30.346 --> 00:55:35.456 A:middle
to do work more efficiently and
to do work at a better time.

00:55:36.836 --> 00:55:38.306 A:middle
And finally, like
we talked about,

00:55:39.096 --> 00:55:40.676 A:middle
be a considerate background app.

00:55:41.156 --> 00:55:44.666 A:middle
Your users have no idea
of what you're doing

00:55:44.826 --> 00:55:46.056 A:middle
when you're running
in the background.

00:55:46.396 --> 00:55:47.696 A:middle
So, be considerate.

00:55:47.876 --> 00:55:50.996 A:middle
Think of ways to coalesce
your work so you can cut

00:55:50.996 --> 00:55:52.956 A:middle
down the number of wakes.

00:55:53.606 --> 00:55:58.106 A:middle
So, for more information,
we have here Paul and Jake

00:55:58.266 --> 00:55:59.876 A:middle
as our evangelists
that you can contact.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:56:02.466 --> 00:56:03.996 A:middle
And also, here are
some related sessions

00:56:03.996 --> 00:56:06.136 A:middle
that might be and-that you
might be interested in.

00:56:06.136 --> 00:56:08.556 A:middle
Now, some of these have passed
already so I would recommend you

00:56:08.556 --> 00:56:10.116 A:middle
to go download the
videos, right?

00:56:10.116 --> 00:56:12.576 A:middle
For the graphic and
animations, it really goes

00:56:12.576 --> 00:56:13.836 A:middle
into details about, you know,

00:56:13.836 --> 00:56:16.426 A:middle
how to-how the graphic
rendering pipeline works

00:56:16.426 --> 00:56:17.356 A:middle
and how blur works.

00:56:17.956 --> 00:56:20.306 A:middle
And then you have, obviously,
"What's New in Core Location"

00:56:20.406 --> 00:56:22.396 A:middle
as well as "What's New in
Foundation Networking."

00:56:22.706 --> 00:56:23.996 A:middle
And then you have
the instruments,

00:56:24.026 --> 00:56:25.566 A:middle
"Improving Your Apps
with Instruments."

00:56:25.886 --> 00:56:28.376 A:middle
Also, like I said, download
Anthony's talk earlier.

00:56:29.006 --> 00:56:29.876 A:middle
Thank you so much for coming.

00:56:30.406 --> 00:56:30.926 A:middle
Enjoy your lunch.

00:56:31.016 --> 00:56:33.000 A:middle
[ Applause ]

