WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:00.506 --> 00:00:10.936 A:middle
[ Silence ]

00:00:11.436 --> 00:00:11.886 A:middle
&gt;&gt; Good afternoon.

00:00:12.516 --> 00:00:18.546 A:middle
[ Applause ]

00:00:19.046 --> 00:00:21.466 A:middle
&gt;&gt; My name is Brandon Newendorp
and I'm the Software Engineer

00:00:21.606 --> 00:00:25.686 A:middle
on iOS, and welcome to Creating
Custom iOS User Interfaces.

00:00:26.726 --> 00:00:29.436 A:middle
If you take a look at
iOS today it is filled

00:00:29.436 --> 00:00:31.616 A:middle
with really interesting
and engaging,

00:00:31.686 --> 00:00:33.386 A:middle
unique interfaces for our users.

00:00:34.156 --> 00:00:36.686 A:middle
You can see that in things
like the Notification Center

00:00:37.036 --> 00:00:39.736 A:middle
which takes advantage of a
blur effect to give you a sense

00:00:39.736 --> 00:00:42.596 A:middle
of it being at a different depth
above the operating system.

00:00:43.466 --> 00:00:46.486 A:middle
Notification Center also
uses effects like vibrancy

00:00:46.716 --> 00:00:49.246 A:middle
to create text that is
highly legible at all times.

00:00:50.396 --> 00:00:52.126 A:middle
You also see interesting
interfaces

00:00:52.126 --> 00:00:54.816 A:middle
like what we call the
Suggestions View in Siri

00:00:54.966 --> 00:00:57.926 A:middle
where we have these pieces
of text that are animating on

00:00:57.926 --> 00:01:00.306 A:middle
and off screen at all
times, getting the sense


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.926 --> 00:01:00.306 A:middle
and off screen at all
times, getting the sense

00:01:00.306 --> 00:01:01.936 A:middle
of being pulled on
and off of the screen.

00:01:02.836 --> 00:01:06.166 A:middle
We use custom UI in a lot
of places across the system,

00:01:06.646 --> 00:01:08.056 A:middle
and you might be
thinking to yourself,

00:01:08.316 --> 00:01:10.636 A:middle
"I want to build really cool
stuff like this as well."

00:01:11.116 --> 00:01:12.236 A:middle
There's some things
that you should think

00:01:12.236 --> 00:01:15.196 A:middle
about that are questions we
also like to ask ourselves

00:01:15.546 --> 00:01:18.426 A:middle
when creating new pieces of
UI for the operating system.

00:01:19.516 --> 00:01:21.626 A:middle
The first thing that you
should think about is

00:01:21.626 --> 00:01:23.106 A:middle
where are you going
to use this UI?

00:01:23.106 --> 00:01:25.786 A:middle
How does this fit into
your app and what kind

00:01:25.836 --> 00:01:28.756 A:middle
of purpose does it serve for
your users and your customers?

00:01:30.096 --> 00:01:32.426 A:middle
Sometimes you want to
create UI that needs

00:01:32.426 --> 00:01:33.776 A:middle
to represent multiple states.

00:01:34.436 --> 00:01:36.956 A:middle
For example you might be
creating a download control

00:01:36.956 --> 00:01:40.706 A:middle
that needs to have states
like in idle, downloading,

00:01:40.956 --> 00:01:43.606 A:middle
in progress, cancelled
and complete states.

00:01:44.156 --> 00:01:46.976 A:middle
So you want to think about those
and think about how to design

00:01:47.066 --> 00:01:48.906 A:middle
and craft your control in a way

00:01:48.906 --> 00:01:53.156 A:middle
that supports those different
states it's intended for.

00:01:53.976 --> 00:01:55.566 A:middle
You also want to think
about whether you're going

00:01:55.566 --> 00:01:57.786 A:middle
to share this control
or this piece of UI

00:01:57.786 --> 00:01:59.196 A:middle
across several applications.

00:01:59.956 --> 00:02:02.956 A:middle
Starting in iOS 8 you can
create frameworks for your app,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:01:59.956 --> 00:02:02.956 A:middle
Starting in iOS 8 you can
create frameworks for your app,

00:02:02.996 --> 00:02:05.806 A:middle
which are a great way to
share code between apps

00:02:06.306 --> 00:02:09.015 A:middle
that your team is creating or
even release it to the public

00:02:09.545 --> 00:02:11.986 A:middle
to help other people use the
same kind of pieces of UI.

00:02:13.006 --> 00:02:15.956 A:middle
And then the last thing
that you might want to think

00:02:15.956 --> 00:02:19.006 A:middle
about are what pieces
of API can you leverage

00:02:19.006 --> 00:02:20.196 A:middle
to make your job easier?

00:02:20.756 --> 00:02:24.406 A:middle
A lot of times we have
UI or controls in UIKit

00:02:24.406 --> 00:02:27.376 A:middle
that will make it very easy
for you to create custom things

00:02:27.576 --> 00:02:29.156 A:middle
without having to subclass code.

00:02:30.426 --> 00:02:33.286 A:middle
So what are some APIs that you
might find useful if you were

00:02:33.286 --> 00:02:36.696 A:middle
to want to take advantage
of things we offer in UIKit?

00:02:37.626 --> 00:02:39.516 A:middle
One of those is the
UIAppearance system.

00:02:40.156 --> 00:02:41.576 A:middle
UIAppearance allows you

00:02:41.576 --> 00:02:43.356 A:middle
to configure certain
characteristics

00:02:43.646 --> 00:02:46.906 A:middle
of the default UIKit controls
without having to subclass them.

00:02:46.906 --> 00:02:51.356 A:middle
One of the most popular uses for
UIAppearance is the tint color

00:02:51.746 --> 00:02:54.366 A:middle
which allows you to configure
the color of controls

00:02:54.366 --> 00:02:57.856 A:middle
that we provide as part of UIKit
without having to subclass them.

00:02:59.226 --> 00:03:00.746 A:middle
One particularly useful piece


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:59.226 --> 00:03:00.746 A:middle
One particularly useful piece

00:03:00.746 --> 00:03:04.216 A:middle
of the UIAppearance system
is the UIImageRenderingMode.

00:03:04.756 --> 00:03:07.566 A:middle
This is something that we
introduced in iOS 7 last year,

00:03:07.566 --> 00:03:09.926 A:middle
that allows you to
provide a single image

00:03:09.926 --> 00:03:11.076 A:middle
into your application.

00:03:11.786 --> 00:03:13.846 A:middle
We take a look at the alpha
channel from that image

00:03:14.056 --> 00:03:15.576 A:middle
and can apply tint colors to it.

00:03:16.176 --> 00:03:17.596 A:middle
So if you would like
to change the color

00:03:17.596 --> 00:03:19.776 A:middle
of this image during
your app's lifecycle

00:03:20.236 --> 00:03:22.706 A:middle
or if your design team would
like to change the tint color

00:03:22.706 --> 00:03:25.296 A:middle
of your application while
it's in development it's very,

00:03:25.296 --> 00:03:28.886 A:middle
very easy to apply
universally across your app.

00:03:29.596 --> 00:03:32.186 A:middle
We introduced Dynamic
Type with iOS 7

00:03:32.626 --> 00:03:33.956 A:middle
which gives you a
really great way

00:03:33.956 --> 00:03:37.666 A:middle
to respect your users request
for larger or smaller type

00:03:37.826 --> 00:03:39.896 A:middle
across the system
and it's important

00:03:39.896 --> 00:03:42.716 A:middle
that you do the best you can
to honor those preferences

00:03:42.716 --> 00:03:47.366 A:middle
to help things be more
legible for your users.

00:03:47.666 --> 00:03:49.776 A:middle
Accessibility is a
critical part of iOS.

00:03:50.276 --> 00:03:53.306 A:middle
We care very deeply about making
sure our operating system is

00:03:53.306 --> 00:03:55.366 A:middle
accessible to as many
people as possible

00:03:55.886 --> 00:03:58.946 A:middle
and there's some very powerful
APIs around accessibility

00:03:59.306 --> 00:04:01.596 A:middle
that are important for
you to use if you decide


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:59.306 --> 00:04:01.596 A:middle
that are important for
you to use if you decide

00:04:01.596 --> 00:04:03.596 A:middle
to build custom UI
in your application.

00:04:04.456 --> 00:04:09.006 A:middle
There's no reason to not support
accessibility in your app.

00:04:09.006 --> 00:04:10.286 A:middle
And finally localization,

00:04:10.436 --> 00:04:12.636 A:middle
another very critical
part of iOS.

00:04:13.496 --> 00:04:16.596 A:middle
We really on localization to
extend iOS to as many customers

00:04:16.596 --> 00:04:20.156 A:middle
as possible and there's some
new localization tools in iOS 8

00:04:20.426 --> 00:04:21.755 A:middle
that make this even
easier for you.

00:04:22.406 --> 00:04:26.256 A:middle
Beyond those I'd like to
introduce four new topics today.

00:04:27.166 --> 00:04:29.816 A:middle
The first is we're going to
talk about spring animations,

00:04:30.256 --> 00:04:32.596 A:middle
which are a great way to
make your controls feel

00:04:32.596 --> 00:04:33.796 A:middle
like a native part of iOS.

00:04:35.086 --> 00:04:36.896 A:middle
The next thing are
some new techniques

00:04:36.896 --> 00:04:38.296 A:middle
for vibrancy and blur.

00:04:39.666 --> 00:04:42.006 A:middle
After that we're going to
talk about CAShapeLayers.

00:04:42.806 --> 00:04:45.416 A:middle
CAShapeLayers are a great way
that you can draw custom UI

00:04:45.416 --> 00:04:48.406 A:middle
within your application
and animate changes to it.

00:04:49.186 --> 00:04:50.856 A:middle
And then finally,
we're going to talk

00:04:50.856 --> 00:04:52.916 A:middle
about Dynamic Core
Animation behaviors

00:04:53.416 --> 00:04:55.586 A:middle
and how you can make changes
and have even more control

00:04:55.586 --> 00:04:57.646 A:middle
than you may realize
over the behaviors

00:04:57.646 --> 00:04:59.566 A:middle
that Core Animation
provides today.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:00.986 --> 00:05:02.996 A:middle
Let's get started with
Spring Animations.

00:05:04.366 --> 00:05:05.626 A:middle
The first thing to
understand is you need

00:05:05.626 --> 00:05:08.176 A:middle
to understand what a
Spring Animation is,

00:05:08.686 --> 00:05:10.626 A:middle
and you probably think
of a Spring Animation

00:05:10.906 --> 00:05:13.046 A:middle
as a bouncing effect
that mimics a spring

00:05:13.046 --> 00:05:14.336 A:middle
or a slinky in the real world.

00:05:14.866 --> 00:05:17.896 A:middle
And while you can create
very bouncy effects like that

00:05:17.956 --> 00:05:21.056 A:middle
with Spring Animations that's
not the only things you do

00:05:21.056 --> 00:05:21.556 A:middle
with springs.

00:05:22.726 --> 00:05:24.666 A:middle
Really you can think
about Spring Animations

00:05:25.096 --> 00:05:27.456 A:middle
as a new default timing
curve for animations

00:05:27.456 --> 00:05:31.206 A:middle
within your applications
and in fact we use that --

00:05:31.306 --> 00:05:32.386 A:middle
these new timing curves

00:05:32.836 --> 00:05:36.186 A:middle
for nearly every system
animation starting in iOS 7.

00:05:36.596 --> 00:05:38.656 A:middle
Nearly everything you see
that we provide as part

00:05:38.656 --> 00:05:41.506 A:middle
of iOS is built around
Spring Animations now.

00:05:42.576 --> 00:05:45.516 A:middle
You can actually create new
animations or Spring Animations

00:05:45.516 --> 00:05:48.236 A:middle
in your app without the
use of UIKit Dynamics.

00:05:48.906 --> 00:05:51.126 A:middle
Dynamics is an incredibly
powerful tool

00:05:51.126 --> 00:05:53.446 A:middle
for creating physics
simulations within your app

00:05:53.696 --> 00:05:56.026 A:middle
but there's easier ways to
get at Spring Animations.

00:05:56.836 --> 00:05:59.136 A:middle
In fact the API for
making a Spring Animation

00:05:59.136 --> 00:06:01.176 A:middle
in your app is nearly the same


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:05:59.136 --> 00:06:01.176 A:middle
in your app is nearly the same

00:06:01.446 --> 00:06:04.096 A:middle
as using the animateWithDuration
block that you're used

00:06:04.096 --> 00:06:05.626 A:middle
to using today on UIView.

00:06:07.036 --> 00:06:08.726 A:middle
So what do Spring
Animations look like?

00:06:10.036 --> 00:06:11.826 A:middle
On the, uh, left side

00:06:11.826 --> 00:06:14.606 A:middle
of the screen (for you guys)
I have a red box that's going

00:06:14.606 --> 00:06:17.706 A:middle
to animate using the default
Ease in/Ease out timing curve.

00:06:18.266 --> 00:06:21.366 A:middle
On the right side we have a
blue box that's going to animate

00:06:21.506 --> 00:06:22.556 A:middle
with a Spring Animation.

00:06:23.346 --> 00:06:25.446 A:middle
Both animations will
use the same duration

00:06:25.776 --> 00:06:27.146 A:middle
and they're moving
the same distance.

00:06:27.886 --> 00:06:30.666 A:middle
But when the animations
start you'll notice

00:06:30.796 --> 00:06:33.246 A:middle
that the Spring Animation
very quickly gets up to speed

00:06:33.246 --> 00:06:34.646 A:middle
and then slowly tappers off

00:06:34.646 --> 00:06:36.756 A:middle
as it reaches its
final position compared

00:06:36.756 --> 00:06:38.436 A:middle
to the Ease In/Ease
Out animation.

00:06:39.486 --> 00:06:40.896 A:middle
Let's slow that down
a little bit more

00:06:40.896 --> 00:06:42.336 A:middle
so you can take a closer look.

00:06:43.646 --> 00:06:48.056 A:middle
You can see when the animation
begins the Spring Animation

00:06:48.056 --> 00:06:49.226 A:middle
quickly moves up to speed

00:06:49.226 --> 00:06:50.756 A:middle
and then spends a
considerable amount

00:06:50.756 --> 00:06:53.716 A:middle
of its animation duration
reaching that final position,

00:06:53.716 --> 00:06:54.956 A:middle
its final resting state.

00:06:55.546 --> 00:06:57.066 A:middle
Compare this with Ease in/Ease

00:06:57.066 --> 00:06:59.466 A:middle
out where it takes a little bit
more time to get up to speed.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:01.036 --> 00:07:03.646 A:middle
Another way to visualize
this is to plot what

00:07:03.646 --> 00:07:05.956 A:middle
that timing curve
looks like over time.

00:07:06.706 --> 00:07:10.066 A:middle
You can see a default curve very
slowly builds up its velocity

00:07:10.066 --> 00:07:11.496 A:middle
and then immediately
starts to slow

00:07:11.496 --> 00:07:12.776 A:middle
down its velocity for the end.

00:07:13.996 --> 00:07:15.316 A:middle
Spring Animations, however,

00:07:15.736 --> 00:07:17.596 A:middle
launch up to speed
almost immediately

00:07:17.796 --> 00:07:19.496 A:middle
and then spend the
last third or so

00:07:19.496 --> 00:07:22.206 A:middle
of their duration reaching
what we call the "long tail"

00:07:22.396 --> 00:07:24.356 A:middle
or that slow bit where
we finally reach the

00:07:24.686 --> 00:07:25.466 A:middle
final position.

00:07:26.686 --> 00:07:28.756 A:middle
Where do we use Spring
Animations in iOS today?

00:07:29.586 --> 00:07:32.516 A:middle
One place is launching apps and
opening and closing folders.

00:07:33.646 --> 00:07:34.676 A:middle
If you pay close attention

00:07:34.676 --> 00:07:38.376 A:middle
to these animations you see it
feels like the animation begins

00:07:38.376 --> 00:07:40.736 A:middle
and very quickly shows the
user the content that they're

00:07:40.736 --> 00:07:43.076 A:middle
about to see and
then, when closing,

00:07:43.266 --> 00:07:46.536 A:middle
very quickly pulls the
folder out of the way.

00:07:46.766 --> 00:07:49.306 A:middle
Another place that we like
to use Spring Animations is

00:07:49.306 --> 00:07:51.446 A:middle
in the default push
and pop animations

00:07:51.446 --> 00:07:54.976 A:middle
for navigation controllers, as
well as presenting modal views

00:07:54.976 --> 00:07:56.026 A:middle
on and off of the screen.

00:07:57.866 --> 00:08:00.826 A:middle
And finally, that Siri
suggestions view that we looked


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:57.866 --> 00:08:00.826 A:middle
And finally, that Siri
suggestions view that we looked

00:08:00.826 --> 00:08:03.266 A:middle
at earlier is built
with Spring Animations.

00:08:03.926 --> 00:08:06.716 A:middle
We use a single Spring Animation
to pull the text onscreen,

00:08:06.966 --> 00:08:09.886 A:middle
off the bottom, and allow it to
slowly drift across the screen,

00:08:10.356 --> 00:08:12.766 A:middle
and then a second Spring
Animation to quickly pull it

00:08:12.766 --> 00:08:15.686 A:middle
out of the way, making room
for the next set of strings.

00:08:16.256 --> 00:08:19.916 A:middle
What does the API look
like for Spring Animations?

00:08:20.956 --> 00:08:23.586 A:middle
It's -- like I said, there's
a single method on UIView

00:08:23.876 --> 00:08:25.596 A:middle
that makes this really
straightforward for you

00:08:25.596 --> 00:08:28.706 A:middle
to take advantage of Spring
Animations in your app.

00:08:28.846 --> 00:08:30.636 A:middle
Many of these parameters
look familiar to you.

00:08:31.256 --> 00:08:33.606 A:middle
But I'd like to call out
the two that are unique

00:08:33.606 --> 00:08:36.256 A:middle
to Spring Animations and
those are the damping

00:08:36.256 --> 00:08:38.775 A:middle
and initialSpringVelocity
parameters.

00:08:39.775 --> 00:08:41.936 A:middle
Damping takes a value
from 0 to 1

00:08:42.196 --> 00:08:44.556 A:middle
and controls how much
resistance the spring has

00:08:44.556 --> 00:08:46.516 A:middle
to completing the
animation at the end.

00:08:47.316 --> 00:08:49.536 A:middle
The initialSpringVelocity
is used

00:08:49.536 --> 00:08:52.166 A:middle
to give the animation a
kick to push the object

00:08:52.166 --> 00:08:53.786 A:middle
into the animation curve.

00:08:54.446 --> 00:08:56.696 A:middle
You can also use it to
synchronize the animation

00:08:56.896 --> 00:08:58.166 A:middle
with something that's
in flight today.

00:08:58.946 --> 00:09:01.696 A:middle
Let's take a look at how these
different values have an effect


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:58.946 --> 00:09:01.696 A:middle
Let's take a look at how these
different values have an effect

00:09:01.836 --> 00:09:02.876 A:middle
on Spring Animations.

00:09:03.356 --> 00:09:08.976 A:middle
We're going to start out with
the same blue box and a damping

00:09:08.976 --> 00:09:12.246 A:middle
of 0.1, and you can see when the
animation completes there's a

00:09:12.246 --> 00:09:13.996 A:middle
lot of oscillation at the end.

00:09:13.996 --> 00:09:16.946 A:middle
It feels like you would expect a
spring to be in the real world.

00:09:17.676 --> 00:09:18.746 A:middle
You might want this effect...

00:09:18.976 --> 00:09:19.876 A:middle
but you might not.

00:09:20.886 --> 00:09:22.526 A:middle
By stepping the damping
up to something

00:09:22.526 --> 00:09:25.906 A:middle
like 0.5 you can see we
considerably reduce how much

00:09:25.906 --> 00:09:28.006 A:middle
oscillation we get
with this animation.

00:09:28.466 --> 00:09:30.196 A:middle
There's still a fair amount
of bouncing at the end

00:09:30.486 --> 00:09:31.606 A:middle
but it's much more controlled.

00:09:33.156 --> 00:09:36.156 A:middle
Bringing the damping
up to 0.8 reduces most

00:09:36.156 --> 00:09:36.996 A:middle
of that damping effect.

00:09:37.556 --> 00:09:39.546 A:middle
You can see there's a very
small bounce back at the end

00:09:39.546 --> 00:09:42.926 A:middle
of the animation but for the
most part the animation just

00:09:43.016 --> 00:09:44.056 A:middle
smoothly reaches the end.

00:09:45.396 --> 00:09:46.706 A:middle
And finally bringing the damping

00:09:46.706 --> 00:09:49.966 A:middle
up to 1.0 gives us no
oscillation at the end.

00:09:49.966 --> 00:09:50.996 A:middle
It just smoothly reaches

00:09:50.996 --> 00:09:53.296 A:middle
that final position
giving a very nice,

00:09:53.506 --> 00:09:54.896 A:middle
fast feeling to the animation.

00:09:54.896 --> 00:09:58.986 A:middle
So let's bring in the
initial velocity parameter.

00:09:59.966 --> 00:10:01.296 A:middle
We're going to leave
damping the same


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:09:59.966 --> 00:10:01.296 A:middle
We're going to leave
damping the same

00:10:01.696 --> 00:10:03.586 A:middle
but give our spring
a much stronger kick

00:10:03.656 --> 00:10:04.606 A:middle
to start the animation.

00:10:05.246 --> 00:10:07.726 A:middle
You can see it almost
immediately launches the box

00:10:07.726 --> 00:10:10.856 A:middle
past its first position and
actually overcomes the spring

00:10:10.856 --> 00:10:13.976 A:middle
to have it bounce back
a little bit at the end.

00:10:14.046 --> 00:10:17.186 A:middle
An even stronger initial
velocity can blow even further

00:10:17.186 --> 00:10:20.906 A:middle
past that final position but the
damping value very quickly pulls

00:10:20.906 --> 00:10:21.596 A:middle
it into rest.

00:10:22.736 --> 00:10:24.586 A:middle
And then finally we
can combine these

00:10:24.876 --> 00:10:27.856 A:middle
to make very unique effects
giving us a damping value

00:10:27.856 --> 00:10:30.786 A:middle
that resists oscillation
and an initial velocity

00:10:30.936 --> 00:10:33.036 A:middle
to give a nice fast
kick to our spring.

00:10:33.766 --> 00:10:36.106 A:middle
So where would you want to think

00:10:36.106 --> 00:10:38.536 A:middle
about using Spring
Animations in your application?

00:10:39.336 --> 00:10:42.366 A:middle
They're a fantastic
substitute for linear animations

00:10:42.636 --> 00:10:43.686 A:middle
that you're used to using

00:10:44.066 --> 00:10:46.236 A:middle
with the current UIView
animateWithDuration.

00:10:47.056 --> 00:10:49.916 A:middle
In fact, any place that
you would like to fit

00:10:49.916 --> 00:10:51.446 A:middle
into the native UIKit controls

00:10:51.446 --> 00:10:54.586 A:middle
that we provide you should
consider using Spring Animations

00:10:54.636 --> 00:10:58.026 A:middle
instead, because nearly every
animation that's part of UIKit,

00:10:58.076 --> 00:11:00.966 A:middle
that's part of the OS, is
built around Spring Animations.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:58.076 --> 00:11:00.966 A:middle
that's part of the OS, is
built around Spring Animations.

00:11:02.396 --> 00:11:05.786 A:middle
Spring Animations also
give your controls

00:11:05.786 --> 00:11:08.176 A:middle
and your animations a more
natural feeling to the users,

00:11:08.556 --> 00:11:10.156 A:middle
because springs are
something that are part

00:11:10.156 --> 00:11:11.326 A:middle
of the real world around us.

00:11:12.386 --> 00:11:14.166 A:middle
It's also important
to keep in mind

00:11:14.636 --> 00:11:15.966 A:middle
that while I've showed
you examples

00:11:15.966 --> 00:11:18.986 A:middle
with the position property
you can use Spring Animations

00:11:19.186 --> 00:11:21.646 A:middle
to apply to any animatable
property in UIKit.

00:11:22.216 --> 00:11:24.856 A:middle
That means if you want to
have the alpha for your layers

00:11:24.856 --> 00:11:27.926 A:middle
or your views change you can do
that on a spring timing curve.

00:11:29.416 --> 00:11:31.896 A:middle
I have a demo application put
together and let's take a look

00:11:31.896 --> 00:11:33.696 A:middle
at what Spring Animations
can do for us there.

00:11:34.076 --> 00:11:36.686 A:middle
So this is my demo application.

00:11:37.106 --> 00:11:39.946 A:middle
I have this very nice
rainbow gradient background

00:11:39.946 --> 00:11:41.686 A:middle
and then a control
bar at the bottom

00:11:41.686 --> 00:11:43.726 A:middle
where I have some custom
controls that I can use

00:11:43.726 --> 00:11:46.346 A:middle
to configure that
gradient's rendering.

00:11:46.686 --> 00:11:47.936 A:middle
I can change the
number of colors

00:11:48.556 --> 00:11:51.116 A:middle
and I can also pick
how many colors repeat

00:11:51.116 --> 00:11:51.856 A:middle
within the gradient.

00:11:52.946 --> 00:11:56.146 A:middle
Now these controls are currently
being animated on and off screen

00:11:56.146 --> 00:11:57.886 A:middle
with the default Ease in/Ease

00:11:57.886 --> 00:12:00.546 A:middle
out timing curve
and it feels very...


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:57.886 --> 00:12:00.546 A:middle
out timing curve
and it feels very...

00:12:00.546 --> 00:12:03.836 A:middle
very normal, but it also feels
like there's a lot of time spent

00:12:04.086 --> 00:12:05.356 A:middle
with the control
getting in the way

00:12:05.356 --> 00:12:07.406 A:middle
of the user actually
interacting with it.

00:12:08.146 --> 00:12:11.566 A:middle
So I'm going to substitute in
a pair of spring animations.

00:12:12.676 --> 00:12:15.416 A:middle
So in my demo code I
have a couple of blocks

00:12:15.416 --> 00:12:18.006 A:middle
that I'm doing animations in
already that I use to present

00:12:18.166 --> 00:12:19.306 A:middle
and dismiss the modal view,

00:12:19.306 --> 00:12:23.576 A:middle
and you can see here I'm already
using UIView animateWithDuration

00:12:24.136 --> 00:12:25.796 A:middle
and passing it in
Animation Block.

00:12:26.426 --> 00:12:29.286 A:middle
What I'm going to
do is just replace

00:12:29.286 --> 00:12:31.016 A:middle
that with a Spring Animation.

00:12:31.646 --> 00:12:34.256 A:middle
You can see the API is almost
exactly what we had before,

00:12:34.256 --> 00:12:36.206 A:middle
just with a couple
of extra arguments.

00:12:37.066 --> 00:12:40.726 A:middle
For my presentation we're going
to use a damping value of .75

00:12:40.786 --> 00:12:42.366 A:middle
and if you remember the boxes

00:12:42.366 --> 00:12:45.116 A:middle
on screen this will give us
just a little bit of oscillation

00:12:45.116 --> 00:12:47.136 A:middle
or a little bit of bouncing
at the end of the animation.

00:12:47.866 --> 00:12:50.766 A:middle
I'm also going to use an
initial spring velocity of 10

00:12:51.116 --> 00:12:52.676 A:middle
to give it even more
of a kick to get

00:12:52.676 --> 00:12:54.026 A:middle
that control on screen quickly.

00:12:56.116 --> 00:12:59.026 A:middle
We're also going to take a
look at my dismiss animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:00.326 --> 00:13:03.176 A:middle
Again right now we're using
the same animateWithDuration

00:13:03.766 --> 00:13:06.686 A:middle
and we're going to substitute
in another Spring Animation.

00:13:07.376 --> 00:13:10.296 A:middle
For the dismiss I'm going to
use a very strong damping of 1

00:13:10.296 --> 00:13:11.956 A:middle
because I don't really
want it to be bouncing

00:13:11.956 --> 00:13:13.796 A:middle
when it reaches its final
position in the dock

00:13:14.346 --> 00:13:16.286 A:middle
and I'm going to give it
no initial velocity --

00:13:16.436 --> 00:13:18.316 A:middle
to just let the spring
itself pull

00:13:18.316 --> 00:13:19.916 A:middle
that view back into the dock.

00:13:20.836 --> 00:13:22.306 A:middle
With those changes
let's take a look

00:13:22.306 --> 00:13:23.306 A:middle
at what that does to the app.

00:13:24.556 --> 00:13:27.136 A:middle
Just as a quick reminder: this
is what it looks like right now,

00:13:27.296 --> 00:13:28.576 A:middle
without the Spring Animations.

00:13:29.716 --> 00:13:31.456 A:middle
The control very
smoothly slides in and out

00:13:31.456 --> 00:13:33.756 A:middle
but it still feels a little bit
like it's getting in the way.

00:13:33.756 --> 00:13:36.206 A:middle
When we switch over to a version

00:13:36.206 --> 00:13:39.426 A:middle
with the Spring Animations you
can see there's a very different

00:13:39.636 --> 00:13:40.386 A:middle
but subtle effect.

00:13:41.446 --> 00:13:44.056 A:middle
The spring quickly
pulls the view onscreen.

00:13:44.246 --> 00:13:46.226 A:middle
You can see that very small
bounce when it presents,

00:13:46.946 --> 00:13:49.576 A:middle
but it feels like it gets on
and off the screen and available

00:13:49.576 --> 00:13:51.766 A:middle
to the user much faster
than it did before.

00:13:52.846 --> 00:13:54.746 A:middle
And that's how we can
use Spring Animations

00:13:54.746 --> 00:13:58.276 A:middle
to bring a new feeling to
animations within your app.

00:13:58.596 --> 00:13:59.676 A:middle
The next thing I'd like to talk

00:13:59.676 --> 00:14:02.556 A:middle
about is something
called UIVisualEffectView.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.676 --> 00:14:02.556 A:middle
about is something
called UIVisualEffectView.

00:14:03.456 --> 00:14:06.286 A:middle
Before we get to that however,
I'd like to spend a couple

00:14:06.286 --> 00:14:09.456 A:middle
of minutes talking about
how we render things on iOS.

00:14:10.706 --> 00:14:12.436 A:middle
Some of the APIs that
we're going to be talking

00:14:12.436 --> 00:14:14.856 A:middle
about today can have
a dramatic effect

00:14:15.356 --> 00:14:17.326 A:middle
on the rendering performance
of your application

00:14:17.526 --> 00:14:20.096 A:middle
and it's important to understand
how they actually work

00:14:20.096 --> 00:14:21.046 A:middle
within the rendering system.

00:14:21.116 --> 00:14:24.076 A:middle
So if you were to take a look

00:14:24.076 --> 00:14:27.666 A:middle
at the entire system there's
largely four steps that we take

00:14:27.666 --> 00:14:29.316 A:middle
to render content
for your application.

00:14:30.006 --> 00:14:31.736 A:middle
We give your app a
chance to handle events

00:14:31.796 --> 00:14:34.066 A:middle
and then commit a transaction
to the render server.

00:14:34.786 --> 00:14:37.166 A:middle
The render server, which is
part of the system on iOS,

00:14:37.516 --> 00:14:40.236 A:middle
processes that transaction,
does some more work

00:14:40.236 --> 00:14:42.746 A:middle
and then composites
layers which are handed off

00:14:42.806 --> 00:14:44.166 A:middle
to the GPU to be rendered.

00:14:44.826 --> 00:14:46.516 A:middle
The GPU will take
its own block of time

00:14:46.516 --> 00:14:49.746 A:middle
to render all those layers and
then hand it off to the display

00:14:50.146 --> 00:14:51.136 A:middle
to present to your user.

00:14:52.566 --> 00:14:55.186 A:middle
Let's focus in just a little
bit on the steps that we take

00:14:55.386 --> 00:14:56.306 A:middle
within your application.

00:14:57.526 --> 00:15:00.636 A:middle
There's largely four things
that take place within your app.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:57.526 --> 00:15:00.636 A:middle
There's largely four things
that take place within your app.

00:15:01.186 --> 00:15:03.516 A:middle
The first thing we'll
do is do any setup work

00:15:03.666 --> 00:15:05.436 A:middle
and ask your views to
lay themselves out.

00:15:06.276 --> 00:15:08.006 A:middle
If you're using auto
layout we're going

00:15:08.006 --> 00:15:10.856 A:middle
to take the time here to
compute the layout for your app.

00:15:11.076 --> 00:15:13.646 A:middle
If you're doing manual layout
for your views we're going

00:15:13.646 --> 00:15:15.866 A:middle
to call layout subviews
and ask your views

00:15:16.176 --> 00:15:17.206 A:middle
to lay themselves out.

00:15:18.316 --> 00:15:20.916 A:middle
The next thing we'll do is
do any necessary drawing.

00:15:21.416 --> 00:15:23.006 A:middle
If any views need
to draw themselves,

00:15:23.226 --> 00:15:25.796 A:middle
if you've implemented
drawRect on some of your views,

00:15:25.876 --> 00:15:27.196 A:middle
we'll ask that to occur here.

00:15:27.626 --> 00:15:30.636 A:middle
We'll also do some string
drawing at this time.

00:15:30.936 --> 00:15:33.826 A:middle
Next we're going to give Core
Animation a little bit of time

00:15:34.026 --> 00:15:36.786 A:middle
to prepare some images if it
needs to decode or convert them

00:15:36.786 --> 00:15:39.626 A:middle
for rendering before we
finally package up the layers

00:15:39.866 --> 00:15:41.286 A:middle
and send them off to
the render server.

00:15:42.016 --> 00:15:44.046 A:middle
This is a very, very
broad overview

00:15:44.366 --> 00:15:45.586 A:middle
of how the render server works.

00:15:46.286 --> 00:15:48.626 A:middle
If you'd like to find out more
there was a fantastic talk

00:15:48.626 --> 00:15:50.796 A:middle
yesterday by the
performance team

00:15:50.956 --> 00:15:52.566 A:middle
that I would really
encourage you to check out.

00:15:52.736 --> 00:15:54.166 A:middle
They go into a lot
of great detail

00:15:54.496 --> 00:15:56.006 A:middle
on how all these
depths actually work.

00:15:56.006 --> 00:15:59.526 A:middle
So with that quick
understanding, let's go back

00:15:59.526 --> 00:16:00.836 A:middle
to UIVisualEffectView.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:59.526 --> 00:16:00.836 A:middle
to UIVisualEffectView.

00:16:02.036 --> 00:16:06.146 A:middle
Last year at WWDC we
introduced a new API called

00:16:06.146 --> 00:16:09.126 A:middle
drawViewHierarchyInRect,
and a system to go with that

00:16:09.126 --> 00:16:12.446 A:middle
for creating fast, static blur
effects within your application

00:16:13.066 --> 00:16:15.046 A:middle
and we continue to recommend
you to take advantage

00:16:15.046 --> 00:16:17.486 A:middle
of this technique if the
content that you want

00:16:17.486 --> 00:16:21.026 A:middle
to show behind the blur is not
actively changing for the user.

00:16:21.536 --> 00:16:24.686 A:middle
The reason for this is it's
just incredibly well optimized

00:16:24.686 --> 00:16:25.516 A:middle
for your application.

00:16:26.176 --> 00:16:29.376 A:middle
So we encourage you to continue
using that as much as possible.

00:16:30.216 --> 00:16:32.086 A:middle
However, we heard
that one or two

00:16:32.086 --> 00:16:33.986 A:middle
of you wanted something a
little bit more advanced.

00:16:34.236 --> 00:16:37.406 A:middle
You wanted to do live blur
effects like we have across iOS,

00:16:38.346 --> 00:16:41.666 A:middle
and to that end we are
introducing UIVisualEffectView.

00:16:42.746 --> 00:16:46.206 A:middle
UIVisualEffectView
creates two effect types.

00:16:47.126 --> 00:16:49.676 A:middle
It's a technique for creating
live blurs in your application

00:16:50.206 --> 00:16:51.696 A:middle
and for creating
vibrancy effects.

00:16:52.746 --> 00:16:55.276 A:middle
Let's take a look at what both
of those effects actually mean.

00:16:56.026 --> 00:16:59.176 A:middle
A live blur effect is exactly
what the name suggests.

00:16:59.826 --> 00:17:02.956 A:middle
It's where you can have content
behind a view that is blurred,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:59.826 --> 00:17:02.956 A:middle
It's where you can have content
behind a view that is blurred,

00:17:03.096 --> 00:17:05.286 A:middle
and has some color effects
changed to it as well,

00:17:05.665 --> 00:17:07.425 A:middle
all rendered in real
time on your device.

00:17:09.336 --> 00:17:12.965 A:middle
Vibrancy is used to create
content that is highly legible

00:17:12.965 --> 00:17:14.925 A:middle
at all times on top of a blur.

00:17:15.685 --> 00:17:18.766 A:middle
In the screenshot you see
right now the Facetime icon

00:17:18.766 --> 00:17:22.665 A:middle
and the text are being rendered
with vibrancy and you can see

00:17:22.665 --> 00:17:25.986 A:middle
that that text is always
legible no matter what colors

00:17:25.986 --> 00:17:30.166 A:middle
or content are being
blurred behind it.

00:17:31.516 --> 00:17:37.876 A:middle
[ Applause ]

00:17:38.376 --> 00:17:40.156 A:middle
We have three styles
for blur effects.

00:17:41.456 --> 00:17:42.876 A:middle
The first of those
is a Dark blur.

00:17:43.376 --> 00:17:45.286 A:middle
You can see that we're
darkening the background here,

00:17:45.586 --> 00:17:47.806 A:middle
we're also desaturating
the colors a little bit.

00:17:48.116 --> 00:17:49.966 A:middle
It's more than just
changing a blur.

00:17:50.876 --> 00:17:53.716 A:middle
A Light blur effect is
almost the opposite of that.

00:17:53.956 --> 00:17:56.146 A:middle
Again we're blurring, but
we're starting to wash out some

00:17:56.146 --> 00:17:57.246 A:middle
of the colors as well.

00:17:58.036 --> 00:18:00.236 A:middle
Finally we introduce
ExtraLight blur,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:58.036 --> 00:18:00.236 A:middle
Finally we introduce
ExtraLight blur,

00:18:00.596 --> 00:18:03.096 A:middle
which almost entirely
desaturates the content

00:18:03.096 --> 00:18:04.596 A:middle
and blows out most
of the colors,

00:18:04.966 --> 00:18:07.406 A:middle
but still gives you a blur
effect to give you a sense

00:18:07.406 --> 00:18:11.386 A:middle
of what content is
behind the view.

00:18:12.026 --> 00:18:16.026 A:middle
So what steps do we make to
take -- to create a blur effect?

00:18:16.026 --> 00:18:18.356 A:middle
As I said, it's more than
just a simple Gaussian blur

00:18:18.356 --> 00:18:19.326 A:middle
within your application.

00:18:20.216 --> 00:18:22.516 A:middle
The first thing we do when we
create a blur effect is we're

00:18:22.516 --> 00:18:23.766 A:middle
going to downsample all

00:18:23.766 --> 00:18:25.716 A:middle
of the content that's
waiting to be blurred.

00:18:26.446 --> 00:18:28.416 A:middle
The reason we're doing
that is for performance.

00:18:29.086 --> 00:18:31.416 A:middle
You aren't going to see the
fine details of the view

00:18:31.596 --> 00:18:32.536 A:middle
when we're going to blur it.

00:18:33.056 --> 00:18:34.356 A:middle
So we go ahead and downsample

00:18:34.356 --> 00:18:37.226 A:middle
that to a much smaller size
before applying blur effect.

00:18:38.346 --> 00:18:41.276 A:middle
The next thing we do is modify
the colors and this is based

00:18:41.276 --> 00:18:42.896 A:middle
on what blur effect
you requested.

00:18:43.316 --> 00:18:45.876 A:middle
We'll either desaturate
or oversaturate colors

00:18:46.186 --> 00:18:47.496 A:middle
to create the various styles.

00:18:48.516 --> 00:18:51.666 A:middle
And then the final step is
we're going to compute the blurs

00:18:51.966 --> 00:18:54.246 A:middle
and then composite this
back into your application.

00:18:55.756 --> 00:18:58.346 A:middle
Vibrancy effect, as I
said, is a technique

00:18:58.346 --> 00:18:59.666 A:middle
for making legible content

00:18:59.976 --> 00:19:01.866 A:middle
that is typically
placed on top of a blur.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:59.976 --> 00:19:01.866 A:middle
that is typically
placed on top of a blur.

00:19:02.606 --> 00:19:04.586 A:middle
And we create this with
a few steps as well.

00:19:05.296 --> 00:19:07.336 A:middle
The first thing we'll do
is boost the saturation

00:19:07.336 --> 00:19:09.236 A:middle
of your content and
then we're going

00:19:09.236 --> 00:19:11.726 A:middle
to apply a custom blend
mode to the vibrant content

00:19:12.376 --> 00:19:16.506 A:middle
and that blend mode is going
to change based on what kind

00:19:16.506 --> 00:19:18.866 A:middle
of blur you expect to
put the vibrant effect

00:19:18.866 --> 00:19:19.646 A:middle
on top of that with.

00:19:20.516 --> 00:19:22.856 A:middle
And for that reason you
need to tell us what kind

00:19:22.856 --> 00:19:25.666 A:middle
of blur you're using when
you create a vibrant effect.

00:19:27.076 --> 00:19:28.626 A:middle
So how do we use this
in your application?

00:19:29.456 --> 00:19:33.056 A:middle
The first thing you'll do is
initialize a new UIVisualEffect,

00:19:33.926 --> 00:19:35.926 A:middle
and you can initialize
either a UIBlurEffect

00:19:36.656 --> 00:19:37.986 A:middle
or a UIVibrancyEffect.

00:19:38.976 --> 00:19:42.406 A:middle
UIVibrancyEffect actually takes
the blur in its initializer

00:19:42.636 --> 00:19:44.636 A:middle
so we know how to create
that vibrancy effect

00:19:44.896 --> 00:19:46.186 A:middle
for the blur you plan to use.

00:19:47.366 --> 00:19:51.246 A:middle
After that you can instantiate
a UIVisualEffectView and pass

00:19:51.476 --> 00:19:53.816 A:middle
that visual effect that
you've just created.

00:19:54.996 --> 00:19:59.256 A:middle
Finally, the UIVisualEffectView
provides a content view

00:19:59.556 --> 00:20:01.776 A:middle
and you should add your
subviews to that content view.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:59.556 --> 00:20:01.776 A:middle
and you should add your
subviews to that content view.

00:20:02.106 --> 00:20:05.016 A:middle
That way we know what views
you want to have manipulated

00:20:05.016 --> 00:20:05.936 A:middle
or effected by the
visual effects.

00:20:06.086 --> 00:20:09.646 A:middle
There's a couple of
things you can do

00:20:09.646 --> 00:20:12.106 A:middle
to customize VisualEffectViews
in your application.

00:20:12.996 --> 00:20:15.836 A:middle
The first thing you can do
is you can tint the blurs

00:20:16.336 --> 00:20:18.166 A:middle
by changing the backgroundColor
property

00:20:18.496 --> 00:20:20.356 A:middle
on the VisualEffectView's
contentView.

00:20:20.926 --> 00:20:23.436 A:middle
So if you would like to
create a dark red blur effect,

00:20:23.436 --> 00:20:26.206 A:middle
for example, you
can make a dark blur

00:20:26.206 --> 00:20:29.846 A:middle
and then set the contentView's
backgroundColor to a red color

00:20:29.846 --> 00:20:31.166 A:middle
to have the desired effect.

00:20:32.446 --> 00:20:35.356 A:middle
You can also do some
animations to the frame changes

00:20:35.356 --> 00:20:37.956 A:middle
within your application
to change the position

00:20:37.956 --> 00:20:39.026 A:middle
and size of the blur effect.

00:20:40.356 --> 00:20:43.566 A:middle
Now visual effects also come
with a number of caveats

00:20:43.606 --> 00:20:45.566 A:middle
when you consider using
them in your application.

00:20:46.606 --> 00:20:49.246 A:middle
The first of those is the
idea of setting alpha.

00:20:50.156 --> 00:20:52.416 A:middle
If you think about the
purposes of blurs in alpha,

00:20:52.776 --> 00:20:53.966 A:middle
they're at odds with each other.

00:20:54.626 --> 00:20:56.806 A:middle
You apply alpha to
a view in order

00:20:56.806 --> 00:20:59.106 A:middle
to make content legible
behind another view;

00:20:59.106 --> 00:21:00.146 A:middle
to see what's back there.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:59.106 --> 00:21:00.146 A:middle
to see what's back there.

00:21:00.866 --> 00:21:03.336 A:middle
You use a blur effect to show
that there's something there

00:21:03.336 --> 00:21:04.916 A:middle
but you're not interested
in the details.

00:21:05.646 --> 00:21:09.406 A:middle
So it's not really sensical
to apply an alpha to a blur

00:21:09.406 --> 00:21:12.146 A:middle
at the same time and for
that reason we're going

00:21:12.146 --> 00:21:14.146 A:middle
to drop the blur feature if
you try to change the alpha.

00:21:15.416 --> 00:21:19.146 A:middle
You should also be very cautious
about placing VisualEffectViews

00:21:19.536 --> 00:21:21.096 A:middle
in a view hierarchy
that uses masks.

00:21:21.976 --> 00:21:23.576 A:middle
They're not going to
work very well together.

00:21:24.866 --> 00:21:27.196 A:middle
You also should be conscious
of whether you're going to --

00:21:27.276 --> 00:21:29.326 A:middle
if you place a Visual
Effect View in groups,

00:21:29.636 --> 00:21:31.136 A:middle
they can have an
impact on its rendering:

00:21:31.596 --> 00:21:34.026 A:middle
either animation groups
or opacity groups.

00:21:34.856 --> 00:21:37.556 A:middle
It's very easy to have -- to
forget that you have, say,

00:21:37.556 --> 00:21:39.806 A:middle
a blur or a vibrancy
effect really deep

00:21:39.806 --> 00:21:42.526 A:middle
in your view hierarchy and
then, when you add an animation

00:21:42.526 --> 00:21:44.236 A:middle
over here, forget that
it's going to pick

00:21:44.236 --> 00:21:46.866 A:middle
up that VisualEffectView and
try to make changes to it.

00:21:48.726 --> 00:21:50.146 A:middle
So I started this
section by talking

00:21:50.146 --> 00:21:52.036 A:middle
about the rendering
pipeline and I'd

00:21:52.036 --> 00:21:54.876 A:middle
like to highlight what
impact VisualEffectViews have

00:21:55.336 --> 00:21:56.726 A:middle
on the rendering of
your application.

00:21:57.816 --> 00:21:58.416 A:middle
All of the work

00:21:58.416 --> 00:22:01.396 A:middle
for VisualEffectViews is
having an impact on the GPU.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.416 --> 00:22:01.396 A:middle
for VisualEffectViews is
having an impact on the GPU.

00:22:02.086 --> 00:22:05.926 A:middle
So if we look at a standard view
in your application it's going

00:22:05.926 --> 00:22:09.426 A:middle
to take a pretty typical amount
of time to render on the GPU.

00:22:10.326 --> 00:22:13.186 A:middle
In order to create blur
effects we have to take all

00:22:13.186 --> 00:22:14.536 A:middle
of those steps that
were outlined

00:22:14.916 --> 00:22:16.676 A:middle
and render those offscreen.

00:22:17.166 --> 00:22:19.206 A:middle
It's just the way that we
have to create blur effects.

00:22:19.576 --> 00:22:20.866 A:middle
So we're going to ask the GPU

00:22:20.866 --> 00:22:22.976 A:middle
to stop rendering
your app's main views,

00:22:23.166 --> 00:22:25.096 A:middle
and create this blur
effect offscreen,

00:22:25.426 --> 00:22:27.026 A:middle
and then combine
everything back together...

00:22:27.026 --> 00:22:29.926 A:middle
and that can take
considerably more time

00:22:30.076 --> 00:22:32.106 A:middle
than rendering a standard
view without blur effects.

00:22:33.216 --> 00:22:37.166 A:middle
Vibrancy takes additional passes
in addition to the blur effect

00:22:37.166 --> 00:22:38.596 A:middle
that they're placed on top of.

00:22:38.676 --> 00:22:43.066 A:middle
So to add vibrancy into a view
takes even more offscreen time

00:22:43.066 --> 00:22:43.876 A:middle
for your application.

00:22:44.786 --> 00:22:47.876 A:middle
Now to contrast this with
drawViewHierarchyInRect,

00:22:48.896 --> 00:22:51.496 A:middle
we can do that considerably
faster because we don't have

00:22:51.496 --> 00:22:53.786 A:middle
to do all of those
offscreen passes every frame.

00:22:54.576 --> 00:22:57.606 A:middle
So this is why we still strongly
encourage the static blur

00:22:57.606 --> 00:23:00.026 A:middle
techniques from last
year if at all possible.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.606 --> 00:23:00.026 A:middle
techniques from last
year if at all possible.

00:23:00.646 --> 00:23:03.696 A:middle
Let's take a look at how we
can use VisualEffectViews

00:23:03.866 --> 00:23:05.276 A:middle
in that same demo application.

00:23:05.816 --> 00:23:09.526 A:middle
So going back to the demo app,
I still have these controls

00:23:09.526 --> 00:23:12.696 A:middle
that come onscreen and right now
they're just being placed on top

00:23:12.696 --> 00:23:15.956 A:middle
of a dimming view and you can
see I have this white text label

00:23:15.956 --> 00:23:18.846 A:middle
at the bottom that's not
really legible anyway

00:23:18.896 --> 00:23:20.866 A:middle
and it just doesn't
look very interesting.

00:23:21.596 --> 00:23:24.266 A:middle
We're going to use -- we also
have a control bar at the bottom

00:23:24.456 --> 00:23:26.796 A:middle
which is just solid white
right now and kind of feels

00:23:26.796 --> 00:23:29.896 A:middle
out of place on this rich,
colorful gradient background.

00:23:30.146 --> 00:23:31.876 A:middle
So we're going to
use blur effects

00:23:31.876 --> 00:23:33.666 A:middle
and vibrancy effects
to improve this.

00:23:34.566 --> 00:23:38.036 A:middle
So back in my demo application
the first thing we're going

00:23:38.036 --> 00:23:41.106 A:middle
to do is go to the gradient
view controller and we're going

00:23:41.106 --> 00:23:42.966 A:middle
to set up that control bar
at the bottom of the screen.

00:23:44.106 --> 00:23:45.956 A:middle
The control bar is that
white bar at the bottom

00:23:45.956 --> 00:23:48.386 A:middle
with the different controls
in it and we're going

00:23:48.386 --> 00:23:51.426 A:middle
to create an ExtraLight blur
effect, and the key things

00:23:51.426 --> 00:23:54.086 A:middle
that you should take a look
at here are: the first part,

00:23:54.086 --> 00:23:57.666 A:middle
where we create a new UI blur
effect and give it a style.

00:23:58.176 --> 00:24:02.726 A:middle
In this case we're using an
ExtraLight blur effect style.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:58.176 --> 00:24:02.726 A:middle
In this case we're using an
ExtraLight blur effect style.

00:24:02.936 --> 00:24:05.076 A:middle
Next we're going to
create a UIVisualEffectView

00:24:05.516 --> 00:24:07.456 A:middle
and pass it the effect
that we just created,

00:24:07.666 --> 00:24:08.996 A:middle
that ExtraLight blur effect.

00:24:09.626 --> 00:24:12.586 A:middle
And then finally we'll add
this to our view hierarchy.

00:24:14.086 --> 00:24:17.176 A:middle
We're also going to do this
on the clickwheel controller

00:24:17.396 --> 00:24:19.806 A:middle
and I want to do both
the blurred background

00:24:20.406 --> 00:24:21.486 A:middle
and a vibrant title here.

00:24:22.396 --> 00:24:24.336 A:middle
First we're going to make
that blurred background view.

00:24:24.906 --> 00:24:27.966 A:middle
Very similar to before we're
going to make a UI blur effect

00:24:27.966 --> 00:24:29.966 A:middle
but give it the Dark
blur effect style

00:24:30.726 --> 00:24:34.606 A:middle
and then again create a
UIVisualEffectView and pass it

00:24:34.606 --> 00:24:38.506 A:middle
that blur effect that we
just created and then add it

00:24:38.506 --> 00:24:39.276 A:middle
to our view hierarchy.

00:24:40.476 --> 00:24:42.586 A:middle
The next thing we do
is we want to modify

00:24:42.586 --> 00:24:44.306 A:middle
that title label
to use vibrancy.

00:24:44.916 --> 00:24:46.586 A:middle
You can see right now
I'm creating my label

00:24:46.666 --> 00:24:47.996 A:middle
and just giving it
a white color.

00:24:49.546 --> 00:24:52.276 A:middle
It's pretty straightforward to
upgrade that to use vibrancy.

00:24:53.146 --> 00:24:54.936 A:middle
To do that we're going
to make a vibrancy effect

00:24:54.936 --> 00:24:58.156 A:middle
and you notice the initializer
is effectForBlurEffect.

00:24:58.896 --> 00:25:03.776 A:middle
We're going to grab a
reference to the blur effect off


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:24:58.896 --> 00:25:03.776 A:middle
We're going to grab a
reference to the blur effect off

00:25:03.776 --> 00:25:05.766 A:middle
of that backdropView that
we created right up here,

00:25:05.806 --> 00:25:08.986 A:middle
and pass that into the
vibrancy effect because we plan

00:25:08.986 --> 00:25:12.136 A:middle
to composite this title label
on top of that background blur.

00:25:13.536 --> 00:25:15.776 A:middle
Same as before, we'll make
a new UIVisualEffectView

00:25:16.036 --> 00:25:18.076 A:middle
and give it the vibrancy
effect that we just created,

00:25:18.076 --> 00:25:20.736 A:middle
and then down here at
the bottom we're going

00:25:20.736 --> 00:25:23.416 A:middle
to add my title label
to the content view

00:25:23.796 --> 00:25:26.926 A:middle
of that new vibrancyEffectView.

00:25:27.826 --> 00:25:30.536 A:middle
So those are the three steps
I needed to take to add blurs

00:25:30.536 --> 00:25:32.526 A:middle
and vibrancy to the
demo application.

00:25:33.056 --> 00:25:34.376 A:middle
Let's take a look at
what those look like.

00:25:35.506 --> 00:25:37.966 A:middle
You immediately see that we're
picking up that blur effect,

00:25:38.226 --> 00:25:40.276 A:middle
that ExtraLight blur
effect, at the control bar

00:25:40.276 --> 00:25:41.296 A:middle
at the bottom of the screen.

00:25:41.826 --> 00:25:43.986 A:middle
It's reflecting the purple
color of the gradient behind it.

00:25:44.636 --> 00:25:47.396 A:middle
When we bring our controls
onscreen you can see

00:25:47.396 --> 00:25:49.856 A:middle
that we're blurring that
gradient as well as picking

00:25:49.856 --> 00:25:51.906 A:middle
up vibrancy for that
text label at the bottom.

00:25:52.016 --> 00:25:53.256 A:middle
You can see the purple
and the white

00:25:53.256 --> 00:25:54.946 A:middle
from the views behind
it taking place.

00:25:54.946 --> 00:25:57.546 A:middle
Now you're probably thinking,
"Well that's great Brandon,

00:25:57.546 --> 00:25:59.386 A:middle
but you're probably just
faking it with that live blur

00:25:59.386 --> 00:26:00.396 A:middle
or that static blur thing."


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:59.386 --> 00:26:00.396 A:middle
or that static blur thing."

00:26:00.566 --> 00:26:01.646 A:middle
I promise you we're not.

00:26:01.646 --> 00:26:04.576 A:middle
Because if I start scrolling
this you can see the blur

00:26:04.576 --> 00:26:07.716 A:middle
effects are all taking place
in real time and you can see

00:26:07.716 --> 00:26:09.186 A:middle
that the vibrancy
is also picking

00:26:09.186 --> 00:26:12.466 A:middle
up all those really cool
colors behind everything.

00:26:13.626 --> 00:26:15.226 A:middle
You'll also see that
control bar picking

00:26:15.226 --> 00:26:17.476 A:middle
up those colors behind
itself as well.

00:26:18.116 --> 00:26:21.856 A:middle
It's that easy to add vibrancy
and blur to your application.

00:26:22.516 --> 00:26:30.706 A:middle
[ Applause ]

00:26:31.206 --> 00:26:34.846 A:middle
So moving on, next we're going
to talk about CAShapeLayer.

00:26:36.266 --> 00:26:38.896 A:middle
CAShapeLayer is a
really powerful tool

00:26:39.006 --> 00:26:41.826 A:middle
for drawing custom Bézier
paths within your application.

00:26:42.996 --> 00:26:46.146 A:middle
CAShapeLayer, as the name
suggests, is a subclass

00:26:46.146 --> 00:26:49.816 A:middle
of CALayer, which makes it
very, very easy to use in all

00:26:49.816 --> 00:26:53.456 A:middle
of your app's existing view
hierarchies because on iOS all

00:26:53.456 --> 00:26:55.876 A:middle
of your views are already
backed with CALayers.

00:26:56.876 --> 00:27:00.566 A:middle
The other really powerful part
of CAShapeLayer is that all


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:56.876 --> 00:27:00.566 A:middle
The other really powerful part
of CAShapeLayer is that all

00:27:00.566 --> 00:27:01.486 A:middle
of the properties on it

00:27:01.486 --> 00:27:03.626 A:middle
that control its
appearance are animatable.

00:27:04.956 --> 00:27:06.756 A:middle
So where am I going to
use this Shape Layer?

00:27:07.516 --> 00:27:08.866 A:middle
One place is if you were going

00:27:08.866 --> 00:27:11.556 A:middle
to create a download control
similar to the one that you see

00:27:11.556 --> 00:27:13.816 A:middle
in the music app or of
different store apps.

00:27:14.556 --> 00:27:16.106 A:middle
These need to have a
few different states:

00:27:16.656 --> 00:27:19.116 A:middle
one that shows a thinking state
(where there's a ring that's

00:27:19.406 --> 00:27:22.636 A:middle
partially completed, that's
spinning); it shows a state

00:27:22.636 --> 00:27:25.436 A:middle
with a stop; and then it also
shows a download progress (where

00:27:25.436 --> 00:27:28.466 A:middle
it completes the ring,
going from zero to 100%).

00:27:29.226 --> 00:27:30.946 A:middle
This would be a great
thing to draw

00:27:30.946 --> 00:27:32.626 A:middle
with CAShapeLayering
in your application.

00:27:33.746 --> 00:27:36.046 A:middle
I'd like to show you a few of
the more interesting properties

00:27:36.046 --> 00:27:37.056 A:middle
on Shape Layers right now.

00:27:38.386 --> 00:27:40.746 A:middle
The most important one
is the path property.

00:27:41.436 --> 00:27:42.496 A:middle
As the name suggests,

00:27:42.876 --> 00:27:45.356 A:middle
this defines what your shape
layer actually is going

00:27:45.356 --> 00:27:45.816 A:middle
to look like.

00:27:46.686 --> 00:27:50.036 A:middle
You create these by
handing us a CGPathRef.

00:27:50.736 --> 00:27:52.786 A:middle
Personally, I like to
work with UIBezierPath

00:27:53.296 --> 00:27:56.196 A:middle
and then hand off the CGPath
version of that at the end.

00:27:57.106 --> 00:27:59.096 A:middle
So there's a few steps
that we're going to take

00:27:59.096 --> 00:28:00.726 A:middle
to create the curve
that you see onscreen.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.096 --> 00:28:00.726 A:middle
to create the curve
that you see onscreen.

00:28:01.436 --> 00:28:04.106 A:middle
You can think about creating
paths as very similar to drawing

00:28:04.106 --> 00:28:06.386 A:middle
on a piece of paper, where you
move your pencil to a point

00:28:06.386 --> 00:28:09.726 A:middle
and then move the pencil
on the paper to draw lines.

00:28:11.036 --> 00:28:13.996 A:middle
The first thing we're going to
do is move to a specific point

00:28:13.996 --> 00:28:15.106 A:middle
where we want to start the line.

00:28:15.746 --> 00:28:16.836 A:middle
In this case we're
going to start

00:28:16.836 --> 00:28:18.176 A:middle
on the lower left-hand corner.

00:28:19.756 --> 00:28:22.526 A:middle
The next thing we'll do is
add two curves to the point

00:28:23.116 --> 00:28:25.646 A:middle
and you'll notice we pass
this a pair of control points.

00:28:26.366 --> 00:28:29.446 A:middle
Bézier paths are defined
by a point and then a pair

00:28:29.446 --> 00:28:32.396 A:middle
of control handles which you see
in blue on the diagram above.

00:28:32.996 --> 00:28:35.716 A:middle
Those control points
define what the curve looks

00:28:35.716 --> 00:28:37.686 A:middle
like between the first
-- the previous --

00:28:37.966 --> 00:28:38.746 A:middle
and the current point.

00:28:38.896 --> 00:28:42.516 A:middle
So we're going to add two
curves with their control points

00:28:42.516 --> 00:28:46.156 A:middle
to my path and then finally set
that path on my shape layer.

00:28:46.896 --> 00:28:51.406 A:middle
The next set of properties
control what the line looks like

00:28:51.846 --> 00:28:54.376 A:middle
and there's a few particularly
interesting properties

00:28:54.496 --> 00:28:55.056 A:middle
on the line.

00:28:55.896 --> 00:28:57.806 A:middle
The first is the
lineCap property.

00:28:58.316 --> 00:29:00.556 A:middle
This defines what the ends
of each line look like.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:58.316 --> 00:29:00.556 A:middle
This defines what the ends
of each line look like.

00:29:00.996 --> 00:29:02.446 A:middle
By default they're
just a flat line.

00:29:02.876 --> 00:29:05.186 A:middle
In this case we're going to
set a round lineCap on them

00:29:05.366 --> 00:29:06.696 A:middle
to give them a nice,
rounded effect.

00:29:08.146 --> 00:29:11.336 A:middle
The lineDashPattern defines
how we draw dashed lines

00:29:11.336 --> 00:29:12.656 A:middle
and it gives you
a lot of control

00:29:12.656 --> 00:29:13.566 A:middle
over what that looks like.

00:29:14.606 --> 00:29:18.486 A:middle
You create a lineDashPattern by
giving us an array of NSNumbers

00:29:18.966 --> 00:29:22.376 A:middle
and we go through this array to
decide how many points to draw,

00:29:22.376 --> 00:29:24.016 A:middle
and then how many
points to not draw.

00:29:24.666 --> 00:29:28.096 A:middle
So in this example, we're
asking the CAShapeLayer to draw

00:29:28.096 --> 00:29:31.936 A:middle
for two points and then not draw
for four points, draw for six

00:29:31.936 --> 00:29:34.906 A:middle
and then not draw for the
final six, and then repeat

00:29:34.906 --> 00:29:36.876 A:middle
that pattern across
the length of the line.

00:29:38.166 --> 00:29:41.306 A:middle
LineDashPhase is used
to control how far

00:29:41.306 --> 00:29:43.196 A:middle
into that array we
start the line drawing.

00:29:43.886 --> 00:29:46.796 A:middle
So by setting a lineDashPhase
of four it essentially shifts

00:29:46.796 --> 00:29:49.046 A:middle
that dash pattern four
points along the line.

00:29:50.556 --> 00:29:52.876 A:middle
The next set of properties
relate to the stroke

00:29:52.876 --> 00:29:55.066 A:middle
of the line, which is what
we actually draw it like.

00:29:55.836 --> 00:29:58.186 A:middle
The most obvious one is
called strokeColor and,

00:29:58.186 --> 00:30:01.196 A:middle
as you would expect, it
defines the color of the line.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:58.186 --> 00:30:01.196 A:middle
as you would expect, it
defines the color of the line.

00:30:01.616 --> 00:30:02.896 A:middle
Pretty straightforward
to use I hope.

00:30:03.716 --> 00:30:05.466 A:middle
The next two are a little
bit more interesting

00:30:05.856 --> 00:30:08.726 A:middle
and that's the strokeBegin
and strokeEnd properties.

00:30:09.946 --> 00:30:13.036 A:middle
StrokeBegin defines how far
into the line we're going

00:30:13.036 --> 00:30:14.566 A:middle
to begin stroking
it or drawing it.

00:30:15.446 --> 00:30:18.746 A:middle
In the video above, I'm actually
drawing the original path

00:30:18.746 --> 00:30:21.256 A:middle
in a dark red behind that, so
that you can see the difference

00:30:21.256 --> 00:30:23.016 A:middle
between the actual --
what the code is doing.

00:30:23.726 --> 00:30:26.266 A:middle
So by setting our stroke
begin to 0.2 we're going

00:30:26.266 --> 00:30:28.226 A:middle
to skip drawing the
first 20% of the line.

00:30:29.376 --> 00:30:32.616 A:middle
StrokeEnd is very similar
but defines how far

00:30:32.616 --> 00:30:33.976 A:middle
from the end we're
going to draw that path.

00:30:34.956 --> 00:30:36.676 A:middle
So by saying it's
0.6 we're going

00:30:36.676 --> 00:30:38.596 A:middle
to not draw the final
60% of the path.

00:30:39.606 --> 00:30:43.066 A:middle
You can imagine this particular
property will be very powerful

00:30:43.146 --> 00:30:44.986 A:middle
if you were creating
a download control.

00:30:45.406 --> 00:30:47.506 A:middle
Because you could take that
download progress from zero

00:30:47.506 --> 00:30:51.506 A:middle
to 100% and directly map that
onto the strokeEnd property

00:30:51.706 --> 00:30:54.446 A:middle
on CAShapeLayer, which
is again animated

00:30:54.776 --> 00:30:56.696 A:middle
so the shape layer is
automatically going to animate

00:30:56.696 --> 00:30:57.756 A:middle
between states for you.

00:30:58.406 --> 00:31:01.266 A:middle
The final property that
you'll probably find useful


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:58.406 --> 00:31:01.266 A:middle
The final property that
you'll probably find useful

00:31:01.266 --> 00:31:02.996 A:middle
in some cases is the fillColor.

00:31:03.536 --> 00:31:05.136 A:middle
You don't always want
to add fillColor.

00:31:05.396 --> 00:31:08.836 A:middle
It doesn't always look awesome,
but it's a very powerful thing

00:31:08.836 --> 00:31:10.356 A:middle
to have if you want
more of a closed path.

00:31:12.536 --> 00:31:14.986 A:middle
Shape layers also
can have a big impact

00:31:15.176 --> 00:31:16.986 A:middle
on the rendering performance
of your application.

00:31:17.456 --> 00:31:19.286 A:middle
So let's go back to that
rendering pipeline one

00:31:19.286 --> 00:31:19.686 A:middle
more time.

00:31:20.726 --> 00:31:24.416 A:middle
In this case shape layers have
an impact on all the rendering

00:31:24.416 --> 00:31:26.466 A:middle
that occurs within
your application itself

00:31:26.466 --> 00:31:28.606 A:middle
and there's a few things
that we want to talk

00:31:28.606 --> 00:31:30.346 A:middle
about when you're
rendering shape layers.

00:31:31.526 --> 00:31:33.236 A:middle
When you have a shape
layer we have

00:31:33.236 --> 00:31:36.496 A:middle
to rasterize the shape layer on
the CPU within your application.

00:31:37.186 --> 00:31:39.776 A:middle
What that means is
when we're doing all

00:31:39.776 --> 00:31:41.496 A:middle
of your view drawing we're
going to actually have

00:31:41.496 --> 00:31:43.656 A:middle
to ask the shape layer
to compute itself

00:31:43.656 --> 00:31:45.396 A:middle
and then draw it
into, essentially,

00:31:45.396 --> 00:31:47.376 A:middle
an image that we
can composite later.

00:31:48.476 --> 00:31:50.116 A:middle
We're going to send
that rasterized layer

00:31:50.186 --> 00:31:52.266 A:middle
over to the render server
for later compositing

00:31:52.836 --> 00:31:56.086 A:middle
and this process can get very
expensive in terms of CPU time.

00:31:56.526 --> 00:31:58.956 A:middle
Especially if you have
a very complex path

00:31:58.956 --> 00:32:00.206 A:middle
for your shape layer.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:31:58.956 --> 00:32:00.206 A:middle
for your shape layer.

00:32:00.726 --> 00:32:03.446 A:middle
The more complex it is, the
longer it's going to take us

00:32:03.526 --> 00:32:05.476 A:middle
to draw and prepare
that shape layer.

00:32:06.306 --> 00:32:07.766 A:middle
So one thing you
could do to minimize

00:32:07.766 --> 00:32:11.676 A:middle
that effect is you can use more
layers with less complexity

00:32:11.856 --> 00:32:14.316 A:middle
and then stack them behind each
other to get the same effect

00:32:14.316 --> 00:32:15.226 A:middle
that you're asking for.

00:32:16.056 --> 00:32:17.806 A:middle
For example, with
that download control,

00:32:17.806 --> 00:32:20.396 A:middle
that's showing the download
state: you might want

00:32:20.396 --> 00:32:23.176 A:middle
to draw the square as one
shape layer, the outer ring

00:32:23.176 --> 00:32:25.826 A:middle
as a second shape layer and
then show the download progress

00:32:25.826 --> 00:32:28.156 A:middle
as a third shape layer and
then composite the three

00:32:28.156 --> 00:32:30.316 A:middle
of them together by just
stacking them in the same place

00:32:30.556 --> 00:32:31.396 A:middle
in your view hierarchy.

00:32:32.596 --> 00:32:35.596 A:middle
You should also be very
conscious of frequent changes

00:32:35.816 --> 00:32:37.306 A:middle
to shape layers within
your application.

00:32:38.106 --> 00:32:41.326 A:middle
Every time a shape layer changes
we have to re-rasterize it

00:32:41.616 --> 00:32:43.856 A:middle
and send that new result
over to the render server.

00:32:44.486 --> 00:32:46.906 A:middle
So if your shape layer is
changing every frame we're

00:32:46.906 --> 00:32:49.956 A:middle
constantly having to redraw it
and hand this new object off

00:32:50.186 --> 00:32:52.776 A:middle
which can get very expensive
and have a negative impact

00:32:52.906 --> 00:32:53.886 A:middle
on your app's performance.

00:32:55.766 --> 00:32:58.296 A:middle
I actually have a shape layer
hidden in the demo application

00:32:58.296 --> 00:32:59.756 A:middle
that we've been taking
a look at,

00:32:59.876 --> 00:33:01.586 A:middle
so I'd like to show you
how that's implemented


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:32:59.876 --> 00:33:01.586 A:middle
so I'd like to show you
how that's implemented

00:33:01.586 --> 00:33:03.566 A:middle
and then we'll make a
couple of quick changes

00:33:03.566 --> 00:33:07.196 A:middle
to the appearance
of my shape layer.

00:33:08.066 --> 00:33:09.456 A:middle
So first let's see
where that's at.

00:33:11.016 --> 00:33:13.496 A:middle
If we look in the demo
application you probably notice

00:33:13.496 --> 00:33:15.326 A:middle
that there's two controls
that I haven't touched yet

00:33:15.786 --> 00:33:18.556 A:middle
and those effect the line
end and the dash size.

00:33:19.116 --> 00:33:22.076 A:middle
So let's bring the stroke
end all the way up to 100%

00:33:22.076 --> 00:33:24.466 A:middle
and you see I suddenly
get this nice red box.

00:33:24.546 --> 00:33:26.386 A:middle
It's the world's most
interesting shape layer.

00:33:27.686 --> 00:33:31.036 A:middle
I also have a dash size property
that controls the length

00:33:31.036 --> 00:33:32.576 A:middle
of the dashes in that array.

00:33:33.106 --> 00:33:34.226 A:middle
So if I bring my dash size

00:33:34.226 --> 00:33:36.596 A:middle
up we're creating a
dashed line effect instead.

00:33:37.546 --> 00:33:40.076 A:middle
If we bring the stroke end back
down to something else like,

00:33:40.076 --> 00:33:43.906 A:middle
68% you can see we're
only drawing the first 68%

00:33:43.906 --> 00:33:44.306 A:middle
of the line.

00:33:45.176 --> 00:33:47.336 A:middle
My shape layer's line starts
in the upper left corner

00:33:47.336 --> 00:33:49.466 A:middle
and then progress around
the box from there.

00:33:50.606 --> 00:33:52.586 A:middle
Let's take a look at how
this is implemented in code

00:33:52.866 --> 00:33:54.346 A:middle
and make a couple of
quick changes to it.

00:33:55.076 --> 00:33:58.496 A:middle
What I've done is I've created
a custom UIView subclass

00:33:58.496 --> 00:34:03.226 A:middle
that I'm calling Shape View and
my Shape View, like all views


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:33:58.496 --> 00:34:03.226 A:middle
that I'm calling Shape View and
my Shape View, like all views

00:34:03.226 --> 00:34:05.016 A:middle
in iOS, is backed
with a CALayer.

00:34:06.016 --> 00:34:09.235 A:middle
We give you the ability to
actually override what kind

00:34:09.235 --> 00:34:10.735 A:middle
of layer that your
view is backed

00:34:10.735 --> 00:34:13.025 A:middle
with by implementing
the Layer Class Method,

00:34:13.485 --> 00:34:15.005 A:middle
and I've asked my
view to be backed

00:34:15.505 --> 00:34:16.956 A:middle
with a CAShapeLayer instead.

00:34:17.686 --> 00:34:21.295 A:middle
In my awakeFromNib I'm going
to do some configuration work

00:34:21.295 --> 00:34:22.406 A:middle
to create that shape layer.

00:34:23.196 --> 00:34:25.606 A:middle
The first thing we'll do
is create a CGPath Ref

00:34:25.606 --> 00:34:26.985 A:middle
and create it with a rectangle

00:34:26.985 --> 00:34:28.436 A:middle
that represents my
view's bounds.

00:34:28.946 --> 00:34:30.606 A:middle
That's how we're
creating that nice,

00:34:30.606 --> 00:34:32.005 A:middle
simple, square shape layer.

00:34:33.616 --> 00:34:36.826 A:middle
We set the path and then spend
some time configuring a few

00:34:36.826 --> 00:34:38.146 A:middle
of the properties
of my shape layer.

00:34:38.786 --> 00:34:41.426 A:middle
The stroke color, again, is
what defines the color we use

00:34:41.426 --> 00:34:42.916 A:middle
to draw the outside
of the path width --

00:34:43.235 --> 00:34:44.356 A:middle
in this case a red color.

00:34:45.326 --> 00:34:47.946 A:middle
We're setting our line width to
six to make it nice and visible

00:34:47.946 --> 00:34:51.585 A:middle
on top of the background and I
had the strokeEnd start at zero,

00:34:51.585 --> 00:34:53.786 A:middle
so that none of you would see
the shape layer in advance.

00:34:54.335 --> 00:34:56.716 A:middle
I also have the line Join.

00:34:57.386 --> 00:34:59.896 A:middle
LineJoin defines what the
corners of those lines look

00:34:59.896 --> 00:35:01.046 A:middle
like when they come together


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:34:59.896 --> 00:35:01.046 A:middle
like when they come together

00:35:01.046 --> 00:35:03.066 A:middle
and we're defaulting
that to a round join.

00:35:03.066 --> 00:35:06.606 A:middle
We're also setting the
lineCap (which is, again,

00:35:06.606 --> 00:35:08.196 A:middle
what controls the
edges of each line)

00:35:08.256 --> 00:35:09.676 A:middle
and making those round as well.

00:35:10.116 --> 00:35:12.796 A:middle
And finally I'm not using a
fill color for my shape layer.

00:35:13.926 --> 00:35:16.746 A:middle
Down here at the bottom I
have two methods that are used

00:35:16.746 --> 00:35:19.026 A:middle
to configure properties
based on those controls

00:35:19.026 --> 00:35:20.066 A:middle
that you see onscreen.

00:35:20.696 --> 00:35:21.946 A:middle
One controls the strokeEnd,

00:35:22.386 --> 00:35:24.176 A:middle
the other is setting
that lineDashLength.

00:35:25.066 --> 00:35:26.766 A:middle
Right now what I'm
doing is making an array

00:35:27.196 --> 00:35:30.096 A:middle
that creates two NSNumbers
that use the same value

00:35:30.096 --> 00:35:33.476 A:middle
for both the distance to draw
and the distance not to draw

00:35:33.966 --> 00:35:35.746 A:middle
and we're going to make
a change to that first.

00:35:36.576 --> 00:35:39.146 A:middle
I've decided that the
dashes just look too close

00:35:39.146 --> 00:35:41.346 A:middle
to each other so
instead what we're going

00:35:41.346 --> 00:35:44.886 A:middle
to do is first use the same
NSNumber to draw for a distance

00:35:44.886 --> 00:35:47.076 A:middle
and then we're going to
multiply that by four

00:35:47.076 --> 00:35:49.566 A:middle
to have a much larger
gap between our dashes.

00:35:51.296 --> 00:35:54.346 A:middle
I'm also going to make a
quick change to the line joint

00:35:54.346 --> 00:35:57.206 A:middle
of my shape layer and switch
over to a bevel line join.

00:35:58.406 --> 00:35:59.546 A:middle
Let's take a look
at those changes

00:35:59.576 --> 00:36:00.766 A:middle
in the demo application now.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:35:59.576 --> 00:36:00.766 A:middle
in the demo application now.

00:36:01.956 --> 00:36:03.986 A:middle
So again we're going to bring
that strokeEnd all the way

00:36:03.986 --> 00:36:05.446 A:middle
up first to see the
changes we've made

00:36:05.446 --> 00:36:08.016 A:middle
and the first thing
you see is the change

00:36:08.016 --> 00:36:09.246 A:middle
that we made to the line join.

00:36:09.716 --> 00:36:11.786 A:middle
If you take a look at
the corners of my boxes,

00:36:12.086 --> 00:36:13.146 A:middle
instead of having that nice,

00:36:13.146 --> 00:36:14.986 A:middle
rounded effect they
had this nice, like,

00:36:14.986 --> 00:36:16.526 A:middle
diamond-cut chamfer
around the edges.

00:36:16.526 --> 00:36:17.526 A:middle
It looks fantastic.

00:36:18.806 --> 00:36:19.816 A:middle
We're also going to take a look

00:36:19.816 --> 00:36:22.656 A:middle
at those dash size changes we
made so we'll dial that up a bit

00:36:22.656 --> 00:36:24.466 A:middle
and you can see a
dramatic difference

00:36:24.466 --> 00:36:25.316 A:middle
in what we had before.

00:36:25.746 --> 00:36:28.636 A:middle
We're drawing a very short dash
followed by a much longer gap.

00:36:29.846 --> 00:36:32.886 A:middle
And again, just to illustrate
those changes, let's dial some

00:36:32.886 --> 00:36:35.696 A:middle
of these effects back and you
can again see the difference

00:36:35.696 --> 00:36:37.986 A:middle
that makes on our shape layer.

00:36:39.316 --> 00:36:40.606 A:middle
Now you might have
noticed in code

00:36:40.876 --> 00:36:43.286 A:middle
that I have a tap
gesture recognizer setup

00:36:43.286 --> 00:36:44.096 A:middle
on my shape layer.

00:36:45.236 --> 00:36:46.486 A:middle
Let's take a look at
what that's doing.

00:36:47.866 --> 00:36:51.236 A:middle
Every time I tap on my shape
layer I'm picking a random alpha

00:36:51.236 --> 00:36:54.406 A:middle
value to animate to and
changing the opacity of my view

00:36:54.586 --> 00:36:55.876 A:middle
and of the shape layer itself.

00:36:55.876 --> 00:36:59.926 A:middle
It's an interesting effect but
it's kind of boring and I'd

00:36:59.926 --> 00:37:01.426 A:middle
like to do something a
little bit more interesting


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:36:59.926 --> 00:37:01.426 A:middle
like to do something a
little bit more interesting

00:37:01.426 --> 00:37:04.456 A:middle
for my users and to do that
we're going to take a look

00:37:04.456 --> 00:37:07.336 A:middle
at how we can create Dynamic
Behaviors with Core Animation.

00:37:08.666 --> 00:37:12.916 A:middle
As you're probably aware
UIKit and UIView provide a lot

00:37:12.916 --> 00:37:15.106 A:middle
of interesting animations
for your application

00:37:15.356 --> 00:37:16.496 A:middle
and you have a lot of control

00:37:16.496 --> 00:37:18.566 A:middle
over how these animations
look and behave.

00:37:19.686 --> 00:37:22.786 A:middle
Core Animation provides implicit
animations on your layers.

00:37:23.296 --> 00:37:25.026 A:middle
Nearly every property
that you would change

00:37:25.026 --> 00:37:28.086 A:middle
on a layer would be implicitly
animated by Core Animation.

00:37:28.636 --> 00:37:29.916 A:middle
That means you set the property

00:37:30.286 --> 00:37:33.116 A:middle
and CA will just provide an
animation from the current value

00:37:33.116 --> 00:37:35.056 A:middle
to the new value for
you automatically.

00:37:35.776 --> 00:37:37.966 A:middle
What you might not
be aware of is you

00:37:37.966 --> 00:37:39.406 A:middle
as a developer have the ability

00:37:39.406 --> 00:37:41.496 A:middle
to override the implicit
behaviors

00:37:41.496 --> 00:37:43.246 A:middle
that Core Animation
provides to you.

00:37:44.356 --> 00:37:45.776 A:middle
And you might be
thinking, "That's nice.

00:37:45.776 --> 00:37:47.046 A:middle
What would I want
to do with that?"

00:37:48.106 --> 00:37:49.966 A:middle
One thing you could do is
you could just disable the

00:37:49.966 --> 00:37:50.816 A:middle
implicit animations.

00:37:51.106 --> 00:37:53.576 A:middle
You could just say, "You know,
I don't want any animations.

00:37:53.576 --> 00:37:54.246 A:middle
Thanks anyway.

00:37:54.546 --> 00:37:55.736 A:middle
Don't do anything at all."

00:37:55.736 --> 00:37:56.376 A:middle
And that's fine.

00:37:57.436 --> 00:38:00.756 A:middle
You can also use this capability
to change the behavior


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:37:57.436 --> 00:38:00.756 A:middle
You can also use this capability
to change the behavior

00:38:00.756 --> 00:38:03.616 A:middle
of the default animations
that Core Animation provides.

00:38:04.456 --> 00:38:07.116 A:middle
For example you might
want to have your layer

00:38:07.116 --> 00:38:09.616 A:middle
or your view show a different
color while the opacity

00:38:09.616 --> 00:38:10.546 A:middle
animation takes place.

00:38:11.506 --> 00:38:14.136 A:middle
You also might decide that
you're implementing OS X Weed

00:38:14.216 --> 00:38:17.026 A:middle
and you want to have that path
be less than linear as it moves

00:38:17.026 --> 00:38:18.266 A:middle
from point A to point B.

00:38:19.526 --> 00:38:22.606 A:middle
If you were to create a new
CALayer subclass you can also

00:38:22.606 --> 00:38:24.756 A:middle
add your own properties
and make them animatable

00:38:24.756 --> 00:38:25.586 A:middle
with this technique.

00:38:26.906 --> 00:38:29.716 A:middle
The key part of this is that
we can use this technique

00:38:29.716 --> 00:38:33.106 A:middle
to define behaviors that
are inherent to custom views

00:38:33.106 --> 00:38:34.006 A:middle
within your application.

00:38:34.566 --> 00:38:37.366 A:middle
This encapsulates any custom
animation behaviors you'd like

00:38:37.766 --> 00:38:39.446 A:middle
and bakes them into
the view itself.

00:38:39.766 --> 00:38:42.976 A:middle
So if you want to reuse this
view elsewhere in your app

00:38:43.546 --> 00:38:46.336 A:middle
or in a framework it just comes
along as part of the view.

00:38:47.526 --> 00:38:48.276 A:middle
How do these work?

00:38:49.346 --> 00:38:52.376 A:middle
In this case I have my view
which, like all views in iOS,

00:38:52.656 --> 00:38:53.936 A:middle
is backed with a CALayer.

00:38:55.716 --> 00:38:58.786 A:middle
CALayers have a CALayerDelegate
protocol that all

00:38:58.786 --> 00:39:02.156 A:middle
of your views implement and
your view is always the delegate


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:38:58.786 --> 00:39:02.156 A:middle
of your views implement and
your view is always the delegate

00:39:02.386 --> 00:39:02.986 A:middle
for its layer.

00:39:04.116 --> 00:39:07.116 A:middle
So let's say in my application
I want to animate the alpha.

00:39:07.726 --> 00:39:09.706 A:middle
I'm calling UIView
animateWithDuration

00:39:09.976 --> 00:39:12.646 A:middle
and setting the alpha
on my view to 0.2.

00:39:13.726 --> 00:39:14.726 A:middle
Let's take a look at the steps

00:39:14.756 --> 00:39:17.866 A:middle
that take place when
we request this.

00:39:18.186 --> 00:39:22.706 A:middle
Your CALayer is going to ask its
delegates actionForLayer:forKey

00:39:23.106 --> 00:39:25.126 A:middle
and that's going to be
called on my custom view.

00:39:25.126 --> 00:39:28.486 A:middle
If you haven't implemented
this it will automatically go

00:39:28.486 --> 00:39:29.236 A:middle
to the superclass.

00:39:30.276 --> 00:39:32.756 A:middle
If you have implemented it,
you have a couple of options.

00:39:33.586 --> 00:39:36.456 A:middle
The first thing you can do is
call back to your superclass

00:39:36.456 --> 00:39:38.116 A:middle
and just say actionForLayer:

00:39:38.176 --> 00:39:41.536 A:middle
key and pass the same result
back on to Core Animation.

00:39:42.326 --> 00:39:43.356 A:middle
If you decide that you would

00:39:43.356 --> 00:39:44.696 A:middle
like to have a little
bit more control

00:39:44.696 --> 00:39:46.936 A:middle
over the animation instead,

00:39:48.636 --> 00:39:52.866 A:middle
you can create a new action
result and pass that back.

00:39:53.636 --> 00:39:57.166 A:middle
You create objects to conform to
the CAAction protocol and hand

00:39:57.166 --> 00:39:59.626 A:middle
that new action object
back to Core Animation.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:01.336 --> 00:40:04.016 A:middle
The CAAction protocol
defines a single method;

00:40:04.536 --> 00:40:07.436 A:middle
runActionForKey:
object arguments.

00:40:08.226 --> 00:40:11.456 A:middle
And you can implement the
CAAction protocol on any object.

00:40:11.986 --> 00:40:13.976 A:middle
Typically you just want to
make this on an NSObject --

00:40:14.616 --> 00:40:17.356 A:middle
a very nice, lightweight object
to pass back to Core Animation.

00:40:18.356 --> 00:40:19.496 A:middle
You can do whatever you would

00:40:19.496 --> 00:40:21.816 A:middle
like in the implementation
of runActionForKey.

00:40:22.446 --> 00:40:23.616 A:middle
Typically you're going to want

00:40:23.616 --> 00:40:26.886 A:middle
to actually run some animations
there but you might decide you'd

00:40:26.886 --> 00:40:29.546 A:middle
like to do something else:
fire some notifications,

00:40:29.816 --> 00:40:32.756 A:middle
start or cancel timers,
keep count of something,

00:40:33.206 --> 00:40:34.396 A:middle
whatever your minds
come up with.

00:40:34.606 --> 00:40:36.926 A:middle
You can do whatever you
like in runActionForKey.

00:40:37.946 --> 00:40:39.286 A:middle
There's two arguments in here

00:40:39.286 --> 00:40:40.706 A:middle
that are particularly
interesting.

00:40:41.426 --> 00:40:42.656 A:middle
The first is the key.

00:40:43.176 --> 00:40:46.516 A:middle
This specifies what property
just changed on the CALayer

00:40:46.746 --> 00:40:48.296 A:middle
that you're being
asked to interact with.

00:40:49.546 --> 00:40:51.486 A:middle
The second is the
object argument.

00:40:52.016 --> 00:40:53.426 A:middle
This is providing a reference

00:40:53.656 --> 00:40:55.986 A:middle
to the CALayer that's
being animated right now,

00:40:56.206 --> 00:40:57.946 A:middle
or having values
changed on it right now,

00:40:58.496 --> 00:41:00.946 A:middle
and this is how you have
access to the new values


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:40:58.496 --> 00:41:00.946 A:middle
and this is how you have
access to the new values

00:41:00.946 --> 00:41:03.896 A:middle
that have been set as well as
how you can apply these changes

00:41:04.196 --> 00:41:05.946 A:middle
to the layer that
you've been manipulating.

00:41:06.886 --> 00:41:08.526 A:middle
It's hard to talk
about this in slides

00:41:08.916 --> 00:41:11.376 A:middle
so instead let's take a look at
it back in the demo application.

00:41:12.776 --> 00:41:14.746 A:middle
We're going to go back
to my shapeView class

00:41:15.756 --> 00:41:18.566 A:middle
and I've decided I'd like
to add some custom behavior

00:41:18.846 --> 00:41:21.666 A:middle
for when the opacity changes
on my layer and on my view.

00:41:23.176 --> 00:41:25.626 A:middle
The first thing I need to
do is create a new object

00:41:25.836 --> 00:41:27.776 A:middle
that conforms to the
CAAction protocol.

00:41:28.406 --> 00:41:32.146 A:middle
So to do that I've defined
an opacity action object

00:41:32.766 --> 00:41:34.816 A:middle
and it has a single method
in its implementation;

00:41:35.226 --> 00:41:37.966 A:middle
runActionForKey:
object arguments.

00:41:38.796 --> 00:41:40.746 A:middle
Let's take a look at some of
the steps we're making here.

00:41:42.056 --> 00:41:42.866 A:middle
The first thing we're going

00:41:42.866 --> 00:41:45.896 A:middle
to do is check what the
event is that's being asked

00:41:45.896 --> 00:41:47.526 A:middle
for this animation --
or for this action --

00:41:48.166 --> 00:41:50.666 A:middle
and we're only interested
in doing things here

00:41:51.076 --> 00:41:53.956 A:middle
if the layer's opacity
was asked to change.

00:41:54.796 --> 00:41:57.326 A:middle
I'm going to give myself a
nice pointer to the CALayer

00:41:57.326 --> 00:42:00.086 A:middle
that was passed in and
define a duration to use


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:41:57.326 --> 00:42:00.086 A:middle
that was passed in and
define a duration to use

00:42:00.086 --> 00:42:01.156 A:middle
for all of my animations.

00:42:02.326 --> 00:42:05.346 A:middle
I'm going to create
three CA basic animations

00:42:05.346 --> 00:42:07.506 A:middle
for my application
that take place

00:42:07.506 --> 00:42:08.916 A:middle
when this opacity change occurs.

00:42:09.746 --> 00:42:12.746 A:middle
What I've decided I'd like to
do is have the background color

00:42:12.746 --> 00:42:16.086 A:middle
of my layer change as the
opacity animates as well

00:42:16.646 --> 00:42:19.046 A:middle
and we're going to do
that with these few steps.

00:42:19.046 --> 00:42:23.946 A:middle
Now the things I'd like you to
notice is: first, the fromValue.

00:42:24.686 --> 00:42:27.116 A:middle
Core Animation needs to know
what to start an animation with

00:42:27.116 --> 00:42:28.296 A:middle
and what to end it with.

00:42:29.306 --> 00:42:31.816 A:middle
The fromValue is defining
the beginning of that.

00:42:32.556 --> 00:42:35.216 A:middle
Now my layer already has
the new value set on it

00:42:35.636 --> 00:42:37.656 A:middle
when my action object
is called...

00:42:38.666 --> 00:42:40.716 A:middle
which means I need to know
what it looks like onscreen,

00:42:41.026 --> 00:42:44.116 A:middle
and layers provide what they
call a presentation layer.

00:42:44.866 --> 00:42:47.616 A:middle
The presentation layer
is a representation

00:42:47.616 --> 00:42:49.926 A:middle
of what the layer looks
like onscreen to the user

00:42:49.926 --> 00:42:51.226 A:middle
at that instant in time.

00:42:51.966 --> 00:42:53.486 A:middle
So I'm asking my
presentation layer

00:42:53.486 --> 00:42:54.866 A:middle
for its current background color

00:42:55.196 --> 00:42:57.116 A:middle
to be the starting
point of this animation.

00:42:58.086 --> 00:43:00.566 A:middle
My toValue is the new value
that we're requesting.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:42:58.086 --> 00:43:00.566 A:middle
My toValue is the new value
that we're requesting.

00:43:01.086 --> 00:43:03.286 A:middle
And what I'm doing here
is animating changes

00:43:03.286 --> 00:43:06.906 A:middle
to the hue value and leaving the
saturation and brightness alone.

00:43:07.266 --> 00:43:08.976 A:middle
If you're not familiar
with hue, saturation

00:43:08.976 --> 00:43:11.126 A:middle
and brightness you can
think about a color wheel

00:43:11.426 --> 00:43:14.196 A:middle
where the hue is defining
what point along that circle,

00:43:14.546 --> 00:43:15.476 A:middle
what color we're using.

00:43:15.586 --> 00:43:18.506 A:middle
So I'm going to take the
opacity value and use

00:43:18.506 --> 00:43:19.526 A:middle
that to define my hue.

00:43:20.456 --> 00:43:23.056 A:middle
I'm also going to make the same
animation to the stroke color

00:43:23.056 --> 00:43:25.316 A:middle
of my shape layer, but
this time we're going

00:43:25.316 --> 00:43:28.016 A:middle
to use some modifications
to the value

00:43:28.016 --> 00:43:28.926 A:middle
that we're setting on the hue.

00:43:28.926 --> 00:43:31.696 A:middle
And then finally
I do in fact want

00:43:31.696 --> 00:43:33.176 A:middle
to animate the opacity myself

00:43:33.906 --> 00:43:35.996 A:middle
and since I'm overriding
the action I have

00:43:35.996 --> 00:43:38.966 A:middle
to provide my own
opacity animation as well.

00:43:38.966 --> 00:43:42.096 A:middle
So I'll set that using the
same presentation layer

00:43:42.356 --> 00:43:44.526 A:middle
and the toValue, and
that's all there is

00:43:44.526 --> 00:43:45.936 A:middle
to making a new action object.

00:43:46.746 --> 00:43:49.206 A:middle
Now I need to make sure that my
action object is actually going

00:43:49.206 --> 00:43:49.776 A:middle
to get called.

00:43:49.776 --> 00:43:51.056 A:middle
And we're going to do

00:43:51.056 --> 00:43:53.536 A:middle
that within my layers
implementation - or,

00:43:53.536 --> 00:43:54.876 A:middle
my views implementation itself.

00:43:54.876 --> 00:43:59.496 A:middle
So my view is going to
implement actionForLayer:forKey.

00:43:59.886 --> 00:44:01.676 A:middle
This is that CALayerDelegate
method.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:43:59.886 --> 00:44:01.676 A:middle
This is that CALayerDelegate
method.

00:44:02.586 --> 00:44:03.576 A:middle
It's pretty straightforward.

00:44:03.576 --> 00:44:06.476 A:middle
I'm going to check to see if
I'm being requested to make --

00:44:06.476 --> 00:44:08.686 A:middle
to provide an action
for the opacity value.

00:44:09.126 --> 00:44:13.106 A:middle
If I do, I alloc-init a new
instance of my opacity action

00:44:13.266 --> 00:44:14.596 A:middle
and hand it back
to Core Animation.

00:44:15.526 --> 00:44:18.396 A:middle
In all other cases I'm going to
call through to my superclass

00:44:18.786 --> 00:44:21.036 A:middle
and allow the default
behaviors to be returned.

00:44:21.646 --> 00:44:23.396 A:middle
And those are the
steps we need to take

00:44:23.396 --> 00:44:26.066 A:middle
to provide a custom CA action
within your application.

00:44:26.736 --> 00:44:29.286 A:middle
Let's see what effect
that has on our box.

00:44:30.556 --> 00:44:32.586 A:middle
So we're back in the demo app
again and I'm going to bring

00:44:32.586 --> 00:44:34.706 A:middle
that box all the way up
for full visibility and --

00:44:35.026 --> 00:44:37.336 A:middle
to make sure that it's, y'know,
really going to stand out --

00:44:37.456 --> 00:44:39.266 A:middle
we'll bring some more
colors into things as well.

00:44:39.636 --> 00:44:40.196 A:middle
Actually...

00:44:40.196 --> 00:44:44.216 A:middle
I like it with less colors, so
we'll do that; put a little bit

00:44:44.216 --> 00:44:45.566 A:middle
of a dash size on, just for fun.

00:44:45.566 --> 00:44:48.576 A:middle
Now if you remember, the way
this is configured is I'm going

00:44:48.576 --> 00:44:51.976 A:middle
to tap on the box which will
pick a random opacity value

00:44:51.976 --> 00:44:55.266 A:middle
and animate to that over
the newly defined 0.75

00:44:55.266 --> 00:44:56.086 A:middle
second duration.

00:44:56.796 --> 00:44:59.636 A:middle
Whenever we get that new
opacity value we're also going

00:44:59.636 --> 00:45:03.286 A:middle
to animate the hue of the
background color and the stroke.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:44:59.636 --> 00:45:03.286 A:middle
to animate the hue of the
background color and the stroke.

00:45:04.376 --> 00:45:05.876 A:middle
So you can see: every time I tap

00:45:05.876 --> 00:45:08.186 A:middle
on that we're getting
a very interesting set

00:45:08.186 --> 00:45:11.816 A:middle
of color combinations and
we're also still making changes

00:45:11.816 --> 00:45:12.556 A:middle
to the background.

00:45:12.986 --> 00:45:14.666 A:middle
It's a very interesting
and very unique effect.

00:45:14.936 --> 00:45:16.616 A:middle
We can see the opacity
better this way.

00:45:16.656 --> 00:45:20.686 A:middle
But the opacity is
changing alongside the hue

00:45:20.856 --> 00:45:22.956 A:middle
for the background
and the stroke colors.

00:45:24.006 --> 00:45:26.716 A:middle
And the really powerful part
of the way I've built this is:

00:45:26.716 --> 00:45:28.966 A:middle
all of these behaviors
are inherently part

00:45:29.266 --> 00:45:30.296 A:middle
of my custom view.

00:45:30.796 --> 00:45:32.916 A:middle
So any time I use
that view I can add it

00:45:32.916 --> 00:45:35.916 A:middle
to my view hierarchy anywhere
in the app and I don't have

00:45:35.916 --> 00:45:37.596 A:middle
to remember to animate
all three properties.

00:45:37.986 --> 00:45:39.076 A:middle
I just set the alpha

00:45:39.176 --> 00:45:41.366 A:middle
and it automatically gets
all the new behaviors

00:45:41.576 --> 00:45:43.606 A:middle
that I've requested.

00:45:43.606 --> 00:45:45.976 A:middle
It's a really powerful
capability.

00:45:46.516 --> 00:45:53.626 A:middle
[ Applause ]

00:45:54.126 --> 00:45:55.826 A:middle
So to summarize what
we've talked about today:

00:45:56.186 --> 00:45:57.716 A:middle
we've presented four
new techniques.

00:45:58.396 --> 00:46:00.586 A:middle
The first is how you can
use Spring Animations


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:45:58.396 --> 00:46:00.586 A:middle
The first is how you can
use Spring Animations

00:46:00.586 --> 00:46:01.546 A:middle
in your application.

00:46:02.136 --> 00:46:04.756 A:middle
Think about Spring Animations
as a new timing curve

00:46:04.756 --> 00:46:07.476 A:middle
for animations within your
application that make them fit

00:46:07.476 --> 00:46:10.366 A:middle
in better with the rest of the
platform and feel more dynamic

00:46:10.776 --> 00:46:12.106 A:middle
and engaging for your users.

00:46:13.016 --> 00:46:16.606 A:middle
UIVisualEffectView is a great
new API introduced in iOS 8

00:46:16.606 --> 00:46:19.616 A:middle
that will allow you to create
live blur effects as well

00:46:19.616 --> 00:46:22.996 A:middle
as vibrancy to keep content
highly legible on top of blurs.

00:46:23.996 --> 00:46:26.676 A:middle
CAShapeLayer allows you to
design custom Bézier paths

00:46:27.076 --> 00:46:29.876 A:middle
and draw them within your
application and animate changes

00:46:29.876 --> 00:46:33.536 A:middle
to those properties, and we've
talked about how to use CAAction

00:46:33.736 --> 00:46:36.436 A:middle
to get more dynamic behaviors
out of Core Animation.

00:46:37.006 --> 00:46:38.206 A:middle
If you'd like to learn more

00:46:38.206 --> 00:46:40.796 A:middle
about these technologies
there's some great documentation

00:46:41.216 --> 00:46:43.676 A:middle
for UIKits and for
Core Animation.

00:46:44.086 --> 00:46:46.976 A:middle
You can also talk to Jake, he's
our Apps Frameworks Evangelist.

00:46:47.056 --> 00:46:49.656 A:middle
He has great shoes and he loves
getting email from all of you.

00:46:50.516 --> 00:46:53.246 A:middle
There's some fantastic new
sessions going on this week

00:46:53.326 --> 00:46:56.086 A:middle
that talk about more of these
topics that we have covered.

00:46:56.496 --> 00:46:58.256 A:middle
Many of them happened
yesterday and there's going

00:46:58.256 --> 00:47:01.366 A:middle
to be a fantastic session on
Friday at 11:30, in Presidio,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:46:58.256 --> 00:47:01.366 A:middle
to be a fantastic session on
Friday at 11:30, in Presidio,

00:47:01.366 --> 00:47:02.856 A:middle
that I really encourage
you to check out.

00:47:03.046 --> 00:47:04.856 A:middle
Thanks for coming and I
hope you enjoy the rest

00:47:04.856 --> 00:47:05.586 A:middle
of your time at WWDC.

00:47:06.516 --> 00:47:12.020 A:middle
[ Applause ]

