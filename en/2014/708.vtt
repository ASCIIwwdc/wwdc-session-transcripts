WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:11.086 --> 00:00:12.316 A:middle
&gt;&gt; Good afternoon everyone.

00:00:12.956 --> 00:00:13.876 A:middle
I'm Nav Patel.

00:00:13.876 --> 00:00:16.796 A:middle
I'm a software engineer
on the Core Location team,

00:00:17.106 --> 00:00:19.436 A:middle
and today I want to tell you

00:00:20.106 --> 00:00:22.896 A:middle
about the next great leap we're
taking in location services.

00:00:23.906 --> 00:00:25.766 A:middle
We're taking Core
Location indoors.

00:00:28.366 --> 00:00:32.046 A:middle
So we'll start off by covering
what indoor positioning is,

00:00:32.886 --> 00:00:34.256 A:middle
how does it work,
how does it fit

00:00:34.256 --> 00:00:36.366 A:middle
in with the other Core
Location technologies?

00:00:37.626 --> 00:00:41.046 A:middle
We'll also cover how you use
it, what APIs you'll use,

00:00:41.556 --> 00:00:47.296 A:middle
and we also will talk
about indoor positioning

00:00:47.626 --> 00:00:50.676 A:middle
and iBeacon technology and
how they work together.

00:00:52.166 --> 00:00:53.596 A:middle
Finally, we'll cover
some next steps

00:00:54.136 --> 00:00:55.606 A:middle
on how venues can get signed up

00:00:55.606 --> 00:00:57.796 A:middle
and how you guys
can start looking

00:00:57.796 --> 00:01:02.166 A:middle
at the documentation
and the APIs.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:00:57.796 --> 00:01:02.166 A:middle
at the documentation
and the APIs.

00:01:03.176 --> 00:01:06.206 A:middle
So with today's technology,
Core Location

00:01:06.356 --> 00:01:09.506 A:middle
on iOS is the best
location service you can get

00:01:09.506 --> 00:01:10.196 A:middle
on a mobile device.

00:01:11.116 --> 00:01:12.286 A:middle
We have the best accuracy.

00:01:13.166 --> 00:01:14.306 A:middle
We have the best response time.

00:01:14.306 --> 00:01:15.856 A:middle
We have the best
Time To First Fix,

00:01:17.256 --> 00:01:19.516 A:middle
and this comes from
the tight hardware

00:01:19.556 --> 00:01:21.326 A:middle
and software integration
we have.

00:01:22.156 --> 00:01:23.866 A:middle
The hardware team and
the software team work

00:01:23.866 --> 00:01:26.316 A:middle
with each other to make
sure we get the most

00:01:26.496 --> 00:01:28.186 A:middle
out of the hardware we
have on our devices.

00:01:28.186 --> 00:01:33.876 A:middle
So our Core Location
technologies today start off

00:01:34.466 --> 00:01:35.086 A:middle
with cellular.

00:01:36.386 --> 00:01:40.326 A:middle
Now, cellular is great
for iPhones and iPads

00:01:40.326 --> 00:01:43.776 A:middle
with data connectivity
because it's essentially free.

00:01:44.406 --> 00:01:46.066 A:middle
You're already connected
to these cell towers,

00:01:46.766 --> 00:01:49.316 A:middle
and it's good enough to
give you an approximation

00:01:49.316 --> 00:01:51.076 A:middle
of which area of
a city you're in.

00:01:51.666 --> 00:01:54.716 A:middle
Now, because you're already
associated with a tower,

00:01:55.156 --> 00:01:59.836 A:middle
you're not spending any more
energy or power to get this fix


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:00.596 --> 00:02:01.646 A:middle
and it's usually available.

00:02:02.556 --> 00:02:05.366 A:middle
So, for cases like: you're
landing in an airplane

00:02:05.876 --> 00:02:08.496 A:middle
and you turn on your phone, this
is the first fix you'll get,

00:02:08.496 --> 00:02:09.996 A:middle
and it's good enough
to set your time zone.

00:02:10.536 --> 00:02:12.276 A:middle
Next we have GPS technology.

00:02:13.246 --> 00:02:15.296 A:middle
Now, GPS is based on satellite,

00:02:15.296 --> 00:02:19.366 A:middle
and it was the first big
revolution in location services.

00:02:19.366 --> 00:02:23.366 A:middle
It was accurate enough
to do outdoor navigation

00:02:23.886 --> 00:02:25.976 A:middle
and responsive enough to
do outdoor navigation.

00:02:27.106 --> 00:02:28.176 A:middle
Now, we didn't stop there.

00:02:28.176 --> 00:02:29.776 A:middle
GPS was introduced
a little while ago,

00:02:29.776 --> 00:02:33.356 A:middle
but we've been constantly
improving the accuracy

00:02:33.356 --> 00:02:35.936 A:middle
and the Time To First
Fix of GPS as well.

00:02:37.376 --> 00:02:41.226 A:middle
What's great about GPS is we
launched satellites into space.

00:02:41.466 --> 00:02:43.736 A:middle
We use both the American Navstar

00:02:43.736 --> 00:02:47.256 A:middle
and the Russian GLONASS
satellite constellation,

00:02:47.586 --> 00:02:51.376 A:middle
and this gives us really
great global coverage.

00:02:52.616 --> 00:02:57.266 A:middle
Now, the issue with
GPS is urban canyons.

00:02:58.026 --> 00:03:00.086 A:middle
When you're in a city
with tall buildings,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:02:58.026 --> 00:03:00.086 A:middle
When you're in a city
with tall buildings,

00:03:01.136 --> 00:03:03.146 A:middle
they can obscure your
view to the satellite,

00:03:04.096 --> 00:03:05.446 A:middle
and so you might
not get a signal,

00:03:05.506 --> 00:03:08.116 A:middle
and when you do get a signal,

00:03:09.366 --> 00:03:10.776 A:middle
that signal can suffer
from multipath.

00:03:11.066 --> 00:03:13.256 A:middle
So the signal will bounce
off in between buildings,

00:03:13.896 --> 00:03:15.956 A:middle
and you might not get a
very good fix at first.

00:03:17.336 --> 00:03:20.996 A:middle
So to solve this
problem, we use Wi-Fi.

00:03:21.876 --> 00:03:24.796 A:middle
Now, Wi-Fi is good enough

00:03:24.866 --> 00:03:27.346 A:middle
to give you position
within a city block.

00:03:27.346 --> 00:03:29.056 A:middle
Often it will put you in
front of the right building,

00:03:29.926 --> 00:03:32.386 A:middle
and this is really for
those cases like New York

00:03:32.386 --> 00:03:34.956 A:middle
and San Francisco where you have
tons of Wi-Fi already out there

00:03:35.866 --> 00:03:37.556 A:middle
where you can use this
to give you position

00:03:37.556 --> 00:03:38.806 A:middle
in urban canyon environments.

00:03:39.326 --> 00:03:43.336 A:middle
What's great is that this also
gives you location services

00:03:43.336 --> 00:03:44.686 A:middle
on Wi-Fi only devices.

00:03:45.326 --> 00:03:47.866 A:middle
So if you have an
iPod or an iPad Wi-Fi,

00:03:48.596 --> 00:03:49.996 A:middle
you can get location using this.

00:03:50.826 --> 00:03:53.676 A:middle
So their entire location
experience is based on Wi-Fi.

00:03:54.196 --> 00:03:58.206 A:middle
So the existing technologies
work great.

00:03:58.206 --> 00:04:00.056 A:middle
They'll let you navigate
outdoors.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:03:58.206 --> 00:04:00.056 A:middle
They'll let you navigate
outdoors.

00:04:00.736 --> 00:04:02.396 A:middle
They also work well globally.

00:04:02.396 --> 00:04:03.976 A:middle
You don't need to put
up any infrastructure.

00:04:04.146 --> 00:04:07.376 A:middle
You don't need to launch
satellites as an app developer,

00:04:08.216 --> 00:04:10.016 A:middle
and the Wi-Fi AP's
already out there,

00:04:10.016 --> 00:04:13.266 A:middle
and so it actually
works very well.

00:04:14.046 --> 00:04:17.176 A:middle
But there's an issue, and
that's when you move indoors.

00:04:18.676 --> 00:04:21.426 A:middle
Today we do give you
some position indoors,

00:04:22.306 --> 00:04:24.206 A:middle
and you might have had that
experience where you pull

00:04:24.206 --> 00:04:26.956 A:middle
out your phone in a mall at a
Starbucks, and it will tell you,

00:04:26.956 --> 00:04:28.606 A:middle
"Hey, it actually
found my exact spot.

00:04:28.606 --> 00:04:29.986 A:middle
How are they doing that?"

00:04:29.986 --> 00:04:33.246 A:middle
And that is using a combination
of GPS that may have come

00:04:33.246 --> 00:04:36.796 A:middle
in through the windows or
skylights or using Wi-Fi,

00:04:37.856 --> 00:04:40.566 A:middle
and that can work indoors, but
it's really not good enough

00:04:40.646 --> 00:04:42.516 A:middle
to do any sort of
navigation indoors.

00:04:42.996 --> 00:04:46.026 A:middle
Also, Core Location
gives you an altitude,

00:04:46.726 --> 00:04:49.016 A:middle
and when you're thinking
about the context of being

00:04:49.016 --> 00:04:51.736 A:middle
in a building, you really
want floor information.

00:04:51.816 --> 00:04:53.866 A:middle
Altitude is hard to use.

00:04:55.466 --> 00:04:59.396 A:middle
So we heard you guys really
want to build applications

00:04:59.516 --> 00:05:00.726 A:middle
for indoor venues, and for


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:04:59.516 --> 00:05:00.726 A:middle
for indoor venues, and for

00:05:00.966 --> 00:05:03.316 A:middle
that we're announcing
Indoor Positioning.

00:05:04.396 --> 00:05:06.626 A:middle
So here's a look at
what it looks like.

00:05:08.056 --> 00:05:11.296 A:middle
This is me a couple of days
ago in the California Academy

00:05:11.296 --> 00:05:12.816 A:middle
of Sciences in Golden Gate Park.

00:05:13.976 --> 00:05:16.506 A:middle
Now, you can see me walking
around the planetarium here.

00:05:17.296 --> 00:05:19.036 A:middle
The playback has
been sped up by 10x

00:05:19.036 --> 00:05:20.656 A:middle
so you can actually see
me move through the space.

00:05:22.206 --> 00:05:25.316 A:middle
Here I'll walk past the giant
swinging pendulum towards the

00:05:25.356 --> 00:05:29.826 A:middle
swamp, the albino
alligator, and as you can see,

00:05:29.826 --> 00:05:36.196 A:middle
this is pretty accurate, and it
works amazingly well indoors.

00:05:36.196 --> 00:05:38.776 A:middle
It's also very responsive.

00:05:38.776 --> 00:05:42.186 A:middle
You know, hypothetically, you
could build a game of Pac-Man

00:05:42.186 --> 00:05:45.426 A:middle
in your office, and a bunch
of engineers could run

00:05:45.426 --> 00:05:46.746 A:middle
around and piss off HR...

00:05:46.746 --> 00:05:48.196 A:middle
[ Laughter ]

00:05:48.196 --> 00:05:48.866 A:middle
...hypothetically.

00:05:50.366 --> 00:05:52.516 A:middle
But it's quite good.

00:05:53.136 --> 00:05:58.686 A:middle
So indoor positioning works
using RF parametric data that's

00:05:58.686 --> 00:05:59.616 A:middle
in your venue already.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:01.296 --> 00:06:03.246 A:middle
We also use motion sensors.

00:06:04.076 --> 00:06:08.866 A:middle
We use the M7 chip, and these
sensors and these RF signals

00:06:08.866 --> 00:06:10.566 A:middle
that are in the air
is what we use

00:06:10.566 --> 00:06:12.296 A:middle
to give you your
indoor position.

00:06:12.896 --> 00:06:15.626 A:middle
So how does this all work?

00:06:16.426 --> 00:06:19.156 A:middle
Well, we use your existing
technologies: your cell,

00:06:19.156 --> 00:06:21.946 A:middle
GPS and Wi-Fi, and
these are running,

00:06:21.946 --> 00:06:24.336 A:middle
and they'll put you close
to or inside a venue

00:06:24.426 --> 00:06:26.876 A:middle
like we just talked about.

00:06:27.056 --> 00:06:30.066 A:middle
When you approach a venue
that's indoor position enabled,

00:06:31.126 --> 00:06:33.396 A:middle
we'll start scanning
your Wi-Fi and using more

00:06:33.396 --> 00:06:34.306 A:middle
of your motion sensors.

00:06:35.076 --> 00:06:36.806 A:middle
We use your motion
sensors at this point

00:06:37.136 --> 00:06:40.426 A:middle
because it gives us information
for our estimation algorithms

00:06:40.426 --> 00:06:41.916 A:middle
of where you're moving indoors,

00:06:42.576 --> 00:06:44.426 A:middle
but it also gives
us key information

00:06:45.706 --> 00:06:47.296 A:middle
about how quickly you're moving.

00:06:47.296 --> 00:06:49.176 A:middle
If you're moving at 40
miles per hour in a car,

00:06:49.706 --> 00:06:50.926 A:middle
you're probably not indoors.

00:06:51.466 --> 00:06:52.486 A:middle
Hopefully, you're not indoors.

00:06:53.316 --> 00:06:57.316 A:middle
So when we get a good fix
and we're confident, hey,

00:06:57.316 --> 00:07:01.876 A:middle
you are indoors, we'll also
turn down your GPS chip.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:06:57.316 --> 00:07:01.876 A:middle
you are indoors, we'll also
turn down your GPS chip.

00:07:03.326 --> 00:07:04.456 A:middle
So this is the hardware

00:07:04.456 --> 00:07:06.096 A:middle
and software integration I
was talking about earlier.

00:07:06.096 --> 00:07:07.586 A:middle
We do this to save power.

00:07:07.676 --> 00:07:10.746 A:middle
So that indoor positioning,
even though we're using RF more,

00:07:10.916 --> 00:07:13.016 A:middle
we're not consuming more power.

00:07:13.016 --> 00:07:18.136 A:middle
Now, all of this is really
cool and it looks really great.

00:07:18.806 --> 00:07:19.726 A:middle
But why indoors?

00:07:20.356 --> 00:07:23.146 A:middle
Why do we care?

00:07:23.296 --> 00:07:25.746 A:middle
Well, there are a lot
of amazing applications

00:07:25.886 --> 00:07:27.316 A:middle
for large indoor venues today.

00:07:27.316 --> 00:07:29.856 A:middle
We have things like directories.

00:07:30.566 --> 00:07:32.956 A:middle
So here's the Heathrow
application, and it's great.

00:07:32.956 --> 00:07:35.036 A:middle
It shows you all the
shops and restaurants

00:07:35.086 --> 00:07:36.446 A:middle
that are throughout
the entire airport.

00:07:37.626 --> 00:07:39.636 A:middle
We also have venue maps.

00:07:40.896 --> 00:07:43.766 A:middle
Now, venue maps will tell
you: "Oh, the Nordstrom's is

00:07:43.766 --> 00:07:45.436 A:middle
on this side, the Macy's
is on the other side,"

00:07:45.436 --> 00:07:47.536 A:middle
and it gives you
useful information,

00:07:48.066 --> 00:07:51.606 A:middle
and we have some level
of interactivity.

00:07:53.826 --> 00:07:55.906 A:middle
So this is the MOMA application,

00:07:56.236 --> 00:07:58.606 A:middle
and a user can browse
the catalog

00:07:59.436 --> 00:08:02.776 A:middle
and pick a particular thing that
they're looking at and listen


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:07:59.436 --> 00:08:02.776 A:middle
and pick a particular thing that
they're looking at and listen

00:08:02.776 --> 00:08:04.226 A:middle
to commentary about it.

00:08:06.736 --> 00:08:09.826 A:middle
But there's only limited
context over here.

00:08:10.326 --> 00:08:14.566 A:middle
What we want to do is more.

00:08:14.776 --> 00:08:17.996 A:middle
With indoors you can enable
things like way-finding.

00:08:18.896 --> 00:08:21.346 A:middle
So here you can imagine you're
going through the airport,

00:08:21.906 --> 00:08:24.246 A:middle
now we can route you
to the right gate.

00:08:26.616 --> 00:08:28.776 A:middle
You can also imagine
the impact this can have

00:08:29.026 --> 00:08:30.456 A:middle
on the visually impaired
community.

00:08:31.966 --> 00:08:34.405 A:middle
They get great GPS
services outdoors today

00:08:34.405 --> 00:08:36.166 A:middle
and that helps them get around.

00:08:37.116 --> 00:08:38.785 A:middle
Venues can also build
this experience

00:08:38.785 --> 00:08:42.986 A:middle
into their applications so that
you can navigate indoors inside

00:08:42.986 --> 00:08:43.405 A:middle
a mall.

00:08:43.405 --> 00:08:46.836 A:middle
And not just for the
visually impaired,

00:08:46.836 --> 00:08:50.016 A:middle
but think about when you're
visiting a new large indoor

00:08:50.016 --> 00:08:50.996 A:middle
venue for the first time.

00:08:50.996 --> 00:08:53.466 A:middle
If you're at a hospital,
you don't want

00:08:53.466 --> 00:08:55.876 A:middle
to follow a 10-step direction
you got at the reception.

00:08:55.876 --> 00:08:57.376 A:middle
You don't want to
parse floor plans.

00:08:57.376 --> 00:08:59.166 A:middle
You just want to find
your loved one's room,

00:08:59.956 --> 00:09:02.816 A:middle
and this is where indoor
positioning and navigating


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:08:59.956 --> 00:09:02.816 A:middle
and this is where indoor
positioning and navigating

00:09:02.816 --> 00:09:05.496 A:middle
with way-finding steps in.

00:09:06.556 --> 00:09:09.296 A:middle
Now, with location we
can also do other really

00:09:09.296 --> 00:09:09.936 A:middle
interesting things.

00:09:11.026 --> 00:09:13.706 A:middle
We can help you find each other.

00:09:14.496 --> 00:09:15.196 A:middle
So you can think

00:09:15.196 --> 00:09:17.566 A:middle
about applications
like Find My Friends.

00:09:18.216 --> 00:09:20.536 A:middle
Here you can imagine a kid
gets dropped off at the mall

00:09:21.116 --> 00:09:22.696 A:middle
and pulls out his
phone and says, hey,

00:09:22.696 --> 00:09:23.726 A:middle
where are all my
friends hanging out?

00:09:24.346 --> 00:09:26.746 A:middle
Okay, they're at that the food
court on the ground floor.

00:09:26.746 --> 00:09:27.776 A:middle
I can head there.

00:09:28.246 --> 00:09:28.846 A:middle
That's pretty cool.

00:09:29.546 --> 00:09:33.066 A:middle
You can also find you.

00:09:33.686 --> 00:09:36.656 A:middle
So the venue in this
case could be aware

00:09:36.886 --> 00:09:38.326 A:middle
of where you're using
your application.

00:09:39.266 --> 00:09:40.626 A:middle
This is one of my
favorite use cases.

00:09:40.986 --> 00:09:42.316 A:middle
Imagine you're in
a Vegas casino.

00:09:42.966 --> 00:09:43.776 A:middle
You're in your hotel room.

00:09:44.096 --> 00:09:45.246 A:middle
You pull out your phone,

00:09:45.916 --> 00:09:49.166 A:middle
and as you're leaving,
you order a drink.

00:09:49.316 --> 00:09:52.256 A:middle
You go downstairs, settle
down on a poker table,

00:09:52.256 --> 00:09:54.626 A:middle
and the drink arrives to
exactly where you are.

00:09:55.186 --> 00:09:57.366 A:middle
That's a pretty awesome
experience.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:00.106 --> 00:10:04.926 A:middle
Now, these use cases are pretty
location centric, but I want you

00:10:04.926 --> 00:10:07.616 A:middle
to think about how you
can use indoor positioning

00:10:08.316 --> 00:10:10.476 A:middle
to be the last piece of
the puzzle in a problem.

00:10:12.146 --> 00:10:13.716 A:middle
So here you can imagine
something

00:10:13.716 --> 00:10:15.006 A:middle
like an airport application.

00:10:15.796 --> 00:10:17.416 A:middle
Now, I have my flight
leaving soon,

00:10:17.416 --> 00:10:18.816 A:middle
but I need to grab a quick bite.

00:10:18.856 --> 00:10:21.956 A:middle
So I'm going to walk over to
a restaurant and sit down.

00:10:22.746 --> 00:10:25.856 A:middle
My application knows which
gate I'm leaving from,

00:10:26.386 --> 00:10:27.886 A:middle
knows what time my
flight is boarding,

00:10:27.886 --> 00:10:31.016 A:middle
and it knows how far away
I am from the gate now,

00:10:32.306 --> 00:10:34.306 A:middle
and so we can start
incorporating this information

00:10:34.306 --> 00:10:36.176 A:middle
to, say, give you a
quick buzz and say, "Hey,

00:10:36.176 --> 00:10:38.476 A:middle
you better start heading
back to your gate if you want

00:10:38.476 --> 00:10:39.046 A:middle
to board this flight."

00:10:40.146 --> 00:10:42.776 A:middle
So these are some pretty
exciting use cases you can build

00:10:42.776 --> 00:10:43.466 A:middle
with indoor positioning.

00:10:44.056 --> 00:10:46.566 A:middle
So how do you start using it?

00:10:48.056 --> 00:10:52.126 A:middle
Well, you need to
have your Wi-Fi on.

00:10:52.576 --> 00:10:55.756 A:middle
We depend on RF parametric
data in these venues.

00:10:56.616 --> 00:10:57.826 A:middle
We also want your users

00:10:57.886 --> 00:11:00.586 A:middle
to be actively engaged
in the application.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:10:57.886 --> 00:11:00.586 A:middle
to be actively engaged
in the application.

00:11:01.246 --> 00:11:04.866 A:middle
We use aggressive Wi-Fi
scanning and motion sensors,

00:11:04.866 --> 00:11:06.386 A:middle
so we want to make sure
we're not just running this

00:11:06.476 --> 00:11:09.516 A:middle
if the user isn't actually
using that indoor positioning.

00:11:12.336 --> 00:11:15.986 A:middle
Now, in terms of API, what
API do you need to use

00:11:16.316 --> 00:11:17.226 A:middle
for indoor positioning?

00:11:17.936 --> 00:11:21.966 A:middle
Well, you can use the exact same
Core Location API you've already

00:11:21.966 --> 00:11:22.376 A:middle
been using.

00:11:23.916 --> 00:11:28.576 A:middle
Now, this is really cool because
if your application today is

00:11:28.576 --> 00:11:32.756 A:middle
requesting best accuracy,
you'll start seeing indoor fixes

00:11:32.756 --> 00:11:35.746 A:middle
when your user wanders into
an indoor-enabled environment.

00:11:36.106 --> 00:11:40.126 A:middle
You won't have to make
any code change for that.

00:11:40.756 --> 00:11:45.086 A:middle
Now, one problem we talked
about earlier was altitude

00:11:45.196 --> 00:11:48.446 A:middle
versus floors and if you
want to build an indoor app,

00:11:48.626 --> 00:11:49.906 A:middle
you really want to
know the floor number.

00:11:50.766 --> 00:11:55.356 A:middle
So in iOS 8 we're adding floor
number to the Core Location API.

00:11:56.176 --> 00:11:58.826 A:middle
It looks something like this:

00:11:58.826 --> 00:12:03.326 A:middle
in the CLLocation object
you'll see a "floor" property.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:11:58.826 --> 00:12:03.326 A:middle
in the CLLocation object
you'll see a "floor" property.

00:12:04.266 --> 00:12:07.106 A:middle
This property will usually
be nil, but when you walk

00:12:07.106 --> 00:12:09.706 A:middle
into a venue and we're
serving you indoor fixes,

00:12:10.216 --> 00:12:13.456 A:middle
we'll populate this number
with the level of floor

00:12:13.456 --> 00:12:15.666 A:middle
that you're on, zero
being the ground floor.

00:12:15.666 --> 00:12:17.036 A:middle
Positive numbers up.

00:12:17.156 --> 00:12:17.876 A:middle
Negative numbers down.

00:12:18.346 --> 00:12:21.666 A:middle
We'll still show you 13.

00:12:21.666 --> 00:12:22.396 A:middle
[ Laughter ]

00:12:22.396 --> 00:12:25.266 A:middle
So we have your floor number,

00:12:25.266 --> 00:12:29.606 A:middle
but Core Location is giving
you a latitude and longitude,

00:12:30.346 --> 00:12:33.676 A:middle
and you're usually displaying
your floor plan on a flat image.

00:12:35.226 --> 00:12:36.846 A:middle
So how do you deal with this?

00:12:36.846 --> 00:12:39.126 A:middle
How do you go from your
latitude and longitude

00:12:39.606 --> 00:12:40.816 A:middle
onto your X, Y on your floor?

00:12:41.796 --> 00:12:44.176 A:middle
To help you figure
this out I'm going

00:12:44.176 --> 00:12:45.536 A:middle
to call my colleague Vitali.

00:12:46.146 --> 00:12:46.676 A:middle
&gt;&gt; Thanks, Nav.

00:12:47.096 --> 00:12:48.406 A:middle
Hi, I'm Vitali Lovich.

00:12:48.406 --> 00:12:51.046 A:middle
I'm from the Core Location
team, and I'm going

00:12:51.046 --> 00:12:53.866 A:middle
to show you how you can
integrate your existing Core

00:12:53.866 --> 00:12:56.156 A:middle
Location API with an
existing app that you have

00:12:56.156 --> 00:12:57.396 A:middle
that shows an indoor floor plan.

00:12:58.696 --> 00:13:00.476 A:middle
So a geographic coordinate
system,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:12:58.696 --> 00:13:00.476 A:middle
So a geographic coordinate
system,

00:13:00.716 --> 00:13:03.756 A:middle
as you may be familiar with,
is a latitude and a longitude.

00:13:04.136 --> 00:13:05.396 A:middle
It's very common and convenient.

00:13:05.396 --> 00:13:09.276 A:middle
Two numbers represent any
place in the world; however,

00:13:09.276 --> 00:13:10.786 A:middle
there are some challenges
that you may have

00:13:10.786 --> 00:13:11.976 A:middle
when you work with them.

00:13:12.376 --> 00:13:14.566 A:middle
For instance, finding the
distance between two latitudes

00:13:14.566 --> 00:13:16.496 A:middle
and longitudes or a direction

00:13:16.496 --> 00:13:19.246 A:middle
between them is very
complicated math.

00:13:20.636 --> 00:13:22.466 A:middle
But when you show
a floor plan image,

00:13:22.926 --> 00:13:24.676 A:middle
you want to show a floor
plan image to the user,

00:13:24.676 --> 00:13:26.066 A:middle
and it's very easy to display.

00:13:26.066 --> 00:13:28.606 A:middle
It maps to the display
coordinate frame system very

00:13:28.606 --> 00:13:32.326 A:middle
well, and its in pixels,
and it's X is positive

00:13:32.326 --> 00:13:35.146 A:middle
to the right, Y is
positive down.

00:13:36.256 --> 00:13:39.086 A:middle
And so we want to somehow
bridge the two by converting

00:13:39.836 --> 00:13:42.826 A:middle
and so there are three
coordinate systems that you want

00:13:42.826 --> 00:13:45.366 A:middle
to keep in mind when
doing these conversions:

00:13:45.876 --> 00:13:47.366 A:middle
There's the geographic
coordinate system,

00:13:47.366 --> 00:13:50.316 A:middle
which is spherical; There's the
floor plan coordinate system,

00:13:50.316 --> 00:13:52.696 A:middle
which is in pixels
and it's planar;

00:13:52.696 --> 00:13:55.716 A:middle
And then there's the display
coordinate frame system,

00:13:55.926 --> 00:13:58.526 A:middle
where you show what part of the
floor plan you're interested in,

00:13:59.156 --> 00:14:01.556 A:middle
and for this talk we're
going to cover the conversion


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:13:59.156 --> 00:14:01.556 A:middle
and for this talk we're
going to cover the conversion

00:14:01.556 --> 00:14:06.156 A:middle
from geographic to floor
plan coordinate frames.

00:14:06.156 --> 00:14:07.826 A:middle
So you want to make
sure that you account

00:14:07.826 --> 00:14:10.586 A:middle
for spherical distortion,
because any time you go

00:14:10.586 --> 00:14:13.226 A:middle
from a sphere and
you try to map it

00:14:13.226 --> 00:14:17.306 A:middle
onto a rectangular plane you'll
have all sorts of distortions

00:14:17.306 --> 00:14:18.886 A:middle
where straight lines aren't
straight lines anymore .

00:14:20.656 --> 00:14:23.966 A:middle
So to help us accomplish this
task, we're going to make use

00:14:23.966 --> 00:14:26.156 A:middle
of some amazing MapKit
helper functions,

00:14:26.946 --> 00:14:28.316 A:middle
and so the first
one I want to call

00:14:28.316 --> 00:14:30.116 A:middle
out is MKMapPointForCoordinate.

00:14:30.816 --> 00:14:34.106 A:middle
Now, what this does is it
takes a geographical latitude

00:14:34.106 --> 00:14:36.306 A:middle
and longitude and converts
it to a MapKit point,

00:14:36.706 --> 00:14:39.986 A:middle
which is just an X, Y coordinate
on a Mercator projection,

00:14:40.536 --> 00:14:44.476 A:middle
and so positive-- so,
X and Y represent east

00:14:44.476 --> 00:14:45.796 A:middle
and south and it's in points.

00:14:46.726 --> 00:14:49.536 A:middle
MKMetersBetweenMapPoints
is a very accurate

00:14:49.536 --> 00:14:51.616 A:middle
and very precise way
of finding the distance

00:14:51.616 --> 00:14:55.866 A:middle
between two MK map points
in meters, and it accounts

00:14:55.866 --> 00:14:58.706 A:middle
for your spherical distortions,
and then we'll take a look

00:14:58.706 --> 00:15:01.126 A:middle
at MKMetersPerMapPointAtLatitude
a little bit later.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:14:58.706 --> 00:15:01.126 A:middle
at MKMetersPerMapPointAtLatitude
a little bit later.

00:15:02.406 --> 00:15:06.006 A:middle
So now that we have this primer,
what do we need to get started?

00:15:06.476 --> 00:15:09.676 A:middle
Well, we want to find
two points on our map,

00:15:09.676 --> 00:15:10.756 A:middle
and we'll call them
anchor points,

00:15:11.666 --> 00:15:14.746 A:middle
and an anchor point is simply
a latitude and longitude mapped

00:15:14.976 --> 00:15:19.246 A:middle
to a floor plan pixel so we
know how the floor plan exists

00:15:19.246 --> 00:15:19.976 A:middle
in the real world.

00:15:20.916 --> 00:15:22.156 A:middle
So what you want
to do is you want

00:15:22.156 --> 00:15:24.696 A:middle
to find two identifying
features in your floor plan

00:15:25.006 --> 00:15:27.956 A:middle
that are very easy to find on an
aerial map, like you might find

00:15:27.956 --> 00:15:30.956 A:middle
in Apple Maps, and then you
find the corresponding latitude

00:15:30.956 --> 00:15:32.636 A:middle
and longitude for
that floor plan pixel.

00:15:33.526 --> 00:15:36.596 A:middle
So now that we have these two
anchor points, we need to figure

00:15:36.596 --> 00:15:41.886 A:middle
out how the floor plan in
pixels maps to the real world.

00:15:41.886 --> 00:15:43.056 A:middle
So we need to figure
out a scale.

00:15:43.816 --> 00:15:46.366 A:middle
So how many pixels
represent a single meter?

00:15:46.866 --> 00:15:48.566 A:middle
So to accomplish
this we're going

00:15:48.566 --> 00:15:51.356 A:middle
to use the MapKit helper
functions I pointed out earlier

00:15:51.356 --> 00:15:54.756 A:middle
and we're going to convert our
anchor points' geographical

00:15:54.756 --> 00:15:57.496 A:middle
coordinates into
Mercator projection,

00:15:57.496 --> 00:16:00.016 A:middle
and then we use MapKit
again to figure


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:15:57.496 --> 00:16:00.016 A:middle
and then we use MapKit
again to figure

00:16:00.016 --> 00:16:00.966 A:middle
out the distance in meters.

00:16:00.966 --> 00:16:02.896 A:middle
So now we have distance
in meters.

00:16:03.986 --> 00:16:06.876 A:middle
And then the distance in a floor
plan is very easy to calculate.

00:16:06.876 --> 00:16:08.586 A:middle
It's just the Pythagorean
Theorem, and we're just going

00:16:08.586 --> 00:16:10.316 A:middle
to call hypot to do it for us,

00:16:10.316 --> 00:16:11.976 A:middle
and now we have a
distance in pixels.

00:16:12.126 --> 00:16:12.846 A:middle
So now we have pixels.

00:16:12.846 --> 00:16:13.426 A:middle
We have meters.

00:16:13.766 --> 00:16:15.686 A:middle
We know how many pixels
represent 1 meter.

00:16:16.796 --> 00:16:18.796 A:middle
Orientation is a little
bit more complicated,

00:16:19.146 --> 00:16:22.156 A:middle
and so your floor plan, when
you show it to the user,

00:16:22.156 --> 00:16:26.296 A:middle
is usually aligned to
some logical orientation.

00:16:26.386 --> 00:16:29.516 A:middle
You might show it to them
so that X is positive

00:16:29.686 --> 00:16:31.656 A:middle
on the screen, and Y is down.

00:16:32.096 --> 00:16:34.756 A:middle
That doesn't necessarily
correspond to your north

00:16:34.856 --> 00:16:38.726 A:middle
and east coordinates,
and so we need to figure

00:16:38.726 --> 00:16:40.906 A:middle
out how we would rotate
to that floor plan

00:16:41.206 --> 00:16:42.706 A:middle
to make it show up correctly.

00:16:42.826 --> 00:16:48.656 A:middle
So what we're going to do is
we're going to align the east

00:16:48.656 --> 00:16:51.606 A:middle
and south to the X and
Y, and we can see now

00:16:51.606 --> 00:16:55.156 A:middle
that our two anchor points in
yellow are relative to the east

00:16:55.156 --> 00:16:57.126 A:middle
and south, but they're
somewhat different.

00:16:57.126 --> 00:17:01.036 A:middle
They're rotated relative to
the green, which is relative


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:16:57.126 --> 00:17:01.036 A:middle
They're rotated relative to
the green, which is relative

00:17:01.036 --> 00:17:03.996 A:middle
to the floor plan, and so
what we're going to do is try

00:17:03.996 --> 00:17:08.076 A:middle
to calculate the angle
between the green line

00:17:08.076 --> 00:17:10.435 A:middle
and the yellow line using
some existing angles

00:17:10.435 --> 00:17:13.455 A:middle
that we know about,
and so the way to do

00:17:13.455 --> 00:17:16.766 A:middle
that is you simply
subtract the two angles.

00:17:17.796 --> 00:17:21.236 A:middle
So now we know how much to
rotate the floor plan by to get

00:17:21.236 --> 00:17:25.576 A:middle
into your logical
orientation that you want.

00:17:26.866 --> 00:17:29.296 A:middle
So now we have these
two precomputed values.

00:17:29.296 --> 00:17:30.776 A:middle
What do we do with them?

00:17:31.036 --> 00:17:33.316 A:middle
Well, we're going to
get a user position

00:17:33.426 --> 00:17:35.956 A:middle
in geographical coordinates,
latitudes and longitudes.

00:17:36.366 --> 00:17:37.936 A:middle
As you may have guessed,
we convert it

00:17:37.936 --> 00:17:39.276 A:middle
into the Mercator projection,

00:17:40.116 --> 00:17:43.066 A:middle
and so that gives us a user
point, and now what we're going

00:17:43.066 --> 00:17:44.866 A:middle
to do is subtract the
user points from one

00:17:44.866 --> 00:17:48.426 A:middle
of our anchor points, and that
gives us how many MapKit points

00:17:48.426 --> 00:17:53.006 A:middle
we are east and south
from the floor plan.

00:17:54.526 --> 00:17:56.086 A:middle
But we want to account
for the fact

00:17:56.086 --> 00:17:57.816 A:middle
that MapKit points are not
the same thing as meters.

00:17:57.816 --> 00:18:02.946 A:middle
So we want to account for the
fact that MapKit is a projection


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:17:57.816 --> 00:18:02.946 A:middle
So we want to account for the
fact that MapKit is a projection

00:18:02.946 --> 00:18:04.866 A:middle
of the globe, and so
it has distortion,

00:18:04.956 --> 00:18:06.666 A:middle
and so the distortion
changes depending

00:18:06.666 --> 00:18:08.976 A:middle
on which latitude you're at.

00:18:09.046 --> 00:18:10.726 A:middle
And so, by multiplying
by this meter scale,

00:18:11.106 --> 00:18:13.786 A:middle
we know how many meters
east and south the user is

00:18:13.786 --> 00:18:17.326 A:middle
on your floor plan, and so
now we just apply the scale we

00:18:17.326 --> 00:18:18.406 A:middle
precomputed previously.

00:18:18.996 --> 00:18:22.226 A:middle
That gives us how many
pixels east and south,

00:18:22.486 --> 00:18:25.186 A:middle
and then once we apply the
rotation, we get pixels

00:18:25.186 --> 00:18:26.666 A:middle
in X, Y of your floor plan.

00:18:27.296 --> 00:18:29.486 A:middle
And so, if you were to
apply this backwards,

00:18:29.716 --> 00:18:31.626 A:middle
you would have a mechanism
-- like, literally,

00:18:31.626 --> 00:18:33.186 A:middle
the exact same steps
backwards --

00:18:33.506 --> 00:18:35.366 A:middle
you would have a mechanism
converting your floor plan

00:18:35.366 --> 00:18:37.186 A:middle
pixels into geographic
coordinates.

00:18:38.676 --> 00:18:41.416 A:middle
So I hope I've demonstrated
a way for you

00:18:41.416 --> 00:18:45.376 A:middle
to incorporate the existing
geographic coordinates

00:18:45.376 --> 00:18:48.476 A:middle
that you get from Core Location
into your indoor floor plan.

00:18:49.096 --> 00:18:49.536 A:middle
Thank you.

00:18:50.306 --> 00:18:53.356 A:middle
&gt;&gt; So with that information you
can take your Core Location fix,

00:18:54.116 --> 00:18:55.186 A:middle
map it to your floor plan

00:18:55.186 --> 00:18:56.556 A:middle
and start displaying
it to your user.

00:18:57.936 --> 00:19:00.646 A:middle
Now that's really cool; you can
build an application with that.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:18:57.936 --> 00:19:00.646 A:middle
Now that's really cool; you can
build an application with that.

00:19:01.896 --> 00:19:03.696 A:middle
Where can you start
building these applications?

00:19:04.726 --> 00:19:06.576 A:middle
Well, in terms of availability,

00:19:06.666 --> 00:19:08.116 A:middle
I'd like to tell you
about three venues.

00:19:09.276 --> 00:19:12.326 A:middle
There's the California Academy
of Sciences that I demoed

00:19:12.326 --> 00:19:14.816 A:middle
to you earlier, in Golden
Gate Park in San Francisco,

00:19:16.166 --> 00:19:18.356 A:middle
which is a big natural
history museum.

00:19:19.806 --> 00:19:23.056 A:middle
There's the Westfield SF Mall
a couple of blocks from here.

00:19:23.946 --> 00:19:26.706 A:middle
Has many floors, and it's
a quintessential mall

00:19:26.706 --> 00:19:27.236 A:middle
in a big city.

00:19:27.236 --> 00:19:31.426 A:middle
You may have also flown in
from the San Jose International

00:19:31.426 --> 00:19:34.356 A:middle
Airport, and so we're going
to be enabling that soon,

00:19:35.296 --> 00:19:38.596 A:middle
and all of these will be
enabled in upcoming seeds

00:19:38.596 --> 00:19:43.176 A:middle
of the developer build along
with sample code that walk you

00:19:43.176 --> 00:19:44.846 A:middle
through the process that
Vitali just described.

00:19:45.476 --> 00:19:48.496 A:middle
So keep an eye out on
developer.apple.com for when

00:19:48.496 --> 00:19:51.156 A:middle
that sample code comes out, and
you guys can run out and start,

00:19:51.156 --> 00:19:52.726 A:middle
and we'll enable these venues,

00:19:52.946 --> 00:19:54.896 A:middle
and you guys can start
using indoor positioning.

00:19:55.786 --> 00:19:57.496 A:middle
Now, these are not the
only set of venues.

00:19:57.616 --> 00:20:00.666 A:middle
There are very many, many more
that are going to be coming


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:19:57.616 --> 00:20:00.666 A:middle
There are very many, many more
that are going to be coming

00:20:00.666 --> 00:20:01.746 A:middle
up in the upcoming months,

00:20:02.766 --> 00:20:05.386 A:middle
and so we'll be announcing
them as that happens.

00:20:06.556 --> 00:20:08.776 A:middle
So you build this application.

00:20:09.616 --> 00:20:12.626 A:middle
How do we get people to
start using this application?

00:20:12.626 --> 00:20:14.866 A:middle
How do we get people to
install this application?

00:20:15.616 --> 00:20:17.786 A:middle
Well, there's a traditional way,

00:20:17.866 --> 00:20:19.276 A:middle
which is just advertise
at your venue.

00:20:19.546 --> 00:20:22.286 A:middle
Put up a giant sign
with an ugly QR code,

00:20:23.226 --> 00:20:24.606 A:middle
but we don't like
that very much.

00:20:24.606 --> 00:20:28.366 A:middle
So last year we introduced
the Near Me feature

00:20:28.646 --> 00:20:31.436 A:middle
in the App Store,
and that allowed you

00:20:31.436 --> 00:20:35.046 A:middle
to launch the App Store,
look at that particular view,

00:20:35.046 --> 00:20:37.056 A:middle
and it would tell
you the relevant

00:20:37.056 --> 00:20:39.136 A:middle
and popular applications
near you.

00:20:40.256 --> 00:20:44.026 A:middle
But that still relies on the
user to launch the application

00:20:44.026 --> 00:20:45.156 A:middle
and look for nearby venues,

00:20:45.156 --> 00:20:46.656 A:middle
which they might have
never thought about.

00:20:47.606 --> 00:20:52.346 A:middle
So as a continuity
feature, we're bubbling

00:20:52.346 --> 00:20:56.216 A:middle
up that popular application
onto your Lock screen.

00:20:57.166 --> 00:21:00.516 A:middle
So now when you open your
phone and wake your device,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:20:57.166 --> 00:21:00.516 A:middle
So now when you open your
phone and wake your device,

00:21:01.156 --> 00:21:02.506 A:middle
you'll see this in the
bottom left corner.

00:21:03.326 --> 00:21:04.766 A:middle
I'll show a little
App Store icon

00:21:04.766 --> 00:21:08.866 A:middle
so that you can launch the
App Store directly to the page

00:21:08.866 --> 00:21:11.556 A:middle
that will tell you the
popular applications near you,

00:21:12.806 --> 00:21:14.806 A:middle
and once that application
is installed,

00:21:15.186 --> 00:21:18.896 A:middle
we'll actually show you the icon
for that particular application.

00:21:19.436 --> 00:21:22.436 A:middle
And when the user
swipes this up,

00:21:22.436 --> 00:21:26.956 A:middle
we'll launch your application
directly from the Lock screen.

00:21:27.146 --> 00:21:27.946 A:middle
Now that's really cool.

00:21:28.346 --> 00:21:31.006 A:middle
Now people can show up at your
venue, pull out their phone

00:21:31.246 --> 00:21:33.206 A:middle
and launch the appropriate
application without ever having

00:21:33.206 --> 00:21:35.536 A:middle
to go through multiple steps.

00:21:36.316 --> 00:21:40.036 A:middle
But let's say I have a specific
venue with a really great app

00:21:40.036 --> 00:21:44.166 A:middle
and I want to notify people
when they walk into my venue.

00:21:45.466 --> 00:21:48.546 A:middle
Well, here we're thinking about
when we're close to, let's say,

00:21:48.546 --> 00:21:50.406 A:middle
the entrance of a
venue, and we're thinking

00:21:50.406 --> 00:21:51.746 A:middle
about notifying your
application,

00:21:53.186 --> 00:21:55.196 A:middle
and that's when we want to
think about iBeacon technology.

00:21:56.686 --> 00:21:57.806 A:middle
So, indoor positioning

00:21:58.116 --> 00:22:00.476 A:middle
and iBeacon technology
really complement each other.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:21:58.116 --> 00:22:00.476 A:middle
and iBeacon technology
really complement each other.

00:22:00.886 --> 00:22:03.936 A:middle
They complete the indoor
experience that we expect.

00:22:04.566 --> 00:22:10.366 A:middle
Now, iBeacon technology, we
covered this last year in the

00:22:10.366 --> 00:22:14.976 A:middle
"What's New in Core
Location" talk.

00:22:15.186 --> 00:22:18.986 A:middle
Devices with iBeacon technology,
these little beacons,

00:22:19.166 --> 00:22:22.506 A:middle
can run on little coin
batteries and last a few months.

00:22:22.836 --> 00:22:25.386 A:middle
You can also take any
iOS device with Bluetooth

00:22:26.076 --> 00:22:29.876 A:middle
and advertise beacons with them.

00:22:30.206 --> 00:22:32.576 A:middle
So if you have a point of
sale device, you can turn

00:22:32.576 --> 00:22:36.736 A:middle
that into a beacon as well,
and we can use these beacons

00:22:36.986 --> 00:22:40.606 A:middle
to advertise that, "Hey, I
have a region over here,"

00:22:41.516 --> 00:22:44.396 A:middle
and your application can
register to get notified

00:22:45.156 --> 00:22:46.386 A:middle
when the device sees
that region.

00:22:46.766 --> 00:22:49.696 A:middle
So when we're thinking
about indoor positioning

00:22:49.776 --> 00:22:52.976 A:middle
and iBeacon technology,
indoor positioning is really

00:22:52.976 --> 00:22:57.286 A:middle
about your position in the
geographic space, where you're

00:22:57.286 --> 00:23:00.346 A:middle
on the floor plan, and it's
about navigation and getting you


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:22:57.286 --> 00:23:00.346 A:middle
on the floor plan, and it's
about navigation and getting you

00:23:00.346 --> 00:23:01.266 A:middle
from one place to another.

00:23:01.636 --> 00:23:05.436 A:middle
iBeacon technology
is about proximity.

00:23:06.016 --> 00:23:08.286 A:middle
What is near me?

00:23:08.856 --> 00:23:10.246 A:middle
It's also about notification.

00:23:10.386 --> 00:23:14.426 A:middle
Because it's based on Bluetooth
for energy, you can register

00:23:14.426 --> 00:23:20.046 A:middle
for beacon regions, and we'll
notify your application --

00:23:20.046 --> 00:23:24.056 A:middle
even if it's in the background
-- when the device sees this.

00:23:25.516 --> 00:23:30.396 A:middle
So let's ground all
of this in an example.

00:23:30.396 --> 00:23:31.866 A:middle
I want you think
about an art gallery,

00:23:32.796 --> 00:23:38.166 A:middle
and in this art gallery we
have an amazing application

00:23:39.406 --> 00:23:42.556 A:middle
that really creates an immersive
experience for our visitors,

00:23:43.526 --> 00:23:44.886 A:middle
and we love this
application so much,

00:23:44.886 --> 00:23:47.436 A:middle
we want to notify our
users when they enter

00:23:47.436 --> 00:23:48.296 A:middle
into this art gallery.

00:23:49.556 --> 00:23:52.736 A:middle
Well, you could use
a CLCircularRegion.

00:23:53.226 --> 00:23:56.256 A:middle
Now, this is a region with a
point in the middle in lat/long

00:23:56.806 --> 00:24:00.606 A:middle
and a radius, and a
CLCircularRegion is a great API


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:23:56.806 --> 00:24:00.606 A:middle
and a radius, and a
CLCircularRegion is a great API

00:24:00.826 --> 00:24:03.806 A:middle
that lets you notify the
same way beacons would

00:24:03.966 --> 00:24:05.326 A:middle
in the background.

00:24:06.276 --> 00:24:12.256 A:middle
But CLCircularRegions rely on
Wi-Fi, and so we really want

00:24:12.256 --> 00:24:14.896 A:middle
to make the radius about
as small as 100 meters,

00:24:14.896 --> 00:24:16.286 A:middle
not much less than that.

00:24:17.456 --> 00:24:18.596 A:middle
Now, this would work great

00:24:18.626 --> 00:24:22.026 A:middle
if you have a colossal
building that's perfectly round,

00:24:23.116 --> 00:24:24.806 A:middle
but that might not be the case.

00:24:26.066 --> 00:24:30.826 A:middle
So for our floor plan, if
we have a round region,

00:24:32.096 --> 00:24:32.896 A:middle
this might be an issue.

00:24:34.016 --> 00:24:35.036 A:middle
Now, if someone is walking

00:24:35.036 --> 00:24:37.246 A:middle
into your parking lot,
they'll get notified.

00:24:37.586 --> 00:24:39.096 A:middle
If you're on the second
floor of a building

00:24:39.096 --> 00:24:40.326 A:middle
and you're just walking

00:24:40.326 --> 00:24:42.246 A:middle
on the first floor,
they'll get notified.

00:24:42.246 --> 00:24:46.816 A:middle
Here's where we want to use the
power of iBeacon technology.

00:24:47.346 --> 00:24:53.136 A:middle
What we can do is install
beacons at the entrances

00:24:53.696 --> 00:24:55.786 A:middle
of your floor plan,
and the great thing

00:24:55.786 --> 00:24:57.696 A:middle
about these beacons is
we can really tune them

00:24:57.696 --> 00:24:59.416 A:middle
and drop them exactly
where we want


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:00.116 --> 00:25:03.106 A:middle
and with what power we want
them to emit their signal

00:25:03.186 --> 00:25:06.576 A:middle
so that we can control, "I
want to notify at this point."

00:25:07.806 --> 00:25:10.246 A:middle
And now the device can say...

00:25:11.486 --> 00:25:14.256 A:middle
when you have your application,
the application can register

00:25:14.256 --> 00:25:15.356 A:middle
with Core Location and say,

00:25:15.576 --> 00:25:17.356 A:middle
"when you see this
beacon, notify me."

00:25:17.986 --> 00:25:22.586 A:middle
And when the device
enters your region,

00:25:22.666 --> 00:25:25.906 A:middle
it will trigger that API.

00:25:26.056 --> 00:25:29.836 A:middle
So we use the
startMonitoringForRegion API

00:25:30.406 --> 00:25:32.286 A:middle
with a beaconRegion
where you specify

00:25:32.566 --> 00:25:35.966 A:middle
which unique identifier
you are looking for on

00:25:35.966 --> 00:25:38.216 A:middle
that iBeacon technology device.

00:25:38.546 --> 00:25:41.886 A:middle
And when you see that region,

00:25:41.886 --> 00:25:44.856 A:middle
we'll trigger the
didEnterRegion delegate,

00:25:44.856 --> 00:25:47.696 A:middle
and this is when you can
start notifying your user

00:25:47.806 --> 00:25:48.406 A:middle
when appropriate.

00:25:48.916 --> 00:25:55.126 A:middle
At this point the user sees the
notification, and they think,

00:25:55.406 --> 00:25:56.816 A:middle
oh great, I do have
this application.

00:25:56.816 --> 00:25:57.366 A:middle
Let me launch it.

00:25:58.226 --> 00:26:00.786 A:middle
And here you can create your
indoor positioning experience.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:25:58.226 --> 00:26:00.786 A:middle
And here you can create your
indoor positioning experience.

00:26:01.556 --> 00:26:03.646 A:middle
So you can display your
user's position on the map,

00:26:04.776 --> 00:26:08.046 A:middle
and as the user walks around,
the little dot will follow them,

00:26:08.046 --> 00:26:11.136 A:middle
which is pretty cool, and while
they're browsing your catalog,

00:26:11.906 --> 00:26:13.456 A:middle
they can pick something that
they really want to see,

00:26:13.576 --> 00:26:17.346 A:middle
and you can navigate them
to that particular exhibit.

00:26:18.276 --> 00:26:22.156 A:middle
This can provide
step-by-step direction exactly

00:26:22.456 --> 00:26:23.896 A:middle
where you want to go.

00:26:28.206 --> 00:26:30.136 A:middle
So once we're at this place,

00:26:30.696 --> 00:26:34.596 A:middle
we want to also show the
user relevant commentary

00:26:34.966 --> 00:26:36.376 A:middle
about the exhibits
that are around them.

00:26:37.526 --> 00:26:39.816 A:middle
And again, here we're
talking about proximity,

00:26:40.186 --> 00:26:42.126 A:middle
and when we're thinking
about proximity,

00:26:42.326 --> 00:26:43.656 A:middle
we want to think about iBeacons.

00:26:43.656 --> 00:26:45.556 A:middle
We need fine-grain proximity.

00:26:47.136 --> 00:26:50.806 A:middle
So what we can do
now is deploy beacons

00:26:51.386 --> 00:26:53.746 A:middle
at all the various exhibits
where we have commentary

00:26:54.706 --> 00:27:00.716 A:middle
on our floor plan, and when a
user is using your application


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:26:54.706 --> 00:27:00.716 A:middle
on our floor plan, and when a
user is using your application

00:27:00.976 --> 00:27:05.036 A:middle
and enters the region, we can
start ranging from that beacon,

00:27:05.716 --> 00:27:07.716 A:middle
and we can say, "Oh,
am I just seeing it

00:27:07.716 --> 00:27:09.096 A:middle
or am I very close to it?

00:27:09.096 --> 00:27:10.836 A:middle
Am I right up next to it?"

00:27:10.976 --> 00:27:14.186 A:middle
And when you are, you
can start doing things

00:27:14.186 --> 00:27:15.516 A:middle
like providing commentary

00:27:15.936 --> 00:27:17.736 A:middle
or showing the appropriate
item in the catalog.

00:27:18.326 --> 00:27:21.026 A:middle
Now, this uses the Ranging API.

00:27:21.956 --> 00:27:24.216 A:middle
So you can call
startRangingBeaconsInRegion,

00:27:25.016 --> 00:27:27.276 A:middle
and then your delegate
will get called

00:27:27.446 --> 00:27:30.166 A:middle
with all the beacons
that it sees.

00:27:30.346 --> 00:27:32.726 A:middle
Here you can use the
proximity value to filter

00:27:32.726 --> 00:27:35.416 A:middle
for how close you want
to be from that beacon.

00:27:36.026 --> 00:27:42.156 A:middle
Now, these beacons will
also advertise a major

00:27:42.156 --> 00:27:42.946 A:middle
and a minor code.

00:27:46.976 --> 00:27:49.246 A:middle
Now, this major code can
encode something like,

00:27:49.476 --> 00:27:52.046 A:middle
"Is this an entry beacon or
is this an exhibit beacon,"

00:27:52.416 --> 00:27:54.796 A:middle
and the minor code
can tell you exactly

00:27:54.796 --> 00:27:58.936 A:middle
which exhibit this exhibit
beacon is advertising,

00:27:59.206 --> 00:28:00.636 A:middle
and then you can
do a local lookup


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:27:59.206 --> 00:28:00.636 A:middle
and then you can
do a local lookup

00:28:00.866 --> 00:28:03.226 A:middle
and show relevant
information for that.

00:28:05.586 --> 00:28:08.686 A:middle
So we can build these
amazing features with beacons

00:28:09.326 --> 00:28:12.456 A:middle
and indoor positioning, and this
really completes that experience

00:28:12.456 --> 00:28:15.276 A:middle
of what your application needs
to do for an indoor venue.

00:28:17.226 --> 00:28:20.626 A:middle
Now, when you're thinking
about these amazing features,

00:28:20.626 --> 00:28:22.376 A:middle
you have to keep
the user in mind.

00:28:22.716 --> 00:28:24.356 A:middle
You have a lot of power
with these features,

00:28:25.166 --> 00:28:26.176 A:middle
and with great power...

00:28:27.136 --> 00:28:28.996 A:middle
comes strict security
and privacy guidelines.

00:28:29.026 --> 00:28:31.026 A:middle
[ Laughter ]

00:28:31.056 --> 00:28:34.086 A:middle
So we want you and your users
to be on the same page here.

00:28:34.166 --> 00:28:40.086 A:middle
You, as the app developer, need
to anticipate how am I going

00:28:40.086 --> 00:28:44.046 A:middle
to be, how is my user going
to be using their location?

00:28:44.566 --> 00:28:48.286 A:middle
Your user also needs to
be able to anticipate,

00:28:48.286 --> 00:28:50.446 A:middle
"How is this application
using my location?"

00:28:51.026 --> 00:28:56.106 A:middle
So forming this trust
between the user

00:28:56.106 --> 00:29:00.726 A:middle
and the app developers is what
allows users to trust you,


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:28:56.106 --> 00:29:00.726 A:middle
and the app developers is what
allows users to trust you,

00:29:00.726 --> 00:29:02.246 A:middle
as the app developer,
with their location.

00:29:03.176 --> 00:29:05.126 A:middle
So there's a couple
of things you can do.

00:29:05.296 --> 00:29:07.346 A:middle
You can request location
only as you need it.

00:29:07.506 --> 00:29:09.136 A:middle
So if you have a particular view

00:29:09.136 --> 00:29:11.096 A:middle
in your application
that's not using location

00:29:11.096 --> 00:29:11.936 A:middle
and you're just logging in,

00:29:12.646 --> 00:29:14.296 A:middle
don't start requesting
location immediately.

00:29:14.806 --> 00:29:18.226 A:middle
Wait till you actually launch
a view that has a map on it

00:29:18.376 --> 00:29:19.996 A:middle
or you need to use
some location services.

00:29:21.846 --> 00:29:23.796 A:middle
Also use When In
Use authorization.

00:29:24.686 --> 00:29:28.446 A:middle
Now, this is something new
that was introduced in iOS 8.

00:29:28.636 --> 00:29:30.876 A:middle
If you missed the "What's
New In Core Location" talk

00:29:30.916 --> 00:29:32.156 A:middle
that just happened
prior to this one,

00:29:33.116 --> 00:29:34.306 A:middle
be sure to check out that video.

00:29:34.706 --> 00:29:35.876 A:middle
There's some amazing
new features,

00:29:37.336 --> 00:29:39.866 A:middle
and When In Use authorization
really makes it clear

00:29:39.866 --> 00:29:42.326 A:middle
to the user that I can tell

00:29:42.326 --> 00:29:44.626 A:middle
when this application is using
my location so I can trust it.

00:29:46.496 --> 00:29:47.996 A:middle
Also have a clear
purpose string.

00:29:48.586 --> 00:29:51.126 A:middle
Tell your users what you're
doing with your location.

00:29:51.576 --> 00:29:53.856 A:middle
This is a really great
opportunity to communicate

00:29:53.856 --> 00:29:55.826 A:middle
with them so that they're
on the same page as you.

00:29:56.916 --> 00:30:00.046 A:middle
So let's talk about
some next steps.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:29:56.916 --> 00:30:00.046 A:middle
So let's talk about
some next steps.

00:30:00.236 --> 00:30:02.736 A:middle
We have the Maps Connect
website, and here,

00:30:02.736 --> 00:30:07.116 A:middle
if you're a venue owner or if
you're building an application

00:30:07.116 --> 00:30:10.126 A:middle
for a particular venue, you can
head on over to this website

00:30:10.406 --> 00:30:11.706 A:middle
and tell us all about it.

00:30:11.706 --> 00:30:13.416 A:middle
Tell us what you plan
on doing at this venue.

00:30:13.936 --> 00:30:16.076 A:middle
Tell us what kind of
applications you plan

00:30:16.076 --> 00:30:18.866 A:middle
on building, and we can get
you started on the pipeline

00:30:18.866 --> 00:30:21.246 A:middle
so that we can enable indoor
positioning in your venue.

00:30:22.306 --> 00:30:24.776 A:middle
There's also the Maps page,
which is a great resource

00:30:25.236 --> 00:30:27.156 A:middle
for maps and Core Location APIs,

00:30:27.156 --> 00:30:31.956 A:middle
and there's also a new iBeacon
page, where it will tell you

00:30:31.956 --> 00:30:35.886 A:middle
about iBeacon technology, again,
all the API and documentation

00:30:35.886 --> 00:30:38.196 A:middle
that you'll need, and
also licensing information

00:30:38.286 --> 00:30:39.406 A:middle
if you're interested

00:30:39.716 --> 00:30:42.476 A:middle
in manufacturing
iBeacon technology.

00:30:43.216 --> 00:30:48.666 A:middle
So as a summary, we talked
about indoor positioning today.

00:30:48.666 --> 00:30:50.826 A:middle
We talked about some
amazing use cases

00:30:50.826 --> 00:30:53.506 A:middle
that we can enable with this.

00:30:53.716 --> 00:30:55.586 A:middle
We also talked about
Core Location APIs

00:30:55.586 --> 00:30:58.686 A:middle
and how there's very little you
need to add to your application

00:30:59.126 --> 00:31:00.326 A:middle
to make them indoor enabled.


WEBVTT
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00.000

00:30:59.126 --> 00:31:00.326 A:middle
to make them indoor enabled.

00:31:01.296 --> 00:31:04.136 A:middle
We're just using indoor position

00:31:04.136 --> 00:31:06.256 A:middle
to create a new amazing
experience for your users,

00:31:07.186 --> 00:31:09.916 A:middle
and with indoor positioning
and iBeacon technology,

00:31:11.006 --> 00:31:13.826 A:middle
these two technologies
really work perfectly well

00:31:13.826 --> 00:31:17.306 A:middle
with each other, and they
complete the indoor experience

00:31:17.306 --> 00:31:18.756 A:middle
that you expect from
your application

00:31:19.416 --> 00:31:21.746 A:middle
so that you start breaking
out of the barriers of, "Hey,

00:31:21.746 --> 00:31:22.986 A:middle
this is what's happening
in my phone,

00:31:22.986 --> 00:31:24.996 A:middle
and this is what's
happening around me."

00:31:24.996 --> 00:31:27.466 A:middle
Now the environment and
the device can interact

00:31:27.516 --> 00:31:27.966 A:middle
with each other.

00:31:28.506 --> 00:31:31.676 A:middle
For more information, be sure to
check out the developer forums

00:31:31.716 --> 00:31:32.736 A:middle
and the documentation.

00:31:33.986 --> 00:31:36.126 A:middle
There was a related
session, as I mentioned,

00:31:36.126 --> 00:31:37.326 A:middle
of "What's New In
Core Location".

00:31:37.326 --> 00:31:39.866 A:middle
So please make sure
to check that out.

00:31:40.166 --> 00:31:45.626 A:middle
Also there's a "User Privacy in
iOS and OS X" talk on Thursday,

00:31:46.106 --> 00:31:50.036 A:middle
and here we'll discuss how
you should be using location,

00:31:50.036 --> 00:31:52.436 A:middle
how you can communicate
appropriately with your users.

00:31:52.926 --> 00:31:53.526 A:middle
Thank you very much.

00:31:53.526 --> 00:31:55.000 A:middle
[ Applause ]

