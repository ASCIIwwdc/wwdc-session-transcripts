WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:08.125 --> 00:00:08.976 A:middle
&gt;&gt; Hello, everyone.

00:00:09.516 --> 00:00:13.896 A:middle
[ Applause ]

00:00:14.396 --> 00:00:15.866 A:middle
Welcome to making apps with Core

00:00:15.866 --> 00:00:16.386 A:middle
Data.

00:00:16.616 --> 00:00:17.426 A:middle
I'm Scott Perry.

00:00:17.426 --> 00:00:18.556 A:middle
I work on the Core Data team.

00:00:19.086 --> 00:00:21.576 A:middle
And today, we're going to have

00:00:21.576 --> 00:00:22.926 A:middle
an accelerated refresher with a

00:00:22.926 --> 00:00:24.466 A:middle
focus on best practices.

00:00:24.986 --> 00:00:25.966 A:middle
We'll talk about how to get up

00:00:25.966 --> 00:00:27.206 A:middle
and running with Core Data, how

00:00:27.206 --> 00:00:28.576 A:middle
to set up an app's controllers

00:00:28.576 --> 00:00:29.326 A:middle
for success.

00:00:29.976 --> 00:00:31.446 A:middle
And as well as how to use

00:00:31.446 --> 00:00:33.176 A:middle
multiple coordinators and

00:00:33.176 --> 00:00:34.396 A:middle
scaling involving that.

00:00:35.126 --> 00:00:36.386 A:middle
Then we'll wrap up with some

00:00:36.386 --> 00:00:37.476 A:middle
useful testing tips.

00:00:39.446 --> 00:00:40.296 A:middle
So let's get started.

00:00:40.656 --> 00:00:41.726 A:middle
This year, we released a new

00:00:41.726 --> 00:00:42.316 A:middle
sample app.

00:00:42.556 --> 00:00:43.766 A:middle
You may have already seen it in

00:00:43.766 --> 00:00:44.696 A:middle
Session 202.

00:00:44.696 --> 00:00:45.686 A:middle
It starts out with a list of

00:00:45.726 --> 00:00:45.976 A:middle
posts.

00:00:49.336 --> 00:00:50.736 A:middle
We can add a new post by tapping

00:00:50.736 --> 00:00:52.096 A:middle
on the Plus button at the top.

00:00:52.856 --> 00:00:54.416 A:middle
And have a closer look in

00:00:54.416 --> 00:00:55.486 A:middle
DetailViewController.

00:00:56.096 --> 00:00:57.256 A:middle
So you can here -- see here that

00:00:57.256 --> 00:00:58.476 A:middle
this is like a blogging app.

00:00:58.476 --> 00:00:59.616 A:middle
It's supposed to support a

00:00:59.676 --> 00:01:02.606 A:middle
title, content, multiple tags,

00:00:59.676 --> 00:01:02.606 A:middle
title, content, multiple tags,

00:01:02.906 --> 00:01:03.876 A:middle
as well as multiple media

00:01:03.876 --> 00:01:05.346 A:middle
attachments where you can see

00:01:05.346 --> 00:01:05.976 A:middle
the thumbnails down here.

00:01:08.226 --> 00:01:10.326 A:middle
Let's change the title and then

00:01:10.326 --> 00:01:10.956 A:middle
also add a tag.

00:01:14.216 --> 00:01:14.746 A:middle
Hello.

00:01:16.526 --> 00:01:16.836 A:middle
Great.

00:01:17.426 --> 00:01:19.496 A:middle
We'll save that and head back to

00:01:19.496 --> 00:01:20.046 A:middle
the ListView.

00:01:22.346 --> 00:01:22.796 A:middle
Now let's look at the

00:01:22.796 --> 00:01:23.486 A:middle
TagManager.

00:01:23.556 --> 00:01:24.786 A:middle
You can see here that we only

00:01:24.786 --> 00:01:26.396 A:middle
have one tag, called Demo, and

00:01:26.396 --> 00:01:27.546 A:middle
it has three posts.

00:01:27.836 --> 00:01:29.706 A:middle
So let's add two more, one named

00:01:29.756 --> 00:01:30.376 A:middle
Cats.

00:01:31.276 --> 00:01:33.906 A:middle
And another one named Dogs.

00:01:33.906 --> 00:01:36.136 A:middle
All right, we'll dismiss this

00:01:36.776 --> 00:01:38.266 A:middle
and then go back into our little

00:01:38.266 --> 00:01:39.806 A:middle
toolbar here and add 1000

00:01:39.806 --> 00:01:41.216 A:middle
randomly-generated posts.

00:01:42.396 --> 00:01:42.836 A:middle
Here we go.

00:01:44.396 --> 00:01:45.496 A:middle
And if we go back to our tag

00:01:45.496 --> 00:01:48.206 A:middle
list, we can see Dogs are more

00:01:48.206 --> 00:01:49.196 A:middle
popular than Cats.

00:01:49.196 --> 00:01:49.476 A:middle
It's science.

00:01:50.516 --> 00:01:54.056 A:middle
[ Chuckling ]

00:01:54.556 --> 00:01:55.736 A:middle
So now that we've seen our app,

00:01:55.816 --> 00:01:56.906 A:middle
let's think about the shape of

00:01:56.906 --> 00:01:57.486 A:middle
its data.

00:01:58.726 --> 00:02:00.366 A:middle
The most obvious type is posts.

00:01:58.726 --> 00:02:00.366 A:middle
The most obvious type is posts.

00:02:00.366 --> 00:02:01.486 A:middle
So we'll start with that.

00:02:02.586 --> 00:02:03.716 A:middle
But since we support multiple

00:02:03.716 --> 00:02:04.896 A:middle
media attachments, that's

00:02:04.896 --> 00:02:05.496 A:middle
another type.

00:02:05.496 --> 00:02:06.986 A:middle
And then we'll also need a tag

00:02:06.986 --> 00:02:08.156 A:middle
type for the same reason.

00:02:09.196 --> 00:02:10.936 A:middle
But since attachments might be

00:02:10.936 --> 00:02:12.276 A:middle
quite large, we'll want to store

00:02:12.276 --> 00:02:13.286 A:middle
that data separately.

00:02:13.836 --> 00:02:15.376 A:middle
After all, the list view only

00:02:15.376 --> 00:02:17.356 A:middle
needs to show thumbnails, so we

00:02:17.356 --> 00:02:18.176 A:middle
can keep the larger data

00:02:18.176 --> 00:02:18.626 A:middle
elsewhere.

00:02:20.096 --> 00:02:21.456 A:middle
Now that we've organized the

00:02:21.456 --> 00:02:23.036 A:middle
shape of our data, it's a pretty

00:02:23.036 --> 00:02:24.166 A:middle
straightforward process to

00:02:24.166 --> 00:02:25.976 A:middle
transliterate it into a Core

00:02:25.976 --> 00:02:27.276 A:middle
Data model using the Model

00:02:27.276 --> 00:02:28.126 A:middle
Editor and Xcode.

00:02:29.266 --> 00:02:31.386 A:middle
Here, we define the members of

00:02:31.386 --> 00:02:32.746 A:middle
our modeled types, as well as

00:02:32.746 --> 00:02:33.976 A:middle
the relationships between them.

00:02:36.046 --> 00:02:37.126 A:middle
For example, the relationship

00:02:37.126 --> 00:02:38.126 A:middle
between attachments and their

00:02:38.126 --> 00:02:39.756 A:middle
data is one-to-one.

00:02:40.636 --> 00:02:41.916 A:middle
That is, an attachment can only

00:02:41.916 --> 00:02:43.686 A:middle
be backed by one image data, and

00:02:43.686 --> 00:02:45.236 A:middle
an image data can only represent

00:02:45.236 --> 00:02:45.936 A:middle
one attachment.

00:02:47.376 --> 00:02:48.376 A:middle
We can also tell our Core Data

00:02:48.376 --> 00:02:49.586 A:middle
in the model that if the

00:02:49.586 --> 00:02:51.136 A:middle
attachment is deleted, then its

00:02:51.136 --> 00:02:52.406 A:middle
image data should be cleaned up

00:02:52.406 --> 00:02:53.056 A:middle
automatically.

00:02:53.406 --> 00:02:54.436 A:middle
This is called a cascade

00:02:54.436 --> 00:02:54.976 A:middle
deletion rule.

00:02:57.596 --> 00:02:58.746 A:middle
Meanwhile, the double arrow

00:02:58.746 --> 00:03:00.016 A:middle
heads signify a too-many

00:02:58.746 --> 00:03:00.016 A:middle
heads signify a too-many

00:03:00.016 --> 00:03:00.706 A:middle
relationship.

00:03:01.296 --> 00:03:02.576 A:middle
Here, a post may have many

00:03:02.576 --> 00:03:04.086 A:middle
attachments, but an attachment

00:03:04.516 --> 00:03:05.856 A:middle
will only ever belong to one

00:03:05.856 --> 00:03:05.976 A:middle
post.

00:03:08.056 --> 00:03:09.336 A:middle
And finally, the post may have

00:03:09.336 --> 00:03:10.046 A:middle
many tags.

00:03:10.516 --> 00:03:11.806 A:middle
Tags may be on many posts.

00:03:11.806 --> 00:03:12.676 A:middle
This is a many-too-many

00:03:12.676 --> 00:03:12.976 A:middle
relationship.

00:03:17.126 --> 00:03:18.516 A:middle
So now, we've defined a managed

00:03:18.516 --> 00:03:19.216 A:middle
object model.

00:03:19.216 --> 00:03:20.506 A:middle
But there are a few more Core

00:03:20.506 --> 00:03:21.706 A:middle
Data types that we need to get

00:03:21.706 --> 00:03:22.976 A:middle
familiar with before we're ready

00:03:22.976 --> 00:03:23.696 A:middle
to build our app.

00:03:25.036 --> 00:03:26.326 A:middle
The model is required by a

00:03:26.326 --> 00:03:27.636 A:middle
PersistentStoreCoordinator,

00:03:27.796 --> 00:03:29.516 A:middle
which as the name implies, is

00:03:29.516 --> 00:03:30.696 A:middle
responsible for managing our

00:03:30.696 --> 00:03:31.686 A:middle
persistent stores.

00:03:32.686 --> 00:03:33.786 A:middle
Most of the time, this is a

00:03:33.786 --> 00:03:34.936 A:middle
database that lives on the file

00:03:34.936 --> 00:03:36.316 A:middle
system, though it's possible to

00:03:36.316 --> 00:03:37.516 A:middle
have many stores at once,

00:03:37.516 --> 00:03:39.296 A:middle
including our own custom made

00:03:39.346 --> 00:03:40.406 A:middle
types that derive from

00:03:40.406 --> 00:03:41.336 A:middle
NSPersistentStore.

00:03:41.836 --> 00:03:44.626 A:middle
Finally, the type that we'll

00:03:44.626 --> 00:03:45.976 A:middle
spend the most time with is the

00:03:45.976 --> 00:03:47.246 A:middle
ManagedObjectContext.

00:03:48.266 --> 00:03:49.446 A:middle
Core Data uses the command

00:03:49.446 --> 00:03:51.156 A:middle
pattern, which is really a fancy

00:03:51.156 --> 00:03:52.166 A:middle
way of saying that you need a

00:03:52.166 --> 00:03:53.616 A:middle
context to get anything done.

00:03:54.236 --> 00:03:55.216 A:middle
If you want to execute a fetch

00:03:55.216 --> 00:03:56.986 A:middle
request, you need a context.

00:03:57.566 --> 00:03:59.246 A:middle
Dirty-to-managed object, the

00:03:59.246 --> 00:04:00.566 A:middle
context knows about it, and will

00:03:59.246 --> 00:04:00.566 A:middle
context knows about it, and will

00:04:00.566 --> 00:04:02.716 A:middle
save it on your command.

00:04:02.906 --> 00:04:04.066 A:middle
Contexts needs to know a

00:04:04.066 --> 00:04:05.276 A:middle
coordinator in order to do their

00:04:05.276 --> 00:04:05.556 A:middle
work.

00:04:05.816 --> 00:04:07.526 A:middle
And as I mentioned earlier, the

00:04:07.526 --> 00:04:08.696 A:middle
coordinator has to know about

00:04:08.696 --> 00:04:09.686 A:middle
the model to make sense of

00:04:09.686 --> 00:04:10.356 A:middle
stores.

00:04:11.346 --> 00:04:12.446 A:middle
The types are all sufficiently

00:04:12.446 --> 00:04:13.086 A:middle
interdependent.

00:04:13.126 --> 00:04:14.226 A:middle
But coordinator provides one

00:04:14.226 --> 00:04:15.586 A:middle
type that encapsulates them all

00:04:15.586 --> 00:04:16.986 A:middle
and represents the entire stack,

00:04:17.326 --> 00:04:18.755 A:middle
called a persistent container.

00:04:20.036 --> 00:04:21.606 A:middle
Using a persistent container, we

00:04:21.606 --> 00:04:23.106 A:middle
can set up a stack in just a few

00:04:23.106 --> 00:04:24.106 A:middle
lines of code, especially if the

00:04:24.106 --> 00:04:24.976 A:middle
model lives in our bundle.

00:04:28.186 --> 00:04:29.336 A:middle
All we need to do is refer to it

00:04:29.336 --> 00:04:30.926 A:middle
by name, and the persistent

00:04:30.926 --> 00:04:31.976 A:middle
container will load it for us.

00:04:34.566 --> 00:04:35.586 A:middle
If the model is generated in

00:04:35.586 --> 00:04:37.656 A:middle
code, or we need to use the same

00:04:37.656 --> 00:04:39.096 A:middle
model with multiple containers,

00:04:39.096 --> 00:04:40.126 A:middle
there's another initializer that

00:04:40.126 --> 00:04:40.976 A:middle
gives us the control we need.

00:04:45.056 --> 00:04:46.166 A:middle
Once we have a container, we

00:04:46.166 --> 00:04:47.296 A:middle
tell it to load our persistent

00:04:47.296 --> 00:04:47.756 A:middle
stores.

00:04:48.196 --> 00:04:49.576 A:middle
The completion block gets called

00:04:49.576 --> 00:04:51.686 A:middle
once per store with a nil error

00:04:51.686 --> 00:04:53.766 A:middle
parameter on success, after

00:04:53.766 --> 00:04:55.476 A:middle
which is time to shift our focus

00:04:55.516 --> 00:04:59.686 A:middle
to managed object contexts.

00:04:59.976 --> 00:05:01.096 A:middle
Contexts provide us with

00:04:59.976 --> 00:05:01.096 A:middle
Contexts provide us with

00:05:01.096 --> 00:05:02.686 A:middle
seamless access to managed data,

00:05:03.126 --> 00:05:04.386 A:middle
and they have a few options that

00:05:04.386 --> 00:05:05.816 A:middle
can make them even more useful

00:05:05.816 --> 00:05:07.556 A:middle
to certain use cases, such as

00:05:07.556 --> 00:05:07.976 A:middle
driving our views.

00:05:10.076 --> 00:05:12.086 A:middle
The first of these is support

00:05:12.086 --> 00:05:13.226 A:middle
for query generations.

00:05:14.146 --> 00:05:15.556 A:middle
Query generations provide a

00:05:15.556 --> 00:05:17.386 A:middle
stable view of the stores data,

00:05:17.386 --> 00:05:18.716 A:middle
allowing safe and consistent

00:05:18.716 --> 00:05:20.446 A:middle
access to objects, even if

00:05:20.446 --> 00:05:22.406 A:middle
they're changed or deleted by

00:05:22.406 --> 00:05:23.076 A:middle
another actor.

00:05:24.646 --> 00:05:25.976 A:middle
To enable this, set the

00:05:25.976 --> 00:05:27.436 A:middle
context's query generation to

00:05:27.466 --> 00:05:27.926 A:middle
current.

00:05:28.816 --> 00:05:30.166 A:middle
Current is a floating meta

00:05:30.166 --> 00:05:30.696 A:middle
version.

00:05:30.836 --> 00:05:32.136 A:middle
The context's query generation

00:05:32.136 --> 00:05:33.776 A:middle
will get pinned to a concrete

00:05:33.776 --> 00:05:35.736 A:middle
point in time on the next access

00:05:35.736 --> 00:05:35.976 A:middle
to the store.

00:05:36.476 --> 00:05:38.546 A:middle
[Chuckles]

00:05:39.046 --> 00:05:40.106 A:middle
Now the context has a stable

00:05:40.106 --> 00:05:41.416 A:middle
view of the data in the store.

00:05:41.596 --> 00:05:42.776 A:middle
What about keeping it up-to-date

00:05:42.776 --> 00:05:43.796 A:middle
with the latest changes?

00:05:44.606 --> 00:05:45.616 A:middle
Well, in the Stone Ages, we

00:05:45.616 --> 00:05:46.886 A:middle
would register for context and

00:05:46.886 --> 00:05:48.026 A:middle
save notifications.

00:05:48.156 --> 00:05:50.126 A:middle
But contexts can also be

00:05:50.126 --> 00:05:51.766 A:middle
configured to keep themselves

00:05:51.766 --> 00:05:53.456 A:middle
up-to-date as changes are saved

00:05:53.456 --> 00:05:54.256 A:middle
by their siblings.

00:05:55.996 --> 00:05:57.206 A:middle
Just that automatically emerges

00:05:57.206 --> 00:05:57.966 A:middle
changes from parent to true.

00:06:01.216 --> 00:06:02.646 A:middle
Okay, so now all of our stack

00:06:02.676 --> 00:06:03.566 A:middle
types are configured to our

00:06:03.566 --> 00:06:04.806 A:middle
liking, how do we use them in

00:06:04.806 --> 00:06:05.726 A:middle
our app?

00:06:06.746 --> 00:06:07.656 A:middle
The most important thing to

00:06:07.656 --> 00:06:09.406 A:middle
remember when using a context is

00:06:09.406 --> 00:06:10.866 A:middle
that all store requests and

00:06:10.866 --> 00:06:11.866 A:middle
interactions with managed

00:06:11.866 --> 00:06:13.146 A:middle
objects must be done in the

00:06:13.146 --> 00:06:14.076 A:middle
context queue.

00:06:15.116 --> 00:06:16.556 A:middle
Background contexts each have

00:06:16.556 --> 00:06:17.396 A:middle
their own queue.

00:06:18.386 --> 00:06:20.086 A:middle
So using them requires the

00:06:20.086 --> 00:06:21.016 A:middle
perform API's.

00:06:22.046 --> 00:06:23.086 A:middle
There's a blocking invariant, as

00:06:23.086 --> 00:06:24.356 A:middle
well as an asynchronous version.

00:06:24.686 --> 00:06:26.736 A:middle
But for truly asynchronous work,

00:06:26.736 --> 00:06:28.266 A:middle
the container offers a

00:06:28.266 --> 00:06:29.336 A:middle
convenience method for

00:06:29.336 --> 00:06:30.966 A:middle
performing background tasks that

00:06:30.966 --> 00:06:32.516 A:middle
creates a background context for

00:06:32.516 --> 00:06:34.016 A:middle
you, and disposes of it

00:06:34.016 --> 00:06:34.756 A:middle
automatically when your block

00:06:34.756 --> 00:06:34.976 A:middle
returns.

00:06:39.366 --> 00:06:40.596 A:middle
So now, how do we add data to

00:06:40.596 --> 00:06:40.906 A:middle
our app?

00:06:41.296 --> 00:06:42.636 A:middle
Well, if we only need a couple

00:06:42.636 --> 00:06:44.616 A:middle
of objects, it's easy to use the

00:06:44.616 --> 00:06:45.906 A:middle
initializer provided by the

00:06:45.906 --> 00:06:47.556 A:middle
managed object sub classes that

00:06:47.556 --> 00:06:48.856 A:middle
were generated for us from our

00:06:48.856 --> 00:06:50.006 A:middle
model by Xcode.

00:06:50.666 --> 00:06:52.616 A:middle
If the subclass is only used by

00:06:52.616 --> 00:06:54.336 A:middle
one model, then it already knows

00:06:54.336 --> 00:06:55.666 A:middle
which entity it represents.

00:06:55.916 --> 00:06:57.116 A:middle
So we can use in it with

00:06:57.116 --> 00:06:57.716 A:middle
context.

00:06:58.626 --> 00:06:59.516 A:middle
Once it's been registered with

00:06:59.516 --> 00:07:00.556 A:middle
the context, then we can

00:06:59.516 --> 00:07:00.556 A:middle
the context, then we can

00:07:00.556 --> 00:07:01.826 A:middle
configure it, treating it like

00:07:01.826 --> 00:07:03.016 A:middle
any other instance variable.

00:07:04.446 --> 00:07:05.666 A:middle
Once it's set up to our liking,

00:07:06.306 --> 00:07:08.016 A:middle
we call the contextSave method

00:07:08.016 --> 00:07:08.976 A:middle
to persist it to storage.

00:07:13.096 --> 00:07:14.516 A:middle
But what if we need more data?

00:07:14.986 --> 00:07:16.666 A:middle
Most apps aren't content with

00:07:16.666 --> 00:07:18.216 A:middle
inserting a handful of objects

00:07:18.216 --> 00:07:18.766 A:middle
at a time.

00:07:19.536 --> 00:07:20.456 A:middle
Chances are good, you've got a

00:07:20.456 --> 00:07:22.216 A:middle
server component that sends

00:07:22.216 --> 00:07:23.796 A:middle
objects back by the hundreds or

00:07:23.836 --> 00:07:24.486 A:middle
thousands.

00:07:25.206 --> 00:07:26.366 A:middle
We can save these to the store

00:07:26.366 --> 00:07:28.226 A:middle
one at a time, like we were just

00:07:28.266 --> 00:07:29.826 A:middle
doing for a couple objects.

00:07:29.826 --> 00:07:31.186 A:middle
But it's a lot of boilerplate to

00:07:31.186 --> 00:07:32.626 A:middle
write, not to mention a lot of

00:07:32.626 --> 00:07:33.386 A:middle
resource overhead, to have all

00:07:33.386 --> 00:07:33.976 A:middle
of those in-memory at once.

00:07:37.536 --> 00:07:39.246 A:middle
Enter batch insertions, the

00:07:39.246 --> 00:07:40.666 A:middle
first of many new features we'll

00:07:40.666 --> 00:07:41.816 A:middle
be talking about today.

00:07:43.026 --> 00:07:44.766 A:middle
This code fragment is worth 1000

00:07:44.766 --> 00:07:45.446 A:middle
objects.

00:07:45.776 --> 00:07:46.986 A:middle
And it all starts with your

00:07:46.986 --> 00:07:48.306 A:middle
de-serialized payload in the

00:07:48.306 --> 00:07:49.246 A:middle
form of an array of dictionaries

00:07:49.246 --> 00:07:49.976 A:middle
that have string keys.

00:07:53.246 --> 00:07:54.916 A:middle
These keys need to line up with

00:07:54.956 --> 00:07:56.356 A:middle
the names of your attributes in

00:07:56.356 --> 00:07:56.806 A:middle
the model.

00:07:57.646 --> 00:07:58.956 A:middle
It's okay to leave some out if

00:07:58.956 --> 00:07:59.736 A:middle
they're not required by

00:07:59.736 --> 00:08:00.766 A:middle
something like a unique

00:07:59.736 --> 00:08:00.766 A:middle
something like a unique

00:08:00.766 --> 00:08:01.356 A:middle
constraint.

00:08:01.996 --> 00:08:03.266 A:middle
If you've configured default

00:08:03.266 --> 00:08:04.536 A:middle
values in your model, then Core

00:08:04.536 --> 00:08:04.976 A:middle
Data will use those.

00:08:07.046 --> 00:08:08.026 A:middle
In this case, we have three

00:08:08.026 --> 00:08:09.256 A:middle
dictionaries that each cover a

00:08:09.256 --> 00:08:10.456 A:middle
different set of content and

00:08:10.456 --> 00:08:11.456 A:middle
title attributes.

00:08:13.096 --> 00:08:14.736 A:middle
Going back to our code, we

00:08:14.736 --> 00:08:16.206 A:middle
create a batch insert request

00:08:16.206 --> 00:08:17.346 A:middle
with our array of dictionaries,

00:08:17.346 --> 00:08:18.616 A:middle
as well as the objects model

00:08:18.616 --> 00:08:20.906 A:middle
entity, which is also available

00:08:20.906 --> 00:08:22.096 A:middle
through a method on the managed

00:08:22.096 --> 00:08:23.416 A:middle
object subclass that was

00:08:23.416 --> 00:08:24.926 A:middle
generated for us by Xcode.

00:08:27.276 --> 00:08:28.666 A:middle
Then we execute the request, and

00:08:28.846 --> 00:08:30.766 A:middle
the context returns a response,

00:08:30.766 --> 00:08:31.816 A:middle
which wraps a Boolean, that

00:08:31.816 --> 00:08:32.426 A:middle
tells us if the operation

00:08:32.426 --> 00:08:32.976 A:middle
succeeded.

00:08:35.385 --> 00:08:36.246 A:middle
We're getting a lot for free

00:08:36.246 --> 00:08:36.506 A:middle
here.

00:08:36.506 --> 00:08:38.126 A:middle
And I know you're thinking.

00:08:38.395 --> 00:08:39.126 A:middle
What's the catch?

00:08:40.056 --> 00:08:41.775 A:middle
Well, there's not really many

00:08:41.775 --> 00:08:42.696 A:middle
sharp edges here.

00:08:42.696 --> 00:08:44.076 A:middle
And a lot of this is going to

00:08:44.076 --> 00:08:45.196 A:middle
sound familiar if you've used

00:08:45.196 --> 00:08:46.556 A:middle
batch updates or batch

00:08:46.556 --> 00:08:47.216 A:middle
deletions.

00:08:47.646 --> 00:08:50.186 A:middle
If you have unique constraints

00:08:50.186 --> 00:08:51.706 A:middle
than any existing objects

00:08:51.706 --> 00:08:53.036 A:middle
matching the dictionary will be

00:08:53.036 --> 00:08:53.956 A:middle
pulled out of the database and

00:08:53.956 --> 00:08:55.746 A:middle
updated with new values instead.

00:08:56.276 --> 00:08:59.206 A:middle
Attributes that are optional or

00:08:59.206 --> 00:09:00.716 A:middle
configured with default values

00:08:59.206 --> 00:09:00.716 A:middle
configured with default values

00:09:00.716 --> 00:09:01.706 A:middle
can be omitted from the

00:09:01.706 --> 00:09:02.666 A:middle
dictionary as well.

00:09:03.496 --> 00:09:04.516 A:middle
In the case of updating an

00:09:04.516 --> 00:09:05.976 A:middle
object with unique constraint,

00:09:05.976 --> 00:09:06.796 A:middle
the existing values will not be

00:09:06.796 --> 00:09:06.976 A:middle
changed.

00:09:10.376 --> 00:09:11.666 A:middle
This goes for relationships as

00:09:11.666 --> 00:09:11.996 A:middle
well.

00:09:12.726 --> 00:09:14.056 A:middle
Batch insertions can't be used

00:09:14.056 --> 00:09:15.186 A:middle
to set relationships.

00:09:15.946 --> 00:09:17.336 A:middle
But if a batch insert updates an

00:09:17.336 --> 00:09:18.816 A:middle
existing object due to a unique

00:09:18.816 --> 00:09:20.186 A:middle
constraint, the existing

00:09:20.186 --> 00:09:21.246 A:middle
relationships will be left

00:09:21.246 --> 00:09:21.606 A:middle
alone.

00:09:22.906 --> 00:09:24.736 A:middle
And finally, like the other

00:09:24.736 --> 00:09:26.096 A:middle
batch operations, batch

00:09:26.096 --> 00:09:28.046 A:middle
insertions do not generate a

00:09:28.046 --> 00:09:29.796 A:middle
contextDidSaveNotification, so

00:09:29.796 --> 00:09:30.746 A:middle
you'll have to manage that on

00:09:30.746 --> 00:09:30.976 A:middle
your own.

00:09:31.096 --> 00:09:33.636 A:middle
Now that we have some data,

00:09:33.786 --> 00:09:35.216 A:middle
let's talk about how to satisfy

00:09:35.216 --> 00:09:36.406 A:middle
the needs of our controllers.

00:09:36.936 --> 00:09:38.916 A:middle
The first thing that a

00:09:38.916 --> 00:09:39.866 A:middle
controller needs to be able to

00:09:39.866 --> 00:09:41.706 A:middle
do, is fetch and present data.

00:09:41.936 --> 00:09:42.806 A:middle
So let's look at that.

00:09:44.576 --> 00:09:45.716 A:middle
We use a fetch request to get

00:09:45.716 --> 00:09:46.936 A:middle
objects out of the store.

00:09:47.646 --> 00:09:48.926 A:middle
And just like getting the entity

00:09:48.926 --> 00:09:50.286 A:middle
when we created new objects,

00:09:50.336 --> 00:09:51.376 A:middle
there's a method on the managed

00:09:51.376 --> 00:09:52.996 A:middle
object subclass type generated

00:09:52.996 --> 00:09:54.596 A:middle
by Xcode, that will give us a

00:09:54.596 --> 00:09:55.976 A:middle
preconfigured fetch request.

00:09:58.596 --> 00:09:59.666 A:middle
Adding a predicate to the

00:09:59.666 --> 00:10:01.306 A:middle
request allows us to refine our

00:09:59.666 --> 00:10:01.306 A:middle
request allows us to refine our

00:10:01.306 --> 00:10:03.296 A:middle
results, in this case, so we can

00:10:03.296 --> 00:10:03.836 A:middle
fetch a tag by its name.

00:10:07.686 --> 00:10:09.166 A:middle
Once we've executed the request,

00:10:09.326 --> 00:10:10.306 A:middle
you pluck the results out and

00:10:10.306 --> 00:10:10.976 A:middle
use it to configure our views.

00:10:14.476 --> 00:10:15.626 A:middle
This works well for immutable

00:10:15.626 --> 00:10:16.056 A:middle
data.

00:10:16.376 --> 00:10:17.576 A:middle
But what if the tag's name or

00:10:17.606 --> 00:10:19.136 A:middle
color changes while our view is

00:10:19.136 --> 00:10:19.376 A:middle
up?

00:10:20.006 --> 00:10:21.406 A:middle
Our managed object context will

00:10:21.406 --> 00:10:22.296 A:middle
make sure that the objects'

00:10:22.356 --> 00:10:23.366 A:middle
properties get updated.

00:10:23.986 --> 00:10:25.006 A:middle
But we haven't done any of the

00:10:25.006 --> 00:10:26.146 A:middle
plumbing here necessary to

00:10:26.146 --> 00:10:27.336 A:middle
observe those changes.

00:10:28.546 --> 00:10:30.256 A:middle
As many of you know, managed

00:10:30.256 --> 00:10:31.906 A:middle
objects have supported key value

00:10:31.906 --> 00:10:33.226 A:middle
observations since the dawn of

00:10:33.316 --> 00:10:33.636 A:middle
time.

00:10:34.276 --> 00:10:36.006 A:middle
But the combined framework,

00:10:36.086 --> 00:10:37.956 A:middle
announced this week, makes KVO

00:10:37.956 --> 00:10:39.576 A:middle
much easier to use in Swift.

00:10:40.296 --> 00:10:41.696 A:middle
We get a publisher out of the

00:10:41.696 --> 00:10:43.326 A:middle
object for each property we want

00:10:43.326 --> 00:10:45.916 A:middle
to wire up, and sync the data

00:10:45.916 --> 00:10:46.986 A:middle
flow into an assignment

00:10:46.986 --> 00:10:48.276 A:middle
subscriber on the view.

00:10:48.816 --> 00:10:50.656 A:middle
In the case of the tag's color,

00:10:50.656 --> 00:10:51.946 A:middle
we have an extra map step in the

00:10:51.946 --> 00:10:53.356 A:middle
middle to make the types lineup.

00:10:54.386 --> 00:10:56.116 A:middle
This is all the code we need to

00:10:56.116 --> 00:10:56.416 A:middle
write.

00:10:56.746 --> 00:10:57.816 A:middle
And our ViewsContents will

00:10:57.816 --> 00:10:59.206 A:middle
automatically get updated now

00:10:59.206 --> 00:11:00.476 A:middle
whenever the underlying object

00:10:59.206 --> 00:11:00.476 A:middle
whenever the underlying object

00:11:00.476 --> 00:11:00.976 A:middle
changes.

00:11:01.516 --> 00:11:06.156 A:middle
[ Cheering and Applause ]

00:11:06.656 --> 00:11:08.046 A:middle
Yeah, Combine is great.

00:11:08.046 --> 00:11:09.256 A:middle
And this is barely scratching

00:11:09.256 --> 00:11:10.496 A:middle
the surface of the framework.

00:11:10.736 --> 00:11:12.176 A:middle
It provides a lot more, very

00:11:12.176 --> 00:11:13.166 A:middle
powerful, data flow

00:11:13.166 --> 00:11:13.996 A:middle
functionality.

00:11:13.996 --> 00:11:15.216 A:middle
And to learn more, I encourage

00:11:15.216 --> 00:11:17.246 A:middle
you to check out Session 721.

00:11:18.096 --> 00:11:19.906 A:middle
Now there is a deceit you may

00:11:19.906 --> 00:11:21.046 A:middle
have noticed to this evolution

00:11:21.046 --> 00:11:22.626 A:middle
of our code, and it's that

00:11:22.626 --> 00:11:23.756 A:middle
DetailViews almost never

00:11:23.756 --> 00:11:24.956 A:middle
actually have to fetch the

00:11:24.956 --> 00:11:26.606 A:middle
object that they're presenting.

00:11:27.286 --> 00:11:28.546 A:middle
Usually this kind of view is

00:11:28.636 --> 00:11:29.926 A:middle
pushed from a parent that

00:11:29.926 --> 00:11:31.086 A:middle
configures it with a managed

00:11:31.086 --> 00:11:31.596 A:middle
object.

00:11:31.596 --> 00:11:33.366 A:middle
So normally, the code we'd write

00:11:33.366 --> 00:11:35.476 A:middle
would actually look like this.

00:11:36.926 --> 00:11:38.656 A:middle
The Parent to our DetailView is

00:11:38.706 --> 00:11:40.456 A:middle
usually some kind of list view,

00:11:40.456 --> 00:11:41.516 A:middle
like a Collection or a

00:11:41.516 --> 00:11:42.206 A:middle
TableView.

00:11:42.816 --> 00:11:44.476 A:middle
It also gets its objects from a

00:11:44.526 --> 00:11:45.186 A:middle
fetch request.

00:11:45.226 --> 00:11:46.206 A:middle
But there are a few more

00:11:46.206 --> 00:11:47.156 A:middle
properties that we haven't

00:11:47.156 --> 00:11:48.726 A:middle
talked about that are important

00:11:48.726 --> 00:11:49.646 A:middle
when fetching a bunch of

00:11:49.646 --> 00:11:49.976 A:middle
objects.

00:11:52.546 --> 00:11:53.236 A:middle
The first is the

00:11:53.236 --> 00:11:54.446 A:middle
requestSortDescriptors.

00:11:55.556 --> 00:11:56.936 A:middle
These define the order of the

00:11:56.936 --> 00:11:57.706 A:middle
results.

00:11:58.326 --> 00:11:59.366 A:middle
In this case, we're sorting our

00:11:59.366 --> 00:12:00.266 A:middle
tags by name.

00:11:59.366 --> 00:12:00.266 A:middle
tags by name.

00:12:00.486 --> 00:12:02.106 A:middle
But if names weren't unique

00:12:02.106 --> 00:12:03.416 A:middle
enough, we'd want to add another

00:12:03.416 --> 00:12:04.626 A:middle
descriptor to the end of the

00:12:04.626 --> 00:12:05.976 A:middle
array to break any ties.

00:12:08.456 --> 00:12:09.596 A:middle
Another useful option is

00:12:09.626 --> 00:12:10.116 A:middle
fetching.

00:12:10.766 --> 00:12:11.996 A:middle
If our fetch request is going to

00:12:11.996 --> 00:12:14.266 A:middle
match 14 million objects, we

00:12:14.266 --> 00:12:15.536 A:middle
don't want them to all get

00:12:15.536 --> 00:12:16.686 A:middle
loaded into memory at the same

00:12:16.686 --> 00:12:17.146 A:middle
time.

00:12:17.976 --> 00:12:19.076 A:middle
Even if we had the memory for

00:12:19.076 --> 00:12:20.786 A:middle
that, which we probably don't,

00:12:21.116 --> 00:12:22.356 A:middle
it would take a long time.

00:12:22.866 --> 00:12:24.346 A:middle
Instead, we configure a fetch

00:12:24.346 --> 00:12:26.076 A:middle
batch size to tell the context

00:12:26.076 --> 00:12:27.036 A:middle
how many objects should be

00:12:27.036 --> 00:12:28.466 A:middle
loaded from the store at a time.

00:12:28.876 --> 00:12:30.516 A:middle
This makes a big difference on

00:12:30.516 --> 00:12:31.736 A:middle
our app's responsiveness.

00:12:31.976 --> 00:12:32.786 A:middle
But it only works when

00:12:32.786 --> 00:12:34.096 A:middle
interacting with the result as

00:12:34.096 --> 00:12:34.896 A:middle
an MS Array.

00:12:35.146 --> 00:12:37.026 A:middle
Swift's array bridging defeats

00:12:37.026 --> 00:12:38.016 A:middle
this optimization.

00:12:39.976 --> 00:12:41.416 A:middle
So with this knowledge, it's

00:12:41.416 --> 00:12:42.806 A:middle
pretty easy to set up a fetch

00:12:42.806 --> 00:12:46.396 A:middle
request that will fetch all the

00:12:46.396 --> 00:12:47.656 A:middle
tags that we want to see.

00:12:48.176 --> 00:12:49.836 A:middle
But what if one gets changed?

00:12:51.576 --> 00:12:52.956 A:middle
Just like with the properties of

00:12:52.956 --> 00:12:54.046 A:middle
an object that we're displaying

00:12:54.046 --> 00:12:55.666 A:middle
in a detailed view, we need some

00:12:55.666 --> 00:12:57.136 A:middle
way to keep up with the objects

00:12:57.136 --> 00:12:58.266 A:middle
as the career changes.

00:12:59.826 --> 00:13:01.386 A:middle
Luckily, Core Data supports live

00:12:59.826 --> 00:13:01.386 A:middle
Luckily, Core Data supports live

00:13:01.386 --> 00:13:02.786 A:middle
queries in the form of a Fetch

00:13:02.786 --> 00:13:03.596 A:middle
Results Controller.

00:13:04.846 --> 00:13:06.246 A:middle
Here we've configured a request

00:13:06.246 --> 00:13:07.876 A:middle
to fetch all posts ordered by

00:13:07.876 --> 00:13:09.336 A:middle
title, 50 at a time.

00:13:10.766 --> 00:13:12.046 A:middle
This fetch request is joined by

00:13:12.046 --> 00:13:13.856 A:middle
a context to configure a type we

00:13:13.856 --> 00:13:15.116 A:middle
haven't talked about yet called

00:13:15.116 --> 00:13:16.376 A:middle
a fetchedResults Controller.

00:13:17.226 --> 00:13:18.496 A:middle
It communicates changes to the

00:13:18.496 --> 00:13:20.046 A:middle
fetch requests through a

00:13:20.046 --> 00:13:21.546 A:middle
delegate protocaller and starts

00:13:21.546 --> 00:13:22.656 A:middle
working as soon as you tell it

00:13:22.656 --> 00:13:23.696 A:middle
to perform the fetch.

00:13:25.356 --> 00:13:26.976 A:middle
Now the Fetch Results Controller

00:13:26.976 --> 00:13:28.226 A:middle
is probably well known to many

00:13:28.226 --> 00:13:28.816 A:middle
of you already.

00:13:29.656 --> 00:13:30.716 A:middle
The delegate protocols change

00:13:30.716 --> 00:13:32.106 A:middle
reporting callbacks include a

00:13:32.106 --> 00:13:33.416 A:middle
method to tell you when changes

00:13:33.416 --> 00:13:34.846 A:middle
are going to begin coming in.

00:13:35.706 --> 00:13:37.566 A:middle
Another to tell you when a

00:13:37.566 --> 00:13:39.276 A:middle
section changed in some way.

00:13:40.286 --> 00:13:41.756 A:middle
And another tell you for each

00:13:41.756 --> 00:13:43.176 A:middle
object that changed, how it

00:13:43.176 --> 00:13:43.756 A:middle
changed.

00:13:44.126 --> 00:13:46.586 A:middle
And finally, a method to tell

00:13:46.586 --> 00:13:47.436 A:middle
you that we're done.

00:13:47.526 --> 00:13:48.386 A:middle
And you know everything.

00:13:49.746 --> 00:13:50.796 A:middle
These methods were originally

00:13:50.796 --> 00:13:52.426 A:middle
designed to line up closely with

00:13:52.426 --> 00:13:54.136 A:middle
UITableView's API, but there was

00:13:54.136 --> 00:13:55.546 A:middle
still a fair amount of glue code

00:13:55.546 --> 00:13:56.926 A:middle
to write matching the career

00:13:57.096 --> 00:13:58.486 A:middle
query results to the table

00:13:58.486 --> 00:13:59.146 A:middle
redrawing.

00:13:59.846 --> 00:14:01.346 A:middle
Furthermore, newer collection

00:13:59.846 --> 00:14:01.346 A:middle
Furthermore, newer collection

00:14:01.346 --> 00:14:02.766 A:middle
views don't support this change

00:14:02.766 --> 00:14:03.516 A:middle
callback pattern.

00:14:04.606 --> 00:14:06.616 A:middle
So I'm very happy to announce

00:14:06.616 --> 00:14:07.326 A:middle
that the Fetch Results

00:14:07.326 --> 00:14:08.386 A:middle
Controller has learned some new

00:14:08.386 --> 00:14:09.166 A:middle
tricks this year.

00:14:10.256 --> 00:14:11.656 A:middle
The first is a delegate method

00:14:11.656 --> 00:14:13.136 A:middle
that vends an instance of

00:14:13.136 --> 00:14:14.586 A:middle
NSDiffableData SourceSnapshot.

00:14:15.516 --> 00:14:18.726 A:middle
[ Applause ]

00:14:19.226 --> 00:14:20.216 A:middle
It sounds like a lot of you

00:14:20.216 --> 00:14:21.536 A:middle
already know what this type is.

00:14:21.786 --> 00:14:23.496 A:middle
But in case you don't, it's a

00:14:23.496 --> 00:14:25.106 A:middle
new type in UIKit MapKit that

00:14:25.106 --> 00:14:26.376 A:middle
represents the structure of a

00:14:26.376 --> 00:14:27.566 A:middle
collection or TableView.

00:14:27.956 --> 00:14:29.756 A:middle
To use one, you configure your

00:14:29.756 --> 00:14:31.106 A:middle
TableView's data source to be

00:14:31.106 --> 00:14:32.976 A:middle
one of the DiffableDataSource,

00:14:32.976 --> 00:14:34.646 A:middle
also new this year, and feed it

00:14:34.646 --> 00:14:35.406 A:middle
snapshots.

00:14:36.236 --> 00:14:37.536 A:middle
You can learn more about these

00:14:37.576 --> 00:14:38.876 A:middle
types in Session 220.

00:14:38.876 --> 00:14:41.196 A:middle
But for all our purposes, all

00:14:41.196 --> 00:14:42.576 A:middle
you need to know is that you can

00:14:42.576 --> 00:14:43.746 A:middle
use them to keep your collection

00:14:43.746 --> 00:14:44.916 A:middle
views up-to-date in a single

00:14:44.916 --> 00:14:45.686 A:middle
line of code.

00:14:46.356 --> 00:14:47.576 A:middle
And that code fits in the

00:14:47.576 --> 00:14:48.696 A:middle
remainder of the slide.

00:14:49.086 --> 00:14:49.966 A:middle
This used to be a lot of

00:14:49.966 --> 00:14:50.586 A:middle
boilerplate.

00:14:51.396 --> 00:14:53.236 A:middle
All we're doing here is feeding

00:14:53.236 --> 00:14:53.966 A:middle
the Snapshot to the

00:14:53.966 --> 00:14:55.166 A:middle
DiffableDataSource.

00:14:55.656 --> 00:14:56.906 A:middle
The data source diffs the

00:14:56.906 --> 00:14:58.336 A:middle
snapshot against the previous

00:14:58.336 --> 00:14:59.826 A:middle
view state that it has, which is

00:14:59.826 --> 00:15:00.346 A:middle
what makes it a

00:14:59.826 --> 00:15:00.346 A:middle
what makes it a

00:15:00.576 --> 00:15:02.446 A:middle
DiffableDataSource, and then

00:15:02.446 --> 00:15:04.046 A:middle
uses it -- uses the computer

00:15:04.046 --> 00:15:04.976 A:middle
difference to update the view.

00:15:05.516 --> 00:15:08.756 A:middle
[ Applause ]

00:15:09.256 --> 00:15:10.106 A:middle
This has been a long time

00:15:10.106 --> 00:15:10.466 A:middle
coming.

00:15:11.016 --> 00:15:12.106 A:middle
[Chuckles]

00:15:12.106 --> 00:15:13.486 A:middle
The DiffableDataSource Snapshot

00:15:13.486 --> 00:15:14.906 A:middle
works great for wholesale

00:15:14.906 --> 00:15:16.326 A:middle
control of the collection view.

00:15:16.326 --> 00:15:17.056 A:middle
But if you're looking for

00:15:17.056 --> 00:15:18.086 A:middle
something that allows more

00:15:18.086 --> 00:15:20.076 A:middle
customization, or you're

00:15:20.076 --> 00:15:21.376 A:middle
managing the state of types

00:15:21.376 --> 00:15:22.846 A:middle
other than Table and Collection

00:15:22.846 --> 00:15:25.136 A:middle
views, we have another delegate

00:15:25.136 --> 00:15:26.556 A:middle
method you may be interested in.

00:15:27.326 --> 00:15:29.106 A:middle
Like with Snapshots, this method

00:15:29.106 --> 00:15:30.476 A:middle
also gives you a summary of all

00:15:30.476 --> 00:15:31.506 A:middle
the changes to the Fetched

00:15:31.506 --> 00:15:32.646 A:middle
Results in one shot.

00:15:32.646 --> 00:15:34.496 A:middle
But it uses a different type,

00:15:34.576 --> 00:15:35.846 A:middle
also new this year, called

00:15:35.846 --> 00:15:36.866 A:middle
CollectionDifference.

00:15:37.186 --> 00:15:39.366 A:middle
Like the name implies, a

00:15:39.366 --> 00:15:40.516 A:middle
CollectionDifference encodes the

00:15:40.516 --> 00:15:42.026 A:middle
difference between, and can be

00:15:42.026 --> 00:15:43.916 A:middle
generated from, two collections.

00:15:45.636 --> 00:15:46.776 A:middle
Collection diffing in the Swift

00:15:46.776 --> 00:15:48.306 A:middle
standard library was introduced

00:15:48.306 --> 00:15:50.206 A:middle
in Swift Evolution Proposal 240.

00:15:50.706 --> 00:15:51.596 A:middle
But it also exists in

00:15:51.596 --> 00:15:52.196 A:middle
Foundation.

00:15:52.196 --> 00:15:53.036 A:middle
And you can learn more about

00:15:53.036 --> 00:15:53.946 A:middle
that in Session 711.

00:15:56.216 --> 00:15:57.226 A:middle
For our purposes, it's a

00:15:57.226 --> 00:15:58.236 A:middle
one-dimensional type.

00:15:58.236 --> 00:15:59.676 A:middle
So it's only supported when

00:15:59.676 --> 00:16:00.686 A:middle
you're not using section

00:15:59.676 --> 00:16:00.686 A:middle
you're not using section

00:16:00.686 --> 00:16:01.226 A:middle
fetching.

00:16:01.656 --> 00:16:03.416 A:middle
And like the SnapshotDelegate

00:16:03.416 --> 00:16:04.976 A:middle
method, it's mutually exclusive

00:16:04.976 --> 00:16:06.296 A:middle
with the legacy change reporting

00:16:06.296 --> 00:16:06.956 A:middle
methods.

00:16:06.956 --> 00:16:08.276 A:middle
So if you want to drive multiple

00:16:08.276 --> 00:16:09.416 A:middle
things from a Fetched Results

00:16:09.416 --> 00:16:10.936 A:middle
Controller, you should use

00:16:10.936 --> 00:16:11.526 A:middle
multiple Fetched Results

00:16:11.526 --> 00:16:11.956 A:middle
controllers.

00:16:14.756 --> 00:16:15.756 A:middle
So let's take a quick look at

00:16:15.756 --> 00:16:16.856 A:middle
how we can drive a single

00:16:16.856 --> 00:16:18.476 A:middle
section of a collection view

00:16:18.776 --> 00:16:20.276 A:middle
using these differences.

00:16:21.586 --> 00:16:22.496 A:middle
Here's our Delegate method.

00:16:23.086 --> 00:16:24.436 A:middle
And at the very top, we start by

00:16:24.436 --> 00:16:26.016 A:middle
kicking off a batch update, and

00:16:26.016 --> 00:16:27.286 A:middle
looping over the changes in the

00:16:27.286 --> 00:16:27.716 A:middle
diff.

00:16:29.606 --> 00:16:30.776 A:middle
CollectionDifferences support

00:16:30.776 --> 00:16:32.826 A:middle
two kinds of changes, Insert and

00:16:32.826 --> 00:16:33.406 A:middle
Remove.

00:16:33.716 --> 00:16:35.266 A:middle
And two changes of opposing

00:16:35.266 --> 00:16:36.676 A:middle
types may refer to each other

00:16:36.726 --> 00:16:37.856 A:middle
through association.

00:16:38.136 --> 00:16:40.196 A:middle
So in the first case, we have an

00:16:40.196 --> 00:16:41.756 A:middle
insertion that has an associated

00:16:41.756 --> 00:16:42.226 A:middle
removal.

00:16:42.976 --> 00:16:44.516 A:middle
This means the object has moved,

00:16:44.696 --> 00:16:46.006 A:middle
or at least changed.

00:16:46.196 --> 00:16:47.196 A:middle
It may not have actually moved

00:16:47.196 --> 00:16:48.146 A:middle
logical position.

00:16:48.576 --> 00:16:49.706 A:middle
But it doesn't matter, because

00:16:49.706 --> 00:16:50.916 A:middle
the CollectionView is smart

00:16:50.916 --> 00:16:52.216 A:middle
enough to tell the difference.

00:16:52.216 --> 00:16:53.066 A:middle
And as long as we give it the

00:16:53.066 --> 00:16:54.536 A:middle
right original and destination

00:16:54.536 --> 00:16:56.476 A:middle
IndexPaths, then it will do the

00:16:56.476 --> 00:16:56.976 A:middle
right thing.

00:16:58.206 --> 00:16:59.456 A:middle
In the second case, we have an

00:16:59.456 --> 00:17:00.816 A:middle
insert of an object that was not

00:16:59.456 --> 00:17:00.816 A:middle
insert of an object that was not

00:17:00.816 --> 00:17:01.986 A:middle
previously part of the Fetched

00:17:01.986 --> 00:17:02.546 A:middle
Results.

00:17:02.796 --> 00:17:03.876 A:middle
So we tell the CollectionView to

00:17:03.876 --> 00:17:04.886 A:middle
add it.

00:17:06.066 --> 00:17:07.846 A:middle
Finally, we match all removes

00:17:07.846 --> 00:17:09.106 A:middle
that weren't part of an

00:17:09.106 --> 00:17:11.386 A:middle
associated move by filtering for

00:17:11.386 --> 00:17:12.846 A:middle
new associations, and then

00:17:12.846 --> 00:17:13.556 A:middle
remove those from the

00:17:13.556 --> 00:17:14.205 A:middle
CollectionView.

00:17:14.646 --> 00:17:16.435 A:middle
And that's it.

00:17:17.246 --> 00:17:18.496 A:middle
And you'll notice that this code

00:17:18.496 --> 00:17:19.366 A:middle
composes well.

00:17:19.445 --> 00:17:20.816 A:middle
So it's a good candidate for

00:17:20.816 --> 00:17:22.866 A:middle
factoring into a function to

00:17:22.866 --> 00:17:24.165 A:middle
further reduce your boilerplate,

00:17:24.445 --> 00:17:25.486 A:middle
because all the state you need

00:17:26.356 --> 00:17:27.496 A:middle
is the CollectionView and the

00:17:27.496 --> 00:17:28.026 A:middle
difference.

00:17:28.566 --> 00:17:29.726 A:middle
So we think people are really

00:17:29.726 --> 00:17:30.786 A:middle
going to love these new delegate

00:17:30.786 --> 00:17:31.266 A:middle
methods.

00:17:31.816 --> 00:17:32.996 A:middle
But the old ones find new life

00:17:32.996 --> 00:17:33.706 A:middle
this year as well.

00:17:34.386 --> 00:17:35.436 A:middle
The Swift UI framework

00:17:35.436 --> 00:17:36.856 A:middle
introduces first-party support

00:17:36.856 --> 00:17:38.966 A:middle
for declarative interfaces, but

00:17:39.126 --> 00:17:39.896 A:middle
it can't be driven with

00:17:39.896 --> 00:17:40.956 A:middle
Snapshots or diffs.

00:17:41.496 --> 00:17:42.946 A:middle
But this model type can be

00:17:42.946 --> 00:17:45.136 A:middle
derived from our list of Fetched

00:17:45.136 --> 00:17:45.746 A:middle
Results.

00:17:46.676 --> 00:17:47.936 A:middle
Conveniently, the existing

00:17:47.936 --> 00:17:48.456 A:middle
controller,

00:17:48.456 --> 00:17:50.456 A:middle
didChangeContentDelegateMethod

00:17:50.766 --> 00:17:51.736 A:middle
will tell us every time an

00:17:51.736 --> 00:17:53.156 A:middle
updated set of Fetched Results

00:17:53.156 --> 00:17:53.946 A:middle
is ready to update our views.

00:17:57.076 --> 00:17:58.366 A:middle
So it's easy now to apply

00:17:58.366 --> 00:17:59.566 A:middle
Fetched Results to our views.

00:17:59.566 --> 00:18:00.396 A:middle
But what if the results

00:17:59.566 --> 00:18:00.396 A:middle
But what if the results

00:18:00.396 --> 00:18:01.836 A:middle
themselves were difficult to

00:18:01.836 --> 00:18:02.476 A:middle
fetch?

00:18:02.966 --> 00:18:04.826 A:middle
What if we wind up being unable

00:18:04.826 --> 00:18:05.916 A:middle
to build a fetch request to

00:18:05.916 --> 00:18:07.326 A:middle
fetch our data?

00:18:07.326 --> 00:18:09.296 A:middle
Or what if we wind up with

00:18:09.296 --> 00:18:11.056 A:middle
performance problems when we

00:18:11.056 --> 00:18:12.326 A:middle
execute our fetch requests?

00:18:13.196 --> 00:18:15.026 A:middle
At a certain point, the needs of

00:18:15.026 --> 00:18:15.776 A:middle
the controller outweigh the

00:18:15.776 --> 00:18:17.076 A:middle
needs of the model, and we have

00:18:17.076 --> 00:18:18.556 A:middle
to give up some modeling purity

00:18:19.416 --> 00:18:20.316 A:middle
in order to accomplish our

00:18:20.316 --> 00:18:20.876 A:middle
goals.

00:18:21.606 --> 00:18:23.116 A:middle
We do this with denormalization.

00:18:24.266 --> 00:18:25.486 A:middle
We talked a bit about

00:18:25.486 --> 00:18:28.206 A:middle
denormalization during WWDC 2018

00:18:28.206 --> 00:18:29.786 A:middle
in Session 224.

00:18:29.896 --> 00:18:32.296 A:middle
But to recap, denormalization is

00:18:32.296 --> 00:18:33.846 A:middle
when we keep copies of our data,

00:18:33.846 --> 00:18:35.276 A:middle
so access can be more efficient.

00:18:36.276 --> 00:18:37.226 A:middle
This comes with the price of

00:18:37.226 --> 00:18:38.106 A:middle
some additional overhead

00:18:38.106 --> 00:18:39.486 A:middle
maintaining that extra data.

00:18:39.776 --> 00:18:40.266 A:middle
But there are a lot of

00:18:40.266 --> 00:18:41.616 A:middle
circumstances where this

00:18:41.616 --> 00:18:42.766 A:middle
tradeoff is a no-brainer.

00:18:43.936 --> 00:18:45.546 A:middle
Databases indexes are a good

00:18:45.546 --> 00:18:46.556 A:middle
example of this.

00:18:46.786 --> 00:18:47.926 A:middle
In exchange for maintaining a

00:18:47.926 --> 00:18:49.526 A:middle
copy of all of our indexed

00:18:49.526 --> 00:18:51.196 A:middle
columns, were rewarded with

00:18:51.196 --> 00:18:53.566 A:middle
lightning-fast queries when they

00:18:53.566 --> 00:18:54.606 A:middle
depend on those columns.

00:18:55.966 --> 00:18:57.386 A:middle
Looking back at our app,

00:18:57.516 --> 00:18:59.016 A:middle
denormalization is also a useful

00:18:59.016 --> 00:19:00.266 A:middle
way for us to keep track how

00:18:59.016 --> 00:19:00.266 A:middle
way for us to keep track how

00:19:00.266 --> 00:19:02.076 A:middle
many posts are using each tag.

00:19:02.736 --> 00:19:05.546 A:middle
All we need to do is add an

00:19:05.546 --> 00:19:08.036 A:middle
integer attribute to the tag

00:19:08.436 --> 00:19:10.106 A:middle
type named postCount.

00:19:12.036 --> 00:19:13.256 A:middle
Now all we have to do is make

00:19:13.256 --> 00:19:14.386 A:middle
sure that this new postCount

00:19:14.386 --> 00:19:15.726 A:middle
attribute gets incremented every

00:19:15.726 --> 00:19:17.386 A:middle
time a post is tagged and

00:19:17.476 --> 00:19:19.566 A:middle
decremented every time a tag is

00:19:19.566 --> 00:19:20.516 A:middle
removed from a post.

00:19:21.406 --> 00:19:22.606 A:middle
Surely, this code will be bug

00:19:22.606 --> 00:19:23.676 A:middle
free, and our data consistent

00:19:23.676 --> 00:19:23.976 A:middle
forever, right?

00:19:24.266 --> 00:19:26.266 A:middle
[ Chuckling ]

00:19:26.516 --> 00:19:29.616 A:middle
Right? [Chuckles] No, enter

00:19:29.616 --> 00:19:30.846 A:middle
derived attributes.

00:19:32.156 --> 00:19:32.896 A:middle
[Chuckles] Derived attributes

00:19:32.896 --> 00:19:34.036 A:middle
are normalized metadata that's

00:19:34.036 --> 00:19:35.776 A:middle
maintained for you by Core Data.

00:19:35.776 --> 00:19:38.536 A:middle
And it's not just for counts.

00:19:38.916 --> 00:19:39.826 A:middle
There's a bunch of supported

00:19:39.866 --> 00:19:40.996 A:middle
functions that you can find in

00:19:40.996 --> 00:19:41.926 A:middle
the documentation.

00:19:43.906 --> 00:19:45.266 A:middle
Derived attributes are defined

00:19:45.346 --> 00:19:46.746 A:middle
in the managed object model.

00:19:47.156 --> 00:19:49.016 A:middle
The Model Editor in Xcode has a

00:19:49.016 --> 00:19:50.346 A:middle
new interface for this.

00:19:50.486 --> 00:19:51.786 A:middle
Or you can define derived

00:19:51.786 --> 00:19:53.636 A:middle
attributes in code using the new

00:19:53.636 --> 00:19:53.876 A:middle
type,

00:19:53.876 --> 00:19:56.486 A:middle
NSDerivedAttributeDescription.

00:19:57.916 --> 00:19:59.436 A:middle
And finally, derivation

00:19:59.436 --> 00:20:01.126 A:middle
expressions can refer to any of

00:19:59.436 --> 00:20:01.126 A:middle
expressions can refer to any of

00:20:01.126 --> 00:20:02.276 A:middle
the properties of an entity, one

00:20:02.656 --> 00:20:02.976 A:middle
level deep.

00:20:05.276 --> 00:20:06.106 A:middle
Derived attributes make

00:20:06.106 --> 00:20:07.736 A:middle
denormalization super easy.

00:20:08.026 --> 00:20:09.236 A:middle
And I'd love to take a moment

00:20:09.236 --> 00:20:10.866 A:middle
now to show you how to adopt

00:20:10.866 --> 00:20:10.956 A:middle
them.

00:20:13.736 --> 00:20:15.426 A:middle
Here we have our app, just as

00:20:15.426 --> 00:20:15.846 A:middle
before.

00:20:16.656 --> 00:20:19.196 A:middle
And if we look in our Tag

00:20:19.196 --> 00:20:21.406 A:middle
Manager here, we can see that we

00:20:21.406 --> 00:20:23.586 A:middle
have three tags and a whole

00:20:23.586 --> 00:20:24.486 A:middle
bunch of posts.

00:20:24.966 --> 00:20:26.316 A:middle
But the view code that's driving

00:20:26.316 --> 00:20:28.616 A:middle
this here is actually traversing

00:20:28.616 --> 00:20:30.346 A:middle
the relationship posts and

00:20:30.346 --> 00:20:32.026 A:middle
getting its count, which faults

00:20:32.026 --> 00:20:33.476 A:middle
in the relationship when we do

00:20:33.476 --> 00:20:33.636 A:middle
it.

00:20:33.876 --> 00:20:35.686 A:middle
So if we had many orders of

00:20:35.686 --> 00:20:37.156 A:middle
magnitude more data, this could

00:20:37.156 --> 00:20:38.146 A:middle
wind up being a performance

00:20:38.146 --> 00:20:39.066 A:middle
problem for us.

00:20:39.896 --> 00:20:41.506 A:middle
So let's fix that by using

00:20:41.506 --> 00:20:43.806 A:middle
derived attributes in our model.

00:20:45.536 --> 00:20:46.776 A:middle
Here's our model editor.

00:20:46.776 --> 00:20:48.186 A:middle
And we're looking at the tag

00:20:48.186 --> 00:20:48.926 A:middle
type right now.

00:20:49.466 --> 00:20:52.456 A:middle
So we're going to go in here and

00:20:52.856 --> 00:20:54.106 A:middle
add a new attribute called

00:20:54.936 --> 00:20:55.526 A:middle
postCount.

00:20:56.216 --> 00:20:57.336 A:middle
And we're going to make that an

00:20:57.336 --> 00:20:57.976 A:middle
integer type.

00:20:59.566 --> 00:21:01.156 A:middle
Now if we go over to the

00:20:59.566 --> 00:21:01.156 A:middle
Now if we go over to the

00:21:01.156 --> 00:21:03.916 A:middle
inspector here, we can see a new

00:21:03.916 --> 00:21:05.696 A:middle
checkbox that says derived.

00:21:06.126 --> 00:21:07.836 A:middle
And if we click it, we wind up

00:21:07.836 --> 00:21:09.226 A:middle
with a space for a derivation

00:21:09.226 --> 00:21:09.746 A:middle
expression.

00:21:10.346 --> 00:21:12.656 A:middle
So here, we're basically moving

00:21:12.656 --> 00:21:14.306 A:middle
our code from the view into

00:21:14.306 --> 00:21:14.716 A:middle
here.

00:21:14.716 --> 00:21:15.956 A:middle
Let's say posts.

00:21:15.956 --> 00:21:18.336 A:middle
@counts, since we're using an

00:21:18.336 --> 00:21:19.246 A:middle
aggregate function.

00:21:20.526 --> 00:21:22.976 A:middle
And then that's it.

00:21:23.456 --> 00:21:24.936 A:middle
If we rebuild, Xcode will

00:21:24.936 --> 00:21:26.446 A:middle
rebuild our managed object sub

00:21:26.446 --> 00:21:27.116 A:middle
classes.

00:21:27.506 --> 00:21:28.696 A:middle
And when we go back to the view,

00:21:28.696 --> 00:21:32.556 A:middle
here, we will find a new

00:21:32.856 --> 00:21:33.926 A:middle
instance variable called

00:21:33.956 --> 00:21:35.496 A:middle
postCount, but it's not

00:21:35.496 --> 00:21:35.936 A:middle
optional.

00:21:35.936 --> 00:21:37.266 A:middle
So we get to delete even more

00:21:37.316 --> 00:21:38.436 A:middle
code by getting rid of this

00:21:38.556 --> 00:21:39.086 A:middle
conditional.

00:21:39.786 --> 00:21:42.116 A:middle
If we build and run, we should

00:21:42.116 --> 00:21:42.976 A:middle
see that nothing changed.

00:21:43.286 --> 00:21:45.286 A:middle
[ Chuckling ]

00:21:45.556 --> 00:21:47.586 A:middle
Except it's way faster and

00:21:47.586 --> 00:21:47.836 A:middle
better.

00:21:47.836 --> 00:21:48.476 A:middle
And we don't have to keep

00:21:48.476 --> 00:21:49.216 A:middle
anything up-to-date.

00:21:49.756 --> 00:21:50.536 A:middle
And sure enough, there it is.

00:21:51.516 --> 00:21:54.886 A:middle
[ Applause ]

00:21:55.386 --> 00:21:57.006 A:middle
The complete set of supported

00:21:57.006 --> 00:21:58.446 A:middle
derivations is available in the

00:21:58.446 --> 00:21:59.386 A:middle
developer docs.

00:21:59.836 --> 00:22:01.286 A:middle
But generally speaking, they

00:21:59.836 --> 00:22:01.286 A:middle
But generally speaking, they

00:22:01.286 --> 00:22:02.506 A:middle
come in four classes.

00:22:03.446 --> 00:22:04.496 A:middle
The simplest is outright

00:22:04.556 --> 00:22:06.366 A:middle
duplication, like keeping a copy

00:22:06.396 --> 00:22:07.936 A:middle
of an attachments identifier and

00:22:07.936 --> 00:22:09.126 A:middle
the image data that backs it.

00:22:10.146 --> 00:22:11.696 A:middle
The other kind of derivation is

00:22:11.696 --> 00:22:13.116 A:middle
a simple transformation of the

00:22:13.116 --> 00:22:15.146 A:middle
fields, such as lower casing a

00:22:15.146 --> 00:22:16.426 A:middle
tag's name, or canonicalizing

00:22:16.426 --> 00:22:16.976 A:middle
some Unicode string.

00:22:20.466 --> 00:22:21.656 A:middle
We just saw an example of an

00:22:21.656 --> 00:22:23.056 A:middle
aggregate function across a too

00:22:23.056 --> 00:22:24.466 A:middle
many relationship in the demo.

00:22:25.656 --> 00:22:27.066 A:middle
And lastly, there are global

00:22:27.066 --> 00:22:29.716 A:middle
functions such as now that take

00:22:29.716 --> 00:22:31.306 A:middle
no parameters at all, which are

00:22:31.306 --> 00:22:33.026 A:middle
useful for things like keeping

00:22:33.026 --> 00:22:34.406 A:middle
track of when an object was last

00:22:34.406 --> 00:22:34.856 A:middle
updated.

00:22:34.886 --> 00:22:36.606 A:middle
So now that our controller is

00:22:36.606 --> 00:22:37.906 A:middle
wont for nothing, it's time to

00:22:37.906 --> 00:22:39.166 A:middle
talk about some more advanced

00:22:39.166 --> 00:22:40.156 A:middle
topics and scaling.

00:22:40.426 --> 00:22:42.416 A:middle
PersistentHistory was introduced

00:22:42.416 --> 00:22:44.626 A:middle
in 2017 as a tool to help you do

00:22:44.626 --> 00:22:46.186 A:middle
things like process data added

00:22:46.186 --> 00:22:48.126 A:middle
by an importer, or maintain data

00:22:48.126 --> 00:22:49.866 A:middle
consistency across multiple

00:22:49.866 --> 00:22:51.376 A:middle
active coordinators that are

00:22:51.376 --> 00:22:52.346 A:middle
using the same store.

00:22:53.796 --> 00:22:55.126 A:middle
New this year, we've recruited

00:22:55.126 --> 00:22:56.956 A:middle
fetch requests to make it easier

00:22:56.956 --> 00:22:58.156 A:middle
to look up only the history

00:22:58.156 --> 00:22:58.936 A:middle
you're interested in.

00:23:00.836 --> 00:23:01.616 A:middle
Maybe you want to look up the

00:23:01.616 --> 00:23:04.076 A:middle
changes made by an extension, or

00:23:04.076 --> 00:23:06.176 A:middle
only changes that affect posts,

00:23:06.416 --> 00:23:08.236 A:middle
or only history within a certain

00:23:08.236 --> 00:23:09.106 A:middle
range of time.

00:23:09.386 --> 00:23:10.706 A:middle
I think what is the power of the

00:23:10.706 --> 00:23:12.096 A:middle
fetch request applied to your

00:23:12.096 --> 00:23:12.976 A:middle
PersistentHistory.

00:23:15.496 --> 00:23:16.036 A:middle
Now and

00:23:16.036 --> 00:23:17.626 A:middle
NSPersistentHistoryTransaction

00:23:17.626 --> 00:23:19.366 A:middle
and NSPersistentHistoryChange

00:23:19.676 --> 00:23:21.006 A:middle
are not modeled types, but

00:23:21.006 --> 00:23:22.286 A:middle
they've both sprouted some new

00:23:22.286 --> 00:23:24.336 A:middle
cross-methods to make them work

00:23:24.336 --> 00:23:25.786 A:middle
with fetch requests.

00:23:25.916 --> 00:23:27.416 A:middle
If you squint, the new methods

00:23:27.416 --> 00:23:28.316 A:middle
look similar to what you would

00:23:28.316 --> 00:23:30.056 A:middle
find generated by Xcode for your

00:23:30.056 --> 00:23:30.966 A:middle
managed object subclass types.

00:23:33.266 --> 00:23:34.256 A:middle
They include accessories for an

00:23:34.256 --> 00:23:35.756 A:middle
entity description corresponding

00:23:35.756 --> 00:23:37.926 A:middle
to the type, as well as a method

00:23:37.926 --> 00:23:38.936 A:middle
that produces a new

00:23:39.046 --> 00:23:40.296 A:middle
preconfigured fetch requests

00:23:40.296 --> 00:23:41.886 A:middle
that will return instances of

00:23:41.916 --> 00:23:42.856 A:middle
the type, either

00:23:43.046 --> 00:23:44.726 A:middle
NSPersistentHistoryTransaction

00:23:44.726 --> 00:23:46.606 A:middle
or NSPersistentHistoryChange

00:23:46.936 --> 00:23:47.666 A:middle
when executed.

00:23:49.046 --> 00:23:50.126 A:middle
You configure the fetch request

00:23:50.126 --> 00:23:51.256 A:middle
to the predicate, just like your

00:23:51.256 --> 00:23:52.646 A:middle
fetching managed objects.

00:23:52.646 --> 00:23:53.906 A:middle
But instead of executing the

00:23:53.906 --> 00:23:55.486 A:middle
fetch requests directly against

00:23:55.516 --> 00:23:57.516 A:middle
the context, the fetch request

00:23:57.516 --> 00:23:58.716 A:middle
gets used as part of a

00:23:58.716 --> 00:24:00.826 A:middle
PersistentHistoryRequest.

00:23:58.716 --> 00:24:00.826 A:middle
PersistentHistoryRequest.

00:24:02.566 --> 00:24:03.396 A:middle
There's a new convenience

00:24:03.396 --> 00:24:04.316 A:middle
initializer on

00:24:04.316 --> 00:24:05.416 A:middle
NSPersistentHistory

00:24:05.416 --> 00:24:07.296 A:middle
ChangeRequest for creating a new

00:24:07.296 --> 00:24:08.836 A:middle
instance with a fetch request,

00:24:08.836 --> 00:24:10.406 A:middle
as well as immutable property

00:24:10.406 --> 00:24:11.516 A:middle
you can use for post-talk

00:24:11.616 --> 00:24:12.396 A:middle
configuration.

00:24:14.196 --> 00:24:15.666 A:middle
Harnessing fetch requests for

00:24:15.666 --> 00:24:17.356 A:middle
PersistentHistory provides a lot

00:24:17.356 --> 00:24:18.366 A:middle
of granularity to our

00:24:18.366 --> 00:24:18.986 A:middle
application.

00:24:19.156 --> 00:24:20.346 A:middle
But there's still the question

00:24:20.346 --> 00:24:21.706 A:middle
of how do we know when history

00:24:21.706 --> 00:24:21.976 A:middle
gets made?

00:24:24.056 --> 00:24:25.636 A:middle
There are a lot of ways we could

00:24:25.636 --> 00:24:26.726 A:middle
do this, but they all have

00:24:26.726 --> 00:24:27.656 A:middle
drawbacks.

00:24:28.246 --> 00:24:29.626 A:middle
We could pull the store for

00:24:29.626 --> 00:24:30.886 A:middle
changes every so often.

00:24:30.946 --> 00:24:32.506 A:middle
But it's hard to tune that kind

00:24:32.506 --> 00:24:33.436 A:middle
of solution for the right

00:24:33.436 --> 00:24:35.626 A:middle
compromise between wasted effort

00:24:36.056 --> 00:24:37.526 A:middle
and delays before changes are

00:24:37.526 --> 00:24:38.226 A:middle
noticed.

00:24:38.556 --> 00:24:40.936 A:middle
File System monitoring systems

00:24:40.936 --> 00:24:42.566 A:middle
like Dispatch Sources, or

00:24:42.566 --> 00:24:44.676 A:middle
FSEvents, are useful, but they

00:24:44.676 --> 00:24:46.356 A:middle
only work with file back stores,

00:24:46.736 --> 00:24:48.066 A:middle
they're not trivial to adopt.

00:24:48.066 --> 00:24:49.096 A:middle
And it's likely that you'll get

00:24:49.096 --> 00:24:50.386 A:middle
a lot of notifications that

00:24:50.386 --> 00:24:51.626 A:middle
don't actually correspond to

00:24:51.626 --> 00:24:52.786 A:middle
changes being committed to the

00:24:52.786 --> 00:24:53.246 A:middle
store.

00:24:53.246 --> 00:24:54.556 A:middle
So there's still a lot of wasted

00:24:54.556 --> 00:24:54.976 A:middle
effort there.

00:24:57.046 --> 00:24:58.396 A:middle
While useful as Band-Aids, these

00:24:58.396 --> 00:24:59.516 A:middle
approaches are all imperfect

00:24:59.516 --> 00:25:00.846 A:middle
solutions to the problem of

00:24:59.516 --> 00:25:00.846 A:middle
solutions to the problem of

00:25:00.846 --> 00:25:02.556 A:middle
knowing when other coordinators

00:25:02.556 --> 00:25:02.976 A:middle
change the store.

00:25:05.586 --> 00:25:06.856 A:middle
This year, we're introducing a

00:25:06.856 --> 00:25:07.996 A:middle
new kind of notification.

00:25:08.616 --> 00:25:09.426 A:middle
You can think of it as a

00:25:09.426 --> 00:25:10.486 A:middle
cross-coordinator save

00:25:10.486 --> 00:25:12.546 A:middle
notification, but the events are

00:25:12.546 --> 00:25:13.666 A:middle
delivered asynchronously.

00:25:13.666 --> 00:25:14.776 A:middle
So the really like

00:25:14.876 --> 00:25:16.466 A:middle
cross-coordinator change

00:25:16.466 --> 00:25:18.196 A:middle
notifications, we call them

00:25:18.196 --> 00:25:18.976 A:middle
remote change notifications.

00:25:22.266 --> 00:25:23.326 A:middle
To turn on remote change

00:25:23.326 --> 00:25:24.886 A:middle
notifications, there's a new

00:25:24.886 --> 00:25:26.546 A:middle
PersistentStore option called

00:25:26.886 --> 00:25:27.986 A:middle
NSPersistentStore

00:25:27.986 --> 00:25:29.276 A:middle
RemoteChangeNotification

00:25:29.276 --> 00:25:30.256 A:middle
PostOptionKey.

00:25:31.746 --> 00:25:33.046 A:middle
[Chuckles] Set it in your store

00:25:33.046 --> 00:25:34.316 A:middle
description before loading the

00:25:34.316 --> 00:25:35.366 A:middle
PersistentStore into the

00:25:35.366 --> 00:25:36.896 A:middle
coordinator, and the coordinator

00:25:36.896 --> 00:25:38.656 A:middle
will listen for remote changes

00:25:38.656 --> 00:25:39.216 A:middle
to the store.

00:25:40.346 --> 00:25:41.416 A:middle
This option also tells the

00:25:41.416 --> 00:25:43.256 A:middle
coordinator that it should send

00:25:43.256 --> 00:25:44.646 A:middle
remote change notifications

00:25:44.646 --> 00:25:47.296 A:middle
whenever it makes any changes.

00:25:47.296 --> 00:25:48.556 A:middle
So if you want change

00:25:48.556 --> 00:25:50.446 A:middle
notifications, you want to use

00:25:50.646 --> 00:25:52.446 A:middle
NSPersistentStore RemoteChange

00:25:52.446 --> 00:25:55.046 A:middle
NotificationPostOptionKey on all

00:25:55.046 --> 00:25:57.026 A:middle
of your coordinators, not just

00:25:57.026 --> 00:25:58.256 A:middle
the ones that want to consume

00:25:58.256 --> 00:25:58.886 A:middle
changes.

00:25:59.526 --> 00:26:00.926 A:middle
You also probably want to be

00:25:59.526 --> 00:26:00.926 A:middle
You also probably want to be

00:26:00.926 --> 00:26:02.376 A:middle
turning on PersistentHistory,

00:26:02.376 --> 00:26:03.886 A:middle
because sure.

00:26:03.886 --> 00:26:05.276 A:middle
Remote change notifications can

00:26:05.276 --> 00:26:06.586 A:middle
tell you which store changed

00:26:06.586 --> 00:26:08.436 A:middle
with the NSPersistentStore URL

00:26:08.436 --> 00:26:10.036 A:middle
key in the notification's user

00:26:10.036 --> 00:26:11.016 A:middle
info dictionary.

00:26:11.156 --> 00:26:11.776 A:middle
But if you have

00:26:11.776 --> 00:26:12.966 A:middle
PersistentHistory enabled, it

00:26:12.966 --> 00:26:14.176 A:middle
also includes the new history

00:26:14.176 --> 00:26:15.126 A:middle
token created by that

00:26:15.126 --> 00:26:15.756 A:middle
transaction.

00:26:16.666 --> 00:26:17.956 A:middle
This is especially useful when

00:26:17.956 --> 00:26:18.816 A:middle
combined with the new

00:26:18.816 --> 00:26:20.246 A:middle
PersistentHistory fetching

00:26:20.376 --> 00:26:21.216 A:middle
features that we were just

00:26:21.216 --> 00:26:22.436 A:middle
talking about a second ago.

00:26:23.796 --> 00:26:24.826 A:middle
Because remote change

00:26:24.826 --> 00:26:26.896 A:middle
notifications work kind of like

00:26:26.896 --> 00:26:28.976 A:middle
push notifications, sometimes

00:26:29.596 --> 00:26:30.616 A:middle
changes make it collapse

00:26:30.616 --> 00:26:32.146 A:middle
together if there are many at

00:26:32.146 --> 00:26:32.616 A:middle
once.

00:26:32.616 --> 00:26:33.616 A:middle
And only the last would get

00:26:33.616 --> 00:26:34.026 A:middle
delivered.

00:26:34.786 --> 00:26:36.796 A:middle
If we free launch our app, how

00:26:36.796 --> 00:26:37.536 A:middle
do we know what the current

00:26:37.576 --> 00:26:38.926 A:middle
PersistentHistory token is?

00:26:39.426 --> 00:26:40.546 A:middle
Well, we can get it with a new

00:26:40.546 --> 00:26:41.656 A:middle
method on the persistent store

00:26:41.656 --> 00:26:44.366 A:middle
coordinator for -- called

00:26:44.666 --> 00:26:46.106 A:middle
CurrentPersistent HistoryToken.

00:26:46.496 --> 00:26:47.926 A:middle
All of these new pieces together

00:26:47.926 --> 00:26:49.316 A:middle
can be used to solve puzzles

00:26:49.926 --> 00:26:51.096 A:middle
that weren't possible before.

00:26:51.776 --> 00:26:53.506 A:middle
Not only can we keep up a state

00:26:53.616 --> 00:26:55.246 A:middle
in a timely manner, but

00:26:55.246 --> 00:26:56.496 A:middle
PersistentHistory can also be

00:26:56.496 --> 00:26:58.096 A:middle
pared down to only the changes

00:26:58.096 --> 00:26:59.086 A:middle
that affect our work.

00:26:59.436 --> 00:27:01.946 A:middle
Now I think the best way to show

00:26:59.436 --> 00:27:01.946 A:middle
Now I think the best way to show

00:27:01.946 --> 00:27:03.606 A:middle
that to you is with another

00:27:03.606 --> 00:27:03.956 A:middle
demo.

00:27:04.946 --> 00:27:05.686 A:middle
So let's see what that looks

00:27:05.686 --> 00:27:05.976 A:middle
like in our app.

00:27:09.396 --> 00:27:10.976 A:middle
So here, we have a controller

00:27:11.476 --> 00:27:12.576 A:middle
that has the responsibility of

00:27:12.576 --> 00:27:13.626 A:middle
keeping the view context

00:27:13.626 --> 00:27:14.596 A:middle
up-to-date whenever a

00:27:14.596 --> 00:27:15.696 A:middle
coordinator changes.

00:27:16.216 --> 00:27:17.616 A:middle
So we've already registered this

00:27:17.616 --> 00:27:20.326 A:middle
method, storeRemoteChange, to be

00:27:20.326 --> 00:27:21.606 A:middle
called whenever we get a remote

00:27:21.606 --> 00:27:22.626 A:middle
change notification.

00:27:25.036 --> 00:27:26.256 A:middle
Once we're in it, we can pull

00:27:26.256 --> 00:27:28.116 A:middle
out the new PersistentHistory

00:27:28.116 --> 00:27:29.626 A:middle
token that was saved out of the

00:27:29.626 --> 00:27:30.676 A:middle
user info dictionary.

00:27:31.576 --> 00:27:32.746 A:middle
And we'll grab the context that

00:27:32.746 --> 00:27:34.456 A:middle
we want to update and hop into

00:27:34.456 --> 00:27:34.976 A:middle
perform block.

00:27:38.296 --> 00:27:39.486 A:middle
The first thing we want to do to

00:27:39.486 --> 00:27:40.956 A:middle
reduce the PersistentHistory to

00:27:40.956 --> 00:27:42.416 A:middle
only what we're interested in,

00:27:43.286 --> 00:27:45.876 A:middle
is to build predicates based on

00:27:45.876 --> 00:27:47.556 A:middle
the last history token we saw,

00:27:47.556 --> 00:27:48.786 A:middle
which in the case of what our

00:27:48.786 --> 00:27:49.776 A:middle
app just launched, was the

00:27:49.776 --> 00:27:51.376 A:middle
current PersistentHistory token.

00:27:52.456 --> 00:27:55.486 A:middle
And get all transactions before

00:27:55.486 --> 00:27:57.266 A:middle
or equal to the new history

00:27:57.266 --> 00:27:58.396 A:middle
token that we just got in the

00:27:58.396 --> 00:27:58.976 A:middle
notification.

00:28:02.356 --> 00:28:03.706 A:middle
If we're using transaction

00:28:03.706 --> 00:28:05.606 A:middle
authors, and we should, then we

00:28:05.606 --> 00:28:07.206 A:middle
can also create a predicate that

00:28:07.206 --> 00:28:08.406 A:middle
allows us to look at only

00:28:08.406 --> 00:28:09.656 A:middle
transactions that were created

00:28:09.656 --> 00:28:10.846 A:middle
by other coordinators other than

00:28:10.846 --> 00:28:10.976 A:middle
our own.

00:28:13.376 --> 00:28:14.796 A:middle
So then, we can build the

00:28:14.956 --> 00:28:17.086 A:middle
history fetched requests to get

00:28:17.086 --> 00:28:19.636 A:middle
transactions, and configure it

00:28:19.636 --> 00:28:20.626 A:middle
with a predicate that's a

00:28:20.626 --> 00:28:22.356 A:middle
compound and predicate of other

00:28:22.356 --> 00:28:23.396 A:middle
predicates we just built.

00:28:23.986 --> 00:28:25.436 A:middle
So now we're only going to get

00:28:25.436 --> 00:28:27.496 A:middle
transactions authored by other

00:28:27.496 --> 00:28:29.266 A:middle
coordinators between the last

00:28:29.266 --> 00:28:31.376 A:middle
one we saw, and this new one

00:28:31.376 --> 00:28:32.846 A:middle
that just got posted inclusive.

00:28:35.286 --> 00:28:36.886 A:middle
We create an NSPersistentHistory

00:28:36.886 --> 00:28:38.376 A:middle
ChangeRequest, and you configure

00:28:38.376 --> 00:28:39.586 A:middle
it with this fetched requests

00:28:39.586 --> 00:28:41.266 A:middle
you've just built, and then

00:28:41.266 --> 00:28:43.606 A:middle
execute it against the context.

00:28:44.156 --> 00:28:46.596 A:middle
The result is a list of

00:28:46.596 --> 00:28:48.086 A:middle
transactions that we're not

00:28:48.086 --> 00:28:48.746 A:middle
up-to-date on.

00:28:49.136 --> 00:28:51.006 A:middle
So for each of them, we can pull

00:28:51.006 --> 00:28:53.456 A:middle
out the objectIDNotification

00:28:53.456 --> 00:28:55.626 A:middle
userInfo dictionary, and then

00:28:55.626 --> 00:28:57.226 A:middle
pass that into the

00:28:57.226 --> 00:28:58.956 A:middle
ManagedObjectContextMethod

00:28:59.066 --> 00:28:59.846 A:middle
mergeChanges

00:28:59.846 --> 00:29:02.646 A:middle
fromRemoteContextSave, that we

00:28:59.846 --> 00:29:02.646 A:middle
fromRemoteContextSave, that we

00:29:02.646 --> 00:29:03.886 A:middle
announced in 2017.

00:29:05.556 --> 00:29:06.576 A:middle
Once all the transactions have

00:29:06.576 --> 00:29:08.006 A:middle
been processed, our view is now

00:29:08.006 --> 00:29:09.106 A:middle
up-to-date with the latest

00:29:09.106 --> 00:29:11.016 A:middle
on-disk data in the store.

00:29:12.196 --> 00:29:14.316 A:middle
And it's done in pretty close to

00:29:14.316 --> 00:29:15.386 A:middle
real time since the push

00:29:15.386 --> 00:29:16.766 A:middle
notifications locally are very

00:29:16.766 --> 00:29:17.256 A:middle
fast.

00:29:18.746 --> 00:29:20.266 A:middle
Finally, just to make sure we

00:29:20.266 --> 00:29:21.656 A:middle
don't do any unnecessary work

00:29:21.656 --> 00:29:23.526 A:middle
next time, we remember the last

00:29:23.526 --> 00:29:24.936 A:middle
PersistentHistory token that we

00:29:24.936 --> 00:29:25.636 A:middle
processed.

00:29:26.676 --> 00:29:27.986 A:middle
And now, we're ready for another

00:29:27.986 --> 00:29:28.946 A:middle
remote change notification.

00:29:31.426 --> 00:29:32.286 A:middle
Alright, and that is

00:29:33.346 --> 00:29:34.686 A:middle
PersistentHistory fetching and

00:29:34.686 --> 00:29:35.926 A:middle
remote change notifications.

00:29:36.516 --> 00:29:39.606 A:middle
[ Applause ]

00:29:40.106 --> 00:29:42.286 A:middle
Ah, finally, I wanted to spend a

00:29:42.286 --> 00:29:43.346 A:middle
bit of time talking about

00:29:43.346 --> 00:29:43.796 A:middle
testing.

00:29:45.496 --> 00:29:46.696 A:middle
While hopefully everyone here is

00:29:46.696 --> 00:29:47.986 A:middle
running their tests in multiple

00:29:47.986 --> 00:29:49.936 A:middle
configurations with desanitizers

00:29:49.936 --> 00:29:51.536 A:middle
as well as in release, I wanted

00:29:51.536 --> 00:29:52.586 A:middle
to start some advice that

00:29:52.586 --> 00:29:53.936 A:middle
focuses a bit more on Core Data.

00:29:56.226 --> 00:29:57.236 A:middle
Number one is to know what your

00:29:57.236 --> 00:29:58.166 A:middle
performance goals are.

00:29:58.726 --> 00:30:00.306 A:middle
A Contacts app should be testing

00:29:58.726 --> 00:30:00.306 A:middle
A Contacts app should be testing

00:30:00.306 --> 00:30:01.896 A:middle
with at least tens of thousands

00:30:01.896 --> 00:30:02.626 A:middle
of objects.

00:30:03.046 --> 00:30:03.976 A:middle
But with that kind of

00:30:03.976 --> 00:30:05.136 A:middle
performance goal, a linear

00:30:05.136 --> 00:30:06.276 A:middle
algorithm might actually be

00:30:06.276 --> 00:30:07.776 A:middle
acceptable on desktop hardware

00:30:07.776 --> 00:30:08.676 A:middle
some of the time.

00:30:09.126 --> 00:30:10.826 A:middle
The Photos app, on the other

00:30:10.826 --> 00:30:11.826 A:middle
hand, should have tested to

00:30:11.826 --> 00:30:12.856 A:middle
validate everything works

00:30:12.856 --> 00:30:13.496 A:middle
correctly when there are

00:30:13.496 --> 00:30:14.966 A:middle
millions of objects.

00:30:15.256 --> 00:30:16.806 A:middle
At that scale, anything slower

00:30:16.806 --> 00:30:18.026 A:middle
than logarithmic time is enough

00:30:18.026 --> 00:30:18.836 A:middle
to hang the app.

00:30:19.456 --> 00:30:21.326 A:middle
And so it's really important to

00:30:21.326 --> 00:30:23.236 A:middle
test like you fly by running all

00:30:23.236 --> 00:30:24.136 A:middle
of your integration tests with

00:30:24.136 --> 00:30:24.976 A:middle
the performance data set.

00:30:28.056 --> 00:30:29.846 A:middle
But the integration tests should

00:30:29.846 --> 00:30:31.266 A:middle
also get running configurations

00:30:31.266 --> 00:30:32.576 A:middle
optimized for detecting and

00:30:32.576 --> 00:30:34.096 A:middle
surfacing other kinds of issues

00:30:34.096 --> 00:30:34.606 A:middle
as well.

00:30:34.606 --> 00:30:36.406 A:middle
For applications using Core

00:30:36.406 --> 00:30:37.676 A:middle
Data, that should include taking

00:30:37.676 --> 00:30:38.596 A:middle
advantage of the Framework's

00:30:38.596 --> 00:30:40.006 A:middle
built-in concurrency debugging.

00:30:41.286 --> 00:30:43.206 A:middle
You can enable it by going into

00:30:43.206 --> 00:30:44.546 A:middle
the Scheme Editor and setting

00:30:44.546 --> 00:30:46.296 A:middle
com.apple.CoreData

00:30:46.296 --> 00:30:48.316 A:middle
ConcurrencyDebugged1 in the

00:30:48.316 --> 00:30:49.386 A:middle
process arguments list.

00:30:52.076 --> 00:30:53.336 A:middle
Running integration tests in

00:30:53.336 --> 00:30:54.856 A:middle
multiple configurations can take

00:30:54.856 --> 00:30:55.776 A:middle
a lot of time.

00:30:55.776 --> 00:30:57.426 A:middle
And likewise, unit tests need to

00:30:57.426 --> 00:30:58.576 A:middle
be as fast as possible.

00:30:58.996 --> 00:31:01.096 A:middle
So it's good idea to use

00:30:58.996 --> 00:31:01.096 A:middle
So it's good idea to use

00:31:01.096 --> 00:31:02.856 A:middle
in-memory stores when test

00:31:02.856 --> 00:31:04.136 A:middle
runtime is important.

00:31:05.136 --> 00:31:06.426 A:middle
In this case, I specifically

00:31:06.426 --> 00:31:08.436 A:middle
mean the SqLightStores in-memory

00:31:08.436 --> 00:31:08.786 A:middle
mode.

00:31:10.436 --> 00:31:12.136 A:middle
SqLightStore has long supported

00:31:12.136 --> 00:31:12.916 A:middle
in-memory mode.

00:31:13.666 --> 00:31:14.866 A:middle
To take advantage of it, in

00:31:14.866 --> 00:31:16.026 A:middle
between creating a persistent

00:31:16.026 --> 00:31:16.976 A:middle
container and loading its

00:31:16.976 --> 00:31:18.136 A:middle
stores, we can pull out the

00:31:18.136 --> 00:31:19.516 A:middle
store description and set its

00:31:19.516 --> 00:31:20.756 A:middle
URL property to point to

00:31:20.756 --> 00:31:20.976 A:middle
dev/null.

00:31:23.206 --> 00:31:24.356 A:middle
This creates an extremely

00:31:24.356 --> 00:31:25.436 A:middle
performance stack.

00:31:25.766 --> 00:31:27.186 A:middle
But this in-memory store can't

00:31:27.186 --> 00:31:28.956 A:middle
be shared between coordinators.

00:31:28.956 --> 00:31:31.066 A:middle
So to validate all that remote

00:31:31.066 --> 00:31:32.506 A:middle
change notification work we just

00:31:32.506 --> 00:31:34.296 A:middle
did, we want to take advantage

00:31:34.296 --> 00:31:35.706 A:middle
of named in-memory stores

00:31:35.706 --> 00:31:36.206 A:middle
instead.

00:31:37.326 --> 00:31:38.676 A:middle
A named in-memory store is

00:31:38.676 --> 00:31:39.836 A:middle
defined by adding a path

00:31:39.836 --> 00:31:41.396 A:middle
component after dev/null.

00:31:41.846 --> 00:31:43.826 A:middle
And any other SqLightStore with

00:31:43.896 --> 00:31:45.906 A:middle
that URL in the same process

00:31:45.906 --> 00:31:46.556 A:middle
will connect to the shared

00:31:46.556 --> 00:31:46.976 A:middle
in-memory database.

00:31:49.256 --> 00:31:51.106 A:middle
Different coordinators sharing

00:31:51.106 --> 00:31:52.456 A:middle
the same in-memory store will

00:31:52.586 --> 00:31:53.926 A:middle
also dispatch remote change

00:31:53.926 --> 00:31:54.986 A:middle
notifications to each other,

00:31:54.986 --> 00:31:55.686 A:middle
which allows us to test all of

00:31:55.686 --> 00:31:55.976 A:middle
our logic.

00:31:59.046 --> 00:32:01.066 A:middle
Finally, use the sanitizers.

00:31:59.046 --> 00:32:01.066 A:middle
Finally, use the sanitizers.

00:32:01.906 --> 00:32:02.866 A:middle
Each of these has saved me at

00:32:02.866 --> 00:32:04.056 A:middle
least once.

00:32:04.376 --> 00:32:05.786 A:middle
I've seen the trust sanitizer

00:32:05.786 --> 00:32:07.256 A:middle
instantly identify a one byte

00:32:07.476 --> 00:32:08.986 A:middle
buffer overflow that would have

00:32:08.986 --> 00:32:10.206 A:middle
taken months to isolate.

00:32:11.026 --> 00:32:12.696 A:middle
Similarly, thread sanitizer

00:32:12.696 --> 00:32:14.296 A:middle
understands critical sections

00:32:14.296 --> 00:32:15.726 A:middle
and can tell you about threading

00:32:15.726 --> 00:32:17.056 A:middle
races that are impossible to

00:32:17.056 --> 00:32:18.126 A:middle
reproduce in-house.

00:32:18.666 --> 00:32:21.106 A:middle
And finally, UBSan lets you fix

00:32:21.156 --> 00:32:22.326 A:middle
bugs before they happen by

00:32:22.326 --> 00:32:24.276 A:middle
identifying undefined behavior

00:32:24.276 --> 00:32:25.456 A:middle
that may change in the future.

00:32:25.876 --> 00:32:27.656 A:middle
So today we've seen how to get

00:32:27.656 --> 00:32:29.576 A:middle
set up with Core Data, about how

00:32:29.576 --> 00:32:30.986 A:middle
to take advantage of new and

00:32:30.986 --> 00:32:32.976 A:middle
existing APIs to write compact,

00:32:33.116 --> 00:32:35.046 A:middle
seamless, and robust integration

00:32:35.046 --> 00:32:36.236 A:middle
between the model and controller

00:32:36.236 --> 00:32:36.736 A:middle
layers.

00:32:37.376 --> 00:32:38.666 A:middle
We've explored keeping things in

00:32:38.666 --> 00:32:39.666 A:middle
sync between multiple

00:32:39.666 --> 00:32:41.186 A:middle
coordinators, and we've

00:32:41.186 --> 00:32:42.336 A:middle
characterized our needs and

00:32:42.336 --> 00:32:43.306 A:middle
written tests around them, so we

00:32:43.306 --> 00:32:43.976 A:middle
can ship with more confidence.

00:32:46.826 --> 00:32:47.946 A:middle
As always, we'd love to hear

00:32:47.946 --> 00:32:49.266 A:middle
what you think, so please let us

00:32:49.266 --> 00:32:50.496 A:middle
know using Feedback Assistant.

00:32:51.576 --> 00:32:53.296 A:middle
For more information, please

00:32:53.296 --> 00:32:54.546 A:middle
check out the developer website.

00:32:55.376 --> 00:32:56.666 A:middle
This session's page will include

00:32:56.666 --> 00:32:57.856 A:middle
links to the other sessions

00:32:57.856 --> 00:32:58.746 A:middle
mentioned here today.

00:32:59.826 --> 00:33:00.456 A:middle
We'll see you in the labs

00:32:59.826 --> 00:33:00.456 A:middle
We'll see you in the labs

00:33:00.456 --> 00:33:01.116 A:middle
tomorrow.

00:33:01.376 --> 00:33:01.926 A:middle
Thanks for coming.

00:33:02.516 --> 00:33:05.500 A:middle
[ Applause ]
