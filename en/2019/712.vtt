WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:16.556 A:middle
[ Applause ]

00:00:17.056 --> 00:00:18.106 A:middle
&gt;&gt; Welcome to Advances in

00:00:18.106 --> 00:00:18.706 A:middle
Networking.

00:00:18.756 --> 00:00:19.976 A:middle
My name is Joshua Graessley.

00:00:20.126 --> 00:00:21.416 A:middle
My coworkers and I from Internet

00:00:21.416 --> 00:00:22.896 A:middle
Technologies are excited to talk

00:00:22.896 --> 00:00:23.706 A:middle
to you about a number of

00:00:23.706 --> 00:00:24.946 A:middle
improvements we've made in the

00:00:24.946 --> 00:00:26.196 A:middle
area of networking on our

00:00:26.276 --> 00:00:28.076 A:middle
platforms this last year.

00:00:29.206 --> 00:00:31.666 A:middle
In part one, we're going to talk

00:00:31.666 --> 00:00:32.636 A:middle
about Low Data Mode.

00:00:32.706 --> 00:00:34.156 A:middle
This is an exciting new feature

00:00:34.156 --> 00:00:35.286 A:middle
where we can work together to

00:00:35.286 --> 00:00:36.766 A:middle
help save our user's network

00:00:36.766 --> 00:00:38.116 A:middle
data when it really matters.

00:00:38.406 --> 00:00:39.896 A:middle
We'll talk about how you can

00:00:39.896 --> 00:00:41.466 A:middle
write asynchronous-- very

00:00:41.466 --> 00:00:42.926 A:middle
elegant asynchronous networking

00:00:42.926 --> 00:00:44.696 A:middle
code using Combine in

00:00:44.696 --> 00:00:45.486 A:middle
URLSession.

00:00:46.396 --> 00:00:48.816 A:middle
We'll also cover WebSocket APIs.

00:00:49.096 --> 00:00:50.056 A:middle
Last year, this was one of the

00:00:50.056 --> 00:00:51.326 A:middle
number one things you requested

00:00:51.326 --> 00:00:52.896 A:middle
in the labs and we're excited

00:00:52.896 --> 00:00:53.846 A:middle
this year to be providing a

00:00:53.846 --> 00:00:54.426 A:middle
solution.

00:00:55.506 --> 00:00:56.866 A:middle
Finally, we'll talk about a

00:00:56.866 --> 00:00:58.446 A:middle
number of mobility improvements

00:00:58.526 --> 00:00:59.976 A:middle
and we'll talk about how we can

00:00:59.976 --> 00:01:01.346 A:middle
work together to provide our

00:00:59.976 --> 00:01:01.346 A:middle
work together to provide our

00:01:01.346 --> 00:01:03.156 A:middle
users a more seamless experience

00:01:03.156 --> 00:01:04.715 A:middle
as devices move from one network

00:01:04.936 --> 00:01:05.396 A:middle
to another.

00:01:07.036 --> 00:01:10.606 A:middle
In part two, we'll cover a bunch

00:01:10.606 --> 00:01:11.476 A:middle
of additional topics.

00:01:11.526 --> 00:01:12.596 A:middle
That's at 5:00 today.

00:01:12.696 --> 00:01:13.736 A:middle
I encourage you to come back and

00:01:13.736 --> 00:01:15.246 A:middle
check that out.

00:01:15.936 --> 00:01:17.866 A:middle
Now, before we dive into Low

00:01:17.866 --> 00:01:19.016 A:middle
Data Mode, I want to take a

00:01:19.016 --> 00:01:20.546 A:middle
minute to talk about networking

00:01:20.546 --> 00:01:22.036 A:middle
APIs on our platform.

00:01:23.046 --> 00:01:25.376 A:middle
The best networking APIs to use

00:01:25.376 --> 00:01:27.226 A:middle
on our platform are URLSession

00:01:27.366 --> 00:01:28.226 A:middle
and Network.framework.

00:01:28.696 --> 00:01:29.676 A:middle
As you'll hear about in this

00:01:29.676 --> 00:01:31.526 A:middle
session and in part two, there

00:01:31.526 --> 00:01:32.226 A:middle
are a number of great

00:01:32.226 --> 00:01:33.936 A:middle
improvements we've made and all

00:01:33.936 --> 00:01:34.736 A:middle
of those improvements are

00:01:34.736 --> 00:01:35.966 A:middle
available to your applications

00:01:36.166 --> 00:01:37.016 A:middle
if you're using these

00:01:37.046 --> 00:01:37.516 A:middle
frameworks.

00:01:38.936 --> 00:01:40.636 A:middle
If you're using sockets, you're

00:01:40.636 --> 00:01:41.456 A:middle
not going to be able to take

00:01:41.456 --> 00:01:42.146 A:middle
advantage of this.

00:01:42.686 --> 00:01:44.106 A:middle
Unfortunately, sockets just

00:01:44.106 --> 00:01:45.266 A:middle
doesn't have the richness that

00:01:45.266 --> 00:01:46.706 A:middle
we require in order to provide

00:01:46.706 --> 00:01:47.786 A:middle
this functionality at that

00:01:47.786 --> 00:01:48.076 A:middle
layer.

00:01:48.076 --> 00:01:49.876 A:middle
Now, if you're doing something

00:01:49.876 --> 00:01:52.056 A:middle
like a VPN or a content filter,

00:01:52.386 --> 00:01:53.686 A:middle
NetworkExtension framework is a

00:01:53.686 --> 00:01:54.916 A:middle
great solution and we've made a

00:01:54.916 --> 00:01:56.146 A:middle
number of improvements there as

00:01:56.146 --> 00:01:57.386 A:middle
well that we'll be talking about

00:01:57.386 --> 00:02:01.226 A:middle
tomorrow at 9:00 a.m. Now with

00:01:57.386 --> 00:02:01.226 A:middle
tomorrow at 9:00 a.m. Now with

00:02:01.386 --> 00:02:02.886 A:middle
that, I'd like to talk about Low

00:02:02.886 --> 00:02:03.326 A:middle
Data Mode.

00:02:03.946 --> 00:02:05.486 A:middle
Low Data Mode is a really

00:02:05.486 --> 00:02:07.516 A:middle
exciting new feature in iOS 13.

00:02:08.876 --> 00:02:10.166 A:middle
I think the best way to

00:02:10.166 --> 00:02:11.526 A:middle
introduce Low Data Mode is to

00:02:11.526 --> 00:02:12.736 A:middle
have you think back to how you

00:02:12.736 --> 00:02:14.086 A:middle
got here to WWDC.

00:02:14.086 --> 00:02:17.326 A:middle
You probably got on an airplane

00:02:17.386 --> 00:02:20.006 A:middle
to fly out to sunny San Jose.

00:02:21.046 --> 00:02:22.646 A:middle
And on that airplane, there was

00:02:22.736 --> 00:02:24.786 A:middle
probably a Wi-Fi network and

00:02:24.786 --> 00:02:26.686 A:middle
that Wi-Fi network was probably

00:02:26.796 --> 00:02:28.786 A:middle
kind of expensive of it may have

00:02:28.786 --> 00:02:30.656 A:middle
been very congested and you may

00:02:30.656 --> 00:02:31.706 A:middle
have been finding yourself

00:02:31.706 --> 00:02:33.646 A:middle
wishing that you had some way to

00:02:33.646 --> 00:02:35.036 A:middle
tell the applications and the

00:02:35.036 --> 00:02:37.036 A:middle
system on your device that on

00:02:37.036 --> 00:02:38.696 A:middle
this particular network it's

00:02:38.696 --> 00:02:39.946 A:middle
really important to be very

00:02:39.946 --> 00:02:41.506 A:middle
conservative in how you use

00:02:41.506 --> 00:02:42.116 A:middle
network data.

00:02:43.066 --> 00:02:44.946 A:middle
Low Data is all about solving

00:02:44.946 --> 00:02:45.776 A:middle
that problem.

00:02:47.226 --> 00:02:48.936 A:middle
Low Data gives users an

00:02:49.216 --> 00:02:51.176 A:middle
ability-- a preference to signal

00:02:51.176 --> 00:02:52.546 A:middle
to your application and to the

00:02:52.606 --> 00:02:54.436 A:middle
system that you really want to

00:02:54.666 --> 00:02:56.556 A:middle
be very careful in how you use

00:02:56.686 --> 00:02:57.826 A:middle
data on this network.

00:02:59.256 --> 00:03:01.636 A:middle
This can be set on a per Wi-Fi

00:02:59.256 --> 00:03:01.636 A:middle
This can be set on a per Wi-Fi

00:03:01.636 --> 00:03:03.856 A:middle
network based on SSID and a per

00:03:03.926 --> 00:03:05.506 A:middle
cellular network based on SIM.

00:03:06.876 --> 00:03:09.416 A:middle
When the device is on a Low Data

00:03:09.416 --> 00:03:10.696 A:middle
Mode network, this has two

00:03:10.736 --> 00:03:11.686 A:middle
primary impacts.

00:03:11.876 --> 00:03:12.986 A:middle
There's a change to the system

00:03:12.986 --> 00:03:14.816 A:middle
policy and a change to your

00:03:14.816 --> 00:03:16.296 A:middle
applications that have adopted

00:03:16.296 --> 00:03:16.976 A:middle
Low Data Mode.

00:03:17.536 --> 00:03:19.866 A:middle
For the system policy, we will

00:03:19.866 --> 00:03:21.206 A:middle
defer any background

00:03:21.206 --> 00:03:22.796 A:middle
discretionary tasks while we're

00:03:22.796 --> 00:03:24.016 A:middle
on a Low Data Mode network.

00:03:24.806 --> 00:03:26.016 A:middle
So, if you were on your airplane

00:03:26.016 --> 00:03:27.166 A:middle
and you had Low Data Mode turned

00:03:27.166 --> 00:03:28.986 A:middle
on, we would defer all of those

00:03:29.016 --> 00:03:30.336 A:middle
background discretionary tasks.

00:03:30.946 --> 00:03:31.616 A:middle
And when you get off the

00:03:31.616 --> 00:03:32.766 A:middle
airplane and check into your

00:03:32.806 --> 00:03:34.606 A:middle
hotel and you get onto the Wi-Fi

00:03:34.606 --> 00:03:35.986 A:middle
network there that's potentially

00:03:35.986 --> 00:03:37.386 A:middle
less congested or less

00:03:37.386 --> 00:03:39.316 A:middle
expensive, then we'd let all

00:03:39.316 --> 00:03:41.046 A:middle
those background tasks resume

00:03:41.046 --> 00:03:43.026 A:middle
and carry on.

00:03:43.616 --> 00:03:44.976 A:middle
Another change we make is that

00:03:45.126 --> 00:03:46.266 A:middle
Background App Refresh is

00:03:46.266 --> 00:03:46.776 A:middle
disabled.

00:03:47.166 --> 00:03:48.686 A:middle
This helps us avoid allowing

00:03:48.686 --> 00:03:49.656 A:middle
applications that are in the

00:03:49.656 --> 00:03:51.386 A:middle
background that may have nothing

00:03:51.386 --> 00:03:52.266 A:middle
to do with what the user is

00:03:52.266 --> 00:03:53.856 A:middle
actually interested in from

00:03:53.856 --> 00:03:54.856 A:middle
consuming network data.

00:03:55.676 --> 00:03:56.786 A:middle
This gets us some pretty big

00:03:56.786 --> 00:03:58.236 A:middle
wins, but we think some of the

00:03:58.236 --> 00:03:59.566 A:middle
biggest wins are going to come

00:03:59.566 --> 00:04:00.486 A:middle
from the changes that you're

00:03:59.566 --> 00:04:00.486 A:middle
from the changes that you're

00:04:00.486 --> 00:04:01.266 A:middle
going to make in your

00:04:01.266 --> 00:04:02.976 A:middle
applications to adopt Low Data

00:04:02.976 --> 00:04:03.276 A:middle
Mode.

00:04:04.166 --> 00:04:05.196 A:middle
So, I'd like to spend some time

00:04:05.196 --> 00:04:06.286 A:middle
talking about the techniques

00:04:06.346 --> 00:04:07.016 A:middle
that you can use.

00:04:07.576 --> 00:04:10.126 A:middle
It all starts with looking into

00:04:10.126 --> 00:04:11.746 A:middle
how your application is actually

00:04:11.746 --> 00:04:12.906 A:middle
using network data.

00:04:13.816 --> 00:04:15.856 A:middle
As you start to dig in, it's

00:04:15.916 --> 00:04:17.266 A:middle
really important to keep in mind

00:04:18.106 --> 00:04:20.766 A:middle
any time you can save data and

00:04:20.815 --> 00:04:22.256 A:middle
there's no impact on the user

00:04:22.256 --> 00:04:24.136 A:middle
experience, you should always do

00:04:24.136 --> 00:04:24.636 A:middle
that.

00:04:25.636 --> 00:04:26.496 A:middle
I know this seems kind of

00:04:26.496 --> 00:04:27.356 A:middle
obvious, but you might be

00:04:27.416 --> 00:04:28.406 A:middle
surprised about the ways that

00:04:28.406 --> 00:04:29.796 A:middle
you can make optimizations that

00:04:30.126 --> 00:04:31.076 A:middle
will reduce the amount of

00:04:31.076 --> 00:04:34.026 A:middle
network data that you're using.

00:04:35.366 --> 00:04:36.666 A:middle
Now, once you've gotten through

00:04:36.666 --> 00:04:38.276 A:middle
all of those low-hanging fruits

00:04:38.276 --> 00:04:39.356 A:middle
where you can just get a win

00:04:39.356 --> 00:04:40.536 A:middle
with no impact, then you're

00:04:40.656 --> 00:04:41.766 A:middle
going to have to start making

00:04:41.766 --> 00:04:43.246 A:middle
some decisions about tradeoffs.

00:04:44.506 --> 00:04:46.226 A:middle
In a lot of cases, you have the

00:04:46.226 --> 00:04:48.116 A:middle
opportunity to use some more

00:04:48.116 --> 00:04:49.396 A:middle
data and give a really great

00:04:49.396 --> 00:04:51.206 A:middle
experience or use a little bit

00:04:51.206 --> 00:04:52.906 A:middle
less data and give a still great

00:04:52.986 --> 00:04:54.206 A:middle
but maybe not quite as great

00:04:54.206 --> 00:04:54.846 A:middle
experience.

00:04:55.406 --> 00:04:57.266 A:middle
And Low Data Mode is all about a

00:04:57.266 --> 00:04:58.566 A:middle
way for the user to signal to

00:04:58.566 --> 00:05:00.386 A:middle
your application that they'd

00:04:58.566 --> 00:05:00.386 A:middle
your application that they'd

00:05:00.386 --> 00:05:01.876 A:middle
really prefer that you save that

00:05:01.876 --> 00:05:03.596 A:middle
data and go with the option that

00:05:03.596 --> 00:05:04.806 A:middle
still gives a great experience,

00:05:05.146 --> 00:05:08.076 A:middle
but maybe not quite as great.

00:05:08.356 --> 00:05:09.156 A:middle
So, let's talk about some

00:05:09.156 --> 00:05:10.116 A:middle
techniques you can use.

00:05:10.556 --> 00:05:12.536 A:middle
The first one is to reduce image

00:05:12.536 --> 00:05:12.956 A:middle
quality.

00:05:13.386 --> 00:05:15.856 A:middle
If your application isn't all

00:05:15.856 --> 00:05:17.546 A:middle
about images, by reducing image

00:05:17.546 --> 00:05:18.866 A:middle
quality, you can save a lot of

00:05:18.866 --> 00:05:20.396 A:middle
data and you can still let the

00:05:20.396 --> 00:05:21.716 A:middle
user do what they're trying to

00:05:21.716 --> 00:05:24.136 A:middle
do, but save data in the

00:05:24.136 --> 00:05:24.676 A:middle
process.

00:05:26.256 --> 00:05:28.296 A:middle
You can reduce pre-fetching.

00:05:28.526 --> 00:05:29.986 A:middle
Prefetching is a great technique

00:05:30.116 --> 00:05:31.766 A:middle
for improving performance, but

00:05:31.766 --> 00:05:33.026 A:middle
it has this downside that you

00:05:33.026 --> 00:05:34.436 A:middle
may end up fetching resources

00:05:34.436 --> 00:05:36.046 A:middle
that the user never needs.

00:05:36.236 --> 00:05:37.406 A:middle
And in the event that they're

00:05:37.406 --> 00:05:38.636 A:middle
really concerned about how much

00:05:38.636 --> 00:05:39.736 A:middle
network data they're using,

00:05:39.986 --> 00:05:41.096 A:middle
pre-fetching can actually be

00:05:41.096 --> 00:05:41.746 A:middle
counterproductive.

00:05:43.056 --> 00:05:44.656 A:middle
So, when you're in Low Data

00:05:44.656 --> 00:05:46.206 A:middle
Mode, you can use-- you can

00:05:46.206 --> 00:05:47.606 A:middle
eliminate your pre-fetching, you

00:05:47.606 --> 00:05:48.336 A:middle
can save that data.

00:05:48.336 --> 00:05:49.526 A:middle
And the user may have to wait a

00:05:49.526 --> 00:05:50.646 A:middle
little bit longer if they scroll

00:05:50.646 --> 00:05:52.196 A:middle
that content into view to wait

00:05:52.266 --> 00:05:54.126 A:middle
for it to load.

00:05:54.746 --> 00:05:56.036 A:middle
You can synchronize less often.

00:05:56.206 --> 00:05:57.266 A:middle
The data will be stale for a

00:05:57.266 --> 00:05:58.496 A:middle
little bit longer, but you'll

00:05:58.496 --> 00:05:59.206 A:middle
still have data.

00:05:59.366 --> 00:06:00.576 A:middle
The user can still accomplish

00:05:59.366 --> 00:06:00.576 A:middle
The user can still accomplish

00:06:00.576 --> 00:06:04.366 A:middle
what they've set out to do, but

00:06:04.366 --> 00:06:05.636 A:middle
over a long period of time you

00:06:05.636 --> 00:06:06.816 A:middle
can actually get some pretty big

00:06:06.876 --> 00:06:09.216 A:middle
savings through reduced rate of

00:06:09.216 --> 00:06:09.886 A:middle
synchronization.

00:06:10.536 --> 00:06:14.436 A:middle
You can mark background tasks as

00:06:14.436 --> 00:06:15.306 A:middle
discretionary.

00:06:15.896 --> 00:06:16.916 A:middle
You'd be surprised how many of

00:06:16.916 --> 00:06:18.076 A:middle
the background tasks you're

00:06:18.076 --> 00:06:19.916 A:middle
setting up don't really need to

00:06:19.916 --> 00:06:20.876 A:middle
be done immediately.

00:06:21.936 --> 00:06:23.216 A:middle
By marking a background task as

00:06:23.216 --> 00:06:25.176 A:middle
discretionary, it gives the

00:06:25.176 --> 00:06:26.756 A:middle
system a lot of flexibility in

00:06:26.756 --> 00:06:27.936 A:middle
when it actually schedules that

00:06:27.936 --> 00:06:28.586 A:middle
operation.

00:06:28.716 --> 00:06:30.696 A:middle
As I had mentioned in--

00:06:30.926 --> 00:06:32.246 A:middle
previously-- when you're on the

00:06:32.246 --> 00:06:33.886 A:middle
airplane, that gives the system

00:06:33.886 --> 00:06:35.156 A:middle
the opportunity to put off that

00:06:35.156 --> 00:06:36.566 A:middle
task until we get to a non-Low

00:06:36.566 --> 00:06:39.066 A:middle
Data Mode network.

00:06:39.536 --> 00:06:40.836 A:middle
Another great solution is to

00:06:40.836 --> 00:06:41.796 A:middle
disable auto-play.

00:06:42.686 --> 00:06:44.076 A:middle
This is really great because it

00:06:44.076 --> 00:06:45.326 A:middle
doesn't prevent the user from

00:06:45.446 --> 00:06:46.466 A:middle
playing the content that they're

00:06:46.466 --> 00:06:48.046 A:middle
interested in, but it means the

00:06:48.046 --> 00:06:49.226 A:middle
user doesn't have to pay for

00:06:49.226 --> 00:06:50.396 A:middle
content that they really don't

00:06:50.396 --> 00:06:50.836 A:middle
care about.

00:06:51.726 --> 00:06:54.356 A:middle
That brings me to another really

00:06:54.356 --> 00:06:55.836 A:middle
important point when you're

00:06:55.836 --> 00:06:56.646 A:middle
choosing how you're going to

00:06:56.646 --> 00:06:57.676 A:middle
implement Low Data Mode.

00:06:58.106 --> 00:06:59.236 A:middle
Please don't block

00:06:59.236 --> 00:07:00.286 A:middle
user-initiated work.

00:06:59.236 --> 00:07:00.286 A:middle
user-initiated work.

00:07:00.796 --> 00:07:02.346 A:middle
Low Data Mode is all about

00:07:02.986 --> 00:07:04.486 A:middle
telling the system to reduce the

00:07:04.486 --> 00:07:05.446 A:middle
amount of network data that it

00:07:05.446 --> 00:07:07.326 A:middle
uses, but to make sure that the

00:07:07.326 --> 00:07:08.886 A:middle
user can still accomplish what

00:07:08.886 --> 00:07:09.846 A:middle
they're setting out to do.

00:07:10.926 --> 00:07:11.916 A:middle
As you're going through your

00:07:11.916 --> 00:07:13.286 A:middle
application, you may realize

00:07:13.286 --> 00:07:14.316 A:middle
that some of the operations you

00:07:14.316 --> 00:07:16.206 A:middle
do do take a lot of network data

00:07:16.206 --> 00:07:17.226 A:middle
and there's nothing you can do

00:07:17.226 --> 00:07:17.906 A:middle
about that.

00:07:18.936 --> 00:07:20.646 A:middle
It's great to reduce the amount

00:07:20.646 --> 00:07:21.686 A:middle
of network data you're using for

00:07:21.686 --> 00:07:22.926 A:middle
those operations any way you

00:07:22.926 --> 00:07:25.166 A:middle
can, but we really don't want

00:07:25.166 --> 00:07:26.876 A:middle
you to pop up a dialog that says

00:07:26.926 --> 00:07:28.016 A:middle
are you sure you wanted to do

00:07:28.016 --> 00:07:28.176 A:middle
this.

00:07:28.336 --> 00:07:29.586 A:middle
I see you're in network data and

00:07:29.586 --> 00:07:30.426 A:middle
this is going to use a lot of

00:07:30.426 --> 00:07:31.106 A:middle
data.

00:07:31.256 --> 00:07:32.476 A:middle
Don't second-guess the user.

00:07:32.586 --> 00:07:33.696 A:middle
They've turned on Low Data Mode

00:07:34.666 --> 00:07:35.436 A:middle
and they've asked your

00:07:35.436 --> 00:07:36.526 A:middle
application to perform that

00:07:36.526 --> 00:07:37.226 A:middle
operation.

00:07:37.266 --> 00:07:40.236 A:middle
Go ahead and do that.

00:07:40.316 --> 00:07:41.596 A:middle
So, let's talk a little bit

00:07:41.596 --> 00:07:43.346 A:middle
about the APIs that your

00:07:43.346 --> 00:07:45.216 A:middle
application can use to implement

00:07:45.216 --> 00:07:45.766 A:middle
Low Data Mode.

00:07:47.266 --> 00:07:49.546 A:middle
We've added APIs to URLSession

00:07:49.546 --> 00:07:50.936 A:middle
and Network.framework.

00:07:51.746 --> 00:07:54.966 A:middle
The thing to keep in mind is

00:07:54.966 --> 00:07:55.896 A:middle
that when a network is in Low

00:07:55.896 --> 00:07:57.676 A:middle
Data Mode, the constrained

00:07:57.676 --> 00:07:59.046 A:middle
property is going to be set on

00:07:59.046 --> 00:07:59.756 A:middle
that network.

00:08:00.876 --> 00:08:02.596 A:middle
So, all of the APIs that we

00:08:02.596 --> 00:08:03.846 A:middle
provide are based on the

00:08:03.846 --> 00:08:04.756 A:middle
constrained property.

00:08:05.156 --> 00:08:07.016 A:middle
In URLSession, we've added a

00:08:07.016 --> 00:08:07.906 A:middle
property called

00:08:07.906 --> 00:08:09.546 A:middle
allowsConstrainedNetworkAccess.

00:08:10.326 --> 00:08:11.706 A:middle
By default, this is set to true.

00:08:12.096 --> 00:08:13.246 A:middle
Your applications are allowed to

00:08:13.246 --> 00:08:14.436 A:middle
use Low Data Mode networks by

00:08:14.436 --> 00:08:14.886 A:middle
default.

00:08:15.506 --> 00:08:17.046 A:middle
You can set this to false to opt

00:08:17.046 --> 00:08:17.236 A:middle
out.

00:08:17.236 --> 00:08:18.936 A:middle
You can set this on URLSession

00:08:18.936 --> 00:08:20.576 A:middle
requests as well as your

00:08:20.576 --> 00:08:22.026 A:middle
URLSession configuration.

00:08:23.036 --> 00:08:25.006 A:middle
With URLSession, we really

00:08:25.006 --> 00:08:26.536 A:middle
encourage you to go ahead and

00:08:26.536 --> 00:08:28.796 A:middle
try that large resource fetch or

00:08:28.796 --> 00:08:29.926 A:middle
pre-fetch and set

00:08:29.926 --> 00:08:31.376 A:middle
allowsConstrainedNetworkAccess

00:08:31.376 --> 00:08:31.816 A:middle
to false.

00:08:32.635 --> 00:08:33.936 A:middle
If you get a failure and the

00:08:33.936 --> 00:08:35.876 A:middle
error has a network unavailable

00:08:35.876 --> 00:08:37.486 A:middle
reason of constrained, that

00:08:37.486 --> 00:08:38.876 A:middle
indicates the operation failed

00:08:38.926 --> 00:08:40.076 A:middle
because you're in Low Data Mode

00:08:40.076 --> 00:08:41.756 A:middle
and the right thing to do there

00:08:41.926 --> 00:08:43.436 A:middle
is to turn around and perform

00:08:43.436 --> 00:08:44.776 A:middle
your Low Data Mode operation.

00:08:44.776 --> 00:08:46.576 A:middle
In the case of a large resource

00:08:46.696 --> 00:08:48.016 A:middle
fetch, that would be fetching a

00:08:48.016 --> 00:08:49.206 A:middle
smaller resource instead.

00:08:49.206 --> 00:08:51.026 A:middle
In the case of a pre-fetch, just

00:08:51.026 --> 00:08:52.076 A:middle
wait until the user actually

00:08:52.076 --> 00:08:52.836 A:middle
needs the content.

00:08:53.916 --> 00:08:55.936 A:middle
This has the added benefit of

00:08:55.936 --> 00:08:56.856 A:middle
letting you take advantage of

00:08:56.856 --> 00:08:57.926 A:middle
anything that may actually

00:08:57.926 --> 00:08:58.946 A:middle
already be in the cache.

00:08:59.876 --> 00:09:01.366 A:middle
Now, with Network.framework, you

00:08:59.876 --> 00:09:01.366 A:middle
Now, with Network.framework, you

00:09:01.366 --> 00:09:02.446 A:middle
have a similar property called

00:09:02.446 --> 00:09:03.646 A:middle
prohibitConstrainedPaths.

00:09:04.136 --> 00:09:05.396 A:middle
You can set this to true to

00:09:05.396 --> 00:09:06.666 A:middle
block your connections and other

00:09:06.666 --> 00:09:08.526 A:middle
networking objects from using

00:09:08.526 --> 00:09:09.556 A:middle
Low Data Mode networks.

00:09:10.796 --> 00:09:12.276 A:middle
With Network.framework you have

00:09:12.276 --> 00:09:13.056 A:middle
another option, though.

00:09:13.376 --> 00:09:14.216 A:middle
If you're going to connect to

00:09:14.216 --> 00:09:15.566 A:middle
the same host whether you're in

00:09:15.566 --> 00:09:17.046 A:middle
Low Data Mode or not, you can go

00:09:17.046 --> 00:09:17.946 A:middle
ahead and establish that

00:09:17.946 --> 00:09:18.426 A:middle
connection.

00:09:18.776 --> 00:09:19.736 A:middle
And once the connection is

00:09:19.736 --> 00:09:21.196 A:middle
established, you can get the

00:09:21.196 --> 00:09:23.016 A:middle
current path and on the current

00:09:23.016 --> 00:09:23.996 A:middle
path you can check to see if

00:09:23.996 --> 00:09:25.516 A:middle
it's constrained and this will

00:09:25.516 --> 00:09:26.396 A:middle
tell you whether or not this

00:09:26.426 --> 00:09:28.056 A:middle
connection is established over a

00:09:28.056 --> 00:09:29.046 A:middle
Low Data Mode network.

00:09:30.296 --> 00:09:32.216 A:middle
Now, if you go this route, it's

00:09:32.216 --> 00:09:33.356 A:middle
really important to make sure

00:09:33.356 --> 00:09:34.526 A:middle
that you handle path updates.

00:09:35.876 --> 00:09:36.896 A:middle
It's very possible that the

00:09:36.896 --> 00:09:38.346 A:middle
constrained property can change

00:09:38.376 --> 00:09:39.316 A:middle
over the lifetime of your

00:09:39.316 --> 00:09:40.616 A:middle
connection.

00:09:43.176 --> 00:09:44.106 A:middle
So, I spent a lot of time

00:09:44.106 --> 00:09:45.126 A:middle
talking about the constrained

00:09:45.126 --> 00:09:46.406 A:middle
property and Low Data Mode.

00:09:47.066 --> 00:09:48.236 A:middle
There are a few other properties

00:09:48.236 --> 00:09:49.876 A:middle
that your application can use to

00:09:49.876 --> 00:09:51.306 A:middle
make decisions about what to do

00:09:51.586 --> 00:09:52.336 A:middle
on a given network.

00:09:53.376 --> 00:09:54.946 A:middle
There is the expensive property,

00:09:55.016 --> 00:09:55.746 A:middle
which we introduced in

00:09:55.746 --> 00:09:56.936 A:middle
Network.framework last year and

00:09:56.936 --> 00:09:58.336 A:middle
we're bringing to URLSession

00:09:58.406 --> 00:09:58.656 A:middle
with the

00:09:58.656 --> 00:09:59.976 A:middle
allowsExpensiveNetworkAccess

00:09:59.976 --> 00:10:02.386 A:middle
property this year.

00:09:59.976 --> 00:10:02.386 A:middle
property this year.

00:10:03.656 --> 00:10:06.056 A:middle
There's also checks for specific

00:10:06.056 --> 00:10:07.346 A:middle
interface types, such as

00:10:07.346 --> 00:10:08.526 A:middle
Cellular or Wi-Fi.

00:10:09.896 --> 00:10:11.006 A:middle
If you haven't adopted any of

00:10:11.006 --> 00:10:12.226 A:middle
these things yet, you're in a

00:10:12.226 --> 00:10:13.606 A:middle
great position to focus on

00:10:13.606 --> 00:10:14.886 A:middle
adopting Low Data Mode and

00:10:14.886 --> 00:10:16.046 A:middle
that's definitely the way to go.

00:10:16.846 --> 00:10:18.006 A:middle
With Low Data Mode, which

00:10:18.006 --> 00:10:19.196 A:middle
correlates to the constrained

00:10:19.236 --> 00:10:22.646 A:middle
property, the user has control.

00:10:22.776 --> 00:10:24.396 A:middle
They have a setting they control

00:10:24.396 --> 00:10:25.466 A:middle
that with.

00:10:25.466 --> 00:10:26.766 A:middle
Expensive, on the other hand, is

00:10:26.766 --> 00:10:27.976 A:middle
a property that's set by the

00:10:27.976 --> 00:10:29.946 A:middle
system and it's almost always

00:10:29.996 --> 00:10:31.386 A:middle
set for cellular networks and

00:10:31.386 --> 00:10:32.976 A:middle
it's also set for Wi-Fi networks

00:10:33.016 --> 00:10:34.106 A:middle
when they're associated with a

00:10:34.106 --> 00:10:35.196 A:middle
Personal Hotspot.

00:10:36.316 --> 00:10:37.946 A:middle
You can also check for cellular,

00:10:38.286 --> 00:10:39.536 A:middle
but that also is something that

00:10:39.536 --> 00:10:40.916 A:middle
the user has no control over.

00:10:41.896 --> 00:10:42.766 A:middle
So, if you're currently doing

00:10:42.766 --> 00:10:44.086 A:middle
any checks based on cellular

00:10:44.146 --> 00:10:45.386 A:middle
interfaces or expensive

00:10:45.436 --> 00:10:47.116 A:middle
properties, it's a really great

00:10:47.116 --> 00:10:49.406 A:middle
idea to move over to doing-- to

00:10:49.406 --> 00:10:51.166 A:middle
using constrained and taking

00:10:51.166 --> 00:10:52.226 A:middle
advantage of Low Data Mode.

00:10:52.886 --> 00:10:54.606 A:middle
If you've looked at these

00:10:54.606 --> 00:10:55.896 A:middle
options and you've decided that

00:10:55.896 --> 00:10:57.166 A:middle
you still want to be making

00:10:57.166 --> 00:10:58.126 A:middle
decisions based on whether

00:10:58.126 --> 00:10:59.626 A:middle
something's expensive or

00:10:59.626 --> 00:11:01.636 A:middle
cellular, we strongly encourage

00:10:59.626 --> 00:11:01.636 A:middle
cellular, we strongly encourage

00:11:01.636 --> 00:11:02.566 A:middle
you to use expensive.

00:11:03.746 --> 00:11:05.336 A:middle
Expensive is a lot more flexible

00:11:05.336 --> 00:11:07.196 A:middle
and in many ways it effectively

00:11:07.196 --> 00:11:09.026 A:middle
futureproofs your application.

00:11:09.676 --> 00:11:11.186 A:middle
Right now, cellular networks are

00:11:11.186 --> 00:11:12.046 A:middle
almost always marked as

00:11:12.046 --> 00:11:13.426 A:middle
expensive, but they may not be

00:11:13.426 --> 00:11:14.726 A:middle
in the future and there are

00:11:14.726 --> 00:11:16.106 A:middle
other interface types that may

00:11:16.106 --> 00:11:17.476 A:middle
come around that may also be

00:11:17.476 --> 00:11:17.956 A:middle
expensive.

00:11:18.456 --> 00:11:19.846 A:middle
By using the expensive property,

00:11:19.956 --> 00:11:21.236 A:middle
your application is going to do

00:11:21.236 --> 00:11:22.346 A:middle
the right thing in the future

00:11:22.346 --> 00:11:23.346 A:middle
with different interfaces.

00:11:23.996 --> 00:11:24.686 A:middle
If you're checking for a

00:11:24.686 --> 00:11:25.726 A:middle
specific interface such as

00:11:25.726 --> 00:11:27.326 A:middle
cellular, you're not going to be

00:11:27.326 --> 00:11:29.316 A:middle
able to take advantage of that.

00:11:29.916 --> 00:11:31.116 A:middle
I'm really excited to see what

00:11:31.116 --> 00:11:32.606 A:middle
you guys do adopting Low Data

00:11:32.606 --> 00:11:32.816 A:middle
Mode.

00:11:33.146 --> 00:11:34.216 A:middle
Thank you so much for your time.

00:11:34.456 --> 00:11:35.426 A:middle
With that, I'd like to have

00:11:35.426 --> 00:11:36.936 A:middle
Guoye come up to talk about

00:11:36.936 --> 00:11:38.566 A:middle
Combine in URLSession.

00:11:39.516 --> 00:11:42.636 A:middle
[ Applause ]

00:11:43.136 --> 00:11:43.726 A:middle
&gt;&gt; Thank you, Josh.

00:11:45.096 --> 00:11:45.916 A:middle
Good morning.

00:11:46.206 --> 00:11:48.346 A:middle
I'm Guoye Zhang.

00:11:48.696 --> 00:11:50.616 A:middle
I'm excited to tell you today

00:11:50.886 --> 00:11:52.366 A:middle
about how we are supporting a

00:11:52.366 --> 00:11:54.026 A:middle
new Swift framework, Combine in

00:11:54.026 --> 00:11:56.466 A:middle
URLSession, and how you can use

00:11:56.466 --> 00:11:57.866 A:middle
Combine to streamline your

00:11:57.866 --> 00:11:59.386 A:middle
networking code.

00:12:00.976 --> 00:12:03.446 A:middle
Combine brings decorative

00:12:03.766 --> 00:12:04.976 A:middle
asynchronous programming to

00:12:04.976 --> 00:12:05.486 A:middle
Swift.

00:12:06.446 --> 00:12:09.486 A:middle
To explain what it is, let me

00:12:09.586 --> 00:12:11.266 A:middle
start with an example of

00:12:11.266 --> 00:12:12.806 A:middle
building a responsive search

00:12:12.806 --> 00:12:13.156 A:middle
field.

00:12:13.786 --> 00:12:16.826 A:middle
So, search field publishes

00:12:16.826 --> 00:12:19.676 A:middle
values whenever user types and

00:12:19.676 --> 00:12:21.446 A:middle
sink here subscribes and

00:12:21.446 --> 00:12:23.436 A:middle
receives a URL to start a

00:12:23.436 --> 00:12:24.006 A:middle
search.

00:12:24.556 --> 00:12:27.326 A:middle
In-between, we use the map

00:12:27.326 --> 00:12:30.416 A:middle
operator to map the value into a

00:12:30.416 --> 00:12:30.626 A:middle
URL.

00:12:33.526 --> 00:12:35.496 A:middle
Now, let's suppose I only want

00:12:35.496 --> 00:12:37.306 A:middle
to start a search when there is

00:12:37.346 --> 00:12:38.316 A:middle
enough content.

00:12:38.916 --> 00:12:42.406 A:middle
We can use the filter operator.

00:12:43.896 --> 00:12:45.566 A:middle
The filter operator in this case

00:12:45.946 --> 00:12:47.956 A:middle
drops all strings shorter than

00:12:48.026 --> 00:12:48.916 A:middle
three characters.

00:12:52.406 --> 00:12:54.926 A:middle
Now we've eliminated the user's

00:12:54.926 --> 00:12:57.056 A:middle
queries like a single H.

00:12:57.896 --> 00:13:00.066 A:middle
However, the search still

00:12:57.896 --> 00:13:00.066 A:middle
However, the search still

00:13:00.066 --> 00:13:01.526 A:middle
happens too frequently.

00:13:02.286 --> 00:13:04.526 A:middle
What if I only want to search

00:13:04.806 --> 00:13:06.356 A:middle
when user stops typing for a

00:13:06.356 --> 00:13:06.756 A:middle
moment.

00:13:07.396 --> 00:13:11.426 A:middle
We can use debounce operator.

00:13:12.516 --> 00:13:17.776 A:middle
[ Applause ]

00:13:18.276 --> 00:13:20.576 A:middle
So, debounce delays the value

00:13:20.896 --> 00:13:22.566 A:middle
and only forwards it when there

00:13:22.566 --> 00:13:24.686 A:middle
is a significant delay, in this

00:13:24.686 --> 00:13:26.486 A:middle
case 0.2 seconds.

00:13:30.316 --> 00:13:33.296 A:middle
However, with debounce, if user

00:13:33.296 --> 00:13:35.186 A:middle
types something and deletes it,

00:13:35.646 --> 00:13:37.176 A:middle
we might end up sending the same

00:13:37.176 --> 00:13:38.766 A:middle
value down the chain and

00:13:38.766 --> 00:13:40.806 A:middle
starting the same search over

00:13:40.806 --> 00:13:43.136 A:middle
and over again.

00:13:43.356 --> 00:13:45.786 A:middle
To solve this, we can add the

00:13:45.786 --> 00:13:47.416 A:middle
removeDuplicates operator.

00:13:49.036 --> 00:13:51.836 A:middle
removeDuplicates remembers the

00:13:51.836 --> 00:13:54.346 A:middle
last value received and only

00:13:54.346 --> 00:13:55.616 A:middle
forwards a new value when it

00:13:55.616 --> 00:13:56.526 A:middle
changes.

00:14:01.356 --> 00:14:03.526 A:middle
Now we have the final version of

00:14:03.526 --> 00:14:05.596 A:middle
the search field by changing

00:14:05.596 --> 00:14:07.696 A:middle
these powerful operators, your

00:14:07.696 --> 00:14:09.806 A:middle
asynchronous code be linear and

00:14:09.806 --> 00:14:10.656 A:middle
composable.

00:14:16.116 --> 00:14:19.726 A:middle
Combine processes values over

00:14:19.726 --> 00:14:20.196 A:middle
time.

00:14:21.336 --> 00:14:23.866 A:middle
It consists of publishers,

00:14:24.146 --> 00:14:26.216 A:middle
operators, and subscribers.

00:14:27.596 --> 00:14:30.166 A:middle
The chain is driven by the

00:14:30.166 --> 00:14:31.466 A:middle
request sent from the

00:14:31.466 --> 00:14:32.526 A:middle
subscriber.

00:14:34.236 --> 00:14:36.136 A:middle
In response to the request,

00:14:36.676 --> 00:14:38.236 A:middle
publisher sends value down the

00:14:38.236 --> 00:14:38.536 A:middle
chain.

00:14:39.486 --> 00:14:41.436 A:middle
This is how that pressure is

00:14:41.436 --> 00:14:42.476 A:middle
handled by Combine.

00:14:43.116 --> 00:14:46.376 A:middle
If you want to learn more,

00:14:47.306 --> 00:14:48.866 A:middle
Introducing Combine session

00:14:48.866 --> 00:14:50.596 A:middle
video will be available shortly

00:14:51.076 --> 00:14:52.536 A:middle
and I encourage you to attend

00:14:52.796 --> 00:14:54.676 A:middle
Combine in Practice sessions

00:14:55.426 --> 00:14:58.276 A:middle
this afternoon.

00:14:58.436 --> 00:15:00.326 A:middle
Networking is inherently

00:14:58.436 --> 00:15:00.326 A:middle
Networking is inherently

00:15:00.326 --> 00:15:02.006 A:middle
asynchronous, that's why it's

00:15:02.006 --> 00:15:03.356 A:middle
perfect to adopt Combine.

00:15:05.396 --> 00:15:07.706 A:middle
This year, we're introducing

00:15:07.706 --> 00:15:10.206 A:middle
DataTaskPublisher in URLSession.

00:15:10.876 --> 00:15:13.076 A:middle
It is a single value publisher

00:15:13.616 --> 00:15:14.936 A:middle
and it works similarly to our

00:15:14.996 --> 00:15:16.276 A:middle
existing closure based

00:15:16.276 --> 00:15:18.946 A:middle
convenience methods, which means

00:15:18.946 --> 00:15:20.736 A:middle
you can create it from a shared

00:15:20.736 --> 00:15:23.016 A:middle
URLSession or from your own

00:15:23.016 --> 00:15:24.706 A:middle
URLSession and receive

00:15:24.706 --> 00:15:26.386 A:middle
authentication challenges and

00:15:26.386 --> 00:15:27.986 A:middle
metrics on your delegate.

00:15:28.576 --> 00:15:31.386 A:middle
This is the interface of

00:15:31.386 --> 00:15:32.556 A:middle
DataTaskPublisher.

00:15:33.116 --> 00:15:35.746 A:middle
It conforms to the publisher

00:15:35.746 --> 00:15:37.006 A:middle
protocol.

00:15:37.806 --> 00:15:39.926 A:middle
On success, it sends you a true

00:15:39.926 --> 00:15:41.906 A:middle
pool of data and response.

00:15:42.196 --> 00:15:44.526 A:middle
On failure, it sends you an URL

00:15:44.526 --> 00:15:44.976 A:middle
error.

00:15:48.416 --> 00:15:50.206 A:middle
Now, let me give you a demo on

00:15:50.206 --> 00:15:51.976 A:middle
how Combine works in URLSession.

00:15:59.006 --> 00:16:00.186 A:middle
So, for the purpose of this

00:15:59.006 --> 00:16:00.186 A:middle
So, for the purpose of this

00:16:00.186 --> 00:16:02.766 A:middle
demo, I've disabled URL cache,

00:16:02.966 --> 00:16:04.536 A:middle
so all the resources to fetch

00:16:04.536 --> 00:16:05.456 A:middle
over the network.

00:16:06.296 --> 00:16:08.126 A:middle
I've also used Network Link

00:16:08.226 --> 00:16:09.866 A:middle
Conditioner to simulate a

00:16:09.866 --> 00:16:10.976 A:middle
realistic 3G environment.

00:16:16.426 --> 00:16:18.396 A:middle
So, I am building this for a bar

00:16:18.396 --> 00:16:19.286 A:middle
called PubSocket.

00:16:20.636 --> 00:16:23.536 A:middle
This app shows name, image, and

00:16:23.536 --> 00:16:25.546 A:middle
item price of each item in the

00:16:25.546 --> 00:16:25.956 A:middle
bar.

00:16:27.956 --> 00:16:29.676 A:middle
So, after listening to Josh's

00:16:29.676 --> 00:16:31.326 A:middle
talk about Low Data Mode, I've

00:16:31.326 --> 00:16:32.626 A:middle
decided to provide a

00:16:32.626 --> 00:16:34.346 A:middle
high-resolution image and a

00:16:34.346 --> 00:16:36.206 A:middle
low-resolution image for Low

00:16:36.696 --> 00:16:37.756 A:middle
Data Mode.

00:16:37.976 --> 00:16:39.336 A:middle
Right now I'm in Low Data Mode,

00:16:39.336 --> 00:16:40.726 A:middle
so you see these black and white

00:16:40.726 --> 00:16:40.976 A:middle
images.

00:16:43.686 --> 00:16:45.296 A:middle
And if I switch off Low Data

00:16:49.036 --> 00:16:50.676 A:middle
Mode, these images are replaced

00:16:50.676 --> 00:16:51.656 A:middle
with the high-resolution

00:16:51.656 --> 00:16:51.976 A:middle
variant.

00:16:55.416 --> 00:16:56.896 A:middle
Let's see how this is currently

00:16:56.896 --> 00:16:57.946 A:middle
implemented without Combine.

00:17:04.876 --> 00:17:06.516 A:middle
So the interface is built in

00:17:06.516 --> 00:17:09.396 A:middle
UITableView and here we have the

00:17:09.396 --> 00:17:11.516 A:middle
data source method cellForRowAt

00:17:11.516 --> 00:17:12.236 A:middle
indexPath.

00:17:13.156 --> 00:17:15.675 A:middle
In this method, we dequeue a

00:17:15.675 --> 00:17:18.266 A:middle
reusable cell and configure the

00:17:18.266 --> 00:17:19.866 A:middle
name and price of each item on

00:17:19.866 --> 00:17:20.366 A:middle
the cell.

00:17:21.596 --> 00:17:25.626 A:middle
Then we start a URL request to

00:17:25.626 --> 00:17:27.386 A:middle
fetch the high-resolution image

00:17:27.516 --> 00:17:29.176 A:middle
and disable constrained network

00:17:29.176 --> 00:17:29.816 A:middle
access.

00:17:31.116 --> 00:17:33.196 A:middle
pubSession here is the shared

00:17:33.196 --> 00:17:35.066 A:middle
global session we use in

00:17:35.066 --> 00:17:37.496 A:middle
PubSocket app and we use the

00:17:37.496 --> 00:17:39.296 A:middle
pubSession to create a data task

00:17:39.296 --> 00:17:40.226 A:middle
from the request.

00:17:44.376 --> 00:17:46.826 A:middle
When task finishes, we check to

00:17:46.826 --> 00:17:48.546 A:middle
see if the status code is 200.

00:17:48.546 --> 00:17:50.796 A:middle
OK. We convert the data into the

00:17:50.796 --> 00:17:52.496 A:middle
image and put the image on the

00:17:52.496 --> 00:17:52.946 A:middle
cell.

00:17:59.496 --> 00:18:01.446 A:middle
When task fails due to Low Data

00:17:59.496 --> 00:18:01.446 A:middle
When task fails due to Low Data

00:18:01.446 --> 00:18:04.256 A:middle
Mode, we create a new data task

00:18:04.556 --> 00:18:05.746 A:middle
to fetch the low-resolution

00:18:05.746 --> 00:18:05.976 A:middle
image.

00:18:09.556 --> 00:18:10.776 A:middle
And we do the same thing here.

00:18:10.776 --> 00:18:13.406 A:middle
We check the status code, we

00:18:13.406 --> 00:18:14.806 A:middle
convert the image, and put it on

00:18:14.806 --> 00:18:14.976 A:middle
the cell.

00:18:17.576 --> 00:18:18.686 A:middle
Don't forget to resume these

00:18:18.686 --> 00:18:18.916 A:middle
tasks.

00:18:23.696 --> 00:18:26.056 A:middle
So, as a networking engineer, I

00:18:26.056 --> 00:18:27.616 A:middle
know the networking logic here

00:18:27.616 --> 00:18:28.176 A:middle
is solid.

00:18:29.216 --> 00:18:30.556 A:middle
I'm adhering to the best

00:18:30.556 --> 00:18:31.686 A:middle
practice of not doing any

00:18:31.686 --> 00:18:32.566 A:middle
pre-fetch acts.

00:18:33.236 --> 00:18:36.046 A:middle
However, I'm not very happy with

00:18:36.046 --> 00:18:38.196 A:middle
the current code because it has

00:18:38.196 --> 00:18:39.566 A:middle
lots of duplications.

00:18:40.476 --> 00:18:42.236 A:middle
We are checking the status code,

00:18:42.236 --> 00:18:46.796 A:middle
converting the image twice.

00:18:46.966 --> 00:18:48.796 A:middle
Also, you might have noticed

00:18:49.056 --> 00:18:50.286 A:middle
I've made the very common

00:18:50.286 --> 00:18:52.436 A:middle
mistake of capturing the cell

00:18:52.436 --> 00:18:53.676 A:middle
and putting the image on the

00:18:53.676 --> 00:18:54.976 A:middle
cell asynchronously.

00:18:57.126 --> 00:18:58.596 A:middle
The cell could have already been

00:18:58.596 --> 00:19:00.516 A:middle
reused at this time by UIKit.

00:18:58.596 --> 00:19:00.516 A:middle
reused at this time by UIKit.

00:19:02.446 --> 00:19:03.926 A:middle
So, I'm going to show you the

00:19:03.926 --> 00:19:04.256 A:middle
bug.

00:19:04.256 --> 00:19:07.026 A:middle
I'm going to scroll down very

00:19:07.026 --> 00:19:07.426 A:middle
quickly.

00:19:07.426 --> 00:19:08.946 A:middle
Please pay attention to the last

00:19:08.946 --> 00:19:10.236 A:middle
few items on the menu.

00:19:10.796 --> 00:19:13.546 A:middle
As you can see, hot dog and

00:19:13.546 --> 00:19:15.086 A:middle
drumstick have the wrong image

00:19:15.086 --> 00:19:15.476 A:middle
being placed.

00:19:19.086 --> 00:19:20.526 A:middle
Let me do it again.

00:19:20.526 --> 00:19:21.636 A:middle
I'm going to scroll up to the

00:19:21.636 --> 00:19:21.986 A:middle
top.

00:19:21.986 --> 00:19:23.176 A:middle
Please pay attention to the

00:19:23.176 --> 00:19:24.356 A:middle
first few items.

00:19:27.436 --> 00:19:28.686 A:middle
Yeah, root beer and fries have

00:19:28.686 --> 00:19:30.396 A:middle
the wrong image being placed on

00:19:30.396 --> 00:19:31.456 A:middle
them before they are replaced

00:19:31.456 --> 00:19:31.976 A:middle
with the correct one.

00:19:37.506 --> 00:19:38.886 A:middle
Now let's see how we can use

00:19:38.886 --> 00:19:40.746 A:middle
Combine to fix all these issues.

00:19:42.676 --> 00:19:44.666 A:middle
First, let me delete this code

00:19:44.666 --> 00:19:44.976 A:middle
to fetch.

00:19:49.666 --> 00:19:50.446 A:middle
Here we have the

00:19:50.446 --> 00:19:52.446 A:middle
MenuItemTableViewCell class

00:19:52.446 --> 00:19:52.746 A:middle
here.

00:19:53.146 --> 00:19:55.816 A:middle
So, cell receives an image, so

00:19:55.816 --> 00:19:57.106 A:middle
it's a good place to put a

00:19:57.106 --> 00:19:58.866 A:middle
subscriber on it.

00:20:00.076 --> 00:20:02.186 A:middle
The subscriber here conforms to

00:20:02.186 --> 00:20:03.526 A:middle
any cancelable protocol.

00:20:04.796 --> 00:20:07.096 A:middle
We can cancel the subscriber in

00:20:08.676 --> 00:20:10.486 A:middle
prepare for reuse method.

00:20:11.036 --> 00:20:12.326 A:middle
The cancellation happens

00:20:12.326 --> 00:20:13.886 A:middle
immediately, which means we

00:20:13.886 --> 00:20:15.586 A:middle
won't ever get the chance of any

00:20:15.586 --> 00:20:16.736 A:middle
image being placed on the wrong

00:20:16.736 --> 00:20:17.106 A:middle
cell.

00:20:18.996 --> 00:20:20.556 A:middle
Now let's go back to the

00:20:20.556 --> 00:20:22.196 A:middle
TableView data source method,

00:20:22.196 --> 00:20:23.776 A:middle
cellForRowAt indexPath.

00:20:26.256 --> 00:20:28.046 A:middle
We start by doing the same

00:20:28.046 --> 00:20:30.216 A:middle
thing, create a URL request and

00:20:30.386 --> 00:20:31.916 A:middle
fetch the high-resolution image

00:20:32.156 --> 00:20:33.626 A:middle
and disable constrained network

00:20:33.626 --> 00:20:34.116 A:middle
access.

00:20:34.926 --> 00:20:36.876 A:middle
But instead of a data task, we

00:20:36.876 --> 00:20:38.756 A:middle
create a data task publisher for

00:20:38.756 --> 00:20:39.446 A:middle
the request.

00:20:44.156 --> 00:20:46.536 A:middle
Then we use the new tryCatch

00:20:46.536 --> 00:20:47.766 A:middle
operator in Combine.

00:20:48.336 --> 00:20:50.446 A:middle
The tryCatch operator catches

00:20:50.446 --> 00:20:51.466 A:middle
the error produced by

00:20:51.466 --> 00:20:53.856 A:middle
DataTaskPublisher and if the

00:20:53.856 --> 00:20:55.506 A:middle
task failed because of Low Data

00:20:55.506 --> 00:20:57.856 A:middle
Mode, we replace the publisher

00:20:57.856 --> 00:20:59.236 A:middle
with the new publisher to fetch

00:20:59.236 --> 00:21:01.146 A:middle
the low-resolution image.

00:20:59.236 --> 00:21:01.146 A:middle
the low-resolution image.

00:21:02.776 --> 00:21:04.486 A:middle
Otherwise, we just rethrow the

00:21:04.486 --> 00:21:05.686 A:middle
same error down the chain.

00:21:10.336 --> 00:21:13.226 A:middle
Next, let's use tryMap operator

00:21:13.416 --> 00:21:15.036 A:middle
to handle the success case where

00:21:15.036 --> 00:21:16.206 A:middle
we receive the data and the

00:21:16.206 --> 00:21:16.956 A:middle
response.

00:21:17.406 --> 00:21:18.986 A:middle
We check the status code and

00:21:18.986 --> 00:21:20.566 A:middle
create an image from the data.

00:21:21.876 --> 00:21:23.606 A:middle
This map handles both

00:21:23.936 --> 00:21:25.286 A:middle
high-resolution image and

00:21:25.286 --> 00:21:26.446 A:middle
low-resolution image,

00:21:26.856 --> 00:21:27.896 A:middle
eliminating the code

00:21:27.896 --> 00:21:28.646 A:middle
duplication.

00:21:33.556 --> 00:21:35.926 A:middle
Finally, we replace the error

00:21:35.926 --> 00:21:38.776 A:middle
with a placeholder image, switch

00:21:38.776 --> 00:21:40.566 A:middle
the main queue, and use the

00:21:40.566 --> 00:21:42.646 A:middle
assigned subscriber to put the

00:21:42.646 --> 00:21:43.596 A:middle
image on the cell.

00:21:51.096 --> 00:21:52.136 A:middle
Now, this is pretty good.

00:21:52.396 --> 00:21:53.976 A:middle
We've implemented the same logic

00:21:53.976 --> 00:21:55.396 A:middle
with much shorter code and

00:21:55.396 --> 00:21:56.076 A:middle
linear code.

00:21:57.436 --> 00:21:58.756 A:middle
But can we do more?

00:21:59.726 --> 00:22:01.336 A:middle
There is one more operator I

00:21:59.726 --> 00:22:01.336 A:middle
There is one more operator I

00:22:01.336 --> 00:22:02.226 A:middle
want to show you.

00:22:02.786 --> 00:22:04.506 A:middle
It is called retry.

00:22:06.936 --> 00:22:09.446 A:middle
Imagine what you have to-- what

00:22:09.446 --> 00:22:11.426 A:middle
you have to do before to support

00:22:11.426 --> 00:22:11.976 A:middle
retry.

00:22:12.586 --> 00:22:16.276 A:middle
You have to either call the data

00:22:16.276 --> 00:22:19.686 A:middle
task creator recursively or

00:22:19.686 --> 00:22:20.996 A:middle
maintain a state machine.

00:22:22.486 --> 00:22:24.976 A:middle
Now in Combine, I can just put

00:22:24.976 --> 00:22:28.346 A:middle
retry operator right here before

00:22:28.346 --> 00:22:29.596 A:middle
we replace the error.

00:22:32.516 --> 00:22:37.826 A:middle
[ Applause ]

00:22:38.326 --> 00:22:40.276 A:middle
So, retry catches the errors

00:22:40.276 --> 00:22:43.116 A:middle
thrown here and it retries by

00:22:43.116 --> 00:22:44.406 A:middle
restarting the chain of

00:22:44.406 --> 00:22:46.466 A:middle
operators and fetches the image

00:22:46.466 --> 00:22:46.906 A:middle
again.

00:22:46.906 --> 00:22:49.656 A:middle
In this case, I'm just retrying

00:22:49.656 --> 00:22:49.856 A:middle
once.

00:22:53.816 --> 00:22:55.616 A:middle
So, networking APIs on all

00:22:55.616 --> 00:22:57.166 A:middle
platforms are designed to be

00:22:57.166 --> 00:22:59.576 A:middle
very reliable, so in general you

00:22:59.576 --> 00:23:00.646 A:middle
don't need to retry.

00:22:59.576 --> 00:23:00.646 A:middle
don't need to retry.

00:23:01.306 --> 00:23:03.466 A:middle
However, your app might need to

00:23:03.466 --> 00:23:05.066 A:middle
connect with some flaky server

00:23:05.066 --> 00:23:07.496 A:middle
or meta boxes that gives you 500

00:23:07.496 --> 00:23:09.136 A:middle
server errors frequently.

00:23:09.666 --> 00:23:12.906 A:middle
In this case, this tryMap

00:23:12.906 --> 00:23:14.876 A:middle
operator will throw an invalid

00:23:14.876 --> 00:23:16.756 A:middle
server response error, which can

00:23:16.756 --> 00:23:17.956 A:middle
be caught by retry.

00:23:21.536 --> 00:23:23.296 A:middle
But please be aware that

00:23:23.296 --> 00:23:24.906 A:middle
networking operation is very

00:23:24.906 --> 00:23:27.336 A:middle
expensive; retry is no

00:23:27.336 --> 00:23:29.666 A:middle
exception, so avoid retry if

00:23:29.666 --> 00:23:30.396 A:middle
possible.

00:23:30.956 --> 00:23:32.996 A:middle
If you have to retry, start with

00:23:32.996 --> 00:23:34.066 A:middle
a very low number.

00:23:35.916 --> 00:23:37.826 A:middle
Also, please pay attention to

00:23:37.826 --> 00:23:39.686 A:middle
the idempotence of your request.

00:23:40.876 --> 00:23:43.206 A:middle
In my app, downloading an image

00:23:43.206 --> 00:23:45.436 A:middle
twice is fine, but if your app

00:23:45.436 --> 00:23:46.856 A:middle
handles transaction like

00:23:46.856 --> 00:23:49.236 A:middle
payment, blindly retrying could

00:23:49.236 --> 00:23:50.286 A:middle
be very dangerous.

00:23:56.286 --> 00:23:57.806 A:middle
Now let me turn on Low Data Mode

00:23:57.806 --> 00:23:57.976 A:middle
again.

00:24:06.266 --> 00:24:07.606 A:middle
And let's see the app running

00:24:07.606 --> 00:24:07.846 A:middle
again.

00:24:23.286 --> 00:24:24.676 A:middle
As you can see, we fetched the

00:24:24.676 --> 00:24:25.826 A:middle
low-resolution images just like

00:24:25.826 --> 00:24:25.976 A:middle
before.

00:24:29.066 --> 00:24:30.616 A:middle
And if I turn off Low Data Mode,

00:24:34.416 --> 00:24:36.716 A:middle
the same high-resolution images

00:24:36.976 --> 00:24:38.496 A:middle
and we won't get any wrong

00:24:38.496 --> 00:24:39.976 A:middle
images being placed on the cell.

00:24:44.516 --> 00:24:52.206 A:middle
[ Applause ]

00:24:52.706 --> 00:24:55.646 A:middle
OK. Let's go back to the slides.

00:24:59.046 --> 00:25:01.086 A:middle
To recap, I've just shown you

00:24:59.046 --> 00:25:01.086 A:middle
To recap, I've just shown you

00:25:01.086 --> 00:25:02.276 A:middle
how Combine can make your

00:25:02.276 --> 00:25:05.306 A:middle
networking code concise, linear,

00:25:05.516 --> 00:25:07.396 A:middle
and less error-prone.

00:25:08.156 --> 00:25:09.646 A:middle
I've also shown you how

00:25:09.646 --> 00:25:11.146 A:middle
composable these Combine

00:25:11.146 --> 00:25:12.946 A:middle
operators are, that you can

00:25:12.946 --> 00:25:14.396 A:middle
support retry by just adding

00:25:14.396 --> 00:25:15.346 A:middle
one-off code.

00:25:16.256 --> 00:25:18.536 A:middle
But please pay attention to use

00:25:18.536 --> 00:25:20.636 A:middle
low retry count and only retry

00:25:20.636 --> 00:25:22.036 A:middle
idempotent requests.

00:25:23.026 --> 00:25:25.576 A:middle
Finally, I've shown you how you

00:25:25.936 --> 00:25:28.056 A:middle
can use Combine with Low Data

00:25:28.056 --> 00:25:30.166 A:middle
Mode without doing any pre-fetch

00:25:30.166 --> 00:25:30.546 A:middle
checks.

00:25:34.176 --> 00:25:35.736 A:middle
Here is the code I extracted

00:25:35.736 --> 00:25:37.666 A:middle
from my demo to do adaptive

00:25:37.666 --> 00:25:39.026 A:middle
loading for Low Data Mode.

00:25:39.636 --> 00:25:43.276 A:middle
It takes a regular URL and a low

00:25:43.276 --> 00:25:45.846 A:middle
data URL and gives you back a

00:25:45.846 --> 00:25:48.696 A:middle
publisher of data.

00:25:48.876 --> 00:25:51.906 A:middle
First, we create a-- we create a

00:25:51.906 --> 00:25:53.946 A:middle
request to fetch the regular URL

00:25:54.156 --> 00:25:55.696 A:middle
and disable constrained network

00:25:55.696 --> 00:25:56.186 A:middle
access.

00:25:57.196 --> 00:25:58.976 A:middle
We use the URL-- we use the

00:25:58.976 --> 00:26:00.676 A:middle
request to create a data task

00:25:58.976 --> 00:26:00.676 A:middle
request to create a data task

00:26:00.676 --> 00:26:01.376 A:middle
publisher.

00:26:03.116 --> 00:26:05.516 A:middle
Then, immediately then we handle

00:26:05.516 --> 00:26:08.106 A:middle
the error caused by Low Data

00:26:08.106 --> 00:26:09.916 A:middle
Mode and then we replace the

00:26:09.916 --> 00:26:11.336 A:middle
publisher with a new publisher

00:26:11.516 --> 00:26:13.376 A:middle
to fetch the low data URL.

00:26:13.866 --> 00:26:17.466 A:middle
Next, we handle both success

00:26:17.466 --> 00:26:19.486 A:middle
cases together, checking the

00:26:19.556 --> 00:26:21.346 A:middle
status code and give the data

00:26:21.346 --> 00:26:21.976 A:middle
back to you.

00:26:25.796 --> 00:26:27.066 A:middle
You can use this code as a

00:26:27.066 --> 00:26:29.076 A:middle
starting point of Combine and

00:26:29.076 --> 00:26:31.156 A:middle
Low Data Mode and customize this

00:26:31.156 --> 00:26:31.936 A:middle
code to your needs.

00:26:34.096 --> 00:26:35.646 A:middle
I have to mention that some of

00:26:35.646 --> 00:26:37.316 A:middle
the APIs are not available yet

00:26:37.406 --> 00:26:38.216 A:middle
in current SDK.

00:26:38.216 --> 00:26:40.166 A:middle
We are working on getting them

00:26:40.166 --> 00:26:41.816 A:middle
into a future beta.

00:26:45.486 --> 00:26:46.956 A:middle
Next, I want to invite my

00:26:46.956 --> 00:26:49.236 A:middle
colleague Jiten to talk about

00:26:49.236 --> 00:26:49.956 A:middle
WebSocket.

00:26:50.726 --> 00:26:51.946 A:middle
&gt;&gt; Thank you, Guoye.

00:26:51.946 --> 00:26:54.166 A:middle
Good morning everyone.

00:26:54.606 --> 00:26:56.946 A:middle
My name is Jiten Mehta and I'm

00:26:56.946 --> 00:26:58.506 A:middle
excited to talk to you about the

00:26:58.506 --> 00:27:00.516 A:middle
WebSocket protocol in Apple's

00:26:58.506 --> 00:27:00.516 A:middle
WebSocket protocol in Apple's

00:27:00.516 --> 00:27:03.026 A:middle
networking frameworks new in iOS

00:27:03.076 --> 00:27:05.026 A:middle
13 and macOS Catalina.

00:27:06.726 --> 00:27:08.696 A:middle
In the past years, a large

00:27:08.696 --> 00:27:09.886 A:middle
number of developers have asked

00:27:09.886 --> 00:27:11.446 A:middle
us for the WebSocket protocol

00:27:11.446 --> 00:27:13.216 A:middle
support in Apple's frameworks.

00:27:14.096 --> 00:27:15.516 A:middle
In fact, it was the number one

00:27:15.516 --> 00:27:16.666 A:middle
developer request from a

00:27:16.666 --> 00:27:18.066 A:middle
networking survey that we

00:27:18.066 --> 00:27:18.976 A:middle
conducted last year.

00:27:22.456 --> 00:27:24.526 A:middle
WebSocket allows bidirectional

00:27:24.526 --> 00:27:26.816 A:middle
communication over a single HTTP

00:27:26.816 --> 00:27:27.496 A:middle
connection.

00:27:28.676 --> 00:27:30.346 A:middle
This enables developers to write

00:27:30.346 --> 00:27:31.966 A:middle
applications like chat,

00:27:32.736 --> 00:27:34.356 A:middle
multiplayer games, and other

00:27:34.356 --> 00:27:36.166 A:middle
real-time applications.

00:27:36.976 --> 00:27:38.606 A:middle
WebSocket works over the

00:27:38.606 --> 00:27:41.386 A:middle
well-known HTTP ports and is

00:27:41.446 --> 00:27:42.816 A:middle
fully compatible with the

00:27:42.816 --> 00:27:44.426 A:middle
existing web infrastructure,

00:27:44.796 --> 00:27:46.176 A:middle
allowing you to connect to

00:27:46.246 --> 00:27:48.886 A:middle
proxies, CDNs, and firewalls.

00:27:50.256 --> 00:27:52.156 A:middle
Historically, the WebSocket

00:27:52.156 --> 00:27:54.316 A:middle
protocol has been available as a

00:27:54.316 --> 00:27:56.686 A:middle
JavaScript API in web browsers,

00:27:57.866 --> 00:27:59.146 A:middle
but looking at the benefits that

00:27:59.146 --> 00:28:00.636 A:middle
WebSocket brings to web apps,

00:27:59.146 --> 00:28:00.636 A:middle
WebSocket brings to web apps,

00:28:00.936 --> 00:28:03.206 A:middle
we've decided to extend this API

00:28:03.426 --> 00:28:05.446 A:middle
to our networking framework in

00:28:05.446 --> 00:28:07.026 A:middle
addition to the existing

00:28:07.026 --> 00:28:09.176 A:middle
JavaScript API already available

00:28:09.176 --> 00:28:09.906 A:middle
in web views.

00:28:11.226 --> 00:28:12.746 A:middle
This enables you to use your

00:28:12.746 --> 00:28:14.856 A:middle
existing web infrastructure and

00:28:14.856 --> 00:28:16.166 A:middle
bring it to your native apps on

00:28:16.226 --> 00:28:16.976 A:middle
Apple's platforms.

00:28:20.476 --> 00:28:22.106 A:middle
Before we talk about WebSocket,

00:28:22.836 --> 00:28:24.186 A:middle
let's take a look at a common

00:28:24.186 --> 00:28:26.516 A:middle
technique used today to enable

00:28:26.516 --> 00:28:28.056 A:middle
bidirectional communication.

00:28:29.136 --> 00:28:30.856 A:middle
Let's take a chat application as

00:28:30.856 --> 00:28:31.456 A:middle
an example.

00:28:31.956 --> 00:28:34.726 A:middle
When a client wants to receive a

00:28:34.726 --> 00:28:36.096 A:middle
response from the server, it

00:28:36.096 --> 00:28:37.056 A:middle
sends out a request.

00:28:38.266 --> 00:28:40.046 A:middle
The server responds with a 200

00:28:40.046 --> 00:28:42.006 A:middle
status code immediately, but it

00:28:42.006 --> 00:28:43.496 A:middle
does not send out the response

00:28:43.496 --> 00:28:45.116 A:middle
body because it doesn't have one

00:28:45.116 --> 00:28:45.706 A:middle
at this point.

00:28:46.866 --> 00:28:48.536 A:middle
Sometime in the future, once the

00:28:48.536 --> 00:28:50.336 A:middle
server has a response ready for

00:28:50.336 --> 00:28:52.146 A:middle
the client, it sends it out to

00:28:52.146 --> 00:28:52.576 A:middle
the client.

00:28:53.356 --> 00:28:55.116 A:middle
At which point, the client sends

00:28:55.116 --> 00:28:56.656 A:middle
a new request, indicating that

00:28:56.656 --> 00:28:58.066 A:middle
it wants to receive the next

00:28:58.066 --> 00:28:58.536 A:middle
message.

00:28:59.916 --> 00:29:01.606 A:middle
This is known as long polling,

00:28:59.916 --> 00:29:01.606 A:middle
This is known as long polling,

00:29:02.206 --> 00:29:03.666 A:middle
but there are some disadvantages

00:29:03.666 --> 00:29:04.976 A:middle
associated with long polling.

00:29:06.436 --> 00:29:08.176 A:middle
Both the end points when they

00:29:08.176 --> 00:29:09.916 A:middle
want to send messages have to

00:29:09.916 --> 00:29:12.396 A:middle
either send an HTTP request or

00:29:12.396 --> 00:29:14.786 A:middle
an HTTP response, which is a lot

00:29:14.786 --> 00:29:15.336 A:middle
of overhead.

00:29:16.836 --> 00:29:18.536 A:middle
Additionally, complexity has to

00:29:18.696 --> 00:29:19.936 A:middle
be maintained at the server to

00:29:19.936 --> 00:29:21.176 A:middle
enable long polling.

00:29:22.726 --> 00:29:24.226 A:middle
Let's see how WebSockets can

00:29:24.226 --> 00:29:25.396 A:middle
solve this problem for us.

00:29:25.936 --> 00:29:29.446 A:middle
As the first part of the first

00:29:29.446 --> 00:29:31.086 A:middle
step of the WebSocket handshake,

00:29:31.336 --> 00:29:33.586 A:middle
the client sends out a request

00:29:33.766 --> 00:29:35.416 A:middle
to the server, indicating that

00:29:35.416 --> 00:29:36.696 A:middle
it wants to upgrade this

00:29:36.696 --> 00:29:37.766 A:middle
connection to WebSocket.

00:29:39.206 --> 00:29:41.376 A:middle
The server responds with the 101

00:29:41.456 --> 00:29:42.996 A:middle
switching protocol to response,

00:29:43.566 --> 00:29:45.126 A:middle
at which point we have a

00:29:45.126 --> 00:29:47.076 A:middle
bidirectional stream between the

00:29:47.076 --> 00:29:47.966 A:middle
two end points.

00:29:48.506 --> 00:29:51.286 A:middle
Both the end points are now free

00:29:51.286 --> 00:29:52.956 A:middle
to send messages in either

00:29:52.956 --> 00:29:53.526 A:middle
direction.

00:29:54.096 --> 00:29:56.716 A:middle
They can send messages like data

00:29:57.026 --> 00:29:59.246 A:middle
string or ping and pong frames

00:29:59.566 --> 00:30:03.566 A:middle
without any HTTP overhead.

00:29:59.566 --> 00:30:03.566 A:middle
without any HTTP overhead.

00:30:03.566 --> 00:30:05.426 A:middle
URLSession is Apple's

00:30:05.426 --> 00:30:07.056 A:middle
recommended API for HTTP.

00:30:07.056 --> 00:30:09.986 A:middle
And this year we are excited to

00:30:10.046 --> 00:30:10.816 A:middle
announce

00:30:10.986 --> 00:30:13.216 A:middle
URLSessionWebSocketTask, a new

00:30:13.216 --> 00:30:14.976 A:middle
API in the foundation framework.

00:30:15.516 --> 00:30:20.816 A:middle
[ Cheering and Applause ]

00:30:21.316 --> 00:30:22.906 A:middle
To create a WebSocket task, you

00:30:22.906 --> 00:30:24.626 A:middle
can simply pass in the URL that

00:30:24.626 --> 00:30:26.046 A:middle
you want to connect to and call

00:30:26.046 --> 00:30:26.736 A:middle
resume.

00:30:27.406 --> 00:30:28.996 A:middle
We will start the handshake and

00:30:28.996 --> 00:30:29.936 A:middle
you need not worry about

00:30:29.936 --> 00:30:31.026 A:middle
handling any of the status

00:30:31.026 --> 00:30:31.426 A:middle
codes.

00:30:31.956 --> 00:30:34.866 A:middle
The first part of the WebSocket

00:30:34.866 --> 00:30:37.296 A:middle
handshake uses HTTP semantics,

00:30:37.666 --> 00:30:38.996 A:middle
which means your

00:30:39.036 --> 00:30:42.106 A:middle
URLSessionWebSocketTask will use

00:30:42.106 --> 00:30:43.816 A:middle
your existing URLSession

00:30:43.816 --> 00:30:45.016 A:middle
configuration objects.

00:30:46.136 --> 00:30:47.576 A:middle
It will also use your network

00:30:47.576 --> 00:30:48.996 A:middle
storages to do cookie and

00:30:48.996 --> 00:30:50.766 A:middle
convention look ups and we will

00:30:50.766 --> 00:30:52.186 A:middle
honor your delegates for any

00:30:52.186 --> 00:30:52.826 A:middle
challenges.

00:30:54.156 --> 00:30:55.566 A:middle
Once you're connected, you can

00:30:55.616 --> 00:30:57.776 A:middle
send data or string messages on

00:30:57.776 --> 00:30:58.336 A:middle
the task.

00:30:59.556 --> 00:31:01.266 A:middle
You can also receive messages on

00:30:59.556 --> 00:31:01.266 A:middle
You can also receive messages on

00:31:01.266 --> 00:31:03.206 A:middle
the task by passing a completion

00:31:03.206 --> 00:31:04.806 A:middle
handler, which will be called

00:31:04.806 --> 00:31:06.706 A:middle
asynchronously once we receive

00:31:06.706 --> 00:31:08.846 A:middle
the entire message from the

00:31:09.196 --> 00:31:09.336 A:middle
server.

00:31:10.396 --> 00:31:12.456 A:middle
The URLSession API for

00:31:12.456 --> 00:31:14.186 A:middle
WebSockets is closer to the

00:31:14.186 --> 00:31:16.576 A:middle
JavaScript API, which is based

00:31:16.576 --> 00:31:18.796 A:middle
around complete messages and

00:31:18.796 --> 00:31:19.466 A:middle
callbacks.

00:31:20.706 --> 00:31:21.936 A:middle
But some developers need more

00:31:21.936 --> 00:31:24.766 A:middle
than this, like sever support or

00:31:24.766 --> 00:31:26.186 A:middle
reading partial messages.

00:31:26.726 --> 00:31:28.616 A:middle
And for that, we are excited to

00:31:28.616 --> 00:31:31.136 A:middle
announce WebSocketSupport in

00:31:31.136 --> 00:31:32.756 A:middle
Network.framework through the

00:31:32.756 --> 00:31:34.816 A:middle
NWConnection and NWListener

00:31:34.816 --> 00:31:36.096 A:middle
objects that give you both

00:31:36.096 --> 00:31:36.976 A:middle
client and server support.

00:31:39.516 --> 00:31:43.066 A:middle
[ Applause ]

00:31:43.566 --> 00:31:45.646 A:middle
With this, you can have a

00:31:45.646 --> 00:31:47.066 A:middle
message oriented transport

00:31:47.066 --> 00:31:48.826 A:middle
protocol which can be extended

00:31:48.826 --> 00:31:50.306 A:middle
for peer-to-peer communication.

00:31:51.646 --> 00:31:53.166 A:middle
You can also receive partial

00:31:53.166 --> 00:31:54.566 A:middle
messages by specifying the

00:31:54.566 --> 00:31:56.406 A:middle
minimum and maximum bytes for a

00:31:56.406 --> 00:31:57.836 A:middle
give and receive operation.

00:31:58.446 --> 00:32:00.816 A:middle
To add WebSockets to your

00:31:58.446 --> 00:32:00.816 A:middle
To add WebSockets to your

00:32:00.816 --> 00:32:02.416 A:middle
network frame of objects, you

00:32:02.416 --> 00:32:04.556 A:middle
can simply create a parameters

00:32:04.556 --> 00:32:06.156 A:middle
object with TLS enabled on it.

00:32:07.066 --> 00:32:09.686 A:middle
Next, create a websocketOptions

00:32:09.956 --> 00:32:11.766 A:middle
and set it on the default

00:32:11.766 --> 00:32:12.676 A:middle
protocol stack of the

00:32:12.676 --> 00:32:12.966 A:middle
parameters.

00:32:15.506 --> 00:32:16.766 A:middle
Once you create the parameters,

00:32:17.196 --> 00:32:18.516 A:middle
next you can pass in these

00:32:18.516 --> 00:32:20.206 A:middle
parameters to the NWConnection

00:32:20.206 --> 00:32:21.886 A:middle
constructor to create an

00:32:21.886 --> 00:32:22.916 A:middle
NWConnection object.

00:32:23.826 --> 00:32:24.836 A:middle
Or if you're looking to create a

00:32:24.836 --> 00:32:26.196 A:middle
listener, just pass these

00:32:26.196 --> 00:32:27.506 A:middle
parameters to the constructor of

00:32:27.506 --> 00:32:28.026 A:middle
the listener.

00:32:29.446 --> 00:32:31.946 A:middle
The send and receive APIs remain

00:32:31.946 --> 00:32:34.156 A:middle
unchanged from last year and you

00:32:34.156 --> 00:32:36.346 A:middle
can continue using those to send

00:32:36.346 --> 00:32:37.976 A:middle
and receive WebSocket messages.

00:32:42.046 --> 00:32:43.156 A:middle
Now, let's take a look at

00:32:43.156 --> 00:32:44.366 A:middle
WebSockets in action.

00:32:44.976 --> 00:32:47.166 A:middle
I'm going to build upon the

00:32:47.166 --> 00:32:48.476 A:middle
application that Guoye just

00:32:48.476 --> 00:32:51.276 A:middle
showed you, PubSocket, but I

00:32:51.276 --> 00:32:52.496 A:middle
want to change the business

00:32:52.496 --> 00:32:54.406 A:middle
model of PubSocket slightly.

00:32:54.876 --> 00:32:57.836 A:middle
The price of items is now going

00:32:57.836 --> 00:33:00.076 A:middle
to be dynamic and will change on

00:32:57.836 --> 00:33:00.076 A:middle
to be dynamic and will change on

00:33:00.076 --> 00:33:00.486 A:middle
demand.

00:33:01.266 --> 00:33:02.686 A:middle
So, think about a stock market,

00:33:02.686 --> 00:33:05.126 A:middle
but for food and drinks.

00:33:05.886 --> 00:33:06.896 A:middle
So, on the left-hand side you

00:33:06.896 --> 00:33:08.366 A:middle
see PubServer, which is the

00:33:08.366 --> 00:33:09.936 A:middle
application that the bartender

00:33:09.936 --> 00:33:11.316 A:middle
sees where they can edit the

00:33:11.316 --> 00:33:12.906 A:middle
items or make changes to the

00:33:12.966 --> 00:33:13.246 A:middle
price.

00:33:14.286 --> 00:33:15.286 A:middle
On the right-hand side is the

00:33:15.326 --> 00:33:16.396 A:middle
pub menu that we've already

00:33:16.396 --> 00:33:17.886 A:middle
seen, which is the application

00:33:17.886 --> 00:33:19.516 A:middle
that your clients or customers

00:33:19.516 --> 00:33:20.766 A:middle
walking into the bar can see.

00:33:21.316 --> 00:33:24.096 A:middle
The new feature with dynamic

00:33:24.096 --> 00:33:25.716 A:middle
pricing is going to be called

00:33:25.716 --> 00:33:26.826 A:middle
PubSocket+.

00:33:27.246 --> 00:33:28.096 A:middle
So, see-- let's see how

00:33:28.096 --> 00:33:29.336 A:middle
PubSocket+ works with our

00:33:29.336 --> 00:33:30.706 A:middle
current implementation of server

00:33:30.706 --> 00:33:31.136 A:middle
and client.

00:33:31.726 --> 00:33:34.966 A:middle
Let's suppose the bartender

00:33:34.966 --> 00:33:36.476 A:middle
wants to bump the price of root

00:33:36.476 --> 00:33:39.226 A:middle
beer to $6.99.

00:33:39.226 --> 00:33:41.126 A:middle
I click update.

00:33:42.316 --> 00:33:43.826 A:middle
And now the client has to pull

00:33:43.826 --> 00:33:44.956 A:middle
down to refresh.

00:33:45.496 --> 00:33:47.836 A:middle
And once they do that, they get

00:33:47.836 --> 00:33:49.796 A:middle
the updated price of root beer.

00:33:50.936 --> 00:33:53.096 A:middle
That's OK, but I'm sure we could

00:33:53.096 --> 00:33:53.956 A:middle
do better than this.

00:33:54.806 --> 00:33:56.856 A:middle
I want customers of PubSocket+

00:33:56.856 --> 00:33:58.496 A:middle
to have a seamless experience

00:33:58.706 --> 00:33:59.746 A:middle
where they don't have to pull

00:33:59.746 --> 00:34:01.856 A:middle
down to refresh and they can get

00:33:59.746 --> 00:34:01.856 A:middle
down to refresh and they can get

00:34:01.856 --> 00:34:02.826 A:middle
the price changes live.

00:34:03.526 --> 00:34:06.156 A:middle
Let's see how WebSockets can

00:34:06.156 --> 00:34:07.496 A:middle
help us achieve this.

00:34:08.025 --> 00:34:11.275 A:middle
Let's head over to Xcode and

00:34:11.366 --> 00:34:13.476 A:middle
first I'm going to stop the

00:34:14.525 --> 00:34:18.466 A:middle
server and the client.

00:34:18.466 --> 00:34:20.775 A:middle
And let's head over to our

00:34:20.775 --> 00:34:22.576 A:middle
server where I have an

00:34:22.576 --> 00:34:24.916 A:middle
NWListener which is acting as my

00:34:24.916 --> 00:34:25.795 A:middle
TCB server.

00:34:27.156 --> 00:34:29.016 A:middle
Here I have some parameters that

00:34:29.016 --> 00:34:30.565 A:middle
I've created with TLS options

00:34:30.565 --> 00:34:31.096 A:middle
set on them.

00:34:32.156 --> 00:34:32.966 A:middle
First, I'm going to make a

00:34:32.966 --> 00:34:35.416 A:middle
change here to create some

00:34:35.416 --> 00:34:37.856 A:middle
WebSocket options and set it on

00:34:37.856 --> 00:34:39.226 A:middle
the protocol stack of the

00:34:39.226 --> 00:34:39.966 A:middle
parameters.

00:34:40.856 --> 00:34:43.876 A:middle
This tells my server how to do a

00:34:43.876 --> 00:34:45.716 A:middle
WebSocket handshake with clients

00:34:45.755 --> 00:34:46.876 A:middle
that are trying to connect with

00:34:47.456 --> 00:34:47.525 A:middle
it.

00:34:48.156 --> 00:34:49.985 A:middle
The next change I would make on

00:34:49.985 --> 00:34:53.056 A:middle
my server is in this function

00:34:53.056 --> 00:34:55.176 A:middle
called sendPriceChanges.

00:34:56.306 --> 00:34:58.556 A:middle
This function is meant to send

00:34:58.556 --> 00:35:00.686 A:middle
out WebSocket messages to all

00:34:58.556 --> 00:35:00.686 A:middle
out WebSocket messages to all

00:35:00.686 --> 00:35:01.826 A:middle
the clients that are connected

00:35:01.826 --> 00:35:04.446 A:middle
to it each time a price of an

00:35:04.446 --> 00:35:07.146 A:middle
item changes on the server.

00:35:07.326 --> 00:35:09.216 A:middle
Currently, I have a send

00:35:09.216 --> 00:35:11.386 A:middle
implemented with default stream

00:35:11.386 --> 00:35:11.936 A:middle
context.

00:35:13.056 --> 00:35:15.166 A:middle
This means that the data that I

00:35:15.166 --> 00:35:17.086 A:middle
pass to the send method is sent

00:35:17.086 --> 00:35:18.626 A:middle
out as a bag of bytes on this

00:35:18.626 --> 00:35:20.416 A:middle
TCB connection and it does not

00:35:20.416 --> 00:35:21.876 A:middle
have any message framing.

00:35:21.876 --> 00:35:24.496 A:middle
I'm going to change the context

00:35:24.496 --> 00:35:28.246 A:middle
here and create a new context

00:35:28.606 --> 00:35:30.826 A:middle
with some WebSocket metadata

00:35:30.826 --> 00:35:32.876 A:middle
associated with it.

00:35:32.926 --> 00:35:34.946 A:middle
Now, this tells my connection to

00:35:34.946 --> 00:35:37.156 A:middle
send the data as WebSocket

00:35:37.216 --> 00:35:38.296 A:middle
message frames.

00:35:39.376 --> 00:35:40.586 A:middle
With these two changes, my

00:35:40.586 --> 00:35:42.456 A:middle
server should be all set to send

00:35:42.456 --> 00:35:43.906 A:middle
out WebSocket messages to my

00:35:43.906 --> 00:35:44.266 A:middle
client.

00:35:45.316 --> 00:35:48.216 A:middle
Now, let's see-- I can keep the

00:35:48.216 --> 00:35:49.656 A:middle
server building while we head

00:35:49.656 --> 00:35:50.336 A:middle
over to the client.

00:35:51.566 --> 00:35:52.956 A:middle
So, on the client side, I'm

00:35:54.086 --> 00:35:55.086 A:middle
going to make changes to the

00:35:55.086 --> 00:35:57.546 A:middle
function connect first; connect

00:35:58.116 --> 00:35:59.086 A:middle
is going to connect to a new

00:35:59.086 --> 00:36:01.936 A:middle
server and for that I'm going to

00:35:59.086 --> 00:36:01.936 A:middle
server and for that I'm going to

00:36:02.286 --> 00:36:05.316 A:middle
use URLSessionWebSocketTask I'll

00:36:05.316 --> 00:36:07.686 A:middle
simply pass in the URL to the

00:36:07.686 --> 00:36:09.836 A:middle
task and then call resume so I

00:36:09.836 --> 00:36:11.876 A:middle
can start doing the handshake.

00:36:12.866 --> 00:36:14.266 A:middle
Once I'm connected, I'm going to

00:36:14.266 --> 00:36:16.436 A:middle
call readMessage, which will

00:36:16.536 --> 00:36:17.966 A:middle
receive a message back from the

00:36:17.966 --> 00:36:18.196 A:middle
server.

00:36:18.196 --> 00:36:20.846 A:middle
Now, let's see how readMessage

00:36:20.846 --> 00:36:21.646 A:middle
should be implemented.

00:36:23.156 --> 00:36:26.386 A:middle
Inside readMessage, I'll call

00:36:26.386 --> 00:36:28.916 A:middle
receive on the task and pass a

00:36:28.916 --> 00:36:29.866 A:middle
completion block.

00:36:30.866 --> 00:36:34.276 A:middle
On the success case, I'll update

00:36:34.276 --> 00:36:36.616 A:middle
my UI with the price change and

00:36:36.616 --> 00:36:38.046 A:middle
immediately after that I'll call

00:36:38.046 --> 00:36:39.676 A:middle
readMessage again so I can read

00:36:39.676 --> 00:36:40.956 A:middle
the next message coming back

00:36:40.956 --> 00:36:41.696 A:middle
from the server.

00:36:42.646 --> 00:36:44.166 A:middle
Once I make these two changes on

00:36:44.166 --> 00:36:45.916 A:middle
the client, I should be all set

00:36:46.136 --> 00:36:47.806 A:middle
to connect to my server and

00:36:47.806 --> 00:36:49.246 A:middle
receive WebSocket messages.

00:36:50.576 --> 00:36:52.656 A:middle
So, let's run a new server and a

00:36:52.656 --> 00:36:54.386 A:middle
client to see how they work.

00:36:55.486 --> 00:36:57.406 A:middle
First I'm going to run my

00:37:00.936 --> 00:37:01.086 A:middle
server.

00:37:01.276 --> 00:37:02.416 A:middle
And now our new client reads

00:37:02.486 --> 00:37:04.456 A:middle
PubSocket+, which has the new

00:37:04.456 --> 00:37:06.836 A:middle
and improved WebSocket ability.

00:37:07.606 --> 00:37:09.396 A:middle
Now, let's suppose it's happy

00:37:09.396 --> 00:37:11.156 A:middle
hour and the bartender wants to

00:37:11.156 --> 00:37:12.516 A:middle
reduce the price of root beer

00:37:12.676 --> 00:37:14.556 A:middle
down to $1.99.

00:37:14.556 --> 00:37:16.326 A:middle
So, let me make that change.

00:37:20.076 --> 00:37:21.756 A:middle
And I'm going to click update

00:37:22.506 --> 00:37:23.606 A:middle
and then you can see on the

00:37:23.606 --> 00:37:25.296 A:middle
client the price got updated

00:37:25.346 --> 00:37:26.396 A:middle
without the client having to--

00:37:27.516 --> 00:37:29.586 A:middle
[ Applause ]

00:37:30.086 --> 00:37:32.386 A:middle
So, for those of you who missed

00:37:32.386 --> 00:37:33.306 A:middle
it, I'm going to reduce the

00:37:33.306 --> 00:37:34.386 A:middle
fries to go with that root

00:37:34.386 --> 00:37:35.716 A:middle
beer-- now that's some happy

00:37:35.716 --> 00:37:35.886 A:middle
hour.

00:37:36.556 --> 00:37:39.906 A:middle
And once I click update, you'll

00:37:39.906 --> 00:37:41.586 A:middle
see the price of fries change on

00:37:41.586 --> 00:37:42.886 A:middle
the client without me having to

00:37:42.886 --> 00:37:43.426 A:middle
pull down.

00:37:43.646 --> 00:37:45.926 A:middle
And I'll do it once again and

00:37:45.926 --> 00:37:47.286 A:middle
there the price of fries

00:37:47.286 --> 00:37:47.696 A:middle
changes.

00:37:48.516 --> 00:37:51.746 A:middle
[ Applause ]

00:37:52.246 --> 00:37:54.166 A:middle
So, that is WebSockets

00:37:54.386 --> 00:37:55.726 A:middle
bidirectional communication

00:37:55.726 --> 00:37:57.696 A:middle
without any HTTP overhead.

00:37:58.916 --> 00:38:00.766 A:middle
Some of you might be wondering

00:37:58.916 --> 00:38:00.766 A:middle
Some of you might be wondering

00:38:00.766 --> 00:38:02.366 A:middle
what the Stats button on the top

00:38:02.366 --> 00:38:02.926 A:middle
right is for.

00:38:03.376 --> 00:38:05.216 A:middle
If I click that, here are some

00:38:05.216 --> 00:38:06.446 A:middle
new statistics that we are

00:38:06.446 --> 00:38:07.866 A:middle
collecting through our

00:38:07.866 --> 00:38:09.886 A:middle
URLSession metrics API.

00:38:11.486 --> 00:38:13.216 A:middle
Additionally, at the bottom, RTT

00:38:13.216 --> 00:38:15.326 A:middle
is the round-trip time between

00:38:15.326 --> 00:38:17.006 A:middle
my client and my server that I'm

00:38:17.006 --> 00:38:19.116 A:middle
calculating using pings and

00:38:19.116 --> 00:38:20.256 A:middle
pongs in WebSockets.

00:38:21.126 --> 00:38:22.806 A:middle
I'm currently using Network Link

00:38:22.806 --> 00:38:24.906 A:middle
Conditioner to simulate a busy

00:38:24.906 --> 00:38:25.366 A:middle
bar environment.

00:38:25.366 --> 00:38:26.246 A:middle
You could use something like

00:38:26.246 --> 00:38:27.396 A:middle
this to monitor the health of

00:38:27.446 --> 00:38:29.126 A:middle
your connection between your

00:38:29.126 --> 00:38:29.866 A:middle
client and server.

00:38:30.886 --> 00:38:31.946 A:middle
If you are interested in knowing

00:38:31.946 --> 00:38:33.646 A:middle
more about the new properties

00:38:33.646 --> 00:38:35.966 A:middle
added to the metrics API or how

00:38:35.966 --> 00:38:37.686 A:middle
to use Network Link Conditioner,

00:38:37.946 --> 00:38:39.326 A:middle
please join us for the second

00:38:39.326 --> 00:38:40.836 A:middle
networking session at 5:00 p.m.

00:38:40.836 --> 00:38:41.116 A:middle
today.

00:38:42.266 --> 00:38:43.286 A:middle
Now, let's head back to our

00:38:43.286 --> 00:38:43.736 A:middle
slides.

00:38:47.496 --> 00:38:49.196 A:middle
Let's do a quick recap of

00:38:49.286 --> 00:38:51.706 A:middle
PubSocket+.

00:38:51.886 --> 00:38:53.406 A:middle
For our server, we used

00:38:53.406 --> 00:38:55.176 A:middle
NWListener with WebSocket

00:38:55.176 --> 00:38:56.486 A:middle
options set on the protocol

00:38:56.486 --> 00:38:56.836 A:middle
stack.

00:38:57.486 --> 00:38:59.846 A:middle
For a client, we used

00:38:59.846 --> 00:39:01.816 A:middle
URLSessionWebSocketTask to

00:38:59.846 --> 00:39:01.816 A:middle
URLSessionWebSocketTask to

00:39:01.816 --> 00:39:03.396 A:middle
connect to our server and read

00:39:03.396 --> 00:39:04.006 A:middle
messages.

00:39:04.006 --> 00:39:07.026 A:middle
For our transport, we used

00:39:07.026 --> 00:39:08.176 A:middle
bidirectional WebSocket

00:39:08.176 --> 00:39:08.736 A:middle
messages.

00:39:09.606 --> 00:39:11.076 A:middle
And finally, the advantage of

00:39:11.106 --> 00:39:12.496 A:middle
doing everything was

00:39:12.976 --> 00:39:14.556 A:middle
bidirectional messaging with

00:39:14.556 --> 00:39:18.586 A:middle
very little HTTP overhead.

00:39:18.706 --> 00:39:20.676 A:middle
Let's review the APIs available

00:39:20.676 --> 00:39:22.186 A:middle
for you to add WebSockets to

00:39:22.186 --> 00:39:23.026 A:middle
your apps today.

00:39:24.256 --> 00:39:26.136 A:middle
WebKit gives you the ability to

00:39:26.136 --> 00:39:28.266 A:middle
add WebSockets with the existing

00:39:28.266 --> 00:39:30.556 A:middle
JavaScript API in your web apps

00:39:30.556 --> 00:39:31.366 A:middle
and web views.

00:39:31.916 --> 00:39:34.626 A:middle
New this year,

00:39:34.626 --> 00:39:37.196 A:middle
URLSessionWebSocketTask built on

00:39:37.196 --> 00:39:39.376 A:middle
top of Network.framework plugs

00:39:39.376 --> 00:39:40.526 A:middle
into URLSession.

00:39:41.276 --> 00:39:42.976 A:middle
It works with your existing

00:39:42.976 --> 00:39:44.666 A:middle
URLSession configuration objects

00:39:44.896 --> 00:39:46.796 A:middle
and offers automatic cookie and

00:39:46.796 --> 00:39:47.836 A:middle
authentication support.

00:39:48.656 --> 00:39:50.896 A:middle
It also offers a convenient way

00:39:50.896 --> 00:39:52.736 A:middle
to measure round-trip time using

00:39:52.796 --> 00:39:53.746 A:middle
ping and pong handling.

00:39:55.606 --> 00:39:56.616 A:middle
Also new this year,

00:39:56.846 --> 00:39:58.226 A:middle
WebSocketSupport in

00:39:58.226 --> 00:39:59.686 A:middle
Network.framework through the

00:39:59.686 --> 00:40:01.546 A:middle
NWConnection and NWListener

00:39:59.686 --> 00:40:01.546 A:middle
NWConnection and NWListener

00:40:01.546 --> 00:40:04.086 A:middle
objects give you both client and

00:40:04.086 --> 00:40:04.836 A:middle
server support.

00:40:06.046 --> 00:40:07.916 A:middle
It gives you direct access to

00:40:07.966 --> 00:40:09.706 A:middle
complete and partial messages,

00:40:10.006 --> 00:40:11.726 A:middle
including ping and pong frames.

00:40:12.636 --> 00:40:14.076 A:middle
You can optionally set custom

00:40:14.076 --> 00:40:16.226 A:middle
headers like cookies or other

00:40:16.226 --> 00:40:17.846 A:middle
authentication headers through

00:40:17.846 --> 00:40:19.536 A:middle
the websocketOptions object.

00:40:20.806 --> 00:40:21.916 A:middle
We are happy to be opening up

00:40:21.916 --> 00:40:23.056 A:middle
this technology to all

00:40:23.056 --> 00:40:24.656 A:middle
developers and we're excited to

00:40:24.656 --> 00:40:25.836 A:middle
see what you do with this.

00:40:26.806 --> 00:40:28.116 A:middle
Next, I would like to invite

00:40:28.176 --> 00:40:29.776 A:middle
Christoph to talk about mobility

00:40:29.776 --> 00:40:30.456 A:middle
improvements.

00:40:31.516 --> 00:40:35.826 A:middle
[ Applause ]

00:40:36.326 --> 00:40:36.986 A:middle
&gt;&gt; Thank you, Jiten.

00:40:37.606 --> 00:40:39.276 A:middle
Hello everyone.

00:40:40.386 --> 00:40:41.766 A:middle
I am Christoph and I am going to

00:40:41.766 --> 00:40:43.726 A:middle
show you what mobility

00:40:43.726 --> 00:40:45.526 A:middle
improvements we did in iOS 13.

00:40:46.986 --> 00:40:50.006 A:middle
So, users are often experiencing

00:40:50.006 --> 00:40:50.276 A:middle
this.

00:40:50.556 --> 00:40:51.966 A:middle
When they are walking out of

00:40:51.966 --> 00:40:53.696 A:middle
their home, when they are far

00:40:53.696 --> 00:40:54.976 A:middle
away from their Wi-Fi access

00:40:54.976 --> 00:40:57.476 A:middle
point, the signal of Wi-Fi gets

00:40:57.476 --> 00:40:59.666 A:middle
worse and often the applications

00:40:59.666 --> 00:41:00.906 A:middle
become slower because the

00:40:59.666 --> 00:41:00.906 A:middle
become slower because the

00:41:00.906 --> 00:41:02.876 A:middle
networking becomes slower as

00:41:02.876 --> 00:41:03.056 A:middle
well.

00:41:03.736 --> 00:41:04.826 A:middle
Sometimes the applications

00:41:04.826 --> 00:41:05.576 A:middle
completely fail.

00:41:06.326 --> 00:41:08.136 A:middle
And so people have gotten used

00:41:08.136 --> 00:41:08.976 A:middle
to this that when they are

00:41:08.976 --> 00:41:10.136 A:middle
walking out of their home they

00:41:10.136 --> 00:41:11.706 A:middle
just swipe up to the Control

00:41:11.706 --> 00:41:13.546 A:middle
Center and turn off Wi-Fi.

00:41:14.986 --> 00:41:16.836 A:middle
Now, I am sure we have all

00:41:16.836 --> 00:41:18.206 A:middle
experienced this, right?

00:41:19.066 --> 00:41:21.556 A:middle
So, we want to change this.

00:41:22.326 --> 00:41:23.526 A:middle
We believe that users should

00:41:23.526 --> 00:41:25.116 A:middle
never have to turn off Wi-Fi

00:41:25.556 --> 00:41:26.576 A:middle
when they are walking out of

00:41:26.576 --> 00:41:26.976 A:middle
their home.

00:41:27.416 --> 00:41:28.056 A:middle
We believe that your

00:41:28.056 --> 00:41:29.576 A:middle
applications should just work

00:41:29.576 --> 00:41:31.396 A:middle
even when Wi-Fi is in a very bad

00:41:31.396 --> 00:41:31.906 A:middle
condition.

00:41:33.106 --> 00:41:34.536 A:middle
And I'm sure everybody here in

00:41:34.536 --> 00:41:36.616 A:middle
this room wants to achieve the

00:41:36.616 --> 00:41:37.136 A:middle
same goal.

00:41:38.026 --> 00:41:39.746 A:middle
So, let me show you how we can

00:41:39.746 --> 00:41:39.976 A:middle
get there.

00:41:44.536 --> 00:41:46.836 A:middle
This is the way we usually

00:41:46.836 --> 00:41:47.686 A:middle
represent Wi-Fi.

00:41:48.316 --> 00:41:50.016 A:middle
We have the Wi-Fi access point

00:41:50.016 --> 00:41:51.586 A:middle
in the middle, concentric

00:41:51.586 --> 00:41:54.096 A:middle
circles around it that show how

00:41:54.096 --> 00:41:55.706 A:middle
the Wi-Fi signal is gradually

00:41:55.706 --> 00:41:57.536 A:middle
fading away, getting weaker and

00:41:57.536 --> 00:41:59.366 A:middle
weaker as the phone gets farther

00:41:59.366 --> 00:42:00.166 A:middle
and farther away.

00:41:59.366 --> 00:42:00.166 A:middle
and farther away.

00:42:01.216 --> 00:42:02.666 A:middle
In this kind of scenario, it

00:42:02.666 --> 00:42:04.676 A:middle
would be very simple for a phone

00:42:04.676 --> 00:42:06.216 A:middle
to decide whether to use Wi-Fi

00:42:06.626 --> 00:42:07.886 A:middle
or switch over to cell.

00:42:08.656 --> 00:42:11.846 A:middle
Right? Now, the problem is that

00:42:12.166 --> 00:42:13.526 A:middle
this kind of representation of

00:42:13.526 --> 00:42:15.716 A:middle
how Wi-Fi looks is actually very

00:42:15.716 --> 00:42:16.986 A:middle
far away from reality.

00:42:17.796 --> 00:42:20.386 A:middle
In reality, it looks more like

00:42:22.216 --> 00:42:22.316 A:middle
this.

00:42:22.536 --> 00:42:23.856 A:middle
You have the Wi-Fi access point

00:42:23.856 --> 00:42:25.786 A:middle
in the middle and then a very

00:42:25.786 --> 00:42:27.636 A:middle
spotty Wi-Fi signal around it.

00:42:28.556 --> 00:42:29.826 A:middle
And the spottiness is because of

00:42:29.826 --> 00:42:31.246 A:middle
the objects in the room are

00:42:31.246 --> 00:42:32.656 A:middle
interfering with the signal.

00:42:33.316 --> 00:42:35.546 A:middle
The house, the walls, everything

00:42:35.546 --> 00:42:37.406 A:middle
is making the Wi-Fi signal a

00:42:37.406 --> 00:42:40.826 A:middle
very uncertain indicator of the

00:42:40.826 --> 00:42:41.366 A:middle
quality.

00:42:42.216 --> 00:42:43.766 A:middle
And a tiny little movement of

00:42:43.766 --> 00:42:45.186 A:middle
the phone could move the phone

00:42:45.186 --> 00:42:47.046 A:middle
from a good position to a bad

00:42:47.046 --> 00:42:47.566 A:middle
position.

00:42:48.486 --> 00:42:49.536 A:middle
So, for the phone, it's really

00:42:49.536 --> 00:42:51.296 A:middle
difficult to know whether Wi-Fi

00:42:51.296 --> 00:42:53.196 A:middle
is still good or bad.

00:42:53.546 --> 00:42:54.576 A:middle
It might still receive the

00:42:54.576 --> 00:42:56.186 A:middle
beacons from the access point,

00:42:56.756 --> 00:42:57.636 A:middle
but the signal might

00:42:57.636 --> 00:42:59.196 A:middle
nevertheless be too low to

00:42:59.256 --> 00:43:01.576 A:middle
actually send or receive any

00:42:59.256 --> 00:43:01.576 A:middle
actually send or receive any

00:43:01.576 --> 00:43:01.916 A:middle
data.

00:43:03.076 --> 00:43:04.906 A:middle
So, in this kind of environment,

00:43:05.366 --> 00:43:06.656 A:middle
the phone needs to decide

00:43:06.866 --> 00:43:08.676 A:middle
whether to use Wi-Fi or whether

00:43:08.676 --> 00:43:09.246 A:middle
to use cell.

00:43:10.236 --> 00:43:11.726 A:middle
It's this uncertainty around the

00:43:11.726 --> 00:43:13.596 A:middle
Wi-Fi signal that is the whole

00:43:13.596 --> 00:43:15.146 A:middle
challenge around mobility.

00:43:17.696 --> 00:43:20.936 A:middle
So, at Apple, we have been aware

00:43:20.936 --> 00:43:22.106 A:middle
of this problem for quite a

00:43:22.106 --> 00:43:24.526 A:middle
while and I will show you how in

00:43:24.526 --> 00:43:27.456 A:middle
the past we have done many steps

00:43:27.456 --> 00:43:28.416 A:middle
to improve this kind of

00:43:28.416 --> 00:43:28.966 A:middle
scenario.

00:43:28.966 --> 00:43:32.696 A:middle
All of it started back in iOS 7

00:43:33.156 --> 00:43:33.706 A:middle
with Siri.

00:43:36.156 --> 00:43:38.066 A:middle
In iOS 7, we introduced

00:43:38.066 --> 00:43:39.766 A:middle
Multipath TCP for Siri.

00:43:40.516 --> 00:43:42.056 A:middle
Multipath TCP allows to use

00:43:42.056 --> 00:43:43.996 A:middle
Wi-Fi and cell at the same time.

00:43:44.496 --> 00:43:46.656 A:middle
So, starting in iOS 7, whenever

00:43:46.716 --> 00:43:48.226 A:middle
people are using Siri and

00:43:48.226 --> 00:43:49.366 A:middle
walking out of their home,

00:43:50.276 --> 00:43:52.276 A:middle
Multipath TCP will make sure

00:43:52.276 --> 00:43:53.426 A:middle
that the traffic goes either

00:43:53.426 --> 00:43:56.556 A:middle
Wi-Fi over cell, reducing the

00:43:56.556 --> 00:43:58.846 A:middle
latency for Siri users and

00:43:58.846 --> 00:44:00.046 A:middle
reducing the error rates.

00:43:58.846 --> 00:44:00.046 A:middle
reducing the error rates.

00:44:01.316 --> 00:44:03.556 A:middle
We are seeing great results

00:44:03.776 --> 00:44:05.136 A:middle
thank to Multipath TCP.

00:44:06.346 --> 00:44:08.656 A:middle
Now, a real end-to-end multipath

00:44:08.836 --> 00:44:12.376 A:middle
protocol, like Multipath TCP,

00:44:12.376 --> 00:44:14.466 A:middle
requires both the client and the

00:44:14.466 --> 00:44:15.896 A:middle
server to be aware of it.

00:44:16.546 --> 00:44:17.986 A:middle
Both need to work together,

00:44:18.646 --> 00:44:18.926 A:middle
right?

00:44:19.236 --> 00:44:20.586 A:middle
They need to work together to

00:44:20.586 --> 00:44:21.776 A:middle
decide whether to send the

00:44:21.776 --> 00:44:23.516 A:middle
traffic on Wi-Fi or on cell.

00:44:24.566 --> 00:44:26.866 A:middle
And so we asked ourselves how

00:44:26.866 --> 00:44:29.436 A:middle
can we improve mobility without

00:44:29.436 --> 00:44:31.896 A:middle
having both the client and the

00:44:31.896 --> 00:44:33.586 A:middle
server have to work together

00:44:34.436 --> 00:44:36.306 A:middle
without requiring the need to

00:44:36.356 --> 00:44:37.186 A:middle
modify the server

00:44:37.186 --> 00:44:38.056 A:middle
configurations.

00:44:39.366 --> 00:44:41.126 A:middle
And the answer came two years

00:44:41.126 --> 00:44:42.786 A:middle
later in iOS 9 with Wi-Fi

00:44:42.786 --> 00:44:43.266 A:middle
Assist.

00:44:43.796 --> 00:44:47.516 A:middle
Wi-Fi Assist handles mobility

00:44:47.516 --> 00:44:49.536 A:middle
for all applications, for all

00:44:49.536 --> 00:44:51.226 A:middle
flows, talking to any server.

00:44:51.226 --> 00:44:53.986 A:middle
And the way it does it is by

00:44:53.986 --> 00:44:56.216 A:middle
first starting on Wi-Fi and when

00:44:56.216 --> 00:44:57.596 A:middle
the signal is bad and the

00:44:57.596 --> 00:44:59.326 A:middle
connection doesn't, manages to

00:44:59.326 --> 00:45:00.786 A:middle
get established quickly enough,

00:44:59.326 --> 00:45:00.786 A:middle
get established quickly enough,

00:45:01.256 --> 00:45:02.406 A:middle
we will just raise another

00:45:02.406 --> 00:45:05.796 A:middle
connection over the cellular

00:45:05.866 --> 00:45:06.306 A:middle
link.

00:45:06.696 --> 00:45:08.406 A:middle
Since iOS 9, since we are--

00:45:08.406 --> 00:45:09.666 A:middle
since we introduced Wi-Fi

00:45:09.666 --> 00:45:11.456 A:middle
Assist, all of your applications

00:45:12.176 --> 00:45:13.506 A:middle
that are using the high-level

00:45:13.506 --> 00:45:14.976 A:middle
APIs can benefit from Wi-Fi

00:45:14.976 --> 00:45:17.566 A:middle
Assist and are having a much

00:45:17.606 --> 00:45:18.876 A:middle
better experience when the user

00:45:18.876 --> 00:45:19.346 A:middle
is mobile.

00:45:19.346 --> 00:45:21.916 A:middle
And this works for any server

00:45:22.246 --> 00:45:24.306 A:middle
talking to any servers on the

00:45:24.306 --> 00:45:24.726 A:middle
internet.

00:45:26.626 --> 00:45:28.186 A:middle
Now, Wi-Fi Assist might still

00:45:28.186 --> 00:45:30.276 A:middle
get stuck on Wi-Fi, if for

00:45:30.276 --> 00:45:31.556 A:middle
example the connection managed

00:45:31.556 --> 00:45:33.286 A:middle
to get established, but then the

00:45:33.286 --> 00:45:34.966 A:middle
signal degraded afterwards.

00:45:35.426 --> 00:45:37.256 A:middle
And those flows would then still

00:45:37.256 --> 00:45:37.676 A:middle
be stuck.

00:45:38.156 --> 00:45:39.416 A:middle
In order to handle those kind of

00:45:39.416 --> 00:45:42.016 A:middle
scenarios better, one still

00:45:42.016 --> 00:45:43.856 A:middle
needs real end-to-end multipath,

00:45:44.306 --> 00:45:45.496 A:middle
the same way as we have it for

00:45:45.496 --> 00:45:45.836 A:middle
Siri.

00:45:46.766 --> 00:45:48.466 A:middle
So, after four years of

00:45:48.466 --> 00:45:52.096 A:middle
experience with Multipath TCP

00:45:52.096 --> 00:45:54.616 A:middle
for Siri, we decided to open up

00:45:54.616 --> 00:45:55.736 A:middle
the API for every one of you.

00:45:56.616 --> 00:45:58.776 A:middle
So, since iOS 11, you can start

00:45:58.776 --> 00:46:00.616 A:middle
using the handover or

00:45:58.776 --> 00:46:00.616 A:middle
using the handover or

00:46:00.616 --> 00:46:02.886 A:middle
interactive mode in URLSession

00:46:03.276 --> 00:46:04.336 A:middle
or the Network.framework.

00:46:05.426 --> 00:46:07.076 A:middle
So, when you are able to make

00:46:07.076 --> 00:46:07.976 A:middle
sure that your servers are

00:46:07.976 --> 00:46:09.946 A:middle
ready, you can enable Multipath

00:46:09.946 --> 00:46:11.626 A:middle
TCP and get the same benefits as

00:46:11.626 --> 00:46:11.966 A:middle
Siri.

00:46:13.456 --> 00:46:15.836 A:middle
So, in each of those releases,

00:46:16.036 --> 00:46:19.596 A:middle
iOS 7, iOS 9, iOS 11, we focused

00:46:19.596 --> 00:46:21.786 A:middle
on one specific area to improve

00:46:21.786 --> 00:46:22.366 A:middle
mobility.

00:46:23.876 --> 00:46:25.736 A:middle
We focused on Multipath TCP, we

00:46:25.736 --> 00:46:27.526 A:middle
focused on Siri, we focused on

00:46:27.526 --> 00:46:28.416 A:middle
Wi-Fi Assist.

00:46:29.356 --> 00:46:31.166 A:middle
And now comes iOS 13.

00:46:32.326 --> 00:46:34.906 A:middle
And in iOS 13, we improved so

00:46:34.906 --> 00:46:36.986 A:middle
many things they don't even fit

00:46:36.986 --> 00:46:38.116 A:middle
on this slide anymore.

00:46:40.086 --> 00:46:43.436 A:middle
In iOS 13, the mobility

00:46:43.436 --> 00:46:44.976 A:middle
improvements-- thank you.

00:46:45.516 --> 00:46:48.276 A:middle
[ Applause ]

00:46:48.776 --> 00:46:49.146 A:middle
Thank you.

00:46:49.276 --> 00:46:50.866 A:middle
In iOS 13, the mobility

00:46:50.866 --> 00:46:52.276 A:middle
improvements go throughout the

00:46:52.276 --> 00:46:52.966 A:middle
whole system.

00:46:53.756 --> 00:46:55.206 A:middle
Many different frameworks,

00:46:55.316 --> 00:46:57.626 A:middle
daemons, applications, from the

00:46:57.626 --> 00:46:59.016 A:middle
firmware to the driver.

00:46:59.696 --> 00:47:01.656 A:middle
Everything is now improved for

00:46:59.696 --> 00:47:01.656 A:middle
Everything is now improved for

00:47:01.656 --> 00:47:02.226 A:middle
mobility.

00:47:02.546 --> 00:47:04.256 A:middle
And in this part of the session,

00:47:04.436 --> 00:47:05.836 A:middle
I am going to talk about two of

00:47:05.836 --> 00:47:08.206 A:middle
them; Wi-Fi Assist and Multipath

00:47:08.206 --> 00:47:09.526 A:middle
Transports.

00:47:10.816 --> 00:47:13.716 A:middle
So, first up, Wi-Fi Assist.

00:47:14.636 --> 00:47:16.746 A:middle
Traditionally, Wi-Fi assist has

00:47:16.746 --> 00:47:18.656 A:middle
only been taking very limited

00:47:18.656 --> 00:47:20.356 A:middle
amount of information into

00:47:20.356 --> 00:47:22.536 A:middle
account to decide whether Wi-Fi

00:47:22.536 --> 00:47:23.266 A:middle
is good enough.

00:47:24.376 --> 00:47:26.596 A:middle
Now in iOS 13, we changed that.

00:47:27.946 --> 00:47:30.046 A:middle
We made it such that all

00:47:30.046 --> 00:47:31.766 A:middle
components in the system are

00:47:31.766 --> 00:47:33.476 A:middle
providing information into Wi-Fi

00:47:33.476 --> 00:47:35.526 A:middle
Assist so that Wi-Fi Assist has

00:47:35.526 --> 00:47:36.926 A:middle
a full cross-layer mobility

00:47:36.926 --> 00:47:37.396 A:middle
detection.

00:47:38.526 --> 00:47:40.316 A:middle
The lower layers, Wi-Fi and

00:47:40.316 --> 00:47:41.716 A:middle
cell, are providing information

00:47:41.716 --> 00:47:43.656 A:middle
about the signal quality in a

00:47:43.656 --> 00:47:45.256 A:middle
much fine-- more fine-grained

00:47:45.256 --> 00:47:47.236 A:middle
way than in iOS 12.

00:47:48.306 --> 00:47:49.526 A:middle
And also, the higher-layer

00:47:49.626 --> 00:47:50.476 A:middle
frameworks like

00:47:50.616 --> 00:47:52.596 A:middle
Network.framework, URLSession,

00:47:53.116 --> 00:47:54.516 A:middle
other daemons of the system,

00:47:54.736 --> 00:47:55.596 A:middle
they are all providing

00:47:55.596 --> 00:47:57.166 A:middle
information into Wi-Fi Assist

00:47:57.636 --> 00:47:59.266 A:middle
about how their flows are making

00:47:59.266 --> 00:47:59.826 A:middle
progress.

00:48:00.666 --> 00:48:02.796 A:middle
All of this information going

00:48:02.796 --> 00:48:04.206 A:middle
into Wi-Fi Assist will then

00:48:04.206 --> 00:48:06.136 A:middle
allow it to detect whether we

00:48:06.136 --> 00:48:08.076 A:middle
are in a mobility scenario or

00:48:08.076 --> 00:48:09.526 A:middle
not and whether we should maybe

00:48:09.526 --> 00:48:10.796 A:middle
start trying to use cell.

00:48:11.776 --> 00:48:13.416 A:middle
So, all of this information,

00:48:13.746 --> 00:48:15.086 A:middle
then Wi-Fi Assist is going to

00:48:15.086 --> 00:48:17.786 A:middle
take its decisions and feeds it

00:48:17.786 --> 00:48:19.106 A:middle
back into the system.

00:48:19.546 --> 00:48:21.326 A:middle
It tells the lower layers, Wi-Fi

00:48:21.326 --> 00:48:23.106 A:middle
and cell, to make efforts to

00:48:23.106 --> 00:48:24.346 A:middle
improve the signal quality.

00:48:25.246 --> 00:48:27.046 A:middle
And it also communicates to the

00:48:27.046 --> 00:48:27.936 A:middle
other layers like

00:48:28.406 --> 00:48:29.986 A:middle
Network.framework and URLSession

00:48:30.076 --> 00:48:31.406 A:middle
to start recovering flows.

00:48:31.406 --> 00:48:34.946 A:middle
All of this leads to a much

00:48:34.946 --> 00:48:36.306 A:middle
improved flow recovery.

00:48:37.796 --> 00:48:39.896 A:middle
Now, even when a flow has

00:48:39.896 --> 00:48:40.886 A:middle
already been established on

00:48:40.886 --> 00:48:42.416 A:middle
Wi-Fi and has started to

00:48:42.416 --> 00:48:44.936 A:middle
exchange data, if later on the

00:48:44.936 --> 00:48:47.636 A:middle
signal quality is reducing, we

00:48:47.636 --> 00:48:49.466 A:middle
are able to move the next

00:48:49.466 --> 00:48:50.786 A:middle
request that would have been

00:48:50.786 --> 00:48:53.396 A:middle
used on Wi-Fi, we are able to

00:48:53.396 --> 00:48:54.796 A:middle
move that one over to cell.

00:48:55.796 --> 00:48:57.476 A:middle
So, your applications should now

00:48:57.476 --> 00:48:59.246 A:middle
much less be getting stuck on

00:48:59.246 --> 00:48:59.686 A:middle
Wi-Fi.

00:49:00.286 --> 00:49:03.306 A:middle
Now, the question for you, of

00:49:03.306 --> 00:49:04.976 A:middle
course, is how can you get the

00:49:04.976 --> 00:49:06.676 A:middle
benefits from Wi-Fi Assist?

00:49:07.236 --> 00:49:08.366 A:middle
How can you get the benefits

00:49:08.366 --> 00:49:09.536 A:middle
from all the improvements that

00:49:09.536 --> 00:49:10.886 A:middle
we did in iOS 13?

00:49:12.346 --> 00:49:14.756 A:middle
So, first of all, the way you

00:49:14.756 --> 00:49:16.096 A:middle
can get them is by using the

00:49:16.096 --> 00:49:18.356 A:middle
high-level APIs like URLSession

00:49:18.356 --> 00:49:19.306 A:middle
and Network.framework.

00:49:20.206 --> 00:49:22.276 A:middle
All of these APIs have been

00:49:22.276 --> 00:49:23.886 A:middle
built with Wi-Fi Assist in mind

00:49:24.846 --> 00:49:25.746 A:middle
and they are getting the full

00:49:25.746 --> 00:49:26.586 A:middle
benefit from it.

00:49:27.396 --> 00:49:28.656 A:middle
So, make sure that your

00:49:28.656 --> 00:49:30.906 A:middle
applications are using those

00:49:32.526 --> 00:49:32.656 A:middle
APIs.

00:49:33.706 --> 00:49:36.966 A:middle
Next up, some of you are doing

00:49:36.966 --> 00:49:39.566 A:middle
active interface management with

00:49:39.566 --> 00:49:41.896 A:middle
APIs like SCNetworkReachability.

00:49:42.686 --> 00:49:43.996 A:middle
You are maybe doing pre-flight

00:49:43.996 --> 00:49:45.896 A:middle
checks to know where is your

00:49:46.016 --> 00:49:47.506 A:middle
request going to end up on.

00:49:47.506 --> 00:49:49.156 A:middle
Is it going to go on Wi-Fi or on

00:49:49.156 --> 00:49:49.476 A:middle
cell?

00:49:50.606 --> 00:49:51.666 A:middle
The problem with those

00:49:51.666 --> 00:49:53.766 A:middle
pre-flight checks is that when

00:49:53.766 --> 00:49:55.906 A:middle
you do it and the moment when

00:49:55.906 --> 00:49:57.326 A:middle
you actually use the connection,

00:49:58.816 --> 00:49:59.716 A:middle
the interface might have

00:49:59.776 --> 00:50:00.196 A:middle
changed.

00:49:59.776 --> 00:50:00.196 A:middle
changed.

00:50:00.316 --> 00:50:02.136 A:middle
Wi-Fi Assist might have decided

00:50:02.136 --> 00:50:03.396 A:middle
to actually send your flow over

00:50:03.396 --> 00:50:05.256 A:middle
to cell or Wi-Fi might have

00:50:05.346 --> 00:50:06.456 A:middle
significantly improved.

00:50:06.946 --> 00:50:08.806 A:middle
So, the pre-flight check is a

00:50:08.806 --> 00:50:10.636 A:middle
very bad indicator of where your

00:50:10.636 --> 00:50:11.966 A:middle
flow is going to end up on.

00:50:12.506 --> 00:50:14.696 A:middle
So, we encourage you to rethink

00:50:14.696 --> 00:50:16.166 A:middle
your usage of the pre-flight

00:50:16.166 --> 00:50:18.796 A:middle
checks and come talk to us later

00:50:18.796 --> 00:50:20.326 A:middle
in the labs about why you need

00:50:20.326 --> 00:50:22.286 A:middle
it and we will work with you to

00:50:22.286 --> 00:50:24.246 A:middle
find an alternative.

00:50:25.806 --> 00:50:28.656 A:middle
Now, if you still need to steer

00:50:28.756 --> 00:50:30.316 A:middle
flows, for example, away from

00:50:30.316 --> 00:50:32.216 A:middle
cell because, for example, the

00:50:32.216 --> 00:50:34.936 A:middle
data transfer is way too big or

00:50:34.936 --> 00:50:36.966 A:middle
the traffic is not critical for

00:50:36.966 --> 00:50:39.146 A:middle
the user experience, you can use

00:50:39.146 --> 00:50:40.206 A:middle
helpers like

00:50:40.296 --> 00:50:42.396 A:middle
allowsExpensiveNetworkAccess and

00:50:42.396 --> 00:50:43.346 A:middle
set them to false.

00:50:43.946 --> 00:50:46.116 A:middle
That way, your request is not

00:50:46.116 --> 00:50:47.956 A:middle
going to go on the cellular

00:50:48.416 --> 00:50:48.546 A:middle
link.

00:50:50.176 --> 00:50:53.076 A:middle
So, this is Wi-Fi Assist and we

00:50:53.076 --> 00:50:54.486 A:middle
made a lot of efforts to make it

00:50:54.486 --> 00:50:56.616 A:middle
even better in iOS 13 and you

00:50:56.616 --> 00:50:59.066 A:middle
can get the benefits by using

00:50:59.066 --> 00:51:01.356 A:middle
the high-level APIs.

00:50:59.066 --> 00:51:01.356 A:middle
the high-level APIs.

00:51:01.356 --> 00:51:02.856 A:middle
This brings me to the next one,

00:51:03.186 --> 00:51:04.696 A:middle
which is Multipath Transports.

00:51:07.296 --> 00:51:09.716 A:middle
Siri has been using it for quite

00:51:09.716 --> 00:51:10.306 A:middle
a while now.

00:51:10.676 --> 00:51:12.366 A:middle
We have opened up the API two

00:51:12.366 --> 00:51:15.416 A:middle
years ago and we have encouraged

00:51:15.416 --> 00:51:18.336 A:middle
you to look into your apps and

00:51:18.336 --> 00:51:19.776 A:middle
see which of your flows might

00:51:19.776 --> 00:51:22.966 A:middle
benefit the most from Multipath

00:51:23.616 --> 00:51:23.716 A:middle
TCP.

00:51:23.926 --> 00:51:26.326 A:middle
So, this year in iOS 13, we ran

00:51:26.326 --> 00:51:27.946 A:middle
this well and looked into our

00:51:27.946 --> 00:51:31.246 A:middle
own apps and decided to see

00:51:31.556 --> 00:51:33.126 A:middle
which one is going to benefit

00:51:33.126 --> 00:51:34.266 A:middle
from Multipath TCP.

00:51:34.936 --> 00:51:36.196 A:middle
Which one is often used when

00:51:36.196 --> 00:51:37.736 A:middle
mobile and has a very critical

00:51:37.736 --> 00:51:39.046 A:middle
flow for the user experience

00:51:39.046 --> 00:51:40.206 A:middle
that is hard to recover?

00:51:41.256 --> 00:51:43.266 A:middle
Well, one application is Apple

00:51:43.266 --> 00:51:43.796 A:middle
Maps.

00:51:44.576 --> 00:51:46.306 A:middle
Most users, well, when they are

00:51:46.306 --> 00:51:47.666 A:middle
getting their directions, they

00:51:47.666 --> 00:51:48.816 A:middle
are walking out of their home

00:51:49.336 --> 00:51:50.526 A:middle
and they are using search.

00:51:50.956 --> 00:51:53.226 A:middle
So, in iOS 13, we enabled

00:51:53.226 --> 00:51:54.976 A:middle
Multipath TCP for Apple Maps.

00:51:55.516 --> 00:51:59.716 A:middle
[ Applause ]

00:52:00.216 --> 00:52:01.806 A:middle
Now, whenever you are walking

00:52:01.806 --> 00:52:03.576 A:middle
out of the home and using Maps,

00:52:03.876 --> 00:52:05.846 A:middle
looking up your directions,

00:52:05.916 --> 00:52:07.346 A:middle
trying to search a restaurant,

00:52:08.266 --> 00:52:10.016 A:middle
MP TCP will be used and move

00:52:10.016 --> 00:52:11.316 A:middle
your flow over from Wi-Fi to

00:52:11.316 --> 00:52:11.616 A:middle
cell.

00:52:12.456 --> 00:52:14.666 A:middle
And since Monday, since the

00:52:14.666 --> 00:52:15.836 A:middle
first beta, we have been

00:52:15.836 --> 00:52:17.846 A:middle
enabling it and we are going to

00:52:17.846 --> 00:52:19.506 A:middle
see a much better responsiveness

00:52:19.506 --> 00:52:20.286 A:middle
for Apple Maps.

00:52:22.086 --> 00:52:24.386 A:middle
The next one where we are having

00:52:24.386 --> 00:52:26.666 A:middle
a very critical user experience

00:52:27.326 --> 00:52:29.236 A:middle
and that is also often used when

00:52:29.236 --> 00:52:30.916 A:middle
walking out of the home is when

00:52:30.916 --> 00:52:31.856 A:middle
you are streaming music.

00:52:32.416 --> 00:52:33.616 A:middle
Right? When you are streaming

00:52:33.616 --> 00:52:34.796 A:middle
music, you are downloading a

00:52:34.796 --> 00:52:38.006 A:middle
large file full of music content

00:52:38.326 --> 00:52:40.286 A:middle
and you don't want this music to

00:52:40.286 --> 00:52:40.696 A:middle
stall.

00:52:41.116 --> 00:52:42.286 A:middle
Because when it stalls, the user

00:52:42.286 --> 00:52:43.646 A:middle
will be disrupted.

00:52:44.616 --> 00:52:46.836 A:middle
So, since iOS 13, we enabled

00:52:46.836 --> 00:52:48.716 A:middle
Multipath TCP for Apple Music.

00:52:49.516 --> 00:52:53.866 A:middle
[ Applause ]

00:52:54.366 --> 00:52:56.026 A:middle
We are seeing much less music

00:52:56.026 --> 00:52:58.616 A:middle
streaming stalls because MP TCP

00:52:58.616 --> 00:53:00.596 A:middle
is now moving flows over to cell

00:52:58.616 --> 00:53:00.596 A:middle
is now moving flows over to cell

00:53:00.846 --> 00:53:02.206 A:middle
whenever we are getting close to

00:53:02.206 --> 00:53:02.806 A:middle
stalling.

00:53:03.616 --> 00:53:05.466 A:middle
And so the user is going to have

00:53:05.466 --> 00:53:06.666 A:middle
a much better experience.

00:53:07.266 --> 00:53:09.916 A:middle
Now, the thing about this, we

00:53:09.916 --> 00:53:11.816 A:middle
have enabled it for Siri, Maps,

00:53:11.876 --> 00:53:14.316 A:middle
and Music, and you can do this

00:53:14.316 --> 00:53:14.576 A:middle
too.

00:53:15.646 --> 00:53:17.536 A:middle
We recommend-- we encourage you

00:53:17.536 --> 00:53:19.146 A:middle
to look into your applications.

00:53:19.286 --> 00:53:20.566 A:middle
Which one is often used when

00:53:20.566 --> 00:53:21.646 A:middle
walking out of the home?

00:53:22.516 --> 00:53:24.746 A:middle
Which one has a very critical

00:53:24.746 --> 00:53:26.266 A:middle
flow that is critical for the

00:53:26.266 --> 00:53:27.676 A:middle
user experience and that is hard

00:53:27.676 --> 00:53:28.256 A:middle
to recover?

00:53:29.146 --> 00:53:30.376 A:middle
Those kind of flows, they are

00:53:30.376 --> 00:53:31.676 A:middle
perfect for the multipath

00:53:31.676 --> 00:53:33.316 A:middle
service type and you can choose

00:53:33.316 --> 00:53:35.056 A:middle
them on handover or interactive

00:53:35.516 --> 00:53:36.736 A:middle
in the URLSession and

00:53:36.736 --> 00:53:37.516 A:middle
Network.framework.

00:53:38.696 --> 00:53:40.966 A:middle
Now, don't forget, if you do

00:53:40.966 --> 00:53:42.596 A:middle
enter in multipath, it still

00:53:42.596 --> 00:53:44.446 A:middle
requires both the client and the

00:53:44.446 --> 00:53:47.046 A:middle
server to work together, so go

00:53:47.046 --> 00:53:49.076 A:middle
and visit this URL to make sure

00:53:49.076 --> 00:53:50.306 A:middle
that your servers are configured

00:53:50.306 --> 00:53:50.776 A:middle
correctly.

00:53:52.796 --> 00:53:56.566 A:middle
So, this brings me to the end of

00:53:56.626 --> 00:53:58.136 A:middle
the mobility part of this

00:53:58.136 --> 00:53:58.466 A:middle
session.

00:53:59.976 --> 00:54:01.146 A:middle
If there is one thing that we

00:53:59.976 --> 00:54:01.146 A:middle
If there is one thing that we

00:54:01.146 --> 00:54:02.866 A:middle
want you to remember, it's that

00:54:03.626 --> 00:54:05.886 A:middle
whenever a user is walking out

00:54:05.886 --> 00:54:07.586 A:middle
of their home, he should not

00:54:07.676 --> 00:54:09.256 A:middle
have a bad experience and turn

00:54:09.256 --> 00:54:09.846 A:middle
off Wi-Fi.

00:54:10.786 --> 00:54:13.416 A:middle
So, when you are developing your

00:54:13.416 --> 00:54:14.666 A:middle
applications, when you are

00:54:14.666 --> 00:54:16.716 A:middle
testing them and you are

00:54:16.716 --> 00:54:19.336 A:middle
configuring a bad Wi-Fi network

00:54:19.336 --> 00:54:20.316 A:middle
and you are walking out of the

00:54:20.316 --> 00:54:22.266 A:middle
home while testing it, don't

00:54:22.266 --> 00:54:23.416 A:middle
expect your applications to

00:54:23.416 --> 00:54:25.556 A:middle
become slow, to fail, or your

00:54:25.556 --> 00:54:28.746 A:middle
flows to basically-- to take

00:54:28.746 --> 00:54:29.156 A:middle
forever.

00:54:29.916 --> 00:54:31.256 A:middle
It should, in principle, just

00:54:31.256 --> 00:54:31.476 A:middle
work.

00:54:31.956 --> 00:54:33.996 A:middle
If it doesn't, make sure that

00:54:33.996 --> 00:54:35.106 A:middle
those flows that have been

00:54:35.106 --> 00:54:37.266 A:middle
failing are using the high-level

00:54:37.586 --> 00:54:37.736 A:middle
APIs.

00:54:38.026 --> 00:54:39.356 A:middle
These APIs are getting the full

00:54:39.356 --> 00:54:41.356 A:middle
benefit from Wi-Fi Assist from

00:54:41.356 --> 00:54:42.856 A:middle
all the improvements that we did

00:54:42.856 --> 00:54:43.806 A:middle
in iOS 13.

00:54:44.376 --> 00:54:46.576 A:middle
If you are doing active

00:54:46.606 --> 00:54:48.826 A:middle
interface management, come talk

00:54:48.826 --> 00:54:50.726 A:middle
to us in the lab or send us an

00:54:50.726 --> 00:54:51.726 A:middle
Apple Bug Report.

00:54:52.296 --> 00:54:53.846 A:middle
Tell us about your use case and

00:54:53.846 --> 00:54:55.086 A:middle
we will work together with you

00:54:55.086 --> 00:54:57.056 A:middle
to find an alternative so that

00:54:57.516 --> 00:55:00.226 A:middle
you can avoid doing this active

00:54:57.516 --> 00:55:00.226 A:middle
you can avoid doing this active

00:55:00.226 --> 00:55:01.736 A:middle
interface management and get the

00:55:01.736 --> 00:55:03.666 A:middle
full benefits from Wi-Fi assist.

00:55:04.206 --> 00:55:07.026 A:middle
And, finally, if you have flows

00:55:07.026 --> 00:55:08.146 A:middle
that are still getting stuck on

00:55:08.146 --> 00:55:09.826 A:middle
Wi-Fi and that are hard to

00:55:09.826 --> 00:55:12.756 A:middle
recover, try to see if you can

00:55:12.756 --> 00:55:14.266 A:middle
start using a multipath service

00:55:14.266 --> 00:55:16.006 A:middle
type, get your servers ready,

00:55:16.006 --> 00:55:17.956 A:middle
and get the same benefits as

00:55:17.956 --> 00:55:20.056 A:middle
Apple Music, Maps, and Siri.

00:55:20.556 --> 00:55:22.506 A:middle
So, this is the end of this part

00:55:22.506 --> 00:55:23.186 A:middle
of the session.

00:55:24.126 --> 00:55:25.336 A:middle
We have seen that with the Low

00:55:25.336 --> 00:55:28.196 A:middle
Data Mode users can now turn on

00:55:28.196 --> 00:55:29.816 A:middle
marked networks so that they

00:55:29.816 --> 00:55:31.706 A:middle
reduce the data usage on those

00:55:31.706 --> 00:55:32.206 A:middle
networks.

00:55:32.696 --> 00:55:34.906 A:middle
We have exposed a new API so

00:55:34.906 --> 00:55:36.616 A:middle
that your applications can

00:55:36.616 --> 00:55:37.726 A:middle
benefit from it as well.

00:55:38.276 --> 00:55:41.246 A:middle
If you are building a publisher

00:55:41.246 --> 00:55:43.036 A:middle
subscriber style application,

00:55:43.766 --> 00:55:45.496 A:middle
Combine in URLSession allows you

00:55:45.496 --> 00:55:47.136 A:middle
to build you a very elegant app,

00:55:47.746 --> 00:55:49.386 A:middle
the same way as Guoye has shown

00:55:49.386 --> 00:55:49.936 A:middle
you today.

00:55:50.676 --> 00:55:52.706 A:middle
Finally, WebSockets.

00:55:53.106 --> 00:55:54.366 A:middle
It has been the most requested

00:55:54.406 --> 00:55:57.026 A:middle
feature is making it into iOS 13

00:55:57.596 --> 00:55:59.396 A:middle
and so you can easily build

00:55:59.396 --> 00:56:01.066 A:middle
two-way communications into your

00:55:59.396 --> 00:56:01.066 A:middle
two-way communications into your

00:56:01.066 --> 00:56:01.876 A:middle
applications.

00:56:02.436 --> 00:56:05.996 A:middle
And, in iOS 13, we did a huge

00:56:05.996 --> 00:56:08.486 A:middle
push to improve the mobility for

00:56:08.636 --> 00:56:11.306 A:middle
your applications so you can get

00:56:11.306 --> 00:56:12.986 A:middle
the same benefits by using the

00:56:12.986 --> 00:56:14.746 A:middle
high-level APIs.

00:56:15.816 --> 00:56:18.796 A:middle
So, later this afternoon, there

00:56:18.796 --> 00:56:20.446 A:middle
is a part two of the Advances in

00:56:20.446 --> 00:56:21.346 A:middle
Networking session.

00:56:21.836 --> 00:56:23.216 A:middle
You will be seeing more exciting

00:56:23.216 --> 00:56:25.396 A:middle
new APIs that will benefit your

00:56:25.396 --> 00:56:26.016 A:middle
applications.

00:56:26.836 --> 00:56:28.216 A:middle
Tomorrow, for those among you

00:56:28.216 --> 00:56:30.496 A:middle
that are developing on macOS,

00:56:30.906 --> 00:56:32.466 A:middle
there are new APIs for network

00:56:32.466 --> 00:56:35.046 A:middle
extensions, and we also have the

00:56:35.046 --> 00:56:36.636 A:middle
lab at 9:00 a.m. starting at

00:56:36.636 --> 00:56:38.016 A:middle
9:00 a.m. tomorrow and you can

00:56:38.016 --> 00:56:39.626 A:middle
come there to ask us questions

00:56:40.086 --> 00:56:41.586 A:middle
and we will be very happy to

00:56:41.586 --> 00:56:44.006 A:middle
help you out.

00:56:44.286 --> 00:56:45.676 A:middle
So, this is the end.

00:56:45.776 --> 00:56:46.986 A:middle
I hope you had fun and you

00:56:46.986 --> 00:56:47.906 A:middle
enjoyed the session.

00:56:50.046 --> 00:56:50.516 A:middle
Thank you very much.

00:56:51.508 --> 00:56:53.508 A:middle
[ Applause ]
