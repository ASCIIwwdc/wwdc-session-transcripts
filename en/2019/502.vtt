WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:12.666 --> 00:00:13.676 A:middle
&gt;&gt; Hey [applause].

00:00:14.926 --> 00:00:16.065 A:middle
Good afternoon.

00:00:16.946 --> 00:00:18.136 A:middle
Good afternoon, everyone.

00:00:19.396 --> 00:00:21.976 A:middle
My name is Roger Pantos and our

00:00:22.206 --> 00:00:24.566 A:middle
HLS session this year is all

00:00:24.566 --> 00:00:26.816 A:middle
focused on Low-Latency.

00:00:27.546 --> 00:00:32.006 A:middle
So, first of all, what is this

00:00:32.006 --> 00:00:33.416 A:middle
latency thing we're talking

00:00:33.416 --> 00:00:35.026 A:middle
about when we say low-latency?

00:00:36.606 --> 00:00:39.796 A:middle
Well, in this context, it refers

00:00:39.796 --> 00:00:41.786 A:middle
to the amount of time from when

00:00:41.906 --> 00:00:43.256 A:middle
a camera records a frame of

00:00:43.256 --> 00:00:44.856 A:middle
video or hits your production

00:00:44.856 --> 00:00:45.546 A:middle
backend.

00:00:46.036 --> 00:00:48.296 A:middle
And when your user, sees that

00:00:48.296 --> 00:00:50.926 A:middle
frame at home watching on their

00:00:50.926 --> 00:00:52.426 A:middle
iPad or Apple TV.

00:00:53.386 --> 00:00:56.476 A:middle
And shortening that duration,

00:00:56.476 --> 00:00:59.856 A:middle
keeping that small is crucial to

00:00:59.856 --> 00:01:01.196 A:middle
certain types of content.

00:00:59.856 --> 00:01:01.196 A:middle
certain types of content.

00:01:02.646 --> 00:01:04.666 A:middle
Now, the one we're probably most

00:01:04.666 --> 00:01:07.146 A:middle
familiar with are live sports.

00:01:07.946 --> 00:01:09.796 A:middle
But it's also important for

00:01:09.796 --> 00:01:12.116 A:middle
late-breaking news, for things

00:01:12.116 --> 00:01:15.466 A:middle
like live streaming of games,

00:01:16.066 --> 00:01:17.936 A:middle
and even for things like the

00:01:17.936 --> 00:01:18.736 A:middle
Oscars.

00:01:19.106 --> 00:01:21.366 A:middle
Really anything where there's a

00:01:21.366 --> 00:01:23.456 A:middle
lot of people watching the same

00:01:23.456 --> 00:01:25.296 A:middle
video at the same time.

00:01:25.706 --> 00:01:27.166 A:middle
And usually, there's a social

00:01:27.166 --> 00:01:28.076 A:middle
component to it.

00:01:28.816 --> 00:01:31.926 A:middle
So, how low does that latency

00:01:31.926 --> 00:01:33.886 A:middle
have to be to provide a good

00:01:33.886 --> 00:01:35.036 A:middle
user experience?

00:01:36.556 --> 00:01:39.606 A:middle
Well, the gold standard today is

00:01:39.966 --> 00:01:42.956 A:middle
around two to eight seconds.

00:01:43.436 --> 00:01:45.156 A:middle
And that's what's provided by

00:01:45.516 --> 00:01:47.556 A:middle
the current suite of television

00:01:47.556 --> 00:01:49.186 A:middle
broadcasters, cable satellite

00:01:49.186 --> 00:01:49.736 A:middle
television.

00:01:50.646 --> 00:01:51.956 A:middle
And so, when we design

00:01:51.956 --> 00:01:54.186 A:middle
Low-Latency HLS, we set

00:01:54.186 --> 00:01:57.406 A:middle
ourselves a target of one to two

00:01:57.406 --> 00:02:00.366 A:middle
seconds delay from live at scale

00:01:57.406 --> 00:02:00.366 A:middle
seconds delay from live at scale

00:02:00.366 --> 00:02:01.776 A:middle
over the public internet with

00:02:01.776 --> 00:02:03.016 A:middle
any kind of reasonable round

00:02:03.016 --> 00:02:03.496 A:middle
trip time.

00:02:04.766 --> 00:02:06.676 A:middle
Now, we did that without

00:02:06.676 --> 00:02:09.786 A:middle
sacrificing anything, any of the

00:02:09.786 --> 00:02:12.386 A:middle
features that make HLS so

00:02:12.386 --> 00:02:12.906 A:middle
compelling.

00:02:13.556 --> 00:02:16.366 A:middle
So we still adapt the quality to

00:02:16.366 --> 00:02:18.216 A:middle
match the user's network speed.

00:02:18.696 --> 00:02:20.106 A:middle
We still allow you to protect

00:02:20.106 --> 00:02:20.786 A:middle
your content.

00:02:21.036 --> 00:02:23.176 A:middle
We still allow you to insert ads

00:02:23.476 --> 00:02:25.876 A:middle
and provide program boundary and

00:02:25.876 --> 00:02:28.386 A:middle
other metadata.

00:02:28.386 --> 00:02:31.246 A:middle
We still enable you to scale

00:02:31.566 --> 00:02:33.606 A:middle
your broadcasts to hundreds of

00:02:33.606 --> 00:02:36.106 A:middle
thousands of users using

00:02:36.106 --> 00:02:39.546 A:middle
commodity CDNs cost effectively.

00:02:39.546 --> 00:02:43.726 A:middle
And we're making sure that these

00:02:43.726 --> 00:02:45.076 A:middle
streams are backward compatible.

00:02:45.766 --> 00:02:47.866 A:middle
So you can still see them at

00:02:47.866 --> 00:02:49.656 A:middle
regular latency on older

00:02:49.656 --> 00:02:50.306 A:middle
clients.

00:02:51.526 --> 00:02:54.436 A:middle
So, how do we do all that?

00:02:54.946 --> 00:02:58.586 A:middle
Well, to understand that, first,

00:02:58.586 --> 00:03:01.876 A:middle
we have to go back to regular

00:02:58.586 --> 00:03:01.876 A:middle
we have to go back to regular

00:03:01.876 --> 00:03:03.436 A:middle
HLS and see where we're starting

00:03:03.436 --> 00:03:03.766 A:middle
from.

00:03:05.906 --> 00:03:09.336 A:middle
So, first of all, from its

00:03:09.336 --> 00:03:11.836 A:middle
inception, HLS was designed to

00:03:11.836 --> 00:03:14.076 A:middle
be a simple and robust protocol.

00:03:14.496 --> 00:03:15.686 A:middle
And that has been great.

00:03:16.466 --> 00:03:19.246 A:middle
And in fact, if your content

00:03:19.246 --> 00:03:21.706 A:middle
doesn't fall within the bounds

00:03:21.706 --> 00:03:23.476 A:middle
of those, you know, types of

00:03:23.476 --> 00:03:24.636 A:middle
content we talked about earlier,

00:03:24.856 --> 00:03:26.496 A:middle
you should keep using regular

00:03:26.496 --> 00:03:27.466 A:middle
HLS and it's going to work great

00:03:27.466 --> 00:03:27.876 A:middle
for you.

00:03:28.856 --> 00:03:31.436 A:middle
But that simplicity comes at a

00:03:31.436 --> 00:03:32.006 A:middle
cost.

00:03:32.256 --> 00:03:33.676 A:middle
When you're watching sports, for

00:03:33.676 --> 00:03:35.806 A:middle
instance, the manifestation of

00:03:35.806 --> 00:03:37.826 A:middle
that cost is often that you hear

00:03:37.826 --> 00:03:39.196 A:middle
about the goal through your

00:03:39.196 --> 00:03:41.296 A:middle
apartment wall before you see it

00:03:41.296 --> 00:03:42.306 A:middle
on your Apple TV.

00:03:43.956 --> 00:03:45.016 A:middle
So why is that?

00:03:45.886 --> 00:03:47.946 A:middle
Well, to understand that, let's

00:03:47.946 --> 00:03:49.176 A:middle
take a look at what has to

00:03:49.176 --> 00:03:52.686 A:middle
happen with regular HLS in order

00:03:52.686 --> 00:03:55.406 A:middle
to get a particular frame from

00:03:55.406 --> 00:03:57.626 A:middle
your production backend to user

00:03:57.626 --> 00:03:57.996 A:middle
at home.

00:03:58.896 --> 00:04:00.056 A:middle
We start with the frame.

00:03:58.896 --> 00:04:00.056 A:middle
We start with the frame.

00:04:00.336 --> 00:04:01.356 A:middle
And the first thing we need to

00:04:01.356 --> 00:04:03.716 A:middle
do is encode it and put it into

00:04:03.716 --> 00:04:04.306 A:middle
a segment.

00:04:04.756 --> 00:04:06.176 A:middle
Now, we recommend 6-second

00:04:06.176 --> 00:04:06.776 A:middle
segments.

00:04:07.176 --> 00:04:09.226 A:middle
But that does mean that because

00:04:09.226 --> 00:04:11.246 A:middle
we're encoding in real time, its

00:04:11.246 --> 00:04:12.816 A:middle
six seconds before you even have

00:04:12.816 --> 00:04:14.016 A:middle
anything that you can put on

00:04:14.106 --> 00:04:14.586 A:middle
your CDN.

00:04:15.806 --> 00:04:17.196 A:middle
After we've got that segment,

00:04:17.196 --> 00:04:18.866 A:middle
the client has to discover that

00:04:18.995 --> 00:04:21.286 A:middle
it exists.

00:04:21.286 --> 00:04:23.546 A:middle
HLS today uses the polling

00:04:23.546 --> 00:04:24.816 A:middle
mechanism, which means that

00:04:24.816 --> 00:04:26.116 A:middle
every now and then the client

00:04:26.406 --> 00:04:27.616 A:middle
checks in with the server for

00:04:27.616 --> 00:04:29.016 A:middle
latest copy of the playlist to

00:04:29.016 --> 00:04:29.976 A:middle
see if there's anything new.

00:04:31.106 --> 00:04:33.166 A:middle
Now in the best case, the client

00:04:33.166 --> 00:04:36.016 A:middle
might say, check in right after

00:04:36.016 --> 00:04:37.946 A:middle
the server has put the latest

00:04:37.946 --> 00:04:39.216 A:middle
segment into the playlist.

00:04:39.406 --> 00:04:41.316 A:middle
That's great, but often we don't

00:04:41.316 --> 00:04:42.576 A:middle
fall into that best case.

00:04:42.576 --> 00:04:44.676 A:middle
And in fact, in some cases, it

00:04:44.676 --> 00:04:45.886 A:middle
can be almost another six

00:04:45.886 --> 00:04:47.806 A:middle
seconds before the client even

00:04:47.806 --> 00:04:49.316 A:middle
finds out that there's a new

00:04:49.316 --> 00:04:50.026 A:middle
segment there.

00:04:51.576 --> 00:04:54.206 A:middle
After it does, and gets the new

00:04:54.206 --> 00:04:55.986 A:middle
playlist back, it then has to

00:04:55.986 --> 00:04:57.026 A:middle
turn around and make another

00:04:57.026 --> 00:04:58.616 A:middle
request to actually get the

00:04:58.616 --> 00:04:59.536 A:middle
segment itself.

00:04:59.536 --> 00:05:01.806 A:middle
And remember that each of these

00:04:59.536 --> 00:05:01.806 A:middle
And remember that each of these

00:05:01.806 --> 00:05:03.716 A:middle
requests takes a round trip time

00:05:03.716 --> 00:05:04.316 A:middle
on the network.

00:05:04.996 --> 00:05:06.066 A:middle
And on some networks,

00:05:06.066 --> 00:05:07.996 A:middle
particularly cellular, this can

00:05:07.996 --> 00:05:08.656 A:middle
be in the hundreds of

00:05:08.656 --> 00:05:09.286 A:middle
milliseconds.

00:05:09.326 --> 00:05:11.496 A:middle
It's not insignificant.

00:05:12.366 --> 00:05:14.046 A:middle
So anyway, after it does all

00:05:14.046 --> 00:05:15.946 A:middle
that, then the segment can start

00:05:15.946 --> 00:05:17.006 A:middle
flowing to the client.

00:05:17.816 --> 00:05:19.646 A:middle
Then once it gets enough, it can

00:05:19.646 --> 00:05:20.846 A:middle
present that frame of video.

00:05:21.406 --> 00:05:22.626 A:middle
Now, in this example, we're

00:05:22.626 --> 00:05:24.496 A:middle
already up in the 12-second

00:05:24.496 --> 00:05:24.956 A:middle
region.

00:05:25.496 --> 00:05:27.176 A:middle
But if you're delivering your

00:05:27.176 --> 00:05:30.116 A:middle
content over a CDN, and almost

00:05:30.116 --> 00:05:32.946 A:middle
all of us do, then it can get

00:05:32.946 --> 00:05:34.586 A:middle
even further away from live.

00:05:35.736 --> 00:05:37.536 A:middle
And the reason for that is

00:05:37.536 --> 00:05:40.986 A:middle
because of the way that regular

00:05:41.076 --> 00:05:42.516 A:middle
HLS interacts with CDNs.

00:05:42.516 --> 00:05:44.096 A:middle
And let's take a look at that.

00:05:45.346 --> 00:05:48.176 A:middle
So imagine that you've got your

00:05:48.776 --> 00:05:49.366 A:middle
HLS Stream.

00:05:49.366 --> 00:05:50.246 A:middle
You're authoring it to your

00:05:50.246 --> 00:05:51.606 A:middle
origin on the right.

00:05:51.836 --> 00:05:53.746 A:middle
In a particular time, it's

00:05:53.746 --> 00:05:54.926 A:middle
placed a playlist up there.

00:05:54.926 --> 00:05:56.566 A:middle
It has three segments in it.

00:05:56.916 --> 00:05:58.006 A:middle
Now, the first client that

00:05:58.006 --> 00:05:59.476 A:middle
checks in wants to find the

00:05:59.476 --> 00:06:00.676 A:middle
latest greatest media.

00:05:59.476 --> 00:06:00.676 A:middle
latest greatest media.

00:06:01.546 --> 00:06:03.696 A:middle
If the CDN edge server that it's

00:06:03.696 --> 00:06:06.186 A:middle
talking to hasn't cached any of

00:06:06.186 --> 00:06:07.876 A:middle
that stuff yet, he's actually in

00:06:07.876 --> 00:06:09.156 A:middle
good shape because he's going to

00:06:09.216 --> 00:06:10.336 A:middle
ask for a playlist.

00:06:10.716 --> 00:06:11.856 A:middle
The CDN is going to get it from

00:06:11.856 --> 00:06:13.296 A:middle
the origin, get the latest

00:06:13.296 --> 00:06:14.316 A:middle
versions, sent it right to the

00:06:14.316 --> 00:06:14.626 A:middle
client.

00:06:14.666 --> 00:06:15.796 A:middle
Client 1 is in good shape.

00:06:16.456 --> 00:06:18.886 A:middle
The problem comes about a second

00:06:18.886 --> 00:06:21.356 A:middle
or two later when on the origin,

00:06:21.916 --> 00:06:23.926 A:middle
we get a new segment in town and

00:06:23.926 --> 00:06:26.226 A:middle
the playlist is updated with now

00:06:26.226 --> 00:06:28.356 A:middle
containing segments 1 through 4.

00:06:29.356 --> 00:06:31.096 A:middle
What happens after that?

00:06:31.096 --> 00:06:32.766 A:middle
When client 2 comes in and wants

00:06:32.766 --> 00:06:34.216 A:middle
to find out again, "OK, what's

00:06:34.216 --> 00:06:35.236 A:middle
the latest content?"

00:06:36.016 --> 00:06:37.496 A:middle
Well, the playlist he's going to

00:06:37.496 --> 00:06:39.176 A:middle
get back from that edge is the

00:06:39.176 --> 00:06:41.786 A:middle
cached playlist that has only

00:06:41.786 --> 00:06:42.776 A:middle
segments 1 through 3.

00:06:42.776 --> 00:06:45.756 A:middle
He can't even discover segment 4

00:06:46.036 --> 00:06:48.596 A:middle
because the CDN has served him a

00:06:48.596 --> 00:06:50.226 A:middle
cached version of that playlist.

00:06:51.576 --> 00:06:54.246 A:middle
Now, why does the CDN do that?

00:06:54.246 --> 00:06:57.066 A:middle
Why it can just serve at the

00:06:57.066 --> 00:06:58.206 A:middle
most recent version?

00:06:58.946 --> 00:07:00.906 A:middle
Well, the problem is that the

00:06:58.946 --> 00:07:00.906 A:middle
Well, the problem is that the

00:07:01.036 --> 00:07:03.606 A:middle
CDN has no way of learning that

00:07:03.606 --> 00:07:04.946 A:middle
that playlist has been updated

00:07:04.946 --> 00:07:05.646 A:middle
on the origin.

00:07:06.506 --> 00:07:08.306 A:middle
And if it were to go in and

00:07:08.306 --> 00:07:10.046 A:middle
check with the origin, every

00:07:10.046 --> 00:07:12.276 A:middle
time, some random client came in

00:07:12.276 --> 00:07:13.086 A:middle
and said, "Hey, what's the

00:07:13.086 --> 00:07:13.906 A:middle
latest playlist?"

00:07:14.156 --> 00:07:15.686 A:middle
It would melt down the origin.

00:07:16.576 --> 00:07:18.956 A:middle
So CDNs have to cache for a

00:07:18.956 --> 00:07:19.686 A:middle
period of time.

00:07:19.686 --> 00:07:20.776 A:middle
It's called the time to live.

00:07:21.946 --> 00:07:24.396 A:middle
And the longer that time to live

00:07:24.396 --> 00:07:26.916 A:middle
is, the longer client is

00:07:26.916 --> 00:07:27.476 A:middle
checking in.

00:07:27.476 --> 00:07:28.866 A:middle
We'll see that outdated version

00:07:28.866 --> 00:07:30.176 A:middle
of the playlist and that

00:07:30.216 --> 00:07:32.336 A:middle
stretches our delay from live by

00:07:32.336 --> 00:07:33.096 A:middle
that much more.

00:07:34.806 --> 00:07:38.836 A:middle
So, all these problems can be

00:07:38.836 --> 00:07:39.386 A:middle
fixed.

00:07:40.766 --> 00:07:43.256 A:middle
But in deciding how we want to

00:07:43.256 --> 00:07:45.926 A:middle
approach that fix, there are a

00:07:45.986 --> 00:07:47.976 A:middle
few more factors that we need to

00:07:47.976 --> 00:07:48.486 A:middle
consider.

00:07:49.766 --> 00:07:53.336 A:middle
The first is that HTTP is still

00:07:53.596 --> 00:07:55.986 A:middle
the best way to deliver the same

00:07:55.986 --> 00:07:58.826 A:middle
media to hundreds of thousands

00:07:58.826 --> 00:08:01.256 A:middle
people over the internet at the

00:07:58.826 --> 00:08:01.256 A:middle
people over the internet at the

00:08:01.256 --> 00:08:02.006 A:middle
same time.

00:08:02.476 --> 00:08:04.156 A:middle
So we should stick with HTTP.

00:08:04.786 --> 00:08:08.256 A:middle
But doing that means that we are

00:08:08.256 --> 00:08:10.566 A:middle
stuck with the HTTP delivery

00:08:10.566 --> 00:08:10.926 A:middle
model.

00:08:11.266 --> 00:08:14.086 A:middle
And that is of distributing

00:08:14.086 --> 00:08:15.796 A:middle
discrete segments, discrete

00:08:16.096 --> 00:08:18.746 A:middle
chunks of resources to clients.

00:08:19.236 --> 00:08:21.596 A:middle
And if it's going to take us six

00:08:21.596 --> 00:08:23.206 A:middle
seconds to produce that chunk,

00:08:23.846 --> 00:08:25.016 A:middle
then we've already missed our

00:08:25.016 --> 00:08:25.686 A:middle
deadlines.

00:08:26.306 --> 00:08:27.276 A:middle
If we're going to hit that

00:08:27.276 --> 00:08:29.356 A:middle
deadline of only a second away

00:08:29.356 --> 00:08:32.155 A:middle
from live, then the things we're

00:08:32.155 --> 00:08:33.816 A:middle
distributing over HTTP have to

00:08:33.816 --> 00:08:36.336 A:middle
shrink to become in some cases

00:08:36.566 --> 00:08:37.216 A:middle
much shorter.

00:08:38.176 --> 00:08:40.046 A:middle
The next thing we have to sort

00:08:40.046 --> 00:08:42.446 A:middle
of grapple with is that now and

00:08:42.446 --> 00:08:44.996 A:middle
for the foreseeable future CDNs

00:08:45.146 --> 00:08:47.156 A:middle
are essential to helping us

00:08:47.156 --> 00:08:49.716 A:middle
scale to global sized audiences.

00:08:50.706 --> 00:08:53.526 A:middle
But CDNs, at the end of the day,

00:08:53.886 --> 00:08:55.786 A:middle
are essentially HTTP proxy

00:08:55.786 --> 00:08:57.316 A:middle
caches and they're going to do

00:08:57.316 --> 00:08:58.156 A:middle
what caches do.

00:08:58.786 --> 00:09:00.256 A:middle
And we have to work with that

00:08:58.786 --> 00:09:00.256 A:middle
And we have to work with that

00:09:00.796 --> 00:09:02.426 A:middle
not against it.

00:09:02.916 --> 00:09:06.046 A:middle
The final thing is that when

00:09:06.346 --> 00:09:07.806 A:middle
we're playing so close to the

00:09:07.806 --> 00:09:09.656 A:middle
live edge, we can only buffer a

00:09:09.656 --> 00:09:10.906 A:middle
tiny little amount ahead because

00:09:10.906 --> 00:09:11.776 A:middle
that's all we've got.

00:09:12.766 --> 00:09:14.776 A:middle
And so, if we have to do

00:09:14.776 --> 00:09:16.706 A:middle
something like switch to a

00:09:16.706 --> 00:09:18.606 A:middle
different bit rate, then we've

00:09:18.606 --> 00:09:20.556 A:middle
only got like we don't have 10

00:09:20.556 --> 00:09:21.896 A:middle
seconds to do that before we

00:09:21.896 --> 00:09:22.396 A:middle
stall.

00:09:22.766 --> 00:09:24.806 A:middle
We might only have less than a

00:09:24.806 --> 00:09:25.296 A:middle
second.

00:09:25.706 --> 00:09:27.086 A:middle
And so, we have to make sure

00:09:27.376 --> 00:09:29.356 A:middle
that the mechanics of switching

00:09:29.356 --> 00:09:30.916 A:middle
are as efficient as they can be

00:09:31.206 --> 00:09:32.306 A:middle
because we have this very short

00:09:32.306 --> 00:09:32.576 A:middle
runway.

00:09:33.866 --> 00:09:39.256 A:middle
So, we looked at the entire HLS

00:09:39.696 --> 00:09:42.466 A:middle
delivery model, soup to nuts.

00:09:43.056 --> 00:09:46.236 A:middle
And we identified five big

00:09:46.546 --> 00:09:49.086 A:middle
changes that we needed to make

00:09:49.406 --> 00:09:52.206 A:middle
to hit this target of one to two

00:09:52.206 --> 00:09:54.006 A:middle
seconds of delay from live.

00:09:55.086 --> 00:09:56.206 A:middle
The first thing we're going to

00:09:56.206 --> 00:09:59.436 A:middle
talk about is that we need a way

00:09:59.686 --> 00:10:02.596 A:middle
to get that media on to the

00:09:59.686 --> 00:10:02.596 A:middle
to get that media on to the

00:10:02.596 --> 00:10:05.936 A:middle
server shorter than that six

00:10:06.456 --> 00:10:08.456 A:middle
seconds.

00:10:10.076 --> 00:10:11.016 A:middle
And we call that reducing

00:10:11.016 --> 00:10:11.536 A:middle
publishing latency.

00:10:11.536 --> 00:10:12.946 A:middle
So the way we're going to do it,

00:10:12.946 --> 00:10:13.826 A:middle
is we're going to allow the

00:10:13.826 --> 00:10:15.366 A:middle
server to publish small parts of

00:10:15.366 --> 00:10:17.236 A:middle
the main segment before the main

00:10:17.236 --> 00:10:18.356 A:middle
segment itself is ready.

00:10:18.956 --> 00:10:20.426 A:middle
So we can deliver those smaller

00:10:20.426 --> 00:10:21.206 A:middle
parts early.

00:10:22.136 --> 00:10:24.266 A:middle
The second thing we're doing is

00:10:24.326 --> 00:10:26.876 A:middle
we're optimizing how clients

00:10:26.906 --> 00:10:28.856 A:middle
discover segments, so that they

00:10:28.856 --> 00:10:29.876 A:middle
can do it more quickly.

00:10:30.056 --> 00:10:32.096 A:middle
And the way we're doing that is

00:10:32.096 --> 00:10:35.006 A:middle
we're changing how the client

00:10:35.136 --> 00:10:36.386 A:middle
updates its playlist.

00:10:37.236 --> 00:10:38.876 A:middle
We're allowing it to ask for a

00:10:38.876 --> 00:10:40.896 A:middle
particular playlist update in

00:10:40.896 --> 00:10:42.516 A:middle
advance before it's actually

00:10:42.516 --> 00:10:43.336 A:middle
ready on the server.

00:10:43.996 --> 00:10:45.896 A:middle
The server will then hold on to

00:10:45.896 --> 00:10:47.376 A:middle
that request keeping an eye on

00:10:47.376 --> 00:10:49.466 A:middle
the playlist until it updates

00:10:49.706 --> 00:10:50.686 A:middle
with that next segment.

00:10:50.906 --> 00:10:52.536 A:middle
At that point, you will

00:10:52.536 --> 00:10:53.906 A:middle
immediately send the playlist

00:10:54.326 --> 00:10:55.756 A:middle
back to the client.

00:10:57.066 --> 00:10:58.376 A:middle
The client will find out about

00:10:58.376 --> 00:11:01.016 A:middle
it in less than round trip time.

00:10:58.376 --> 00:11:01.016 A:middle
it in less than round trip time.

00:11:01.756 --> 00:11:04.086 A:middle
And in this model, each

00:11:04.086 --> 00:11:05.696 A:middle
individual playlist update

00:11:05.936 --> 00:11:07.466 A:middle
actually has a different URL.

00:11:08.376 --> 00:11:09.966 A:middle
And this provides a second

00:11:09.966 --> 00:11:13.536 A:middle
advantage, which is that it

00:11:13.536 --> 00:11:15.456 A:middle
makes caching of these playlist

00:11:15.456 --> 00:11:16.856 A:middle
updates much more efficient

00:11:17.576 --> 00:11:19.476 A:middle
because with a different URL for

00:11:19.476 --> 00:11:21.556 A:middle
every update, every update looks

00:11:21.556 --> 00:11:23.586 A:middle
like a separate cache entity.

00:11:24.426 --> 00:11:26.756 A:middle
So what happens now is when

00:11:26.756 --> 00:11:28.386 A:middle
client 1 wants a particular

00:11:28.386 --> 00:11:28.796 A:middle
update.

00:11:29.146 --> 00:11:30.436 A:middle
It'll ask for it.

00:11:30.476 --> 00:11:31.626 A:middle
The CDN says, "I've never heard

00:11:31.626 --> 00:11:31.936 A:middle
of that."

00:11:31.936 --> 00:11:32.926 A:middle
I'm going to go right over the

00:11:32.926 --> 00:11:34.456 A:middle
origin, the origin is going to

00:11:34.456 --> 00:11:35.096 A:middle
say, "Well, that's because I

00:11:35.096 --> 00:11:35.826 A:middle
haven't built it yet."

00:11:36.136 --> 00:11:37.246 A:middle
So now, it chugs away.

00:11:37.576 --> 00:11:39.476 A:middle
Once it has it update, it hands

00:11:39.476 --> 00:11:40.526 A:middle
it to the CDN which hands it

00:11:40.526 --> 00:11:41.336 A:middle
right to the client.

00:11:42.306 --> 00:11:44.116 A:middle
Next client comes in, he says,

00:11:44.116 --> 00:11:45.096 A:middle
"I want the same update."

00:11:45.706 --> 00:11:47.096 A:middle
The CDN identifies that

00:11:47.166 --> 00:11:49.076 A:middle
positively using the URL and

00:11:49.076 --> 00:11:49.736 A:middle
says, "Here you go."

00:11:49.916 --> 00:11:51.656 A:middle
Every subsequent client who

00:11:51.656 --> 00:11:53.876 A:middle
asked for that update will get

00:11:53.876 --> 00:11:55.356 A:middle
it served immediately out of the

00:11:55.356 --> 00:11:56.266 A:middle
CDN cache.

00:11:56.946 --> 00:11:59.976 A:middle
But the next time, the first

00:11:59.976 --> 00:12:01.576 A:middle
client or any other client wants

00:11:59.976 --> 00:12:01.576 A:middle
client or any other client wants

00:12:01.576 --> 00:12:04.596 A:middle
the update after that, the URL

00:12:04.596 --> 00:12:06.306 A:middle
that sends the CDN is a

00:12:06.306 --> 00:12:07.106 A:middle
different one.

00:12:07.586 --> 00:12:09.326 A:middle
And so, this the CDN immediately

00:12:09.326 --> 00:12:10.846 A:middle
knows he doesn't have it cache.

00:12:10.846 --> 00:12:11.906 A:middle
He doesn't hand out something

00:12:11.906 --> 00:12:12.396 A:middle
stale.

00:12:12.726 --> 00:12:14.016 A:middle
Instead, he goes right back to

00:12:14.016 --> 00:12:14.416 A:middle
the origin.

00:12:14.416 --> 00:12:15.086 A:middle
The origin says, "Well, I

00:12:15.086 --> 00:12:16.376 A:middle
haven't built that yet."

00:12:16.376 --> 00:12:19.106 A:middle
And then, once it is built, it

00:12:19.106 --> 00:12:21.036 A:middle
hands it back to the CDN and is

00:12:21.036 --> 00:12:23.666 A:middle
sent over to client.

00:12:25.376 --> 00:12:29.876 A:middle
So, these new playlist update

00:12:29.876 --> 00:12:32.686 A:middle
requests are inherently cache

00:12:32.756 --> 00:12:33.276 A:middle
busting.

00:12:33.746 --> 00:12:35.156 A:middle
And that makes caching work

00:12:35.206 --> 00:12:37.416 A:middle
better overall on the CDN.

00:12:38.896 --> 00:12:40.936 A:middle
Now, the third thing we're doing

00:12:41.696 --> 00:12:44.656 A:middle
is we're eliminating that extra

00:12:44.656 --> 00:12:45.246 A:middle
round trip.

00:12:45.566 --> 00:12:46.976 A:middle
After you discover a segment to

00:12:46.976 --> 00:12:47.926 A:middle
go off and actually get the

00:12:47.926 --> 00:12:48.776 A:middle
segment itself.

00:12:49.486 --> 00:12:50.816 A:middle
And the way we're doing that is

00:12:50.816 --> 00:12:51.576 A:middle
to use Push.

00:12:52.446 --> 00:12:54.416 A:middle
So, when the client asks for the

00:12:54.416 --> 00:12:56.786 A:middle
next playlist update, it's going

00:12:56.786 --> 00:12:57.656 A:middle
to tell the server.

00:12:57.886 --> 00:13:00.296 A:middle
And by the way, when you get

00:12:57.886 --> 00:13:00.296 A:middle
And by the way, when you get

00:13:00.296 --> 00:13:01.566 A:middle
that playlist update that has

00:13:01.566 --> 00:13:02.536 A:middle
the next segment that I don't

00:13:02.536 --> 00:13:05.106 A:middle
know about then I want you to--

00:13:05.346 --> 00:13:06.406 A:middle
when you return me that

00:13:06.466 --> 00:13:07.896 A:middle
playlist, I want you to Push

00:13:07.896 --> 00:13:09.056 A:middle
that segment to me right away.

00:13:09.056 --> 00:13:11.056 A:middle
And that way, I don't have to

00:13:11.296 --> 00:13:12.466 A:middle
turn around and make a second

00:13:12.466 --> 00:13:13.506 A:middle
round trip.

00:13:14.956 --> 00:13:17.566 A:middle
The fourth thing we're doing is

00:13:17.566 --> 00:13:20.016 A:middle
we are addressing the cost of

00:13:20.016 --> 00:13:21.986 A:middle
transferring playlists, over and

00:13:21.986 --> 00:13:22.576 A:middle
over again.

00:13:23.026 --> 00:13:24.196 A:middle
And the basic approach we're

00:13:24.196 --> 00:13:26.366 A:middle
taking is using Delta updates.

00:13:26.986 --> 00:13:29.106 A:middle
So the way that works is the

00:13:29.106 --> 00:13:30.876 A:middle
first time a client asks for a

00:13:30.876 --> 00:13:32.596 A:middle
particular media playlist, it

00:13:32.596 --> 00:13:33.586 A:middle
gets the whole thing back.

00:13:34.296 --> 00:13:36.706 A:middle
After that though, it has the

00:13:36.706 --> 00:13:38.076 A:middle
vast majority of the playlist.

00:13:38.306 --> 00:13:40.256 A:middle
It's only really interested in

00:13:40.256 --> 00:13:42.006 A:middle
knowing about the part of the

00:13:42.006 --> 00:13:43.356 A:middle
end that's changed.

00:13:43.806 --> 00:13:47.266 A:middle
And so, after that, the next

00:13:47.266 --> 00:13:48.416 A:middle
time and it asked one it says,

00:13:48.736 --> 00:13:49.976 A:middle
"I want a playlist update that's

00:13:49.976 --> 00:13:50.796 A:middle
a Delta update."

00:13:51.246 --> 00:13:53.356 A:middle
And the thing that comes back is

00:13:53.356 --> 00:13:54.856 A:middle
a much smaller chunk of data

00:13:55.226 --> 00:13:56.986 A:middle
that only contains the stuff

00:13:57.266 --> 00:13:58.516 A:middle
that has changed most recently

00:13:58.516 --> 00:13:59.776 A:middle
at the live digital playlist.

00:13:59.776 --> 00:14:01.576 A:middle
And these updates will often fit

00:13:59.776 --> 00:14:01.576 A:middle
And these updates will often fit

00:14:01.626 --> 00:14:03.506 A:middle
into a single packet, a single

00:14:03.506 --> 00:14:04.316 A:middle
empty unit of data.

00:14:04.586 --> 00:14:05.866 A:middle
So they're much, much more

00:14:05.866 --> 00:14:07.496 A:middle
efficient for every subsequent

00:14:07.496 --> 00:14:07.806 A:middle
update.

00:14:08.366 --> 00:14:12.336 A:middle
Now, the fifth change is that

00:14:12.576 --> 00:14:13.916 A:middle
since we now know that these

00:14:13.916 --> 00:14:15.556 A:middle
playlist updates are pretty up

00:14:15.556 --> 00:14:17.486 A:middle
to date, we can have them carry

00:14:17.486 --> 00:14:19.736 A:middle
some information with them that

00:14:19.736 --> 00:14:21.366 A:middle
helps us switch to other bit

00:14:21.366 --> 00:14:22.456 A:middle
rate tiers faster.

00:14:23.746 --> 00:14:25.096 A:middle
So in other words, imagine we

00:14:25.096 --> 00:14:26.506 A:middle
have to bit rates on our CDN

00:14:26.506 --> 00:14:28.406 A:middle
here, and the clients playing

00:14:28.406 --> 00:14:29.036 A:middle
the first one.

00:14:30.266 --> 00:14:32.676 A:middle
When it asks for an update and

00:14:32.676 --> 00:14:34.546 A:middle
it receives that most recent

00:14:34.546 --> 00:14:36.426 A:middle
version of the one megabit

00:14:36.426 --> 00:14:38.296 A:middle
playlist, it can carry other

00:14:38.296 --> 00:14:40.556 A:middle
information such that if it

00:14:40.556 --> 00:14:41.966 A:middle
decides it needs to switch the

00:14:41.966 --> 00:14:43.716 A:middle
two megabit one, it can go

00:14:43.716 --> 00:14:45.226 A:middle
directly to the most recent

00:14:45.226 --> 00:14:46.736 A:middle
version of the two megabit

00:14:46.736 --> 00:14:47.206 A:middle
playlist.

00:14:47.466 --> 00:14:49.056 A:middle
And this may make switching bit

00:14:49.056 --> 00:14:50.376 A:middle
rates more efficient.

00:14:51.556 --> 00:14:56.196 A:middle
So five changes, we're reducing

00:14:56.196 --> 00:14:57.446 A:middle
the publishing latency, putting

00:14:57.446 --> 00:14:59.686 A:middle
our media on the CDN, optimizing

00:14:59.686 --> 00:15:01.456 A:middle
segment discovery, we're

00:14:59.686 --> 00:15:01.456 A:middle
segment discovery, we're

00:15:01.456 --> 00:15:03.516 A:middle
eliminating round trips, we're

00:15:03.516 --> 00:15:04.746 A:middle
reducing the overhead of

00:15:04.746 --> 00:15:07.066 A:middle
transferring playlist, and we're

00:15:07.066 --> 00:15:08.246 A:middle
making it possible switch to

00:15:08.246 --> 00:15:08.886 A:middle
yours quickly.

00:15:09.646 --> 00:15:10.816 A:middle
Now, let's take a look into the

00:15:10.816 --> 00:15:14.166 A:middle
details of all of those.

00:15:14.796 --> 00:15:16.936 A:middle
So, to make all of the stuff

00:15:16.936 --> 00:15:21.106 A:middle
work, the client needs a way to

00:15:21.106 --> 00:15:23.836 A:middle
tell the server that it wants to

00:15:23.836 --> 00:15:25.296 A:middle
make use of these new features

00:15:25.296 --> 00:15:27.186 A:middle
like playlists Delta updates or

00:15:27.186 --> 00:15:28.316 A:middle
blocking playlist reload.

00:15:28.896 --> 00:15:32.666 A:middle
And the way it does that is

00:15:32.666 --> 00:15:34.986 A:middle
using something we call the HLS

00:15:35.046 --> 00:15:36.816 A:middle
Origin API.

00:15:37.756 --> 00:15:39.356 A:middle
The way that works is that the

00:15:39.356 --> 00:15:40.556 A:middle
services themselves are

00:15:40.556 --> 00:15:42.596 A:middle
advertised by the server using a

00:15:42.596 --> 00:15:44.386 A:middle
new tag, the server control tag.

00:15:45.346 --> 00:15:46.876 A:middle
When the client discovers that

00:15:46.876 --> 00:15:48.616 A:middle
they're available, it makes use

00:15:48.616 --> 00:15:50.566 A:middle
of them by sending the server a

00:15:50.566 --> 00:15:52.566 A:middle
small number of directives that

00:15:52.566 --> 00:15:55.036 A:middle
are carried as query parameters

00:15:55.226 --> 00:15:56.576 A:middle
in the get request for the

00:15:56.576 --> 00:15:57.296 A:middle
playlist.

00:15:58.266 --> 00:15:59.636 A:middle
So it looks something like this.

00:16:00.886 --> 00:16:05.246 A:middle
Now, this is the first time that

00:16:05.246 --> 00:16:06.836 A:middle
we've specified query parameters

00:16:06.836 --> 00:16:08.236 A:middle
as part of the HLS.

00:16:08.996 --> 00:16:11.786 A:middle
And so, we are going forward

00:16:11.786 --> 00:16:14.076 A:middle
reserving all query parameters

00:16:14.076 --> 00:16:15.916 A:middle
that start with underscore HLS

00:16:16.206 --> 00:16:18.666 A:middle
on playlist URLs for the use of

00:16:18.666 --> 00:16:19.246 A:middle
the protocol.

00:16:20.256 --> 00:16:21.996 A:middle
Another thing we're doing is

00:16:21.996 --> 00:16:23.726 A:middle
we're making sure that for all

00:16:23.726 --> 00:16:26.196 A:middle
the clients that those query

00:16:26.196 --> 00:16:27.266 A:middle
parameters appear in a

00:16:27.266 --> 00:16:29.306 A:middle
deterministic order in the URL

00:16:29.766 --> 00:16:31.766 A:middle
so that the CDNs don't end up

00:16:31.806 --> 00:16:33.836 A:middle
caching multiple copies of what

00:16:33.836 --> 00:16:35.366 A:middle
are effectively the same

00:16:35.366 --> 00:16:35.936 A:middle
request.

00:16:36.856 --> 00:16:39.686 A:middle
So, now let's go through each of

00:16:39.686 --> 00:16:41.676 A:middle
those five changes a little bit

00:16:41.676 --> 00:16:42.566 A:middle
more detail.

00:16:44.116 --> 00:16:46.396 A:middle
The first is to address this

00:16:46.396 --> 00:16:47.896 A:middle
notion-- is to address the

00:16:47.896 --> 00:16:49.426 A:middle
reduction of publishing latency.

00:16:49.426 --> 00:16:50.816 A:middle
And so, we're introducing a

00:16:50.816 --> 00:16:53.786 A:middle
notion of a partial segment to

00:16:53.836 --> 00:16:54.366 A:middle
HLS.

00:16:54.666 --> 00:16:56.216 A:middle
And we call these things Parts

00:16:56.216 --> 00:16:56.636 A:middle
for short.

00:16:57.916 --> 00:16:59.816 A:middle
So, a partial segment is

00:16:59.816 --> 00:17:01.346 A:middle
essentially just a subset of the

00:16:59.816 --> 00:17:01.346 A:middle
essentially just a subset of the

00:17:01.346 --> 00:17:03.456 A:middle
regular segment containing a

00:17:03.456 --> 00:17:05.616 A:middle
subset of the media within that

00:17:05.886 --> 00:17:06.675 A:middle
parent segment.

00:17:07.866 --> 00:17:11.486 A:middle
And CMAF already has a name for

00:17:11.486 --> 00:17:12.736 A:middle
this kind of thing.

00:17:12.736 --> 00:17:14.516 A:middle
They call them a CMAF chunk for

00:17:14.665 --> 00:17:15.675 A:middle
FMP4 content.

00:17:16.086 --> 00:17:18.445 A:middle
And so, you can use CMAF chunks

00:17:18.445 --> 00:17:20.396 A:middle
as your partial segments in HLS.

00:17:20.796 --> 00:17:22.715 A:middle
You can also use little bits of

00:17:22.715 --> 00:17:24.826 A:middle
transport stream or any other of

00:17:24.876 --> 00:17:27.066 A:middle
the defined HLS segment formats

00:17:27.286 --> 00:17:28.486 A:middle
for your partial segments.

00:17:30.276 --> 00:17:31.786 A:middle
The main thing about them is

00:17:31.786 --> 00:17:32.526 A:middle
that they're short.

00:17:33.106 --> 00:17:34.596 A:middle
They can be less than a full GOP

00:17:34.596 --> 00:17:35.116 A:middle
for instance.

00:17:35.116 --> 00:17:36.856 A:middle
So that means you can have half

00:17:36.856 --> 00:17:38.536 A:middle
second partial segments and

00:17:38.536 --> 00:17:40.306 A:middle
still keep your two-second GOPs.

00:17:42.816 --> 00:17:44.266 A:middle
Every time you create a new

00:17:44.266 --> 00:17:46.176 A:middle
partial segment, it is added to

00:17:46.176 --> 00:17:46.786 A:middle
the playlist.

00:17:47.286 --> 00:17:48.926 A:middle
And that means that if you've

00:17:48.926 --> 00:17:50.586 A:middle
got half second partial segments

00:17:50.586 --> 00:17:52.976 A:middle
for example, then you can

00:17:52.976 --> 00:17:55.586 A:middle
publish content to your CDN

00:17:56.186 --> 00:17:57.796 A:middle
about half a second after it

00:17:57.796 --> 00:17:59.036 A:middle
hits your production backend.

00:17:59.276 --> 00:18:00.716 A:middle
That's how far it reduces your

00:17:59.276 --> 00:18:00.716 A:middle
That's how far it reduces your

00:18:00.716 --> 00:18:01.676 A:middle
publishing latency.

00:18:03.796 --> 00:18:05.306 A:middle
Partial segments are added to

00:18:05.306 --> 00:18:07.586 A:middle
the playlist in parallel to the

00:18:07.586 --> 00:18:10.696 A:middle
regular segments stream but they

00:18:10.696 --> 00:18:12.016 A:middle
don't stay there for very long.

00:18:12.636 --> 00:18:15.616 A:middle
And that's because partial

00:18:15.616 --> 00:18:18.576 A:middle
segments are primarily useful

00:18:19.006 --> 00:18:20.266 A:middle
when you're playing at the live

00:18:20.266 --> 00:18:20.666 A:middle
edge.

00:18:20.726 --> 00:18:22.496 A:middle
They allow clients to discover

00:18:22.496 --> 00:18:23.986 A:middle
media just as soon as it

00:18:23.986 --> 00:18:24.836 A:middle
arrives.

00:18:25.416 --> 00:18:27.526 A:middle
And they fine-grained

00:18:27.526 --> 00:18:29.756 A:middle
addressability of those partial

00:18:29.756 --> 00:18:31.736 A:middle
segments allows clients who are

00:18:31.736 --> 00:18:33.616 A:middle
joining those streams to join

00:18:33.616 --> 00:18:35.346 A:middle
them closer to live and perhaps

00:18:35.396 --> 00:18:36.976 A:middle
the largest segment boundary.

00:18:37.856 --> 00:18:41.076 A:middle
But after the partial segments

00:18:41.076 --> 00:18:42.556 A:middle
drift further away from the live

00:18:42.556 --> 00:18:44.036 A:middle
edge and their parent segments

00:18:44.036 --> 00:18:44.916 A:middle
are well established in the

00:18:44.916 --> 00:18:46.426 A:middle
playlist, the clients are

00:18:46.426 --> 00:18:48.366 A:middle
actually better off loading the

00:18:48.366 --> 00:18:49.656 A:middle
parent segments than the partial

00:18:49.656 --> 00:18:50.126 A:middle
segments.

00:18:50.126 --> 00:18:51.856 A:middle
And so the partial segments are

00:18:51.856 --> 00:18:53.036 A:middle
removed from the playlist.

00:18:53.406 --> 00:18:55.176 A:middle
And this helps keep our playlist

00:18:55.456 --> 00:18:55.936 A:middle
compact.

00:18:57.026 --> 00:18:59.846 A:middle
So, the way it works is, as you

00:18:59.846 --> 00:19:01.166 A:middle
produce your segment, you're

00:18:59.846 --> 00:19:01.166 A:middle
produce your segment, you're

00:19:01.166 --> 00:19:02.456 A:middle
producing partial segments in

00:19:02.456 --> 00:19:02.976 A:middle
parallel.

00:19:03.576 --> 00:19:05.176 A:middle
After a while, as those partial

00:19:05.176 --> 00:19:07.126 A:middle
segments become further or far

00:19:07.126 --> 00:19:08.346 A:middle
enough away from the live edge,

00:19:08.636 --> 00:19:10.046 A:middle
they are removed and they're

00:19:10.046 --> 00:19:11.726 A:middle
replaced by new partial segments

00:19:12.016 --> 00:19:12.886 A:middle
at the live edge.

00:19:13.526 --> 00:19:14.516 A:middle
Let's take a look at how that

00:19:14.516 --> 00:19:16.246 A:middle
looks in an actual HLS playlist.

00:19:16.246 --> 00:19:19.636 A:middle
So, I got a couple things up

00:19:19.636 --> 00:19:20.076 A:middle
here.

00:19:20.436 --> 00:19:22.306 A:middle
The first thing I want you to

00:19:22.306 --> 00:19:24.606 A:middle
notice is that just like regular

00:19:24.606 --> 00:19:26.036 A:middle
playlists have a target duration

00:19:26.036 --> 00:19:27.766 A:middle
which says this is how long our

00:19:27.766 --> 00:19:28.656 A:middle
segment can be.

00:19:29.556 --> 00:19:30.696 A:middle
Parts have the same kind of

00:19:30.696 --> 00:19:31.996 A:middle
thing it's called a part target

00:19:31.996 --> 00:19:32.526 A:middle
duration.

00:19:32.786 --> 00:19:34.146 A:middle
And so this is saying to you

00:19:34.146 --> 00:19:35.586 A:middle
that the Parts in this playlist,

00:19:35.586 --> 00:19:36.646 A:middle
the partial segments have a

00:19:36.646 --> 00:19:38.486 A:middle
maximum duration of five, of

00:19:38.586 --> 00:19:39.316 A:middle
half second.

00:19:39.446 --> 00:19:40.836 A:middle
The next thing though is we have

00:19:40.836 --> 00:19:41.786 A:middle
a regular segment here.

00:19:41.786 --> 00:19:43.496 A:middle
It's a 6-second segment43.

00:19:44.796 --> 00:19:46.646 A:middle
Half a second after we put

00:19:46.646 --> 00:19:48.776 A:middle
segment43 into the playlist, we

00:19:48.776 --> 00:19:50.506 A:middle
can put-- we can add the first

00:19:50.506 --> 00:19:52.916 A:middle
part of segment44.

00:19:53.226 --> 00:19:55.376 A:middle
And we do this using a new tag

00:19:55.376 --> 00:19:56.416 A:middle
called the part tag.

00:19:57.096 --> 00:19:59.026 A:middle
And so, what you can see is that

00:19:59.236 --> 00:20:00.936 A:middle
each part tag has URI.

00:19:59.236 --> 00:20:00.936 A:middle
each part tag has URI.

00:20:01.506 --> 00:20:02.856 A:middle
So the segment get-- the Partial

00:20:02.856 --> 00:20:04.136 A:middle
Segment has its own URI

00:20:04.646 --> 00:20:07.776 A:middle
segment44.1 is half a second

00:20:07.776 --> 00:20:08.166 A:middle
long.

00:20:08.556 --> 00:20:09.966 A:middle
And it's independent, which

00:20:09.966 --> 00:20:11.096 A:middle
means it has own URI.

00:20:12.296 --> 00:20:14.376 A:middle
Half a second after that, we can

00:20:14.376 --> 00:20:16.176 A:middle
add the next partial segment of

00:20:16.176 --> 00:20:18.386 A:middle
segment44 to the playlist and so

00:20:18.386 --> 00:20:19.136 A:middle
on and so forth.

00:20:19.136 --> 00:20:20.436 A:middle
This is a 6-second playlist.

00:20:20.436 --> 00:20:21.776 A:middle
So there's going to be 12 parts.

00:20:22.456 --> 00:20:25.086 A:middle
Once we get to the final part of

00:20:25.086 --> 00:20:27.576 A:middle
segment44, we actually have the

00:20:27.576 --> 00:20:29.686 A:middle
entire parents segment as well.

00:20:30.006 --> 00:20:32.116 A:middle
And so, we can publish the final

00:20:32.116 --> 00:20:34.276 A:middle
part of segment44 and the

00:20:34.276 --> 00:20:35.596 A:middle
parents segment at the same

00:20:35.596 --> 00:20:35.986 A:middle
time.

00:20:36.296 --> 00:20:37.506 A:middle
And so, then half a second after

00:20:37.506 --> 00:20:39.046 A:middle
that sort of the cycle repeats

00:20:39.306 --> 00:20:41.106 A:middle
and we get segment45.

00:20:41.806 --> 00:20:44.886 A:middle
And then, after a while, those

00:20:44.946 --> 00:20:46.396 A:middle
partial segments in the middle

00:20:46.586 --> 00:20:47.856 A:middle
are far enough away from the

00:20:47.856 --> 00:20:49.086 A:middle
leading edge of the playlist

00:20:49.476 --> 00:20:50.706 A:middle
that they can be removed.

00:20:51.036 --> 00:20:53.596 A:middle
And now, we just have segment43,

00:20:53.596 --> 00:20:55.646 A:middle
segment44 and then the parts of

00:20:55.646 --> 00:20:57.696 A:middle
segment45 and beyond.

00:20:58.846 --> 00:21:00.086 A:middle
So that's how we use partial

00:20:58.846 --> 00:21:00.086 A:middle
So that's how we use partial

00:21:00.086 --> 00:21:01.226 A:middle
segments to lower your

00:21:01.226 --> 00:21:02.186 A:middle
publishing latency.

00:21:02.936 --> 00:21:05.126 A:middle
Now, let's look at optimizing

00:21:05.126 --> 00:21:06.416 A:middle
how we discover segments.

00:21:06.956 --> 00:21:10.466 A:middle
And we do that using what we

00:21:10.466 --> 00:21:11.956 A:middle
call blocking playlist reload.

00:21:12.396 --> 00:21:14.496 A:middle
The way this works is the server

00:21:14.496 --> 00:21:16.436 A:middle
advertises it has the ability to

00:21:16.436 --> 00:21:18.416 A:middle
handle blocking playlist reload

00:21:18.806 --> 00:21:21.026 A:middle
by putting a can block reload

00:21:21.026 --> 00:21:22.506 A:middle
attribute into the server

00:21:22.506 --> 00:21:23.266 A:middle
control tag.

00:21:24.306 --> 00:21:26.016 A:middle
When the client sees this, it

00:21:26.016 --> 00:21:27.326 A:middle
knows that it can ask for its

00:21:27.326 --> 00:21:29.516 A:middle
next playlist update in advance

00:21:29.516 --> 00:21:30.626 A:middle
of when it's actually ready.

00:21:30.666 --> 00:21:32.486 A:middle
So we advertise the request cost

00:21:32.486 --> 00:21:32.826 A:middle
that way.

00:21:33.426 --> 00:21:35.906 A:middle
At that point, the server

00:21:35.906 --> 00:21:37.656 A:middle
receives a request, realizes

00:21:37.656 --> 00:21:38.786 A:middle
that it doesn't have a playlist

00:21:38.786 --> 00:21:40.516 A:middle
update that's been requested yet

00:21:40.766 --> 00:21:42.246 A:middle
and so it holds on to it until

00:21:43.176 --> 00:21:44.216 A:middle
it does.

00:21:44.436 --> 00:21:47.016 A:middle
So, how does the client specify

00:21:47.016 --> 00:21:49.566 A:middle
to the server which updated

00:21:49.566 --> 00:21:51.736 A:middle
wants, that it wants a

00:21:51.736 --> 00:21:53.116 A:middle
particular playlist update with

00:21:53.116 --> 00:21:54.096 A:middle
a particular segment in it.

00:21:54.896 --> 00:21:56.846 A:middle
Well, it uses a feature of HLS

00:21:57.096 --> 00:21:58.086 A:middle
called the media sequence

00:21:58.086 --> 00:21:58.366 A:middle
number.

00:21:58.956 --> 00:22:02.056 A:middle
Now, every segment in an HLS

00:21:58.956 --> 00:22:02.056 A:middle
Now, every segment in an HLS

00:22:02.146 --> 00:22:04.086 A:middle
playlist has a unique sequence

00:22:04.086 --> 00:22:04.396 A:middle
number.

00:22:05.186 --> 00:22:06.586 A:middle
The sequence number of the first

00:22:06.586 --> 00:22:08.336 A:middle
segment of the playlist is the

00:22:08.336 --> 00:22:09.946 A:middle
value of that media sequence

00:22:09.946 --> 00:22:10.226 A:middle
tag.

00:22:10.226 --> 00:22:11.246 A:middle
You see at the top there.

00:22:11.816 --> 00:22:13.426 A:middle
So it's 1800 in this case.

00:22:14.426 --> 00:22:15.766 A:middle
The media sequence number of the

00:22:15.766 --> 00:22:17.676 A:middle
next segment is just that plus

00:22:17.676 --> 00:22:18.036 A:middle
one.

00:22:18.786 --> 00:22:20.826 A:middle
And that's true even if the next

00:22:20.826 --> 00:22:22.456 A:middle
segment is separated from the

00:22:22.456 --> 00:22:24.716 A:middle
others by a discontinuity tag or

00:22:24.716 --> 00:22:26.366 A:middle
a key rotation or anything else.

00:22:26.676 --> 00:22:27.826 A:middle
Sequence numbers just keep

00:22:27.826 --> 00:22:28.636 A:middle
counting forward.

00:22:29.856 --> 00:22:32.316 A:middle
And that means that if we have

00:22:32.316 --> 00:22:33.386 A:middle
this playlist.

00:22:33.846 --> 00:22:37.386 A:middle
Then, we know the next time it's

00:22:37.386 --> 00:22:39.336 A:middle
updated, what the sequence

00:22:39.336 --> 00:22:40.986 A:middle
number of that next segments

00:22:40.986 --> 00:22:41.666 A:middle
going to be.

00:22:42.826 --> 00:22:44.796 A:middle
So, to get the next update that

00:22:44.796 --> 00:22:47.856 A:middle
contains the segment, you know,

00:22:47.856 --> 00:22:49.766 A:middle
the next segment of interest, we

00:22:49.766 --> 00:22:51.016 A:middle
can tell the server, "Hey,

00:22:51.506 --> 00:22:53.316 A:middle
please, go get me a playlist

00:22:53.316 --> 00:22:54.676 A:middle
update and I want the one that

00:22:54.676 --> 00:22:56.736 A:middle
contains media sequence number

00:22:56.976 --> 00:22:58.006 A:middle
1803."

00:22:58.776 --> 00:23:00.536 A:middle
So this is how that looks.

00:22:58.776 --> 00:23:00.536 A:middle
So this is how that looks.

00:23:00.836 --> 00:23:03.746 A:middle
So we've got a get request here

00:23:03.746 --> 00:23:04.606 A:middle
for a playlist.

00:23:04.606 --> 00:23:05.946 A:middle
You can see it's requesting live

00:23:05.946 --> 00:23:06.576 A:middle
on m3U8.

00:23:06.576 --> 00:23:08.796 A:middle
And we have a query parameter

00:23:09.176 --> 00:23:11.006 A:middle
underscore HLS underscore

00:23:11.086 --> 00:23:12.956 A:middle
msn=1803.

00:23:12.956 --> 00:23:14.106 A:middle
That's how the client tells the

00:23:14.106 --> 00:23:16.156 A:middle
server, I want this particular

00:23:16.156 --> 00:23:17.346 A:middle
playlist update, the one that

00:23:17.346 --> 00:23:18.656 A:middle
contains this media sequence

00:23:18.656 --> 00:23:18.906 A:middle
number.

00:23:19.296 --> 00:23:21.436 A:middle
After it receives it, as soon as

00:23:21.436 --> 00:23:22.626 A:middle
it receives it, it'll

00:23:22.626 --> 00:23:24.186 A:middle
immediately send the next update

00:23:24.186 --> 00:23:25.606 A:middle
request for 1804.

00:23:26.426 --> 00:23:28.536 A:middle
And those to a CDN look like

00:23:28.536 --> 00:23:30.206 A:middle
completely different URLs even

00:23:30.206 --> 00:23:31.636 A:middle
though only one query parameter

00:23:31.636 --> 00:23:33.516 A:middle
is different by one value to a

00:23:33.516 --> 00:23:35.586 A:middle
CDN, it's a completely different

00:23:35.586 --> 00:23:36.456 A:middle
cache entity.

00:23:36.886 --> 00:23:39.186 A:middle
And so, that gives us our cache

00:23:39.716 --> 00:23:39.936 A:middle
busting.

00:23:40.036 --> 00:23:41.906 A:middle
Now, this works with partial

00:23:41.906 --> 00:23:42.766 A:middle
segments as well.

00:23:43.276 --> 00:23:44.906 A:middle
And this is how it looks in this

00:23:44.906 --> 00:23:45.376 A:middle
case.

00:23:45.726 --> 00:23:47.876 A:middle
So we have a second example and

00:23:47.876 --> 00:23:50.266 A:middle
the second example says that, "I

00:23:50.266 --> 00:23:52.036 A:middle
want the playlist update that

00:23:52.036 --> 00:23:55.046 A:middle
contains the first part of the

00:23:55.046 --> 00:23:57.476 A:middle
media sequence number 1803.

00:23:58.106 --> 00:24:00.486 A:middle
Now, there's one more thing

00:23:58.106 --> 00:24:00.486 A:middle
Now, there's one more thing

00:24:00.486 --> 00:24:02.466 A:middle
going on here and that's this

00:24:02.676 --> 00:24:03.916 A:middle
Push query parameter.

00:24:04.086 --> 00:24:05.506 A:middle
What's that about?

00:24:05.896 --> 00:24:08.556 A:middle
Well, remember that another

00:24:08.556 --> 00:24:12.006 A:middle
thing we want to do is eliminate

00:24:12.036 --> 00:24:13.736 A:middle
these extra round trip times for

00:24:13.736 --> 00:24:14.336 A:middle
segments.

00:24:14.816 --> 00:24:16.756 A:middle
And so to do that, we're making

00:24:16.756 --> 00:24:17.546 A:middle
use of Push.

00:24:18.336 --> 00:24:20.366 A:middle
And to do that, we're using

00:24:20.366 --> 00:24:20.926 A:middle
HTTP/2.

00:24:22.786 --> 00:24:24.736 A:middle
Now, some of you may not be

00:24:25.036 --> 00:24:26.986 A:middle
intimately familiar with HTTP/2.

00:24:26.986 --> 00:24:28.056 A:middle
So let me give you a quick

00:24:28.056 --> 00:24:28.576 A:middle
refresher.

00:24:30.006 --> 00:24:32.446 A:middle
HTTP/2 is a successor to our old

00:24:32.446 --> 00:24:33.556 A:middle
buddy HTTP/1.

00:24:33.646 --> 00:24:35.936 A:middle
And it was standardized by the

00:24:35.936 --> 00:24:37.686 A:middle
IATF about four years ago.

00:24:38.396 --> 00:24:40.296 A:middle
Since then, it has been widely

00:24:40.296 --> 00:24:42.326 A:middle
adopted by web servers, clients

00:24:42.326 --> 00:24:43.236 A:middle
and CDNs.

00:24:43.776 --> 00:24:47.316 A:middle
It is required for Low-Latency

00:24:47.316 --> 00:24:49.576 A:middle
HLS because it gives us several

00:24:49.576 --> 00:24:51.746 A:middle
features that allow us to crank

00:24:51.966 --> 00:24:53.626 A:middle
up the efficiency of the

00:24:53.626 --> 00:24:54.786 A:middle
protocol exchange.

00:24:55.286 --> 00:24:57.236 A:middle
The most notable is Push.

00:24:57.936 --> 00:24:58.936 A:middle
So how does Push work?

00:25:00.026 --> 00:25:03.706 A:middle
Well, HTTP/2 works the same way

00:25:03.706 --> 00:25:05.606 A:middle
as HTTP/1 in the sense that the

00:25:05.606 --> 00:25:07.066 A:middle
client when it wants a resource

00:25:07.066 --> 00:25:08.286 A:middle
will send a get request to the

00:25:08.286 --> 00:25:08.726 A:middle
server.

00:25:09.266 --> 00:25:12.156 A:middle
What's new with HTTP/2 is that

00:25:12.156 --> 00:25:13.216 A:middle
when the server sees that

00:25:13.216 --> 00:25:14.606 A:middle
request, it can say to itself,

00:25:15.016 --> 00:25:16.276 A:middle
"Oh, I see you want this

00:25:16.276 --> 00:25:16.686 A:middle
resource.

00:25:16.716 --> 00:25:17.616 A:middle
I bet you want this other

00:25:17.616 --> 00:25:18.516 A:middle
resource as well."

00:25:19.076 --> 00:25:20.736 A:middle
And so, when it sends you the

00:25:20.736 --> 00:25:22.566 A:middle
resource you've asked for, at

00:25:22.566 --> 00:25:23.686 A:middle
the same time it can

00:25:23.686 --> 00:25:26.046 A:middle
unilaterally start sending you

00:25:26.236 --> 00:25:27.776 A:middle
that secondary resource that you

00:25:27.776 --> 00:25:28.766 A:middle
don't know you want yet.

00:25:29.436 --> 00:25:31.366 A:middle
In that way, if it guesses right

00:25:31.796 --> 00:25:32.986 A:middle
then you don't have to turn

00:25:32.986 --> 00:25:34.186 A:middle
around and make a second request

00:25:34.186 --> 00:25:35.296 A:middle
for it because it's already on

00:25:35.296 --> 00:25:35.956 A:middle
its way to you.

00:25:37.216 --> 00:25:39.866 A:middle
So, we're making use of this in

00:25:39.936 --> 00:25:41.716 A:middle
the latency HLS with Segment

00:25:41.716 --> 00:25:42.066 A:middle
Push.

00:25:43.276 --> 00:25:46.426 A:middle
So when a client asks for a

00:25:46.426 --> 00:25:48.336 A:middle
particular playlist update, the

00:25:48.336 --> 00:25:49.586 A:middle
one that contains the next

00:25:49.586 --> 00:25:51.526 A:middle
segment x, it can tell the

00:25:51.526 --> 00:25:53.506 A:middle
server, "Oh, and by the way,

00:25:53.766 --> 00:25:54.926 A:middle
when you give me that playlist

00:25:54.926 --> 00:25:56.466 A:middle
update, start pushing me segment

00:25:56.466 --> 00:25:57.056 A:middle
x as well."

00:25:57.996 --> 00:26:00.216 A:middle
And so that allows us to

00:25:57.996 --> 00:26:00.216 A:middle
And so that allows us to

00:26:00.386 --> 00:26:02.536 A:middle
eliminate that extra round trip

00:26:02.936 --> 00:26:06.196 A:middle
of asking for the segment.

00:26:06.356 --> 00:26:09.766 A:middle
So let's take a look at all

00:26:09.766 --> 00:26:10.916 A:middle
three of these first

00:26:10.916 --> 00:26:14.426 A:middle
optimizations and see how they

00:26:14.426 --> 00:26:16.536 A:middle
influence the flow in comparison

00:26:16.536 --> 00:26:17.186 A:middle
to regular HLS.

00:26:17.186 --> 00:26:18.976 A:middle
So, let's put that over there.

00:26:19.306 --> 00:26:21.366 A:middle
And let's take a look at what

00:26:21.366 --> 00:26:22.546 A:middle
the new flow looks like with a

00:26:22.546 --> 00:26:24.036 A:middle
low-latency client talking to a

00:26:24.036 --> 00:26:25.136 A:middle
low-latency server.

00:26:25.796 --> 00:26:27.426 A:middle
First of all, the client will

00:26:27.426 --> 00:26:29.036 A:middle
make a playlist request in

00:26:29.036 --> 00:26:29.556 A:middle
advance.

00:26:29.556 --> 00:26:30.756 A:middle
So we'll have it lined up there.

00:26:31.116 --> 00:26:32.156 A:middle
Server holds on to it.

00:26:32.516 --> 00:26:34.866 A:middle
The server in the meantime is

00:26:34.866 --> 00:26:36.286 A:middle
producing that first partial

00:26:36.286 --> 00:26:36.706 A:middle
segment.

00:26:37.606 --> 00:26:39.216 A:middle
And let's say in this example

00:26:39.216 --> 00:26:40.696 A:middle
that the partial segment is one

00:26:40.696 --> 00:26:41.336 A:middle
second long.

00:26:41.336 --> 00:26:42.626 A:middle
So after a second of doing its

00:26:42.626 --> 00:26:44.646 A:middle
encoding thing, at that point,

00:26:44.646 --> 00:26:46.046 A:middle
it can add that partial segment

00:26:46.046 --> 00:26:48.316 A:middle
to the playlist and unblock that

00:26:48.316 --> 00:26:50.596 A:middle
playlist request, at the same

00:26:50.596 --> 00:26:53.096 A:middle
time, pushing that first partial

00:26:53.096 --> 00:26:53.976 A:middle
second to the client.

00:26:54.766 --> 00:26:56.866 A:middle
The client can then display that

00:26:56.866 --> 00:26:58.766 A:middle
as soon as it gets enough of it.

00:26:58.766 --> 00:27:00.886 A:middle
And at the same time, line up

00:26:58.766 --> 00:27:00.886 A:middle
And at the same time, line up

00:27:00.886 --> 00:27:02.136 A:middle
the next playlist request on the

00:27:02.136 --> 00:27:03.756 A:middle
server so it can find out about

00:27:03.756 --> 00:27:06.206 A:middle
the next segment that appears as

00:27:06.206 --> 00:27:06.966 A:middle
quickly as possible.

00:27:08.026 --> 00:27:10.546 A:middle
Even with partial segments as

00:27:10.546 --> 00:27:12.546 A:middle
long as the second, you can see

00:27:12.746 --> 00:27:15.436 A:middle
how this dramatically reduces

00:27:15.436 --> 00:27:18.006 A:middle
the amount of time it takes for

00:27:18.006 --> 00:27:20.306 A:middle
a given frame of media to travel

00:27:20.626 --> 00:27:23.556 A:middle
from the server all the way to

00:27:24.216 --> 00:27:24.526 A:middle
the client.

00:27:24.836 --> 00:27:26.456 A:middle
Now, the last couple of changes

00:27:26.456 --> 00:27:29.066 A:middle
are essentially optimizations to

00:27:29.066 --> 00:27:30.056 A:middle
this basic flow.

00:27:30.776 --> 00:27:33.576 A:middle
The first one is about reducing

00:27:33.576 --> 00:27:35.506 A:middle
this overhead of transferring

00:27:35.506 --> 00:27:36.876 A:middle
the playlist over and over

00:27:36.876 --> 00:27:37.206 A:middle
again.

00:27:37.656 --> 00:27:39.196 A:middle
Now, why is that important?

00:27:40.166 --> 00:27:42.286 A:middle
Well, if this playlist you're

00:27:42.566 --> 00:27:44.346 A:middle
transferring has like three

00:27:44.346 --> 00:27:46.216 A:middle
hours or even five hours of

00:27:46.216 --> 00:27:47.886 A:middle
worth of segments in it and

00:27:47.886 --> 00:27:49.726 A:middle
you're transferring it like

00:27:49.916 --> 00:27:51.626 A:middle
three to four times a second

00:27:52.216 --> 00:27:53.796 A:middle
that can become significant,

00:27:53.796 --> 00:27:54.566 A:middle
even with gzip.

00:27:56.006 --> 00:27:58.836 A:middle
And so instead, we're adding

00:27:58.836 --> 00:28:00.276 A:middle
Delta playlist updates.

00:27:58.836 --> 00:28:00.276 A:middle
Delta playlist updates.

00:28:01.596 --> 00:28:04.076 A:middle
And so, the way that works is

00:28:04.076 --> 00:28:05.596 A:middle
that, again, the server

00:28:05.596 --> 00:28:07.186 A:middle
announces the client that it can

00:28:07.186 --> 00:28:08.876 A:middle
has the ability to provide Delta

00:28:08.876 --> 00:28:09.396 A:middle
updates.

00:28:09.606 --> 00:28:10.806 A:middle
And it does that with a

00:28:10.806 --> 00:28:12.936 A:middle
CAN-SKIP-UNTIL attribute that

00:28:12.936 --> 00:28:15.046 A:middle
tells the client if you ask for

00:28:15.046 --> 00:28:16.296 A:middle
a Delta update, it's going to

00:28:16.296 --> 00:28:17.596 A:middle
skip all the segments until a

00:28:17.596 --> 00:28:18.956 A:middle
certain number of seconds away

00:28:18.956 --> 00:28:19.896 A:middle
from the live edge.

00:28:20.636 --> 00:28:22.536 A:middle
If the client sees that and it

00:28:22.536 --> 00:28:24.176 A:middle
knows the last time it updated

00:28:24.176 --> 00:28:25.626 A:middle
the playlist and so it figures,

00:28:25.846 --> 00:28:27.136 A:middle
it can make do with a Delta

00:28:27.136 --> 00:28:28.366 A:middle
update and not miss any

00:28:28.366 --> 00:28:29.116 A:middle
information.

00:28:29.646 --> 00:28:31.066 A:middle
Then it can make an explicit

00:28:31.066 --> 00:28:32.896 A:middle
request the next time it updates

00:28:32.896 --> 00:28:34.346 A:middle
a playlist for a Delta update.

00:28:35.486 --> 00:28:39.036 A:middle
And that update carries just the

00:28:39.366 --> 00:28:42.906 A:middle
last few segments in the

00:28:42.906 --> 00:28:43.896 A:middle
playlist, the ones that are

00:28:43.896 --> 00:28:45.236 A:middle
closest to the live edge.

00:28:46.106 --> 00:28:47.746 A:middle
And it skips the earlier part of

00:28:47.746 --> 00:28:48.606 A:middle
the playlist that the client

00:28:48.606 --> 00:28:50.006 A:middle
already has.

00:28:52.736 --> 00:28:54.096 A:middle
So here's an example.

00:28:55.106 --> 00:28:57.326 A:middle
In this case, you can see that

00:28:57.606 --> 00:28:59.906 A:middle
the client is asking for a Delta

00:28:59.906 --> 00:29:01.766 A:middle
update by specifying the

00:28:59.906 --> 00:29:01.766 A:middle
update by specifying the

00:29:01.766 --> 00:29:02.726 A:middle
underscore HLS underscore

00:29:02.726 --> 00:29:05.966 A:middle
skip=YES query parameter, when

00:29:05.966 --> 00:29:07.916 A:middle
it makes its play playlist get

00:29:07.916 --> 00:29:08.486 A:middle
request.

00:29:08.936 --> 00:29:11.526 A:middle
In the playlist that comes back,

00:29:12.456 --> 00:29:13.176 A:middle
you'll see that there's a

00:29:13.176 --> 00:29:15.716 A:middle
CAN-SKIP-UNTIL, which tells the

00:29:15.716 --> 00:29:17.166 A:middle
client that when it asks for a

00:29:17.166 --> 00:29:19.066 A:middle
Delta update that the Delta

00:29:19.066 --> 00:29:20.126 A:middle
update will skip everything

00:29:20.126 --> 00:29:22.016 A:middle
until the last 36 seconds before

00:29:22.016 --> 00:29:22.866 A:middle
the live edge.

00:29:24.006 --> 00:29:26.006 A:middle
And then the last new tag here

00:29:26.306 --> 00:29:27.396 A:middle
is this skip tag.

00:29:28.006 --> 00:29:29.156 A:middle
And the way you can think of the

00:29:29.156 --> 00:29:32.786 A:middle
skip tag is it is a stand in for

00:29:32.996 --> 00:29:36.596 A:middle
1700 xm segment, xm segment tags

00:29:36.856 --> 00:29:37.796 A:middle
that would have been there in a

00:29:37.796 --> 00:29:39.466 A:middle
full playlist update.

00:29:40.476 --> 00:29:42.546 A:middle
So that's Delta updates and

00:29:42.546 --> 00:29:45.066 A:middle
allows us to really minimize the

00:29:45.066 --> 00:29:47.036 A:middle
number or the amount of network

00:29:47.036 --> 00:29:48.356 A:middle
traffic it takes to constantly

00:29:48.356 --> 00:29:49.756 A:middle
refresh the playlist without

00:29:49.756 --> 00:29:51.226 A:middle
losing any of the generality and

00:29:51.226 --> 00:29:53.116 A:middle
power that HLS Playlist give

00:29:53.116 --> 00:29:53.316 A:middle
you.

00:29:53.966 --> 00:29:55.776 A:middle
So now, let's look at the last

00:29:55.776 --> 00:29:57.396 A:middle
change and this is the one that

00:29:57.696 --> 00:30:00.166 A:middle
helps us switch bit rate tiers

00:29:57.696 --> 00:30:00.166 A:middle
helps us switch bit rate tiers

00:30:00.376 --> 00:30:01.156 A:middle
more rapidly.

00:30:02.046 --> 00:30:02.866 A:middle
They're called Rendition

00:30:02.866 --> 00:30:03.576 A:middle
Reports.

00:30:04.086 --> 00:30:06.816 A:middle
And the idea is that, when your

00:30:06.816 --> 00:30:08.866 A:middle
client loads the most up to date

00:30:08.996 --> 00:30:10.906 A:middle
version of a particular playlist

00:30:11.006 --> 00:30:12.986 A:middle
for a particular bit rate that

00:30:13.046 --> 00:30:15.256 A:middle
update can carry an up to date

00:30:15.256 --> 00:30:17.456 A:middle
kind of a peek into other

00:30:17.456 --> 00:30:19.366 A:middle
renditions that the client might

00:30:19.366 --> 00:30:20.646 A:middle
decide or interesting to switch

00:30:20.646 --> 00:30:23.416 A:middle
to in the next second or two.

00:30:23.656 --> 00:30:25.806 A:middle
Specifically, the Rendition

00:30:25.806 --> 00:30:27.186 A:middle
Reports carry the last media

00:30:27.186 --> 00:30:29.056 A:middle
sequence number in that pure

00:30:29.056 --> 00:30:30.956 A:middle
playlist in its last partial

00:30:30.956 --> 00:30:31.616 A:middle
segment number.

00:30:31.896 --> 00:30:33.016 A:middle
And that gives the client what

00:30:33.016 --> 00:30:34.956 A:middle
it needs to compose the URL to

00:30:34.956 --> 00:30:36.216 A:middle
get that latest playlist.

00:30:36.626 --> 00:30:38.776 A:middle
So it looks like this.

00:30:39.776 --> 00:30:41.746 A:middle
In this example, we have the

00:30:41.826 --> 00:30:44.436 A:middle
client asking for an update of

00:30:44.436 --> 00:30:45.766 A:middle
the one-megabit playlist.

00:30:46.366 --> 00:30:47.686 A:middle
And when it's doing that, it's

00:30:47.686 --> 00:30:49.626 A:middle
using the HLS report query

00:30:49.626 --> 00:30:52.106 A:middle
parameter to ask for a peek into

00:30:52.106 --> 00:30:53.416 A:middle
the two-megabit playlist that's

00:30:53.416 --> 00:30:54.346 A:middle
on the same server.

00:30:54.916 --> 00:30:57.496 A:middle
When it gets its playlist back,

00:30:57.916 --> 00:30:59.126 A:middle
the playlist will contain a

00:30:59.126 --> 00:31:00.466 A:middle
rendition report tag.

00:30:59.126 --> 00:31:00.466 A:middle
rendition report tag.

00:31:00.946 --> 00:31:02.846 A:middle
And that has a variety of

00:31:02.846 --> 00:31:04.526 A:middle
information about that other

00:31:04.526 --> 00:31:05.086 A:middle
rendition.

00:31:05.646 --> 00:31:10.006 A:middle
So, if we put all these changes

00:31:10.006 --> 00:31:13.666 A:middle
together, the question is, how

00:31:13.666 --> 00:31:14.486 A:middle
well do they work.

00:31:14.996 --> 00:31:17.006 A:middle
Do you guys want to see a demo?

00:31:18.046 --> 00:31:18.126 A:middle
&gt;&gt; Yeah.

00:31:18.326 --> 00:31:22.796 A:middle
&gt;&gt; Let's do it.

00:31:22.796 --> 00:31:24.636 A:middle
You know, when we were putting

00:31:24.636 --> 00:31:27.056 A:middle
the session together, we were

00:31:27.056 --> 00:31:29.086 A:middle
like, "Yeah, we could do a live

00:31:29.086 --> 00:31:30.336 A:middle
demo or we could do a Live

00:31:30.336 --> 00:31:31.526 A:middle
Stream from Cupertino."

00:31:32.086 --> 00:31:34.306 A:middle
But wouldn't it be more

00:31:34.396 --> 00:31:36.356 A:middle
demonstrative to do a live demo

00:31:36.356 --> 00:31:37.396 A:middle
from somewhere a little bit

00:31:37.436 --> 00:31:38.236 A:middle
further away?

00:31:38.956 --> 00:31:42.356 A:middle
Maybe somewhere 7,000 miles

00:31:42.356 --> 00:31:44.776 A:middle
away, 12,000 kilometers

00:31:44.776 --> 00:31:46.216 A:middle
somewhere like Sydney,

00:31:46.216 --> 00:31:46.976 A:middle
Australia?

00:31:47.516 --> 00:31:50.056 A:middle
[ Applause and Cheering ]

00:31:50.556 --> 00:31:53.596 A:middle
But wait, do we know anyone in

00:31:53.596 --> 00:31:54.036 A:middle
Sydney?

00:31:55.466 --> 00:31:56.596 A:middle
Matt. We know Matt.

00:31:57.436 --> 00:32:01.416 A:middle
Let's call Matt.

00:31:57.436 --> 00:32:01.416 A:middle
Let's call Matt.

00:32:02.156 --> 00:32:03.246 A:middle
OK. Let's see.

00:32:03.686 --> 00:32:04.836 A:middle
Geez, I hope Matt is awake.

00:32:13.046 --> 00:32:14.586 A:middle
&gt;&gt; Good day, Roger.

00:32:15.356 --> 00:32:16.076 A:middle
&gt;&gt; Hey, Matt.

00:32:16.076 --> 00:32:16.496 A:middle
How are you?

00:32:17.456 --> 00:32:18.506 A:middle
&gt;&gt; I'm well, thank you.

00:32:18.746 --> 00:32:21.636 A:middle
&gt;&gt; Great. Hey, say, I am here at

00:32:21.636 --> 00:32:24.156 A:middle
WWDC and I want to show these

00:32:24.156 --> 00:32:26.046 A:middle
folks Low-Latency HLS.

00:32:26.596 --> 00:32:27.736 A:middle
Do you still have that Stream

00:32:27.736 --> 00:32:28.076 A:middle
running?

00:32:28.966 --> 00:32:29.816 A:middle
&gt;&gt; I sure do.

00:32:29.866 --> 00:32:31.076 A:middle
&gt;&gt; Oh, fantastic.

00:32:31.846 --> 00:32:35.056 A:middle
OK. Let's tune in.

00:32:35.056 --> 00:32:36.026 A:middle
See what we got here.

00:32:36.496 --> 00:32:38.356 A:middle
I'm got my Apple TV.

00:32:38.526 --> 00:32:39.626 A:middle
OK. There we go.

00:32:40.356 --> 00:32:42.106 A:middle
OK. Hey, fantastic I'm at Apple

00:32:42.106 --> 00:32:42.776 A:middle
TV.

00:32:43.556 --> 00:32:43.946 A:middle
All right.

00:32:44.116 --> 00:32:45.176 A:middle
So let's bring up our app.

00:32:45.296 --> 00:32:47.076 A:middle
We got our Sydney Stream here.

00:32:47.076 --> 00:32:48.166 A:middle
And let's tune in and see what

00:32:48.166 --> 00:32:49.246 A:middle
we got.

00:32:54.046 --> 00:32:55.636 A:middle
Sydney is not happening.

00:32:56.566 --> 00:32:57.976 A:middle
Let's see if we try that again.

00:33:04.476 --> 00:33:06.946 A:middle
OK. Let me try the Cupertino

00:33:06.946 --> 00:33:08.356 A:middle
Stream just to see if there's

00:33:08.356 --> 00:33:09.866 A:middle
someone-- oh, there's Simon.

00:33:09.866 --> 00:33:10.916 A:middle
Simon is in Cupertino.

00:33:11.456 --> 00:33:14.586 A:middle
So that's-- [laughter] we got

00:33:14.586 --> 00:33:15.486 A:middle
Simon going.

00:33:16.876 --> 00:33:18.026 A:middle
All right.

00:33:18.186 --> 00:33:20.466 A:middle
Let's try this one more time.

00:33:20.466 --> 00:33:25.836 A:middle
Are we-- Oops, come on, how do I

00:33:25.966 --> 00:33:27.076 A:middle
manage this thing?

00:33:28.796 --> 00:33:29.876 A:middle
Matt, you're still there right--

00:33:29.876 --> 00:33:30.676 A:middle
Whoa, there you are.

00:33:30.776 --> 00:33:31.596 A:middle
&gt;&gt; Yeah. I'm still here.

00:33:31.596 --> 00:33:31.866 A:middle
Hello.

00:33:31.866 --> 00:33:32.916 A:middle
&gt;&gt; OK, great.

00:33:35.336 --> 00:33:36.646 A:middle
But, hey, you know, what is that

00:33:36.646 --> 00:33:37.986 A:middle
the Sydney GPO behind you?

00:33:39.006 --> 00:33:40.256 A:middle
&gt;&gt; It sure is.

00:33:40.696 --> 00:33:41.586 A:middle
&gt;&gt; Oh man, come on.

00:33:42.376 --> 00:33:44.016 A:middle
We're not sorry-- I got to try

00:33:44.016 --> 00:33:44.456 A:middle
this again.

00:33:52.556 --> 00:33:54.786 A:middle
My Stream is not behaving the

00:33:54.786 --> 00:33:57.166 A:middle
way I want my Stream to be

00:33:58.036 --> 00:33:58.186 A:middle
today.

00:33:58.356 --> 00:33:59.676 A:middle
Yeah. Simon is still there.

00:34:00.636 --> 00:34:05.576 A:middle
Oh man. And there's-- OK,

00:34:05.576 --> 00:34:06.816 A:middle
there's-- Yeah, there is Matt.

00:34:07.406 --> 00:34:10.045 A:middle
And am I hitting play, pause?

00:34:10.556 --> 00:34:14.246 A:middle
Well, you know what, maybe we're

00:34:14.246 --> 00:34:16.946 A:middle
going to have to end up calling

00:34:17.146 --> 00:34:19.246 A:middle
Simon instead, which is kind of

00:34:19.246 --> 00:34:20.696 A:middle
a bummer because I really wanted

00:34:20.696 --> 00:34:23.976 A:middle
to show you guys the Stream.

00:34:24.045 --> 00:34:24.516 A:middle
Let's see.

00:34:25.255 --> 00:34:25.966 A:middle
Hold our breath.

00:34:25.966 --> 00:34:26.525 A:middle
Are we good?

00:34:27.416 --> 00:34:28.386 A:middle
Did you guys have to restart

00:34:28.386 --> 00:34:28.766 A:middle
Stream?

00:34:29.815 --> 00:34:30.795 A:middle
&gt;&gt; The network went away for a

00:34:30.835 --> 00:34:31.025 A:middle
bit.

00:34:31.216 --> 00:34:32.176 A:middle
&gt;&gt; The network went away.

00:34:33.076 --> 00:34:33.536 A:middle
That's great.

00:34:40.366 --> 00:34:40.766 A:middle
All right.

00:34:40.976 --> 00:34:42.806 A:middle
We're having-- Let me just see

00:34:42.896 --> 00:34:45.156 A:middle
if maybe we're not plugged in

00:34:45.156 --> 00:34:45.426 A:middle
right.

00:34:48.196 --> 00:34:49.565 A:middle
These live demos just killing

00:34:49.565 --> 00:34:49.656 A:middle
me.

00:35:01.256 --> 00:35:02.936 A:middle
Double tap this and this is

00:35:04.156 --> 00:35:06.616 A:middle
going to try to get rid of this

00:35:06.616 --> 00:35:06.906 A:middle
guy.

00:35:07.306 --> 00:35:08.266 A:middle
Yeah, I don't know if this going

00:35:08.266 --> 00:35:08.886 A:middle
to help me but let's give a

00:35:08.886 --> 00:35:08.976 A:middle
shot.

00:35:16.206 --> 00:35:18.606 A:middle
Oh, man. All right.

00:35:18.686 --> 00:35:20.026 A:middle
I think we're going to try this

00:35:20.026 --> 00:35:22.846 A:middle
one more time and then we are

00:35:23.566 --> 00:35:24.226 A:middle
going to back up.

00:35:24.226 --> 00:35:25.496 A:middle
All right.

00:35:26.356 --> 00:35:27.056 A:middle
Sorry, Matt.

00:35:27.056 --> 00:35:28.326 A:middle
We're having trouble with the

00:35:28.326 --> 00:35:29.146 A:middle
Stream over here.

00:35:29.146 --> 00:35:33.396 A:middle
So let me-- Thanks for showing

00:35:33.396 --> 00:35:34.676 A:middle
up and we're able to see you for

00:35:34.676 --> 00:35:36.166 A:middle
a little bit but I'm going to

00:35:36.166 --> 00:35:37.856 A:middle
have to go to Cupertino.

00:35:37.856 --> 00:35:38.086 A:middle
&gt;&gt; All right.

00:35:38.086 --> 00:35:38.796 A:middle
No problem.

00:35:38.796 --> 00:35:39.176 A:middle
&gt;&gt; All right.

00:35:39.756 --> 00:35:41.006 A:middle
Well, that's really a bummer but

00:35:41.006 --> 00:35:42.696 A:middle
let's call Simon anyway.

00:35:42.916 --> 00:35:43.796 A:middle
This is why you have backups, I

00:35:43.796 --> 00:35:43.956 A:middle
guess.

00:35:49.926 --> 00:35:50.886 A:middle
Hey, Simon, are you there?

00:35:51.576 --> 00:35:52.726 A:middle
&gt;&gt; Yeah, I'm here Roger.

00:35:52.726 --> 00:35:53.656 A:middle
How are you?

00:35:53.656 --> 00:35:54.936 A:middle
&gt;&gt; Good. Simon is also

00:35:54.936 --> 00:35:55.506 A:middle
Australian.

00:35:55.506 --> 00:35:56.666 A:middle
I realized that's not-- that's

00:35:56.666 --> 00:35:57.926 A:middle
kind of cool comfort but there

00:35:57.926 --> 00:35:58.066 A:middle
he is.

00:35:58.066 --> 00:35:58.776 A:middle
&gt;&gt; You got Australians

00:35:58.776 --> 00:35:59.286 A:middle
everywhere.

00:36:00.776 --> 00:36:04.026 A:middle
&gt;&gt; So Simon, I wanted to show

00:36:04.026 --> 00:36:05.686 A:middle
the folks here a Low-Latency HLS

00:36:05.686 --> 00:36:06.166 A:middle
Stream.

00:36:06.586 --> 00:36:07.916 A:middle
&gt;&gt; Oh you bet.

00:36:08.116 --> 00:36:09.316 A:middle
&gt;&gt; So why don't we do this.

00:36:09.316 --> 00:36:11.186 A:middle
I'll have you raise your hand

00:36:11.506 --> 00:36:13.356 A:middle
and people hear you said-- if

00:36:13.356 --> 00:36:14.776 A:middle
you said when you do it, they'll

00:36:14.776 --> 00:36:16.126 A:middle
hear you over the audio.

00:36:16.126 --> 00:36:17.066 A:middle
And then they'll see you on the

00:36:17.066 --> 00:36:17.346 A:middle
Stream.

00:36:17.346 --> 00:36:17.846 A:middle
Now, they'll give you-- a give

00:36:17.906 --> 00:36:19.486 A:middle
them a sense of what the video

00:36:19.486 --> 00:36:20.186 A:middle
latency is.

00:36:20.186 --> 00:36:21.036 A:middle
So, I want you to raise your

00:36:21.036 --> 00:36:21.546 A:middle
hand.

00:36:21.546 --> 00:36:23.636 A:middle
&gt;&gt; OK. You bet.

00:36:23.836 --> 00:36:24.786 A:middle
&gt;&gt; OK. Raise your hand.

00:36:24.836 --> 00:36:27.026 A:middle
&gt;&gt; Hey, everybody.

00:36:27.806 --> 00:36:28.796 A:middle
I'm raising my hand.

00:36:28.866 --> 00:36:30.216 A:middle
&gt;&gt; OK. Good.

00:36:30.216 --> 00:36:31.376 A:middle
Keep that hand up.

00:36:31.746 --> 00:36:34.246 A:middle
And-- oh you put it down.

00:36:34.566 --> 00:36:37.326 A:middle
OK. Now, give me three fingers.

00:36:38.276 --> 00:36:39.366 A:middle
&gt;&gt; Three fingers.

00:36:40.156 --> 00:36:41.626 A:middle
&gt;&gt; There we are.

00:36:41.626 --> 00:36:44.136 A:middle
So that's a-- they are about,

00:36:44.966 --> 00:36:45.936 A:middle
you know, [applause] HLS Stream

00:36:45.936 --> 00:36:47.406 A:middle
less than two seconds latency.

00:36:47.476 --> 00:36:49.386 A:middle
Thank you very much for helping

00:36:49.386 --> 00:36:50.236 A:middle
us out today, Simon.

00:36:50.836 --> 00:36:51.316 A:middle
&gt;&gt; You bet.

00:36:51.316 --> 00:36:52.856 A:middle
I hope you all enjoy the rest of

00:36:52.856 --> 00:36:53.646 A:middle
WWDC.

00:36:54.156 --> 00:36:55.776 A:middle
&gt;&gt; Thank you.

00:36:56.126 --> 00:37:00.116 A:middle
Alright. So that is Low-Latency

00:36:56.126 --> 00:37:00.116 A:middle
Alright. So that is Low-Latency

00:37:00.116 --> 00:37:00.616 A:middle
HLS.

00:37:01.086 --> 00:37:02.286 A:middle
So at this point, some of you

00:37:02.286 --> 00:37:04.226 A:middle
are probably wondering, how can

00:37:04.226 --> 00:37:05.356 A:middle
I give me some of that HLS

00:37:05.356 --> 00:37:06.606 A:middle
Low-Latency stuff?

00:37:07.736 --> 00:37:10.266 A:middle
And so, first of all, a lot of

00:37:10.266 --> 00:37:12.246 A:middle
your application developers and

00:37:12.246 --> 00:37:13.686 A:middle
so let's talk about that first.

00:37:14.696 --> 00:37:17.376 A:middle
The good news is by default, you

00:37:17.376 --> 00:37:18.606 A:middle
don't have to do anything if

00:37:18.606 --> 00:37:19.726 A:middle
you're using an AV Player to

00:37:19.806 --> 00:37:21.106 A:middle
play your Streams and you stand

00:37:21.106 --> 00:37:22.176 A:middle
up Low-Latency Stream, you'll

00:37:22.176 --> 00:37:22.886 A:middle
get it by default.

00:37:24.366 --> 00:37:25.756 A:middle
We do have a couple of new API's

00:37:25.936 --> 00:37:26.506 A:middle
however.

00:37:26.886 --> 00:37:29.026 A:middle
One that tells you how far

00:37:29.026 --> 00:37:30.196 A:middle
you're currently set from the

00:37:30.196 --> 00:37:32.096 A:middle
live edge and the other which is

00:37:32.096 --> 00:37:34.186 A:middle
a recommendation based on things

00:37:34.186 --> 00:37:35.556 A:middle
like round trip time we're

00:37:35.556 --> 00:37:36.026 A:middle
observing.

00:37:36.316 --> 00:37:37.356 A:middle
And so, you can use those

00:37:37.356 --> 00:37:38.516 A:middle
together to configure.

00:37:38.786 --> 00:37:39.736 A:middle
For instance, you see here a

00:37:39.736 --> 00:37:41.026 A:middle
little bit too close in your

00:37:41.026 --> 00:37:42.246 A:middle
risk of stalling, you can back

00:37:42.246 --> 00:37:42.906 A:middle
it off a little bit.

00:37:42.906 --> 00:37:45.046 A:middle
Maybe we should have done that

00:37:45.046 --> 00:37:45.296 A:middle
here.

00:37:45.296 --> 00:37:47.296 A:middle
The second is a way to allow you

00:37:47.296 --> 00:37:48.516 A:middle
to maintain the play head

00:37:48.516 --> 00:37:50.166 A:middle
position relative to the live

00:37:50.166 --> 00:37:50.496 A:middle
edge.

00:37:50.496 --> 00:37:51.316 A:middle
And the reason this is

00:37:51.316 --> 00:37:53.206 A:middle
interesting is because that

00:37:53.316 --> 00:37:54.686 A:middle
today if you're playing the Live

00:37:54.686 --> 00:37:55.446 A:middle
Stream and you go through a

00:37:55.446 --> 00:37:56.306 A:middle
tunnel or whatever and you

00:37:56.306 --> 00:37:57.796 A:middle
buffer for 10 seconds, when you

00:37:57.796 --> 00:37:59.506 A:middle
resume, you resume at the point

00:37:59.506 --> 00:38:00.866 A:middle
you stopped, which means you

00:37:59.506 --> 00:38:00.866 A:middle
you stopped, which means you

00:38:00.866 --> 00:38:01.826 A:middle
don't miss anything.

00:38:01.826 --> 00:38:03.006 A:middle
But every time you're buffering

00:38:03.006 --> 00:38:05.136 A:middle
a little bit further behind, and

00:38:05.136 --> 00:38:06.656 A:middle
so if you set automatically

00:38:06.656 --> 00:38:08.326 A:middle
preserves time offset from live

00:38:08.326 --> 00:38:10.366 A:middle
to yes, then every time after we

00:38:10.366 --> 00:38:11.606 A:middle
will buffer we will not

00:38:11.606 --> 00:38:13.526 A:middle
automatically jump ahead to that

00:38:13.526 --> 00:38:14.616 A:middle
same place from live.

00:38:14.616 --> 00:38:15.966 A:middle
And so, that keeps you at live.

00:38:16.376 --> 00:38:17.926 A:middle
The next thing to think about is

00:38:17.926 --> 00:38:20.796 A:middle
configuring your CDN.

00:38:21.026 --> 00:38:22.796 A:middle
We really wanted to avoid

00:38:24.266 --> 00:38:26.756 A:middle
placing exotic video specific

00:38:26.756 --> 00:38:28.206 A:middle
requirements on our CDNs because

00:38:28.206 --> 00:38:29.546 A:middle
we want them to be able to focus

00:38:29.546 --> 00:38:31.076 A:middle
on being great CDNs.

00:38:31.596 --> 00:38:32.476 A:middle
And so we kept things

00:38:32.476 --> 00:38:33.176 A:middle
straightforward.

00:38:33.996 --> 00:38:35.286 A:middle
You need to use industry

00:38:35.286 --> 00:38:37.436 A:middle
standard HTTP/2 to deliver your

00:38:37.436 --> 00:38:38.646 A:middle
HLS segments and playlists.

00:38:38.646 --> 00:38:40.006 A:middle
That includes supporting Push

00:38:40.096 --> 00:38:41.156 A:middle
and the standard priority

00:38:41.156 --> 00:38:41.786 A:middle
controls.

00:38:43.006 --> 00:38:44.516 A:middle
You should be putting a complete

00:38:44.516 --> 00:38:46.236 A:middle
ladder of tiers on each server.

00:38:46.346 --> 00:38:47.536 A:middle
You can still have multiple

00:38:47.536 --> 00:38:48.836 A:middle
redundant servers, but each one

00:38:48.836 --> 00:38:50.326 A:middle
should have a complete ladder so

00:38:50.326 --> 00:38:51.826 A:middle
we can minimize connection setup

00:38:51.866 --> 00:38:52.226 A:middle
time.

00:38:53.226 --> 00:38:55.356 A:middle
And you have to set up your CDN

00:38:55.356 --> 00:38:56.546 A:middle
so the aggregates duplicate

00:38:56.546 --> 00:38:57.246 A:middle
requests.

00:38:57.246 --> 00:38:58.616 A:middle
If Fred asked for a particular

00:38:58.616 --> 00:39:00.416 A:middle
playlist and it goes off to the

00:38:58.616 --> 00:39:00.416 A:middle
playlist and it goes off to the

00:39:00.416 --> 00:39:01.876 A:middle
origin to get it, and then Bob

00:39:01.876 --> 00:39:03.466 A:middle
asks for the same thing, rather

00:39:03.466 --> 00:39:04.656 A:middle
than sending the same request

00:39:04.656 --> 00:39:06.026 A:middle
through the CDN, you should park

00:39:06.026 --> 00:39:07.706 A:middle
it next to Fred's and wait for

00:39:07.706 --> 00:39:09.106 A:middle
that first response to come back

00:39:09.376 --> 00:39:10.496 A:middle
and then deliver them together.

00:39:11.096 --> 00:39:12.266 A:middle
Different CDNs call that

00:39:12.266 --> 00:39:13.796 A:middle
different things, Apache Traffic

00:39:13.796 --> 00:39:14.816 A:middle
Server calls it Reader while

00:39:14.816 --> 00:39:15.296 A:middle
writer.

00:39:15.626 --> 00:39:18.076 A:middle
Others might call it early

00:39:18.076 --> 00:39:19.066 A:middle
published or something like

00:39:19.066 --> 00:39:19.316 A:middle
that.

00:39:19.366 --> 00:39:20.616 A:middle
The main thing is to find that

00:39:20.616 --> 00:39:23.146 A:middle
and set it up.

00:39:23.266 --> 00:39:25.006 A:middle
Now, the main work here is

00:39:25.006 --> 00:39:26.026 A:middle
implementing your origin,

00:39:26.026 --> 00:39:27.186 A:middle
changing your packagers who

00:39:27.186 --> 00:39:28.816 A:middle
admit partial segments and

00:39:28.816 --> 00:39:30.116 A:middle
implementing the origin API.

00:39:30.336 --> 00:39:32.226 A:middle
To help you with that, we've

00:39:32.226 --> 00:39:34.146 A:middle
published a spec for Low-Latency

00:39:34.146 --> 00:39:34.396 A:middle
HLS.

00:39:34.396 --> 00:39:35.976 A:middle
It's available on the website.

00:39:35.976 --> 00:39:38.746 A:middle
There's a link to it through the

00:39:38.746 --> 00:39:39.896 A:middle
session page on the app.

00:39:40.606 --> 00:39:41.936 A:middle
It's currently structured as the

00:39:41.936 --> 00:39:42.786 A:middle
separate draft.

00:39:42.786 --> 00:39:44.176 A:middle
We plan to roll the rules into

00:39:44.176 --> 00:39:45.766 A:middle
the course back later this year.

00:39:46.466 --> 00:39:47.676 A:middle
It includes something new, which

00:39:47.676 --> 00:39:49.026 A:middle
is a Server Configuration

00:39:49.026 --> 00:39:49.576 A:middle
Profile.

00:39:49.856 --> 00:39:51.796 A:middle
And that has a set of attributes

00:39:51.796 --> 00:39:53.076 A:middle
of the server delivery chain

00:39:53.076 --> 00:39:54.396 A:middle
that required to engage

00:39:54.426 --> 00:39:55.776 A:middle
Low-Latency mode in the client.

00:39:56.076 --> 00:39:57.476 A:middle
The client will check these if

00:39:57.476 --> 00:39:58.836 A:middle
it doesn't see all the met,

00:39:59.136 --> 00:40:00.236 A:middle
it'll fall back to regular

00:39:59.136 --> 00:40:00.236 A:middle
it'll fall back to regular

00:40:00.236 --> 00:40:00.766 A:middle
latency.

00:40:02.136 --> 00:40:04.576 A:middle
Also, we're giving you a

00:40:04.576 --> 00:40:06.376 A:middle
reference implementation for

00:40:06.606 --> 00:40:08.446 A:middle
producing and Streaming

00:40:08.616 --> 00:40:10.186 A:middle
Low-Latency HLS Streams.

00:40:10.986 --> 00:40:12.566 A:middle
It's called a Low-Latency HLS

00:40:12.616 --> 00:40:13.856 A:middle
Beta Tools package.

00:40:14.636 --> 00:40:16.226 A:middle
And it has tools that will

00:40:16.226 --> 00:40:17.756 A:middle
generate a playlist either a

00:40:17.866 --> 00:40:19.696 A:middle
programmatic bit bop or from the

00:40:19.696 --> 00:40:21.546 A:middle
camera and package it into a

00:40:21.546 --> 00:40:22.736 A:middle
Low-Latency Stream.

00:40:23.456 --> 00:40:25.066 A:middle
It includes a front end to

00:40:25.066 --> 00:40:26.896 A:middle
Apache that implements the

00:40:26.896 --> 00:40:28.876 A:middle
origin API, including Blocking

00:40:28.876 --> 00:40:30.536 A:middle
Playlist Reload, Delta Updates,

00:40:30.536 --> 00:40:31.566 A:middle
Rendition Reports.

00:40:31.976 --> 00:40:33.406 A:middle
And you can use that either to

00:40:33.406 --> 00:40:34.796 A:middle
experiment with Low-Latency with

00:40:34.796 --> 00:40:36.366 A:middle
your app and also to compare it

00:40:36.666 --> 00:40:37.676 A:middle
against your backend

00:40:37.676 --> 00:40:38.826 A:middle
implementation when you build

00:40:38.826 --> 00:40:39.076 A:middle
that.

00:40:40.316 --> 00:40:42.146 A:middle
So that's what you need as

00:40:42.146 --> 00:40:43.936 A:middle
developers to get up and running

00:40:43.936 --> 00:40:44.566 A:middle
on this thing.

00:40:44.566 --> 00:40:45.776 A:middle
Let's talk about the roadmap to

00:40:45.776 --> 00:40:46.296 A:middle
users.

00:40:46.946 --> 00:40:48.926 A:middle
We recognize that Low-Latency

00:40:48.926 --> 00:40:50.556 A:middle
HLS is a major change.

00:40:51.186 --> 00:40:54.606 A:middle
And so, we are allowing you to

00:40:54.606 --> 00:40:55.956 A:middle
spend a bit of time getting to

00:40:55.956 --> 00:40:58.456 A:middle
know it and to we-- and to stand

00:40:58.456 --> 00:41:00.216 A:middle
up your implementations against

00:40:58.456 --> 00:41:00.216 A:middle
up your implementations against

00:41:00.216 --> 00:41:01.246 A:middle
our clients at scale.

00:41:02.026 --> 00:41:03.606 A:middle
So the short answer for what

00:41:03.606 --> 00:41:04.996 A:middle
that means is you need an app

00:41:04.996 --> 00:41:06.286 A:middle
entitlement for Low-Latency

00:41:06.286 --> 00:41:06.576 A:middle
mode.

00:41:06.876 --> 00:41:08.026 A:middle
This allows you to build your

00:41:08.026 --> 00:41:09.756 A:middle
app, test your Streams and even

00:41:09.756 --> 00:41:11.206 A:middle
deploy them and up to 10,000

00:41:11.206 --> 00:41:12.646 A:middle
beta users via TestFlight.

00:41:13.056 --> 00:41:14.546 A:middle
And then once you're confident

00:41:14.806 --> 00:41:15.846 A:middle
that things are working and the

00:41:15.846 --> 00:41:17.596 A:middle
beta period ends, you'll be able

00:41:17.596 --> 00:41:18.696 A:middle
to submit your apps to the

00:41:18.696 --> 00:41:19.046 A:middle
store.

00:41:19.586 --> 00:41:22.026 A:middle
So, in summary, go take a look

00:41:22.026 --> 00:41:23.936 A:middle
at the spec. Try it out in the

00:41:23.936 --> 00:41:26.316 A:middle
beta and start building your

00:41:26.316 --> 00:41:27.856 A:middle
back ends to support Low-Latency

00:41:27.856 --> 00:41:28.596 A:middle
Live Streams.

00:41:29.146 --> 00:41:31.256 A:middle
To help you with that, today or

00:41:31.256 --> 00:41:32.616 A:middle
this week rather, we have a

00:41:32.616 --> 00:41:34.186 A:middle
couple of HLS labs.

00:41:34.646 --> 00:41:35.806 A:middle
I'll be there along with a

00:41:35.806 --> 00:41:37.616 A:middle
number of other folks on my team

00:41:37.616 --> 00:41:38.736 A:middle
and we're happy to answer all

00:41:38.736 --> 00:41:40.206 A:middle
your questions about Low-Latency

00:41:40.206 --> 00:41:42.356 A:middle
HLS and any other HLS questions.

00:41:42.646 --> 00:41:43.926 A:middle
The first one is on Thursday

00:41:43.926 --> 00:41:44.916 A:middle
from 4 to 6.

00:41:45.156 --> 00:41:47.056 A:middle
The second is on Friday from 11

00:41:47.376 --> 00:41:48.596 A:middle
to 1, I think.

00:41:49.166 --> 00:41:51.136 A:middle
And so with that, thank you very

00:41:51.136 --> 00:41:52.086 A:middle
much for attending.

00:41:52.086 --> 00:41:53.396 A:middle
And I hope everyone has a great

00:41:53.396 --> 00:41:53.676 A:middle
show.

00:41:54.516 --> 00:41:58.500 A:middle
[ Applause ]
