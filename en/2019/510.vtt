WEBVTT

00:00:01.516 --> 00:00:04.500 A:middle
[ Music ]

00:00:07.796 --> 00:00:09.296 A:middle
&gt;&gt; Hello, and welcome to our

00:00:09.296 --> 00:00:11.706 A:middle
session about audio API updates.

00:00:12.116 --> 00:00:14.116 A:middle
My name is Peter Vasil, and I am

00:00:14.116 --> 00:00:15.656 A:middle
a software engineer in the Core

00:00:15.656 --> 00:00:16.276 A:middle
Audio team.

00:00:18.426 --> 00:00:20.066 A:middle
Let's start with what's new in

00:00:20.066 --> 00:00:21.186 A:middle
AVAudioEngine.

00:00:24.206 --> 00:00:25.226 A:middle
We have added a couple of

00:00:25.226 --> 00:00:26.976 A:middle
enhancements and new APIs to

00:00:26.976 --> 00:00:27.996 A:middle
AVAudioEngine.

00:00:28.946 --> 00:00:30.446 A:middle
We now have a voice processing

00:00:30.446 --> 00:00:30.946 A:middle
support.

00:00:31.946 --> 00:00:33.486 A:middle
We have added two new nodes,

00:00:33.726 --> 00:00:35.346 A:middle
AVAudioSourceNode and

00:00:35.346 --> 00:00:37.646 A:middle
AVAudioSinkNode, and we have

00:00:37.646 --> 00:00:38.826 A:middle
made some improvements to

00:00:38.826 --> 00:00:40.256 A:middle
spatial audio rendering.

00:00:41.616 --> 00:00:43.076 A:middle
Now, let's dive into the

00:00:45.976 --> 00:00:46.516 A:middle
details.

00:00:46.516 --> 00:00:48.236 A:middle
AVAudioEngine now has a voice

00:00:48.236 --> 00:00:49.156 A:middle
processing mode.

00:00:49.726 --> 00:00:51.916 A:middle
The main use case for the mode

00:00:51.916 --> 00:00:53.256 A:middle
is echo cancellation and

00:00:53.256 --> 00:00:54.926 A:middle
voice-over IP applications.

00:00:55.956 --> 00:00:56.836 A:middle
What does this mean?

00:00:57.836 --> 00:00:59.346 A:middle
When enabled, extra signal

00:00:59.346 --> 00:01:00.826 A:middle
processing is applied on the

00:00:59.346 --> 00:01:00.826 A:middle
processing is applied on the

00:01:00.826 --> 00:01:03.286 A:middle
incoming audio, and any audio

00:01:03.286 --> 00:01:04.676 A:middle
that is coming from the device

00:01:04.676 --> 00:01:06.046 A:middle
is taken out.

00:01:06.816 --> 00:01:09.136 A:middle
This requires that both input

00:01:09.136 --> 00:01:10.506 A:middle
and output nodes are in the

00:01:10.506 --> 00:01:11.686 A:middle
voice processing mode.

00:01:13.126 --> 00:01:15.236 A:middle
Therefore, when enabling the

00:01:15.236 --> 00:01:16.966 A:middle
mode on either of the I/O nodes,

00:01:17.536 --> 00:01:19.556 A:middle
the engine takes care that both

00:01:19.556 --> 00:01:21.406 A:middle
I/O nodes exist and that they

00:01:21.406 --> 00:01:22.506 A:middle
are switched to the voice

00:01:22.506 --> 00:01:23.336 A:middle
processing mode.

00:01:24.966 --> 00:01:26.296 A:middle
Voice processing is only

00:01:26.296 --> 00:01:27.886 A:middle
available when rendering to an

00:01:27.886 --> 00:01:29.906 A:middle
audio device, not a manual

00:01:29.906 --> 00:01:30.746 A:middle
rendering mode.

00:01:34.326 --> 00:01:35.966 A:middle
To enable or disable voice

00:01:35.966 --> 00:01:38.456 A:middle
processing, we can use set voice

00:01:38.496 --> 00:01:40.616 A:middle
processing enabled on either the

00:01:40.616 --> 00:01:42.066 A:middle
input or output node.

00:01:43.406 --> 00:01:44.826 A:middle
Voice processing cannot be

00:01:44.826 --> 00:01:47.046 A:middle
enabled dynamically, which means

00:01:47.106 --> 00:01:48.586 A:middle
the engine needs to be in a stop

00:01:48.586 --> 00:01:50.466 A:middle
state when enabling the mode.

00:01:50.466 --> 00:01:54.296 A:middle
The AV Echo Touch Sample Code

00:01:54.296 --> 00:01:56.726 A:middle
project demonstrates how to use

00:01:56.726 --> 00:01:57.826 A:middle
voice processing with

00:01:57.826 --> 00:01:59.396 A:middle
AVAudioEngine in detail.

00:01:59.846 --> 00:02:03.616 A:middle
Let's look at the new nodes in

00:01:59.846 --> 00:02:03.616 A:middle
Let's look at the new nodes in

00:02:03.616 --> 00:02:06.376 A:middle
AVAudioEngine, AVAudioSourceNode

00:02:06.376 --> 00:02:07.766 A:middle
and AVAudioSinkNode.

00:02:08.955 --> 00:02:10.826 A:middle
Both nodes wrap a user-defined

00:02:10.826 --> 00:02:13.006 A:middle
blog that allows apps to send or

00:02:13.006 --> 00:02:14.006 A:middle
receive audio from

00:02:14.006 --> 00:02:15.006 A:middle
AVAudioEngine.

00:02:16.176 --> 00:02:17.646 A:middle
When rendering to an audio

00:02:17.646 --> 00:02:20.056 A:middle
device, the block operates under

00:02:20.056 --> 00:02:21.476 A:middle
real-time constraints, which

00:02:21.476 --> 00:02:22.796 A:middle
means that within the block

00:02:22.796 --> 00:02:24.156 A:middle
there shouldn't be any blocking

00:02:24.156 --> 00:02:26.106 A:middle
calls like memory allocations,

00:02:26.566 --> 00:02:28.066 A:middle
call to lib dispatch, or

00:02:28.066 --> 00:02:28.946 A:middle
blocking on a mutex.

00:02:32.936 --> 00:02:35.176 A:middle
With AVAudioSourceNode, we pass

00:02:35.176 --> 00:02:36.566 A:middle
or render block to the node,

00:02:36.566 --> 00:02:38.236 A:middle
which sends audio data to its

00:02:38.236 --> 00:02:38.736 A:middle
output.

00:02:40.066 --> 00:02:41.626 A:middle
This makes it very easy to

00:02:41.626 --> 00:02:43.446 A:middle
create generated nodes without

00:02:43.446 --> 00:02:45.406 A:middle
having to implement a full audio

00:02:45.406 --> 00:02:47.106 A:middle
unit and wrap it with AVAudio

00:02:47.106 --> 00:02:47.486 A:middle
unit.

00:02:49.046 --> 00:02:51.306 A:middle
The node can be used in both

00:02:51.306 --> 00:02:52.936 A:middle
real time and manual rendering

00:02:52.936 --> 00:02:53.246 A:middle
mode.

00:02:54.476 --> 00:02:56.726 A:middle
AVAudioSourceNode support linear

00:02:56.726 --> 00:02:59.316 A:middle
PCM conversions such as sample

00:02:59.316 --> 00:03:01.056 A:middle
rate or bit depth conversions

00:02:59.316 --> 00:03:01.056 A:middle
rate or bit depth conversions

00:03:01.616 --> 00:03:04.996 A:middle
and has one output but no input.

00:03:09.436 --> 00:03:11.476 A:middle
This short code snippet shows

00:03:11.476 --> 00:03:13.366 A:middle
how to use AVAudioSourceNode.

00:03:14.056 --> 00:03:16.096 A:middle
As we can see, the block is

00:03:16.096 --> 00:03:18.126 A:middle
passed as an initializer

00:03:18.126 --> 00:03:19.986 A:middle
argument, and after creating the

00:03:19.986 --> 00:03:21.896 A:middle
node, it can be connected just

00:03:21.896 --> 00:03:22.906 A:middle
like any other node.

00:03:23.936 --> 00:03:25.676 A:middle
A more detailed example can be

00:03:25.676 --> 00:03:27.306 A:middle
found in our Signal Generator

00:03:27.306 --> 00:03:28.536 A:middle
Sample Code project.

00:03:32.356 --> 00:03:34.166 A:middle
Let's look at AVAudioSinkNode.

00:03:34.866 --> 00:03:37.156 A:middle
AVAudioSinkNode is a symmetrical

00:03:37.156 --> 00:03:37.876 A:middle
counterpart of

00:03:37.876 --> 00:03:39.256 A:middle
AVAudioSourceNode.

00:03:40.086 --> 00:03:41.916 A:middle
It wraps a user-defined block

00:03:41.966 --> 00:03:43.636 A:middle
that receives the input audio

00:03:43.636 --> 00:03:45.086 A:middle
from the node chain that is

00:03:45.086 --> 00:03:46.446 A:middle
connected to its input.

00:03:47.516 --> 00:03:49.796 A:middle
AVAudioSinkNode is restricted to

00:03:49.796 --> 00:03:50.776 A:middle
the input chain.

00:03:51.176 --> 00:03:52.746 A:middle
In other words, it must be

00:03:52.746 --> 00:03:54.056 A:middle
connected downstream of the

00:03:54.056 --> 00:03:54.796 A:middle
input node.

00:03:56.076 --> 00:03:57.496 A:middle
It does not support format

00:03:57.496 --> 00:03:59.306 A:middle
conversions, and the format

00:03:59.306 --> 00:04:00.916 A:middle
within the block has to be the

00:03:59.306 --> 00:04:00.916 A:middle
within the block has to be the

00:04:00.916 --> 00:04:02.336 A:middle
same as the hardware input

00:04:02.336 --> 00:04:02.836 A:middle
format.

00:04:04.236 --> 00:04:06.436 A:middle
The node can be useful for

00:04:06.436 --> 00:04:09.086 A:middle
voice-over IP application when

00:04:09.086 --> 00:04:10.756 A:middle
the input needs to be processed

00:04:10.756 --> 00:04:12.596 A:middle
in real time, in which case

00:04:12.596 --> 00:04:14.256 A:middle
installing a regular tap would

00:04:14.256 --> 00:04:15.936 A:middle
not be sufficient because the

00:04:15.936 --> 00:04:17.755 A:middle
tap doesn't operate in a

00:04:17.755 --> 00:04:18.815 A:middle
real-time context.

00:04:21.076 --> 00:04:22.746 A:middle
Here is a code snippet

00:04:22.746 --> 00:04:24.636 A:middle
demonstrating how to create an

00:04:24.636 --> 00:04:25.826 A:middle
AVAudioSinkNode.

00:04:26.466 --> 00:04:28.086 A:middle
It is quite similar to

00:04:28.086 --> 00:04:29.206 A:middle
AVAudioSourceNode.

00:04:29.976 --> 00:04:32.096 A:middle
The main steps to note here are

00:04:32.096 --> 00:04:33.606 A:middle
to initialize the node with a

00:04:33.606 --> 00:04:35.836 A:middle
blog, attach it to the engine,

00:04:36.146 --> 00:04:37.676 A:middle
and connect it to a node

00:04:37.676 --> 00:04:39.266 A:middle
downstream of the input node.

00:04:42.996 --> 00:04:44.266 A:middle
Now let's see the spatial

00:04:44.266 --> 00:04:45.576 A:middle
rendering improvements.

00:04:46.666 --> 00:04:48.426 A:middle
We have introduced an automatic

00:04:48.426 --> 00:04:51.256 A:middle
spatial rendering algorithm, and

00:04:51.256 --> 00:04:53.486 A:middle
AVAudioPlayerNode now supports

00:04:53.486 --> 00:04:55.636 A:middle
spatialization of multichannel

00:04:55.636 --> 00:04:56.546 A:middle
audio content.

00:05:00.716 --> 00:05:02.076 A:middle
With the automatic spatial

00:05:02.076 --> 00:05:03.806 A:middle
rendering algorithm, the most

00:05:03.806 --> 00:05:05.446 A:middle
appropriate spatialization

00:05:05.446 --> 00:05:06.936 A:middle
algorithm is selected for the

00:05:06.936 --> 00:05:07.786 A:middle
current route.

00:05:08.626 --> 00:05:10.576 A:middle
This means developers don't need

00:05:10.576 --> 00:05:12.396 A:middle
to figure out what algorithms

00:05:12.396 --> 00:05:14.066 A:middle
are suitable for headphones or

00:05:14.066 --> 00:05:14.786 A:middle
different speaker

00:05:14.786 --> 00:05:15.816 A:middle
configurations.

00:05:16.896 --> 00:05:18.846 A:middle
This adds near-field and in-head

00:05:18.846 --> 00:05:20.856 A:middle
rendering for headphones and

00:05:20.856 --> 00:05:22.426 A:middle
virtual surround for built-in

00:05:22.426 --> 00:05:24.546 A:middle
speakers is available starting

00:05:24.546 --> 00:05:26.466 A:middle
with iOS devices and laptops

00:05:26.466 --> 00:05:28.646 A:middle
from 2018 and newer.

00:05:32.096 --> 00:05:34.026 A:middle
Here we see the new API in the

00:05:34.026 --> 00:05:36.126 A:middle
AVAudio3DMixing protocol.

00:05:36.746 --> 00:05:39.656 A:middle
The AVAudio3DMixing rendering

00:05:39.656 --> 00:05:42.076 A:middle
algorithm enum has a new entry,

00:05:42.476 --> 00:05:43.006 A:middle
auto.

00:05:44.056 --> 00:05:45.926 A:middle
Additionally, we can specify the

00:05:45.926 --> 00:05:47.966 A:middle
output type with the output type

00:05:47.966 --> 00:05:48.576 A:middle
property.

00:05:49.076 --> 00:05:52.346 A:middle
With the property set to auto,

00:05:52.636 --> 00:05:54.146 A:middle
the output type can be

00:05:54.146 --> 00:05:56.346 A:middle
automatically detected in

00:05:56.346 --> 00:05:58.266 A:middle
real-time mode but not in manual

00:05:58.266 --> 00:05:59.076 A:middle
rendering mode.

00:06:03.056 --> 00:06:05.116 A:middle
With the ability to spatialize

00:06:05.116 --> 00:06:07.546 A:middle
multichannel streams, we support

00:06:07.546 --> 00:06:09.316 A:middle
point-source and ambience bed

00:06:09.316 --> 00:06:09.916 A:middle
rendering.

00:06:10.816 --> 00:06:12.476 A:middle
We also support channel-based

00:06:12.476 --> 00:06:14.066 A:middle
formats and higher-order

00:06:14.066 --> 00:06:15.576 A:middle
Ambisonics up to the third

00:06:15.576 --> 00:06:15.996 A:middle
order.

00:06:19.616 --> 00:06:20.786 A:middle
We have added two new

00:06:20.786 --> 00:06:22.706 A:middle
spatialization properties to the

00:06:22.706 --> 00:06:25.946 A:middle
AVAudio3DMixing protocol, source

00:06:25.946 --> 00:06:27.606 A:middle
mode and pointSource and head

00:06:27.606 --> 00:06:27.996 A:middle
mode.

00:06:29.936 --> 00:06:32.366 A:middle
SpatializeIfMono is legacy

00:06:32.366 --> 00:06:33.056 A:middle
behavior.

00:06:33.246 --> 00:06:35.416 A:middle
This is the same as bypass for

00:06:35.416 --> 00:06:37.546 A:middle
any multichannel stream, which

00:06:37.546 --> 00:06:39.596 A:middle
means a pass through or downmix

00:06:39.596 --> 00:06:40.806 A:middle
to the output format.

00:06:41.906 --> 00:06:44.016 A:middle
With pointSource, the audio is

00:06:44.016 --> 00:06:45.826 A:middle
sum to mono and render at the

00:06:45.826 --> 00:06:47.366 A:middle
location of the player node.

00:06:47.446 --> 00:06:50.096 A:middle
And with ambienceBed, the audio

00:06:50.096 --> 00:06:52.246 A:middle
is anchored to the 3D world and

00:06:52.246 --> 00:06:53.596 A:middle
is rotatable with the player

00:06:53.596 --> 00:06:55.506 A:middle
node's position relative to the

00:06:55.506 --> 00:06:56.716 A:middle
listener orientation.

00:06:59.326 --> 00:07:00.856 A:middle
Here we see an example of

00:06:59.326 --> 00:07:00.856 A:middle
Here we see an example of

00:07:00.856 --> 00:07:02.616 A:middle
ambienceBed source mode with

00:07:02.616 --> 00:07:04.376 A:middle
automatic rendering algorithm.

00:07:05.476 --> 00:07:07.496 A:middle
After setting the properties, it

00:07:07.496 --> 00:07:09.156 A:middle
is important to make sure the

00:07:09.156 --> 00:07:10.666 A:middle
format that is used for the

00:07:10.666 --> 00:07:12.426 A:middle
connection between player node

00:07:12.606 --> 00:07:13.836 A:middle
and the environment node

00:07:14.106 --> 00:07:15.406 A:middle
contains the multichannel

00:07:15.406 --> 00:07:15.936 A:middle
layout.

00:07:19.176 --> 00:07:21.546 A:middle
Now let's talk about what's new

00:07:21.546 --> 00:07:22.606 A:middle
in AVAudioSession.

00:07:25.316 --> 00:07:27.906 A:middle
AVAudioSessionPromptStyle is a

00:07:27.906 --> 00:07:30.576 A:middle
hint to apps that play voice

00:07:30.616 --> 00:07:32.366 A:middle
prompts in order to modify the

00:07:32.366 --> 00:07:34.076 A:middle
style of the played prompt.

00:07:35.036 --> 00:07:37.596 A:middle
For example, if Siri is speaking

00:07:37.596 --> 00:07:39.116 A:middle
or a phone call is ongoing,

00:07:39.506 --> 00:07:41.116 A:middle
verbal navigation prompts is a

00:07:41.116 --> 00:07:42.756 A:middle
confusing user experience.

00:07:43.696 --> 00:07:45.366 A:middle
We also don't want Siri to

00:07:45.366 --> 00:07:47.046 A:middle
record a navigation prompt.

00:07:47.946 --> 00:07:49.526 A:middle
Navigation apps, for example,

00:07:49.526 --> 00:07:51.236 A:middle
are encouraged to pay attention

00:07:51.236 --> 00:07:53.016 A:middle
to prompt style changes and

00:07:53.016 --> 00:07:54.486 A:middle
modify the prompts for better

00:07:54.486 --> 00:07:55.566 A:middle
user experience.

00:07:56.276 --> 00:07:57.746 A:middle
We have three prompt styles,

00:07:57.916 --> 00:08:00.066 A:middle
none, short, and normal.

00:07:57.916 --> 00:08:00.066 A:middle
none, short, and normal.

00:08:00.756 --> 00:08:02.676 A:middle
We can now indicate to disable

00:08:02.676 --> 00:08:04.446 A:middle
prompts completely, play

00:08:04.446 --> 00:08:06.496 A:middle
shortened prompts, or play the

00:08:06.496 --> 00:08:07.446 A:middle
regular prompts.

00:08:10.026 --> 00:08:11.126 A:middle
Let's look at other

00:08:11.126 --> 00:08:12.946 A:middle
AVAudioSession enhancements.

00:08:14.176 --> 00:08:15.766 A:middle
The default policy is to mute

00:08:15.766 --> 00:08:17.406 A:middle
haptics and system sounds when

00:08:17.406 --> 00:08:18.936 A:middle
audio recording is active.

00:08:19.836 --> 00:08:21.766 A:middle
A new property, allow haptics

00:08:21.766 --> 00:08:23.076 A:middle
and system sounds during

00:08:23.076 --> 00:08:25.436 A:middle
recording, allows system sounds

00:08:25.826 --> 00:08:27.186 A:middle
and haptics to play while the

00:08:27.186 --> 00:08:28.836 A:middle
session is actively using an

00:08:28.836 --> 00:08:29.566 A:middle
audio input.

00:08:30.366 --> 00:08:32.126 A:middle
It can be set using the

00:08:32.336 --> 00:08:33.466 A:middle
setter set allow haptics

00:08:33.466 --> 00:08:34.736 A:middle
and system sounds during

00:08:34.736 --> 00:08:35.376 A:middle
recording.

00:08:37.976 --> 00:08:40.096 A:middle
For more information, please

00:08:40.096 --> 00:08:41.846 A:middle
visit the developer website.

00:08:43.196 --> 00:08:44.936 A:middle
Thank you for your attention.
