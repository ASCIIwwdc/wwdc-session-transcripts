WEBVTT

00:00:01.176 --> 00:00:04.500 A:middle
[ Music ]

00:00:10.286 --> 00:00:10.636 A:middle
&gt;&gt; Hello.

00:00:11.516 --> 00:00:16.546 A:middle
[ Applause ]

00:00:17.046 --> 00:00:18.896 A:middle
Hello. My name is Michael LeHew

00:00:19.376 --> 00:00:20.406 A:middle
and I work on the Foundation

00:00:20.406 --> 00:00:21.046 A:middle
Team at Apple.

00:00:21.326 --> 00:00:23.286 A:middle
And today I'm really excited to

00:00:23.286 --> 00:00:24.656 A:middle
talk to you about the new

00:00:24.656 --> 00:00:25.756 A:middle
Combine Framework that we're

00:00:25.756 --> 00:00:26.776 A:middle
releasing this year.

00:00:27.686 --> 00:00:28.796 A:middle
And just to clear things up,

00:00:28.796 --> 00:00:29.696 A:middle
we're not talking about

00:00:29.696 --> 00:00:29.976 A:middle
tractors.

00:00:32.136 --> 00:00:33.336 A:middle
Before I go in-depth, I want to

00:00:33.336 --> 00:00:35.056 A:middle
start off with a brief overview

00:00:35.166 --> 00:00:36.606 A:middle
of what Combine is all about.

00:00:36.606 --> 00:00:40.446 A:middle
Often in our code, we have many

00:00:40.476 --> 00:00:41.536 A:middle
places where we have some sort

00:00:41.536 --> 00:00:44.866 A:middle
of value or event Publisher and

00:00:44.866 --> 00:00:46.236 A:middle
some Subscriber interested in

00:00:46.236 --> 00:00:49.126 A:middle
receiving values from that

00:00:49.126 --> 00:00:49.796 A:middle
Publisher.

00:00:50.386 --> 00:00:51.946 A:middle
And some interested party comes

00:00:51.946 --> 00:00:52.956 A:middle
along and establishes a

00:00:52.956 --> 00:00:54.176 A:middle
connection between these two

00:00:54.176 --> 00:00:54.706 A:middle
parties.

00:00:56.336 --> 00:00:58.626 A:middle
Once established, the Subscriber

00:00:59.006 --> 00:01:00.676 A:middle
sometimes declares that they are

00:00:59.006 --> 00:01:00.676 A:middle
sometimes declares that they are

00:01:00.676 --> 00:01:02.176 A:middle
interested in receiving values

00:01:02.176 --> 00:01:05.135 A:middle
from that Publisher, after which

00:01:05.135 --> 00:01:06.946 A:middle
the Publisher is free to begin

00:01:07.276 --> 00:01:08.736 A:middle
sending values downstream.

00:01:09.726 --> 00:01:12.196 A:middle
And this goes on until either

00:01:12.196 --> 00:01:13.546 A:middle
the Publisher decides to stop

00:01:13.546 --> 00:01:15.326 A:middle
sending values, whether because

00:01:15.326 --> 00:01:16.826 A:middle
it finished or there was some

00:01:16.826 --> 00:01:18.826 A:middle
sort of failure, or by someone

00:01:18.826 --> 00:01:20.126 A:middle
choosing to cancel the

00:01:20.126 --> 00:01:20.726 A:middle
subscription.

00:01:22.276 --> 00:01:23.916 A:middle
And as you've seen, this general

00:01:23.916 --> 00:01:26.006 A:middle
shape of communication appears

00:01:26.006 --> 00:01:27.826 A:middle
throughout our software, whether

00:01:27.826 --> 00:01:30.126 A:middle
it's callbacks or closures or

00:01:30.126 --> 00:01:31.156 A:middle
any other situations where

00:01:31.156 --> 00:01:31.586 A:middle
there's asynchronous

00:01:31.616 --> 00:01:31.976 A:middle
communication.

00:01:34.046 --> 00:01:35.266 A:middle
And it's this pattern that

00:01:35.266 --> 00:01:36.676 A:middle
Combine is all about.

00:01:39.046 --> 00:01:41.166 A:middle
With Combine, we define a

00:01:41.166 --> 00:01:42.856 A:middle
unified abstraction that

00:01:42.856 --> 00:01:44.316 A:middle
describes API that can process

00:01:44.316 --> 00:01:45.326 A:middle
values over time.

00:01:45.986 --> 00:01:48.476 A:middle
Let's take a look at the

00:01:48.476 --> 00:01:49.866 A:middle
specifics of what it means to be

00:01:49.866 --> 00:01:50.736 A:middle
a value Publisher.

00:01:53.046 --> 00:01:53.876 A:middle
Now we've already talked a lot

00:01:53.876 --> 00:01:55.096 A:middle
about this in our introduction

00:01:55.096 --> 00:01:58.286 A:middle
session, but to review, value

00:01:58.286 --> 00:02:00.296 A:middle
Publishers in Combine conform to

00:01:58.286 --> 00:02:00.296 A:middle
Publishers in Combine conform to

00:02:01.376 --> 00:02:02.426 A:middle
the Publisher protocol.

00:02:02.986 --> 00:02:06.586 A:middle
They specify two associated

00:02:06.586 --> 00:02:09.606 A:middle
type: their output which is the

00:02:09.606 --> 00:02:10.716 A:middle
kinds of values that they

00:02:10.716 --> 00:02:12.636 A:middle
publish and whether or not they

00:02:12.636 --> 00:02:13.166 A:middle
can fail.

00:02:13.756 --> 00:02:15.356 A:middle
And I'll have a lot more to say

00:02:15.356 --> 00:02:15.976 A:middle
about failure in a bit.

00:02:18.156 --> 00:02:20.626 A:middle
Publishers also describe how to

00:02:20.626 --> 00:02:22.326 A:middle
attach Subscribers to themselves

00:02:22.846 --> 00:02:23.736 A:middle
with the constraint that the

00:02:23.736 --> 00:02:25.346 A:middle
associated types must match.

00:02:26.766 --> 00:02:28.706 A:middle
And that's it.

00:02:28.946 --> 00:02:29.216 A:middle
All right.

00:02:29.216 --> 00:02:31.046 A:middle
I think that's enough theory for

00:02:31.046 --> 00:02:31.506 A:middle
right now.

00:02:31.806 --> 00:02:33.146 A:middle
This session is called Combine

00:02:33.146 --> 00:02:34.556 A:middle
in Practice, so let's actually

00:02:34.556 --> 00:02:34.976 A:middle
practice.

00:02:38.046 --> 00:02:39.076 A:middle
So I have a wizard friend.

00:02:39.296 --> 00:02:41.596 A:middle
He's really, really cool and he

00:02:41.706 --> 00:02:43.786 A:middle
wants to work on an app together

00:02:43.966 --> 00:02:44.966 A:middle
for a new wizard school that

00:02:44.966 --> 00:02:45.516 A:middle
he's founding.

00:02:45.516 --> 00:02:48.586 A:middle
One of the features that we want

00:02:48.586 --> 00:02:49.986 A:middle
to have in this app is going to

00:02:49.986 --> 00:02:51.446 A:middle
let you download super neat

00:02:51.446 --> 00:02:52.366 A:middle
magic tricks that have been

00:02:52.366 --> 00:02:54.046 A:middle
shared by wizards just like him.

00:02:54.436 --> 00:02:55.526 A:middle
Now he's not an app developer.

00:02:55.526 --> 00:02:57.346 A:middle
He's a wizard, so he gave me a

00:02:57.346 --> 00:02:59.586 A:middle
sketch, so this is my UI comp

00:02:59.586 --> 00:03:00.376 A:middle
that I get to work with.

00:02:59.586 --> 00:03:00.376 A:middle
that I get to work with.

00:03:01.826 --> 00:03:03.496 A:middle
Now he is a wizard but he does

00:03:03.496 --> 00:03:04.566 A:middle
know how to write code, enough

00:03:04.566 --> 00:03:06.586 A:middle
code to go and download a magic

00:03:06.586 --> 00:03:07.396 A:middle
trick for me.

00:03:07.396 --> 00:03:08.266 A:middle
And so he's going to go off and

00:03:08.266 --> 00:03:08.586 A:middle
do that.

00:03:08.586 --> 00:03:09.546 A:middle
And what I'm going to do is I'm

00:03:09.546 --> 00:03:10.716 A:middle
going to talk about how we are

00:03:10.716 --> 00:03:13.596 A:middle
using Combine to get to the

00:03:13.596 --> 00:03:15.076 A:middle
application values that we need

00:03:15.426 --> 00:03:17.316 A:middle
to say populate this label with

00:03:17.316 --> 00:03:17.976 A:middle
the name of a magic trick.

00:03:21.366 --> 00:03:23.166 A:middle
With Combine, NotificationCenter

00:03:23.166 --> 00:03:24.646 A:middle
will support exposing its

00:03:24.646 --> 00:03:26.316 A:middle
notifications with Publishers.

00:03:26.606 --> 00:03:28.166 A:middle
And so we'll go ahead and create

00:03:28.166 --> 00:03:29.976 A:middle
a Publisher for the notification

00:03:29.976 --> 00:03:31.346 A:middle
that my wizard friend is going

00:03:31.346 --> 00:03:31.806 A:middle
to deliver.

00:03:32.396 --> 00:03:35.056 A:middle
Now the return type of this

00:03:35.056 --> 00:03:36.096 A:middle
function is going to be a

00:03:36.096 --> 00:03:38.426 A:middle
Publisher, but in Combine what

00:03:38.426 --> 00:03:39.716 A:middle
really matters for a Publisher

00:03:39.936 --> 00:03:41.286 A:middle
are what its output and failure

00:03:41.286 --> 00:03:41.876 A:middle
types are.

00:03:44.046 --> 00:03:45.596 A:middle
NotificationCenter Publishers

00:03:45.656 --> 00:03:47.436 A:middle
deliver notifications and can

00:03:47.436 --> 00:03:48.166 A:middle
never fail.

00:03:48.166 --> 00:03:50.046 A:middle
And since we're going to be

00:03:50.046 --> 00:03:51.876 A:middle
talking a lot about Publishers,

00:03:52.286 --> 00:03:53.446 A:middle
I'm going to use this convention

00:03:53.446 --> 00:03:54.536 A:middle
of showing the output of a

00:03:54.536 --> 00:03:56.516 A:middle
Publisher on top and the failure

00:03:56.516 --> 00:03:57.836 A:middle
on the bottom for the rest of

00:03:57.836 --> 00:03:58.446 A:middle
our discussion.

00:03:59.086 --> 00:04:01.726 A:middle
So we have a notification

00:03:59.086 --> 00:04:01.726 A:middle
So we have a notification

00:04:01.726 --> 00:04:04.056 A:middle
Publisher, but what we really

00:04:04.056 --> 00:04:06.096 A:middle
want is the data inside that

00:04:06.096 --> 00:04:07.196 A:middle
describes the magic trick that

00:04:07.196 --> 00:04:07.976 A:middle
we've just downloaded.

00:04:10.216 --> 00:04:11.836 A:middle
My friend told me he put the

00:04:11.836 --> 00:04:13.296 A:middle
data in the user info dictionary

00:04:13.496 --> 00:04:15.536 A:middle
and lucky for us, Combine offers

00:04:15.536 --> 00:04:17.016 A:middle
a really useful map function

00:04:17.016 --> 00:04:19.206 A:middle
that lets us reach inside and

00:04:19.866 --> 00:04:21.266 A:middle
transform the notification to a

00:04:21.266 --> 00:04:21.866 A:middle
form we need.

00:04:22.096 --> 00:04:23.246 A:middle
This is very similar to

00:04:23.246 --> 00:04:25.366 A:middle
operations that already exist on

00:04:25.366 --> 00:04:25.946 A:middle
Sequence.

00:04:26.766 --> 00:04:27.786 A:middle
And now we can see that we're

00:04:27.786 --> 00:04:28.906 A:middle
working with a Publisher whose

00:04:28.906 --> 00:04:30.606 A:middle
output is data that can never

00:04:30.606 --> 00:04:31.286 A:middle
produce an error.

00:04:35.256 --> 00:04:36.956 A:middle
We call functions like map that

00:04:36.956 --> 00:04:38.936 A:middle
act on Publishers and return new

00:04:38.936 --> 00:04:40.426 A:middle
Publishers' operators.

00:04:40.956 --> 00:04:42.116 A:middle
And they come up a lot in

00:04:42.116 --> 00:04:42.526 A:middle
Combine.

00:04:43.186 --> 00:04:45.866 A:middle
Now my friend also told me that

00:04:45.866 --> 00:04:47.826 A:middle
the JSON payload -- or the data

00:04:47.826 --> 00:04:49.926 A:middle
will be a JSON payload of a type

00:04:49.926 --> 00:04:50.926 A:middle
that we've already defined in

00:04:50.926 --> 00:04:51.706 A:middle
our application.

00:04:52.256 --> 00:04:53.656 A:middle
So I can use another Combine

00:04:53.656 --> 00:04:55.196 A:middle
operator to attempt to decode

00:04:55.196 --> 00:04:56.746 A:middle
the data, and we call this

00:04:56.746 --> 00:04:57.596 A:middle
operator tryMap.

00:04:58.626 --> 00:05:00.716 A:middle
It's just like map except it

00:04:58.626 --> 00:05:00.716 A:middle
It's just like map except it

00:05:00.716 --> 00:05:02.106 A:middle
adds the ability to transform

00:05:02.156 --> 00:05:04.416 A:middle
any errors thrown into a failure

00:05:04.416 --> 00:05:05.116 A:middle
in the stream.

00:05:06.146 --> 00:05:07.926 A:middle
And indeed, the output of this

00:05:08.016 --> 00:05:09.926 A:middle
operator will be a Publisher of

00:05:09.926 --> 00:05:12.246 A:middle
magic tricks where the failure

00:05:12.246 --> 00:05:13.546 A:middle
conforms to the Swift error

00:05:13.546 --> 00:05:13.976 A:middle
protocol.

00:05:16.566 --> 00:05:18.476 A:middle
Decoding custom types from data

00:05:18.476 --> 00:05:20.246 A:middle
is such a common task that we

00:05:20.286 --> 00:05:21.606 A:middle
actually provide an operator

00:05:21.606 --> 00:05:22.836 A:middle
that takes care of this for you.

00:05:23.966 --> 00:05:25.356 A:middle
Simply call decode.

00:05:28.076 --> 00:05:28.736 A:middle
The Publisher's output --

00:05:29.516 --> 00:05:32.546 A:middle
[ Applause ]

00:05:33.046 --> 00:05:33.916 A:middle
The Publisher's output and

00:05:33.916 --> 00:05:35.026 A:middle
failure types will remain

00:05:35.026 --> 00:05:35.856 A:middle
exactly the same.

00:05:36.916 --> 00:05:38.246 A:middle
Now that we have a Publisher

00:05:38.246 --> 00:05:39.546 A:middle
that can fail though, I'd like

00:05:39.546 --> 00:05:40.576 A:middle
to talk a little bit more about

00:05:40.576 --> 00:05:43.116 A:middle
the things we can do.

00:05:43.356 --> 00:05:45.616 A:middle
In Combine, properly reacting to

00:05:45.616 --> 00:05:47.526 A:middle
potential failures is incredibly

00:05:47.526 --> 00:05:48.326 A:middle
important.

00:05:48.886 --> 00:05:50.536 A:middle
Every Publisher and Subscriber

00:05:50.536 --> 00:05:51.836 A:middle
gets a chance to describe the

00:05:51.836 --> 00:05:53.096 A:middle
exact kinds of failures that

00:05:53.096 --> 00:05:54.486 A:middle
they produce or allow.

00:05:55.096 --> 00:05:56.896 A:middle
And we built this into Combine

00:05:57.456 --> 00:05:58.986 A:middle
because just like Swift, we

00:05:58.986 --> 00:06:00.176 A:middle
didn't want to leave error

00:05:58.986 --> 00:06:00.176 A:middle
didn't want to leave error

00:06:00.176 --> 00:06:01.116 A:middle
handling to be something that

00:06:01.116 --> 00:06:02.666 A:middle
was purely convention-based.

00:06:03.636 --> 00:06:04.676 A:middle
We tried that in other

00:06:04.676 --> 00:06:05.216 A:middle
languages.

00:06:05.216 --> 00:06:06.236 A:middle
It didn't work out so well.

00:06:06.986 --> 00:06:08.846 A:middle
And so many types describe their

00:06:08.846 --> 00:06:10.256 A:middle
failure types as never.

00:06:10.256 --> 00:06:11.496 A:middle
And this is to indicate that

00:06:11.496 --> 00:06:12.966 A:middle
they can fail or that they

00:06:12.966 --> 00:06:14.296 A:middle
expect failure to be handled

00:06:14.296 --> 00:06:15.166 A:middle
earlier in the stream.

00:06:15.686 --> 00:06:18.546 A:middle
But for everything else, we

00:06:18.546 --> 00:06:20.906 A:middle
offer many operators that allow

00:06:20.906 --> 00:06:23.456 A:middle
you to react to and recover from

00:06:23.456 --> 00:06:24.836 A:middle
failure should it arise.

00:06:25.336 --> 00:06:28.186 A:middle
One of the simplest is just to

00:06:28.186 --> 00:06:29.356 A:middle
assert that failure can never

00:06:29.356 --> 00:06:29.726 A:middle
happen.

00:06:30.816 --> 00:06:32.646 A:middle
Not surprisingly, the failure

00:06:32.646 --> 00:06:33.816 A:middle
type of the return Publisher

00:06:33.816 --> 00:06:34.696 A:middle
will now be never.

00:06:35.426 --> 00:06:38.006 A:middle
But let's look at why.

00:06:38.226 --> 00:06:39.426 A:middle
Imagine a situation where we

00:06:39.426 --> 00:06:40.576 A:middle
have an upstream Publisher

00:06:41.216 --> 00:06:42.686 A:middle
connected to a downstream

00:06:42.856 --> 00:06:44.906 A:middle
Subscriber with an

00:06:44.906 --> 00:06:46.456 A:middle
assertNoFailure operator in the

00:06:46.456 --> 00:06:46.766 A:middle
middle.

00:06:47.706 --> 00:06:49.496 A:middle
Now this operator will happily

00:06:49.496 --> 00:06:50.836 A:middle
just forward values along should

00:06:50.836 --> 00:06:51.576 A:middle
they be received.

00:06:52.616 --> 00:06:54.676 A:middle
However, if an error arrives

00:06:54.676 --> 00:06:56.766 A:middle
from upstream, our program will

00:06:56.766 --> 00:06:58.636 A:middle
simply trap, and that's really

00:06:58.636 --> 00:07:00.086 A:middle
not the most magical outcome for

00:06:58.636 --> 00:07:00.086 A:middle
not the most magical outcome for

00:07:00.086 --> 00:07:00.956 A:middle
our wizardly customers.

00:07:04.046 --> 00:07:05.666 A:middle
Lucky for us, we have a lot of

00:07:05.666 --> 00:07:06.906 A:middle
other operators for working with

00:07:06.906 --> 00:07:07.736 A:middle
failure and combine.

00:07:08.586 --> 00:07:10.256 A:middle
In addition to asserting, we

00:07:10.256 --> 00:07:11.506 A:middle
allow you to attempt to retry

00:07:11.506 --> 00:07:13.626 A:middle
the connection to the upstream

00:07:13.626 --> 00:07:15.086 A:middle
Publisher or to transform the

00:07:15.086 --> 00:07:16.276 A:middle
error to another type.

00:07:16.276 --> 00:07:19.476 A:middle
A particularly useful operator

00:07:19.476 --> 00:07:20.146 A:middle
is catch.

00:07:20.756 --> 00:07:23.126 A:middle
catch lets you provide a closure

00:07:23.126 --> 00:07:24.386 A:middle
that defines a recovery

00:07:24.386 --> 00:07:26.476 A:middle
Publisher that will be used in

00:07:26.476 --> 00:07:27.806 A:middle
the case if failure arose on the

00:07:27.876 --> 00:07:29.506 A:middle
original upstream Publisher.

00:07:29.926 --> 00:07:31.466 A:middle
I'd like to take a look at how

00:07:31.466 --> 00:07:32.146 A:middle
this works.

00:07:32.966 --> 00:07:33.806 A:middle
We'll start with a similar

00:07:33.806 --> 00:07:35.176 A:middle
picture as before, except

00:07:35.176 --> 00:07:36.806 A:middle
instead of assertNoFailure we'll

00:07:36.806 --> 00:07:37.916 A:middle
use the catch operator.

00:07:38.876 --> 00:07:41.326 A:middle
As before, values will happily

00:07:41.326 --> 00:07:42.406 A:middle
forward along down to the

00:07:42.406 --> 00:07:43.586 A:middle
downstream Subscriber.

00:07:44.096 --> 00:07:46.756 A:middle
However, when an error arrives,

00:07:47.516 --> 00:07:49.116 A:middle
the existing upstream connection

00:07:49.406 --> 00:07:50.206 A:middle
will be terminated.

00:07:52.266 --> 00:07:53.286 A:middle
We'll then call the provided

00:07:53.286 --> 00:07:54.716 A:middle
Recovery closure which will

00:07:54.716 --> 00:07:56.566 A:middle
produce a new Publisher which we

00:07:56.566 --> 00:07:58.446 A:middle
then subscribe to and are free

00:07:58.446 --> 00:07:59.336 A:middle
to receive values from

00:07:59.336 --> 00:07:59.866 A:middle
henceforth.

00:08:01.076 --> 00:08:03.146 A:middle
In this way, the catch operator

00:08:03.146 --> 00:08:04.406 A:middle
lets us recover from an error by

00:08:04.406 --> 00:08:05.846 A:middle
replacing the original Publisher

00:08:05.846 --> 00:08:06.476 A:middle
with a new one.

00:08:07.436 --> 00:08:08.386 A:middle
Let's go ahead and use this in

00:08:08.386 --> 00:08:09.596 A:middle
our code now.

00:08:11.046 --> 00:08:12.256 A:middle
Using catch is pretty much the

00:08:12.256 --> 00:08:13.516 A:middle
same as any other operator,

00:08:13.916 --> 00:08:14.736 A:middle
although the closure here

00:08:14.736 --> 00:08:15.746 A:middle
expects for us to return a

00:08:15.746 --> 00:08:16.266 A:middle
Publisher.

00:08:17.636 --> 00:08:19.136 A:middle
Combine defines a special

00:08:19.136 --> 00:08:20.656 A:middle
Publisher for when you already

00:08:20.656 --> 00:08:21.676 A:middle
have a value that you want to

00:08:21.676 --> 00:08:22.116 A:middle
publish.

00:08:22.426 --> 00:08:24.746 A:middle
We call it Just, as in just

00:08:24.746 --> 00:08:25.576 A:middle
publish this value.

00:08:25.706 --> 00:08:26.466 A:middle
And it's one of the many

00:08:26.466 --> 00:08:28.346 A:middle
examples of Publishers that

00:08:28.346 --> 00:08:30.836 A:middle
Combine comes with from the

00:08:30.836 --> 00:08:31.186 A:middle
start.

00:08:32.626 --> 00:08:34.395 A:middle
And with that, the type of our

00:08:34.395 --> 00:08:35.976 A:middle
return Publisher can no longer

00:08:35.976 --> 00:08:36.336 A:middle
fail.

00:08:39.046 --> 00:08:39.976 A:middle
Now at this point I'd like to

00:08:39.976 --> 00:08:40.616 A:middle
review the different

00:08:40.616 --> 00:08:41.676 A:middle
transformations we've already

00:08:41.676 --> 00:08:41.936 A:middle
done.

00:08:42.486 --> 00:08:45.016 A:middle
We started with our Publisher of

00:08:45.016 --> 00:08:47.536 A:middle
notifications, which we then

00:08:47.536 --> 00:08:49.206 A:middle
mapped over to get to the data

00:08:49.206 --> 00:08:50.276 A:middle
that we knew that we wanted to

00:08:50.276 --> 00:08:50.786 A:middle
decode.

00:08:52.136 --> 00:08:53.786 A:middle
Afterwards, we made use of the

00:08:53.786 --> 00:08:56.346 A:middle
decode operator to transform our

00:08:56.346 --> 00:08:57.996 A:middle
data into a user-defined type.

00:08:59.366 --> 00:09:00.756 A:middle
But because decoding can fail

00:08:59.366 --> 00:09:00.756 A:middle
But because decoding can fail

00:09:00.876 --> 00:09:03.926 A:middle
for myriad reasons, we account

00:09:03.926 --> 00:09:05.086 A:middle
for that by replacing the

00:09:05.086 --> 00:09:06.576 A:middle
upstream with a placeholder

00:09:06.736 --> 00:09:07.966 A:middle
should failure arise.

00:09:10.276 --> 00:09:13.496 A:middle
But wait, once we switch to the

00:09:13.496 --> 00:09:15.106 A:middle
Recovery Publisher, we're never

00:09:15.106 --> 00:09:15.696 A:middle
going to see another

00:09:15.696 --> 00:09:16.606 A:middle
notification again.

00:09:16.976 --> 00:09:18.416 A:middle
We terminated that subscription.

00:09:18.416 --> 00:09:20.916 A:middle
What we really want is the

00:09:20.916 --> 00:09:22.456 A:middle
ability to try to decode and if

00:09:22.456 --> 00:09:23.786 A:middle
that fails, use a placeholder

00:09:23.946 --> 00:09:25.086 A:middle
while maintaining a connection

00:09:25.086 --> 00:09:26.236 A:middle
to the original upstream.

00:09:26.716 --> 00:09:29.586 A:middle
Not surprisingly, Combine has an

00:09:29.586 --> 00:09:30.916 A:middle
operator for that.

00:09:30.996 --> 00:09:32.046 A:middle
We call it flatMap.

00:09:33.836 --> 00:09:35.626 A:middle
flatMap works a lot like map,

00:09:36.076 --> 00:09:36.666 A:middle
hence the name.

00:09:37.696 --> 00:09:38.646 A:middle
You're given values from the

00:09:38.646 --> 00:09:40.226 A:middle
upstream Publisher with the

00:09:40.226 --> 00:09:41.376 A:middle
expectation though that you're

00:09:41.376 --> 00:09:43.326 A:middle
going to produce a new Publisher

00:09:43.416 --> 00:09:44.196 A:middle
from that value.

00:09:45.226 --> 00:09:46.356 A:middle
flatMap will then handle the

00:09:46.356 --> 00:09:47.876 A:middle
details of subscribing to this

00:09:47.876 --> 00:09:49.866 A:middle
nested Publisher offering its

00:09:49.866 --> 00:09:50.896 A:middle
values downstream.

00:09:52.346 --> 00:09:53.366 A:middle
So let's take a look at how this

00:09:53.366 --> 00:09:55.546 A:middle
works before we jump back to the

00:09:55.546 --> 00:09:55.926 A:middle
code.

00:09:58.176 --> 00:09:59.656 A:middle
As before, values are going to

00:09:59.656 --> 00:10:00.906 A:middle
arrive from upstream into our

00:09:59.656 --> 00:10:00.906 A:middle
arrive from upstream into our

00:10:00.906 --> 00:10:01.936 A:middle
flatMap operator.

00:10:03.246 --> 00:10:04.856 A:middle
Once there, flatMap will call a

00:10:04.856 --> 00:10:07.136 A:middle
closure to transform that value

00:10:07.466 --> 00:10:09.416 A:middle
into a new Publisher, and in

00:10:09.416 --> 00:10:10.896 A:middle
this case this new Publisher is

00:10:10.896 --> 00:10:14.396 A:middle
a Just followed by a decode and

00:10:14.396 --> 00:10:14.886 A:middle
a catch.

00:10:15.176 --> 00:10:16.056 A:middle
Similar to before.

00:10:17.206 --> 00:10:18.946 A:middle
flatMap will then subscribe to

00:10:18.946 --> 00:10:20.576 A:middle
this new Publisher, offering the

00:10:20.576 --> 00:10:21.906 A:middle
resulting values downstream.

00:10:25.046 --> 00:10:25.686 A:middle
I'd like to trace through

00:10:25.686 --> 00:10:27.356 A:middle
another value in this flatMap.

00:10:27.866 --> 00:10:31.116 A:middle
But this time let's imagine that

00:10:31.116 --> 00:10:32.706 A:middle
the decode threw an error during

00:10:32.706 --> 00:10:33.326 A:middle
the operation.

00:10:33.906 --> 00:10:35.926 A:middle
When the failure reaches the

00:10:35.926 --> 00:10:37.656 A:middle
catch, it will then be replaced

00:10:37.656 --> 00:10:38.656 A:middle
with the recovery Publisher.

00:10:39.466 --> 00:10:41.086 A:middle
And this will be the Publisher

00:10:41.086 --> 00:10:42.206 A:middle
that is returned to the flatMap.

00:10:43.276 --> 00:10:44.976 A:middle
Thus guaranteeing that that

00:10:44.976 --> 00:10:45.976 A:middle
operation can never fail.

00:10:49.046 --> 00:10:50.116 A:middle
I'd like to take a look now at

00:10:50.116 --> 00:10:51.046 A:middle
using this in code.

00:10:51.426 --> 00:10:52.706 A:middle
We'll start where we left off,

00:10:53.566 --> 00:10:56.246 A:middle
where we were handling the first

00:10:56.246 --> 00:10:57.186 A:middle
error of our stream.

00:10:57.666 --> 00:10:59.506 A:middle
But now we'll introduce the

00:10:59.506 --> 00:11:00.356 A:middle
flatMap operator.

00:10:59.506 --> 00:11:00.356 A:middle
flatMap operator.

00:11:00.476 --> 00:11:01.586 A:middle
And it's really a rather simple

00:11:01.586 --> 00:11:02.276 A:middle
transformation.

00:11:03.326 --> 00:11:04.766 A:middle
As with catch, we'll use just a

00:11:04.766 --> 00:11:06.296 A:middle
form, a new Publisher from the

00:11:06.296 --> 00:11:08.376 A:middle
data that we received.

00:11:08.376 --> 00:11:09.356 A:middle
This is the data that we just

00:11:09.356 --> 00:11:10.476 A:middle
decoded from the map operator.

00:11:11.176 --> 00:11:12.666 A:middle
Using the nested scope for the

00:11:12.666 --> 00:11:15.096 A:middle
flatMap operator, we will

00:11:15.096 --> 00:11:16.596 A:middle
return, we will decode, we will

00:11:16.596 --> 00:11:17.926 A:middle
catch, return that to the

00:11:17.926 --> 00:11:18.276 A:middle
flatMap.

00:11:18.276 --> 00:11:19.606 A:middle
Which flatMap will then

00:11:19.606 --> 00:11:21.666 A:middle
subscribe to this Publisher, and

00:11:21.666 --> 00:11:24.106 A:middle
the resulting Publisher will be

00:11:24.106 --> 00:11:25.846 A:middle
a Publisher of magic tricks that

00:11:25.846 --> 00:11:26.466 A:middle
can never fail.

00:11:29.356 --> 00:11:30.256 A:middle
Now that we've handled our

00:11:30.256 --> 00:11:31.736 A:middle
upstream failures, let's go

00:11:31.736 --> 00:11:33.086 A:middle
ahead and do what we originally

00:11:33.086 --> 00:11:34.846 A:middle
wanted to do, and that is to try

00:11:34.846 --> 00:11:36.336 A:middle
to publish this particular magic

00:11:36.336 --> 00:11:36.926 A:middle
trick's name.

00:11:37.416 --> 00:11:40.266 A:middle
With Combine, this is as simple

00:11:40.266 --> 00:11:42.146 A:middle
as using another operator, the

00:11:42.146 --> 00:11:43.376 A:middle
Publisher(for:) operator.

00:11:44.136 --> 00:11:45.366 A:middle
And we use this to reach inside

00:11:45.366 --> 00:11:46.686 A:middle
the ProduceMagicTrick via a

00:11:46.736 --> 00:11:48.976 A:middle
type-safe key path, producing a

00:11:48.976 --> 00:11:50.516 A:middle
new Publisher, in this case a

00:11:50.556 --> 00:11:51.706 A:middle
Publisher of strings.

00:11:55.046 --> 00:11:56.636 A:middle
At this point, I want to talk

00:11:56.636 --> 00:11:58.166 A:middle
about a final kind of operator

00:11:58.256 --> 00:11:59.166 A:middle
that provides some pretty

00:11:59.166 --> 00:12:00.206 A:middle
powerful functionality.

00:11:59.166 --> 00:12:00.206 A:middle
powerful functionality.

00:12:00.766 --> 00:12:03.476 A:middle
We call them scheduled operators

00:12:03.896 --> 00:12:05.106 A:middle
and just like scheduling things

00:12:05.106 --> 00:12:06.576 A:middle
in real life, scheduled

00:12:06.576 --> 00:12:08.726 A:middle
operators help you describe when

00:12:08.726 --> 00:12:10.326 A:middle
and where a particular event is

00:12:10.326 --> 00:12:10.766 A:middle
delivered.

00:12:13.196 --> 00:12:14.326 A:middle
The operators are natively

00:12:14.326 --> 00:12:15.866 A:middle
supported by the RunLoop and

00:12:15.866 --> 00:12:18.016 A:middle
DispatchQueues and some examples

00:12:18.016 --> 00:12:19.406 A:middle
of these operators include

00:12:20.466 --> 00:12:22.616 A:middle
operators like delay which defer

00:12:22.616 --> 00:12:24.186 A:middle
the delivery of an event until

00:12:24.186 --> 00:12:24.976 A:middle
some Future time.

00:12:27.066 --> 00:12:28.066 A:middle
There's also throttle that

00:12:28.066 --> 00:12:29.376 A:middle
guarantees that events are

00:12:29.376 --> 00:12:30.536 A:middle
delivered no faster than a

00:12:30.536 --> 00:12:31.496 A:middle
specified rate.

00:12:33.026 --> 00:12:34.186 A:middle
We also have operators like

00:12:34.186 --> 00:12:35.676 A:middle
receive(on:) which guarantee

00:12:35.676 --> 00:12:37.456 A:middle
that downstream received events

00:12:37.456 --> 00:12:38.216 A:middle
will be delivered on a

00:12:38.216 --> 00:12:39.686 A:middle
particular thread or queue.

00:12:39.686 --> 00:12:42.936 A:middle
We'll use that operator now and

00:12:42.936 --> 00:12:44.506 A:middle
guarantee that our magic trick's

00:12:44.506 --> 00:12:45.986 A:middle
name will always be delivered on

00:12:45.986 --> 00:12:46.586 A:middle
the main queue.

00:12:47.746 --> 00:12:48.986 A:middle
And we see here that the output

00:12:48.986 --> 00:12:50.636 A:middle
and failure types are unchanged.

00:12:51.146 --> 00:12:52.116 A:middle
And this ends up being pretty

00:12:52.116 --> 00:12:53.476 A:middle
common with scheduled operators.

00:12:54.436 --> 00:12:55.836 A:middle
And so let's review the rest of

00:12:55.836 --> 00:12:56.616 A:middle
our Publisher chain.

00:12:58.056 --> 00:12:59.686 A:middle
We left off with flatMap.

00:13:01.356 --> 00:13:03.206 A:middle
And then we used Publisher(for:)

00:13:03.206 --> 00:13:04.726 A:middle
to reach inside our magic trick

00:13:04.726 --> 00:13:06.066 A:middle
and extract the magic trick's

00:13:06.066 --> 00:13:06.426 A:middle
name.

00:13:07.796 --> 00:13:10.646 A:middle
Finally, we move our work to the

00:13:10.646 --> 00:13:11.446 A:middle
main thread with the

00:13:11.446 --> 00:13:13.376 A:middle
receive(on:) operator.

00:13:13.816 --> 00:13:14.806 A:middle
And now if we're working with

00:13:14.806 --> 00:13:16.156 A:middle
AppKit or UIKit where the UI

00:13:16.156 --> 00:13:17.646 A:middle
needs to be updated on the main

00:13:17.646 --> 00:13:18.706 A:middle
thread context, we're ready to

00:13:18.706 --> 00:13:18.966 A:middle
go.

00:13:18.966 --> 00:13:21.306 A:middle
The published values are already

00:13:21.306 --> 00:13:22.546 A:middle
on the right thread.

00:13:24.036 --> 00:13:25.576 A:middle
And as you've seen, we've been

00:13:25.576 --> 00:13:26.626 A:middle
able to do quite a lot with

00:13:26.626 --> 00:13:27.746 A:middle
Publishers and their operators

00:13:27.746 --> 00:13:28.236 A:middle
so far.

00:13:29.206 --> 00:13:30.446 A:middle
We started with an initial

00:13:30.446 --> 00:13:32.546 A:middle
recipe with each operator along

00:13:32.546 --> 00:13:34.516 A:middle
the way offering a new tweak for

00:13:34.626 --> 00:13:36.236 A:middle
producing strongly typed values

00:13:36.236 --> 00:13:36.856 A:middle
over time.

00:13:37.396 --> 00:13:39.736 A:middle
We've seen that Publishers can

00:13:39.736 --> 00:13:40.606 A:middle
produce their values

00:13:40.606 --> 00:13:42.386 A:middle
synchronously as was the case of

00:13:42.386 --> 00:13:42.806 A:middle
Just.

00:13:43.156 --> 00:13:45.226 A:middle
And asynchronously such as

00:13:45.226 --> 00:13:46.126 A:middle
NotificationCenter.

00:13:46.676 --> 00:13:48.936 A:middle
At this point though, I want to

00:13:48.936 --> 00:13:49.856 A:middle
focus on the other side of

00:13:49.856 --> 00:13:50.846 A:middle
publishing values.

00:13:51.336 --> 00:13:52.996 A:middle
And that is receiving them.

00:13:54.306 --> 00:13:55.096 A:middle
I'd like to talk about

00:13:55.096 --> 00:13:55.836 A:middle
Subscribers now.

00:13:58.246 --> 00:13:59.306 A:middle
Just like Publishers,

00:13:59.586 --> 00:14:01.166 A:middle
Subscribers in Combine have two

00:13:59.586 --> 00:14:01.166 A:middle
Subscribers in Combine have two

00:14:01.166 --> 00:14:03.326 A:middle
associated types: their input

00:14:04.106 --> 00:14:05.376 A:middle
and the kinds of failure that

00:14:05.376 --> 00:14:05.836 A:middle
they allow.

00:14:07.576 --> 00:14:09.416 A:middle
They also describe three event

00:14:09.416 --> 00:14:10.596 A:middle
functions for receiving a

00:14:10.596 --> 00:14:13.046 A:middle
subscription, values and a

00:14:13.046 --> 00:14:13.606 A:middle
completion.

00:14:14.176 --> 00:14:16.516 A:middle
The order that these functions

00:14:16.516 --> 00:14:18.186 A:middle
will be called is well-defined

00:14:18.416 --> 00:14:19.486 A:middle
and comes down to following

00:14:19.576 --> 00:14:20.416 A:middle
three rules.

00:14:20.906 --> 00:14:24.426 A:middle
Rule number one, in response to

00:14:24.426 --> 00:14:26.246 A:middle
a subscribe call, a Publisher

00:14:26.246 --> 00:14:28.476 A:middle
will call receive(subscription:)

00:14:28.566 --> 00:14:29.696 A:middle
exactly once.

00:14:33.066 --> 00:14:36.216 A:middle
Rule number two, a Publisher can

00:14:36.216 --> 00:14:38.246 A:middle
then provide zero or more values

00:14:38.246 --> 00:14:39.786 A:middle
downstream to the Subscriber

00:14:39.786 --> 00:14:41.446 A:middle
after the Subscriber requests

00:14:41.526 --> 00:14:41.766 A:middle
them.

00:14:44.346 --> 00:14:46.196 A:middle
Rule number three, a Publisher

00:14:46.196 --> 00:14:47.596 A:middle
can send at most a single

00:14:47.596 --> 00:14:49.356 A:middle
completion and that completion

00:14:49.356 --> 00:14:50.566 A:middle
can indicate that the Publisher

00:14:50.566 --> 00:14:52.946 A:middle
has finished or that a failure

00:14:52.946 --> 00:14:53.526 A:middle
has arisen.

00:14:54.476 --> 00:14:55.646 A:middle
And once that completion has

00:14:55.646 --> 00:14:58.216 A:middle
been signaled, no further values

00:14:58.216 --> 00:14:58.826 A:middle
may be emitted.

00:14:59.406 --> 00:15:01.406 A:middle
These three rules can be

00:14:59.406 --> 00:15:01.406 A:middle
These three rules can be

00:15:01.406 --> 00:15:02.656 A:middle
summarized as follows.

00:15:03.176 --> 00:15:05.806 A:middle
A Subscriber will receive a

00:15:05.806 --> 00:15:08.956 A:middle
single subscription followed by

00:15:09.116 --> 00:15:11.606 A:middle
zero or more values, possibly

00:15:11.606 --> 00:15:12.616 A:middle
terminated by a single

00:15:12.616 --> 00:15:14.876 A:middle
completion indicating that the

00:15:14.876 --> 00:15:16.146 A:middle
publish finished or failed.

00:15:17.306 --> 00:15:19.086 A:middle
And I say possibly there because

00:15:19.086 --> 00:15:20.276 A:middle
the completion is optional.

00:15:20.866 --> 00:15:22.366 A:middle
Many given streams can be

00:15:22.366 --> 00:15:23.576 A:middle
potentially infinite, like the

00:15:23.576 --> 00:15:24.936 A:middle
NotificationCenter example from

00:15:24.936 --> 00:15:25.346 A:middle
before.

00:15:28.356 --> 00:15:30.476 A:middle
In Combine, we support many

00:15:30.476 --> 00:15:31.856 A:middle
different kinds of Subscribers.

00:15:32.176 --> 00:15:33.386 A:middle
And I'd like to show you how

00:15:33.386 --> 00:15:33.856 A:middle
they work.

00:15:36.516 --> 00:15:37.596 A:middle
Let's go back to our Publisher

00:15:37.596 --> 00:15:40.046 A:middle
example, except what we really

00:15:40.046 --> 00:15:42.006 A:middle
just need to know right now is

00:15:42.006 --> 00:15:42.916 A:middle
the kind of Publisher that we're

00:15:42.916 --> 00:15:43.486 A:middle
working with.

00:15:44.096 --> 00:15:45.006 A:middle
So let's go ahead and make some

00:15:45.006 --> 00:15:45.316 A:middle
room.

00:15:47.316 --> 00:15:48.676 A:middle
And add a Subscriber.

00:15:50.206 --> 00:15:50.956 A:middle
Here I've added one of the

00:15:50.956 --> 00:15:52.336 A:middle
simplest forms of subscription

00:15:52.336 --> 00:15:55.376 A:middle
in Combine, key path assignment,

00:15:56.216 --> 00:15:57.846 A:middle
using the assign(to: on:)

00:15:57.846 --> 00:15:58.406 A:middle
operator.

00:15:58.826 --> 00:16:00.766 A:middle
And this will ensure that any

00:15:58.826 --> 00:16:00.766 A:middle
And this will ensure that any

00:16:00.766 --> 00:16:02.226 A:middle
values emitted by the upstream

00:16:02.226 --> 00:16:03.466 A:middle
Publisher will be assigned to

00:16:03.466 --> 00:16:04.846 A:middle
the specified key path on the

00:16:04.846 --> 00:16:05.876 A:middle
specified object.

00:16:06.316 --> 00:16:08.266 A:middle
And from this point, right,

00:16:08.266 --> 00:16:09.636 A:middle
we're free to basically take any

00:16:09.636 --> 00:16:10.716 A:middle
Publisher and assign to any

00:16:10.716 --> 00:16:11.886 A:middle
property from the value which is

00:16:11.926 --> 00:16:12.656 A:middle
pretty powerful.

00:16:13.106 --> 00:16:15.886 A:middle
This operator also produces a

00:16:15.886 --> 00:16:17.386 A:middle
cancellation token that you can

00:16:17.386 --> 00:16:18.656 A:middle
later call to terminate the

00:16:18.656 --> 00:16:19.256 A:middle
subscription.

00:16:19.256 --> 00:16:22.466 A:middle
I'd like to talk a little more

00:16:22.466 --> 00:16:23.356 A:middle
about cancellation.

00:16:23.856 --> 00:16:26.386 A:middle
We built cancellation into the

00:16:26.386 --> 00:16:28.196 A:middle
shape of Combine because it's

00:16:28.196 --> 00:16:29.836 A:middle
often advantageous to be able to

00:16:29.836 --> 00:16:31.666 A:middle
terminate a subscription before

00:16:31.666 --> 00:16:33.496 A:middle
a Publisher is done delivering

00:16:33.526 --> 00:16:34.096 A:middle
events.

00:16:35.156 --> 00:16:36.336 A:middle
This is especially true when you

00:16:36.336 --> 00:16:37.366 A:middle
want to free up resources

00:16:37.366 --> 00:16:38.186 A:middle
associated with that

00:16:38.186 --> 00:16:38.816 A:middle
subscription.

00:16:39.996 --> 00:16:41.796 A:middle
Cancellation of course is best

00:16:41.796 --> 00:16:43.646 A:middle
effort, but it offers a means

00:16:43.646 --> 00:16:44.686 A:middle
for you to unsubscribe a

00:16:44.686 --> 00:16:45.976 A:middle
Subscriber should you need to.

00:16:48.236 --> 00:16:49.546 A:middle
We introduce a new protocol for

00:16:49.546 --> 00:16:50.566 A:middle
describing things that can

00:16:50.566 --> 00:16:52.546 A:middle
cancel or be canceled.

00:16:53.326 --> 00:16:55.306 A:middle
And we introduce a really,

00:16:55.306 --> 00:16:56.926 A:middle
really super helpful convenience

00:16:57.086 --> 00:16:58.866 A:middle
called AnyCancellable which

00:16:58.866 --> 00:17:00.146 A:middle
carries the added benefit that

00:16:58.866 --> 00:17:00.146 A:middle
carries the added benefit that

00:17:00.356 --> 00:17:01.476 A:middle
it will automatically call

00:17:01.476 --> 00:17:02.706 A:middle
cancel on deinit.

00:17:04.036 --> 00:17:05.465 A:middle
This dramatically decreases the

00:17:05.465 --> 00:17:06.376 A:middle
number of times that you're

00:17:06.376 --> 00:17:07.586 A:middle
going to need to call cancel

00:17:07.586 --> 00:17:08.246 A:middle
explicitly.

00:17:09.056 --> 00:17:10.586 A:middle
Just rely on the powerful memory

00:17:10.586 --> 00:17:12.136 A:middle
management capabilities already

00:17:12.136 --> 00:17:13.646 A:middle
provided by Swift.

00:17:15.296 --> 00:17:16.846 A:middle
So let's go ahead and look at a

00:17:16.846 --> 00:17:18.336 A:middle
second form of subscription.

00:17:18.846 --> 00:17:21.366 A:middle
This is using a sink operator.

00:17:21.796 --> 00:17:23.445 A:middle
And these are really fantastic.

00:17:23.445 --> 00:17:24.906 A:middle
You just provide a closure and

00:17:24.906 --> 00:17:26.236 A:middle
now every value received, your

00:17:26.236 --> 00:17:27.316 A:middle
closure's going to get called

00:17:27.316 --> 00:17:28.465 A:middle
and you can do whatever side

00:17:28.465 --> 00:17:30.476 A:middle
effecty thing you want to do.

00:17:31.236 --> 00:17:34.366 A:middle
As with assign, sink will return

00:17:34.436 --> 00:17:36.476 A:middle
a cancellable that you can then

00:17:36.476 --> 00:17:37.296 A:middle
use to terminate the

00:17:37.296 --> 00:17:37.856 A:middle
subscription.

00:17:41.046 --> 00:17:42.076 A:middle
A third form of subscription is

00:17:42.116 --> 00:17:43.276 A:middle
a little bit of a hybrid.

00:17:43.956 --> 00:17:45.996 A:middle
We call them subjects and they

00:17:45.996 --> 00:17:46.826 A:middle
behave a little bit like a

00:17:46.826 --> 00:17:48.136 A:middle
Publisher and a little bit like

00:17:48.136 --> 00:17:48.756 A:middle
a Subscriber.

00:17:50.096 --> 00:17:50.966 A:middle
They typically support

00:17:50.966 --> 00:17:52.466 A:middle
multicasting their received

00:17:52.466 --> 00:17:54.326 A:middle
values, and of particular

00:17:54.326 --> 00:17:56.316 A:middle
importance they let you send

00:17:56.316 --> 00:17:57.406 A:middle
values imperatively.

00:17:57.776 --> 00:17:59.156 A:middle
And this is of paramount

00:17:59.156 --> 00:18:00.596 A:middle
importance when you're working

00:17:59.156 --> 00:18:00.596 A:middle
importance when you're working

00:18:00.596 --> 00:18:01.926 A:middle
with existing code bases.

00:18:03.396 --> 00:18:04.356 A:middle
Let's take a look at how they

00:18:04.356 --> 00:18:06.556 A:middle
work before showing how we use

00:18:06.556 --> 00:18:07.416 A:middle
them in practice.

00:18:07.936 --> 00:18:10.536 A:middle
As I mentioned, with a subject,

00:18:10.706 --> 00:18:12.276 A:middle
it's often possible to broadcast

00:18:12.276 --> 00:18:13.326 A:middle
to multiple downstream

00:18:13.326 --> 00:18:15.686 A:middle
Subscribers, as well as

00:18:15.906 --> 00:18:17.196 A:middle
imperatively send a value.

00:18:18.276 --> 00:18:20.196 A:middle
And any value received will be

00:18:20.196 --> 00:18:21.516 A:middle
broadcast to all downstream

00:18:21.516 --> 00:18:21.976 A:middle
Subscribers.

00:18:24.156 --> 00:18:25.916 A:middle
This is also true if the value

00:18:25.916 --> 00:18:26.756 A:middle
is produced by an upstream

00:18:26.756 --> 00:18:26.976 A:middle
Publisher.

00:18:30.046 --> 00:18:31.616 A:middle
In Combine we support two kinds

00:18:31.916 --> 00:18:34.046 A:middle
of subjects, a Passthrough

00:18:34.046 --> 00:18:36.156 A:middle
subject which stores no value,

00:18:36.466 --> 00:18:37.716 A:middle
and so you'll only see values

00:18:37.716 --> 00:18:38.766 A:middle
after you subscribe to the

00:18:38.766 --> 00:18:38.976 A:middle
subject.

00:18:41.616 --> 00:18:43.146 A:middle
We also support a CurrentValue

00:18:43.146 --> 00:18:43.716 A:middle
subject.

00:18:44.526 --> 00:18:46.016 A:middle
This maintains a history of the

00:18:46.016 --> 00:18:47.186 A:middle
last value that it received,

00:18:47.766 --> 00:18:49.056 A:middle
allowing new Subscribers an

00:18:49.056 --> 00:18:50.906 A:middle
opportunity to catch up.

00:18:53.066 --> 00:18:53.796 A:middle
Now we'll look at these in

00:18:54.156 --> 00:18:54.306 A:middle
action.

00:18:54.306 --> 00:18:55.206 A:middle
We'll start as before with our

00:18:55.206 --> 00:18:55.706 A:middle
Publisher.

00:18:57.256 --> 00:18:58.986 A:middle
Creating the subject is as easy

00:18:58.986 --> 00:19:00.326 A:middle
as picking which one you want,

00:18:58.986 --> 00:19:00.326 A:middle
as picking which one you want,

00:19:00.606 --> 00:19:01.826 A:middle
specifying the output and

00:19:01.826 --> 00:19:03.346 A:middle
failure types and calling a

00:19:03.346 --> 00:19:03.956 A:middle
constructor.

00:19:08.336 --> 00:19:09.916 A:middle
Subjects behave like Subscribers

00:19:10.126 --> 00:19:11.416 A:middle
in that they can subscribe to an

00:19:11.416 --> 00:19:12.346 A:middle
upstream Publisher.

00:19:12.926 --> 00:19:15.906 A:middle
As well as like a Publisher by

00:19:15.906 --> 00:19:17.126 A:middle
calling any of the operators

00:19:17.126 --> 00:19:18.356 A:middle
that I've talked about today,

00:19:18.576 --> 00:19:20.276 A:middle
including things like sink, to

00:19:20.276 --> 00:19:22.076 A:middle
form Subscribers to themselves.

00:19:22.596 --> 00:19:24.876 A:middle
You can even send values

00:19:24.876 --> 00:19:26.206 A:middle
imperatively, such as this very

00:19:26.206 --> 00:19:26.896 A:middle
magic word.

00:19:28.516 --> 00:19:30.586 A:middle
And in fact, subjects arrive so

00:19:30.586 --> 00:19:32.016 A:middle
often that we even define

00:19:32.016 --> 00:19:33.456 A:middle
operators for injecting subjects

00:19:33.456 --> 00:19:35.176 A:middle
into your streams, like Share

00:19:35.516 --> 00:19:36.636 A:middle
which injects a Passthrough

00:19:36.636 --> 00:19:39.666 A:middle
subject into a stream.

00:19:39.856 --> 00:19:40.886 A:middle
Subjects are very, very

00:19:40.886 --> 00:19:41.256 A:middle
powerful.

00:19:41.256 --> 00:19:43.796 A:middle
You're going to really find lots

00:19:43.796 --> 00:19:44.776 A:middle
of cool uses for them.

00:19:44.776 --> 00:19:46.846 A:middle
And with that I'd like to

00:19:46.846 --> 00:19:47.876 A:middle
actually switch and talk to a

00:19:47.876 --> 00:19:49.236 A:middle
fourth and final kind of

00:19:49.236 --> 00:19:52.176 A:middle
Subscriber, and that is

00:19:52.456 --> 00:19:53.396 A:middle
integrating with SwiftUI.

00:19:55.156 --> 00:19:56.876 A:middle
One of the amazing things about

00:19:56.876 --> 00:19:58.656 A:middle
SwiftUI is how you only need to

00:19:58.656 --> 00:20:00.526 A:middle
describe the dependencies in

00:19:58.656 --> 00:20:00.526 A:middle
describe the dependencies in

00:20:00.526 --> 00:20:01.656 A:middle
your application and the

00:20:01.656 --> 00:20:02.756 A:middle
framework takes care of the

00:20:02.756 --> 00:20:03.226 A:middle
rest.

00:20:04.526 --> 00:20:05.866 A:middle
From the perspective of Combine,

00:20:06.146 --> 00:20:07.266 A:middle
this just means that you need to

00:20:07.266 --> 00:20:08.786 A:middle
provide a Publisher that

00:20:08.786 --> 00:20:10.976 A:middle
describes when and how your data

00:20:10.976 --> 00:20:11.526 A:middle
has changed.

00:20:13.056 --> 00:20:15.306 A:middle
To do so, you just simply

00:20:15.306 --> 00:20:16.626 A:middle
conform your custom types to the

00:20:16.626 --> 00:20:18.016 A:middle
BindableObject protocol.

00:20:19.406 --> 00:20:21.176 A:middle
BindableObjects in SwiftUI have

00:20:21.176 --> 00:20:22.286 A:middle
a single associated type.

00:20:22.976 --> 00:20:26.596 A:middle
It's a Publisher that is

00:20:26.596 --> 00:20:27.926 A:middle
constrained to never fail.

00:20:27.926 --> 00:20:29.566 A:middle
And this is fantastic for

00:20:29.566 --> 00:20:31.436 A:middle
working with UI frameworks

00:20:31.466 --> 00:20:32.786 A:middle
because the type system of the

00:20:32.786 --> 00:20:34.076 A:middle
language is going to enforce

00:20:34.076 --> 00:20:35.826 A:middle
that you handle upstream errors

00:20:35.986 --> 00:20:37.336 A:middle
before you get to your

00:20:37.336 --> 00:20:37.766 A:middle
Publisher.

00:20:40.096 --> 00:20:41.456 A:middle
Finally, you specify one

00:20:41.456 --> 00:20:43.156 A:middle
property and this property

00:20:43.446 --> 00:20:45.026 A:middle
called didChange yields the

00:20:45.026 --> 00:20:46.536 A:middle
actual Publisher that notifies

00:20:46.536 --> 00:20:48.226 A:middle
when your type has changed, and

00:20:48.226 --> 00:20:49.196 A:middle
that's really it.

00:20:50.476 --> 00:20:52.096 A:middle
For more on how data flow works

00:20:52.176 --> 00:20:53.736 A:middle
in SwiftUI, I strongly encourage

00:20:53.736 --> 00:20:54.876 A:middle
that you check out the Data Flow

00:20:54.876 --> 00:20:56.606 A:middle
in SwiftUI talk where we go into

00:20:56.606 --> 00:20:57.816 A:middle
considerably more detail about

00:20:57.816 --> 00:20:58.726 A:middle
all the great things that are

00:20:58.726 --> 00:20:59.416 A:middle
possible here.

00:21:00.386 --> 00:21:02.176 A:middle
But for a taste, I'd like to

00:21:02.176 --> 00:21:03.086 A:middle
show you how this can work in

00:21:03.086 --> 00:21:03.676 A:middle
practice.

00:21:05.166 --> 00:21:06.426 A:middle
We'll start with an existing

00:21:06.426 --> 00:21:08.146 A:middle
model from within our wizard

00:21:08.146 --> 00:21:09.216 A:middle
school application.

00:21:09.866 --> 00:21:12.176 A:middle
We'll then add conformance to

00:21:12.176 --> 00:21:12.986 A:middle
BindableObject.

00:21:13.326 --> 00:21:14.326 A:middle
And here we're going to use a

00:21:14.326 --> 00:21:15.676 A:middle
subject to describe when our

00:21:15.676 --> 00:21:17.066 A:middle
model object has changed.

00:21:18.146 --> 00:21:19.006 A:middle
And we really don't need our

00:21:19.006 --> 00:21:20.656 A:middle
subject to signal any specific

00:21:20.656 --> 00:21:23.806 A:middle
kinds of values because the

00:21:23.806 --> 00:21:25.146 A:middle
framework will figure that out

00:21:25.146 --> 00:21:26.266 A:middle
by what we call from our body

00:21:26.266 --> 00:21:26.586 A:middle
method.

00:21:26.586 --> 00:21:27.936 A:middle
And so we'll choose void as the

00:21:27.936 --> 00:21:29.506 A:middle
output type of our subject.

00:21:32.296 --> 00:21:33.666 A:middle
Using a subject like this offers

00:21:33.666 --> 00:21:35.636 A:middle
a lot of flexibility, since now

00:21:35.636 --> 00:21:36.716 A:middle
we can imperatively send

00:21:36.716 --> 00:21:38.806 A:middle
messages any time our object has

00:21:38.806 --> 00:21:38.976 A:middle
changed.

00:21:41.256 --> 00:21:42.726 A:middle
For now, though, let's go ahead

00:21:42.726 --> 00:21:43.546 A:middle
and just use a couple of

00:21:43.546 --> 00:21:45.346 A:middle
property observers and directly

00:21:45.346 --> 00:21:47.326 A:middle
call send on the subject to

00:21:47.326 --> 00:21:48.796 A:middle
indicate that our model object

00:21:48.796 --> 00:21:49.966 A:middle
has changed when either of our

00:21:49.966 --> 00:21:51.226 A:middle
properties has changed.

00:21:51.646 --> 00:21:54.616 A:middle
Next, we need to hook this model

00:21:54.616 --> 00:21:57.326 A:middle
up to a SwiftUI view which we do

00:21:57.326 --> 00:21:58.036 A:middle
with the following.

00:21:59.226 --> 00:22:00.486 A:middle
We'll declare a model as being

00:21:59.226 --> 00:22:00.486 A:middle
We'll declare a model as being

00:22:00.486 --> 00:22:02.036 A:middle
an object binding which allows

00:22:02.036 --> 00:22:03.346 A:middle
SwiftUI to automatically

00:22:03.346 --> 00:22:04.646 A:middle
discover and subscribe to our

00:22:04.646 --> 00:22:05.206 A:middle
Publisher.

00:22:05.936 --> 00:22:08.386 A:middle
And then we'll refer to the

00:22:08.386 --> 00:22:10.336 A:middle
model's property from within the

00:22:10.336 --> 00:22:10.976 A:middle
body property.

00:22:11.966 --> 00:22:12.796 A:middle
And that's really it.

00:22:13.886 --> 00:22:15.346 A:middle
SwiftUI will automatically

00:22:15.346 --> 00:22:17.166 A:middle
generate a new body whenever you

00:22:17.166 --> 00:22:18.226 A:middle
signal that your model has

00:22:18.226 --> 00:22:18.686 A:middle
changed.

00:22:22.046 --> 00:22:22.876 A:middle
Now I've shown you that Combine

00:22:22.876 --> 00:22:24.036 A:middle
has a ton of built-in

00:22:24.036 --> 00:22:25.186 A:middle
functionality that you can

00:22:25.186 --> 00:22:26.696 A:middle
compose to create some pretty

00:22:26.696 --> 00:22:27.436 A:middle
powerful things.

00:22:28.536 --> 00:22:30.146 A:middle
We are really excited for the

00:22:30.246 --> 00:22:31.576 A:middle
kinds of simplifications to

00:22:31.576 --> 00:22:32.686 A:middle
asynchronous data flows that are

00:22:32.686 --> 00:22:33.766 A:middle
going to be possible with this

00:22:33.766 --> 00:22:34.376 A:middle
new framework.

00:22:34.916 --> 00:22:36.876 A:middle
And to help show this, my

00:22:36.876 --> 00:22:37.946 A:middle
colleague Ben is going to come

00:22:37.946 --> 00:22:38.826 A:middle
and talk to you about how to

00:22:38.826 --> 00:22:40.226 A:middle
integrate all this great

00:22:40.226 --> 00:22:41.546 A:middle
functionality even further into

00:22:41.546 --> 00:22:42.916 A:middle
your existing applications.

00:22:43.356 --> 00:22:43.686 A:middle
Thank you.

00:22:44.516 --> 00:22:50.316 A:middle
[ Applause ]

00:22:50.816 --> 00:22:51.346 A:middle
&gt;&gt; Thanks, Michael.

00:22:51.456 --> 00:22:52.806 A:middle
I'm excited to be here with

00:22:52.806 --> 00:22:53.976 A:middle
y'all today.

00:22:56.066 --> 00:22:57.646 A:middle
We designed Combine with

00:22:57.646 --> 00:22:58.746 A:middle
composition in mind.

00:22:59.166 --> 00:23:00.126 A:middle
As you saw with Michael's

00:22:59.166 --> 00:23:00.126 A:middle
As you saw with Michael's

00:23:00.126 --> 00:23:02.696 A:middle
example, we took an initial

00:23:02.696 --> 00:23:04.646 A:middle
small Publisher and through many

00:23:04.646 --> 00:23:05.776 A:middle
different transformations

00:23:06.206 --> 00:23:08.086 A:middle
created the eventual Publisher

00:23:08.086 --> 00:23:08.736 A:middle
that we wanted.

00:23:08.736 --> 00:23:12.346 A:middle
So let's see an example.

00:23:12.956 --> 00:23:14.936 A:middle
We have to sign up for our

00:23:14.936 --> 00:23:16.326 A:middle
application that we'd like, to

00:23:16.326 --> 00:23:17.856 A:middle
allow our wizards to sign up for

00:23:17.856 --> 00:23:18.446 A:middle
our wizard school.

00:23:18.446 --> 00:23:20.676 A:middle
And we have a few requirements.

00:23:22.116 --> 00:23:23.236 A:middle
First, we need to make sure that

00:23:23.236 --> 00:23:24.646 A:middle
the username is valid according

00:23:24.646 --> 00:23:25.266 A:middle
to our server.

00:23:25.766 --> 00:23:30.076 A:middle
Second, we have a password field

00:23:30.146 --> 00:23:31.636 A:middle
and a password confirmation.

00:23:31.676 --> 00:23:33.136 A:middle
We'd like to ensure both match

00:23:33.936 --> 00:23:34.666 A:middle
and are greater than eight

00:23:34.666 --> 00:23:34.976 A:middle
characters.

00:23:37.046 --> 00:23:38.176 A:middle
And finally we want to make sure

00:23:38.176 --> 00:23:39.836 A:middle
that if all of these conditions

00:23:39.836 --> 00:23:41.056 A:middle
are met, we can enable or

00:23:41.056 --> 00:23:41.926 A:middle
disable our UI.

00:23:43.306 --> 00:23:44.966 A:middle
So in this one example, we had

00:23:44.966 --> 00:23:46.636 A:middle
asynchronous behaviors, we have

00:23:46.636 --> 00:23:48.076 A:middle
some synchronous behaviors that

00:23:48.076 --> 00:23:49.646 A:middle
are local to device, and then we

00:23:49.646 --> 00:23:50.506 A:middle
need to be able to combine them

00:23:50.506 --> 00:23:51.016 A:middle
all together.

00:23:51.016 --> 00:23:52.616 A:middle
So let's see how Combine can

00:23:52.616 --> 00:23:53.806 A:middle
help us with that.

00:23:56.106 --> 00:23:58.156 A:middle
To start off, I'll use Interface

00:23:58.156 --> 00:23:59.606 A:middle
Builder to create a target

00:23:59.606 --> 00:24:00.996 A:middle
action on the value change

00:23:59.606 --> 00:24:00.996 A:middle
action on the value change

00:24:00.996 --> 00:24:02.066 A:middle
property for our password

00:24:02.066 --> 00:24:02.466 A:middle
fields.

00:24:05.046 --> 00:24:06.246 A:middle
And then using that in code,

00:24:07.126 --> 00:24:08.536 A:middle
we'll get a signal any time the

00:24:08.536 --> 00:24:10.146 A:middle
user's typing into those fields.

00:24:10.676 --> 00:24:12.076 A:middle
We'll take the text property of

00:24:12.076 --> 00:24:14.116 A:middle
those current values and we'll

00:24:14.116 --> 00:24:15.836 A:middle
store it into an ivar.

00:24:16.876 --> 00:24:18.456 A:middle
But we wanted to compose these

00:24:18.456 --> 00:24:19.816 A:middle
with other behaviors, the

00:24:19.816 --> 00:24:20.676 A:middle
synchronous behaviors that we

00:24:20.676 --> 00:24:21.496 A:middle
talked about earlier.

00:24:22.456 --> 00:24:23.376 A:middle
So how can we do that?

00:24:24.676 --> 00:24:25.476 A:middle
It's really easy.

00:24:26.466 --> 00:24:27.776 A:middle
By adding Published to our

00:24:27.776 --> 00:24:29.266 A:middle
individual properties, we can

00:24:29.266 --> 00:24:30.806 A:middle
add a Publisher to any one of

00:24:30.806 --> 00:24:30.946 A:middle
them.

00:24:34.066 --> 00:24:35.536 A:middle
Published is a property wrapper

00:24:35.536 --> 00:24:37.206 A:middle
which uses a new Swift 5.1

00:24:37.206 --> 00:24:39.706 A:middle
feature and adds a Publisher to

00:24:39.706 --> 00:24:40.546 A:middle
any given property.

00:24:42.106 --> 00:24:43.376 A:middle
So let's see how we can use this

00:24:43.376 --> 00:24:44.516 A:middle
with some simple examples.

00:24:47.216 --> 00:24:48.946 A:middle
The Published property wrapper

00:24:48.946 --> 00:24:50.546 A:middle
is added before the given

00:24:50.546 --> 00:24:51.696 A:middle
property you'd like to add one

00:24:51.696 --> 00:24:51.936 A:middle
to.

00:24:53.326 --> 00:24:54.926 A:middle
And when we use it in code, it's

00:24:54.926 --> 00:24:55.966 A:middle
just like it was before.

00:24:56.556 --> 00:25:00.056 A:middle
We can also store it and we'll

00:24:56.556 --> 00:25:00.056 A:middle
We can also store it and we'll

00:25:00.056 --> 00:25:00.886 A:middle
get a string value.

00:25:00.886 --> 00:25:02.196 A:middle
So in this case, currentPassword

00:25:02.196 --> 00:25:03.976 A:middle
is now the string 1234.

00:25:06.166 --> 00:25:07.486 A:middle
Where it becomes special is when

00:25:07.486 --> 00:25:08.776 A:middle
we refer to it with a dollar

00:25:08.776 --> 00:25:09.426 A:middle
prefix.

00:25:09.786 --> 00:25:11.096 A:middle
In that case, we're accessing

00:25:11.096 --> 00:25:11.916 A:middle
the wrapped value.

00:25:12.616 --> 00:25:14.966 A:middle
We than can use all the

00:25:14.966 --> 00:25:16.426 A:middle
operators that we normally would

00:25:16.426 --> 00:25:18.186 A:middle
on a Publisher or subscribe to

00:25:18.186 --> 00:25:20.216 A:middle
it, in this case using sink.

00:25:20.216 --> 00:25:23.756 A:middle
And then if we were to set that

00:25:23.756 --> 00:25:25.826 A:middle
property again to another great

00:25:25.826 --> 00:25:27.436 A:middle
password "password", our

00:25:28.136 --> 00:25:30.046 A:middle
Subscribers will get that value

00:25:30.046 --> 00:25:30.726 A:middle
when it's changed.

00:25:31.626 --> 00:25:32.796 A:middle
Obviously, this person has not

00:25:32.796 --> 00:25:33.676 A:middle
paid attention to password

00:25:33.676 --> 00:25:33.966 A:middle
hygiene.

00:25:37.196 --> 00:25:38.366 A:middle
We talked about needing to have

00:25:38.366 --> 00:25:40.436 A:middle
our two Publishers evaluated at

00:25:40.436 --> 00:25:41.776 A:middle
the same time.

00:25:44.086 --> 00:25:45.506 A:middle
We added our Published property

00:25:45.586 --> 00:25:46.866 A:middle
to these and added two

00:25:46.866 --> 00:25:47.946 A:middle
Publishers, the published

00:25:47.946 --> 00:25:49.186 A:middle
strings and can never fail.

00:25:49.906 --> 00:25:52.506 A:middle
What we want to end up with is

00:25:52.506 --> 00:25:54.216 A:middle
something that publishes a

00:25:54.216 --> 00:25:56.306 A:middle
single validated password.

00:25:58.116 --> 00:25:59.726 A:middle
Well, we have an operator for

00:25:59.726 --> 00:26:00.586 A:middle
that and it's called

00:25:59.726 --> 00:26:00.586 A:middle
that and it's called

00:26:00.936 --> 00:26:01.496 A:middle
CombineLatest.

00:26:05.046 --> 00:26:06.106 A:middle
So here are our two properties

00:26:06.386 --> 00:26:07.446 A:middle
as we talked about before.

00:26:08.096 --> 00:26:09.766 A:middle
And using CombineLatest we can

00:26:09.766 --> 00:26:11.366 A:middle
refer to the property wrappers

00:26:11.456 --> 00:26:13.486 A:middle
with the dollar sign prefix and

00:26:14.176 --> 00:26:16.096 A:middle
then we'll get this signal when

00:26:16.166 --> 00:26:17.476 A:middle
either one of these changes.

00:26:17.856 --> 00:26:19.176 A:middle
So for example, if the user has

00:26:19.176 --> 00:26:21.066 A:middle
already typed in the password

00:26:21.136 --> 00:26:22.486 A:middle
field and then now is starting

00:26:22.486 --> 00:26:23.306 A:middle
to type in the password

00:26:23.306 --> 00:26:24.166 A:middle
confirmation field,

00:26:24.686 --> 00:26:25.976 A:middle
PasswordAgain will be changing

00:26:25.976 --> 00:26:27.016 A:middle
while Password will be the

00:26:27.016 --> 00:26:28.566 A:middle
original value that they typed

00:26:28.566 --> 00:26:29.166 A:middle
in the first field.

00:26:29.656 --> 00:26:32.156 A:middle
We then can use the closure to

00:26:32.156 --> 00:26:33.636 A:middle
ensure that we meet our business

00:26:33.636 --> 00:26:34.716 A:middle
requirements, in this case if

00:26:34.716 --> 00:26:36.246 A:middle
they both match and if they're

00:26:36.246 --> 00:26:38.856 A:middle
greater than eight characters.

00:26:38.896 --> 00:26:40.496 A:middle
We'll return nil if it's not

00:26:40.496 --> 00:26:41.496 A:middle
because we're going to use this

00:26:41.496 --> 00:26:42.676 A:middle
signal along with the other

00:26:42.676 --> 00:26:43.886 A:middle
signals to determine whether or

00:26:43.886 --> 00:26:44.816 A:middle
not our form is valid.

00:26:45.616 --> 00:26:47.156 A:middle
And to do that, we'll use nil as

00:26:47.156 --> 00:26:47.636 A:middle
our signal.

00:26:50.206 --> 00:26:52.596 A:middle
So as you see in the types, the

00:26:52.716 --> 00:26:54.276 A:middle
types reflect all the steps we

00:26:54.276 --> 00:26:54.946 A:middle
took along the way.

00:26:55.716 --> 00:26:56.726 A:middle
You basically can read it

00:26:56.726 --> 00:26:57.726 A:middle
exactly like the code.

00:26:58.226 --> 00:27:00.106 A:middle
We took two published strings,

00:26:58.226 --> 00:27:00.106 A:middle
We took two published strings,

00:27:00.616 --> 00:27:02.116 A:middle
we combined their latest values

00:27:02.376 --> 00:27:03.926 A:middle
and we ended up with an optional

00:27:03.926 --> 00:27:04.276 A:middle
string.

00:27:07.076 --> 00:27:08.216 A:middle
But what if we got a requirement

00:27:08.216 --> 00:27:09.146 A:middle
that we wanted to make sure that

00:27:09.146 --> 00:27:10.046 A:middle
people don't use these bad

00:27:10.046 --> 00:27:12.206 A:middle
passwords and we add a map?

00:27:13.256 --> 00:27:14.356 A:middle
You'll see that the type changes

00:27:14.356 --> 00:27:14.586 A:middle
here.

00:27:15.206 --> 00:27:16.846 A:middle
It now says that we combined the

00:27:16.846 --> 00:27:18.156 A:middle
latest values of two published

00:27:18.156 --> 00:27:20.076 A:middle
strings and then mapped it to

00:27:20.076 --> 00:27:21.536 A:middle
result in an optional string.

00:27:23.006 --> 00:27:24.596 A:middle
That's awesome and that's great

00:27:24.596 --> 00:27:25.896 A:middle
for debugging in almost every

00:27:25.896 --> 00:27:26.676 A:middle
other use case.

00:27:27.076 --> 00:27:28.406 A:middle
But in this case we're

00:27:28.516 --> 00:27:29.706 A:middle
advertising this as an API

00:27:29.826 --> 00:27:31.256 A:middle
boundary and we want to compose

00:27:31.256 --> 00:27:32.106 A:middle
it with other Publishers.

00:27:32.106 --> 00:27:33.996 A:middle
So wouldn't it be great if we

00:27:33.996 --> 00:27:34.946 A:middle
could just focus on what's

00:27:34.946 --> 00:27:35.626 A:middle
important here?

00:27:35.626 --> 00:27:37.236 A:middle
Which is that it is a Publisher

00:27:37.236 --> 00:27:38.626 A:middle
of optional strings that can

00:27:38.626 --> 00:27:39.126 A:middle
never fail.

00:27:40.576 --> 00:27:43.416 A:middle
To do that, we have an operator

00:27:43.416 --> 00:27:45.466 A:middle
called eraseToAnyPublisher which

00:27:45.466 --> 00:27:47.226 A:middle
then returns an AnyPublisher of

00:27:47.226 --> 00:27:48.856 A:middle
optional string never.

00:27:49.346 --> 00:27:51.556 A:middle
You'll see that the types

00:27:51.556 --> 00:27:53.016 A:middle
haven't changed but it does mean

00:27:53.016 --> 00:27:54.366 A:middle
that we can advertise the exact

00:27:54.366 --> 00:27:55.706 A:middle
contract we want for our API

00:27:55.836 --> 00:27:57.306 A:middle
boundary and hide all the

00:27:57.306 --> 00:27:58.646 A:middle
implementation details along the

00:27:58.646 --> 00:27:58.856 A:middle
way.

00:28:01.056 --> 00:28:02.246 A:middle
So taking a look at what we've

00:28:02.246 --> 00:28:04.376 A:middle
done so far, we took our initial

00:28:04.376 --> 00:28:05.816 A:middle
properties that were strings, we

00:28:05.816 --> 00:28:07.386 A:middle
added a string Publisher to it

00:28:07.676 --> 00:28:09.116 A:middle
using the Published property

00:28:09.116 --> 00:28:09.506 A:middle
wrapper.

00:28:10.056 --> 00:28:12.486 A:middle
We then used CombineLatest to

00:28:12.486 --> 00:28:13.606 A:middle
combine the latest values of

00:28:13.606 --> 00:28:15.986 A:middle
these two Publishers, and add

00:28:15.986 --> 00:28:16.926 A:middle
our business logic.

00:28:17.436 --> 00:28:21.376 A:middle
We then used map to filter out

00:28:21.376 --> 00:28:24.696 A:middle
those bad passwords and finally

00:28:24.696 --> 00:28:26.046 A:middle
we used eraseToAnyPublishser

00:28:26.166 --> 00:28:27.566 A:middle
because this is an API boundary

00:28:27.566 --> 00:28:28.506 A:middle
and we're going to compose this

00:28:28.506 --> 00:28:28.976 A:middle
with other things.

00:28:32.276 --> 00:28:32.666 A:middle
So awesome.

00:28:32.746 --> 00:28:33.756 A:middle
We have our first Publisher.

00:28:38.046 --> 00:28:40.716 A:middle
Moving on to the next, we have

00:28:40.716 --> 00:28:42.146 A:middle
some asynchronous activities

00:28:42.146 --> 00:28:43.056 A:middle
we'd like to model here.

00:28:43.626 --> 00:28:44.456 A:middle
We want to make sure that the

00:28:44.456 --> 00:28:45.606 A:middle
username is validated according

00:28:45.606 --> 00:28:46.926 A:middle
to our server which is going to

00:28:46.926 --> 00:28:48.546 A:middle
have a user typing in rapidly.

00:28:49.176 --> 00:28:51.706 A:middle
So like before we add Published

00:28:52.296 --> 00:28:54.096 A:middle
to our string property storage,

00:28:54.356 --> 00:28:55.706 A:middle
and we're going to hook up a

00:28:55.706 --> 00:28:57.426 A:middle
target action for the

00:28:57.426 --> 00:28:58.336 A:middle
valueChanged property.

00:28:58.796 --> 00:28:59.726 A:middle
But in this case it's a little

00:28:59.726 --> 00:29:01.846 A:middle
special, because we don't want

00:28:59.726 --> 00:29:01.846 A:middle
special, because we don't want

00:29:01.846 --> 00:29:02.906 A:middle
to have a network operation

00:29:02.906 --> 00:29:04.296 A:middle
happen every single time the

00:29:04.296 --> 00:29:05.576 A:middle
user types a single character.

00:29:05.976 --> 00:29:07.276 A:middle
Otherwise we'd spam our server.

00:29:07.276 --> 00:29:08.986 A:middle
What we want to do is smooth the

00:29:08.986 --> 00:29:10.706 A:middle
signal out just a little bit.

00:29:11.516 --> 00:29:13.066 A:middle
And for that we have debounce.

00:29:13.826 --> 00:29:16.326 A:middle
Debounce allows you to specify a

00:29:16.326 --> 00:29:17.786 A:middle
window by which you'd like to

00:29:17.786 --> 00:29:19.056 A:middle
receive values and not receive

00:29:19.056 --> 00:29:20.926 A:middle
them faster than that.

00:29:20.926 --> 00:29:22.706 A:middle
Let's see how that works as an

00:29:22.706 --> 00:29:23.126 A:middle
example.

00:29:24.486 --> 00:29:25.486 A:middle
So here we have our upstream

00:29:25.486 --> 00:29:25.986 A:middle
Publisher.

00:29:26.536 --> 00:29:27.496 A:middle
In this case that would be a

00:29:27.496 --> 00:29:29.596 A:middle
text field and we have our

00:29:29.596 --> 00:29:30.526 A:middle
debounce in the middle.

00:29:30.856 --> 00:29:32.396 A:middle
If the user types quite quickly,

00:29:33.436 --> 00:29:34.646 A:middle
you'll see the rapid signals.

00:29:35.566 --> 00:29:36.616 A:middle
But then we can smooth that out

00:29:36.616 --> 00:29:37.656 A:middle
to have a single signal within

00:29:37.656 --> 00:29:38.136 A:middle
that window.

00:29:41.096 --> 00:29:42.456 A:middle
That's great, but we can do a

00:29:42.456 --> 00:29:43.416 A:middle
little bit better.

00:29:45.026 --> 00:29:46.286 A:middle
If the user is typing within

00:29:46.286 --> 00:29:48.516 A:middle
that window and the values at

00:29:48.516 --> 00:29:49.576 A:middle
the end are always going to be

00:29:49.576 --> 00:29:50.606 A:middle
the same, there's no reason to

00:29:50.606 --> 00:29:51.546 A:middle
hit the server again to see

00:29:51.546 --> 00:29:52.776 A:middle
whether that same username is

00:29:52.776 --> 00:29:53.116 A:middle
valid.

00:29:53.116 --> 00:29:55.786 A:middle
So if the user types Merlin, we

00:29:55.786 --> 00:29:58.806 A:middle
get that value, deletes the n

00:29:58.806 --> 00:30:00.726 A:middle
and types the n again, Merlin

00:29:58.806 --> 00:30:00.726 A:middle
and types the n again, Merlin

00:30:00.726 --> 00:30:01.626 A:middle
again, we don't need to hit the

00:30:01.626 --> 00:30:02.206 A:middle
server again.

00:30:02.836 --> 00:30:04.276 A:middle
removeDuplicates is our operator

00:30:04.276 --> 00:30:04.536 A:middle
for that.

00:30:05.206 --> 00:30:06.356 A:middle
It will make sure that we don't

00:30:06.356 --> 00:30:07.746 A:middle
get the same values published

00:30:07.746 --> 00:30:10.446 A:middle
over and over again within that

00:30:11.116 --> 00:30:11.296 A:middle
window.

00:30:11.426 --> 00:30:12.986 A:middle
So using in code, we have our

00:30:12.986 --> 00:30:14.656 A:middle
username property that we added

00:30:14.656 --> 00:30:15.236 A:middle
Published to.

00:30:15.816 --> 00:30:18.126 A:middle
We then use the debounce to

00:30:18.126 --> 00:30:19.206 A:middle
smooth out our signal a bit.

00:30:20.546 --> 00:30:21.486 A:middle
And finally remove the

00:30:21.486 --> 00:30:22.176 A:middle
duplicates.

00:30:22.706 --> 00:30:25.506 A:middle
But we haven't handled any of

00:30:25.506 --> 00:30:26.586 A:middle
the asynchronous stuff yet.

00:30:26.586 --> 00:30:27.756 A:middle
We just smoothed our signal out.

00:30:28.656 --> 00:30:29.646 A:middle
What we want to do is actually

00:30:29.646 --> 00:30:30.586 A:middle
hit our server and find out

00:30:30.586 --> 00:30:31.566 A:middle
whether or not this is valid.

00:30:32.136 --> 00:30:34.546 A:middle
For that we have an existing

00:30:34.546 --> 00:30:35.786 A:middle
function in our application

00:30:35.886 --> 00:30:37.026 A:middle
called usernameAvailable.

00:30:38.106 --> 00:30:39.726 A:middle
And what I'd like to do is bring

00:30:39.726 --> 00:30:40.916 A:middle
this in as a Publisher.

00:30:42.346 --> 00:30:44.226 A:middle
So from Michael's example we

00:30:44.226 --> 00:30:45.496 A:middle
learned that flatMap allows you

00:30:45.496 --> 00:30:47.336 A:middle
to take a value from your stream

00:30:47.536 --> 00:30:48.836 A:middle
and then return a new Publisher.

00:30:49.416 --> 00:30:52.466 A:middle
So how can we call this?

00:30:53.696 --> 00:30:55.296 A:middle
Well, for that we have something

00:30:55.296 --> 00:30:58.026 A:middle
called a Future, and when you

00:30:58.026 --> 00:30:58.966 A:middle
construct one you give it a

00:30:58.966 --> 00:31:00.256 A:middle
closure that takes a promise.

00:30:58.966 --> 00:31:00.256 A:middle
closure that takes a promise.

00:31:01.006 --> 00:31:02.266 A:middle
A promise is just another

00:31:02.266 --> 00:31:04.046 A:middle
closure that takes the result,

00:31:04.046 --> 00:31:05.936 A:middle
either as success or a failure.

00:31:09.046 --> 00:31:10.036 A:middle
And when we use it, it's pretty

00:31:10.036 --> 00:31:10.686 A:middle
straightforward.

00:31:11.666 --> 00:31:12.786 A:middle
We call our usernameAvailable

00:31:12.786 --> 00:31:13.466 A:middle
function and when it

00:31:13.466 --> 00:31:14.916 A:middle
asynchronously completes and we

00:31:14.916 --> 00:31:17.026 A:middle
have the value, we fill our

00:31:17.026 --> 00:31:18.626 A:middle
promise with the success in this

00:31:18.626 --> 00:31:18.996 A:middle
case.

00:31:19.506 --> 00:31:21.006 A:middle
And like before, we'll state

00:31:21.006 --> 00:31:22.676 A:middle
that if it's not available, it's

00:31:22.676 --> 00:31:22.946 A:middle
a nil.

00:31:26.056 --> 00:31:28.146 A:middle
So reviewing those steps, we had

00:31:28.146 --> 00:31:29.126 A:middle
our simple Publishers at the

00:31:29.126 --> 00:31:30.666 A:middle
beginning, our username

00:31:30.666 --> 00:31:31.136 A:middle
Publisher.

00:31:31.536 --> 00:31:32.466 A:middle
We debounced it to smooth the

00:31:32.466 --> 00:31:34.286 A:middle
signals out and we removed any

00:31:34.286 --> 00:31:35.586 A:middle
of the duplicates within that

00:31:35.586 --> 00:31:35.936 A:middle
window.

00:31:37.346 --> 00:31:39.236 A:middle
We then used Future to wrap our

00:31:39.236 --> 00:31:41.006 A:middle
existing API that makes an

00:31:41.006 --> 00:31:42.176 A:middle
asynchronous network call.

00:31:42.176 --> 00:31:45.426 A:middle
And we used flatMap to fork our

00:31:45.426 --> 00:31:46.376 A:middle
stream in that way.

00:31:47.846 --> 00:31:49.556 A:middle
Then we erased it to any

00:31:49.556 --> 00:31:50.716 A:middle
Publisher because this is an API

00:31:50.846 --> 00:31:51.196 A:middle
boundary.

00:31:52.076 --> 00:31:53.276 A:middle
And so now we have these two

00:31:53.276 --> 00:31:54.696 A:middle
custom Publishers that we've

00:31:54.696 --> 00:31:57.066 A:middle
made, both validatedPassword and

00:31:57.066 --> 00:31:58.036 A:middle
validatedUsername.

00:31:58.576 --> 00:32:01.566 A:middle
And we're ready to combine them.

00:31:58.576 --> 00:32:01.566 A:middle
And we're ready to combine them.

00:32:06.046 --> 00:32:07.086 A:middle
So now what we want to do is

00:32:07.086 --> 00:32:08.436 A:middle
take these two signals, one

00:32:08.436 --> 00:32:10.326 A:middle
that's local to device and the

00:32:10.326 --> 00:32:11.406 A:middle
other being an asynchronous

00:32:11.406 --> 00:32:13.496 A:middle
network call, and use those to

00:32:13.496 --> 00:32:14.536 A:middle
enable or disable our UI.

00:32:14.536 --> 00:32:16.496 A:middle
Well, we already know how to do

00:32:16.496 --> 00:32:16.876 A:middle
this.

00:32:18.276 --> 00:32:19.396 A:middle
We use the CombineLatest

00:32:19.396 --> 00:32:19.896 A:middle
operator.

00:32:20.386 --> 00:32:21.726 A:middle
We'll take those two Publishers

00:32:21.726 --> 00:32:22.476 A:middle
that we made before.

00:32:23.836 --> 00:32:24.796 A:middle
We'll check that they're valid

00:32:25.696 --> 00:32:26.886 A:middle
and in this case we'll just

00:32:26.886 --> 00:32:29.026 A:middle
return a tuple with our full

00:32:29.026 --> 00:32:32.136 A:middle
credentials as an optional or

00:32:32.176 --> 00:32:32.956 A:middle
nil if they're not.

00:32:36.166 --> 00:32:37.236 A:middle
And actually wiring this up to

00:32:37.236 --> 00:32:38.436 A:middle
your UI is pretty simple.

00:32:39.636 --> 00:32:41.266 A:middle
We wire up an outlet to our Sign

00:32:41.836 --> 00:32:43.496 A:middle
Up button.

00:32:43.656 --> 00:32:46.666 A:middle
We'll create an ivar to store

00:32:46.666 --> 00:32:48.416 A:middle
this subscription so that we

00:32:48.416 --> 00:32:49.796 A:middle
keep it for the entire lifetime

00:32:49.846 --> 00:32:50.746 A:middle
of this ViewController.

00:32:51.056 --> 00:32:52.036 A:middle
Because we want to enable and

00:32:52.036 --> 00:32:53.856 A:middle
disable the button or the entire

00:32:53.856 --> 00:32:54.706 A:middle
time the form is shown.

00:32:57.056 --> 00:32:57.746 A:middle
So we'll store it.

00:32:58.546 --> 00:32:59.966 A:middle
We'll map this to a Boolean

00:33:00.716 --> 00:33:02.216 A:middle
because we want to assign this

00:33:02.216 --> 00:33:03.396 A:middle
to the isEnabled property on the

00:33:03.396 --> 00:33:03.756 A:middle
button.

00:33:06.156 --> 00:33:08.076 A:middle
Finally, we'll use receive(on:)

00:33:08.076 --> 00:33:09.006 A:middle
to switch over to the main

00:33:09.006 --> 00:33:10.206 A:middle
RunLoop which is what we need to

00:33:10.206 --> 00:33:11.296 A:middle
do for any UI code.

00:33:11.296 --> 00:33:13.716 A:middle
And then we'll use the assign

00:33:13.716 --> 00:33:15.146 A:middle
operator to assign it to the

00:33:15.146 --> 00:33:16.766 A:middle
given key path (on:

00:33:16.766 --> 00:33:17.316 A:middle
signupButton).

00:33:22.106 --> 00:33:22.486 A:middle
So awesome.

00:33:22.486 --> 00:33:23.976 A:middle
We have all the parts we need.

00:33:26.046 --> 00:33:26.906 A:middle
So stepping back, we started

00:33:26.906 --> 00:33:28.246 A:middle
with these three very simple

00:33:28.246 --> 00:33:30.396 A:middle
Publishers that just publish

00:33:30.396 --> 00:33:30.746 A:middle
strings.

00:33:33.086 --> 00:33:35.386 A:middle
And then using composition we

00:33:35.386 --> 00:33:37.036 A:middle
built this up from small little

00:33:37.036 --> 00:33:38.706 A:middle
steps as we went along to create

00:33:38.706 --> 00:33:40.696 A:middle
our final chain, and then

00:33:40.696 --> 00:33:41.976 A:middle
compose those and assign them to

00:33:41.976 --> 00:33:42.446 A:middle
the button.

00:33:43.456 --> 00:33:44.526 A:middle
This is really what Combine's

00:33:44.526 --> 00:33:44.976 A:middle
all about.

00:33:48.076 --> 00:33:49.496 A:middle
So I suggest you get started

00:33:49.496 --> 00:33:49.956 A:middle
right away.

00:33:50.296 --> 00:33:52.576 A:middle
Compose small parts of your

00:33:52.576 --> 00:33:53.606 A:middle
application into custom

00:33:53.606 --> 00:33:55.046 A:middle
Publishers, identify small

00:33:55.046 --> 00:33:56.526 A:middle
pieces of logic you can break up

00:33:56.576 --> 00:33:58.416 A:middle
into little tiny Publishers and

00:33:58.416 --> 00:34:00.026 A:middle
use composition along the way to

00:33:58.416 --> 00:34:00.026 A:middle
use composition along the way to

00:34:00.196 --> 00:34:01.836 A:middle
chain them all together.

00:34:02.656 --> 00:34:03.556 A:middle
You can totally adopt

00:34:03.556 --> 00:34:04.046 A:middle
incrementally.

00:34:04.046 --> 00:34:05.266 A:middle
You don't have to change

00:34:05.266 --> 00:34:07.276 A:middle
everything right away or, you

00:34:07.276 --> 00:34:08.306 A:middle
know, you can mix and match.

00:34:08.306 --> 00:34:09.346 A:middle
We saw with Future how you can

00:34:09.346 --> 00:34:12.226 A:middle
bring things in that you already

00:34:12.226 --> 00:34:14.085 A:middle
have today.

00:34:14.266 --> 00:34:15.596 A:middle
You can compose callbacks and

00:34:15.596 --> 00:34:16.826 A:middle
other things using Future like

00:34:16.826 --> 00:34:17.226 A:middle
we saw.

00:34:20.146 --> 00:34:21.676 A:middle
For more information, check out

00:34:21.676 --> 00:34:24.176 A:middle
our Introducing Combine talk and

00:34:24.176 --> 00:34:25.376 A:middle
the Data Flow Through SwiftUI

00:34:25.376 --> 00:34:26.456 A:middle
talk as well.

00:34:26.456 --> 00:34:27.656 A:middle
And we'll be at the AppKit labs

00:34:27.656 --> 00:34:28.576 A:middle
later today as well.

00:34:29.755 --> 00:34:29.966 A:middle
Thank you.

00:34:30.516 --> 00:34:36.500 A:middle
[ Applause ]
