WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:11.576 A:middle
[ Applause ]

00:00:12.076 --> 00:00:13.866 A:middle
&gt;&gt; Thanks, everyone.

00:00:14.946 --> 00:00:15.966 A:middle
Hi, how are you all doing?

00:00:16.046 --> 00:00:17.246 A:middle
Welcome to WWDC.

00:00:17.436 --> 00:00:18.936 A:middle
My name is Phillip Azar and I'm

00:00:18.936 --> 00:00:20.206 A:middle
proud and happy to be able to

00:00:20.206 --> 00:00:21.606 A:middle
share with you our talk on

00:00:21.606 --> 00:00:22.726 A:middle
Improving Battery Life and

00:00:22.726 --> 00:00:25.466 A:middle
Performance today.

00:00:25.656 --> 00:00:27.026 A:middle
Your apps are the backbone of

00:00:27.026 --> 00:00:28.166 A:middle
our software experience.

00:00:28.496 --> 00:00:29.826 A:middle
They enable our users to do so

00:00:29.826 --> 00:00:31.346 A:middle
many things and engage in so

00:00:31.346 --> 00:00:32.676 A:middle
many experiences that without

00:00:32.676 --> 00:00:33.916 A:middle
your apps, they could never do.

00:00:34.706 --> 00:00:36.996 A:middle
And so you can imagine when your

00:00:36.996 --> 00:00:38.376 A:middle
apps don't give good battery

00:00:38.376 --> 00:00:39.446 A:middle
life and don't give good

00:00:39.446 --> 00:00:40.606 A:middle
performance, this really

00:00:40.606 --> 00:00:41.736 A:middle
disappoints your users.

00:00:42.086 --> 00:00:43.506 A:middle
And so today we want to talk

00:00:43.506 --> 00:00:44.356 A:middle
about a few things.

00:00:44.986 --> 00:00:46.426 A:middle
We want to go over a set of

00:00:46.426 --> 00:00:48.286 A:middle
tools that you can use that are

00:00:48.286 --> 00:00:50.136 A:middle
both new and old to be able to

00:00:50.136 --> 00:00:51.596 A:middle
optimize your application for

00:00:51.596 --> 00:00:53.306 A:middle
battery life and performance.

00:00:53.826 --> 00:00:55.296 A:middle
We want to go over a set of

00:00:55.296 --> 00:00:56.816 A:middle
metrics that you can collect

00:00:57.066 --> 00:00:59.016 A:middle
using those tools to be able to

00:00:59.016 --> 00:01:00.916 A:middle
understand and quantify your

00:00:59.016 --> 00:01:00.916 A:middle
understand and quantify your

00:01:00.916 --> 00:01:02.256 A:middle
application's impact on battery

00:01:02.256 --> 00:01:03.146 A:middle
life and performance.

00:01:03.756 --> 00:01:04.775 A:middle
And then I'm going to hand it

00:01:04.775 --> 00:01:06.056 A:middle
over to my colleagues, who are

00:01:06.056 --> 00:01:07.296 A:middle
going to go into these tools in

00:01:07.296 --> 00:01:08.916 A:middle
more depth and go through some

00:01:08.916 --> 00:01:10.396 A:middle
demos with you and show you how

00:01:10.396 --> 00:01:11.826 A:middle
you can use these tools in your

00:01:11.826 --> 00:01:13.666 A:middle
application to improve battery

00:01:13.666 --> 00:01:14.546 A:middle
life and performance.

00:01:14.766 --> 00:01:15.856 A:middle
And then I'll come back and

00:01:15.856 --> 00:01:16.496 A:middle
we'll wrap it up.

00:01:16.986 --> 00:01:19.566 A:middle
So, let's get started by talking

00:01:19.566 --> 00:01:20.336 A:middle
about some tools.

00:01:20.846 --> 00:01:22.876 A:middle
And in order to get started

00:01:22.876 --> 00:01:23.866 A:middle
talking about tools, we need to

00:01:23.866 --> 00:01:24.776 A:middle
talk about the development

00:01:24.776 --> 00:01:26.146 A:middle
process and get all familiar

00:01:26.146 --> 00:01:27.196 A:middle
with it.

00:01:27.366 --> 00:01:28.666 A:middle
Development comes in phases.

00:01:29.106 --> 00:01:30.396 A:middle
We've set it up into three

00:01:30.396 --> 00:01:31.126 A:middle
different phases.

00:01:31.456 --> 00:01:32.866 A:middle
Development and testing is the

00:01:32.866 --> 00:01:33.516 A:middle
first phase.

00:01:33.946 --> 00:01:35.136 A:middle
And at this stage, we're

00:01:35.136 --> 00:01:36.666 A:middle
ideating and creating, and it's

00:01:36.666 --> 00:01:38.056 A:middle
a very iterative process.

00:01:38.486 --> 00:01:39.716 A:middle
We're either at our desks or

00:01:39.716 --> 00:01:40.846 A:middle
maybe in the park, and we're

00:01:40.846 --> 00:01:41.846 A:middle
really trying to understand

00:01:42.416 --> 00:01:43.376 A:middle
what's going to make our app

00:01:43.376 --> 00:01:43.616 A:middle
great.

00:01:45.066 --> 00:01:46.876 A:middle
The next phase is called beta.

00:01:47.436 --> 00:01:48.546 A:middle
After we've solidified the

00:01:48.546 --> 00:01:49.846 A:middle
features in our application and

00:01:49.846 --> 00:01:52.876 A:middle
we're ready for a test run, we

00:01:52.876 --> 00:01:54.556 A:middle
give it to a few people, our

00:01:54.556 --> 00:01:56.146 A:middle
beta users, and we try to get

00:01:56.146 --> 00:01:56.516 A:middle
feedback.

00:01:56.986 --> 00:01:59.286 A:middle
And then finally, when we're

00:01:59.286 --> 00:02:00.546 A:middle
really proud of our application,

00:01:59.286 --> 00:02:00.546 A:middle
really proud of our application,

00:02:00.546 --> 00:02:01.396 A:middle
when we've collected all the

00:02:01.396 --> 00:02:02.696 A:middle
feedback, we're ready for

00:02:02.696 --> 00:02:03.206 A:middle
primetime.

00:02:03.766 --> 00:02:04.686 A:middle
It's public release.

00:02:05.286 --> 00:02:06.186 A:middle
And this is when it's on the

00:02:06.186 --> 00:02:07.226 A:middle
AppStore and available to

00:02:07.226 --> 00:02:08.416 A:middle
millions of customers around the

00:02:08.416 --> 00:02:08.606 A:middle
world.

00:02:09.996 --> 00:02:10.705 A:middle
For battery life and

00:02:10.705 --> 00:02:12.886 A:middle
performance, every step is

00:02:12.886 --> 00:02:13.976 A:middle
critically important.

00:02:14.846 --> 00:02:16.146 A:middle
We need to optimize at every

00:02:16.146 --> 00:02:17.546 A:middle
step of the way to make sure

00:02:17.546 --> 00:02:18.756 A:middle
that we're fixing bugs and

00:02:18.756 --> 00:02:20.186 A:middle
making our experience as good as

00:02:20.186 --> 00:02:21.286 A:middle
possible for our customers.

00:02:22.516 --> 00:02:24.246 A:middle
And so with that in mind, before

00:02:24.246 --> 00:02:26.356 A:middle
iOS 13 and Xcode 11, we offered

00:02:26.356 --> 00:02:27.456 A:middle
a great set of tools for you to

00:02:27.456 --> 00:02:28.966 A:middle
understand the impact of your

00:02:28.966 --> 00:02:30.266 A:middle
application's battery life and

00:02:30.266 --> 00:02:30.806 A:middle
performance.

00:02:31.876 --> 00:02:33.246 A:middle
During development and testing,

00:02:33.246 --> 00:02:34.506 A:middle
we have Xcode and all the tools

00:02:34.506 --> 00:02:35.436 A:middle
it contains within it.

00:02:35.686 --> 00:02:36.956 A:middle
Things like Instruments, the

00:02:36.956 --> 00:02:38.446 A:middle
Energy Gauges, and Profiling

00:02:38.446 --> 00:02:38.846 A:middle
tools.

00:02:40.026 --> 00:02:41.726 A:middle
And then in beta, you can

00:02:41.726 --> 00:02:43.206 A:middle
collect traces directly on beta

00:02:43.206 --> 00:02:44.496 A:middle
devices using the developer

00:02:44.496 --> 00:02:45.906 A:middle
settings and open those up in

00:02:45.906 --> 00:02:46.476 A:middle
Instruments.

00:02:46.846 --> 00:02:47.616 A:middle
And these are great for

00:02:47.616 --> 00:02:48.786 A:middle
understanding problems that may

00:02:48.786 --> 00:02:50.816 A:middle
not occur in your development

00:02:50.816 --> 00:02:52.096 A:middle
environment but occur in the

00:02:52.096 --> 00:02:53.786 A:middle
field such as when you don't

00:02:53.786 --> 00:02:54.546 A:middle
have good cell reception.

00:02:55.006 --> 00:02:57.336 A:middle
And then finally, the Xcode

00:02:57.336 --> 00:02:58.716 A:middle
organizer gives you access to a

00:02:58.716 --> 00:03:00.226 A:middle
powerful set of logs that you

00:02:58.716 --> 00:03:00.226 A:middle
powerful set of logs that you

00:03:00.226 --> 00:03:01.856 A:middle
can see from your public release

00:03:01.966 --> 00:03:03.596 A:middle
such as crashes and CPU energy

00:03:03.596 --> 00:03:04.066 A:middle
reports.

00:03:04.406 --> 00:03:05.426 A:middle
And these help you understand

00:03:05.426 --> 00:03:06.786 A:middle
problems that are maybe specific

00:03:06.786 --> 00:03:08.746 A:middle
to certain regions or specific

00:03:08.746 --> 00:03:09.856 A:middle
to certain customers that may

00:03:09.856 --> 00:03:11.016 A:middle
not have the same conditions as

00:03:11.016 --> 00:03:11.186 A:middle
you.

00:03:11.666 --> 00:03:14.756 A:middle
And so with these tools, we

00:03:14.946 --> 00:03:16.026 A:middle
thought to ourselves long and

00:03:16.026 --> 00:03:17.156 A:middle
hard over the last few years and

00:03:17.436 --> 00:03:18.876 A:middle
wondered there are probably some

00:03:18.876 --> 00:03:19.656 A:middle
gaps we can fill.

00:03:20.396 --> 00:03:21.936 A:middle
And we spoke to many of you,

00:03:22.416 --> 00:03:23.606 A:middle
both indirectly and directly,

00:03:23.926 --> 00:03:24.986 A:middle
and the feedback that we got

00:03:24.986 --> 00:03:26.896 A:middle
that was most of the gaps are in

00:03:26.896 --> 00:03:27.426 A:middle
metrics.

00:03:27.926 --> 00:03:29.576 A:middle
How do we quantify our

00:03:29.856 --> 00:03:31.056 A:middle
application's battery life and

00:03:31.056 --> 00:03:31.636 A:middle
performance?

00:03:31.956 --> 00:03:32.976 A:middle
How do we make a decision about

00:03:32.976 --> 00:03:34.466 A:middle
feature A versus feature B?

00:03:35.516 --> 00:03:37.426 A:middle
Well today, as a part of Xcode

00:03:37.426 --> 00:03:39.736 A:middle
11 and iOS 13, I'm super happy

00:03:39.736 --> 00:03:41.296 A:middle
to announce that we think we've

00:03:41.296 --> 00:03:42.446 A:middle
solved that gap and we've

00:03:42.446 --> 00:03:44.036 A:middle
bridged it with three new tools

00:03:44.036 --> 00:03:45.196 A:middle
that you can start using today,

00:03:46.536 --> 00:03:48.116 A:middle
starting with XCTest Metrics.

00:03:48.576 --> 00:03:49.956 A:middle
This is the first new tool that

00:03:49.956 --> 00:03:51.786 A:middle
we've shipped with Xcode 11 and

00:03:51.786 --> 00:03:52.816 A:middle
this is going to allow you to

00:03:52.816 --> 00:03:54.086 A:middle
collect directly within your

00:03:54.086 --> 00:03:56.406 A:middle
XCTest performance and battery

00:03:56.406 --> 00:03:58.166 A:middle
life metrics of measure blocks.

00:03:58.646 --> 00:03:59.716 A:middle
This is going to give you some

00:03:59.716 --> 00:04:01.376 A:middle
critical advantage when you're

00:03:59.716 --> 00:04:01.376 A:middle
critical advantage when you're

00:04:01.376 --> 00:04:02.686 A:middle
running XCTest and trying to

00:04:02.686 --> 00:04:04.416 A:middle
understand at a very early stage

00:04:04.776 --> 00:04:06.306 A:middle
what is the impact of a certain

00:04:06.306 --> 00:04:06.576 A:middle
feature.

00:04:07.796 --> 00:04:10.026 A:middle
The next is MetricKit, and this

00:04:10.026 --> 00:04:11.266 A:middle
is a powerful new framework that

00:04:11.266 --> 00:04:12.766 A:middle
we've built specifically for

00:04:12.766 --> 00:04:14.076 A:middle
battery and performance metric

00:04:14.076 --> 00:04:14.496 A:middle
collection.

00:04:14.946 --> 00:04:15.896 A:middle
And this is going to give you

00:04:15.896 --> 00:04:17.036 A:middle
metrics directly in your

00:04:17.036 --> 00:04:18.426 A:middle
application and help you

00:04:18.426 --> 00:04:20.016 A:middle
understand from all different

00:04:20.016 --> 00:04:21.466 A:middle
users how your application is

00:04:21.466 --> 00:04:22.366 A:middle
doing in the field.

00:04:23.516 --> 00:04:25.126 A:middle
And then finally, we've beefed

00:04:25.126 --> 00:04:27.626 A:middle
up the Xcode Organizer with

00:04:27.626 --> 00:04:28.876 A:middle
Xcode Metrics Organizer.

00:04:29.126 --> 00:04:30.346 A:middle
And this is going to be a

00:04:30.346 --> 00:04:31.966 A:middle
high-level aggregated set of

00:04:31.966 --> 00:04:33.176 A:middle
metrics that you're going to be

00:04:33.176 --> 00:04:34.876 A:middle
able to look at directly in the

00:04:34.876 --> 00:04:36.496 A:middle
Xcode Organizer without changing

00:04:36.496 --> 00:04:37.026 A:middle
any code.

00:04:37.026 --> 00:04:38.426 A:middle
And this is going to give you a

00:04:38.426 --> 00:04:39.896 A:middle
great high-level overview of how

00:04:39.896 --> 00:04:41.006 A:middle
your application is doing across

00:04:41.006 --> 00:04:42.116 A:middle
the world for all your

00:04:42.116 --> 00:04:42.636 A:middle
customers.

00:04:43.126 --> 00:04:44.966 A:middle
And so looking back at this

00:04:44.966 --> 00:04:46.276 A:middle
graph we just talked about, you

00:04:46.276 --> 00:04:47.606 A:middle
can imagine all these tools fit

00:04:47.606 --> 00:04:48.986 A:middle
really well in the development

00:04:48.986 --> 00:04:50.906 A:middle
process, starting with XCTest

00:04:50.906 --> 00:04:52.086 A:middle
Metrics during development and

00:04:52.126 --> 00:04:52.346 A:middle
testing.

00:04:53.276 --> 00:04:54.926 A:middle
Then, MetricKit, as you might

00:04:54.926 --> 00:04:56.576 A:middle
imagine, falls really well into

00:04:56.576 --> 00:04:57.956 A:middle
beta and public release when you

00:04:57.956 --> 00:04:58.906 A:middle
may not have access to the

00:04:58.906 --> 00:04:59.906 A:middle
devices that you're interested

00:04:59.906 --> 00:05:01.386 A:middle
in collecting metrics about.

00:04:59.906 --> 00:05:01.386 A:middle
in collecting metrics about.

00:05:01.896 --> 00:05:04.086 A:middle
And then finally, the Xcode

00:05:04.086 --> 00:05:06.056 A:middle
Metrics Organizer beefs up your

00:05:06.056 --> 00:05:06.936 A:middle
knowledge about the public

00:05:06.936 --> 00:05:08.266 A:middle
release and helps you understand

00:05:08.266 --> 00:05:10.826 A:middle
problems from primetime users.

00:05:11.206 --> 00:05:13.706 A:middle
And so when you put these all

00:05:13.706 --> 00:05:14.776 A:middle
together, we see that we have

00:05:14.816 --> 00:05:17.176 A:middle
more metrics to quantify battery

00:05:17.176 --> 00:05:18.726 A:middle
life and performance at every

00:05:18.726 --> 00:05:19.686 A:middle
stage in development.

00:05:19.976 --> 00:05:21.096 A:middle
And we think this is awesome.

00:05:21.276 --> 00:05:24.476 A:middle
So, we've talked about these

00:05:24.476 --> 00:05:26.106 A:middle
tools then a little bit and my

00:05:26.106 --> 00:05:27.076 A:middle
colleagues will go into depth

00:05:27.076 --> 00:05:28.166 A:middle
later about each of them.

00:05:28.816 --> 00:05:29.656 A:middle
But right now I want to talk

00:05:29.656 --> 00:05:30.526 A:middle
about the metrics that they

00:05:30.526 --> 00:05:30.916 A:middle
provide.

00:05:31.726 --> 00:05:32.766 A:middle
Because without these metrics,

00:05:32.766 --> 00:05:33.866 A:middle
we wouldn't be able to quantify

00:05:33.866 --> 00:05:34.426 A:middle
our impact.

00:05:35.016 --> 00:05:36.586 A:middle
So, let's go through them now.

00:05:37.556 --> 00:05:38.776 A:middle
This year we're providing two

00:05:38.776 --> 00:05:41.116 A:middle
sets of metrics - battery and

00:05:41.116 --> 00:05:41.716 A:middle
performance.

00:05:42.816 --> 00:05:44.866 A:middle
Who would've guessed?

00:05:45.046 --> 00:05:45.766 A:middle
Starting with the battery

00:05:45.766 --> 00:05:47.036 A:middle
metrics, we're providing a

00:05:47.036 --> 00:05:48.196 A:middle
really great set this year that

00:05:48.196 --> 00:05:49.266 A:middle
are going to help you quantify

00:05:49.266 --> 00:05:50.556 A:middle
your impact on battery life.

00:05:51.836 --> 00:05:55.656 A:middle
Processing, location, display,

00:05:56.476 --> 00:05:59.016 A:middle
networking, Bluetooth and

00:05:59.016 --> 00:06:01.366 A:middle
accessory metrics, multimedia

00:05:59.016 --> 00:06:01.366 A:middle
accessory metrics, multimedia

00:06:01.366 --> 00:06:03.366 A:middle
metrics, and camera metrics.

00:06:04.386 --> 00:06:05.646 A:middle
This is a huge set of metrics

00:06:05.646 --> 00:06:06.956 A:middle
that are really powerful but I

00:06:06.956 --> 00:06:08.076 A:middle
want to go through a certain

00:06:08.346 --> 00:06:09.636 A:middle
subset of these that we think

00:06:09.636 --> 00:06:10.786 A:middle
are really important for

00:06:10.786 --> 00:06:11.146 A:middle
everyone.

00:06:12.136 --> 00:06:13.056 A:middle
Starting with the processing

00:06:13.056 --> 00:06:13.516 A:middle
metrics.

00:06:14.906 --> 00:06:15.956 A:middle
Processing metrics, as you might

00:06:15.956 --> 00:06:17.476 A:middle
imagine, are things like CPU and

00:06:17.476 --> 00:06:19.326 A:middle
GPU time, and we want you to use

00:06:19.326 --> 00:06:21.056 A:middle
these metrics to quantify and

00:06:21.056 --> 00:06:22.236 A:middle
understand the workload of your

00:06:22.236 --> 00:06:22.746 A:middle
application.

00:06:23.136 --> 00:06:24.716 A:middle
So for example, you can do

00:06:24.716 --> 00:06:26.706 A:middle
things like find CPU spinners in

00:06:26.706 --> 00:06:27.796 A:middle
areas where you might not expect

00:06:27.796 --> 00:06:28.166 A:middle
them to be.

00:06:28.916 --> 00:06:30.446 A:middle
Additionally, you can use, you

00:06:30.446 --> 00:06:31.706 A:middle
can find unexpected rendering in

00:06:31.706 --> 00:06:32.616 A:middle
your application using these

00:06:32.616 --> 00:06:33.106 A:middle
metrics.

00:06:34.436 --> 00:06:35.456 A:middle
And critically, we want you to

00:06:35.456 --> 00:06:37.006 A:middle
use the processing metrics to

00:06:37.006 --> 00:06:38.106 A:middle
compare the algorithmic

00:06:38.106 --> 00:06:39.276 A:middle
efficiency of your features,

00:06:39.506 --> 00:06:40.606 A:middle
just like we discussed before.

00:06:40.606 --> 00:06:41.626 A:middle
If you have feature A and

00:06:41.626 --> 00:06:43.066 A:middle
feature B, you can use these

00:06:43.066 --> 00:06:44.146 A:middle
metrics to determine which one

00:06:44.146 --> 00:06:45.476 A:middle
is better for battery life.

00:06:45.916 --> 00:06:48.636 A:middle
Next up we have the location

00:06:48.636 --> 00:06:49.116 A:middle
metrics.

00:06:49.376 --> 00:06:50.666 A:middle
And these are going to be

00:06:50.666 --> 00:06:51.756 A:middle
metrics that are going to help

00:06:51.756 --> 00:06:52.816 A:middle
you understand and quantify your

00:06:52.816 --> 00:06:54.236 A:middle
location usage, such as your

00:06:54.236 --> 00:06:55.896 A:middle
cumulative usage, different

00:06:55.896 --> 00:06:57.356 A:middle
accuracy buckets, and your

00:06:57.356 --> 00:06:58.476 A:middle
background location usage.

00:06:58.746 --> 00:07:01.636 A:middle
Use these metrics to understand

00:06:58.746 --> 00:07:01.636 A:middle
Use these metrics to understand

00:07:01.636 --> 00:07:02.816 A:middle
your location usage, because

00:07:02.816 --> 00:07:04.126 A:middle
it's a common pitfall when it

00:07:04.126 --> 00:07:04.886 A:middle
comes to battery life.

00:07:05.436 --> 00:07:06.936 A:middle
For example, you might find

00:07:06.936 --> 00:07:08.116 A:middle
cases where you leave location

00:07:08.116 --> 00:07:09.206 A:middle
running when you don't expect it

00:07:09.206 --> 00:07:09.606 A:middle
to be running.

00:07:10.266 --> 00:07:12.376 A:middle
Or you may use an accuracy

00:07:12.376 --> 00:07:13.906 A:middle
bucket that's too powerful for

00:07:13.906 --> 00:07:14.716 A:middle
the use case that you've

00:07:15.136 --> 00:07:16.516 A:middle
implemented location for.

00:07:17.086 --> 00:07:18.236 A:middle
So, these measures are going to

00:07:18.236 --> 00:07:19.596 A:middle
help you understand and optimize

00:07:19.596 --> 00:07:20.326 A:middle
those scenarios.

00:07:20.786 --> 00:07:24.166 A:middle
Next, we're providing display

00:07:24.166 --> 00:07:24.636 A:middle
metrics.

00:07:25.316 --> 00:07:26.326 A:middle
And this year we're giving you a

00:07:26.326 --> 00:07:27.516 A:middle
variety of display metrics but I

00:07:27.516 --> 00:07:28.226 A:middle
want to talk about one in

00:07:28.226 --> 00:07:30.026 A:middle
particular called average pixel

00:07:30.026 --> 00:07:30.506 A:middle
luminance.

00:07:31.856 --> 00:07:33.696 A:middle
On your OLED devices such as the

00:07:33.696 --> 00:07:35.856 A:middle
iPhone X and XS, the color of

00:07:35.856 --> 00:07:37.376 A:middle
your UI in your application has

00:07:37.376 --> 00:07:38.836 A:middle
a direct impact on the amount of

00:07:38.836 --> 00:07:40.316 A:middle
energy that you consume on the

00:07:40.316 --> 00:07:40.706 A:middle
display.

00:07:40.706 --> 00:07:43.306 A:middle
And we represent this through a

00:07:43.306 --> 00:07:44.416 A:middle
metric called average pixel

00:07:44.416 --> 00:07:45.496 A:middle
luminance or APL.

00:07:46.096 --> 00:07:48.936 A:middle
And in a nutshell, the lighter

00:07:48.936 --> 00:07:50.446 A:middle
colors that you use in your UI,

00:07:51.076 --> 00:07:52.196 A:middle
the more energy you'll consume

00:07:52.196 --> 00:07:53.316 A:middle
on OLED devices, and this is

00:07:53.316 --> 00:07:54.476 A:middle
what we call a higher APL.

00:07:55.546 --> 00:07:56.886 A:middle
And the darker colors you use in

00:07:56.886 --> 00:07:59.296 A:middle
your UI, this is what you call a

00:07:59.336 --> 00:08:01.046 A:middle
lower APL, and this will consume

00:07:59.336 --> 00:08:01.046 A:middle
lower APL, and this will consume

00:08:01.046 --> 00:08:03.336 A:middle
less energy, so keep an eye on

00:08:03.336 --> 00:08:04.246 A:middle
average pixel luminance this

00:08:04.246 --> 00:08:04.386 A:middle
year.

00:08:04.896 --> 00:08:06.796 A:middle
Last but not least, we have the

00:08:06.796 --> 00:08:07.676 A:middle
networking metrics.

00:08:08.476 --> 00:08:09.766 A:middle
And as you might already

00:08:09.766 --> 00:08:11.146 A:middle
imagine, these are going to be

00:08:11.146 --> 00:08:12.676 A:middle
metrics such as upload and

00:08:12.676 --> 00:08:14.146 A:middle
download bytes over cellular and

00:08:14.146 --> 00:08:15.826 A:middle
wifi and connectivity metrics.

00:08:16.346 --> 00:08:18.456 A:middle
We want you to optimize

00:08:18.456 --> 00:08:19.466 A:middle
networking usage whenever

00:08:19.466 --> 00:08:20.366 A:middle
possible because it is a

00:08:20.366 --> 00:08:21.336 A:middle
high-energy subsystem.

00:08:22.246 --> 00:08:23.556 A:middle
So do things with these metrics

00:08:23.656 --> 00:08:25.106 A:middle
such as validating your expected

00:08:25.106 --> 00:08:26.186 A:middle
upload and download counts.

00:08:26.996 --> 00:08:27.796 A:middle
Maybe you have an upload that

00:08:27.796 --> 00:08:29.106 A:middle
should've occurred at a later

00:08:29.106 --> 00:08:29.406 A:middle
time.

00:08:29.756 --> 00:08:30.556 A:middle
You can use these metrics to

00:08:30.556 --> 00:08:31.156 A:middle
figure that out.

00:08:31.576 --> 00:08:33.976 A:middle
And more importantly, we want

00:08:33.976 --> 00:08:34.946 A:middle
you to understand the impact of

00:08:34.946 --> 00:08:36.316 A:middle
connectivity on your network

00:08:36.316 --> 00:08:36.876 A:middle
transfers.

00:08:37.346 --> 00:08:38.336 A:middle
It plays a huge role in the

00:08:38.336 --> 00:08:39.166 A:middle
amount of energy that you

00:08:39.166 --> 00:08:40.556 A:middle
consume when doing networking.

00:08:40.556 --> 00:08:41.996 A:middle
So, these metrics will help you

00:08:41.996 --> 00:08:43.556 A:middle
understand if you're staying in

00:08:43.556 --> 00:08:45.016 A:middle
poor connectivity condition for

00:08:45.016 --> 00:08:45.996 A:middle
long periods of time.

00:08:46.386 --> 00:08:49.146 A:middle
And those are the battery

00:08:49.146 --> 00:08:49.616 A:middle
metrics.

00:08:50.156 --> 00:08:51.436 A:middle
We think these are a great set

00:08:51.646 --> 00:08:52.496 A:middle
of metrics that are going to

00:08:52.496 --> 00:08:54.046 A:middle
help you quantify the impact of

00:08:54.046 --> 00:08:55.156 A:middle
your application on battery

00:08:55.156 --> 00:08:55.476 A:middle
life.

00:08:55.986 --> 00:08:57.946 A:middle
Let's move onto the performance

00:08:57.946 --> 00:08:59.786 A:middle
metrics and this year we're

00:08:59.786 --> 00:09:02.646 A:middle
providing hangs, disk metrics,

00:08:59.786 --> 00:09:02.646 A:middle
providing hangs, disk metrics,

00:09:03.736 --> 00:09:05.026 A:middle
application launch metrics,

00:09:06.036 --> 00:09:08.406 A:middle
memory metrics, and custom

00:09:08.406 --> 00:09:09.096 A:middle
interval metrics.

00:09:10.226 --> 00:09:11.406 A:middle
And as with the battery metrics,

00:09:11.406 --> 00:09:12.666 A:middle
I want to focus on a subset of

00:09:12.666 --> 00:09:13.756 A:middle
these that are going to be

00:09:13.756 --> 00:09:14.956 A:middle
really important for all of us

00:09:14.956 --> 00:09:17.046 A:middle
here, starting with the hang

00:09:17.046 --> 00:09:17.536 A:middle
metrics.

00:09:18.036 --> 00:09:21.066 A:middle
Hang metrics this year are going

00:09:21.066 --> 00:09:22.376 A:middle
to be a histogram of the amount

00:09:22.376 --> 00:09:23.546 A:middle
of time your application spends

00:09:23.586 --> 00:09:24.906 A:middle
unresponsive to user input.

00:09:25.936 --> 00:09:27.906 A:middle
And this is a huge user impact.

00:09:28.396 --> 00:09:29.576 A:middle
You can imagine if your user is

00:09:29.576 --> 00:09:30.596 A:middle
user your application and

00:09:30.596 --> 00:09:31.816 A:middle
suddenly it stops working,

00:09:32.186 --> 00:09:32.766 A:middle
that's not good.

00:09:33.996 --> 00:09:36.206 A:middle
So, use these metrics to work,

00:09:36.206 --> 00:09:37.496 A:middle
to understand where you can move

00:09:37.496 --> 00:09:38.376 A:middle
work off the main thread of

00:09:38.376 --> 00:09:40.466 A:middle
possible and utilize things like

00:09:40.466 --> 00:09:41.976 A:middle
dispatches and asynchronous cues

00:09:42.286 --> 00:09:43.366 A:middle
to reduce your hang rates.

00:09:43.806 --> 00:09:46.486 A:middle
Next we have the disk metrics.

00:09:47.196 --> 00:09:48.486 A:middle
And this year we're going to be

00:09:48.486 --> 00:09:50.306 A:middle
focusing on disc logical writes.

00:09:50.836 --> 00:09:52.956 A:middle
And we want you to quantify disk

00:09:52.956 --> 00:09:54.546 A:middle
usage whenever possible because

00:09:54.546 --> 00:09:55.556 A:middle
disk usage, as with all

00:09:55.556 --> 00:09:57.316 A:middle
subsystems, is a resource that

00:09:57.316 --> 00:09:58.346 A:middle
you should only use when you

00:09:58.346 --> 00:09:58.936 A:middle
really need to.

00:09:59.776 --> 00:10:01.286 A:middle
So, use these metrics to verify

00:09:59.776 --> 00:10:01.286 A:middle
So, use these metrics to verify

00:10:01.286 --> 00:10:02.236 A:middle
if you have instances of

00:10:02.236 --> 00:10:04.076 A:middle
unexpected disk writes and if

00:10:04.076 --> 00:10:05.516 A:middle
you're employing any coalescing

00:10:05.516 --> 00:10:06.706 A:middle
strategies for your disk writes,

00:10:06.706 --> 00:10:07.846 A:middle
you can use these disk metrics

00:10:07.846 --> 00:10:08.986 A:middle
to verify those as well.

00:10:11.016 --> 00:10:12.366 A:middle
Next are the application launch

00:10:12.366 --> 00:10:12.806 A:middle
metrics.

00:10:13.826 --> 00:10:15.146 A:middle
And this is super great, because

00:10:15.146 --> 00:10:16.596 A:middle
this year we're providing launch

00:10:16.666 --> 00:10:18.496 A:middle
and resume time histograms to

00:10:18.496 --> 00:10:19.556 A:middle
help you understand your launch

00:10:19.556 --> 00:10:20.576 A:middle
and resume times of your

00:10:20.576 --> 00:10:21.056 A:middle
application.

00:10:22.656 --> 00:10:24.016 A:middle
We want you to quantify the

00:10:24.016 --> 00:10:26.276 A:middle
impact on performance that

00:10:26.276 --> 00:10:27.276 A:middle
launch and resume have using

00:10:27.276 --> 00:10:27.896 A:middle
these metrics.

00:10:28.436 --> 00:10:31.146 A:middle
And we want you to understand

00:10:31.146 --> 00:10:31.976 A:middle
the impact of the launch

00:10:31.976 --> 00:10:33.696 A:middle
activities, so when you do

00:10:33.696 --> 00:10:34.916 A:middle
things before your application

00:10:34.916 --> 00:10:35.956 A:middle
launches such as a database

00:10:35.956 --> 00:10:37.546 A:middle
update, this can directly impact

00:10:37.546 --> 00:10:38.556 A:middle
your launch and resume times.

00:10:39.016 --> 00:10:39.996 A:middle
These metrics will help you see

00:10:39.996 --> 00:10:40.616 A:middle
that in real time.

00:10:41.156 --> 00:10:44.086 A:middle
And we also want you to see the

00:10:44.086 --> 00:10:45.396 A:middle
difference between launch and

00:10:45.396 --> 00:10:47.026 A:middle
resume, because they're two very

00:10:47.026 --> 00:10:47.866 A:middle
different paths.

00:10:48.746 --> 00:10:49.866 A:middle
And for more information on

00:10:49.866 --> 00:10:51.336 A:middle
that, and how to optimize App

00:10:51.336 --> 00:10:52.816 A:middle
Lauch, I recommend that you go

00:10:52.816 --> 00:10:53.846 A:middle
see the talk tomorrow on

00:10:53.846 --> 00:10:55.536 A:middle
Optimizing App Launch at 4:20

00:10:55.536 --> 00:10:55.776 A:middle
pm.

00:10:56.286 --> 00:10:58.886 A:middle
Last but not least, we have the

00:10:58.886 --> 00:10:59.646 A:middle
memory metrics.

00:10:59.746 --> 00:11:01.586 A:middle
And for memory this year, we're

00:10:59.746 --> 00:11:01.586 A:middle
And for memory this year, we're

00:11:01.586 --> 00:11:02.626 A:middle
going to be providing things

00:11:02.626 --> 00:11:04.506 A:middle
like average suspended memory

00:11:05.056 --> 00:11:06.966 A:middle
and peak memory.

00:11:06.966 --> 00:11:08.076 A:middle
Memory management can really

00:11:08.076 --> 00:11:10.226 A:middle
impact launch times, and so we

00:11:10.226 --> 00:11:11.256 A:middle
want you to use these metrics to

00:11:11.256 --> 00:11:12.356 A:middle
keep an eye and keep tabs on

00:11:12.356 --> 00:11:13.966 A:middle
your memory usage, which is a

00:11:13.966 --> 00:11:15.416 A:middle
critical metric for performance.

00:11:15.906 --> 00:11:18.426 A:middle
Use these metrics to understand

00:11:18.426 --> 00:11:19.746 A:middle
your memory usage and if you

00:11:19.746 --> 00:11:20.846 A:middle
have spikes of peak memory that

00:11:20.846 --> 00:11:21.636 A:middle
are way higher than your

00:11:21.636 --> 00:11:23.076 A:middle
expectation, this could be

00:11:23.076 --> 00:11:24.846 A:middle
indicative of a problem such a

00:11:24.846 --> 00:11:26.086 A:middle
hard-to-reproduce memory leak.

00:11:27.606 --> 00:11:28.766 A:middle
If you focus on reducing your

00:11:28.766 --> 00:11:30.156 A:middle
average memory on suspend, which

00:11:30.156 --> 00:11:30.936 A:middle
you can quantify with these

00:11:30.936 --> 00:11:32.356 A:middle
metrics, you'll also be able to

00:11:32.356 --> 00:11:33.546 A:middle
reduce your launch times and

00:11:33.546 --> 00:11:34.406 A:middle
your susceptibility to

00:11:34.406 --> 00:11:35.306 A:middle
background termination.

00:11:35.856 --> 00:11:38.466 A:middle
And so those are the performance

00:11:38.466 --> 00:11:41.106 A:middle
metrics or subset of them, and

00:11:41.276 --> 00:11:42.016 A:middle
we think these are going to be

00:11:42.016 --> 00:11:42.926 A:middle
really key I helping you

00:11:42.926 --> 00:11:44.426 A:middle
understand your performance both

00:11:44.426 --> 00:11:45.336 A:middle
on and off device.

00:11:45.856 --> 00:11:49.706 A:middle
And so to recap, we talked about

00:11:49.706 --> 00:11:50.876 A:middle
the tools that you had before

00:11:50.876 --> 00:11:52.786 A:middle
Xcode 11 and iOS 13 to

00:11:52.786 --> 00:11:54.246 A:middle
understand and quantify power

00:11:54.246 --> 00:11:54.846 A:middle
and performance.

00:11:56.016 --> 00:11:57.026 A:middle
Then we talked about the new set

00:11:57.026 --> 00:11:58.056 A:middle
of tools that we're offering you

00:11:58.056 --> 00:11:59.376 A:middle
this year to be able to take

00:11:59.376 --> 00:12:00.626 A:middle
that quantification one step

00:11:59.376 --> 00:12:00.626 A:middle
that quantification one step

00:12:00.626 --> 00:12:02.236 A:middle
further and help you optimize

00:12:02.236 --> 00:12:02.886 A:middle
your application.

00:12:03.786 --> 00:12:05.016 A:middle
And these great set of metrics

00:12:05.016 --> 00:12:06.326 A:middle
that they provide that are going

00:12:06.326 --> 00:12:07.506 A:middle
to really help you take your app

00:12:07.506 --> 00:12:08.246 A:middle
to the next level.

00:12:08.806 --> 00:12:09.876 A:middle
And so without further ado, I

00:12:09.876 --> 00:12:10.726 A:middle
want to hand it off to my

00:12:10.726 --> 00:12:12.056 A:middle
colleagues who are going to go

00:12:12.056 --> 00:12:13.166 A:middle
into some deep dives with each

00:12:13.166 --> 00:12:14.226 A:middle
of the tools that we discussed,

00:12:14.756 --> 00:12:16.046 A:middle
starting with Sastry, who's

00:12:16.046 --> 00:12:16.866 A:middle
going to talk to you about

00:12:16.866 --> 00:12:18.146 A:middle
measuring app impact during

00:12:18.146 --> 00:12:19.466 A:middle
development and testing with

00:12:19.466 --> 00:12:20.356 A:middle
XCTest Metrics.

00:12:20.856 --> 00:12:21.246 A:middle
Sastry?

00:12:23.516 --> 00:12:26.500 A:middle
[ Applause ]

00:12:29.176 --> 00:12:30.126 A:middle
&gt;&gt; Thank you, Phil.

00:12:30.926 --> 00:12:31.566 A:middle
Hello, everyone.

00:12:31.676 --> 00:12:33.196 A:middle
My name is Sastry Vadlamari.

00:12:33.446 --> 00:12:34.836 A:middle
I'm a software engineer here at

00:12:34.836 --> 00:12:35.286 A:middle
Apple.

00:12:35.936 --> 00:12:37.366 A:middle
Let's recap some of the tools at

00:12:37.366 --> 00:12:38.486 A:middle
your disposal to measure

00:12:38.486 --> 00:12:39.886 A:middle
application impact during

00:12:39.886 --> 00:12:40.946 A:middle
development and testing.

00:12:41.936 --> 00:12:43.366 A:middle
Right inside the debug navigator

00:12:43.366 --> 00:12:44.946 A:middle
of XCode, you can get a

00:12:44.946 --> 00:12:46.816 A:middle
high-level overview of the CPU

00:12:46.816 --> 00:12:48.566 A:middle
memory and energy subsystems.

00:12:48.566 --> 00:12:50.816 A:middle
And when you want to dig into

00:12:50.816 --> 00:12:52.556 A:middle
the details or diagnose some

00:12:52.556 --> 00:12:54.616 A:middle
issues, Instruments is a real

00:12:54.616 --> 00:12:55.346 A:middle
useful tool.

00:12:55.906 --> 00:12:57.106 A:middle
It comes with templates that

00:12:57.106 --> 00:12:59.306 A:middle
help you diagnose memory issues,

00:13:00.096 --> 00:13:03.526 A:middle
system unresponsiveness, and

00:13:03.526 --> 00:13:06.636 A:middle
excessive disk usage, and energy

00:13:06.636 --> 00:13:07.066 A:middle
issues.

00:13:08.446 --> 00:13:10.376 A:middle
You can also use XCTest to

00:13:10.376 --> 00:13:11.536 A:middle
measure performance.

00:13:12.116 --> 00:13:13.886 A:middle
XCTest is a program that lets

00:13:13.886 --> 00:13:15.986 A:middle
you write UI and unit tests that

00:13:15.986 --> 00:13:18.006 A:middle
are seamlessly integrated into

00:13:18.176 --> 00:13:19.886 A:middle
XCode testing workflow.

00:13:21.326 --> 00:13:22.316 A:middle
You can not only measure

00:13:22.316 --> 00:13:23.666 A:middle
performance, but you can catch

00:13:23.666 --> 00:13:25.356 A:middle
regressions who have baselines.

00:13:25.986 --> 00:13:29.446 A:middle
But then until last year, the

00:13:29.446 --> 00:13:31.136 A:middle
only metric you could measure

00:13:31.136 --> 00:13:32.216 A:middle
was world clock time.

00:13:32.816 --> 00:13:34.526 A:middle
Performance has more dimensions.

00:13:34.836 --> 00:13:36.386 A:middle
So this year we've added new

00:13:36.386 --> 00:13:40.286 A:middle
performance metrics into XCTest.

00:13:40.366 --> 00:13:41.896 A:middle
So, let's take a look into the

00:13:41.896 --> 00:13:42.346 A:middle
details.

00:13:42.696 --> 00:13:44.946 A:middle
This is how a sample performance

00:13:44.946 --> 00:13:46.016 A:middle
XCTest looks like.

00:13:46.396 --> 00:13:47.846 A:middle
You need to pattern a block of

00:13:47.936 --> 00:13:49.386 A:middle
code where you specify the

00:13:49.386 --> 00:13:50.916 A:middle
actions you want to perform into

00:13:50.916 --> 00:13:52.376 A:middle
the measure method and it would

00:13:52.376 --> 00:13:53.936 A:middle
measure the time it takes to

00:13:53.936 --> 00:13:55.406 A:middle
perform - to execute this

00:13:55.406 --> 00:13:56.176 A:middle
this block of code.

00:13:56.666 --> 00:13:58.306 A:middle
Now, in order to convert this

00:13:58.306 --> 00:13:59.556 A:middle
into the new style of

00:13:59.556 --> 00:14:01.536 A:middle
performance test and to get more

00:13:59.556 --> 00:14:01.536 A:middle
performance test and to get more

00:14:01.536 --> 00:14:03.646 A:middle
details, we just need to pattern

00:14:03.766 --> 00:14:05.536 A:middle
your time, memory, and CPU

00:14:05.536 --> 00:14:07.246 A:middle
objects, pack them into a list

00:14:07.246 --> 00:14:08.816 A:middle
and pass them in as a parameter

00:14:08.816 --> 00:14:09.776 A:middle
to the measure method.

00:14:10.296 --> 00:14:11.986 A:middle
And with such minor changes,

00:14:11.986 --> 00:14:13.376 A:middle
your existing performance test

00:14:13.376 --> 00:14:15.026 A:middle
can measure multiple dimensions.

00:14:16.076 --> 00:14:18.396 A:middle
We've gone a little further.

00:14:18.396 --> 00:14:21.286 A:middle
With every new UI testing target

00:14:21.286 --> 00:14:22.856 A:middle
that you create using XCTest,

00:14:23.426 --> 00:14:24.516 A:middle
we're going to give you an

00:14:24.516 --> 00:14:25.746 A:middle
application launch test for

00:14:25.746 --> 00:14:25.986 A:middle
free.

00:14:26.156 --> 00:14:27.796 A:middle
So, without writing any code,

00:14:27.796 --> 00:14:29.486 A:middle
you will have a test that'll

00:14:29.486 --> 00:14:30.716 A:middle
measure your application's

00:14:30.716 --> 00:14:32.886 A:middle
launch time.

00:14:33.056 --> 00:14:33.976 A:middle
Let's jump into a demo.

00:14:39.156 --> 00:14:40.976 A:middle
So, for the purpose of this

00:14:41.036 --> 00:14:42.236 A:middle
session, we created an

00:14:42.296 --> 00:14:44.026 A:middle
application that we call an

00:14:44.126 --> 00:14:46.596 A:middle
Awesome Photo App.

00:14:46.656 --> 00:14:48.026 A:middle
Now, it has a few features.

00:14:48.416 --> 00:14:49.506 A:middle
Let me walk you through that.

00:14:49.506 --> 00:14:51.026 A:middle
So, it lets you take images.

00:14:52.646 --> 00:14:54.946 A:middle
And when you take an image, it

00:14:55.046 --> 00:14:56.526 A:middle
geotags it so you can see the

00:14:56.526 --> 00:14:57.436 A:middle
location below.

00:14:58.076 --> 00:14:59.696 A:middle
And then you can apply some

00:14:59.766 --> 00:15:01.246 A:middle
fancy effects to the picture.

00:14:59.766 --> 00:15:01.246 A:middle
fancy effects to the picture.

00:15:02.226 --> 00:15:03.156 A:middle
We'll be referencing this

00:15:03.156 --> 00:15:04.886 A:middle
application tool for the rest of

00:15:04.886 --> 00:15:05.296 A:middle
the demo.

00:15:05.886 --> 00:15:07.176 A:middle
You also have standard features

00:15:07.176 --> 00:15:08.236 A:middle
like being able to load a

00:15:08.236 --> 00:15:09.406 A:middle
picture from your photo screen,

00:15:09.536 --> 00:15:11.036 A:middle
save the picture, and upload the

00:15:11.036 --> 00:15:12.666 A:middle
picture to the server.

00:15:13.046 --> 00:15:14.226 A:middle
So, what does this mean?

00:15:14.226 --> 00:15:16.196 A:middle
How do you test this application

00:15:16.196 --> 00:15:16.796 A:middle
from Xcode?

00:15:17.746 --> 00:15:19.786 A:middle
Well, as I mentioned earlier,

00:15:20.436 --> 00:15:24.996 A:middle
every new XCTest UI target that

00:15:25.046 --> 00:15:26.016 A:middle
you create comes with an

00:15:26.086 --> 00:15:27.276 A:middle
application launch test for

00:15:27.276 --> 00:15:27.626 A:middle
free.

00:15:28.216 --> 00:15:29.416 A:middle
So, I've already taken the

00:15:29.416 --> 00:15:30.916 A:middle
liberty of running this test

00:15:31.376 --> 00:15:33.326 A:middle
prior to this presentation and

00:15:33.326 --> 00:15:34.716 A:middle
here's how the results look

00:15:34.716 --> 00:15:34.866 A:middle
like.

00:15:34.866 --> 00:15:38.086 A:middle
As you can see, it takes about

00:15:38.086 --> 00:15:39.746 A:middle
.2 seconds for launching my

00:15:39.746 --> 00:15:40.386 A:middle
application.

00:15:40.456 --> 00:15:41.546 A:middle
That's acceptable.

00:15:42.066 --> 00:15:43.496 A:middle
You can see the results of the

00:15:43.496 --> 00:15:45.536 A:middle
multiple iterations and all of

00:15:45.536 --> 00:15:46.376 A:middle
them are around the same

00:15:46.376 --> 00:15:46.826 A:middle
numbers.

00:15:47.586 --> 00:15:49.306 A:middle
And this is an interesting fact.

00:15:49.306 --> 00:15:50.636 A:middle
You can set your baseline.

00:15:51.156 --> 00:15:53.316 A:middle
The baselines are a mechanism

00:15:53.316 --> 00:15:54.906 A:middle
wherein you set guidelines for

00:15:54.906 --> 00:15:56.166 A:middle
what you expect your performance

00:15:56.166 --> 00:15:56.916 A:middle
numbers to be.

00:15:57.266 --> 00:15:58.286 A:middle
So, whenever your performance

00:15:58.286 --> 00:16:00.236 A:middle
numbers go off them, your tests

00:15:58.286 --> 00:16:00.236 A:middle
numbers go off them, your tests

00:16:00.236 --> 00:16:01.386 A:middle
would fail and that's how you

00:16:01.386 --> 00:16:02.316 A:middle
catch regressions.

00:16:02.366 --> 00:16:04.156 A:middle
So, you can set the average, you

00:16:04.156 --> 00:16:05.636 A:middle
can set the standard deviation,

00:16:06.776 --> 00:16:08.796 A:middle
and whenever you run your test

00:16:08.796 --> 00:16:10.176 A:middle
next time, if any of the numbers

00:16:10.176 --> 00:16:11.816 A:middle
exceed these conditions, your

00:16:11.816 --> 00:16:12.436 A:middle
tests would fail.

00:16:13.236 --> 00:16:14.556 A:middle
So, I've made a change in the

00:16:14.616 --> 00:16:17.736 A:middle
code and I want to ensure that

00:16:17.736 --> 00:16:18.976 A:middle
my application launch time

00:16:18.976 --> 00:16:20.286 A:middle
hasn't regressed.

00:16:20.316 --> 00:16:21.746 A:middle
So, let me just run the test

00:16:21.746 --> 00:16:21.976 A:middle
again.

00:16:23.356 --> 00:16:25.486 A:middle
There's a couple of points you

00:16:25.486 --> 00:16:26.396 A:middle
need to keep in mind when

00:16:26.396 --> 00:16:27.836 A:middle
running performance tests.

00:16:28.076 --> 00:16:29.696 A:middle
It's a good idea to not have the

00:16:29.846 --> 00:16:31.066 A:middle
debugger attached to your

00:16:31.066 --> 00:16:32.806 A:middle
process at it adds some overhead

00:16:32.806 --> 00:16:34.246 A:middle
and it's also a good idea to

00:16:34.246 --> 00:16:35.996 A:middle
turn off all diagnostic options

00:16:35.996 --> 00:16:36.836 A:middle
like sanitizers.

00:16:36.836 --> 00:16:39.516 A:middle
You can do this easily by either

00:16:39.516 --> 00:16:41.156 A:middle
creating a separate scheme or

00:16:41.156 --> 00:16:42.696 A:middle
you could use the test plan

00:16:42.896 --> 00:16:44.106 A:middle
feature that was recently

00:16:44.106 --> 00:16:45.526 A:middle
introduced to turn it off

00:16:45.526 --> 00:16:45.876 A:middle
easily.

00:16:46.506 --> 00:16:47.406 A:middle
So, now you can see that the

00:16:47.406 --> 00:16:49.336 A:middle
test has run and it has failed.

00:16:49.406 --> 00:16:50.306 A:middle
If you were to dig into the

00:16:50.306 --> 00:16:51.966 A:middle
details, you will see that's

00:16:51.966 --> 00:16:53.566 A:middle
becuase the average has

00:16:53.566 --> 00:16:54.706 A:middle
really exceeded.

00:16:54.706 --> 00:16:56.466 A:middle
I mean, what was .2 seconds has

00:16:56.466 --> 00:16:58.406 A:middle
now become about 1.2 seconds.

00:16:59.036 --> 00:17:00.676 A:middle
So, in order to debug this, you

00:16:59.036 --> 00:17:00.676 A:middle
So, in order to debug this, you

00:17:00.676 --> 00:17:02.396 A:middle
can attach this to Instruments

00:17:02.396 --> 00:17:03.696 A:middle
and use the Timer Profiler

00:17:03.696 --> 00:17:05.616 A:middle
template and find out why your

00:17:05.616 --> 00:17:06.896 A:middle
app launch time has gone so bad.

00:17:07.465 --> 00:17:09.165 A:middle
I'll spare you the mystery and

00:17:09.165 --> 00:17:10.506 A:middle
I'll tell you what I did.

00:17:10.616 --> 00:17:12.026 A:middle
So, I'm actually trying to look

00:17:12.026 --> 00:17:13.316 A:middle
for a database, checking for

00:17:13.316 --> 00:17:14.915 A:middle
database updates in my main

00:17:14.915 --> 00:17:15.185 A:middle
thread.

00:17:15.185 --> 00:17:16.435 A:middle
And as Phil mentioned earlier,

00:17:16.616 --> 00:17:17.746 A:middle
it's a real bad thing to do.

00:17:18.326 --> 00:17:19.886 A:middle
So, the right solution for this

00:17:19.886 --> 00:17:21.185 A:middle
is to dispatch this into a

00:17:21.185 --> 00:17:24.195 A:middle
background queue and hopefully

00:17:24.195 --> 00:17:25.226 A:middle
this fixes our problem.

00:17:25.576 --> 00:17:27.286 A:middle
Let's run the test again and

00:17:27.286 --> 00:17:29.646 A:middle
ensure that the numbers are well

00:17:29.646 --> 00:17:31.356 A:middle
within what we expect it to be.

00:17:32.266 --> 00:17:34.536 A:middle
The point here is you can,

00:17:34.536 --> 00:17:35.656 A:middle
XCTest not only helps you

00:17:35.656 --> 00:17:37.256 A:middle
measure but it also helps you

00:17:37.256 --> 00:17:38.506 A:middle
ensure things don't regress.

00:17:38.656 --> 00:17:40.206 A:middle
So, it's more for you write your

00:17:40.206 --> 00:17:41.676 A:middle
test once and you can forget

00:17:41.676 --> 00:17:43.076 A:middle
about it and keep running it in

00:17:43.196 --> 00:17:44.996 A:middle
your CI system and ensure that,

00:17:45.056 --> 00:17:46.346 A:middle
you know your performance

00:17:46.346 --> 00:17:47.026 A:middle
doesn't degrade.

00:17:47.026 --> 00:17:49.476 A:middle
As you can see, the test passed

00:17:49.666 --> 00:17:50.896 A:middle
and yay, we fixed our bug.

00:17:51.516 --> 00:17:56.896 A:middle
[ Applause ]

00:17:57.396 --> 00:17:59.566 A:middle
So, it's pretty easy to convert

00:17:59.566 --> 00:18:01.536 A:middle
your existing XCTest performance

00:17:59.566 --> 00:18:01.536 A:middle
your existing XCTest performance

00:18:01.576 --> 00:18:03.526 A:middle
tests into to have more

00:18:03.526 --> 00:18:04.566 A:middle
dimensions, as I mentioned

00:18:04.566 --> 00:18:04.856 A:middle
earlier.

00:18:05.306 --> 00:18:06.826 A:middle
So, all you need to do is

00:18:06.936 --> 00:18:09.186 A:middle
pattern the objects in a list of

00:18:09.186 --> 00:18:10.406 A:middle
what you intend to measure.

00:18:10.586 --> 00:18:11.726 A:middle
Like for instance, I had a

00:18:11.726 --> 00:18:13.056 A:middle
performance test that was

00:18:13.056 --> 00:18:14.586 A:middle
measuring the time it took to

00:18:14.656 --> 00:18:17.836 A:middle
take a picture and, you know,

00:18:17.836 --> 00:18:20.346 A:middle
use the photo and apply an

00:18:20.486 --> 00:18:20.696 A:middle
effect.

00:18:20.696 --> 00:18:21.766 A:middle
And earlier, this would've just

00:18:21.766 --> 00:18:22.686 A:middle
measured the amount of time.

00:18:23.206 --> 00:18:25.016 A:middle
But now, by just passing the

00:18:25.016 --> 00:18:26.986 A:middle
additional memory metric object,

00:18:27.316 --> 00:18:28.496 A:middle
I can now even measure the

00:18:28.496 --> 00:18:30.196 A:middle
memory, in fact, of performing

00:18:30.196 --> 00:18:30.776 A:middle
these actions.

00:18:32.266 --> 00:18:34.176 A:middle
XCTest doesn't have to be

00:18:34.176 --> 00:18:35.846 A:middle
restricted to only UI tests.

00:18:35.846 --> 00:18:37.236 A:middle
You can also use it for unit

00:18:37.236 --> 00:18:37.496 A:middle
tests.

00:18:38.216 --> 00:18:40.226 A:middle
And I'll give you an example

00:18:40.226 --> 00:18:40.466 A:middle
here.

00:18:40.466 --> 00:18:42.036 A:middle
So I have the Apply Effects

00:18:42.036 --> 00:18:43.296 A:middle
feature, and I have an option of

00:18:43.296 --> 00:18:44.506 A:middle
selecting whether I want to use

00:18:44.506 --> 00:18:46.386 A:middle
one photo or multiple photos.

00:18:46.936 --> 00:18:48.636 A:middle
It adds very little value from a

00:18:48.716 --> 00:18:51.296 A:middle
feature perspective but if the

00:18:51.296 --> 00:18:52.376 A:middle
overhead isn't much, I would

00:18:52.376 --> 00:18:53.196 A:middle
rather like to do it.

00:18:53.686 --> 00:18:54.906 A:middle
So, I took the liberty of

00:18:54.906 --> 00:18:56.896 A:middle
running this test and measuring

00:18:56.896 --> 00:18:59.326 A:middle
the time it takes to run this,

00:18:59.326 --> 00:19:00.956 A:middle
to apply the effect with one

00:18:59.326 --> 00:19:00.956 A:middle
to apply the effect with one

00:19:00.956 --> 00:19:01.156 A:middle
photo.

00:19:01.156 --> 00:19:03.176 A:middle
And it's about 1000KB.

00:19:03.666 --> 00:19:05.596 A:middle
But now it's really easy to

00:19:05.596 --> 00:19:08.096 A:middle
measure the impact of adding, of

00:19:08.556 --> 00:19:09.486 A:middle
a different scenario.

00:19:09.486 --> 00:19:10.646 A:middle
All you need to do is change the

00:19:10.646 --> 00:19:10.936 A:middle
code.

00:19:10.936 --> 00:19:11.966 A:middle
I've changed the code to choose

00:19:12.006 --> 00:19:13.636 A:middle
filters, and you run the test

00:19:13.636 --> 00:19:13.946 A:middle
again.

00:19:14.516 --> 00:19:16.516 A:middle
And the test runs and you'll get

00:19:16.516 --> 00:19:18.566 A:middle
back your numbers immediately.

00:19:18.766 --> 00:19:20.716 A:middle
And when that happens, you can

00:19:20.796 --> 00:19:22.816 A:middle
check your impact.

00:19:23.096 --> 00:19:26.656 A:middle
So, as you can see, the impact

00:19:27.066 --> 00:19:29.936 A:middle
is, the test failed because this

00:19:29.936 --> 00:19:32.796 A:middle
one is about 100% worse.

00:19:32.796 --> 00:19:34.286 A:middle
It's about 2000KB.

00:19:34.366 --> 00:19:35.866 A:middle
So probably I'm going to stick

00:19:35.866 --> 00:19:37.886 A:middle
with one photo.

00:19:38.446 --> 00:19:43.216 A:middle
So, to summarize, I gave you a

00:19:43.216 --> 00:19:45.806 A:middle
demo of using a few metrics like

00:19:45.806 --> 00:19:46.166 A:middle
memory.

00:19:46.436 --> 00:19:48.136 A:middle
But we added a whole bunch of

00:19:48.136 --> 00:19:48.296 A:middle
them.

00:19:48.296 --> 00:19:49.176 A:middle
We added memory.

00:19:49.176 --> 00:19:50.126 A:middle
We added storage.

00:19:50.126 --> 00:19:50.916 A:middle
We added CPU.

00:19:50.916 --> 00:19:52.376 A:middle
We added OS Signpost.

00:19:52.606 --> 00:19:54.396 A:middle
But we didn't stop there.

00:19:54.396 --> 00:19:56.386 A:middle
We put away generic underlying

00:19:56.386 --> 00:19:57.956 A:middle
system, so you can actually

00:19:57.956 --> 00:19:59.316 A:middle
implement your own custom

00:19:59.316 --> 00:20:00.636 A:middle
metrics and use the underlying

00:19:59.316 --> 00:20:00.636 A:middle
metrics and use the underlying

00:20:00.636 --> 00:20:01.946 A:middle
reporting system to catch

00:20:01.946 --> 00:20:02.466 A:middle
regressions.

00:20:03.116 --> 00:20:03.746 A:middle
Please look into the

00:20:03.746 --> 00:20:05.286 A:middle
documentation for more details.

00:20:06.326 --> 00:20:07.836 A:middle
And then as I demonstrated in

00:20:07.836 --> 00:20:09.526 A:middle
the last example, you can also

00:20:09.526 --> 00:20:11.796 A:middle
use XCTest to do some sort of AB

00:20:11.796 --> 00:20:12.076 A:middle
testing.

00:20:12.076 --> 00:20:14.386 A:middle
It's really a low-cost, easy way

00:20:14.816 --> 00:20:16.536 A:middle
to check if algorithm A is

00:20:16.536 --> 00:20:17.586 A:middle
better than algorithm B.

00:20:17.786 --> 00:20:19.166 A:middle
Just wrap them around on simple

00:20:19.166 --> 00:20:20.736 A:middle
unit tests and you can have your

00:20:20.736 --> 00:20:20.996 A:middle
numbers.

00:20:21.966 --> 00:20:25.176 A:middle
And because XCTest works so well

00:20:25.176 --> 00:20:26.716 A:middle
with both Xcode and Xcode

00:20:26.716 --> 00:20:28.646 A:middle
server, you could use this

00:20:28.646 --> 00:20:30.866 A:middle
performance test, both in your

00:20:30.866 --> 00:20:32.256 A:middle
development and testing phase

00:20:32.256 --> 00:20:33.376 A:middle
and also as part of your

00:20:33.376 --> 00:20:34.846 A:middle
continuous integration system

00:20:34.956 --> 00:20:36.456 A:middle
and ensure that your app doesn't

00:20:36.456 --> 00:20:37.586 A:middle
regress on the performance

00:20:37.586 --> 00:20:37.806 A:middle
front.

00:20:38.356 --> 00:20:40.346 A:middle
So, that's what's new with

00:20:40.406 --> 00:20:42.386 A:middle
performance testing with XCTest.

00:20:42.816 --> 00:20:43.836 A:middle
Next, I'd like to call upon

00:20:43.926 --> 00:20:45.016 A:middle
Ashish, who's going to talk to

00:20:45.016 --> 00:20:46.026 A:middle
you about measuring your

00:20:46.026 --> 00:20:47.526 A:middle
application's impact out in the

00:20:47.526 --> 00:20:47.796 A:middle
field.

00:20:49.516 --> 00:20:54.500 A:middle
[ Applause ]

00:20:59.586 --> 00:21:00.266 A:middle
&gt;&gt; Thanks, Sastry.

00:20:59.586 --> 00:21:00.266 A:middle
&gt;&gt; Thanks, Sastry.

00:21:00.976 --> 00:21:02.566 A:middle
So, after your initial testing

00:21:02.566 --> 00:21:04.256 A:middle
and development phase, there are

00:21:04.256 --> 00:21:05.546 A:middle
many benefits of collecting

00:21:05.546 --> 00:21:06.616 A:middle
field metrics to further

00:21:06.616 --> 00:21:08.016 A:middle
optimize your battery life and

00:21:08.016 --> 00:21:09.396 A:middle
performance of your application.

00:21:10.456 --> 00:21:11.726 A:middle
This includes leveraging your

00:21:11.726 --> 00:21:13.486 A:middle
beta population of a few users

00:21:13.916 --> 00:21:15.256 A:middle
as well as your broader customer

00:21:15.256 --> 00:21:15.876 A:middle
population.

00:21:16.456 --> 00:21:18.786 A:middle
In the field, your application

00:21:18.786 --> 00:21:19.746 A:middle
goes through a wide range of

00:21:19.746 --> 00:21:21.516 A:middle
user scenarios such as different

00:21:21.516 --> 00:21:22.876 A:middle
cellular networks, signal

00:21:22.876 --> 00:21:24.666 A:middle
conditions, different types of

00:21:24.666 --> 00:21:26.216 A:middle
devices, as well as different

00:21:26.216 --> 00:21:26.726 A:middle
locations.

00:21:27.396 --> 00:21:29.076 A:middle
These help identify issues that

00:21:29.076 --> 00:21:30.406 A:middle
may not have been caught during

00:21:30.406 --> 00:21:31.326 A:middle
on-desk testing.

00:21:31.836 --> 00:21:34.106 A:middle
You can also use this field

00:21:34.106 --> 00:21:35.596 A:middle
metrics to compare the battery

00:21:35.596 --> 00:21:36.666 A:middle
life and performance with

00:21:36.666 --> 00:21:37.716 A:middle
previous operations.

00:21:38.176 --> 00:21:39.496 A:middle
You can use this data to figure

00:21:39.496 --> 00:21:40.716 A:middle
out whether there are any new

00:21:40.716 --> 00:21:42.966 A:middle
regressions or egregious issues.

00:21:43.536 --> 00:21:45.056 A:middle
These field metrics already

00:21:45.056 --> 00:21:46.286 A:middle
helps you to also understand the

00:21:46.286 --> 00:21:48.326 A:middle
impact of new features and do AB

00:21:48.326 --> 00:21:49.396 A:middle
testing in the field with a

00:21:49.396 --> 00:21:50.486 A:middle
broader set of users.

00:21:51.156 --> 00:21:53.956 A:middle
To solve this problem, I am very

00:21:53.956 --> 00:21:55.166 A:middle
happy to announce we are

00:21:55.166 --> 00:21:56.936 A:middle
releasing MetricKit, which is an

00:21:56.976 --> 00:21:58.556 A:middle
on-device framework to collect

00:21:58.556 --> 00:21:59.906 A:middle
battery life and performance

00:21:59.906 --> 00:22:01.116 A:middle
metrics for your application.

00:21:59.906 --> 00:22:01.116 A:middle
metrics for your application.

00:22:02.436 --> 00:22:04.236 A:middle
We also added a capability in

00:22:04.236 --> 00:22:05.746 A:middle
MetricKit to collect metrics

00:22:05.746 --> 00:22:07.116 A:middle
around the critical sections in

00:22:07.116 --> 00:22:07.956 A:middle
your application.

00:22:08.396 --> 00:22:10.226 A:middle
We have built all these features

00:22:10.226 --> 00:22:11.936 A:middle
into MetricKit while protecting

00:22:11.936 --> 00:22:13.676 A:middle
your users' privacy in our data

00:22:13.706 --> 00:22:14.856 A:middle
collection aggregation

00:22:14.856 --> 00:22:15.446 A:middle
mechanisms.

00:22:16.116 --> 00:22:18.946 A:middle
It's very easy to adopt

00:22:18.946 --> 00:22:20.516 A:middle
MetricKit and get started, as

00:22:20.516 --> 00:22:21.266 A:middle
I'll show you next.

00:22:21.866 --> 00:22:24.256 A:middle
So, the code here is all you

00:22:24.256 --> 00:22:25.176 A:middle
need to get started.

00:22:25.636 --> 00:22:27.276 A:middle
First, you import the MetricKit

00:22:27.336 --> 00:22:29.256 A:middle
framework and create a class in

00:22:29.256 --> 00:22:30.616 A:middle
your application which conforms

00:22:30.616 --> 00:22:32.086 A:middle
to the metric manager subscriber

00:22:32.086 --> 00:22:32.566 A:middle
protocol.

00:22:33.146 --> 00:22:35.956 A:middle
And inside the class, you have

00:22:35.956 --> 00:22:37.026 A:middle
the subscribe for metrics.

00:22:37.686 --> 00:22:39.016 A:middle
This lets the device know that

00:22:39.016 --> 00:22:40.366 A:middle
your application is interested

00:22:40.366 --> 00:22:41.416 A:middle
in receiving metrics for the

00:22:41.416 --> 00:22:43.196 A:middle
metric kit so that it can start

00:22:43.196 --> 00:22:46.756 A:middle
collecting that on the device.

00:22:46.896 --> 00:22:48.596 A:middle
Finally, as a developer, you

00:22:48.596 --> 00:22:49.666 A:middle
have to implement a delegate

00:22:49.666 --> 00:22:50.776 A:middle
method called didReceive.

00:22:51.316 --> 00:22:52.866 A:middle
This method is involved whenever

00:22:52.866 --> 00:22:54.266 A:middle
there is a metric payload to be

00:22:54.266 --> 00:22:55.656 A:middle
delivered to your application on

00:22:55.656 --> 00:22:56.006 A:middle
the device.

00:22:56.716 --> 00:22:58.086 A:middle
And it's up to you to take any

00:22:58.086 --> 00:22:59.386 A:middle
actions once you receive this

00:22:59.386 --> 00:23:00.196 A:middle
payload on the device.

00:22:59.386 --> 00:23:00.196 A:middle
payload on the device.

00:23:00.796 --> 00:23:02.356 A:middle
For example, you can choose to

00:23:02.356 --> 00:23:03.946 A:middle
save it to a file, or you can

00:23:03.946 --> 00:23:05.126 A:middle
also upload to your server so

00:23:05.206 --> 00:23:06.176 A:middle
you can collect this from the

00:23:06.176 --> 00:23:07.496 A:middle
field for multiple users.

00:23:09.576 --> 00:23:11.306 A:middle
After using metric, after

00:23:11.306 --> 00:23:12.636 A:middle
adopting MetricKit, as your

00:23:12.636 --> 00:23:13.996 A:middle
application gets used during the

00:23:13.996 --> 00:23:15.856 A:middle
day, we automatically collect an

00:23:15.856 --> 00:23:17.006 A:middle
aggregate metrics for our

00:23:17.006 --> 00:23:17.506 A:middle
application.

00:23:18.756 --> 00:23:20.476 A:middle
And at the end of a 24-hour

00:23:20.476 --> 00:23:22.226 A:middle
period, we generate a metric

00:23:22.226 --> 00:23:23.796 A:middle
summary for the entire day, the

00:23:23.796 --> 00:23:25.716 A:middle
last 24 hours, and return this

00:23:25.716 --> 00:23:28.776 A:middle
payload back on the device.

00:23:28.926 --> 00:23:30.246 A:middle
Now, let's understand how we can

00:23:30.246 --> 00:23:31.436 A:middle
measure the impact of critical

00:23:31.436 --> 00:23:32.556 A:middle
code sections in our

00:23:32.556 --> 00:23:33.096 A:middle
applications.

00:23:34.516 --> 00:23:35.576 A:middle
Going back to the awesome

00:23:35.576 --> 00:23:37.076 A:middle
PhotoApp example which Sastry

00:23:37.076 --> 00:23:38.716 A:middle
described earlier, users can

00:23:38.716 --> 00:23:39.926 A:middle
perform any activities in there.

00:23:40.796 --> 00:23:42.286 A:middle
For example, they can choose to

00:23:42.286 --> 00:23:44.386 A:middle
take a photo and on that photo,

00:23:44.386 --> 00:23:45.366 A:middle
they can apply many cool

00:23:45.366 --> 00:23:45.866 A:middle
effects.

00:23:46.486 --> 00:23:47.996 A:middle
If they like the effect that

00:23:47.996 --> 00:23:49.556 A:middle
they took, they can choose to

00:23:49.556 --> 00:23:50.586 A:middle
save the photo on the device.

00:23:51.656 --> 00:23:52.966 A:middle
MetricKit provides the ability

00:23:52.966 --> 00:23:54.236 A:middle
to capture the precise battery

00:23:54.236 --> 00:23:56.036 A:middle
life and performance impact of

00:23:56.036 --> 00:23:57.216 A:middle
each of these features of your

00:23:57.216 --> 00:23:57.776 A:middle
application.

00:23:59.436 --> 00:24:00.776 A:middle
Now, let's see how we can do

00:23:59.436 --> 00:24:00.776 A:middle
Now, let's see how we can do

00:24:00.776 --> 00:24:01.016 A:middle
that.

00:24:01.716 --> 00:24:03.316 A:middle
We are happy to introduce a new

00:24:03.316 --> 00:24:04.776 A:middle
API inside MetricKit called

00:24:04.776 --> 00:24:06.856 A:middle
mxSignposts which is implemented

00:24:06.856 --> 00:24:08.596 A:middle
as a wraparound OS Signpost.

00:24:09.426 --> 00:24:10.596 A:middle
By bookending the critical

00:24:10.596 --> 00:24:11.926 A:middle
sections in your application

00:24:11.926 --> 00:24:13.686 A:middle
with mxSignpost, you can capture

00:24:13.686 --> 00:24:14.626 A:middle
the precise impact.

00:24:15.206 --> 00:24:16.136 A:middle
Let's take an example.

00:24:17.736 --> 00:24:20.026 A:middle
So, to use mxSignpost, all you

00:24:20.026 --> 00:24:22.756 A:middle
need to do is to use MetricKit's

00:24:22.756 --> 00:24:25.166 A:middle
make log handle maker and create

00:24:25.166 --> 00:24:26.166 A:middle
a log handle with it.

00:24:26.866 --> 00:24:28.506 A:middle
And use that log handle to drop

00:24:28.506 --> 00:24:30.276 A:middle
mxSignpost around critical code

00:24:30.276 --> 00:24:30.786 A:middle
sections.

00:24:31.696 --> 00:24:32.876 A:middle
In this example, I want to

00:24:32.876 --> 00:24:34.066 A:middle
measure the impact of the save

00:24:34.066 --> 00:24:35.396 A:middle
photo feature that we have in

00:24:35.396 --> 00:24:36.236 A:middle
our awesome photo app.

00:24:36.646 --> 00:24:37.956 A:middle
So, I've dropped in mxSignpost

00:24:37.956 --> 00:24:38.986 A:middle
just before and after this

00:24:38.986 --> 00:24:39.796 A:middle
application code.

00:24:40.776 --> 00:24:42.396 A:middle
MetricKit will automatically

00:24:42.396 --> 00:24:44.006 A:middle
collect metrics and process them

00:24:44.116 --> 00:24:46.976 A:middle
for you on the device.

00:24:47.136 --> 00:24:48.296 A:middle
Now, let's jump into a demo

00:24:48.296 --> 00:24:49.386 A:middle
where I'll show you how to adopt

00:24:49.386 --> 00:24:50.216 A:middle
MetricKit in your own

00:24:50.216 --> 00:24:52.000 A:middle
application.

00:24:59.966 --> 00:25:01.396 A:middle
So, now I'm back in the Xcode

00:24:59.966 --> 00:25:01.396 A:middle
So, now I'm back in the Xcode

00:25:01.396 --> 00:25:03.566 A:middle
project of my application and

00:25:04.066 --> 00:25:05.666 A:middle
I'm in the view controller.swift

00:25:05.666 --> 00:25:07.266 A:middle
file after my application.

00:25:07.466 --> 00:25:08.576 A:middle
As you can see, I have already

00:25:08.576 --> 00:25:10.156 A:middle
adopted the MetricKit framework

00:25:10.156 --> 00:25:12.056 A:middle
here and created a class which

00:25:12.056 --> 00:25:13.376 A:middle
conforms to the metric manager

00:25:13.376 --> 00:25:14.366 A:middle
subscriber protocol.

00:25:14.956 --> 00:25:16.606 A:middle
And inside that class, I've

00:25:16.606 --> 00:25:18.046 A:middle
added some code already for the

00:25:18.046 --> 00:25:19.006 A:middle
didReceive method.

00:25:19.476 --> 00:25:20.586 A:middle
So, this method is involved

00:25:20.586 --> 00:25:21.516 A:middle
whenever there's a metric

00:25:21.516 --> 00:25:22.256 A:middle
payload available.

00:25:23.116 --> 00:25:24.606 A:middle
For my application, I've decided

00:25:24.606 --> 00:25:26.156 A:middle
to save the data to a file so

00:25:26.156 --> 00:25:27.466 A:middle
that I can do some on-device

00:25:27.466 --> 00:25:28.426 A:middle
processing later.

00:25:29.026 --> 00:25:30.276 A:middle
For the purposes of today's

00:25:30.276 --> 00:25:31.156 A:middle
demo, I've also written a

00:25:31.156 --> 00:25:33.166 A:middle
function to print this data so I

00:25:33.166 --> 00:25:33.886 A:middle
can walk you through the

00:25:33.886 --> 00:25:34.946 A:middle
contents of the payload.

00:25:35.866 --> 00:25:36.946 A:middle
Finally, I have written this

00:25:37.006 --> 00:25:38.616 A:middle
function to upload this data to

00:25:38.616 --> 00:25:40.266 A:middle
my own server so that it can

00:25:40.266 --> 00:25:41.526 A:middle
collect this data from multiple

00:25:41.526 --> 00:25:43.356 A:middle
users during beta testing as

00:25:43.596 --> 00:25:45.916 A:middle
well as customers.

00:25:45.966 --> 00:25:48.026 A:middle
Now, as this method is only

00:25:48.026 --> 00:25:49.446 A:middle
involved at most once per day,

00:25:49.806 --> 00:25:50.756 A:middle
whenever there's a payload

00:25:50.756 --> 00:25:52.056 A:middle
available for our application,

00:25:52.426 --> 00:25:54.026 A:middle
we built a new feature in Xcode

00:25:54.026 --> 00:25:55.016 A:middle
to help you test this out.

00:25:55.426 --> 00:25:56.386 A:middle
So, let me show you how that

00:25:56.386 --> 00:25:56.746 A:middle
works.

00:25:57.556 --> 00:25:58.806 A:middle
We're first going to run this

00:25:58.806 --> 00:25:59.836 A:middle
application on my test device

00:25:59.836 --> 00:25:59.976 A:middle
here.

00:26:05.096 --> 00:26:06.546 A:middle
So the application is running

00:26:06.546 --> 00:26:06.716 A:middle
now.

00:26:07.196 --> 00:26:08.816 A:middle
Now, I'm going to go into debug

00:26:08.816 --> 00:26:10.286 A:middle
and click on select MetricKit

00:26:10.286 --> 00:26:10.736 A:middle
payloads.

00:26:11.696 --> 00:26:12.936 A:middle
What this does is it sends a

00:26:12.936 --> 00:26:13.796 A:middle
dummy payload to your

00:26:13.796 --> 00:26:15.346 A:middle
application so that you can test

00:26:15.346 --> 00:26:16.986 A:middle
the code inside the did receive

00:26:16.986 --> 00:26:17.356 A:middle
method.

00:26:17.996 --> 00:26:18.846 A:middle
Now, let's walk through some of

00:26:18.846 --> 00:26:19.936 A:middle
the contents in MetricKit

00:26:19.976 --> 00:26:21.366 A:middle
payload that is available today.

00:26:22.656 --> 00:26:23.946 A:middle
So, the first example here shows

00:26:23.946 --> 00:26:25.196 A:middle
a meta data related to the

00:26:25.196 --> 00:26:26.786 A:middle
application such as the build

00:26:26.786 --> 00:26:28.696 A:middle
version, device type, and the OS

00:26:28.696 --> 00:26:29.186 A:middle
version.

00:26:29.846 --> 00:26:31.216 A:middle
Then we get a few histographs

00:26:31.216 --> 00:26:32.236 A:middle
related to very useful

00:26:32.236 --> 00:26:33.456 A:middle
performance metrics such as

00:26:33.456 --> 00:26:35.246 A:middle
application launch, resume, and

00:26:35.246 --> 00:26:35.566 A:middle
hangs.

00:26:36.686 --> 00:26:38.226 A:middle
Then we get metrics related to

00:26:38.226 --> 00:26:39.716 A:middle
the application usage such as

00:26:39.716 --> 00:26:40.986 A:middle
foreground and background times

00:26:41.666 --> 00:26:43.126 A:middle
and a few background metrics

00:26:43.126 --> 00:26:44.576 A:middle
such as CPU time and GPU time.

00:26:45.336 --> 00:26:46.356 A:middle
Then there are metrics around

00:26:46.356 --> 00:26:48.616 A:middle
location usage as well as

00:26:48.616 --> 00:26:50.826 A:middle
networking, disk IO memory, and

00:26:50.826 --> 00:26:51.246 A:middle
disk play.

00:26:52.176 --> 00:26:53.426 A:middle
And finally we have a section

00:26:53.426 --> 00:26:55.246 A:middle
around the mxSignpost summary

00:26:55.466 --> 00:26:56.356 A:middle
for your application.

00:26:56.946 --> 00:26:57.826 A:middle
As you can see, there are a lot

00:26:57.826 --> 00:26:59.166 A:middle
of metrics that are available

00:26:59.166 --> 00:27:00.376 A:middle
right now in MetricKit.

00:26:59.166 --> 00:27:00.376 A:middle
right now in MetricKit.

00:27:00.376 --> 00:27:01.486 A:middle
So, I would highly recommend you

00:27:01.486 --> 00:27:02.846 A:middle
to check out our documentation

00:27:02.846 --> 00:27:04.436 A:middle
to learn more about the details

00:27:05.086 --> 00:27:05.196 A:middle
here.

00:27:05.196 --> 00:27:06.566 A:middle
So, let's go back to the slides

00:27:06.566 --> 00:27:06.716 A:middle
now.

00:27:10.166 --> 00:27:12.066 A:middle
So, as you see, as we saw during

00:27:12.066 --> 00:27:13.226 A:middle
the demo, it's very easy to get

00:27:13.226 --> 00:27:15.146 A:middle
started with using MetricKit and

00:27:15.146 --> 00:27:16.296 A:middle
start getting metrics on your

00:27:16.296 --> 00:27:16.976 A:middle
devices right now.

00:27:19.556 --> 00:27:20.776 A:middle
So, for the, also for the

00:27:20.776 --> 00:27:22.476 A:middle
application, we decided to take

00:27:22.476 --> 00:27:24.026 A:middle
a road trip and collect some

00:27:24.026 --> 00:27:25.256 A:middle
field metrics as well as some

00:27:25.256 --> 00:27:25.866 A:middle
fun photos.

00:27:27.416 --> 00:27:28.816 A:middle
The next day after using

00:27:28.816 --> 00:27:30.176 A:middle
MetricKit in the field with our

00:27:30.176 --> 00:27:31.766 A:middle
awesome photo application, we

00:27:31.766 --> 00:27:33.146 A:middle
get, we got a payload on the

00:27:33.146 --> 00:27:34.786 A:middle
device which is uploaded to my

00:27:34.826 --> 00:27:35.766 A:middle
own service using the

00:27:35.766 --> 00:27:37.026 A:middle
application code that I showed

00:27:37.026 --> 00:27:37.556 A:middle
you earlier.

00:27:39.286 --> 00:27:40.936 A:middle
Now, let's use this data that we

00:27:40.936 --> 00:27:42.076 A:middle
received from the field to

00:27:42.076 --> 00:27:43.476 A:middle
identify some hotspots in our

00:27:43.476 --> 00:27:44.636 A:middle
awesome photo application.

00:27:45.946 --> 00:27:47.166 A:middle
Following the first example,

00:27:47.746 --> 00:27:48.936 A:middle
this data shows the overall

00:27:48.936 --> 00:27:49.786 A:middle
foreground time and the

00:27:49.786 --> 00:27:50.476 A:middle
background time of the

00:27:50.476 --> 00:27:52.026 A:middle
application as well as the

00:27:52.026 --> 00:27:53.416 A:middle
overall location sage by

00:27:53.416 --> 00:27:54.746 A:middle
different accuracy markets.

00:27:55.566 --> 00:27:57.396 A:middle
It shows that the location uses

00:27:57.396 --> 00:27:58.246 A:middle
by the application which is

00:27:58.246 --> 00:27:59.756 A:middle
around 720 seconds, is very

00:27:59.756 --> 00:28:00.816 A:middle
close to the foreground time,

00:27:59.756 --> 00:28:00.816 A:middle
close to the foreground time,

00:28:01.446 --> 00:28:02.666 A:middle
which is very unexpected.

00:28:03.306 --> 00:28:04.816 A:middle
All I'm using the location for

00:28:04.816 --> 00:28:06.436 A:middle
is to geotag a photo whenever I

00:28:06.436 --> 00:28:08.706 A:middle
capture it on the device.

00:28:08.706 --> 00:28:10.686 A:middle
Going back to the application, I

00:28:10.686 --> 00:28:11.936 A:middle
found that if I'm going to close

00:28:11.936 --> 00:28:13.266 A:middle
the location after I started

00:28:13.266 --> 00:28:13.756 A:middle
taking it.

00:28:14.336 --> 00:28:15.616 A:middle
So, this is a very good example

00:28:15.616 --> 00:28:16.956 A:middle
of how you can use MetricKit to

00:28:16.956 --> 00:28:18.576 A:middle
identify an expected application

00:28:18.576 --> 00:28:19.006 A:middle
behavior.

00:28:19.926 --> 00:28:21.136 A:middle
Another thing we can optimize

00:28:21.136 --> 00:28:23.096 A:middle
using this data is to reduce the

00:28:23.096 --> 00:28:24.726 A:middle
location usage if it works for

00:28:24.726 --> 00:28:25.276 A:middle
our use case.

00:28:25.796 --> 00:28:27.076 A:middle
Because the higher the location

00:28:27.076 --> 00:28:28.566 A:middle
accuracy, the more the battery

00:28:29.096 --> 00:28:29.216 A:middle
drain.

00:28:30.156 --> 00:28:31.646 A:middle
The next example shows the

00:28:31.646 --> 00:28:33.056 A:middle
histogram of application hang

00:28:33.056 --> 00:28:33.536 A:middle
durations.

00:28:33.906 --> 00:28:35.366 A:middle
So, the data shows there are

00:28:35.366 --> 00:28:36.776 A:middle
many instances of hang durations

00:28:36.776 --> 00:28:38.476 A:middle
of more than 5 seconds, which is

00:28:38.476 --> 00:28:39.966 A:middle
very bad for user experience.

00:28:40.926 --> 00:28:42.406 A:middle
So, one of the ways you can

00:28:42.406 --> 00:28:43.606 A:middle
solve this as Phil described

00:28:43.606 --> 00:28:44.626 A:middle
earlier is to avoid long

00:28:44.626 --> 00:28:45.906 A:middle
blocking calls in the mainframe,

00:28:46.296 --> 00:28:47.626 A:middle
so we can reduce any hang

00:28:47.626 --> 00:28:48.276 A:middle
instances.

00:28:48.856 --> 00:28:51.706 A:middle
The final example shows how you

00:28:51.706 --> 00:28:53.286 A:middle
can use the mxSignpost data in

00:28:53.286 --> 00:28:55.536 A:middle
MetricKit to identify hotspots

00:28:55.536 --> 00:28:57.036 A:middle
from a specific application code

00:28:57.036 --> 00:28:57.386 A:middle
region.

00:28:58.866 --> 00:29:00.456 A:middle
In my application, I decided to

00:28:58.866 --> 00:29:00.456 A:middle
In my application, I decided to

00:29:00.456 --> 00:29:01.796 A:middle
put mxSignpost around all the

00:29:01.796 --> 00:29:02.416 A:middle
main features.

00:29:02.416 --> 00:29:04.706 A:middle
For example, load photo, apply

00:29:04.706 --> 00:29:06.206 A:middle
effect, date photo, save photo,

00:29:06.206 --> 00:29:06.936 A:middle
and upload photo.

00:29:07.646 --> 00:29:09.236 A:middle
Using mxSignpost, MetricKit was

00:29:09.236 --> 00:29:10.456 A:middle
able to figure out how many

00:29:10.456 --> 00:29:12.126 A:middle
times each of these instances

00:29:12.126 --> 00:29:14.086 A:middle
run in the field as well as a

00:29:14.086 --> 00:29:15.396 A:middle
few back to life and performance

00:29:15.396 --> 00:29:17.336 A:middle
metrics such as this CPU time,

00:29:18.176 --> 00:29:19.856 A:middle
and the overall CPU time for the

00:29:19.856 --> 00:29:20.786 A:middle
entire application.

00:29:22.296 --> 00:29:23.436 A:middle
This data shows that there were

00:29:23.436 --> 00:29:25.886 A:middle
many, so the CP usage by the

00:29:25.886 --> 00:29:27.516 A:middle
ApplyEffect feature was more

00:29:27.516 --> 00:29:28.446 A:middle
than 50%.

00:29:28.976 --> 00:29:30.756 A:middle
So, now I know where I can go

00:29:30.756 --> 00:29:31.676 A:middle
and further optimize my

00:29:31.676 --> 00:29:33.526 A:middle
application so that I can reduce

00:29:33.526 --> 00:29:34.776 A:middle
the battery usage overall.

00:29:36.876 --> 00:29:38.166 A:middle
So, following are the key

00:29:38.166 --> 00:29:39.466 A:middle
takeaways from this section.

00:29:40.576 --> 00:29:42.276 A:middle
You can use MetricKit to collect

00:29:42.276 --> 00:29:43.286 A:middle
field battery life and

00:29:43.286 --> 00:29:44.536 A:middle
performance metrics for your

00:29:44.536 --> 00:29:45.956 A:middle
application starting from iOS

00:29:45.956 --> 00:29:46.366 A:middle
13.

00:29:46.906 --> 00:29:49.546 A:middle
You can use MetricKit to

00:29:49.546 --> 00:29:50.976 A:middle
identify hotspots early from

00:29:50.976 --> 00:29:51.986 A:middle
your application, such as the

00:29:51.986 --> 00:29:53.246 A:middle
example I showed today with the

00:29:53.246 --> 00:29:55.076 A:middle
beta population, and you can do

00:29:55.076 --> 00:29:56.396 A:middle
so in the customer population,

00:29:56.396 --> 00:29:56.566 A:middle
too.

00:29:56.936 --> 00:30:00.046 A:middle
Another example we saw today is

00:29:56.936 --> 00:30:00.046 A:middle
Another example we saw today is

00:30:00.046 --> 00:30:01.666 A:middle
how I use MetricKit data from a

00:30:01.716 --> 00:30:02.806 A:middle
single user to identify

00:30:02.806 --> 00:30:03.396 A:middle
hotspots.

00:30:03.706 --> 00:30:05.276 A:middle
Aggregating the same data from

00:30:05.276 --> 00:30:06.586 A:middle
multiple users can provide you

00:30:06.586 --> 00:30:08.136 A:middle
much deeper insights about

00:30:08.136 --> 00:30:09.306 A:middle
improving your application.

00:30:11.226 --> 00:30:12.616 A:middle
So, now I hand over the stage to

00:30:12.616 --> 00:30:13.676 A:middle
Anshul, who's going to talk

00:30:13.676 --> 00:30:14.576 A:middle
about an out-of-the-box

00:30:14.576 --> 00:30:16.016 A:middle
telemetry solution in Xcode.

00:30:16.236 --> 00:30:16.596 A:middle
Anshul?

00:30:17.516 --> 00:30:21.756 A:middle
[ Applause ]

00:30:22.256 --> 00:30:23.366 A:middle
&gt;&gt; Thank you very much, Ashish.

00:30:23.936 --> 00:30:25.096 A:middle
Hi, I'm Anshul Davra.

00:30:25.096 --> 00:30:26.656 A:middle
I'm here to talk about Xcode

00:30:26.656 --> 00:30:27.906 A:middle
Metric Core Organizer.

00:30:28.006 --> 00:30:29.676 A:middle
That's a new cool tool that we

00:30:29.676 --> 00:30:31.576 A:middle
are introducing this year with

00:30:31.616 --> 00:30:32.546 A:middle
Xcode 11.

00:30:33.796 --> 00:30:35.506 A:middle
Xcode Metrics Organizer is an

00:30:35.506 --> 00:30:37.036 A:middle
out-of-box solution that we are

00:30:37.196 --> 00:30:40.236 A:middle
providing with Xcode 11 to view

00:30:40.236 --> 00:30:42.206 A:middle
your power and performance app

00:30:42.466 --> 00:30:43.096 A:middle
analytics.

00:30:43.606 --> 00:30:45.366 A:middle
You can see how your app is

00:30:45.366 --> 00:30:47.276 A:middle
doing on the customer devices in

00:30:47.276 --> 00:30:49.126 A:middle
terms of battery life and

00:30:49.126 --> 00:30:49.716 A:middle
performance.

00:30:49.816 --> 00:30:52.736 A:middle
There is no change required to

00:30:52.736 --> 00:30:53.176 A:middle
your app.

00:30:53.386 --> 00:30:55.716 A:middle
It is available as-is in Xcode

00:30:55.716 --> 00:30:56.426 A:middle
11 for you.

00:30:57.486 --> 00:30:59.696 A:middle
We have built in privacy into

00:30:59.696 --> 00:31:01.666 A:middle
this whole process right from

00:30:59.696 --> 00:31:01.666 A:middle
this whole process right from

00:31:01.856 --> 00:31:03.026 A:middle
collecting the data on the

00:31:03.026 --> 00:31:05.696 A:middle
device to aggregating the data

00:31:05.696 --> 00:31:06.646 A:middle
on the server.

00:31:07.006 --> 00:31:09.086 A:middle
So, you can start using this

00:31:09.086 --> 00:31:11.996 A:middle
data as of today.

00:31:12.186 --> 00:31:14.436 A:middle
The way it works is when

00:31:14.436 --> 00:31:16.636 A:middle
somebody, when a user uses your

00:31:16.636 --> 00:31:19.716 A:middle
app, we collect metrics around

00:31:19.716 --> 00:31:20.156 A:middle
your app.

00:31:21.096 --> 00:31:22.826 A:middle
These metrics are aggregated on

00:31:22.826 --> 00:31:24.736 A:middle
the device and then sent over to

00:31:24.736 --> 00:31:25.296 A:middle
our server.

00:31:25.646 --> 00:31:27.436 A:middle
On the server side, we run

00:31:27.436 --> 00:31:28.966 A:middle
analytics on this data and

00:31:28.966 --> 00:31:30.146 A:middle
extract insights.

00:31:30.666 --> 00:31:32.676 A:middle
These insights are what show up

00:31:32.676 --> 00:31:34.086 A:middle
in metrics organizer.

00:31:35.396 --> 00:31:37.016 A:middle
Please note that insights only

00:31:37.016 --> 00:31:38.856 A:middle
show up in metrics organizer if

00:31:38.856 --> 00:31:40.436 A:middle
there is enough usage of your

00:31:40.706 --> 00:31:41.816 A:middle
app that meet our threshold.

00:31:43.186 --> 00:31:45.176 A:middle
And all of this is available

00:31:45.176 --> 00:31:47.396 A:middle
out-of-the-box with no changes

00:31:47.396 --> 00:31:49.486 A:middle
to your app or your development

00:31:49.486 --> 00:31:51.286 A:middle
process, and is available for

00:31:51.286 --> 00:31:51.846 A:middle
you today.

00:31:52.736 --> 00:31:55.396 A:middle
Now, without further ado, let's

00:31:55.436 --> 00:31:56.226 A:middle
jump into the demo.

00:31:57.516 --> 00:32:02.846 A:middle
[ Applause ]

00:31:57.516 --> 00:32:02.846 A:middle
[ Applause ]

00:32:03.346 --> 00:32:05.496 A:middle
So, to open Metrics Organizer,

00:32:05.646 --> 00:32:07.686 A:middle
go to window, organizer.

00:32:08.226 --> 00:32:10.566 A:middle
That brings up a familiar

00:32:10.566 --> 00:32:12.356 A:middle
organizer window with archive,

00:32:12.476 --> 00:32:14.096 A:middle
crashes, and energy tab, and

00:32:14.096 --> 00:32:16.106 A:middle
brand-new tab called metrics.

00:32:16.826 --> 00:32:19.416 A:middle
If you click on metrics, you see

00:32:19.476 --> 00:32:21.006 A:middle
all your apps on the left-hand

00:32:21.006 --> 00:32:23.066 A:middle
side that you have published to

00:32:23.066 --> 00:32:24.516 A:middle
the iOS app store.

00:32:25.426 --> 00:32:27.286 A:middle
Let's say our awesome photo app

00:32:27.356 --> 00:32:29.666 A:middle
that we publish shows up here.

00:32:29.666 --> 00:32:31.366 A:middle
When we click that awesome photo

00:32:31.366 --> 00:32:33.516 A:middle
app, metrics around that app

00:32:33.806 --> 00:32:35.256 A:middle
show up in the middle pane.

00:32:35.366 --> 00:32:37.286 A:middle
So, metrics like battery life,

00:32:37.286 --> 00:32:38.836 A:middle
launch time, hang rate memory,

00:32:38.836 --> 00:32:39.466 A:middle
and disk write.

00:32:39.886 --> 00:32:41.556 A:middle
Metrics that we think that you

00:32:41.556 --> 00:32:43.196 A:middle
should consider for an awesome

00:32:43.196 --> 00:32:44.996 A:middle
app experience show up here.

00:32:46.306 --> 00:32:47.666 A:middle
When you click on a metrics,

00:32:47.806 --> 00:32:49.376 A:middle
details about the metrics show

00:32:49.376 --> 00:32:50.556 A:middle
up on the right-hand side.

00:32:50.986 --> 00:32:52.466 A:middle
You can look at the metrics for

00:32:52.466 --> 00:32:55.276 A:middle
a given version of an app or you

00:32:55.276 --> 00:32:56.766 A:middle
can compare it with a previous

00:32:56.766 --> 00:32:57.176 A:middle
version.

00:32:57.176 --> 00:32:58.176 A:middle
So, X axis is here.

00:32:58.176 --> 00:33:00.456 A:middle
It represents app version and Y

00:32:58.176 --> 00:33:00.456 A:middle
It represents app version and Y

00:33:00.456 --> 00:33:02.466 A:middle
axis represent the metric value.

00:33:03.486 --> 00:33:05.666 A:middle
Let's start by looking at the

00:33:05.666 --> 00:33:06.826 A:middle
battery metrics.

00:33:07.376 --> 00:33:10.136 A:middle
Two kinds of metrics show up for

00:33:10.136 --> 00:33:10.526 A:middle
a battery.

00:33:10.526 --> 00:33:11.946 A:middle
The first one is onscreen

00:33:11.946 --> 00:33:13.166 A:middle
battery usage.

00:33:13.516 --> 00:33:15.576 A:middle
That is the amount of energy

00:33:15.576 --> 00:33:18.186 A:middle
that is drained when a user is

00:33:18.186 --> 00:33:19.446 A:middle
interacting with your app

00:33:20.276 --> 00:33:20.896 A:middle
onscreen.

00:33:20.896 --> 00:33:22.526 A:middle
And then background battery

00:33:22.526 --> 00:33:23.896 A:middle
usage is amount of battery

00:33:23.896 --> 00:33:26.226 A:middle
drained when, if the app is

00:33:26.226 --> 00:33:27.266 A:middle
running in the background.

00:33:28.006 --> 00:33:30.326 A:middle
Now, and each of these metrics

00:33:30.326 --> 00:33:32.476 A:middle
are further subdivided by system

00:33:32.476 --> 00:33:34.466 A:middle
components like processing,

00:33:34.466 --> 00:33:37.056 A:middle
networking, display location, so

00:33:37.056 --> 00:33:38.906 A:middle
that you get an idea of which of

00:33:38.906 --> 00:33:40.536 A:middle
these components are consuming

00:33:40.786 --> 00:33:41.736 A:middle
most of the energy.

00:33:42.066 --> 00:33:44.826 A:middle
Let's start with the background

00:33:45.006 --> 00:33:47.086 A:middle
battery usage, because we know

00:33:47.086 --> 00:33:48.876 A:middle
our awesome photo app is

00:33:48.876 --> 00:33:49.786 A:middle
foreground only.

00:33:50.676 --> 00:33:52.406 A:middle
But looking at the background,

00:33:52.566 --> 00:33:53.876 A:middle
it seems like it's consuming

00:33:53.876 --> 00:33:56.006 A:middle
around 10% of the user battery

00:33:56.006 --> 00:33:57.796 A:middle
daily, which is pretty high.

00:33:59.006 --> 00:34:00.606 A:middle
Out of this, it seems like

00:33:59.006 --> 00:34:00.606 A:middle
Out of this, it seems like

00:34:00.686 --> 00:34:03.526 A:middle
processing is consuming 5% and

00:34:03.526 --> 00:34:06.336 A:middle
networking is consuming 3.66%,

00:34:06.646 --> 00:34:08.096 A:middle
which is quite high and we need

00:34:08.096 --> 00:34:09.696 A:middle
to debug it further to figure

00:34:09.696 --> 00:34:12.295 A:middle
out why the app is consuming

00:34:12.295 --> 00:34:13.906 A:middle
battery in the background.

00:34:17.426 --> 00:34:18.906 A:middle
Let's look at the latest version

00:34:18.906 --> 00:34:20.505 A:middle
of the app when it is onscreen.

00:34:21.216 --> 00:34:22.295 A:middle
The latest version of the app

00:34:22.525 --> 00:34:24.585 A:middle
when it is onscreen seems like

00:34:24.585 --> 00:34:27.656 A:middle
there is a 10% degradation in

00:34:27.656 --> 00:34:29.166 A:middle
the latest version as compared

00:34:29.166 --> 00:34:30.196 A:middle
to the prior version.

00:34:30.826 --> 00:34:32.985 A:middle
Of which, display seems to be

00:34:33.755 --> 00:34:34.226 A:middle
static.

00:34:34.656 --> 00:34:35.786 A:middle
There is a slight increase in

00:34:35.786 --> 00:34:37.016 A:middle
networking and decrease in

00:34:37.016 --> 00:34:38.775 A:middle
other, but the main culprit here

00:34:38.775 --> 00:34:40.146 A:middle
is processing.

00:34:40.946 --> 00:34:42.815 A:middle
We can look at this data for the

00:34:42.815 --> 00:34:44.186 A:middle
90 the percentile user

00:34:44.186 --> 00:34:46.746 A:middle
population or look at the 50th

00:34:46.786 --> 00:34:48.286 A:middle
percentile user population to

00:34:48.286 --> 00:34:49.786 A:middle
see if the user population is

00:34:49.846 --> 00:34:52.065 A:middle
playing any role in battery

00:34:52.065 --> 00:34:52.335 A:middle
drain.

00:34:53.186 --> 00:34:55.206 A:middle
We can also look at this data

00:34:55.606 --> 00:34:59.326 A:middle
for all iPhone categories or all

00:34:59.326 --> 00:35:01.546 A:middle
iPad categories, or we can jump

00:34:59.326 --> 00:35:01.546 A:middle
iPad categories, or we can jump

00:35:01.586 --> 00:35:03.016 A:middle
to individual devices.

00:35:03.496 --> 00:35:04.696 A:middle
Let's jump to, let's say,

00:35:04.696 --> 00:35:06.346 A:middle
individual device called iPhone

00:35:06.346 --> 00:35:06.786 A:middle
6.

00:35:07.546 --> 00:35:10.446 A:middle
For iPhone 6, it seems like the

00:35:10.446 --> 00:35:11.996 A:middle
battery drain is pretty static.

00:35:12.376 --> 00:35:15.996 A:middle
Slight decrease in 1.0.8 as

00:35:16.156 --> 00:35:17.886 A:middle
compared to 1.0.7.

00:35:18.776 --> 00:35:20.196 A:middle
Let's look at a newer version of

00:35:20.196 --> 00:35:21.916 A:middle
the device like iPhone X.

00:35:22.506 --> 00:35:24.986 A:middle
Ah, iPhone X has a big jump.

00:35:25.156 --> 00:35:28.256 A:middle
If you see here, there's a 14.4%

00:35:28.256 --> 00:35:30.956 A:middle
jump from the prior version and

00:35:30.956 --> 00:35:32.326 A:middle
the main culprit here is

00:35:32.376 --> 00:35:32.886 A:middle
processing.

00:35:32.886 --> 00:35:34.716 A:middle
There are a couple of ways we

00:35:34.716 --> 00:35:36.456 A:middle
can debug this further.

00:35:36.456 --> 00:35:39.146 A:middle
We can directly jump to our code

00:35:39.566 --> 00:35:41.896 A:middle
or we can jump to our familiar

00:35:41.896 --> 00:35:43.446 A:middle
energy tab that we saw last

00:35:43.446 --> 00:35:43.666 A:middle
year.

00:35:44.456 --> 00:35:46.616 A:middle
Energy tab shows you energy

00:35:46.616 --> 00:35:47.876 A:middle
exception reports from the

00:35:47.966 --> 00:35:48.346 A:middle
field.

00:35:49.006 --> 00:35:50.526 A:middle
You can look at the stack frame

00:35:50.526 --> 00:35:52.426 A:middle
to figure out where it is

00:35:52.426 --> 00:35:54.026 A:middle
consuming the most energy.

00:35:54.546 --> 00:35:58.466 A:middle
I know Ashish was talking about

00:35:58.466 --> 00:36:00.626 A:middle
a new feature that he added only

00:35:58.466 --> 00:36:00.626 A:middle
a new feature that he added only

00:36:00.626 --> 00:36:03.136 A:middle
for the newer devices and 1.0.8

00:36:03.136 --> 00:36:05.596 A:middle
version of our app,

00:36:05.596 --> 00:36:07.296 A:middle
applyFilter caused it so we can go

00:36:07.296 --> 00:36:08.726 A:middle
there and start debugging it.

00:36:09.056 --> 00:36:10.886 A:middle
So, this is one way we have

00:36:10.886 --> 00:36:13.736 A:middle
shown you can use metrics and

00:36:13.736 --> 00:36:15.656 A:middle
energy tab to figure out the

00:36:15.656 --> 00:36:17.086 A:middle
problem and fix the problem.

00:36:17.626 --> 00:36:20.646 A:middle
Now, let's look at the other

00:36:20.646 --> 00:36:21.986 A:middle
metrics that are available.

00:36:22.446 --> 00:36:24.616 A:middle
Launch time is pretty important

00:36:24.616 --> 00:36:26.796 A:middle
to our users because apps that

00:36:26.796 --> 00:36:28.756 A:middle
are slow to launch can frustrate

00:36:28.756 --> 00:36:29.536 A:middle
our users.

00:36:29.816 --> 00:36:31.796 A:middle
Ideally, a launch time should be

00:36:31.796 --> 00:36:32.736 A:middle
in low seconds.

00:36:33.166 --> 00:36:36.286 A:middle
Our awesome photo app for all

00:36:36.286 --> 00:36:38.596 A:middle
iPhones is taking around 6

00:36:38.596 --> 00:36:39.556 A:middle
seconds to launch.

00:36:39.856 --> 00:36:41.616 A:middle
You can use the tools that

00:36:41.616 --> 00:36:43.306 A:middle
Sastry talked about in his

00:36:43.306 --> 00:36:45.536 A:middle
earlier demo to debug it

00:36:45.586 --> 00:36:45.956 A:middle
further.

00:36:47.246 --> 00:36:49.806 A:middle
Hang time is unresponsive time

00:36:49.806 --> 00:36:51.786 A:middle
of your app, in seconds per

00:36:51.786 --> 00:36:52.136 A:middle
hour.

00:36:52.606 --> 00:36:54.446 A:middle
Ideally, the hang time should be

00:36:54.446 --> 00:36:56.516 A:middle
0 to avoid user frustration.

00:36:57.056 --> 00:37:00.316 A:middle
We showed two kinds of memory -

00:36:57.056 --> 00:37:00.316 A:middle
We showed two kinds of memory -

00:37:00.386 --> 00:37:02.286 A:middle
peak memory and average memory.

00:37:02.796 --> 00:37:04.156 A:middle
Memory is a resource and we

00:37:04.156 --> 00:37:06.546 A:middle
should be, we should only use

00:37:06.546 --> 00:37:07.916 A:middle
what is absolutely needed.

00:37:09.136 --> 00:37:12.316 A:middle
Disk write is the logical writes

00:37:12.316 --> 00:37:13.396 A:middle
your app is doing.

00:37:14.026 --> 00:37:15.466 A:middle
we need to be mindful of how

00:37:15.466 --> 00:37:19.206 A:middle
much write we are doing and we

00:37:19.206 --> 00:37:20.746 A:middle
can use Instruments to debug it

00:37:20.746 --> 00:37:20.976 A:middle
further.

00:37:24.046 --> 00:37:26.166 A:middle
Now, that was Xcode Metrics

00:37:26.166 --> 00:37:28.426 A:middle
Organizer, an out-of-the-box

00:37:28.566 --> 00:37:30.856 A:middle
tool to view your battery and

00:37:30.906 --> 00:37:33.116 A:middle
performance analytics and start

00:37:33.196 --> 00:37:34.946 A:middle
debugging the problems around

00:37:35.086 --> 00:37:38.346 A:middle
high battery drain, performance

00:37:38.786 --> 00:37:40.956 A:middle
like high launch time.

00:37:41.226 --> 00:37:44.186 A:middle
You can detect, you can look at

00:37:44.186 --> 00:37:46.146 A:middle
the data for the latest version

00:37:46.146 --> 00:37:47.786 A:middle
of the app, compare it with the

00:37:47.786 --> 00:37:49.606 A:middle
prior version, and create a

00:37:49.606 --> 00:37:50.096 A:middle
baseline.

00:37:50.686 --> 00:37:53.026 A:middle
And this tool is available today

00:37:53.026 --> 00:37:54.826 A:middle
to you without any changes to

00:37:54.826 --> 00:37:56.826 A:middle
your app or your development

00:37:56.826 --> 00:37:57.346 A:middle
lifecycle.

00:37:57.726 --> 00:38:00.286 A:middle
So, please, try to use it and

00:37:57.726 --> 00:38:00.286 A:middle
So, please, try to use it and

00:38:00.286 --> 00:38:01.246 A:middle
let us know the feedback.

00:38:01.446 --> 00:38:02.256 A:middle
Thank you very much for

00:38:02.256 --> 00:38:03.526 A:middle
listening, and back to Phil.

00:38:04.516 --> 00:38:08.156 A:middle
[ Applause ]

00:38:08.656 --> 00:38:09.206 A:middle
&gt;&gt; Thank you, Anshul.

00:38:09.206 --> 00:38:12.746 A:middle
We saw those great tools and I

00:38:12.746 --> 00:38:13.626 A:middle
want to talk quickly about a

00:38:13.626 --> 00:38:14.706 A:middle
summary of everything we spoke

00:38:14.706 --> 00:38:15.136 A:middle
about today.

00:38:16.456 --> 00:38:17.236 A:middle
We talked about the tools that

00:38:17.236 --> 00:38:18.906 A:middle
were available before Xcode 11

00:38:19.256 --> 00:38:20.686 A:middle
to debug and understand your

00:38:20.686 --> 00:38:22.276 A:middle
power and performance impact on

00:38:22.406 --> 00:38:22.946 A:middle
device.

00:38:23.676 --> 00:38:25.166 A:middle
And then we showed you some new

00:38:25.166 --> 00:38:26.126 A:middle
tools that we think are really

00:38:26.126 --> 00:38:27.286 A:middle
powerful and are going to help

00:38:27.286 --> 00:38:29.146 A:middle
take your quantification of your

00:38:29.146 --> 00:38:30.026 A:middle
performance and battery life

00:38:30.026 --> 00:38:31.296 A:middle
impact to the next level.

00:38:31.766 --> 00:38:32.936 A:middle
And a set of metrics that you'll

00:38:32.936 --> 00:38:34.126 A:middle
be able to collect from those

00:38:34.126 --> 00:38:35.696 A:middle
tools to be able to understand

00:38:36.056 --> 00:38:37.326 A:middle
and debug your code further.

00:38:37.916 --> 00:38:39.806 A:middle
If you take anything away from

00:38:39.806 --> 00:38:41.616 A:middle
this demo, I want you to leave

00:38:41.616 --> 00:38:43.056 A:middle
knowing that we've built three

00:38:43.056 --> 00:38:44.656 A:middle
great tools for you and we'd

00:38:44.656 --> 00:38:45.846 A:middle
love to hear your feedback about

00:38:45.846 --> 00:38:46.046 A:middle
them.

00:38:46.486 --> 00:38:47.576 A:middle
And these tools are going to

00:38:47.576 --> 00:38:49.106 A:middle
help you quantify the impact

00:38:49.376 --> 00:38:50.466 A:middle
that your application has on

00:38:50.466 --> 00:38:51.656 A:middle
battery life and performance.

00:38:52.716 --> 00:38:54.146 A:middle
And that quantification is going

00:38:54.146 --> 00:38:55.196 A:middle
to be able to help you make

00:38:55.196 --> 00:38:56.586 A:middle
decisions about your application

00:38:56.986 --> 00:38:58.076 A:middle
to better your experience for

00:38:58.076 --> 00:38:58.876 A:middle
all your users.

00:39:00.146 --> 00:39:02.386 A:middle
For more information, go online

00:39:02.386 --> 00:39:03.406 A:middle
and check out our session

00:39:03.406 --> 00:39:04.136 A:middle
documentation.

00:39:05.066 --> 00:39:06.906 A:middle
Or, visit us at the Power and

00:39:06.906 --> 00:39:09.286 A:middle
Performance Lab tomorrow, and

00:39:09.286 --> 00:39:10.316 A:middle
we'd love to see you there and

00:39:10.316 --> 00:39:10.946 A:middle
walk you through how to

00:39:10.946 --> 00:39:12.026 A:middle
implement these tools in your

00:39:12.026 --> 00:39:13.616 A:middle
application and use them to make

00:39:13.616 --> 00:39:14.696 A:middle
your experiences great for your

00:39:14.696 --> 00:39:15.146 A:middle
users.

00:39:15.786 --> 00:39:16.406 A:middle
Don't forget about the

00:39:16.406 --> 00:39:17.526 A:middle
Optimizing App Launch talk

00:39:17.526 --> 00:39:18.716 A:middle
tomorrow, where they'll go in

00:39:18.716 --> 00:39:19.796 A:middle
depth about app launch

00:39:19.796 --> 00:39:20.406 A:middle
performance.

00:39:21.256 --> 00:39:22.166 A:middle
Thanks again for coming and

00:39:22.246 --> 00:39:22.976 A:middle
enjoy the rest of your WWDC.

00:39:23.516 --> 00:39:27.500 A:middle
[ Applause ]
