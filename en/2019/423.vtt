WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:07.516 --> 00:00:13.046 A:middle
[ Applause ]

00:00:13.546 --> 00:00:14.946 A:middle
&gt;&gt; Hello everyone, my name is

00:00:14.946 --> 00:00:16.216 A:middle
Spencer Lewson, and I'm an

00:00:16.216 --> 00:00:17.876 A:middle
engineer on the Performance Team

00:00:18.046 --> 00:00:18.566 A:middle
here at Apple.

00:00:19.446 --> 00:00:21.116 A:middle
Today I'm very excited to tell

00:00:21.116 --> 00:00:22.666 A:middle
you about how you can optimize

00:00:22.816 --> 00:00:23.786 A:middle
your app's launch.

00:00:24.336 --> 00:00:27.196 A:middle
We'll be covering these four

00:00:27.196 --> 00:00:28.006 A:middle
main topics today.

00:00:28.746 --> 00:00:30.686 A:middle
First, what is launch?

00:00:31.256 --> 00:00:32.076 A:middle
What are the different types of

00:00:32.076 --> 00:00:33.516 A:middle
launches and how do we break

00:00:33.516 --> 00:00:34.946 A:middle
them down into their different

00:00:34.946 --> 00:00:35.486 A:middle
subphases?

00:00:36.576 --> 00:00:37.906 A:middle
Next, we'll be talking about how

00:00:37.906 --> 00:00:39.216 A:middle
to properly measure your app's

00:00:39.216 --> 00:00:39.626 A:middle
launch.

00:00:40.646 --> 00:00:42.356 A:middle
Out in the field, iOS devices

00:00:42.356 --> 00:00:43.366 A:middle
can be in a variety of different

00:00:43.436 --> 00:00:46.226 A:middle
states and conditions, and these

00:00:46.226 --> 00:00:48.126 A:middle
states and conditions can

00:00:48.126 --> 00:00:49.546 A:middle
produce inconsistent launch

00:00:49.546 --> 00:00:49.886 A:middle
results.

00:00:50.566 --> 00:00:51.656 A:middle
So, it's important to understand

00:00:51.656 --> 00:00:53.136 A:middle
these states and how to reduce

00:00:53.176 --> 00:00:54.236 A:middle
their impact when you're taking

00:00:54.236 --> 00:00:54.596 A:middle
measurements.

00:00:55.266 --> 00:00:58.826 A:middle
Once you've done that, you can

00:00:58.826 --> 00:00:59.866 A:middle
take a look at how to use

00:01:00.006 --> 00:01:02.106 A:middle
Instruments to profile and

00:01:02.106 --> 00:01:03.476 A:middle
understand your app to find

00:01:03.476 --> 00:01:04.806 A:middle
opportunities to improve it.

00:01:06.026 --> 00:01:07.296 A:middle
And finally, we'll leave you

00:01:07.346 --> 00:01:09.406 A:middle
with some tips and some tricks on how

00:01:09.406 --> 00:01:10.616 A:middle
to monitor your app's launch,

00:01:10.976 --> 00:01:12.856 A:middle
both over time and in the field,

00:01:13.316 --> 00:01:14.806 A:middle
to ensure that you consistently

00:01:14.806 --> 00:01:16.746 A:middle
deliver a delightful experience

00:01:17.056 --> 00:01:17.866 A:middle
to all of your users.

00:01:17.866 --> 00:01:21.356 A:middle
So, what is that app launch I

00:01:21.616 --> 00:01:22.466 A:middle
was talking about?

00:01:23.226 --> 00:01:25.626 A:middle
Well, app launch is a user

00:01:25.626 --> 00:01:26.626 A:middle
experience interruption.

00:01:27.966 --> 00:01:28.996 A:middle
What do I mean by this?

00:01:29.536 --> 00:01:30.076 A:middle
Let's take a look.

00:01:31.126 --> 00:01:34.136 A:middle
Okay, ready, set, go.

00:01:38.186 --> 00:01:40.546 A:middle
Wow, on the iPhone 6S Plus,

00:01:41.176 --> 00:01:43.366 A:middle
launch took nearly 2.5 seconds,

00:01:44.176 --> 00:01:45.736 A:middle
and this wasn't as delightful as

00:01:45.736 --> 00:01:46.946 A:middle
our users expect it to be.

00:01:48.326 --> 00:01:49.736 A:middle
You know, it's really important

00:01:49.736 --> 00:01:50.676 A:middle
for launch to be delightful,

00:01:51.326 --> 00:01:52.396 A:middle
because it happens a lot.

00:01:53.276 --> 00:01:55.746 A:middle
In fact, across all iOS devices,

00:01:56.316 --> 00:01:58.176 A:middle
it happens billions of times a

00:01:58.176 --> 00:01:58.436 A:middle
day.

00:01:59.666 --> 00:02:00.336 A:middle
So, we did some number

00:01:59.666 --> 00:02:00.336 A:middle
So, we did some number

00:02:00.336 --> 00:02:02.286 A:middle
crunching, and we figured out

00:02:02.286 --> 00:02:03.916 A:middle
that with we save only one

00:02:03.916 --> 00:02:05.476 A:middle
millisecond on each of those

00:02:05.476 --> 00:02:07.586 A:middle
launches, we would save an

00:02:07.586 --> 00:02:12.186 A:middle
astounding 162 days of launch

00:02:13.196 --> 00:02:15.026 A:middle
time, yes, in other words,

00:02:16.506 --> 00:02:18.236 A:middle
[applause] thank you, in other

00:02:18.236 --> 00:02:19.916 A:middle
words, that's the amount of time

00:02:19.916 --> 00:02:22.356 A:middle
it takes to send a rocket to

00:02:22.356 --> 00:02:22.886 A:middle
Mars.

00:02:23.626 --> 00:02:26.246 A:middle
But it's also important for a

00:02:26.246 --> 00:02:27.236 A:middle
number of other reasons.

00:02:27.926 --> 00:02:31.626 A:middle
First of all, your app's launch

00:02:31.706 --> 00:02:33.176 A:middle
is your user, first experience

00:02:33.176 --> 00:02:35.216 A:middle
with your app, and as such, it

00:02:35.216 --> 00:02:35.946 A:middle
should be delightful.

00:02:37.236 --> 00:02:38.646 A:middle
Now it's important to remember

00:02:38.646 --> 00:02:40.326 A:middle
that as developers, we tend to

00:02:40.326 --> 00:02:41.796 A:middle
gravitate towards newer devices.

00:02:42.706 --> 00:02:43.766 A:middle
So, it's important to ensure

00:02:43.906 --> 00:02:45.126 A:middle
that the experience that you see

00:02:45.126 --> 00:02:46.876 A:middle
in your hand is the same

00:02:46.876 --> 00:02:48.146 A:middle
experience that the customers,

00:02:48.626 --> 00:02:50.386 A:middle
that your users, have in their

00:02:50.386 --> 00:02:52.506 A:middle
hands on different iOS devices

00:02:53.016 --> 00:02:55.606 A:middle
and under different conditions.

00:02:57.356 --> 00:02:59.726 A:middle
Furthermore, launch covers a

00:02:59.726 --> 00:03:01.026 A:middle
huge part of your code base,

00:02:59.726 --> 00:03:01.026 A:middle
huge part of your code base,

00:03:01.716 --> 00:03:02.736 A:middle
from primer coating, to

00:03:02.736 --> 00:03:04.476 A:middle
initialization, to view

00:03:04.476 --> 00:03:05.646 A:middle
creation, and more.

00:03:06.316 --> 00:03:08.076 A:middle
And as such, if you're seen that

00:03:08.076 --> 00:03:09.976 A:middle
your launch isn't as delightful

00:03:10.196 --> 00:03:11.546 A:middle
as your users expected to be,

00:03:12.226 --> 00:03:13.436 A:middle
this might be indicative that

00:03:13.436 --> 00:03:14.496 A:middle
there's other parts of your code

00:03:14.496 --> 00:03:17.086 A:middle
base that are delightful, as

00:03:17.776 --> 00:03:17.896 A:middle
well.

00:03:18.066 --> 00:03:19.686 A:middle
Finally, launch is a very

00:03:19.686 --> 00:03:20.726 A:middle
intense time for the phone.

00:03:21.456 --> 00:03:23.326 A:middle
Involves a lot of CPU work and a

00:03:23.326 --> 00:03:24.046 A:middle
lot of memory work.

00:03:24.956 --> 00:03:25.846 A:middle
So, you should try to reduce

00:03:25.906 --> 00:03:27.486 A:middle
this as it impacts the system

00:03:27.486 --> 00:03:29.126 A:middle
performance, and of course, your

00:03:29.316 --> 00:03:30.306 A:middle
user's battery life.

00:03:30.736 --> 00:03:33.496 A:middle
So, let's take a look at those

00:03:33.696 --> 00:03:34.886 A:middle
launches I talked about before,

00:03:35.386 --> 00:03:38.216 A:middle
there's a cold launch, a warm

00:03:38.216 --> 00:03:40.386 A:middle
launch, and something is often

00:03:40.696 --> 00:03:42.056 A:middle
referred to as launch, but isn't

00:03:42.056 --> 00:03:43.216 A:middle
quite a launch, a resume.

00:03:45.616 --> 00:03:47.166 A:middle
Cold launches occur after

00:03:47.166 --> 00:03:49.316 A:middle
reboot, or when your app has not

00:03:49.316 --> 00:03:50.456 A:middle
been launched for very long

00:03:50.456 --> 00:03:50.666 A:middle
time.

00:03:52.116 --> 00:03:54.106 A:middle
In order to launcher app, we

00:03:54.106 --> 00:03:55.436 A:middle
need to bring it from disk into

00:03:55.436 --> 00:03:57.666 A:middle
memory, startup system-side

00:03:57.666 --> 00:03:58.906 A:middle
services that support your app,

00:03:58.906 --> 00:04:00.816 A:middle
and then spawn your process.

00:03:58.906 --> 00:04:00.816 A:middle
and then spawn your process.

00:04:02.266 --> 00:04:03.616 A:middle
As you'd expect, this can take a

00:04:03.616 --> 00:04:05.886 A:middle
little time, but fortunately,

00:04:05.916 --> 00:04:07.546 A:middle
once it's happened once, you'll

00:04:07.546 --> 00:04:09.006 A:middle
experience a warm launch.

00:04:09.576 --> 00:04:12.496 A:middle
In this case, your app still

00:04:12.496 --> 00:04:14.516 A:middle
needs to be spawned, but we've

00:04:14.516 --> 00:04:15.916 A:middle
already brought your app into

00:04:15.916 --> 00:04:17.565 A:middle
memory and started up some of

00:04:17.565 --> 00:04:18.896 A:middle
those system-side services.

00:04:19.426 --> 00:04:20.255 A:middle
So, this will be a little bit

00:04:20.255 --> 00:04:21.416 A:middle
faster and a little bit more

00:04:21.416 --> 00:04:22.036 A:middle
consistent.

00:04:23.676 --> 00:04:25.206 A:middle
Finally, there's that resume.

00:04:26.256 --> 00:04:28.536 A:middle
This occurs when a user reenters

00:04:28.536 --> 00:04:30.066 A:middle
your app from either the home

00:04:30.066 --> 00:04:31.306 A:middle
screen or the app switcher.

00:04:32.336 --> 00:04:33.926 A:middle
As you know, the app is already

00:04:33.926 --> 00:04:35.546 A:middle
launched at this point, so it's

00:04:35.546 --> 00:04:36.786 A:middle
going to be very fast.

00:04:38.146 --> 00:04:39.066 A:middle
What you need to remember from

00:04:39.066 --> 00:04:41.256 A:middle
this is not to confuse resumes

00:04:41.396 --> 00:04:42.716 A:middle
with launches when you're taking

00:04:42.716 --> 00:04:43.116 A:middle
measurements.

00:04:43.906 --> 00:04:46.436 A:middle
So, given this information,

00:04:46.936 --> 00:04:49.986 A:middle
wouldn't it be great if launches

00:04:50.696 --> 00:04:56.006 A:middle
were as quick and as delightful

00:04:56.516 --> 00:04:57.096 A:middle
as resumes?

00:04:57.826 --> 00:05:00.676 A:middle
How can we achieve that?

00:04:57.826 --> 00:05:00.676 A:middle
How can we achieve that?

00:05:02.036 --> 00:05:04.146 A:middle
Well, we need to hit the goal of

00:05:04.146 --> 00:05:05.486 A:middle
rendering our first frame within

00:05:05.626 --> 00:05:06.906 A:middle
400 milliseconds.

00:05:08.066 --> 00:05:09.266 A:middle
That's so that we have pixels

00:05:09.266 --> 00:05:10.866 A:middle
displayed to the user during the

00:05:10.866 --> 00:05:13.116 A:middle
launch animation, and by the

00:05:13.116 --> 00:05:14.136 A:middle
time that launch animation is

00:05:14.136 --> 00:05:15.796 A:middle
complete, your app is

00:05:15.796 --> 00:05:17.506 A:middle
interactive and responsive.

00:05:18.096 --> 00:05:20.346 A:middle
The first step to doing that is

00:05:20.346 --> 00:05:21.676 A:middle
understanding what is happening

00:05:21.676 --> 00:05:22.296 A:middle
during launch.

00:05:22.866 --> 00:05:24.666 A:middle
So, let's launch Maps.

00:05:26.496 --> 00:05:28.126 A:middle
As you know, launch generally

00:05:28.126 --> 00:05:29.606 A:middle
starts when the user taps your

00:05:29.606 --> 00:05:32.236 A:middle
icon on your home screen.

00:05:32.406 --> 00:05:34.316 A:middle
Then over the next 100 or so

00:05:34.316 --> 00:05:36.136 A:middle
milliseconds, iOS will do the

00:05:36.136 --> 00:05:37.916 A:middle
necessary system-side work in

00:05:37.916 --> 00:05:39.746 A:middle
order to initialize your app.

00:05:40.456 --> 00:05:42.386 A:middle
That leaves you as developers

00:05:42.786 --> 00:05:45.276 A:middle
about 300 milliseconds to create

00:05:45.276 --> 00:05:46.846 A:middle
your views, load your content,

00:05:46.846 --> 00:05:48.206 A:middle
and generate your first frame.

00:05:49.716 --> 00:05:51.506 A:middle
Now this frame doesn't

00:05:51.506 --> 00:05:52.876 A:middle
necessarily need to be fully

00:05:52.876 --> 00:05:53.316 A:middle
complete.

00:05:53.316 --> 00:05:55.056 A:middle
It can have some placeholders

00:05:55.226 --> 00:05:56.456 A:middle
for asynchronously loading data,

00:05:57.716 --> 00:05:58.996 A:middle
but at this point, your app

00:05:58.996 --> 00:06:00.706 A:middle
should be interactive and

00:05:58.996 --> 00:06:00.706 A:middle
should be interactive and

00:06:00.706 --> 00:06:01.356 A:middle
responsive.

00:06:02.536 --> 00:06:04.936 A:middle
So, in the case of Maps, all the

00:06:04.936 --> 00:06:06.106 A:middle
tiles have not yet loaded.

00:06:06.526 --> 00:06:07.586 A:middle
You can still initiate your

00:06:07.586 --> 00:06:09.116 A:middle
search and browse your

00:06:09.876 --> 00:06:10.086 A:middle
favorites.

00:06:10.656 --> 00:06:11.986 A:middle
Then over the next couple

00:06:11.986 --> 00:06:13.786 A:middle
hundred milliseconds, you can

00:06:13.786 --> 00:06:15.006 A:middle
display that asynchronously

00:06:15.006 --> 00:06:16.636 A:middle
loaded data and generate your

00:06:16.636 --> 00:06:17.646 A:middle
final frame for your user.

00:06:18.636 --> 00:06:19.646 A:middle
Let's take a closer look at

00:06:19.646 --> 00:06:19.976 A:middle
these phases.

00:06:24.156 --> 00:06:25.316 A:middle
These six phases cover

00:06:25.316 --> 00:06:26.546 A:middle
everything from system

00:06:26.546 --> 00:06:28.676 A:middle
initialization to the app

00:06:28.676 --> 00:06:30.846 A:middle
initialization to view creation

00:06:30.846 --> 00:06:32.716 A:middle
and layout, and then depending

00:06:32.716 --> 00:06:34.576 A:middle
on your app, potentially a

00:06:34.576 --> 00:06:36.736 A:middle
asynchronous loading phase for

00:06:37.036 --> 00:06:37.976 A:middle
your data, the extended phase.

00:06:42.086 --> 00:06:43.256 A:middle
The first half of system

00:06:43.256 --> 00:06:44.666 A:middle
interface is dyld.

00:06:44.726 --> 00:06:47.476 A:middle
For those of you unfamiliar, a

00:06:47.476 --> 00:06:49.356 A:middle
dynamic linker loads your shared

00:06:49.356 --> 00:06:50.536 A:middle
libraries and frameworks.

00:06:52.156 --> 00:06:56.256 A:middle
Now in 2017, we introduced dyld

00:06:56.296 --> 00:06:58.636 A:middle
3, which added exciting

00:06:58.636 --> 00:07:00.026 A:middle
optimizations to the system.

00:06:58.636 --> 00:07:00.026 A:middle
optimizations to the system.

00:07:01.096 --> 00:07:02.026 A:middle
Well, we're happy to announce

00:07:02.026 --> 00:07:03.906 A:middle
that in iOS 13, we're bringing

00:07:03.906 --> 00:07:05.606 A:middle
these optimizations to your

00:07:05.846 --> 00:07:05.966 A:middle
apps.

00:07:07.176 --> 00:07:08.726 A:middle
That means we are now caching

00:07:08.726 --> 00:07:10.166 A:middle
your runtime dependencies, or

00:07:10.166 --> 00:07:11.766 A:middle
warm launches, which should give

00:07:11.766 --> 00:07:13.106 A:middle
them a significant speed

00:07:13.106 --> 00:07:13.486 A:middle
improvement [applause].

00:07:13.956 --> 00:07:15.446 A:middle
Thank you.

00:07:21.066 --> 00:07:22.566 A:middle
Now with a new linker, comes

00:07:22.566 --> 00:07:23.606 A:middle
some new recommendations.

00:07:24.846 --> 00:07:26.126 A:middle
To take full advantage of these

00:07:26.126 --> 00:07:28.606 A:middle
new improvements, we recommend

00:07:28.606 --> 00:07:30.276 A:middle
that you avoid linking unused

00:07:30.276 --> 00:07:31.626 A:middle
frameworks, as this can have

00:07:31.626 --> 00:07:32.786 A:middle
hidden costs, which we'll show

00:07:32.786 --> 00:07:33.136 A:middle
you later.

00:07:34.646 --> 00:07:37.186 A:middle
We also recommend that you avoid

00:07:37.186 --> 00:07:39.236 A:middle
dynamic library loading, such as

00:07:39.236 --> 00:07:42.086 A:middle
DLOpen or NSbundleLoad, because

00:07:42.166 --> 00:07:43.666 A:middle
this forfeits those wins you

00:07:43.666 --> 00:07:44.916 A:middle
would have gotten by having

00:07:44.916 --> 00:07:46.516 A:middle
those in your cache.

00:07:47.816 --> 00:07:49.216 A:middle
Finally, that means that you

00:07:49.216 --> 00:07:51.386 A:middle
should be hard linking all of

00:07:51.386 --> 00:07:52.786 A:middle
your dependencies, as it's now

00:07:52.916 --> 00:07:54.676 A:middle
even faster than it was before.

00:07:57.456 --> 00:07:58.886 A:middle
The second half of system

00:07:58.886 --> 00:08:00.476 A:middle
interface is libSystemInit.

00:07:58.886 --> 00:08:00.476 A:middle
interface is libSystemInit.

00:08:01.616 --> 00:08:02.716 A:middle
This is when we initialize the

00:08:02.716 --> 00:08:04.376 A:middle
low-level system components

00:08:04.376 --> 00:08:05.336 A:middle
within your application.

00:08:06.436 --> 00:08:08.106 A:middle
Now this is mostly system-side

00:08:08.106 --> 00:08:09.556 A:middle
work with a fixed cost.

00:08:10.336 --> 00:08:11.446 A:middle
So, use developers don't need to

00:08:11.446 --> 00:08:11.976 A:middle
focus on the section.

00:08:15.106 --> 00:08:16.286 A:middle
Now we have static runtime

00:08:16.286 --> 00:08:16.956 A:middle
initialization.

00:08:18.496 --> 00:08:19.406 A:middle
This is when the system

00:08:19.406 --> 00:08:21.386 A:middle
initializes your Objective-C and

00:08:21.386 --> 00:08:22.136 A:middle
Swift run times.

00:08:23.666 --> 00:08:25.006 A:middle
Now in general, your app

00:08:25.006 --> 00:08:26.136 A:middle
shouldn't be doing any work here

00:08:26.706 --> 00:08:27.406 A:middle
unless you have static

00:08:27.406 --> 00:08:29.416 A:middle
initializer methods, which are

00:08:29.416 --> 00:08:30.816 A:middle
possibly present in your code,

00:08:31.436 --> 00:08:33.446 A:middle
or more likely, a surprise from

00:08:33.446 --> 00:08:35.246 A:middle
the frameworks that you link.

00:08:36.056 --> 00:08:37.666 A:middle
In general, we don't recommend

00:08:37.666 --> 00:08:38.626 A:middle
static initialization.

00:08:38.626 --> 00:08:40.395 A:middle
So, let's take a moment to talk

00:08:40.395 --> 00:08:42.186 A:middle
about how to reduce its impact.

00:08:43.376 --> 00:08:45.016 A:middle
If you own a framework which

00:08:45.016 --> 00:08:46.336 A:middle
uses static initialization,

00:08:46.686 --> 00:08:48.916 A:middle
consider exposing API to

00:08:48.916 --> 00:08:50.076 A:middle
initialize your stack early.

00:08:50.716 --> 00:08:52.636 A:middle
But if you must use static

00:08:52.636 --> 00:08:54.916 A:middle
initialization, consider moving

00:08:54.916 --> 00:08:56.966 A:middle
code out of class load which is

00:08:56.966 --> 00:08:59.366 A:middle
invoked every time during launch

00:09:00.226 --> 00:09:01.906 A:middle
to class initialize, which is

00:09:01.906 --> 00:09:03.646 A:middle
lazily invoked the first time

00:09:03.646 --> 00:09:06.316 A:middle
you use a method within your

00:09:07.936 --> 00:09:08.066 A:middle
class.

00:09:08.246 --> 00:09:09.946 A:middle
Next up is UIKit Initialization.

00:09:11.266 --> 00:09:12.156 A:middle
This is when the system

00:09:12.186 --> 00:09:13.896 A:middle
instantiates your UIApplication

00:09:13.896 --> 00:09:15.896 A:middle
and your UIApplicationDelegate.

00:09:16.566 --> 00:09:18.646 A:middle
For the most part, this is

00:09:18.646 --> 00:09:20.036 A:middle
system-side work, setting up

00:09:20.036 --> 00:09:21.606 A:middle
event processing and integration

00:09:21.606 --> 00:09:22.206 A:middle
with the system.

00:09:23.256 --> 00:09:24.226 A:middle
But you can still effect this

00:09:24.226 --> 00:09:26.996 A:middle
phase if you subclass

00:09:26.996 --> 00:09:29.876 A:middle
UIApplication or you do any work

00:09:30.056 --> 00:09:31.226 A:middle
in UIApplicationDelegate

00:09:31.326 --> 00:09:31.926 A:middle
initializers.

00:09:32.646 --> 00:09:35.746 A:middle
Now we have application

00:09:35.746 --> 00:09:36.516 A:middle
initialization.

00:09:37.436 --> 00:09:38.476 A:middle
This is where the good stuff is.

00:09:38.896 --> 00:09:40.136 A:middle
This is where you as developers

00:09:40.136 --> 00:09:40.996 A:middle
can likely have the biggest

00:09:40.996 --> 00:09:42.226 A:middle
impact on your app's

00:09:42.226 --> 00:09:42.706 A:middle
launch.

00:09:43.246 --> 00:09:45.586 A:middle
For those of you who have not

00:09:45.586 --> 00:09:47.826 A:middle
yet adopted the new UIC in APIs

00:09:49.146 --> 00:09:50.326 A:middle
or are targeting iOS 12 or

00:09:50.326 --> 00:09:53.356 A:middle
earlier, Application Init works,

00:09:54.116 --> 00:09:55.766 A:middle
again, with these delegate

00:09:55.766 --> 00:09:56.426 A:middle
call-back methods.

00:09:57.186 --> 00:09:57.736 A:middle
application:

00:09:57.736 --> 00:09:58.946 A:middle
willFinishLaunchingwithOptions,

00:09:59.276 --> 00:09:59.966 A:middle
and application:

00:10:00.096 --> 00:10:01.216 A:middle
didFinishLaunchingwithOptions.

00:10:01.956 --> 00:10:04.196 A:middle
As your app is displayed to the

00:10:04.196 --> 00:10:06.286 A:middle
user, the further methods,

00:10:07.006 --> 00:10:08.626 A:middle
applicationDidBecomeActive: will

00:10:08.626 --> 00:10:09.036 A:middle
be invoked.

00:10:10.176 --> 00:10:11.356 A:middle
Now it's important to know that

00:10:11.356 --> 00:10:13.316 A:middle
if you have not UIScenes, you

00:10:13.316 --> 00:10:14.116 A:middle
should be creating your view

00:10:14.116 --> 00:10:15.246 A:middle
controllers and

00:10:15.246 --> 00:10:16.546 A:middle
didFinishLaunchingwithOptions.

00:10:17.686 --> 00:10:19.276 A:middle
That's because with UIScene,

00:10:19.666 --> 00:10:21.546 A:middle
ApplicationInit works a little

00:10:22.206 --> 00:10:23.216 A:middle
bit differently.

00:10:23.216 --> 00:10:24.276 A:middle
Now you will still get

00:10:24.276 --> 00:10:25.456 A:middle
willFinishLaunching and

00:10:25.456 --> 00:10:26.726 A:middle
didFinishLaunchingwithOptions,

00:10:27.546 --> 00:10:28.736 A:middle
but as your app is displayed to

00:10:28.736 --> 00:10:30.126 A:middle
the user, you will get the

00:10:30.126 --> 00:10:32.436 A:middle
UISceneDelegate lifecycle

00:10:32.436 --> 00:10:32.836 A:middle
callbacks.

00:10:34.116 --> 00:10:35.256 A:middle
Those are, of course scene:

00:10:35.256 --> 00:10:35.986 A:middle
willConnectwithSession with

00:10:35.986 --> 00:10:36.426 A:middle
options.

00:10:36.846 --> 00:10:38.586 A:middle
ScenewillEnterForeground, and

00:10:38.586 --> 00:10:39.446 A:middle
sceneDidBecomeActive.

00:10:40.106 --> 00:10:41.666 A:middle
You should be creating your view

00:10:41.666 --> 00:10:43.446 A:middle
controllers, and scene:

00:10:43.446 --> 00:10:44.866 A:middle
willConnecttoSessionwithOptions.

00:10:46.266 --> 00:10:48.016 A:middle
It's important to note that you

00:10:48.016 --> 00:10:49.206 A:middle
should be only creating your

00:10:49.206 --> 00:10:50.256 A:middle
view controllers, and scene:

00:10:50.256 --> 00:10:51.406 A:middle
willConnectToSessionwithOptions,

00:10:51.666 --> 00:10:52.836 A:middle
and that also, and

00:10:52.836 --> 00:10:53.956 A:middle
didFinishLaunchingwithOptions.

00:10:54.416 --> 00:10:55.956 A:middle
That the common pitfall, which,

00:10:55.956 --> 00:10:56.656 A:middle
of course, results in

00:10:56.656 --> 00:10:59.176 A:middle
performance losses and, likely,

00:10:59.476 --> 00:11:01.826 A:middle
unpredictable bugs in your code

00:10:59.476 --> 00:11:01.826 A:middle
unpredictable bugs in your code

00:11:04.316 --> 00:11:04.426 A:middle
base.

00:11:04.636 --> 00:11:05.716 A:middle
Regardless of whether or not

00:11:05.846 --> 00:11:07.256 A:middle
you've adopted the new UIScene

00:11:07.326 --> 00:11:09.196 A:middle
APIs, our advice for this phase

00:11:09.196 --> 00:11:09.996 A:middle
is generally the same.

00:11:09.996 --> 00:11:12.896 A:middle
You should be deferring any

00:11:12.896 --> 00:11:14.456 A:middle
unrelated work but it's not

00:11:14.456 --> 00:11:15.926 A:middle
necessary to commit your first

00:11:15.926 --> 00:11:18.446 A:middle
frame, by either pushing it to

00:11:18.446 --> 00:11:20.846 A:middle
the background queues or just

00:11:20.846 --> 00:11:22.346 A:middle
doing it later entirely.

00:11:25.096 --> 00:11:27.386 A:middle
If you did adopt UIScenes, you

00:11:27.386 --> 00:11:28.886 A:middle
can do one more thing, and

00:11:28.886 --> 00:11:29.746 A:middle
that's make sure that you're

00:11:29.746 --> 00:11:31.056 A:middle
sharing your resources between

00:11:31.056 --> 00:11:31.506 A:middle
your Scenes.

00:11:32.126 --> 00:11:33.486 A:middle
This is, of course, to reduce

00:11:33.486 --> 00:11:35.456 A:middle
the overhead of doing any work

00:11:35.456 --> 00:11:37.766 A:middle
unnecessarily multiple times.

00:11:38.696 --> 00:11:40.206 A:middle
To learn more about UIScenes,

00:11:40.636 --> 00:11:41.446 A:middle
please take a look at these two

00:11:41.446 --> 00:11:43.366 A:middle
talks from earlier this week.

00:11:46.126 --> 00:11:47.156 A:middle
Next is the first frame render

00:11:47.156 --> 00:11:47.456 A:middle
phase.

00:11:48.446 --> 00:11:49.466 A:middle
Now, this is relatively

00:11:49.466 --> 00:11:50.066 A:middle
straightforward.

00:11:50.506 --> 00:11:51.776 A:middle
This is when we create your

00:11:51.776 --> 00:11:53.666 A:middle
views, perform layout, and then

00:11:53.666 --> 00:11:54.106 A:middle
draw them.

00:11:55.236 --> 00:11:56.486 A:middle
We then take that information,

00:11:56.956 --> 00:11:58.166 A:middle
and we commit and render your

00:11:58.166 --> 00:11:59.586 A:middle
first frame into nice, shiny

00:11:59.586 --> 00:11:59.956 A:middle
pixels.

00:12:02.446 --> 00:12:03.816 A:middle
You can affect this phase by

00:12:03.816 --> 00:12:05.876 A:middle
reducing the number of views in

00:12:05.876 --> 00:12:06.406 A:middle
your hierarchy.

00:12:06.446 --> 00:12:08.466 A:middle
And you can do that by

00:12:08.656 --> 00:12:09.946 A:middle
flattening your views to use

00:12:09.946 --> 00:12:13.156 A:middle
less or by lazily loading views

00:12:13.546 --> 00:12:14.556 A:middle
that are not shown during

00:12:14.556 --> 00:12:15.026 A:middle
launch.

00:12:15.556 --> 00:12:17.616 A:middle
You should also take a look at

00:12:17.616 --> 00:12:18.946 A:middle
your auto layout and see if you

00:12:18.946 --> 00:12:19.966 A:middle
can reduce the number of

00:12:19.966 --> 00:12:21.496 A:middle
constraints you're using.

00:12:23.516 --> 00:12:25.096 A:middle
Finally, we have the extended

00:12:25.096 --> 00:12:25.416 A:middle
phase.

00:12:26.106 --> 00:12:27.776 A:middle
This is the app-specific period

00:12:27.896 --> 00:12:29.786 A:middle
from your first commit until

00:12:29.786 --> 00:12:31.386 A:middle
when you show your final frame

00:12:31.386 --> 00:12:31.976 A:middle
to your user.

00:12:33.016 --> 00:12:34.146 A:middle
This is when you load that

00:12:34.146 --> 00:12:35.266 A:middle
asynchronous data we talked

00:12:35.266 --> 00:12:35.506 A:middle
about.

00:12:36.316 --> 00:12:38.086 A:middle
Now not every app has this

00:12:38.706 --> 00:12:38.826 A:middle
phase.

00:12:39.916 --> 00:12:41.546 A:middle
But if you do have this phase,

00:12:42.736 --> 00:12:43.956 A:middle
your app should be interactive

00:12:44.146 --> 00:12:44.876 A:middle
and responsive.

00:12:45.436 --> 00:12:47.936 A:middle
If you do have this phase, we

00:12:47.936 --> 00:12:49.366 A:middle
only have general advice on how

00:12:49.366 --> 00:12:50.956 A:middle
you should approach it, and that

00:12:50.956 --> 00:12:52.216 A:middle
is to understand what is

00:12:52.216 --> 00:12:54.386 A:middle
happening, and you can do that

00:12:54.386 --> 00:12:56.626 A:middle
by leveraging OS signpost APIs

00:12:56.956 --> 00:12:58.506 A:middle
to mark out and measure the work

00:12:58.506 --> 00:12:59.856 A:middle
that occurs in between these two

00:12:59.856 --> 00:13:00.336 A:middle
time periods.

00:12:59.856 --> 00:13:00.336 A:middle
time periods.

00:13:04.476 --> 00:13:05.956 A:middle
Now that we talked about what

00:13:05.956 --> 00:13:07.786 A:middle
launch is, let's talk about how

00:13:07.786 --> 00:13:08.886 A:middle
to get usable measurements.

00:13:11.556 --> 00:13:14.236 A:middle
At any given time, an iOS device

00:13:14.236 --> 00:13:16.006 A:middle
is under a variety of different

00:13:16.006 --> 00:13:17.836 A:middle
states and conditions, and this

00:13:17.836 --> 00:13:19.066 A:middle
can introduce substantial

00:13:19.066 --> 00:13:20.226 A:middle
variance into launch.

00:13:21.166 --> 00:13:22.506 A:middle
So, when we're analyzing and

00:13:22.506 --> 00:13:24.356 A:middle
comparing our launch results,

00:13:24.846 --> 00:13:26.686 A:middle
it's critical to ensure that

00:13:26.686 --> 00:13:27.896 A:middle
we're making apples-to-apples

00:13:27.896 --> 00:13:30.106 A:middle
comparisons, because how do you

00:13:30.106 --> 00:13:30.826 A:middle
know if you're making any

00:13:30.876 --> 00:13:33.396 A:middle
progress if before you make any

00:13:33.396 --> 00:13:35.146 A:middle
changes, your launch results are

00:13:35.146 --> 00:13:36.356 A:middle
completely unpredictable?

00:13:36.896 --> 00:13:38.866 A:middle
The first step to making them

00:13:38.866 --> 00:13:40.546 A:middle
predictable is removing those

00:13:40.546 --> 00:13:42.316 A:middle
sources of variance, such as

00:13:42.316 --> 00:13:44.286 A:middle
networking interference and

00:13:44.286 --> 00:13:45.236 A:middle
interference in background

00:13:45.236 --> 00:13:45.816 A:middle
processes.

00:13:47.126 --> 00:13:48.526 A:middle
Now we realize that this sounds

00:13:48.576 --> 00:13:50.366 A:middle
counterintuitive, as this may

00:13:50.366 --> 00:13:51.836 A:middle
result in a launch that's not

00:13:51.836 --> 00:13:53.366 A:middle
entirely representative of

00:13:53.366 --> 00:13:55.506 A:middle
regular usage, but we wanted to

00:13:55.506 --> 00:13:57.276 A:middle
let you know that that's okay.

00:13:58.356 --> 00:13:59.456 A:middle
It's more important to have

00:13:59.566 --> 00:14:01.286 A:middle
consistent results with which

00:13:59.566 --> 00:14:01.286 A:middle
consistent results with which

00:14:01.286 --> 00:14:02.416 A:middle
you can evaluate progress.

00:14:03.216 --> 00:14:05.366 A:middle
At Apple, we've been using this

00:14:05.366 --> 00:14:07.186 A:middle
technique to successfully detect

00:14:07.276 --> 00:14:08.666 A:middle
regressions during development

00:14:09.186 --> 00:14:10.326 A:middle
and drive down launch times.

00:14:11.106 --> 00:14:11.976 A:middle
We then validate these

00:14:11.976 --> 00:14:13.736 A:middle
performance improvements by

00:14:14.016 --> 00:14:15.626 A:middle
using telemetry collected from

00:14:16.156 --> 00:14:17.406 A:middle
the field.

00:14:17.586 --> 00:14:18.816 A:middle
Fortunately, we have some tips

00:14:18.816 --> 00:14:20.076 A:middle
on setting up that clean and

00:14:20.076 --> 00:14:21.066 A:middle
consistent environment.

00:14:23.176 --> 00:14:25.146 A:middle
First, reboot your device.

00:14:26.046 --> 00:14:26.976 A:middle
This will clear out any

00:14:26.976 --> 00:14:28.616 A:middle
unnecessary state, and then let

00:14:28.616 --> 00:14:29.996 A:middle
it settle down over the next few

00:14:29.996 --> 00:14:31.506 A:middle
minutes to clear up any boot

00:14:31.506 --> 00:14:31.956 A:middle
time work.

00:14:34.256 --> 00:14:35.076 A:middle
You could also reduce your

00:14:35.076 --> 00:14:37.126 A:middle
dependence on the network by

00:14:37.126 --> 00:14:38.486 A:middle
either turning on airplane mode

00:14:39.196 --> 00:14:40.306 A:middle
or marking out your network

00:14:40.306 --> 00:14:41.446 A:middle
dependencies in code.

00:14:42.496 --> 00:14:44.646 A:middle
Networking can introduce a fair

00:14:44.646 --> 00:14:45.156 A:middle
amount of variance.

00:14:45.926 --> 00:14:48.056 A:middle
Next is iCloud.

00:14:49.176 --> 00:14:50.746 A:middle
ICloud is a great feature which

00:14:50.776 --> 00:14:51.926 A:middle
works in the background to

00:14:51.926 --> 00:14:53.436 A:middle
deliver a seamless experience to

00:14:53.436 --> 00:14:55.726 A:middle
our users, but that work in the

00:14:55.726 --> 00:14:57.116 A:middle
background can interfere with

00:14:57.116 --> 00:14:57.776 A:middle
app launch.

00:14:58.246 --> 00:14:59.236 A:middle
So, during your measurements,

00:15:00.106 --> 00:15:01.536 A:middle
using unchanging iCloud account

00:15:01.636 --> 00:15:04.446 A:middle
with unchanging data, or log out

00:15:04.446 --> 00:15:05.746 A:middle
of iCloud entirely.

00:15:06.296 --> 00:15:09.906 A:middle
Next be sure to use the release

00:15:09.906 --> 00:15:12.456 A:middle
build of your application when

00:15:12.456 --> 00:15:13.276 A:middle
you're making measurements.

00:15:13.946 --> 00:15:17.646 A:middle
This is, of course, to reduce

00:15:17.646 --> 00:15:19.306 A:middle
the overhead of unnecessary

00:15:19.306 --> 00:15:20.536 A:middle
debugging code during your

00:15:20.536 --> 00:15:22.796 A:middle
measurements and to take

00:15:22.796 --> 00:15:24.196 A:middle
advantage of the compile time

00:15:24.196 --> 00:15:24.946 A:middle
optimizations.

00:15:26.276 --> 00:15:28.196 A:middle
Finally, you should be measuring

00:15:28.246 --> 00:15:30.216 A:middle
with warm launches, which as

00:15:30.216 --> 00:15:31.406 A:middle
mentioned before, are more

00:15:31.406 --> 00:15:33.216 A:middle
consistent, because some of your

00:15:33.216 --> 00:15:34.196 A:middle
app may already be in memory,

00:15:34.996 --> 00:15:35.946 A:middle
and some of those system-side

00:15:35.946 --> 00:15:37.506 A:middle
services may already be running.

00:15:37.536 --> 00:15:41.786 A:middle
Now we can set up some data to

00:15:41.786 --> 00:15:42.196 A:middle
test with.

00:15:43.286 --> 00:15:44.716 A:middle
It's important to create a mock

00:15:44.806 --> 00:15:46.136 A:middle
data set which is consistent,

00:15:46.136 --> 00:15:48.296 A:middle
and you might need a couple data

00:15:48.296 --> 00:15:49.366 A:middle
sets for different types of

00:15:49.366 --> 00:15:51.376 A:middle
users, such as users with small

00:15:51.376 --> 00:15:53.236 A:middle
amounts of data and users with

00:15:53.336 --> 00:15:55.966 A:middle
large amounts of data, though,

00:15:55.966 --> 00:15:58.406 A:middle
in the ideal situation, your app

00:15:58.406 --> 00:15:59.906 A:middle
should be able to scale to any

00:15:59.906 --> 00:16:00.486 A:middle
amount of data.

00:15:59.906 --> 00:16:00.486 A:middle
amount of data.

00:16:01.546 --> 00:16:02.826 A:middle
That's why loading only the data

00:16:02.826 --> 00:16:04.066 A:middle
that is necessary to show your

00:16:04.066 --> 00:16:04.716 A:middle
first frame.

00:16:08.076 --> 00:16:09.056 A:middle
Now we're ready to pick out some

00:16:09.056 --> 00:16:09.526 A:middle
devices.

00:16:10.656 --> 00:16:11.906 A:middle
You should pick out a variety of

00:16:11.906 --> 00:16:13.126 A:middle
devices that are important to

00:16:13.126 --> 00:16:14.636 A:middle
your users and then stick to

00:16:14.636 --> 00:16:15.626 A:middle
them force consistency.

00:16:16.876 --> 00:16:18.466 A:middle
Be sure to include your oldest

00:16:18.466 --> 00:16:19.416 A:middle
devices for your

00:16:19.416 --> 00:16:20.686 A:middle
oldest-supported releases.

00:16:21.436 --> 00:16:22.496 A:middle
This is because performance

00:16:22.496 --> 00:16:24.186 A:middle
characteristics look different

00:16:24.186 --> 00:16:26.136 A:middle
between older devices and newer

00:16:26.136 --> 00:16:28.716 A:middle
devices, which have different

00:16:29.196 --> 00:16:31.636 A:middle
amounts of RAM and CPU cores.

00:16:32.936 --> 00:16:33.856 A:middle
This will ensure that your

00:16:33.856 --> 00:16:35.776 A:middle
launch is delightful for all of

00:16:35.776 --> 00:16:37.606 A:middle
your users on all of their

00:16:37.606 --> 00:16:38.046 A:middle
devices.

00:16:41.046 --> 00:16:41.836 A:middle
Now we're ready to take some

00:16:41.836 --> 00:16:42.276 A:middle
measurements.

00:16:43.576 --> 00:16:45.076 A:middle
We can leverage the new XCTest

00:16:45.286 --> 00:16:46.916 A:middle
for app launce performance in

00:16:46.916 --> 00:16:47.636 A:middle
Xcode 11.

00:16:48.686 --> 00:16:49.936 A:middle
With just a few lines of code,

00:16:50.506 --> 00:16:51.446 A:middle
Xcode will launch your app

00:16:51.496 --> 00:16:53.716 A:middle
repeatedly and then provide

00:16:53.796 --> 00:16:55.226 A:middle
statistical results about how it

00:16:55.226 --> 00:16:55.626 A:middle
performs.

00:16:56.856 --> 00:16:58.326 A:middle
We'll talk about this more

00:16:58.326 --> 00:16:58.626 A:middle
later.

00:17:01.466 --> 00:17:03.026 A:middle
So, now we've talked about what

00:17:03.026 --> 00:17:05.326 A:middle
launch is and how to measure it,

00:17:06.306 --> 00:17:07.546 A:middle
let's talk a little bit about

00:17:07.546 --> 00:17:09.126 A:middle
how to improve it.

00:17:10.516 --> 00:17:11.715 A:middle
When you're reviewing your app's

00:17:11.715 --> 00:17:13.556 A:middle
launch both in code and in

00:17:13.556 --> 00:17:15.136 A:middle
instruments, you should keep

00:17:15.136 --> 00:17:16.376 A:middle
these three tips and tricks in

00:17:16.376 --> 00:17:16.756 A:middle
mind.

00:17:18.205 --> 00:17:20.066 A:middle
That is to first minimize your

00:17:20.066 --> 00:17:22.226 A:middle
work, then prioritize your work,

00:17:23.006 --> 00:17:25.205 A:middle
and finally, optimize your work.

00:17:27.016 --> 00:17:28.846 A:middle
When minimizing work, you should

00:17:28.846 --> 00:17:30.696 A:middle
be deferring anything unrelated

00:17:31.086 --> 00:17:32.536 A:middle
to generating the first frame.

00:17:33.356 --> 00:17:34.746 A:middle
That means deferring things like

00:17:34.746 --> 00:17:36.746 A:middle
undisplayed views or pre-warming

00:17:36.746 --> 00:17:39.146 A:middle
features that are not yet used.

00:17:41.216 --> 00:17:42.776 A:middle
You should also avoid blocking

00:17:42.776 --> 00:17:44.666 A:middle
the main thread, either with

00:17:44.666 --> 00:17:46.996 A:middle
network I/O, file I/O, or more,

00:17:47.696 --> 00:17:48.836 A:middle
as this will affect launch.

00:17:49.216 --> 00:17:50.826 A:middle
Move it to a background thread.

00:17:51.756 --> 00:17:53.566 A:middle
Finally, you should take care to

00:17:53.566 --> 00:17:54.906 A:middle
reduce your memory usage.

00:17:55.426 --> 00:17:56.556 A:middle
Allocating and manipulating

00:17:56.556 --> 00:18:00.686 A:middle
memory can take time.

00:17:56.556 --> 00:18:00.686 A:middle
memory can take time.

00:18:00.896 --> 00:18:02.286 A:middle
Next, prioritize your work.

00:18:03.416 --> 00:18:04.206 A:middle
This is when you should make

00:18:04.206 --> 00:18:05.736 A:middle
sure that work is scheduled at

00:18:05.736 --> 00:18:06.976 A:middle
the right quality of service.

00:18:08.296 --> 00:18:10.306 A:middle
Now in iOS 13, we've made some

00:18:10.306 --> 00:18:11.456 A:middle
exciting optimizations to the

00:18:11.456 --> 00:18:14.006 A:middle
Scheduler to make your apps

00:18:14.006 --> 00:18:15.076 A:middle
launch even faster.

00:18:15.076 --> 00:18:16.876 A:middle
But that means it's more

00:18:16.876 --> 00:18:18.706 A:middle
critical than ever to preserve

00:18:18.706 --> 00:18:20.816 A:middle
priority issue propagate work

00:18:20.816 --> 00:18:21.456 A:middle
across threads.

00:18:22.196 --> 00:18:24.456 A:middle
You should take a look at

00:18:24.456 --> 00:18:25.536 A:middle
Modernizing Grand Central

00:18:25.536 --> 00:18:28.236 A:middle
Dispatch Usage from WW 2017,

00:18:28.566 --> 00:18:30.056 A:middle
which goes into depth about how

00:18:30.056 --> 00:18:31.286 A:middle
to handle concurrency correctly.

00:18:33.916 --> 00:18:35.396 A:middle
Finally, we have optimizing

00:18:35.396 --> 00:18:35.566 A:middle
work.

00:18:36.696 --> 00:18:37.966 A:middle
Anything that's remaining after

00:18:37.966 --> 00:18:38.936 A:middle
you've minimized it and

00:18:38.936 --> 00:18:40.236 A:middle
prioritized it should be

00:18:40.236 --> 00:18:40.746 A:middle
optimized.

00:18:41.366 --> 00:18:42.526 A:middle
That is to say it should be

00:18:42.526 --> 00:18:43.976 A:middle
simplified and limited.

00:18:44.726 --> 00:18:46.376 A:middle
For example, limit the amount of

00:18:46.376 --> 00:18:48.016 A:middle
data that you fetch only what

00:18:48.016 --> 00:18:50.306 A:middle
you need during launch, or

00:18:50.306 --> 00:18:52.186 A:middle
lazily compute any variables and

00:18:52.186 --> 00:18:53.406 A:middle
results that you need.

00:18:55.016 --> 00:18:56.486 A:middle
When you're doing this, take a

00:18:56.486 --> 00:18:57.556 A:middle
look at your methods and

00:18:57.556 --> 00:18:59.056 A:middle
algorithms and see if you can

00:18:59.056 --> 00:19:00.896 A:middle
optimize them, as you could get

00:18:59.056 --> 00:19:00.896 A:middle
optimize them, as you could get

00:19:00.896 --> 00:19:02.196 A:middle
significant improvements by

00:19:02.196 --> 00:19:03.596 A:middle
calculating a result differently

00:19:04.066 --> 00:19:05.006 A:middle
or using a different data

00:19:05.006 --> 00:19:05.426 A:middle
structure.

00:19:06.006 --> 00:19:08.626 A:middle
And finally, you should be

00:19:08.626 --> 00:19:09.936 A:middle
caching your resources and your

00:19:09.936 --> 00:19:10.616 A:middle
complications.

00:19:11.396 --> 00:19:12.476 A:middle
This is, of course, to reduce

00:19:12.526 --> 00:19:14.386 A:middle
the CPU and memory overhead by

00:19:14.386 --> 00:19:15.776 A:middle
doing work multiple times

00:19:15.946 --> 00:19:16.646 A:middle
unnecessarily.

00:19:17.246 --> 00:19:19.416 A:middle
So, I'd love to hand the stage

00:19:19.416 --> 00:19:20.506 A:middle
over to Dan, who is going to

00:19:20.506 --> 00:19:22.696 A:middle
give you a great demo on how to

00:19:22.696 --> 00:19:24.236 A:middle
use the new App Launch Template

00:19:24.236 --> 00:19:25.496 A:middle
in Xcode Instruments to

00:19:25.496 --> 00:19:27.306 A:middle
understand and improve our app's

00:19:27.306 --> 00:19:27.696 A:middle
launch.

00:19:28.516 --> 00:19:34.176 A:middle
[ Applause ]

00:19:34.676 --> 00:19:35.436 A:middle
&gt;&gt; Thank you, Spencer.

00:19:36.336 --> 00:19:38.326 A:middle
Hi, everyone, my name is Dan

00:19:38.376 --> 00:19:39.786 A:middle
Sawada, and I'm also one of the

00:19:39.786 --> 00:19:41.476 A:middle
performance engineers here at

00:19:41.476 --> 00:19:41.686 A:middle
Apple.

00:19:42.666 --> 00:19:44.276 A:middle
Today I will be going over a

00:19:44.356 --> 00:19:45.676 A:middle
typical workflow of

00:19:45.846 --> 00:19:47.616 A:middle
understanding your app's launch

00:19:48.156 --> 00:19:49.686 A:middle
and looking for opportunities to

00:19:49.686 --> 00:19:52.116 A:middle
minimize, prioritize, and

00:19:52.186 --> 00:19:53.886 A:middle
optimize the work, so that you

00:19:53.886 --> 00:19:55.166 A:middle
can actually deliver a

00:19:55.416 --> 00:19:57.056 A:middle
delightful first user

00:19:57.056 --> 00:19:57.596 A:middle
experience.

00:19:58.836 --> 00:19:59.606 A:middle
So, let's get started.

00:19:59.606 --> 00:20:02.096 A:middle
The app that I'm going to be

00:19:59.606 --> 00:20:02.096 A:middle
The app that I'm going to be

00:20:02.096 --> 00:20:03.626 A:middle
demonstrating today is called

00:20:03.626 --> 00:20:04.496 A:middle
Star Searcher.

00:20:04.856 --> 00:20:06.186 A:middle
It's an example app that we

00:20:06.186 --> 00:20:07.946 A:middle
specifically written for this

00:20:07.946 --> 00:20:08.366 A:middle
session.

00:20:09.106 --> 00:20:10.856 A:middle
As you can see, it's a very

00:20:10.856 --> 00:20:13.686 A:middle
typical UI table view that lists

00:20:13.746 --> 00:20:14.976 A:middle
all of my imaginary stars.

00:20:15.176 --> 00:20:17.556 A:middle
If you click on the cell, or a

00:20:17.556 --> 00:20:19.936 A:middle
star, it shows you a little

00:20:19.936 --> 00:20:21.436 A:middle
description blurb, in addition

00:20:21.436 --> 00:20:22.026 A:middle
to a picture.

00:20:23.116 --> 00:20:24.496 A:middle
However, we have one problem,

00:20:25.496 --> 00:20:26.766 A:middle
let's go ahead and launch it.

00:20:28.176 --> 00:20:29.676 A:middle
Ready, go.

00:20:33.196 --> 00:20:36.766 A:middle
So, that took an astounding 2.5

00:20:36.766 --> 00:20:38.926 A:middle
seconds to launch, not sure if I

00:20:38.926 --> 00:20:40.546 A:middle
could call that delightful.

00:20:40.896 --> 00:20:42.676 A:middle
So, let's use Xcode and

00:20:43.016 --> 00:20:44.606 A:middle
Instruments to see if there's

00:20:45.016 --> 00:20:46.786 A:middle
anything we can do about this.

00:20:49.106 --> 00:20:51.326 A:middle
So, here we have our Xcode

00:20:51.386 --> 00:20:52.726 A:middle
project for Star Searcher.

00:20:53.456 --> 00:20:55.366 A:middle
Now one important thing that we

00:20:55.366 --> 00:20:57.116 A:middle
should do before we do any

00:20:57.666 --> 00:21:01.126 A:middle
performance-related analysis is

00:20:57.666 --> 00:21:01.126 A:middle
performance-related analysis is

00:21:01.956 --> 00:21:03.576 A:middle
selecting the profile scheme in

00:21:03.576 --> 00:21:04.026 A:middle
Xcode.

00:21:04.856 --> 00:21:08.076 A:middle
This will ensure Xcode to

00:21:08.076 --> 00:21:09.496 A:middle
recompile your app in release

00:21:09.496 --> 00:21:11.816 A:middle
mode, so that you can take the

00:21:11.816 --> 00:21:13.836 A:middle
advantages of compiler time

00:21:13.836 --> 00:21:14.646 A:middle
optimizations.

00:21:15.716 --> 00:21:17.196 A:middle
Once Xcode recompiles your app,

00:21:17.756 --> 00:21:19.026 A:middle
it will install it on your

00:21:19.026 --> 00:21:21.936 A:middle
device and launch Instruments.

00:21:22.736 --> 00:21:24.816 A:middle
Now we are happy to announce

00:21:25.056 --> 00:21:28.416 A:middle
that as of iOS 13, or Xcode 11,

00:21:28.796 --> 00:21:29.896 A:middle
we now have the

00:21:29.896 --> 00:21:31.316 A:middle
AppLaunchTemplate, which we can

00:21:31.316 --> 00:21:33.636 A:middle
use specifically for triage

00:21:33.666 --> 00:21:35.496 A:middle
purposes like this, figuring out

00:21:35.496 --> 00:21:36.616 A:middle
what's wrong with AppLaunch.

00:21:37.366 --> 00:21:39.096 A:middle
So, let's go ahead and

00:21:39.806 --> 00:21:42.256 A:middle
double-click on AppLaunch.

00:21:42.826 --> 00:21:45.786 A:middle
Now the first thing we want to

00:21:45.786 --> 00:21:49.496 A:middle
do here is hit the record

00:21:49.496 --> 00:21:49.876 A:middle
button.

00:21:52.776 --> 00:21:54.176 A:middle
At this point, Instruments will

00:21:54.176 --> 00:21:55.516 A:middle
automatically launch Star

00:21:55.516 --> 00:21:57.826 A:middle
Searcher, our app, gather all of

00:21:57.826 --> 00:22:00.016 A:middle
the metrics, telemetry data,

00:21:57.826 --> 00:22:00.016 A:middle
the metrics, telemetry data,

00:22:00.586 --> 00:22:02.176 A:middle
analyze them, and create

00:22:02.176 --> 00:22:03.756 A:middle
visualizations for all of the

00:22:03.756 --> 00:22:04.776 A:middle
app launch phases.

00:22:05.686 --> 00:22:06.816 A:middle
So, with take a look.

00:22:07.396 --> 00:22:09.906 A:middle
The first few phases marked in

00:22:09.906 --> 00:22:12.836 A:middle
purple are the phases that occur

00:22:12.836 --> 00:22:14.316 A:middle
before your main function is

00:22:14.316 --> 00:22:15.506 A:middle
invoked within your app.

00:22:17.656 --> 00:22:19.316 A:middle
Onto the green phases, these

00:22:19.316 --> 00:22:21.356 A:middle
phases of the early phases that

00:22:21.356 --> 00:22:22.916 A:middle
occur at the very first of your

00:22:22.916 --> 00:22:24.426 A:middle
main function, as your app

00:22:24.426 --> 00:22:26.556 A:middle
finishes its launch and draws

00:22:26.556 --> 00:22:29.746 A:middle
its first frame in UI.

00:22:29.906 --> 00:22:31.716 A:middle
Let's go ahead and expand the

00:22:31.716 --> 00:22:32.166 A:middle
lanes.

00:22:32.686 --> 00:22:34.566 A:middle
As we expand the lanes, you can

00:22:34.716 --> 00:22:36.496 A:middle
see the detailed states of all

00:22:36.496 --> 00:22:37.956 A:middle
of the threads that respond

00:22:37.956 --> 00:22:39.126 A:middle
within your app's process.

00:22:40.086 --> 00:22:41.966 A:middle
Obviously, the most important

00:22:41.966 --> 00:22:44.256 A:middle
one would be the main thread, or

00:22:44.296 --> 00:22:46.106 A:middle
also known as the UI thread,

00:22:46.356 --> 00:22:47.936 A:middle
which is responsible for handing

00:22:47.936 --> 00:22:51.016 A:middle
user input and drawing your UI.

00:22:51.786 --> 00:22:53.416 A:middle
Let's go ahead and pin down the

00:22:53.416 --> 00:22:54.646 A:middle
lanes that are relevant for our

00:22:54.646 --> 00:22:56.206 A:middle
purpose, starting with the app

00:22:56.386 --> 00:22:59.356 A:middle
launch phases, our main thread,

00:22:59.786 --> 00:23:01.436 A:middle
and there's one more worker

00:22:59.786 --> 00:23:01.436 A:middle
and there's one more worker

00:23:01.436 --> 00:23:02.616 A:middle
thread that's doing a

00:23:02.826 --> 00:23:03.796 A:middle
substantial amount of work

00:23:03.796 --> 00:23:04.546 A:middle
during launch.

00:23:05.476 --> 00:23:08.086 A:middle
So, let's go ahead and pin this

00:23:08.976 --> 00:23:10.136 A:middle
down, too.

00:23:11.616 --> 00:23:13.426 A:middle
Speaking of thread states --

00:23:13.426 --> 00:23:13.756 A:middle
oops.

00:23:18.046 --> 00:23:18.226 A:middle
Like that.

00:23:21.076 --> 00:23:23.596 A:middle
Speaking of thread states, gray

00:23:23.596 --> 00:23:24.856 A:middle
means it's blocked, meaning that

00:23:24.856 --> 00:23:26.336 A:middle
the thread isn't doing any work.

00:23:27.856 --> 00:23:30.016 A:middle
Red means it's runnable, meaning

00:23:30.016 --> 00:23:31.546 A:middle
that there's work scheduled to

00:23:31.546 --> 00:23:33.666 A:middle
be done, but lacking CPU

00:23:33.666 --> 00:23:34.326 A:middle
resources.

00:23:35.256 --> 00:23:37.046 A:middle
Orange means it's preempted,

00:23:37.166 --> 00:23:39.336 A:middle
meaning that it was doing work

00:23:39.566 --> 00:23:41.376 A:middle
but got interrupted in favor of

00:23:41.466 --> 00:23:43.366 A:middle
other competing work that has a

00:23:43.366 --> 00:23:44.216 A:middle
higher priority.

00:23:44.856 --> 00:23:47.046 A:middle
And last but not least, blue

00:23:47.046 --> 00:23:48.376 A:middle
means it's running, meaning that

00:23:48.376 --> 00:23:49.836 A:middle
it's actually doing work on the

00:23:49.926 --> 00:23:50.676 A:middle
CPU core.

00:23:50.676 --> 00:23:53.856 A:middle
So, with that information, let's

00:23:53.856 --> 00:23:55.456 A:middle
take a look phase by phase

00:23:56.106 --> 00:23:57.266 A:middle
starting with the system

00:23:57.266 --> 00:23:58.516 A:middle
interface initialization.

00:24:00.036 --> 00:24:01.736 A:middle
As we triple-click on a phase,

00:24:02.706 --> 00:24:04.676 A:middle
we can highlight the phase and

00:24:04.676 --> 00:24:06.016 A:middle
get detailed information towards

00:24:06.016 --> 00:24:07.236 A:middle
the bottom half of the screen.

00:24:08.026 --> 00:24:09.776 A:middle
To your left, you can see the

00:24:09.776 --> 00:24:12.246 A:middle
detailed stack trace of all the

00:24:12.246 --> 00:24:13.376 A:middle
work that's being done during

00:24:13.376 --> 00:24:14.216 A:middle
this time period.

00:24:14.926 --> 00:24:17.676 A:middle
To your right, you can see a

00:24:17.676 --> 00:24:19.176 A:middle
aggregated stack trace, which

00:24:19.176 --> 00:24:21.786 A:middle
lists all of the symbols ordered

00:24:21.786 --> 00:24:23.456 A:middle
by the number of CPU sample

00:24:23.456 --> 00:24:23.856 A:middle
size.

00:24:24.826 --> 00:24:26.726 A:middle
Now notice that this initial

00:24:26.726 --> 00:24:29.366 A:middle
phase only took 6 milliseconds

00:24:29.736 --> 00:24:31.866 A:middle
as it sets up its system

00:24:31.936 --> 00:24:32.576 A:middle
interfaces.

00:24:33.316 --> 00:24:35.196 A:middle
This is primarily due to the

00:24:35.196 --> 00:24:37.666 A:middle
benefits of dyld3 introduction

00:24:37.946 --> 00:24:39.546 A:middle
and third-party apps, in

00:24:39.546 --> 00:24:41.306 A:middle
addition to other system layer

00:24:41.306 --> 00:24:42.086 A:middle
enhancements.

00:24:42.996 --> 00:24:45.316 A:middle
So, as developers, we can take

00:24:45.316 --> 00:24:46.706 A:middle
advantage of all of those

00:24:46.706 --> 00:24:48.146 A:middle
enhancements without writing a

00:24:48.146 --> 00:24:49.906 A:middle
single line of code.

00:24:50.876 --> 00:24:54.386 A:middle
Let's move on, but before we do

00:24:54.386 --> 00:24:55.986 A:middle
so, there's one other thing I

00:24:55.986 --> 00:24:56.806 A:middle
should point out here.

00:24:57.996 --> 00:25:00.156 A:middle
Notice that while this phase

00:24:57.996 --> 00:25:00.156 A:middle
Notice that while this phase

00:25:00.156 --> 00:25:02.206 A:middle
only spent 6 milliseconds on the

00:25:02.206 --> 00:25:05.876 A:middle
CPU clock for Star Searcher, it

00:25:05.876 --> 00:25:08.516 A:middle
spent 149 milliseconds on the

00:25:08.516 --> 00:25:09.186 A:middle
wall clock.

00:25:09.626 --> 00:25:11.366 A:middle
This discrepancy comes from the

00:25:11.406 --> 00:25:13.016 A:middle
overhead of the profiling

00:25:13.016 --> 00:25:15.376 A:middle
mechanism itself, which does

00:25:15.376 --> 00:25:17.006 A:middle
give us a lot of information and

00:25:17.006 --> 00:25:18.776 A:middle
insight, but has a cost of its

00:25:18.776 --> 00:25:18.886 A:middle
own.

00:25:19.056 --> 00:25:21.156 A:middle
So, this is why it's very

00:25:21.156 --> 00:25:23.016 A:middle
important to distinguish

00:25:23.176 --> 00:25:24.946 A:middle
profiling with measurements,

00:25:25.186 --> 00:25:26.666 A:middle
which I will explain more later

00:25:26.666 --> 00:25:26.866 A:middle
on.

00:25:27.496 --> 00:25:30.506 A:middle
On to the next phase, which is

00:25:30.506 --> 00:25:32.276 A:middle
static runtime initialization.

00:25:32.856 --> 00:25:35.566 A:middle
Now notice this phase took an

00:25:35.566 --> 00:25:38.616 A:middle
astonishing 375 milliseconds.

00:25:39.046 --> 00:25:40.426 A:middle
Now that's a little bit too

00:25:40.426 --> 00:25:40.866 A:middle
long.

00:25:42.316 --> 00:25:43.126 A:middle
So, let's take a look.

00:25:43.866 --> 00:25:45.056 A:middle
Looking at the detailed stack

00:25:45.096 --> 00:25:47.566 A:middle
trace, we see a highlighted

00:25:47.696 --> 00:25:50.576 A:middle
symbol with a blue icon marking

00:25:50.686 --> 00:25:52.996 A:middle
370 milliseconds' worth of work

00:25:53.156 --> 00:25:54.366 A:middle
on the CPU.

00:25:54.716 --> 00:25:56.186 A:middle
Now all of these highlighted

00:25:56.256 --> 00:25:58.336 A:middle
symbols indicate code that's

00:25:58.376 --> 00:25:59.976 A:middle
declared within our sources.

00:26:00.546 --> 00:26:02.796 A:middle
Let's click on it.

00:26:08.046 --> 00:26:09.826 A:middle
Now by expanding the stack

00:26:09.866 --> 00:26:12.426 A:middle
trace, it points us to the

00:26:12.426 --> 00:26:14.046 A:middle
SLSuperfastLogger.

00:26:14.456 --> 00:26:16.706 A:middle
Now, if a library is calling

00:26:16.706 --> 00:26:18.496 A:middle
itself superfast, that implies

00:26:18.596 --> 00:26:22.496 A:middle
some fishiness, but let's take a

00:26:22.496 --> 00:26:22.706 A:middle
look.

00:26:23.266 --> 00:26:26.266 A:middle
So, SLSuperfastLogger is a

00:26:26.266 --> 00:26:27.786 A:middle
external framework that we've

00:26:27.786 --> 00:26:29.926 A:middle
imported specifically into Star

00:26:29.926 --> 00:26:32.506 A:middle
Searcher to take the benefits of

00:26:32.786 --> 00:26:34.606 A:middle
powerful and convenient logging.

00:26:35.556 --> 00:26:37.256 A:middle
However, the only place we

00:26:37.256 --> 00:26:41.186 A:middle
invoke this framework is within

00:26:41.186 --> 00:26:42.556 A:middle
the table view controller.

00:26:43.016 --> 00:26:44.296 A:middle
Specifically, within the

00:26:44.296 --> 00:26:46.146 A:middle
didSelectRowAt callback.

00:26:47.236 --> 00:26:49.816 A:middle
Now this callback is completely

00:26:49.816 --> 00:26:51.226 A:middle
out of the launch path, because

00:26:51.406 --> 00:26:53.176 A:middle
it's only invoked when the user

00:26:53.176 --> 00:26:54.026 A:middle
taps on a cell.

00:26:54.326 --> 00:26:56.616 A:middle
So, why is it doing over 300

00:26:56.616 --> 00:26:58.296 A:middle
milliseconds' worth of work

00:26:58.716 --> 00:27:00.656 A:middle
during early launch and even

00:26:58.716 --> 00:27:00.656 A:middle
during early launch and even

00:27:00.656 --> 00:27:02.526 A:middle
before our main function is

00:27:02.526 --> 00:27:02.976 A:middle
invoked?

00:27:03.436 --> 00:27:04.836 A:middle
Well, let's investigate.

00:27:08.476 --> 00:27:10.696 A:middle
By searching the symbol, it

00:27:10.696 --> 00:27:13.336 A:middle
points us to a plus-load method

00:27:13.376 --> 00:27:14.666 A:middle
declared within the SL

00:27:14.756 --> 00:27:16.006 A:middle
SuperfastLogger class.

00:27:16.796 --> 00:27:18.026 A:middle
Now, this is a static

00:27:18.026 --> 00:27:20.816 A:middle
initializer, meaning that all of

00:27:20.816 --> 00:27:23.296 A:middle
this work would be done at very

00:27:23.296 --> 00:27:24.976 A:middle
early in launch before a main

00:27:24.976 --> 00:27:26.486 A:middle
function is invoked, given the

00:27:26.486 --> 00:27:27.886 A:middle
fact that we link against it.

00:27:28.416 --> 00:27:30.636 A:middle
Now, the take away here is that

00:27:30.636 --> 00:27:31.846 A:middle
it's very important to

00:27:31.846 --> 00:27:33.686 A:middle
understand the impact of your

00:27:33.686 --> 00:27:35.196 A:middle
dependencies in the frameworks

00:27:35.196 --> 00:27:37.296 A:middle
that you use.

00:27:38.016 --> 00:27:39.116 A:middle
External libraries and

00:27:39.116 --> 00:27:40.676 A:middle
frameworks may be convenient and

00:27:40.676 --> 00:27:42.976 A:middle
may be powerful, but it may come

00:27:42.976 --> 00:27:44.076 A:middle
with a heavy cost.

00:27:44.456 --> 00:27:48.316 A:middle
So, if those costs justifies the

00:27:48.316 --> 00:27:49.796 A:middle
benefits, great.

00:27:49.796 --> 00:27:51.606 A:middle
But for our case, 300

00:27:51.606 --> 00:27:54.166 A:middle
milliseconds during launch is a

00:27:54.166 --> 00:27:55.086 A:middle
little bit too much for what

00:27:55.086 --> 00:27:55.536 A:middle
it's worth.

00:27:56.316 --> 00:27:58.496 A:middle
So, let's go ahead and pursue

00:27:58.496 --> 00:27:59.216 A:middle
alternatives.

00:28:00.626 --> 00:28:02.296 A:middle
In our case let's use os.log,

00:28:02.346 --> 00:28:03.956 A:middle
which is a very lightweight and

00:28:03.956 --> 00:28:06.226 A:middle
efficient logging mechanism that

00:28:06.226 --> 00:28:08.546 A:middle
comes right with iOS as well as

00:28:08.716 --> 00:28:11.696 A:middle
other Apple platforms.

00:28:11.696 --> 00:28:13.636 A:middle
Now once we remove the

00:28:13.636 --> 00:28:15.076 A:middle
dependency, there's one

00:28:15.076 --> 00:28:16.136 A:middle
additional thing that we

00:28:16.136 --> 00:28:17.696 A:middle
absolutely need to remember to

00:28:18.176 --> 00:28:21.976 A:middle
do, which is to remove the

00:28:21.976 --> 00:28:23.426 A:middle
actual linkage.

00:28:23.946 --> 00:28:26.616 A:middle
Now because the cost here is

00:28:26.706 --> 00:28:28.476 A:middle
with a static initializer, we

00:28:28.916 --> 00:28:31.936 A:middle
need to make sure to remove the

00:28:31.936 --> 00:28:34.256 A:middle
linkage in order for it not to

00:28:34.936 --> 00:28:36.766 A:middle
impact us.

00:28:37.106 --> 00:28:39.616 A:middle
So, with that, let's go back to

00:28:39.616 --> 00:28:40.066 A:middle
our trace.

00:28:41.076 --> 00:28:44.706 A:middle
The next phase is UIKit

00:28:44.706 --> 00:28:46.816 A:middle
initialization, which took 28

00:28:46.816 --> 00:28:48.316 A:middle
milliseconds on the wall clock.

00:28:48.746 --> 00:28:50.516 A:middle
Now this is pretty much a fixed

00:28:50.516 --> 00:28:52.186 A:middle
cost for all applications.

00:28:53.066 --> 00:28:57.056 A:middle
So, unless you subclass UI

00:28:57.056 --> 00:28:58.596 A:middle
application or do a custom

00:28:58.596 --> 00:28:59.966 A:middle
initialization work in

00:28:59.966 --> 00:29:02.136 A:middle
UIApplicationDelegate, it's

00:28:59.966 --> 00:29:02.136 A:middle
UIApplicationDelegate, it's

00:29:02.136 --> 00:29:03.196 A:middle
pretty much something that we

00:29:03.196 --> 00:29:04.446 A:middle
can disregard for now.

00:29:04.976 --> 00:29:06.856 A:middle
So, let's move on.

00:29:08.416 --> 00:29:11.296 A:middle
The next chunk of work is your

00:29:11.336 --> 00:29:13.046 A:middle
applications initialization,

00:29:13.566 --> 00:29:15.096 A:middle
which is pretty much what you

00:29:15.096 --> 00:29:15.586 A:middle
control.

00:29:16.146 --> 00:29:18.296 A:middle
Now notice there is a big amount

00:29:18.296 --> 00:29:20.116 A:middle
of work being done with

00:29:20.266 --> 00:29:21.706 A:middle
didFinishLaunchingWithOptions

00:29:21.706 --> 00:29:25.306 A:middle
callback, which took 791

00:29:25.306 --> 00:29:26.736 A:middle
milliseconds on the wall clock.

00:29:27.086 --> 00:29:28.706 A:middle
Now that's very long.

00:29:29.546 --> 00:29:32.276 A:middle
Let's take a look.

00:29:32.536 --> 00:29:35.056 A:middle
So, this phase immediately

00:29:35.056 --> 00:29:36.846 A:middle
points us to heavy amounts of

00:29:36.846 --> 00:29:39.416 A:middle
work in the StarDataProvider

00:29:39.466 --> 00:29:39.986 A:middle
class.

00:29:41.156 --> 00:29:42.276 A:middle
It says, "loading stars."

00:29:42.796 --> 00:29:46.396 A:middle
Okay, now, notice that there's a

00:29:46.396 --> 00:29:48.076 A:middle
huge blockage in the main

00:29:48.076 --> 00:29:50.776 A:middle
thread, which essentially is a

00:29:50.776 --> 00:29:52.066 A:middle
delay in our launch.

00:29:52.596 --> 00:29:54.166 A:middle
Our main thread was blocked for

00:29:54.166 --> 00:29:55.896 A:middle
754 milliseconds.

00:29:56.306 --> 00:29:58.396 A:middle
Now that's not nice.

00:29:59.606 --> 00:30:00.266 A:middle
Let's take a look.

00:29:59.606 --> 00:30:00.266 A:middle
Let's take a look.

00:30:01.926 --> 00:30:03.126 A:middle
So, in order to inspect the

00:30:03.126 --> 00:30:05.366 A:middle
detailed states, we should look

00:30:05.366 --> 00:30:07.326 A:middle
at the event list.

00:30:09.016 --> 00:30:11.096 A:middle
By looking at the event list, we

00:30:11.096 --> 00:30:12.666 A:middle
notice that it was blocked for

00:30:12.796 --> 00:30:15.756 A:middle
754 milliseconds, and

00:30:15.796 --> 00:30:18.466 A:middle
afterwards, it was unblocked, or

00:30:18.466 --> 00:30:20.376 A:middle
made runnable, by thread

00:30:20.376 --> 00:30:22.576 A:middle
0x12253.

00:30:23.396 --> 00:30:25.196 A:middle
Now this corresponds to this

00:30:25.196 --> 00:30:27.616 A:middle
worker thread that was doing a

00:30:27.616 --> 00:30:28.316 A:middle
lot of work.

00:30:29.636 --> 00:30:31.106 A:middle
So, there's some relationship

00:30:31.106 --> 00:30:31.386 A:middle
here.

00:30:32.576 --> 00:30:34.096 A:middle
Now going back to the main

00:30:34.096 --> 00:30:36.256 A:middle
thread, notice that it's

00:30:36.296 --> 00:30:37.906 A:middle
scheduled to do work at priority

00:30:37.906 --> 00:30:38.816 A:middle
47.

00:30:39.376 --> 00:30:41.356 A:middle
Forty-seven is equivalent to the

00:30:41.356 --> 00:30:45.066 A:middle
user interactive QoS.

00:30:45.276 --> 00:30:47.016 A:middle
Now look at all this red meeting

00:30:47.016 --> 00:30:49.606 A:middle
there's a lot of work to do, but

00:30:49.646 --> 00:30:51.986 A:middle
it's lacking CPU resources.

00:30:52.496 --> 00:30:54.196 A:middle
Well, let's figure out why.

00:30:55.446 --> 00:30:58.476 A:middle
As we click on the worker

00:30:58.476 --> 00:30:59.836 A:middle
thread, we notice that there's a

00:30:59.836 --> 00:31:02.156 A:middle
lot of work scheduled to do work

00:30:59.836 --> 00:31:02.156 A:middle
lot of work scheduled to do work

00:31:02.156 --> 00:31:03.456 A:middle
at priority 4.

00:31:03.966 --> 00:31:05.056 A:middle
This is equivalent to the

00:31:05.246 --> 00:31:06.106 A:middle
background QoS.

00:31:06.106 --> 00:31:09.116 A:middle
What we're actually seeing here

00:31:09.116 --> 00:31:11.326 A:middle
is a symptom known as priority

00:31:11.326 --> 00:31:13.176 A:middle
inversion, where a given thread

00:31:13.316 --> 00:31:15.186 A:middle
is being blocked by a separate

00:31:15.186 --> 00:31:17.406 A:middle
thread that has a lower QoS, or

00:31:17.906 --> 00:31:19.386 A:middle
priority, than itself.

00:31:20.176 --> 00:31:21.676 A:middle
Obviously, this isn't ideal,

00:31:21.936 --> 00:31:23.816 A:middle
because it's still aimed to

00:31:23.816 --> 00:31:25.286 A:middle
launch more than it should.

00:31:25.736 --> 00:31:27.306 A:middle
So, let's go ahead and try to

00:31:28.206 --> 00:31:29.396 A:middle
fix that.

00:31:29.606 --> 00:31:30.346 A:middle
Looking back at the

00:31:30.346 --> 00:31:32.096 A:middle
StarDataProvider, which is at

00:31:32.096 --> 00:31:34.826 A:middle
the core of this issue, is a

00:31:34.826 --> 00:31:36.576 A:middle
very simple class that's

00:31:36.576 --> 00:31:38.016 A:middle
responsible for fetching data

00:31:38.506 --> 00:31:40.396 A:middle
for our stars from SQLite

00:31:40.396 --> 00:31:42.516 A:middle
database, has a dedicated

00:31:42.516 --> 00:31:44.456 A:middle
dispatch queue with a background

00:31:45.296 --> 00:31:47.286 A:middle
QoS, and note that this is to

00:31:47.286 --> 00:31:48.786 A:middle
ensure that data fetching

00:31:48.786 --> 00:31:50.946 A:middle
doesn't compete with the UI.

00:31:50.946 --> 00:31:53.956 A:middle
And there's two API being

00:31:53.956 --> 00:31:54.556 A:middle
exposed.

00:31:55.246 --> 00:31:56.556 A:middle
One for loading data

00:31:56.556 --> 00:31:58.826 A:middle
asynchronously using this

00:31:59.056 --> 00:32:00.846 A:middle
GrandCentralDispatch's async

00:31:59.056 --> 00:32:00.846 A:middle
GrandCentralDispatch's async

00:32:00.886 --> 00:32:02.506 A:middle
primitive and another

00:32:02.656 --> 00:32:04.706 A:middle
synchronous API that loads the

00:32:05.096 --> 00:32:06.866 A:middle
data in a synchronous fashion.

00:32:08.446 --> 00:32:10.876 A:middle
Now looking at the actual call

00:32:10.876 --> 00:32:12.026 A:middle
sites within the

00:32:12.026 --> 00:32:13.686 A:middle
didFinishLaunchingwithOptions,

00:32:14.776 --> 00:32:15.916 A:middle
we are leveraging the

00:32:16.046 --> 00:32:19.486 A:middle
asynchronous API, but also

00:32:19.486 --> 00:32:20.706 A:middle
leveraging the dispatch

00:32:20.816 --> 00:32:23.346 A:middle
semaphore to ensure that we wait

00:32:23.346 --> 00:32:24.506 A:middle
for all of the data to be

00:32:24.506 --> 00:32:26.706 A:middle
fetched before we proceed on to

00:32:26.706 --> 00:32:28.616 A:middle
drawing the actual first frame

00:32:28.966 --> 00:32:29.816 A:middle
of our table view.

00:32:29.816 --> 00:32:32.626 A:middle
Now if we're going to be doing

00:32:32.626 --> 00:32:34.846 A:middle
this, we should use the correct

00:32:35.246 --> 00:32:37.376 A:middle
concurrency primitive, which is

00:32:37.696 --> 00:32:41.736 A:middle
the sync primitive in GCD.

00:32:42.306 --> 00:32:44.136 A:middle
Now using the correct

00:32:44.276 --> 00:32:45.436 A:middle
concurrency primitives,

00:32:45.746 --> 00:32:47.376 A:middle
GrandCentralDispatch will

00:32:47.376 --> 00:32:49.186 A:middle
temporarily propagate the

00:32:49.246 --> 00:32:51.176 A:middle
priority of the main thread to

00:32:51.176 --> 00:32:52.626 A:middle
the worker thread and boost it

00:32:52.626 --> 00:32:55.206 A:middle
up to user inactive so that it

00:32:57.376 --> 00:32:57.546 A:middle
matches.

00:32:57.676 --> 00:32:59.986 A:middle
So, at this point, I think we

00:32:59.986 --> 00:33:01.916 A:middle
have the potential to resolve

00:32:59.986 --> 00:33:01.916 A:middle
have the potential to resolve

00:33:01.916 --> 00:33:03.186 A:middle
the priority inversion, but

00:33:03.186 --> 00:33:04.456 A:middle
there's one more issue that I

00:33:04.456 --> 00:33:05.066 A:middle
notice here.

00:33:06.326 --> 00:33:09.006 A:middle
LoadStarDataSync API accepts a

00:33:09.006 --> 00:33:12.226 A:middle
range of rows to load the data

00:33:12.226 --> 00:33:12.576 A:middle
for.

00:33:13.196 --> 00:33:15.016 A:middle
In our case, we're loading from

00:33:15.296 --> 00:33:17.776 A:middle
row 0 to the very last row,

00:33:17.996 --> 00:33:19.766 A:middle
which is essentially everything.

00:33:20.646 --> 00:33:22.946 A:middle
Now when you think about it, the

00:33:22.946 --> 00:33:24.666 A:middle
first frame can only fit just a

00:33:24.666 --> 00:33:27.746 A:middle
limited number of cells that may

00:33:27.746 --> 00:33:28.706 A:middle
be on the screen size.

00:33:29.186 --> 00:33:30.506 A:middle
In the case of Star Searcher,

00:33:30.986 --> 00:33:32.386 A:middle
perhaps around 10 to 15,

00:33:32.736 --> 00:33:33.636 A:middle
depending on the device.

00:33:34.186 --> 00:33:36.186 A:middle
So, let's go ahead and optimize

00:33:36.186 --> 00:33:38.086 A:middle
that, and instead of loading

00:33:38.216 --> 00:33:41.336 A:middle
everything, let's just load the

00:33:41.496 --> 00:33:43.646 A:middle
first 20 rows, just enough to

00:33:43.646 --> 00:33:44.806 A:middle
draw the first frame of the

00:33:44.886 --> 00:33:46.526 A:middle
table view in a synchronous

00:33:46.526 --> 00:33:47.006 A:middle
fashion.

00:33:47.846 --> 00:33:49.606 A:middle
Afterwards, we should load all

00:33:49.606 --> 00:33:51.316 A:middle
of the rest lazily in the

00:33:51.316 --> 00:33:53.156 A:middle
background and only update the

00:33:53.156 --> 00:33:55.126 A:middle
table view when finished after

00:33:55.126 --> 00:33:55.566 A:middle
launch.

00:33:58.136 --> 00:33:58.916 A:middle
Let's move on.

00:33:59.696 --> 00:34:01.686 A:middle
Back to the trace, last but not

00:33:59.696 --> 00:34:01.686 A:middle
Back to the trace, last but not

00:34:01.686 --> 00:34:02.006 A:middle
least.

00:34:02.396 --> 00:34:05.046 A:middle
The last phase is our first

00:34:05.046 --> 00:34:06.256 A:middle
frame rendering.

00:34:07.846 --> 00:34:11.126 A:middle
Notice that this phase took 951

00:34:11.126 --> 00:34:12.656 A:middle
milliseconds, which is very

00:34:12.656 --> 00:34:14.065 A:middle
long, considering that this is

00:34:14.065 --> 00:34:15.866 A:middle
only responsible for doing the

00:34:15.866 --> 00:34:17.556 A:middle
layout work and the rendering of

00:34:17.556 --> 00:34:18.186 A:middle
our first frame.

00:34:19.606 --> 00:34:22.656 A:middle
Now let's taking a deeper dive,

00:34:22.856 --> 00:34:25.755 A:middle
it points us to the

00:34:25.755 --> 00:34:28.206 A:middle
StarTableviewController, and

00:34:29.906 --> 00:34:31.896 A:middle
looking at the detailed stack

00:34:31.936 --> 00:34:36.916 A:middle
trace, we see a lot of work and

00:34:36.916 --> 00:34:39.755 A:middle
a CellForRowAt callback, which

00:34:39.755 --> 00:34:40.936 A:middle
is responsible for doing the

00:34:40.936 --> 00:34:42.485 A:middle
layout work of the cells.

00:34:42.485 --> 00:34:45.335 A:middle
let's go ahead and expand that.

00:34:46.216 --> 00:34:49.136 A:middle
As we expand the stack trace, it

00:34:49.176 --> 00:34:51.396 A:middle
points us to a lot of

00:34:51.396 --> 00:34:53.815 A:middle
initialization work for the

00:34:53.815 --> 00:34:56.565 A:middle
StarDetailView controller which

00:34:56.565 --> 00:34:58.746 A:middle
took 882 milliseconds on the

00:34:58.746 --> 00:34:59.386 A:middle
CPU.

00:34:59.466 --> 00:35:01.436 A:middle
So, at this point, we've

00:34:59.466 --> 00:35:01.436 A:middle
So, at this point, we've

00:35:01.436 --> 00:35:02.586 A:middle
identified this is pretty much

00:35:02.586 --> 00:35:02.976 A:middle
the bottleneck here.

00:35:05.046 --> 00:35:06.626 A:middle
Let's take a look at our code.

00:35:06.676 --> 00:35:10.856 A:middle
Now looking at the table view

00:35:10.856 --> 00:35:12.416 A:middle
controller within the

00:35:12.556 --> 00:35:15.746 A:middle
CellforRowAt callback, we create

00:35:15.746 --> 00:35:17.406 A:middle
the cells using our custom cell,

00:35:18.576 --> 00:35:20.816 A:middle
and at the same time, we put in

00:35:20.816 --> 00:35:22.976 A:middle
a speculative optimization which

00:35:22.976 --> 00:35:25.226 A:middle
is to pre-warm and cache the

00:35:25.226 --> 00:35:26.846 A:middle
DetailViewControllers of the

00:35:27.036 --> 00:35:29.516 A:middle
DetailVew, as we do the layout

00:35:29.516 --> 00:35:29.806 A:middle
work.

00:35:30.306 --> 00:35:31.686 A:middle
This is with the hopes to

00:35:32.046 --> 00:35:33.806 A:middle
streamline the transition from a

00:35:33.806 --> 00:35:35.266 A:middle
table view to a detail view.

00:35:35.836 --> 00:35:38.456 A:middle
But as we saw in the trace, this

00:35:38.846 --> 00:35:40.126 A:middle
doesn't create a high cost.

00:35:41.196 --> 00:35:43.156 A:middle
Now stepping back a little bit,

00:35:43.306 --> 00:35:44.296 A:middle
when you think about it, the

00:35:44.296 --> 00:35:45.816 A:middle
detailed view doesn't really

00:35:45.816 --> 00:35:47.356 A:middle
make sense for our first frame.

00:35:47.816 --> 00:35:49.126 A:middle
It only makes sense when the

00:35:49.126 --> 00:35:50.376 A:middle
user taps on a cell.

00:35:51.276 --> 00:35:53.886 A:middle
So, let's go ahead and defer

00:35:53.886 --> 00:35:54.336 A:middle
that work.

00:35:57.356 --> 00:35:58.486 A:middle
Where should we defer it to?

00:35:59.216 --> 00:36:01.566 A:middle
Perhaps the didSelectRowAt

00:35:59.216 --> 00:36:01.566 A:middle
Perhaps the didSelectRowAt

00:36:01.566 --> 00:36:06.606 A:middle
callback, which is invoked when

00:36:06.996 --> 00:36:07.966 A:middle
the user taps on a cell.

00:36:09.336 --> 00:36:11.156 A:middle
So, at this point, we've made

00:36:11.276 --> 00:36:12.526 A:middle
several enhancements, or

00:36:12.526 --> 00:36:14.316 A:middle
optimizations, to Star Searcher.

00:36:14.466 --> 00:36:15.616 A:middle
So, let's go ahead and

00:36:15.616 --> 00:36:15.976 A:middle
re-profile it.

00:36:23.086 --> 00:36:26.656 A:middle
Now one thing to note here is

00:36:26.656 --> 00:36:29.646 A:middle
that as you make incremental

00:36:29.646 --> 00:36:32.046 A:middle
changes, you should consistently

00:36:32.046 --> 00:36:34.076 A:middle
remeasure and re-profile as you

00:36:34.076 --> 00:36:35.006 A:middle
make progress.

00:36:35.356 --> 00:36:37.676 A:middle
That way, you can actually

00:36:37.746 --> 00:36:39.916 A:middle
understand the exact impact of

00:36:40.176 --> 00:36:41.776 A:middle
your incremental change set.

00:36:42.046 --> 00:36:43.416 A:middle
But for the sake of his demo,

00:36:43.696 --> 00:36:44.916 A:middle
we've actually aggregated all

00:36:44.916 --> 00:36:46.926 A:middle
the changes into one for the

00:36:46.926 --> 00:36:49.566 A:middle
sake of time and boom.

00:36:49.566 --> 00:36:51.086 A:middle
There's a little UI glitch, but

00:36:51.086 --> 00:36:54.016 A:middle
we can immediately see that our

00:36:54.406 --> 00:36:55.836 A:middle
launch is under 500

00:36:55.836 --> 00:36:56.456 A:middle
milliseconds.

00:36:57.186 --> 00:37:02.346 A:middle
Now, as I said earlier, the

00:36:57.186 --> 00:37:02.346 A:middle
Now, as I said earlier, the

00:37:02.346 --> 00:37:04.296 A:middle
profiling mechanism does come

00:37:04.296 --> 00:37:05.376 A:middle
with a cost of its own.

00:37:05.636 --> 00:37:06.896 A:middle
So, to get a better

00:37:06.896 --> 00:37:08.816 A:middle
understanding of what our users

00:37:08.816 --> 00:37:11.486 A:middle
would experience, let's go ahead

00:37:12.476 --> 00:37:15.656 A:middle
and leverage the new XCTest APIs

00:37:16.066 --> 00:37:17.626 A:middle
to measure our launch

00:37:17.626 --> 00:37:18.886 A:middle
performance within our test.

00:37:20.246 --> 00:37:21.986 A:middle
With just a few lines of code,

00:37:22.176 --> 00:37:23.886 A:middle
we can actually integrate launch

00:37:23.886 --> 00:37:25.876 A:middle
performance tests, or any

00:37:25.876 --> 00:37:27.136 A:middle
performance tests, with an

00:37:27.136 --> 00:37:27.766 A:middle
XCTest.

00:37:28.306 --> 00:37:31.946 A:middle
Let's go ahead and kick this

00:37:31.996 --> 00:37:32.446 A:middle
off.

00:37:33.886 --> 00:37:37.486 A:middle
Now at this point, XCTest will

00:37:37.486 --> 00:37:39.636 A:middle
do one throwaway launch attempt,

00:37:39.846 --> 00:37:41.936 A:middle
which cancels out the variance

00:37:42.536 --> 00:37:44.516 A:middle
that would come about by cold

00:37:44.516 --> 00:37:44.946 A:middle
launches.

00:37:45.466 --> 00:37:47.116 A:middle
Afterwards, it will do the

00:37:47.116 --> 00:37:48.676 A:middle
specified number of iterations

00:37:48.816 --> 00:37:51.326 A:middle
or by default five iterations of

00:37:51.436 --> 00:37:53.696 A:middle
launches and measure the time it

00:37:53.736 --> 00:37:54.016 A:middle
took.

00:37:54.856 --> 00:37:57.176 A:middle
Afterwards, it will produce a

00:37:57.176 --> 00:38:01.986 A:middle
nice statistics of that data.

00:37:57.176 --> 00:38:01.986 A:middle
nice statistics of that data.

00:38:02.186 --> 00:38:04.116 A:middle
It's going to take a few minutes

00:38:04.116 --> 00:38:06.236 A:middle
for the test to complete, and

00:38:06.236 --> 00:38:09.986 A:middle
now we've taken the launch of

00:38:10.106 --> 00:38:12.696 A:middle
Star Searcher from 2.5 seconds

00:38:13.066 --> 00:38:16.536 A:middle
to just over 300 milliseconds.

00:38:17.031 --> 00:38:19.031 A:middle
[ Applause ]

00:38:19.046 --> 00:38:21.346 A:middle
And to wrap up the demo, I'd

00:38:21.346 --> 00:38:22.136 A:middle
like to show you what this

00:38:22.686 --> 00:38:23.726 A:middle
actually looks like on the UI.

00:38:24.606 --> 00:38:26.276 A:middle
So, let's make sure we kill Star

00:38:26.276 --> 00:38:26.756 A:middle
Searcher.

00:38:27.366 --> 00:38:29.126 A:middle
That was quick.

00:38:30.516 --> 00:38:33.500 A:middle
[ Applause ]

00:38:38.056 --> 00:38:38.726 A:middle
Thank you.

00:38:39.056 --> 00:38:39.946 A:middle
Back to you, Spencer.

00:38:41.516 --> 00:38:45.376 A:middle
[ Applause ]

00:38:45.876 --> 00:38:47.066 A:middle
&gt;&gt; Thanks, Dan, for that awesome

00:38:47.066 --> 00:38:49.076 A:middle
demo on how to use Xcode,

00:38:49.486 --> 00:38:51.746 A:middle
Instruments, AppLaunchTemplate

00:38:52.006 --> 00:38:53.276 A:middle
to improve our app launch

00:38:53.276 --> 00:38:53.766 A:middle
experience.

00:38:54.526 --> 00:38:57.226 A:middle
So, we realize that in your code

00:38:57.226 --> 00:38:59.816 A:middle
bases, you're not going to find

00:38:59.816 --> 00:39:01.766 A:middle
just a few couple places in your

00:38:59.816 --> 00:39:01.766 A:middle
just a few couple places in your

00:39:01.766 --> 00:39:03.356 A:middle
code that you can fix with just

00:39:03.356 --> 00:39:05.236 A:middle
a few lines and get such

00:39:05.356 --> 00:39:06.516 A:middle
substantial improvements.

00:39:07.546 --> 00:39:08.386 A:middle
It's more likely that you're

00:39:08.386 --> 00:39:10.356 A:middle
going to have to find a bunch of

00:39:10.356 --> 00:39:12.396 A:middle
5 to 10 milliseconds wins and

00:39:12.396 --> 00:39:13.586 A:middle
then stack all those together.

00:39:14.816 --> 00:39:15.866 A:middle
We want to let you know that

00:39:15.866 --> 00:39:16.396 A:middle
we've got your back.

00:39:17.746 --> 00:39:20.146 A:middle
We've been making a ton of iOS

00:39:20.146 --> 00:39:21.636 A:middle
optimizations to improve your

00:39:21.636 --> 00:39:23.146 A:middle
app's launch and help you reach

00:39:23.146 --> 00:39:26.076 A:middle
your goal with very little to no

00:39:26.076 --> 00:39:27.016 A:middle
adoption from your side.

00:39:28.016 --> 00:39:29.556 A:middle
I want to call on a few in

00:39:29.556 --> 00:39:30.396 A:middle
particular.

00:39:30.956 --> 00:39:34.766 A:middle
As mentioned before, dyld3

00:39:34.856 --> 00:39:36.256 A:middle
brings caching of your runtime

00:39:36.256 --> 00:39:38.056 A:middle
dependencies to your apps, which

00:39:38.056 --> 00:39:39.276 A:middle
you saw in the demo, that

00:39:39.426 --> 00:39:40.976 A:middle
provided a huge improvement.

00:39:41.496 --> 00:39:43.606 A:middle
The Scheduler has also been

00:39:43.606 --> 00:39:45.626 A:middle
optimized to help prioritize the

00:39:45.626 --> 00:39:47.236 A:middle
work that happens during launch.

00:39:48.026 --> 00:39:50.126 A:middle
We also put Auto Layout and

00:39:50.126 --> 00:39:51.646 A:middle
Objective-C under the microscope

00:39:51.956 --> 00:39:52.756 A:middle
and made a bunch of

00:39:52.756 --> 00:39:53.736 A:middle
optimizations there.

00:39:54.896 --> 00:39:56.526 A:middle
And then finally, we have

00:39:56.526 --> 00:39:57.566 A:middle
exciting changes to app

00:39:57.766 --> 00:39:59.076 A:middle
packaging coming later this

00:39:59.076 --> 00:39:59.386 A:middle
year.

00:40:00.436 --> 00:40:02.216 A:middle
We think that altogether these

00:40:02.216 --> 00:40:03.786 A:middle
changes should result in a huge

00:40:03.786 --> 00:40:05.726 A:middle
improvement your apps with very

00:40:05.726 --> 00:40:09.176 A:middle
little to no adoption.

00:40:09.316 --> 00:40:10.956 A:middle
So, let's wrap things up with

00:40:10.956 --> 00:40:12.316 A:middle
some tips and tricks on how to

00:40:12.316 --> 00:40:13.266 A:middle
make sure your app stays

00:40:13.306 --> 00:40:14.716 A:middle
delightful once you've done all

00:40:14.716 --> 00:40:14.976 A:middle
this work.

00:40:19.076 --> 00:40:20.276 A:middle
First of all, don't let

00:40:20.276 --> 00:40:21.546 A:middle
performance be an afterthought.

00:40:22.326 --> 00:40:24.136 A:middle
You should start working on it

00:40:24.136 --> 00:40:25.566 A:middle
and thinking about it at the

00:40:25.696 --> 00:40:27.036 A:middle
beginning of every bug fix, at

00:40:27.736 --> 00:40:28.366 A:middle
the beginning of every

00:40:28.366 --> 00:40:30.316 A:middle
re-factor, and the beginning of

00:40:30.316 --> 00:40:30.956 A:middle
every feature.

00:40:32.286 --> 00:40:33.746 A:middle
This is because it's incredibly

00:40:33.746 --> 00:40:35.316 A:middle
easy to introduce regression,

00:40:35.756 --> 00:40:37.536 A:middle
especially a little one like 2

00:40:37.536 --> 00:40:38.216 A:middle
milliseconds.

00:40:39.026 --> 00:40:40.616 A:middle
The problem is these little ones

00:40:40.616 --> 00:40:43.026 A:middle
add up to a big problem, and if

00:40:43.026 --> 00:40:43.556 A:middle
you don't address them

00:40:43.556 --> 00:40:45.576 A:middle
immediately, it becomes very

00:40:45.576 --> 00:40:46.336 A:middle
hard to find them all.

00:40:46.336 --> 00:40:49.536 A:middle
In order to do that, to detect

00:40:49.536 --> 00:40:51.096 A:middle
those regressions, you should be

00:40:51.096 --> 00:40:52.926 A:middle
plotting your app's launch over

00:40:52.926 --> 00:40:54.356 A:middle
time and running tests

00:40:54.356 --> 00:40:54.896 A:middle
regularly.

00:40:55.646 --> 00:40:56.546 A:middle
This will ensure that you're

00:40:56.546 --> 00:40:58.016 A:middle
meeting your target and that you

00:40:58.016 --> 00:40:59.446 A:middle
immediately know if you've

00:40:59.446 --> 00:41:03.896 A:middle
regressed from that target.

00:40:59.446 --> 00:41:03.896 A:middle
regressed from that target.

00:41:03.986 --> 00:41:05.946 A:middle
You should also take a look at

00:41:05.946 --> 00:41:08.416 A:middle
the new Xcode organizer, which

00:41:08.816 --> 00:41:09.736 A:middle
lets you know how your app

00:41:09.776 --> 00:41:10.586 A:middle
performs in the field.

00:41:11.666 --> 00:41:13.366 A:middle
In iOS 13, for users that have

00:41:13.366 --> 00:41:15.756 A:middle
opted in, power and performance

00:41:15.756 --> 00:41:16.976 A:middle
metrics will be gathered about

00:41:16.976 --> 00:41:17.256 A:middle
your app.

00:41:18.296 --> 00:41:19.816 A:middle
They will then be aggregated

00:41:19.816 --> 00:41:21.456 A:middle
over 24-hour periods and sent

00:41:21.456 --> 00:41:22.886 A:middle
back to your organizer where you

00:41:22.886 --> 00:41:23.936 A:middle
can view them in the form of

00:41:23.936 --> 00:41:25.936 A:middle
histograms by software version

00:41:25.936 --> 00:41:26.796 A:middle
and device version.

00:41:28.136 --> 00:41:29.726 A:middle
However, if you desire a little

00:41:29.726 --> 00:41:31.026 A:middle
bit more control over that data,

00:41:31.916 --> 00:41:33.236 A:middle
you can adopt MetricKit.

00:41:34.636 --> 00:41:36.406 A:middle
MetricKit allows you to specify

00:41:36.616 --> 00:41:38.056 A:middle
custom power and performance

00:41:38.056 --> 00:41:38.386 A:middle
metrics.

00:41:39.886 --> 00:41:41.236 A:middle
Now like the organizer, this

00:41:41.236 --> 00:41:42.486 A:middle
data will be gathered up and

00:41:42.486 --> 00:41:44.046 A:middle
aggregated over 24-hour periods

00:41:44.046 --> 00:41:46.226 A:middle
of time and then delivered back

00:41:46.266 --> 00:41:48.586 A:middle
to you through a delegate method

00:41:48.586 --> 00:41:49.276 A:middle
in your app.

00:41:50.066 --> 00:41:51.186 A:middle
From there, you're free to

00:41:51.186 --> 00:41:52.686 A:middle
handle the data as you see fit.

00:41:53.696 --> 00:41:54.976 A:middle
To learn more about this, we

00:41:54.976 --> 00:41:55.846 A:middle
recommend you check out

00:41:55.996 --> 00:41:57.066 A:middle
Improving Battery Life and

00:41:57.066 --> 00:41:59.846 A:middle
Performance from WW 2019.

00:42:03.096 --> 00:42:05.566 A:middle
So, in summary, we'd love for

00:42:05.756 --> 00:42:07.736 A:middle
you today to start understanding

00:42:07.736 --> 00:42:09.146 A:middle
your app's launch with the new

00:42:09.146 --> 00:42:10.596 A:middle
AppLauchTemplate in Xcode

00:42:10.596 --> 00:42:11.116 A:middle
Instruments.

00:42:11.916 --> 00:42:12.616 A:middle
See if you can find

00:42:12.616 --> 00:42:14.316 A:middle
opportunities to minimize,

00:42:14.926 --> 00:42:16.816 A:middle
prioritize, and optimize your

00:42:17.536 --> 00:42:17.626 A:middle
work.

00:42:18.836 --> 00:42:21.036 A:middle
Next, although well intended,

00:42:21.276 --> 00:42:22.786 A:middle
not all optimizations work out,

00:42:23.586 --> 00:42:24.596 A:middle
such as the pre-warming

00:42:24.596 --> 00:42:26.096 A:middle
DetailView controllers that Dan

00:42:26.096 --> 00:42:26.936 A:middle
addressed in his demo.

00:42:27.936 --> 00:42:30.026 A:middle
So, be sure to measure, not

00:42:30.026 --> 00:42:32.596 A:middle
estimate, performance whenever

00:42:32.596 --> 00:42:33.406 A:middle
you're making changes.

00:42:34.026 --> 00:42:35.646 A:middle
Again, it's very easy to

00:42:35.646 --> 00:42:36.906 A:middle
introduce regressions

00:42:36.906 --> 00:42:37.566 A:middle
unintentionally.

00:42:38.956 --> 00:42:40.496 A:middle
Finally, you should be tracking

00:42:40.496 --> 00:42:41.916 A:middle
your performance in all phases

00:42:41.916 --> 00:42:42.566 A:middle
of development.

00:42:43.576 --> 00:42:44.696 A:middle
This means utilizing the new

00:42:44.696 --> 00:42:46.426 A:middle
XCTest app launch measurements

00:42:47.006 --> 00:42:48.826 A:middle
on a variety of devices and

00:42:48.826 --> 00:42:50.156 A:middle
possibly integrating this with

00:42:50.156 --> 00:42:52.006 A:middle
continuous integration.

00:42:53.176 --> 00:42:54.216 A:middle
This will ensure that you're

00:42:54.216 --> 00:42:55.576 A:middle
consistently delivering a

00:42:55.576 --> 00:42:57.356 A:middle
delightful app launch to all of

00:42:57.356 --> 00:42:58.996 A:middle
your users on all of their

00:42:58.996 --> 00:42:59.546 A:middle
devices.

00:43:02.206 --> 00:43:03.896 A:middle
For more information, please

00:43:03.896 --> 00:43:04.646 A:middle
view the talks that we

00:43:04.646 --> 00:43:06.806 A:middle
referenced today, and have a

00:43:06.806 --> 00:43:07.756 A:middle
great rest of your Friday

00:43:07.756 --> 00:43:08.106 A:middle
afternoon.

00:43:08.416 --> 00:43:08.806 A:middle
Thank you.

00:43:09.516 --> 00:43:12.500 A:middle
[ Applause ]
