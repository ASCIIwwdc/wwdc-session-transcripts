WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:15.606 A:middle
[ Applause ]

00:00:16.106 --> 00:00:18.036 A:middle
&gt;&gt; Hello and good afternoon.

00:00:19.086 --> 00:00:20.006 A:middle
I'm Chris Dreessen.

00:00:20.246 --> 00:00:21.716 A:middle
I work on the Cocoa Frameworks.

00:00:22.076 --> 00:00:22.966 A:middle
And we're going to be talking

00:00:22.966 --> 00:00:24.836 A:middle
about what's new in AppKit this

00:00:24.836 --> 00:00:25.036 A:middle
year.

00:00:26.026 --> 00:00:27.796 A:middle
So, let's dive in.

00:00:28.236 --> 00:00:30.816 A:middle
We have a lot of functionality.

00:00:30.886 --> 00:00:32.406 A:middle
We have some additions to

00:00:32.406 --> 00:00:34.056 A:middle
NSColor, some additions to

00:00:34.056 --> 00:00:34.646 A:middle
NSScreen.

00:00:35.086 --> 00:00:36.746 A:middle
We have a whole grab bag of

00:00:36.746 --> 00:00:38.976 A:middle
features to help you with text

00:00:38.976 --> 00:00:39.686 A:middle
and fonts.

00:00:40.356 --> 00:00:41.916 A:middle
We're going to do a little pub

00:00:41.916 --> 00:00:43.286 A:middle
crawl right here in this

00:00:43.286 --> 00:00:43.776 A:middle
session.

00:00:43.806 --> 00:00:44.916 A:middle
We're going to talk about

00:00:44.916 --> 00:00:46.456 A:middle
toolbar and Touch Bar and

00:00:46.456 --> 00:00:47.026 A:middle
sidebar.

00:00:47.026 --> 00:00:49.996 A:middle
And then we're going to talk

00:00:49.996 --> 00:00:51.446 A:middle
about some new control

00:00:51.446 --> 00:00:52.936 A:middle
functionality in AppKit and

00:00:52.936 --> 00:00:54.056 A:middle
macOS 10.15.

00:00:54.266 --> 00:00:55.956 A:middle
And we'll wrap up our section on

00:00:55.956 --> 00:00:58.946 A:middle
AppKit by talking about NSEvent.

00:00:58.946 --> 00:01:00.836 A:middle
We'll take a small jump and go

00:00:58.946 --> 00:01:00.836 A:middle
We'll take a small jump and go

00:01:00.836 --> 00:01:02.226 A:middle
into some foundation features

00:01:02.486 --> 00:01:03.606 A:middle
including some geometry

00:01:03.606 --> 00:01:05.105 A:middle
enhancements and new formatters

00:01:05.226 --> 00:01:06.706 A:middle
to make localization easier than

00:01:06.706 --> 00:01:07.006 A:middle
ever.

00:01:07.516 --> 00:01:09.186 A:middle
And then we'll wrap things up

00:01:09.186 --> 00:01:10.246 A:middle
with some notes on system

00:01:10.246 --> 00:01:14.006 A:middle
extensions in macOS 10.15.

00:01:14.136 --> 00:01:15.846 A:middle
So, before we do that, though,

00:01:15.846 --> 00:01:18.616 A:middle
let's go ahead and address the

00:01:18.616 --> 00:01:18.996 A:middle
big thing.

00:01:18.996 --> 00:01:22.586 A:middle
In macOS 10.15, AppKit is not

00:01:22.586 --> 00:01:24.016 A:middle
the only UI framework on the

00:01:24.016 --> 00:01:24.546 A:middle
system.

00:01:24.896 --> 00:01:26.676 A:middle
We have two new UI frameworks

00:01:26.676 --> 00:01:27.296 A:middle
joining us.

00:01:28.246 --> 00:01:30.116 A:middle
So, one of these you've probably

00:01:30.116 --> 00:01:31.356 A:middle
already heard of and that's

00:01:31.356 --> 00:01:31.706 A:middle
UIKit.

00:01:31.706 --> 00:01:35.156 A:middle
In macOS 10.15, you can

00:01:35.156 --> 00:01:37.416 A:middle
recompile your apps and run your

00:01:37.476 --> 00:01:38.546 A:middle
iPad apps on the Mac.

00:01:39.206 --> 00:01:40.766 A:middle
And if you have a

00:01:40.766 --> 00:01:42.556 A:middle
well-maintained AppKit app, this

00:01:42.556 --> 00:01:44.376 A:middle
is probably not going to be very

00:01:44.376 --> 00:01:45.236 A:middle
interesting for you.

00:01:45.986 --> 00:01:48.446 A:middle
But, if you have an iPad app

00:01:48.446 --> 00:01:49.706 A:middle
you've never brought to the Mac

00:01:49.706 --> 00:01:50.976 A:middle
or you've had an iPad app you've

00:01:50.976 --> 00:01:52.236 A:middle
been investing a lot in the last

00:01:52.236 --> 00:01:53.626 A:middle
decade, not so much the Mac,

00:01:53.946 --> 00:01:55.436 A:middle
this could be very neat.

00:01:55.616 --> 00:01:58.046 A:middle
You will still use AppKit to add

00:01:58.046 --> 00:01:59.306 A:middle
the finishing touches to your

00:01:59.306 --> 00:02:00.446 A:middle
UIKit app for things like

00:01:59.306 --> 00:02:00.446 A:middle
UIKit app for things like

00:02:00.446 --> 00:02:02.006 A:middle
toolbar and Touch Bar support.

00:02:02.616 --> 00:02:05.026 A:middle
But we think that can be very

00:02:05.026 --> 00:02:05.446 A:middle
interesting.

00:02:05.446 --> 00:02:07.936 A:middle
The other new framework-- and

00:02:07.936 --> 00:02:09.006 A:middle
we're really excited about

00:02:09.006 --> 00:02:10.366 A:middle
this-- is SwiftUI.

00:02:11.126 --> 00:02:13.206 A:middle
And SwiftUI is this neat

00:02:13.206 --> 00:02:15.206 A:middle
declarative way of describing

00:02:15.206 --> 00:02:16.536 A:middle
your user interfaces and the

00:02:16.536 --> 00:02:18.366 A:middle
transitions between them, ways

00:02:18.366 --> 00:02:19.726 A:middle
of binding them to your model

00:02:19.726 --> 00:02:20.856 A:middle
data.

00:02:20.856 --> 00:02:22.656 A:middle
And this we think is a great way

00:02:22.656 --> 00:02:23.496 A:middle
for making UIs.

00:02:23.496 --> 00:02:25.066 A:middle
It's Swift native and supports

00:02:25.066 --> 00:02:26.136 A:middle
all sorts of Swift language

00:02:26.136 --> 00:02:27.166 A:middle
features that we really like.

00:02:27.876 --> 00:02:29.236 A:middle
Again, this is something you

00:02:29.236 --> 00:02:30.236 A:middle
will use in conjunction with

00:02:30.236 --> 00:02:30.686 A:middle
AppKit.

00:02:30.686 --> 00:02:31.876 A:middle
You will embed it in view

00:02:31.876 --> 00:02:33.326 A:middle
hierarchies potentially all over

00:02:33.326 --> 00:02:33.816 A:middle
the place.

00:02:33.986 --> 00:02:35.956 A:middle
So, there are sessions about of

00:02:35.956 --> 00:02:37.066 A:middle
these frameworks all throughout

00:02:37.066 --> 00:02:38.156 A:middle
the week and we think you'll

00:02:38.156 --> 00:02:40.626 A:middle
enjoy them.

00:02:40.816 --> 00:02:42.386 A:middle
On to AppKit.

00:02:42.386 --> 00:02:45.966 A:middle
So, in macOS 10.15, we have some

00:02:45.966 --> 00:02:47.566 A:middle
new system colors in NSColor.

00:02:47.566 --> 00:02:49.436 A:middle
We have teal and indigo.

00:02:49.576 --> 00:02:51.786 A:middle
These are system colors which

00:02:51.786 --> 00:02:53.056 A:middle
means they're actually dynamic.

00:02:53.116 --> 00:02:54.536 A:middle
Depending on which appearance

00:02:54.536 --> 00:02:56.146 A:middle
you use they can look

00:02:56.146 --> 00:02:56.586 A:middle
differently.

00:02:57.666 --> 00:02:59.806 A:middle
But we think these are great

00:02:59.806 --> 00:03:00.916 A:middle
colors and you'll enjoy using

00:02:59.806 --> 00:03:00.916 A:middle
colors and you'll enjoy using

00:03:00.916 --> 00:03:01.586 A:middle
them in your apps.

00:03:02.966 --> 00:03:04.326 A:middle
We also have an under the hood

00:03:04.326 --> 00:03:05.816 A:middle
change in NSColor we want to

00:03:05.816 --> 00:03:06.546 A:middle
talk about.

00:03:06.736 --> 00:03:08.606 A:middle
And that's-- that NSColor is now

00:03:08.606 --> 00:03:10.486 A:middle
using the tagged pointer system

00:03:10.676 --> 00:03:13.116 A:middle
we also use for NSNumber and

00:03:13.246 --> 00:03:13.796 A:middle
NSString.

00:03:13.836 --> 00:03:15.486 A:middle
And what is a tagged pointer?

00:03:15.936 --> 00:03:18.236 A:middle
Well, normally for NSColor, we

00:03:18.236 --> 00:03:19.216 A:middle
would store the various

00:03:19.216 --> 00:03:20.396 A:middle
component values or other

00:03:20.396 --> 00:03:22.116 A:middle
information as eye bars in an

00:03:22.116 --> 00:03:23.226 A:middle
allocated object.

00:03:23.226 --> 00:03:25.216 A:middle
And with tagged pointers, we

00:03:25.216 --> 00:03:26.126 A:middle
instead condense that

00:03:26.126 --> 00:03:27.536 A:middle
information down to a smaller

00:03:27.536 --> 00:03:29.176 A:middle
number of bits and store in the

00:03:29.176 --> 00:03:29.916 A:middle
pointer itself.

00:03:30.296 --> 00:03:31.546 A:middle
So, there's no separate

00:03:31.546 --> 00:03:32.146 A:middle
allocation.

00:03:32.866 --> 00:03:34.286 A:middle
If you had code that was very

00:03:34.286 --> 00:03:35.376 A:middle
heavily allocating or

00:03:35.376 --> 00:03:37.086 A:middle
deallocating NSColors, you're

00:03:37.086 --> 00:03:38.186 A:middle
going to notice a performance

00:03:38.186 --> 00:03:39.616 A:middle
one from this, so we're excited

00:03:39.616 --> 00:03:39.786 A:middle
here.

00:03:41.446 --> 00:03:43.426 A:middle
Generally, that's going to be an

00:03:43.426 --> 00:03:45.016 A:middle
invisible change for you but

00:03:45.016 --> 00:03:46.176 A:middle
there is a case I want to point

00:03:47.146 --> 00:03:47.426 A:middle
out.

00:03:47.426 --> 00:03:48.746 A:middle
If you're accessing a derived

00:03:48.816 --> 00:03:49.856 A:middle
property of the color, for

00:03:49.856 --> 00:03:52.296 A:middle
example the CGColor, with the

00:03:52.296 --> 00:03:54.256 A:middle
non-tagged version, that could

00:03:54.256 --> 00:03:55.666 A:middle
be cached as an eye bar in the

00:03:55.666 --> 00:03:57.036 A:middle
color and it's possible the

00:03:57.036 --> 00:03:58.966 A:middle
CGColor would live as long as

00:03:58.966 --> 00:03:59.466 A:middle
the NSColor.

00:04:00.446 --> 00:04:01.786 A:middle
In the snippet we have on

00:04:01.786 --> 00:04:04.086 A:middle
screen, you could see that we

00:04:04.086 --> 00:04:05.496 A:middle
passed that CGColor to a

00:04:05.496 --> 00:04:07.376 A:middle
ContextSetFillColorWithColor,

00:04:07.376 --> 00:04:09.096 A:middle
and that would have worked OK in

00:04:09.096 --> 00:04:09.576 A:middle
the past.

00:04:10.166 --> 00:04:11.836 A:middle
With tagged pointers, using it

00:04:11.836 --> 00:04:13.176 A:middle
outside the autorelease pool is

00:04:13.176 --> 00:04:14.216 A:middle
potentially hazardous.

00:04:14.216 --> 00:04:15.806 A:middle
So, it'd be a good hygiene not

00:04:15.806 --> 00:04:17.266 A:middle
to do that anyway but something

00:04:17.266 --> 00:04:21.096 A:middle
to be aware of just in case.

00:04:22.226 --> 00:04:24.886 A:middle
So, a lot of us have used color

00:04:24.886 --> 00:04:25.196 A:middle
panel.

00:04:25.936 --> 00:04:27.986 A:middle
And there is a near and dear to

00:04:27.986 --> 00:04:29.726 A:middle
us eyedropper tool in the color

00:04:29.726 --> 00:04:31.276 A:middle
panel that lets you click it and

00:04:31.276 --> 00:04:32.996 A:middle
bring up a magnifier like this

00:04:33.186 --> 00:04:34.706 A:middle
and then select a specific color

00:04:34.706 --> 00:04:36.836 A:middle
on screen to read the RGB values

00:04:36.836 --> 00:04:36.986 A:middle
of.

00:04:37.136 --> 00:04:40.686 A:middle
In macOS 10.15, we're exposing

00:04:40.686 --> 00:04:42.076 A:middle
this functionality to you too

00:04:42.436 --> 00:04:43.526 A:middle
with a new class called

00:04:43.626 --> 00:04:44.546 A:middle
NSColorSampler.

00:04:45.306 --> 00:04:47.096 A:middle
So, NSColorSampler is very

00:04:47.096 --> 00:04:47.476 A:middle
simple.

00:04:47.586 --> 00:04:49.206 A:middle
It has a single class method on

00:04:49.206 --> 00:04:50.226 A:middle
it called Show.

00:04:50.736 --> 00:04:52.246 A:middle
You pass a block to show and we

00:04:52.246 --> 00:04:53.286 A:middle
will call you back with the

00:04:53.286 --> 00:04:54.736 A:middle
selected color or nil if the

00:04:54.736 --> 00:04:56.466 A:middle
user canceled out of this.

00:04:56.746 --> 00:04:58.456 A:middle
And we're really excited to

00:04:58.456 --> 00:04:59.466 A:middle
share our implementation with

00:04:59.466 --> 00:04:59.816 A:middle
you too.

00:04:59.996 --> 00:05:01.606 A:middle
If you have your own

00:04:59.996 --> 00:05:01.606 A:middle
If you have your own

00:05:01.606 --> 00:05:02.896 A:middle
implementation something to be

00:05:02.896 --> 00:05:05.986 A:middle
aware of in macOS 10.15 is that

00:05:05.986 --> 00:05:07.496 A:middle
Screen Recording is going to

00:05:07.546 --> 00:05:08.856 A:middle
prompt for user permission.

00:05:09.066 --> 00:05:10.876 A:middle
And this is something that

00:05:10.876 --> 00:05:12.096 A:middle
doesn't happen if you use

00:05:12.236 --> 00:05:13.636 A:middle
NSColorSampler itself.

00:05:15.976 --> 00:05:18.846 A:middle
There's another NSColor API that

00:05:18.846 --> 00:05:19.916 A:middle
we find incredibly useful.

00:05:19.916 --> 00:05:21.306 A:middle
We call it the Dynamic Color

00:05:21.306 --> 00:05:21.796 A:middle
Provider.

00:05:22.296 --> 00:05:23.636 A:middle
And it's really just a new

00:05:23.636 --> 00:05:25.246 A:middle
initializer on NSColor.

00:05:25.496 --> 00:05:27.236 A:middle
It takes two arguments.

00:05:27.606 --> 00:05:28.846 A:middle
One of these arguments is a

00:05:28.846 --> 00:05:31.086 A:middle
block and that block accepts an

00:05:31.086 --> 00:05:31.726 A:middle
NSAppearance.

00:05:32.776 --> 00:05:34.316 A:middle
When we go to resolve the color

00:05:34.526 --> 00:05:35.596 A:middle
either because we're drawing it

00:05:35.596 --> 00:05:37.036 A:middle
in a bitmap context or writing

00:05:37.036 --> 00:05:38.396 A:middle
it to a file or using it as a

00:05:38.396 --> 00:05:39.516 A:middle
layer background color, we're

00:05:39.976 --> 00:05:41.696 A:middle
going to call this block with

00:05:41.696 --> 00:05:42.526 A:middle
whatever appearance is

00:05:42.526 --> 00:05:43.636 A:middle
appropriate at the time.

00:05:44.386 --> 00:05:46.496 A:middle
In our snippet on screen, we use

00:05:46.496 --> 00:05:47.736 A:middle
the NSAppearance bestMatch

00:05:47.736 --> 00:05:49.066 A:middle
method to tell us whether the

00:05:49.066 --> 00:05:50.926 A:middle
requested appearance was more

00:05:50.926 --> 00:05:53.596 A:middle
like aqua or more like darkAqua.

00:05:53.596 --> 00:05:55.066 A:middle
And we have hard-coded colors

00:05:55.066 --> 00:05:56.056 A:middle
for each of those cases.

00:05:57.026 --> 00:05:58.326 A:middle
This can be very useful where

00:05:58.326 --> 00:05:58.956 A:middle
you want to have some

00:05:58.956 --> 00:06:00.336 A:middle
programatic decisions and

00:05:58.956 --> 00:06:00.336 A:middle
programatic decisions and

00:06:00.336 --> 00:06:02.576 A:middle
dynamism in your use of NSColor

00:06:02.576 --> 00:06:04.106 A:middle
in your application and this is

00:06:04.106 --> 00:06:05.216 A:middle
much simpler than trying to

00:06:05.216 --> 00:06:06.806 A:middle
propagate a hard-coded literal

00:06:06.806 --> 00:06:08.506 A:middle
color across a view hierarchy on

00:06:08.506 --> 00:06:09.206 A:middle
appearance change.

00:06:09.926 --> 00:06:12.106 A:middle
So I mentioned there were two

00:06:12.106 --> 00:06:12.686 A:middle
arguments.

00:06:13.076 --> 00:06:14.516 A:middle
The other argument is a name.

00:06:14.696 --> 00:06:17.006 A:middle
And the name is very significant

00:06:17.406 --> 00:06:18.516 A:middle
for coding purposes.

00:06:18.736 --> 00:06:20.176 A:middle
If you send one of these colors

00:06:20.176 --> 00:06:21.396 A:middle
over an NSConnection-- an

00:06:21.466 --> 00:06:23.486 A:middle
NSXPCConnection, when we decode

00:06:23.486 --> 00:06:24.496 A:middle
it we're going to look it up by

00:06:24.496 --> 00:06:24.826 A:middle
name.

00:06:25.006 --> 00:06:26.346 A:middle
So it's also important to

00:06:26.346 --> 00:06:27.436 A:middle
register that color on both

00:06:27.436 --> 00:06:27.976 A:middle
sides of the connection.

00:06:31.616 --> 00:06:33.186 A:middle
So colors are great.

00:06:33.186 --> 00:06:33.996 A:middle
NSColor is great.

00:06:34.166 --> 00:06:35.126 A:middle
And they're all better with

00:06:35.126 --> 00:06:36.176 A:middle
screens to view them on.

00:06:36.966 --> 00:06:37.866 A:middle
So we'll talk about some

00:06:37.866 --> 00:06:38.886 A:middle
NSScreen improvements.

00:06:39.316 --> 00:06:41.326 A:middle
If you're ever implemented a

00:06:41.326 --> 00:06:42.876 A:middle
screen picker control, you may

00:06:42.876 --> 00:06:43.796 A:middle
have wanted to have a

00:06:43.796 --> 00:06:45.766 A:middle
user-facing string to identify

00:06:45.766 --> 00:06:46.956 A:middle
an NSScreen with.

00:06:47.316 --> 00:06:48.916 A:middle
And if you use the inherited

00:06:48.916 --> 00:06:50.276 A:middle
description method from

00:06:50.306 --> 00:06:52.276 A:middle
NSObject, your users probably

00:06:52.276 --> 00:06:54.216 A:middle
were not content with NSScreen

00:06:54.216 --> 00:06:57.386 A:middle
0x6000261e460.

00:06:58.956 --> 00:07:00.906 A:middle
So, in macOS 10.15,

00:06:58.956 --> 00:07:00.906 A:middle
So, in macOS 10.15,

00:07:01.066 --> 00:07:03.236 A:middle
NSScreen.localizedName will give

00:07:03.236 --> 00:07:05.396 A:middle
you a nice human readable string

00:07:05.576 --> 00:07:06.636 A:middle
to describe that screen.

00:07:08.296 --> 00:07:11.296 A:middle
All right, talking about screens

00:07:11.296 --> 00:07:11.946 A:middle
more generally.

00:07:12.166 --> 00:07:13.646 A:middle
Over the last many years,

00:07:13.646 --> 00:07:15.026 A:middle
screens have been getting

00:07:15.026 --> 00:07:16.486 A:middle
brighter and brighter and

00:07:16.486 --> 00:07:16.836 A:middle
brighter.

00:07:17.246 --> 00:07:18.856 A:middle
And there are very few people

00:07:19.236 --> 00:07:20.846 A:middle
who run their screens at max

00:07:20.886 --> 00:07:21.646 A:middle
brightness anymore.

00:07:21.826 --> 00:07:24.626 A:middle
And if we apply this to a

00:07:24.626 --> 00:07:26.626 A:middle
specific picture, we can imagine

00:07:26.626 --> 00:07:28.376 A:middle
that black is a zero component

00:07:28.376 --> 00:07:30.326 A:middle
value and one is the white

00:07:30.326 --> 00:07:31.056 A:middle
component value.

00:07:31.366 --> 00:07:33.516 A:middle
And as we dim that screen, we're

00:07:33.516 --> 00:07:34.906 A:middle
sort of compressing what one

00:07:34.906 --> 00:07:36.176 A:middle
means in absolute terms.

00:07:36.176 --> 00:07:38.086 A:middle
We are emitting fewer photons

00:07:38.086 --> 00:07:39.556 A:middle
per unit value in our software.

00:07:40.726 --> 00:07:42.416 A:middle
But that monitor hasn't lost

00:07:42.416 --> 00:07:43.606 A:middle
that ability to produce bright

00:07:43.606 --> 00:07:44.126 A:middle
colors.

00:07:44.686 --> 00:07:46.796 A:middle
We can instead allow Extended

00:07:46.796 --> 00:07:48.776 A:middle
Dynamic Range content, content

00:07:48.776 --> 00:07:50.046 A:middle
that isn't clamped in the zero

00:07:50.046 --> 00:07:51.716 A:middle
to one range and keep using the

00:07:51.716 --> 00:07:53.096 A:middle
maximum brightness potential of

00:07:53.096 --> 00:07:55.056 A:middle
that monitor to make some images

00:07:55.316 --> 00:07:56.706 A:middle
where we have things brighter

00:07:56.876 --> 00:07:58.066 A:middle
than our reference white point.

00:07:58.186 --> 00:08:00.596 A:middle
And this isn't actually a new

00:07:58.186 --> 00:08:00.596 A:middle
And this isn't actually a new

00:08:00.596 --> 00:08:01.016 A:middle
feature.

00:08:01.146 --> 00:08:01.986 A:middle
This is something you've been

00:08:01.986 --> 00:08:03.586 A:middle
able to do on a number of Macs

00:08:03.796 --> 00:08:05.206 A:middle
since macOS 10.11.

00:08:06.056 --> 00:08:07.526 A:middle
There's two APIs that would help

00:08:07.526 --> 00:08:08.046 A:middle
you do this.

00:08:09.096 --> 00:08:10.596 A:middle
One of them is

00:08:10.596 --> 00:08:12.416 A:middle
NSScreen.maximumExtended

00:08:12.416 --> 00:08:14.436 A:middle
DynamicRangeColorComponentValue.

00:08:15.596 --> 00:08:16.576 A:middle
It actually does stuff.

00:08:16.576 --> 00:08:17.846 A:middle
It's not just the longest

00:08:17.846 --> 00:08:19.116 A:middle
Objective-C property name you've

00:08:19.116 --> 00:08:19.576 A:middle
ever seen.

00:08:20.066 --> 00:08:22.626 A:middle
And what we would do is when

00:08:22.626 --> 00:08:23.946 A:middle
your system was in the Extended

00:08:23.946 --> 00:08:25.626 A:middle
Dynamic Range mode, it would go

00:08:25.626 --> 00:08:26.856 A:middle
ahead and tell you the maximum

00:08:26.856 --> 00:08:28.216 A:middle
component value you could use

00:08:28.216 --> 00:08:29.596 A:middle
before clipping would happen, so

00:08:29.596 --> 00:08:31.786 A:middle
that could be 1.3 for example.

00:08:33.236 --> 00:08:34.426 A:middle
If the system wasn't in this

00:08:34.426 --> 00:08:37.006 A:middle
mode, it would just return 1.0.

00:08:37.296 --> 00:08:38.596 A:middle
So you put the system in this

00:08:38.596 --> 00:08:40.076 A:middle
mode using a different API and

00:08:40.176 --> 00:08:41.936 A:middle
that is CAMetalLayer.wants

00:08:41.936 --> 00:08:43.586 A:middle
ExtendedDynamicRangeContent.

00:08:44.196 --> 00:08:45.046 A:middle
There is also an API

00:08:45.366 --> 00:08:46.626 A:middle
NSOpenGLView called

00:08:46.626 --> 00:08:47.816 A:middle
wantsExtendedDynamic

00:08:47.816 --> 00:08:49.426 A:middle
RangeOpenGLSurface.

00:08:49.426 --> 00:08:50.476 A:middle
And when either of those is set

00:08:50.476 --> 00:08:51.866 A:middle
to true, you can get that extra

00:08:51.866 --> 00:08:52.856 A:middle
headroom from this API.

00:08:53.906 --> 00:08:55.936 A:middle
So something we've added in

00:08:55.936 --> 00:08:58.426 A:middle
macOS 10.15 isn't even longer

00:08:58.426 --> 00:08:59.576 A:middle
Objective-C property name.

00:08:59.706 --> 00:09:02.216 A:middle
The important bit is actually

00:08:59.706 --> 00:09:02.216 A:middle
The important bit is actually

00:09:02.216 --> 00:09:02.736 A:middle
shorter.

00:09:02.936 --> 00:09:04.426 A:middle
That's the maximum potential

00:09:04.426 --> 00:09:04.736 A:middle
piece.

00:09:05.376 --> 00:09:06.646 A:middle
And this will tell you that

00:09:06.646 --> 00:09:08.086 A:middle
headroom, that maximum value,

00:09:08.336 --> 00:09:10.066 A:middle
even if the system isn't in the

00:09:10.126 --> 00:09:11.926 A:middle
extended dynamic range mode, and

00:09:12.376 --> 00:09:14.426 A:middle
that can be very useful if you

00:09:14.426 --> 00:09:15.436 A:middle
are working with extended

00:09:15.436 --> 00:09:16.736 A:middle
dynamic range content, you might

00:09:16.736 --> 00:09:18.486 A:middle
have multiple possible pipelines

00:09:18.486 --> 00:09:19.716 A:middle
you can send your image data

00:09:19.716 --> 00:09:20.036 A:middle
through.

00:09:20.526 --> 00:09:22.136 A:middle
And a floating-point pipeline

00:09:22.136 --> 00:09:23.596 A:middle
for extended content is probably

00:09:23.596 --> 00:09:25.496 A:middle
more expensive than a BGRA

00:09:25.496 --> 00:09:26.566 A:middle
pipeline, for example.

00:09:26.616 --> 00:09:28.146 A:middle
So knowing that you have that

00:09:28.146 --> 00:09:29.286 A:middle
headroom to play with ahead of

00:09:29.286 --> 00:09:31.216 A:middle
time let you conditionalize that

00:09:31.216 --> 00:09:31.606 A:middle
support.

00:09:32.916 --> 00:09:35.296 A:middle
So there's another API I want to

00:09:35.296 --> 00:09:37.586 A:middle
talk about specifically for the

00:09:37.586 --> 00:09:38.716 A:middle
new Apple display we saw

00:09:38.716 --> 00:09:39.176 A:middle
yesterday.

00:09:39.776 --> 00:09:41.606 A:middle
And that display is absolutely

00:09:41.606 --> 00:09:43.366 A:middle
amazing because of how bright it

00:09:43.366 --> 00:09:43.706 A:middle
can get.

00:09:43.746 --> 00:09:45.316 A:middle
It can sustain a thousand nits

00:09:45.316 --> 00:09:45.906 A:middle
indefinitely.

00:09:46.576 --> 00:09:48.446 A:middle
And because of that ability, we

00:09:48.446 --> 00:09:49.646 A:middle
like to say it's a reference

00:09:49.646 --> 00:09:50.576 A:middle
quality display.

00:09:50.606 --> 00:09:52.466 A:middle
We can say that for a specific

00:09:52.636 --> 00:09:53.846 A:middle
component value, there were will

00:09:53.846 --> 00:09:55.496 A:middle
be an absolute number of nits

00:09:55.496 --> 00:09:56.166 A:middle
for that pixel.

00:09:56.366 --> 00:09:58.836 A:middle
Now, it's very bright but it's

00:09:58.836 --> 00:09:59.976 A:middle
not infinitely bright.

00:10:00.046 --> 00:10:02.946 A:middle
If you go ahead and produce a

00:10:02.946 --> 00:10:04.346 A:middle
bright enough pixel value, it

00:10:04.346 --> 00:10:05.266 A:middle
won't actually be able to

00:10:05.266 --> 00:10:06.776 A:middle
represent it and that reference

00:10:06.776 --> 00:10:08.036 A:middle
quality attribute we talked

00:10:08.036 --> 00:10:09.616 A:middle
about will be compromised.

00:10:09.616 --> 00:10:10.836 A:middle
We'll have to scale the image

00:10:10.836 --> 00:10:12.506 A:middle
content down to fit in the

00:10:12.506 --> 00:10:13.596 A:middle
brightness range available.

00:10:14.046 --> 00:10:15.226 A:middle
And that's what the NSScreen

00:10:15.226 --> 00:10:16.516 A:middle
maximum reference value is

00:10:16.516 --> 00:10:16.966 A:middle
telling you.

00:10:17.016 --> 00:10:18.736 A:middle
If you exceed this value, you're

00:10:18.736 --> 00:10:19.856 A:middle
not going to be able to dish out

00:10:19.856 --> 00:10:20.946 A:middle
absolute nits anymore.

00:10:24.056 --> 00:10:27.536 A:middle
OK. So I mentioned CAMetalLayer

00:10:27.536 --> 00:10:28.506 A:middle
as part of a way of getting

00:10:28.506 --> 00:10:29.976 A:middle
extended dynamic range content.

00:10:30.456 --> 00:10:31.776 A:middle
And I want to point out

00:10:31.776 --> 00:10:33.256 A:middle
something that if you're using

00:10:33.256 --> 00:10:35.096 A:middle
MetalLayer on the Mac today, you

00:10:35.096 --> 00:10:36.906 A:middle
should be doing, and that you

00:10:36.906 --> 00:10:38.066 A:middle
should be paying attention to

00:10:38.066 --> 00:10:39.656 A:middle
which screen and which metal

00:10:39.656 --> 00:10:41.166 A:middle
device you're going to see

00:10:41.166 --> 00:10:42.096 A:middle
MetalLayer is going to be

00:10:42.096 --> 00:10:42.686 A:middle
displayed on.

00:10:42.686 --> 00:10:44.666 A:middle
That's a little convoluted.

00:10:44.756 --> 00:10:46.376 A:middle
You have to get your window and

00:10:46.376 --> 00:10:47.686 A:middle
your window screen and your

00:10:47.686 --> 00:10:48.946 A:middle
screen's device description.

00:10:49.296 --> 00:10:50.836 A:middle
And then you have to ask it for

00:10:50.836 --> 00:10:52.226 A:middle
this hard-coded string that you

00:10:52.226 --> 00:10:53.526 A:middle
found on our documentation but

00:10:53.526 --> 00:10:54.986 A:middle
we never exported in any of our

00:10:54.986 --> 00:10:55.326 A:middle
headers.

00:10:56.476 --> 00:10:57.806 A:middle
And finally you'll pass that CD

00:10:57.806 --> 00:10:59.356 A:middle
direct display to figure out

00:10:59.356 --> 00:11:00.246 A:middle
which device to use.

00:10:59.356 --> 00:11:00.246 A:middle
which device to use.

00:11:00.956 --> 00:11:02.136 A:middle
And it's worth it because that

00:11:02.136 --> 00:11:03.746 A:middle
will allow you to avoid moving

00:11:03.746 --> 00:11:05.776 A:middle
the data between GPUs across the

00:11:05.776 --> 00:11:08.256 A:middle
system bus but we've made this

00:11:08.256 --> 00:11:09.526 A:middle
better in macOS 10.15.

00:11:10.206 --> 00:11:12.316 A:middle
CAMetalLayer and MetalView have

00:11:12.316 --> 00:11:13.646 A:middle
a new preferred device property

00:11:13.646 --> 00:11:14.806 A:middle
that will answer that question

00:11:14.806 --> 00:11:15.066 A:middle
for you.

00:11:16.536 --> 00:11:17.676 A:middle
It really reduces your code

00:11:17.676 --> 00:11:18.276 A:middle
around this.

00:11:18.716 --> 00:11:20.426 A:middle
So we're excited that you get to

00:11:20.426 --> 00:11:21.106 A:middle
use that this year.

00:11:21.316 --> 00:11:24.236 A:middle
And that covers what we wanted

00:11:24.236 --> 00:11:25.226 A:middle
to say about screens.

00:11:25.456 --> 00:11:27.586 A:middle
And now we're going to go into a

00:11:27.586 --> 00:11:28.886 A:middle
whole diversity of text

00:11:28.886 --> 00:11:29.316 A:middle
features.

00:11:30.086 --> 00:11:31.696 A:middle
The first of these I want to

00:11:31.696 --> 00:11:34.346 A:middle
mention is NSTextView uses

00:11:34.346 --> 00:11:35.946 A:middle
adaptive color mapping for dark

00:11:35.946 --> 00:11:36.486 A:middle
appearance.

00:11:36.986 --> 00:11:38.076 A:middle
And this is a feature that you

00:11:38.076 --> 00:11:39.506 A:middle
can turn on and off and text at

00:11:39.506 --> 00:11:39.656 A:middle
it.

00:11:39.696 --> 00:11:41.466 A:middle
I have snapshots of them in both

00:11:41.466 --> 00:11:42.576 A:middle
the aqua and darkAqua

00:11:42.576 --> 00:11:44.596 A:middle
appearances using colors from

00:11:44.596 --> 00:11:46.156 A:middle
the system crown crayon picker.

00:11:46.156 --> 00:11:47.256 A:middle
And you can see that when this

00:11:47.256 --> 00:11:49.056 A:middle
feature is activated, snow and

00:11:49.056 --> 00:11:50.346 A:middle
licorice for example almost

00:11:50.346 --> 00:11:51.276 A:middle
invert colors.

00:11:51.536 --> 00:11:54.286 A:middle
Meanwhile the more saturated and

00:11:54.286 --> 00:11:56.176 A:middle
vibrant colors retain that same

00:11:56.176 --> 00:11:57.526 A:middle
color character but changed

00:11:57.526 --> 00:11:59.226 A:middle
brightness to better match the

00:11:59.226 --> 00:12:00.006 A:middle
appearance therein.

00:11:59.226 --> 00:12:00.006 A:middle
appearance therein.

00:12:01.356 --> 00:12:02.576 A:middle
So this can be very useful for

00:12:02.576 --> 00:12:03.746 A:middle
making text use with plain

00:12:03.746 --> 00:12:04.796 A:middle
content where you want them to

00:12:04.796 --> 00:12:05.746 A:middle
fit in with the current

00:12:05.746 --> 00:12:06.166 A:middle
appearance.

00:12:06.586 --> 00:12:07.766 A:middle
And it can be very useful for

00:12:07.766 --> 00:12:09.506 A:middle
each text documents where the

00:12:09.506 --> 00:12:11.086 A:middle
desire to make them fit it is

00:12:11.086 --> 00:12:12.396 A:middle
more important than making them

00:12:12.396 --> 00:12:14.626 A:middle
appear exactly as they will on a

00:12:14.626 --> 00:12:15.716 A:middle
printed page for example.

00:12:16.436 --> 00:12:17.666 A:middle
Generally, we think this is the

00:12:17.666 --> 00:12:19.466 A:middle
right thing to do but if you

00:12:19.466 --> 00:12:20.626 A:middle
have an app that's focused

00:12:20.626 --> 00:12:21.796 A:middle
around authoring rich text

00:12:21.796 --> 00:12:23.836 A:middle
content, you probably want to

00:12:23.836 --> 00:12:25.636 A:middle
either opt out or offer the user

00:12:25.636 --> 00:12:27.316 A:middle
the ability to turn this off so

00:12:27.316 --> 00:12:28.946 A:middle
they can decide that they want a

00:12:28.946 --> 00:12:30.876 A:middle
representation matching printed

00:12:31.346 --> 00:12:33.976 A:middle
content more than their screen.

00:12:34.036 --> 00:12:35.746 A:middle
So I think most people in this

00:12:35.746 --> 00:12:36.546 A:middle
room are familiar with

00:12:36.596 --> 00:12:38.246 A:middle
NSSpellChecker if not as a

00:12:38.246 --> 00:12:39.656 A:middle
developer then as a user.

00:12:40.426 --> 00:12:42.656 A:middle
And in macOS 10.15, we're happy

00:12:42.656 --> 00:12:44.066 A:middle
to announce that NSSpellChecker

00:12:44.066 --> 00:12:44.836 A:middle
has a successor.

00:12:44.926 --> 00:12:47.276 A:middle
And that successor is

00:12:47.406 --> 00:12:48.526 A:middle
NSTextCheckingController.

00:12:49.556 --> 00:12:51.896 A:middle
So, NSSpellChecker works with

00:12:51.896 --> 00:12:53.376 A:middle
NSTextView but

00:12:53.376 --> 00:12:55.226 A:middle
NSTextCheckingController works

00:12:55.226 --> 00:12:56.406 A:middle
for the variety of systems we

00:12:56.406 --> 00:12:58.736 A:middle
use in UIKit and WebKit and

00:12:58.736 --> 00:12:59.406 A:middle
AppKit.

00:12:59.406 --> 00:13:00.636 A:middle
And you can use it yourself by

00:12:59.406 --> 00:13:00.636 A:middle
And you can use it yourself by

00:13:00.636 --> 00:13:02.036 A:middle
implementing the NSText checking

00:13:02.036 --> 00:13:03.616 A:middle
client protocol.

00:13:03.976 --> 00:13:05.036 A:middle
But in addition to spell

00:13:05.036 --> 00:13:06.276 A:middle
checking it does other things.

00:13:06.276 --> 00:13:07.236 A:middle
It does grammar checking.

00:13:07.516 --> 00:13:09.606 A:middle
It can do data detection to find

00:13:09.606 --> 00:13:10.956 A:middle
URLs and phone numbers and

00:13:10.956 --> 00:13:11.366 A:middle
dates.

00:13:11.926 --> 00:13:13.736 A:middle
And you can control all of that

00:13:13.736 --> 00:13:15.896 A:middle
and configure whether it's going

00:13:15.896 --> 00:13:16.916 A:middle
to a merely highlight

00:13:16.916 --> 00:13:18.516 A:middle
misspellings or automatically

00:13:18.516 --> 00:13:19.036 A:middle
correct them.

00:13:19.496 --> 00:13:20.706 A:middle
So we think it's a very flexible

00:13:20.706 --> 00:13:22.176 A:middle
API and if you're big on text

00:13:22.176 --> 00:13:23.546 A:middle
input, it's something worth

00:13:23.546 --> 00:13:24.666 A:middle
checking out.

00:13:25.356 --> 00:13:27.246 A:middle
The small edition related to

00:13:27.246 --> 00:13:29.506 A:middle
text is that almost all of the

00:13:29.596 --> 00:13:31.396 A:middle
NSText related classes support

00:13:31.396 --> 00:13:32.226 A:middle
secure coding now.

00:13:32.566 --> 00:13:34.386 A:middle
So if you wanted to use these as

00:13:34.386 --> 00:13:36.786 A:middle
part of a vocabulary over NSText

00:13:36.786 --> 00:13:39.126 A:middle
PC connection, they will work

00:13:39.126 --> 00:13:39.746 A:middle
splendidly.

00:13:42.596 --> 00:13:45.566 A:middle
We're probably all familiar with

00:13:45.626 --> 00:13:47.776 A:middle
NSFont and slightly few of us

00:13:47.776 --> 00:13:48.486 A:middle
are familiar with

00:13:48.486 --> 00:13:49.396 A:middle
NSFontDescriptor.

00:13:49.886 --> 00:13:52.836 A:middle
NSFontDescriptor is a neat class

00:13:53.206 --> 00:13:54.666 A:middle
that lets us look up and

00:13:54.666 --> 00:13:56.296 A:middle
transform fonts using sort of

00:13:56.296 --> 00:13:57.756 A:middle
semantic attributes about them.

00:13:58.226 --> 00:13:59.706 A:middle
So I made a little sample up

00:13:59.706 --> 00:13:59.976 A:middle
here.

00:14:00.746 --> 00:14:02.806 A:middle
And the top row is a font I've

00:14:02.806 --> 00:14:04.246 A:middle
hard-coded in Interface Builder.

00:14:04.806 --> 00:14:06.466 A:middle
But the subsequent rows I've

00:14:06.466 --> 00:14:07.516 A:middle
configured using the

00:14:07.516 --> 00:14:08.946 A:middle
NSFontDescriptor system design

00:14:08.946 --> 00:14:11.036 A:middle
API which is new in macOS 10.15.

00:14:11.356 --> 00:14:13.506 A:middle
And lets me go ahead and say, I

00:14:13.506 --> 00:14:14.856 A:middle
want to switch to a rounder font

00:14:14.856 --> 00:14:16.436 A:middle
or a Serif version or a

00:14:16.436 --> 00:14:17.256 A:middle
monospaced font.

00:14:17.256 --> 00:14:19.586 A:middle
And there's a session about this

00:14:19.586 --> 00:14:20.526 A:middle
which we'll go on to much

00:14:20.526 --> 00:14:21.806 A:middle
greater detail about it but we

00:14:21.806 --> 00:14:23.276 A:middle
think this is a great way of

00:14:23.276 --> 00:14:24.676 A:middle
stylizing your applications.

00:14:25.006 --> 00:14:30.516 A:middle
So, if anyone has a

00:14:30.516 --> 00:14:32.956 A:middle
cross-platform app where they

00:14:32.956 --> 00:14:34.556 A:middle
are writing rich text documents

00:14:34.736 --> 00:14:36.896 A:middle
on both macOS and iOS or even in

00:14:36.896 --> 00:14:38.286 A:middle
app that has not cross-platform

00:14:38.286 --> 00:14:39.506 A:middle
where they are reading documents

00:14:39.506 --> 00:14:41.346 A:middle
from the other platform, you may

00:14:41.346 --> 00:14:43.226 A:middle
have hit a situation where even

00:14:43.226 --> 00:14:44.466 A:middle
though the document is

00:14:44.466 --> 00:14:46.226 A:middle
specifying the same font sizes,

00:14:46.526 --> 00:14:47.686 A:middle
they visually look very

00:14:47.686 --> 00:14:48.046 A:middle
different.

00:14:48.166 --> 00:14:49.746 A:middle
And that's because we have very

00:14:49.746 --> 00:14:50.836 A:middle
different screen densities

00:14:50.866 --> 00:14:52.406 A:middle
between our iOS devices and Mac

00:14:52.406 --> 00:14:52.946 A:middle
devices.

00:14:53.136 --> 00:14:57.076 A:middle
In macOS 10.15, we have new

00:14:57.076 --> 00:14:59.316 A:middle
attributed string APIs that you

00:14:59.316 --> 00:15:00.756 A:middle
can use when reading and writing

00:14:59.316 --> 00:15:00.756 A:middle
can use when reading and writing

00:15:01.056 --> 00:15:02.616 A:middle
attributed strings to rich text

00:15:02.616 --> 00:15:03.176 A:middle
documents.

00:15:03.736 --> 00:15:05.426 A:middle
And you can tell us what the

00:15:05.426 --> 00:15:07.106 A:middle
source and destination operating

00:15:07.106 --> 00:15:08.696 A:middle
systems are and we will

00:15:08.696 --> 00:15:11.066 A:middle
automatically adjust font sizes

00:15:11.436 --> 00:15:12.636 A:middle
to make them appear visually the

00:15:12.636 --> 00:15:12.986 A:middle
same.

00:15:13.816 --> 00:15:15.576 A:middle
In this case we brought our 160

00:15:15.576 --> 00:15:17.186 A:middle
point font down to 120 point

00:15:17.516 --> 00:15:18.636 A:middle
which is roughly where they're

00:15:18.636 --> 00:15:20.186 A:middle
visually the same height.

00:15:21.476 --> 00:15:25.096 A:middle
The last text feature I want to

00:15:25.096 --> 00:15:27.076 A:middle
talk about is an addition to

00:15:27.076 --> 00:15:29.086 A:middle
NSLayoutManager called

00:15:29.086 --> 00:15:30.326 A:middle
usesDefaultHyphenation.

00:15:30.996 --> 00:15:32.856 A:middle
And in the past, you'd be able

00:15:32.856 --> 00:15:34.306 A:middle
to get the NSText Class that's

00:15:34.306 --> 00:15:36.046 A:middle
hyphenate for you by using an

00:15:36.046 --> 00:15:38.296 A:middle
NSParagraph style to control the

00:15:38.296 --> 00:15:39.306 A:middle
threshold of hyphenation.

00:15:40.016 --> 00:15:41.606 A:middle
This layout manager property is

00:15:41.606 --> 00:15:42.816 A:middle
a little bit easier to use.

00:15:43.106 --> 00:15:44.306 A:middle
It defaults to off, in which

00:15:44.306 --> 00:15:45.726 A:middle
case you get no hyphenation like

00:15:45.726 --> 00:15:46.266 A:middle
on the left.

00:15:46.626 --> 00:15:47.876 A:middle
And if you set in on it we'll

00:15:47.876 --> 00:15:48.866 A:middle
pick up a default value for

00:15:48.866 --> 00:15:49.376 A:middle
hyphenation.

00:15:49.566 --> 00:15:50.636 A:middle
And you can see on the right

00:15:50.706 --> 00:15:51.616 A:middle
that we've hyphenated

00:15:51.756 --> 00:15:52.646 A:middle
encyclopedia and

00:15:52.786 --> 00:15:53.936 A:middle
internationalization.

00:15:55.726 --> 00:15:57.756 A:middle
So we think these text APIs will

00:15:57.756 --> 00:15:59.116 A:middle
really help you polish the

00:15:59.116 --> 00:16:00.416 A:middle
corners and edges around your

00:15:59.116 --> 00:16:00.416 A:middle
corners and edges around your

00:16:00.416 --> 00:16:00.976 A:middle
text systems.

00:16:04.446 --> 00:16:05.726 A:middle
We have some great new stuff in

00:16:05.856 --> 00:16:06.436 A:middle
NSToolbar.

00:16:07.546 --> 00:16:09.376 A:middle
The first edition is a new

00:16:09.376 --> 00:16:11.836 A:middle
property on NSToolbarItem called

00:16:11.836 --> 00:16:12.566 A:middle
isBordered.

00:16:14.256 --> 00:16:15.756 A:middle
In the past, if you wanted to

00:16:15.756 --> 00:16:17.106 A:middle
get this push button style

00:16:17.106 --> 00:16:19.586 A:middle
appearance in an NSToolbar, you

00:16:19.586 --> 00:16:20.876 A:middle
would have to allocate your own

00:16:21.076 --> 00:16:22.606 A:middle
NS-- or instance of NS button

00:16:22.746 --> 00:16:24.376 A:middle
and configure it and then you'd

00:16:24.376 --> 00:16:26.296 A:middle
use it as a custom view on your

00:16:26.296 --> 00:16:26.896 A:middle
toolbar item.

00:16:27.046 --> 00:16:28.876 A:middle
And that would work but it was

00:16:28.876 --> 00:16:30.446 A:middle
extra effort for you and

00:16:30.446 --> 00:16:31.766 A:middle
additionally you couldn't take

00:16:31.766 --> 00:16:33.586 A:middle
advantage of NSToolbarItems

00:16:33.586 --> 00:16:35.536 A:middle
built in support for automatic

00:16:35.536 --> 00:16:36.936 A:middle
enabling and disabling.

00:16:37.806 --> 00:16:39.366 A:middle
But if you go ahead and use this

00:16:39.366 --> 00:16:40.846 A:middle
isBordered property, you'll get

00:16:40.846 --> 00:16:41.706 A:middle
all of that for free.

00:16:42.876 --> 00:16:45.516 A:middle
Additionally, NSToolbarItem has

00:16:45.516 --> 00:16:47.376 A:middle
a new title property which lets

00:16:47.376 --> 00:16:48.836 A:middle
you configure your toolbar items

00:16:49.216 --> 00:16:50.676 A:middle
to be a string-based buttons

00:16:50.676 --> 00:16:52.386 A:middle
instead of iconic ones.

00:16:52.856 --> 00:16:54.196 A:middle
And this is distinct from the

00:16:54.196 --> 00:16:55.416 A:middle
label property which would

00:16:55.416 --> 00:16:57.386 A:middle
appear below these buttons if we

00:16:57.386 --> 00:16:58.456 A:middle
had configured the toolbar as

00:16:58.456 --> 00:16:59.226 A:middle
your labels as well.

00:16:59.316 --> 00:17:02.946 A:middle
And that is not the NSToolbar

00:16:59.316 --> 00:17:02.946 A:middle
And that is not the NSToolbar

00:17:02.946 --> 00:17:04.306 A:middle
related class to gain

00:17:04.306 --> 00:17:05.986 A:middle
functionality in macOS 10.15.

00:17:07.056 --> 00:17:08.806 A:middle
We have also added a number of

00:17:08.806 --> 00:17:10.556 A:middle
features to NSToolbarItem group

00:17:10.556 --> 00:17:11.965 A:middle
to make it incredibly versatile

00:17:11.965 --> 00:17:12.376 A:middle
and useful.

00:17:12.846 --> 00:17:14.356 A:middle
And the first of these is a

00:17:14.356 --> 00:17:15.486 A:middle
number of convenience

00:17:15.486 --> 00:17:17.175 A:middle
constructors for it, and these

00:17:17.175 --> 00:17:18.486 A:middle
are just going to let you build

00:17:18.486 --> 00:17:20.886 A:middle
the same great toolbar UIs in

00:17:20.886 --> 00:17:21.866 A:middle
fewer lines of code.

00:17:22.096 --> 00:17:24.175 A:middle
But NSToolbarItem group has

00:17:24.175 --> 00:17:25.526 A:middle
become more flexible at the same

00:17:25.526 --> 00:17:25.896 A:middle
time.

00:17:26.566 --> 00:17:27.606 A:middle
If you look at the image on the

00:17:27.606 --> 00:17:29.226 A:middle
right side of the screen, you

00:17:29.226 --> 00:17:30.716 A:middle
can see that it now has support

00:17:30.716 --> 00:17:32.146 A:middle
for representing its items as a

00:17:32.146 --> 00:17:34.026 A:middle
segmented control and it can

00:17:34.026 --> 00:17:36.056 A:middle
also represent them as pull-down

00:17:36.056 --> 00:17:37.136 A:middle
and pop-up menus too.

00:17:37.546 --> 00:17:39.046 A:middle
And so this makes it a very

00:17:39.046 --> 00:17:40.146 A:middle
versatile toolbar control

00:17:40.146 --> 00:17:42.476 A:middle
because of the way is uses the

00:17:42.476 --> 00:17:43.446 A:middle
other toolbar items as

00:17:43.446 --> 00:17:44.846 A:middle
vocabulary, we can also

00:17:44.846 --> 00:17:46.246 A:middle
automatically create a collapsed

00:17:46.246 --> 00:17:47.916 A:middle
representation for when you have

00:17:47.916 --> 00:17:49.546 A:middle
too many toolbar items for the

00:17:49.546 --> 00:17:50.826 A:middle
window widths.

00:17:54.436 --> 00:17:56.416 A:middle
There is a very similar effect

00:17:56.416 --> 00:17:57.596 A:middle
you can get using a new

00:17:57.746 --> 00:17:59.306 A:middle
NSMenuToolbarItem class.

00:18:00.016 --> 00:18:01.756 A:middle
And this is much like the menu

00:18:01.756 --> 00:18:03.476 A:middle
item representations of the

00:18:03.476 --> 00:18:06.056 A:middle
toolbar item group but it uses

00:18:06.056 --> 00:18:07.716 A:middle
an NSMenu as currency instead.

00:18:08.396 --> 00:18:09.966 A:middle
And that's significant because

00:18:09.966 --> 00:18:11.506 A:middle
you can use NSMenu features like

00:18:11.506 --> 00:18:14.276 A:middle
submenus or separator items or

00:18:14.276 --> 00:18:15.556 A:middle
even the ability to use a custom

00:18:15.556 --> 00:18:16.676 A:middle
view for your menu items.

00:18:16.866 --> 00:18:19.536 A:middle
So it's a very powerful tool if

00:18:19.536 --> 00:18:20.776 A:middle
you want to have sophisticated

00:18:20.776 --> 00:18:22.486 A:middle
drill-down behaviors in your

00:18:24.256 --> 00:18:24.646 A:middle
toolbar.

00:18:24.746 --> 00:18:26.346 A:middle
NSTouchBar has also received a

00:18:26.346 --> 00:18:28.246 A:middle
few enhancements in macOS 10.15.

00:18:28.876 --> 00:18:29.876 A:middle
The first of these I want to

00:18:29.876 --> 00:18:32.156 A:middle
note is a new class property on

00:18:32.216 --> 00:18:33.726 A:middle
NSTouchBar itself and that's

00:18:33.726 --> 00:18:35.086 A:middle
isAutomaticCustomize

00:18:35.086 --> 00:18:36.346 A:middle
TouchBarMenuItemEndabled.

00:18:36.896 --> 00:18:38.216 A:middle
And that will sound familiar NS

00:18:38.216 --> 00:18:40.106 A:middle
application has that exact same

00:18:40.106 --> 00:18:40.556 A:middle
property.

00:18:41.446 --> 00:18:42.946 A:middle
You could use this Touch Bar one

00:18:43.446 --> 00:18:44.916 A:middle
in a code where you want to

00:18:44.916 --> 00:18:46.056 A:middle
defactor in such a way to not

00:18:46.056 --> 00:18:47.346 A:middle
reference the NSApplication.

00:18:47.666 --> 00:18:49.146 A:middle
And one example of that is if

00:18:49.146 --> 00:18:49.986 A:middle
you're writing UIKit

00:18:49.986 --> 00:18:51.316 A:middle
application, you're not going to

00:18:51.316 --> 00:18:52.796 A:middle
have an NSApplication instance

00:18:52.796 --> 00:18:53.526 A:middle
to talk to anyway.

00:18:54.166 --> 00:18:57.886 A:middle
A more significant control is

00:18:57.886 --> 00:19:00.166 A:middle
the new NSStepper Touch Bar Item

00:18:57.886 --> 00:19:00.166 A:middle
the new NSStepper Touch Bar Item

00:19:00.166 --> 00:19:00.606 A:middle
class.

00:19:01.286 --> 00:19:03.296 A:middle
Just like an onscreen stepper,

00:19:03.576 --> 00:19:04.696 A:middle
this is very useful for when

00:19:04.696 --> 00:19:06.206 A:middle
you're doing a discrete entry

00:19:06.206 --> 00:19:07.566 A:middle
for things such as dates and

00:19:07.566 --> 00:19:09.766 A:middle
numbers but given the larger

00:19:09.766 --> 00:19:11.046 A:middle
size in the Touch Bar and the

00:19:11.046 --> 00:19:12.706 A:middle
horizontal layout, you can also

00:19:12.706 --> 00:19:13.966 A:middle
use this for new applications

00:19:13.966 --> 00:19:15.996 A:middle
like visually selecting the tool

00:19:15.996 --> 00:19:17.136 A:middle
on a drawing app.

00:19:17.416 --> 00:19:18.606 A:middle
So we're really excited about

00:19:18.606 --> 00:19:19.856 A:middle
this new Touch Bar Item class.

00:19:19.856 --> 00:19:21.186 A:middle
We think you'll be able to put

00:19:21.186 --> 00:19:22.326 A:middle
it to good use in your

00:19:22.326 --> 00:19:23.016 A:middle
applications.

00:19:24.236 --> 00:19:26.446 A:middle
NSSlider Touch Bar Item has a

00:19:26.446 --> 00:19:28.906 A:middle
few small enhancements too.

00:19:28.906 --> 00:19:30.296 A:middle
You may have experienced a case

00:19:30.296 --> 00:19:31.556 A:middle
were used an NSSlider Touch Bar

00:19:31.556 --> 00:19:32.746 A:middle
Item and it was a little bit too

00:19:32.746 --> 00:19:33.776 A:middle
small for your taste.

00:19:34.666 --> 00:19:36.276 A:middle
You could fix this by grabbing

00:19:36.276 --> 00:19:38.166 A:middle
the slider from the Touch Bar

00:19:38.166 --> 00:19:39.936 A:middle
Item instance and adding auto

00:19:39.936 --> 00:19:40.946 A:middle
layout constraints to it.

00:19:40.946 --> 00:19:44.416 A:middle
In macOS 10.15, you can just set

00:19:44.416 --> 00:19:45.346 A:middle
the minimum slider width

00:19:45.346 --> 00:19:46.546 A:middle
directly on the item and we'll

00:19:46.546 --> 00:19:47.456 A:middle
take care of that for you.

00:19:48.396 --> 00:19:50.516 A:middle
Similarly, if your slider has

00:19:50.596 --> 00:19:52.346 A:middle
global ambitions, you can now

00:19:52.346 --> 00:19:53.876 A:middle
check them by using the maximum

00:19:53.876 --> 00:19:54.736 A:middle
slider width property.

00:19:56.256 --> 00:19:59.146 A:middle
And lastly, we'll talk a little

00:19:59.146 --> 00:19:59.976 A:middle
bit about sidebar metrics.

00:20:00.086 --> 00:20:03.196 A:middle
In macOS 10.15 you can toggle

00:20:03.196 --> 00:20:05.026 A:middle
the size of a sidebar using the

00:20:05.026 --> 00:20:06.316 A:middle
setting and the general pane of

00:20:06.316 --> 00:20:07.196 A:middle
system preferences.

00:20:07.306 --> 00:20:09.986 A:middle
And we default to medium but you

00:20:09.986 --> 00:20:11.596 A:middle
can also use small and large.

00:20:12.436 --> 00:20:13.536 A:middle
And I want to call this out

00:20:13.536 --> 00:20:14.856 A:middle
because if you haven't known

00:20:14.856 --> 00:20:16.046 A:middle
about this feature you maybe

00:20:16.046 --> 00:20:17.666 A:middle
have not been including artwork

00:20:17.666 --> 00:20:18.836 A:middle
appropriate for the small and

00:20:18.836 --> 00:20:19.466 A:middle
large sizes.

00:20:19.466 --> 00:20:20.816 A:middle
So if you're using bitmap

00:20:20.816 --> 00:20:21.906 A:middle
artwork, go ahead and have

00:20:21.906 --> 00:20:23.686 A:middle
representations for that or use

00:20:23.686 --> 00:20:24.866 A:middle
a resolution independent

00:20:24.866 --> 00:20:25.206 A:middle
version.

00:20:25.446 --> 00:20:27.506 A:middle
Similarly, there's a new feature

00:20:27.506 --> 00:20:29.356 A:middle
in macOS 10.15 to allow

00:20:29.356 --> 00:20:30.886 A:middle
automatically picking the light

00:20:30.886 --> 00:20:32.186 A:middle
and the dark appearance, that's

00:20:32.186 --> 00:20:33.946 A:middle
also available in the general

00:20:33.946 --> 00:20:34.013 A:middle
[inaudible].

00:20:34.013 --> 00:20:38.776 A:middle
OK. We covered controls for

00:20:38.776 --> 00:20:40.326 A:middle
toolbars and Touch Bars.

00:20:40.326 --> 00:20:41.876 A:middle
Let's talk about some controls

00:20:41.876 --> 00:20:43.346 A:middle
that are more broadly

00:20:43.406 --> 00:20:43.966 A:middle
applicable.

00:20:45.196 --> 00:20:46.776 A:middle
The first of these, we're

00:20:46.776 --> 00:20:47.646 A:middle
excited to announce this is

00:20:47.796 --> 00:20:48.336 A:middle
NSSwitch.

00:20:48.606 --> 00:20:50.716 A:middle
And NSSwitch is a full subclass

00:20:50.716 --> 00:20:51.326 A:middle
of NSControl.

00:20:51.586 --> 00:20:52.806 A:middle
It supports bindings, it

00:20:52.806 --> 00:20:55.846 A:middle
supports formatters, but it

00:20:55.846 --> 00:20:57.966 A:middle
exists alongside the existing

00:20:57.966 --> 00:20:59.016 A:middle
check box functionality.

00:20:59.626 --> 00:21:01.046 A:middle
A question you probably have in

00:20:59.626 --> 00:21:01.046 A:middle
A question you probably have in

00:21:01.046 --> 00:21:02.316 A:middle
your mind is when should I use

00:21:02.316 --> 00:21:03.686 A:middle
NSSwitch and when should I use a

00:21:03.686 --> 00:21:04.306 A:middle
checkbox?

00:21:04.786 --> 00:21:06.286 A:middle
And if you are already using a

00:21:06.286 --> 00:21:07.886 A:middle
checkbox, you should probably

00:21:07.886 --> 00:21:09.046 A:middle
keep using a checkbox.

00:21:09.046 --> 00:21:10.116 A:middle
They're generally the right

00:21:10.116 --> 00:21:10.846 A:middle
control to use.

00:21:11.746 --> 00:21:13.796 A:middle
We think NSSwitches are better

00:21:13.796 --> 00:21:15.076 A:middle
used when you have a really

00:21:15.076 --> 00:21:16.556 A:middle
heavy toggle, something that's

00:21:16.556 --> 00:21:17.846 A:middle
toggling a lot of functionality

00:21:17.846 --> 00:21:19.096 A:middle
on and off.

00:21:19.096 --> 00:21:20.876 A:middle
And in this example I have here,

00:21:21.216 --> 00:21:22.806 A:middle
we have a master toggle on the

00:21:22.806 --> 00:21:23.826 A:middle
left which is going to enable

00:21:24.066 --> 00:21:26.026 A:middle
all of the individual sharing

00:21:26.026 --> 00:21:26.976 A:middle
services on the right.

00:21:32.046 --> 00:21:34.386 A:middle
In macOS 10.15, we've invested a

00:21:34.386 --> 00:21:35.326 A:middle
lot of effort in

00:21:35.326 --> 00:21:36.086 A:middle
NSCollectionView.

00:21:36.426 --> 00:21:37.826 A:middle
And one of the things we're

00:21:37.826 --> 00:21:39.796 A:middle
excited to talk about is

00:21:39.796 --> 00:21:40.776 A:middle
compositional layout.

00:21:40.776 --> 00:21:42.956 A:middle
And in this scheme, you no

00:21:42.956 --> 00:21:44.256 A:middle
longer need to subclass

00:21:44.316 --> 00:21:46.096 A:middle
NSCollectionView layout to

00:21:46.096 --> 00:21:46.646 A:middle
modify it.

00:21:46.646 --> 00:21:48.976 A:middle
There are number of interesting

00:21:48.976 --> 00:21:51.276 A:middle
features you can throw in, such

00:21:51.276 --> 00:21:53.036 A:middle
as container-relative sizing,

00:21:53.316 --> 00:21:54.896 A:middle
layout breaks and sections as

00:21:54.896 --> 00:21:56.586 A:middle
well as nestable groups, and

00:21:56.586 --> 00:21:57.916 A:middle
also making individual sections

00:21:57.916 --> 00:21:58.546 A:middle
scrollable.

00:21:58.886 --> 00:22:00.326 A:middle
And of course, all of that works

00:21:58.886 --> 00:22:00.326 A:middle
And of course, all of that works

00:22:00.326 --> 00:22:01.756 A:middle
in both right to left and left

00:22:01.756 --> 00:22:02.536 A:middle
to right languages.

00:22:04.326 --> 00:22:05.676 A:middle
There's also a new collection

00:22:05.676 --> 00:22:07.306 A:middle
view feature called diffable

00:22:07.306 --> 00:22:08.016 A:middle
data sources.

00:22:08.076 --> 00:22:11.196 A:middle
And these are identifier-based

00:22:11.196 --> 00:22:12.556 A:middle
data sources that let us track

00:22:12.556 --> 00:22:13.636 A:middle
things like the addition or

00:22:13.636 --> 00:22:15.156 A:middle
removal of items or the movement

00:22:15.156 --> 00:22:16.826 A:middle
of an item between two locations

00:22:17.136 --> 00:22:18.536 A:middle
and we can automatically infer

00:22:18.536 --> 00:22:19.926 A:middle
the right animations to use.

00:22:20.396 --> 00:22:21.466 A:middle
So this means you won't have to

00:22:21.466 --> 00:22:23.356 A:middle
use performBatchUpdates or

00:22:23.356 --> 00:22:24.626 A:middle
reloadData.

00:22:27.796 --> 00:22:30.136 A:middle
OK, backing away from specific

00:22:30.136 --> 00:22:32.346 A:middle
controls to an IB feature.

00:22:32.546 --> 00:22:34.996 A:middle
IB storyboards are a really

00:22:34.996 --> 00:22:36.666 A:middle
great way of connecting the

00:22:36.666 --> 00:22:38.166 A:middle
various view controllers in your

00:22:38.166 --> 00:22:38.756 A:middle
application.

00:22:40.346 --> 00:22:42.836 A:middle
And historically, your view

00:22:42.836 --> 00:22:44.076 A:middle
controller would be initialized

00:22:44.076 --> 00:22:45.256 A:middle
through in it with coder and

00:22:45.256 --> 00:22:46.656 A:middle
you'd have to find a different

00:22:46.656 --> 00:22:48.456 A:middle
way of getting different

00:22:48.456 --> 00:22:49.296 A:middle
information into the view

00:22:49.296 --> 00:22:49.746 A:middle
controller.

00:22:49.746 --> 00:22:51.956 A:middle
That wasn't necessarily

00:22:51.956 --> 00:22:53.076 A:middle
difficult but it did mean your

00:22:53.076 --> 00:22:54.396 A:middle
code was factored maybe more

00:22:54.396 --> 00:22:55.406 A:middle
broadly than you wanted.

00:22:55.756 --> 00:22:57.506 A:middle
If you look at the snippet here

00:22:57.506 --> 00:22:59.116 A:middle
you can I have a function called

00:22:59.116 --> 00:23:01.926 A:middle
showPetDetails and this returns

00:22:59.116 --> 00:23:01.926 A:middle
showPetDetails and this returns

00:23:01.926 --> 00:23:03.566 A:middle
a new view controller passing

00:23:03.566 --> 00:23:06.586 A:middle
along a coder from IB as well as

00:23:06.586 --> 00:23:07.876 A:middle
inserting our own notion of a

00:23:07.876 --> 00:23:08.756 A:middle
selected pet name.

00:23:10.256 --> 00:23:11.316 A:middle
So this is a great way of

00:23:11.316 --> 00:23:12.316 A:middle
bundling those separate

00:23:12.316 --> 00:23:13.696 A:middle
initialization and configuration

00:23:13.696 --> 00:23:14.116 A:middle
steps.

00:23:14.936 --> 00:23:16.506 A:middle
And the other important thing to

00:23:16.506 --> 00:23:18.146 A:middle
note about this is there's this

00:23:18.266 --> 00:23:20.246 A:middle
IBSegueAction annotation

00:23:20.246 --> 00:23:21.216 A:middle
attached to this function.

00:23:21.776 --> 00:23:23.786 A:middle
And by doing that, we can go to

00:23:23.786 --> 00:23:25.046 A:middle
the connections inspector and

00:23:25.046 --> 00:23:26.726 A:middle
interface builder for our segue

00:23:27.386 --> 00:23:28.796 A:middle
and wire it up directly to this

00:23:28.796 --> 00:23:29.096 A:middle
method.

00:23:30.206 --> 00:23:31.646 A:middle
So we think this is very useful

00:23:31.886 --> 00:23:33.376 A:middle
for adding extra configuration

00:23:33.376 --> 00:23:34.426 A:middle
into your view controllers and

00:23:34.426 --> 00:23:34.976 A:middle
storyboards.

00:23:40.636 --> 00:23:43.006 A:middle
So, a great feature of all

00:23:43.006 --> 00:23:44.606 A:middle
AppKit controls is how they

00:23:44.606 --> 00:23:45.496 A:middle
support auto layout.

00:23:46.096 --> 00:23:47.656 A:middle
They automatically know how to

00:23:47.656 --> 00:23:49.176 A:middle
measure their content and feed

00:23:49.176 --> 00:23:50.406 A:middle
that into auto layout engine.

00:23:50.406 --> 00:23:52.516 A:middle
And that means that you can do

00:23:52.516 --> 00:23:54.066 A:middle
things like change the strings

00:23:54.066 --> 00:23:55.496 A:middle
on these text fields and buttons

00:23:55.716 --> 00:23:56.786 A:middle
and auto layout would just

00:23:56.786 --> 00:23:58.446 A:middle
automatically reflow view

00:23:58.446 --> 00:23:59.926 A:middle
hierarchy and window for us to

00:23:59.926 --> 00:24:00.366 A:middle
look great.

00:23:59.926 --> 00:24:00.366 A:middle
look great.

00:24:02.756 --> 00:24:05.136 A:middle
Sometimes, though, there are UIs

00:24:05.136 --> 00:24:07.026 A:middle
where that's actually not

00:24:07.026 --> 00:24:07.586 A:middle
important.

00:24:07.796 --> 00:24:09.656 A:middle
So in this grid view, it's the

00:24:09.656 --> 00:24:11.516 A:middle
grid that is determining the

00:24:11.516 --> 00:24:13.206 A:middle
size of everything else and the

00:24:13.206 --> 00:24:14.916 A:middle
intrinsic size of these labels

00:24:14.916 --> 00:24:16.016 A:middle
doesn't actually matter.

00:24:16.996 --> 00:24:18.426 A:middle
But normally, AppKit would still

00:24:18.426 --> 00:24:19.556 A:middle
go ahead and measure these

00:24:19.556 --> 00:24:20.696 A:middle
controls and feed them into the

00:24:20.696 --> 00:24:22.036 A:middle
auto layout engine even though

00:24:22.036 --> 00:24:23.376 A:middle
they won't affect the final

00:24:23.376 --> 00:24:23.726 A:middle
result.

00:24:24.316 --> 00:24:28.106 A:middle
In macOS 10.15, you can turn

00:24:28.106 --> 00:24:28.496 A:middle
that off.

00:24:29.306 --> 00:24:31.156 A:middle
NSView gains two new properties

00:24:31.456 --> 00:24:32.746 A:middle
to turn off the measurement

00:24:32.786 --> 00:24:34.276 A:middle
behaviors for both horizontal

00:24:34.276 --> 00:24:35.406 A:middle
and vertical axis.

00:24:35.846 --> 00:24:36.996 A:middle
And we think that can be a great

00:24:36.996 --> 00:24:38.246 A:middle
way of getting back some

00:24:38.246 --> 00:24:40.176 A:middle
performance in UIs where you

00:24:40.176 --> 00:24:41.276 A:middle
know the intrinsic size of the

00:24:41.276 --> 00:24:42.556 A:middle
control isn't going to matter.

00:24:42.916 --> 00:24:48.226 A:middle
There's one other controller

00:24:48.226 --> 00:24:49.166 A:middle
related thing I want to talk

00:24:49.166 --> 00:24:50.356 A:middle
about and it's a bit more broad

00:24:50.356 --> 00:24:51.056 A:middle
than NSControl.

00:24:51.056 --> 00:24:53.596 A:middle
That's NSResponder and its

00:24:53.596 --> 00:24:56.026 A:middle
behavior relating to block

00:24:56.026 --> 00:24:56.406 A:middle
capture.

00:24:57.266 --> 00:24:58.876 A:middle
So if you look at our snippet on

00:24:58.876 --> 00:25:00.686 A:middle
screen, you can see we have two

00:24:58.876 --> 00:25:00.686 A:middle
screen, you can see we have two

00:25:00.686 --> 00:25:01.126 A:middle
blocks.

00:25:01.126 --> 00:25:02.796 A:middle
We have an outer block that's

00:25:02.796 --> 00:25:03.806 A:middle
going to be executed on the

00:25:03.806 --> 00:25:05.756 A:middle
background thread and we have an

00:25:05.756 --> 00:25:07.216 A:middle
inner block that's going to be

00:25:07.216 --> 00:25:08.496 A:middle
executed on the main thread.

00:25:09.046 --> 00:25:10.196 A:middle
And this is a fairly common

00:25:10.196 --> 00:25:10.576 A:middle
pattern.

00:25:10.576 --> 00:25:12.016 A:middle
We do our work in the background

00:25:12.496 --> 00:25:13.746 A:middle
and then we go ahead and assign

00:25:13.746 --> 00:25:14.876 A:middle
the results of that work, to the

00:25:14.876 --> 00:25:16.196 A:middle
UI on the main thread.

00:25:16.976 --> 00:25:19.706 A:middle
But this snippet in macOS 10.14

00:25:20.076 --> 00:25:21.626 A:middle
could have led to crashes and

00:25:21.626 --> 00:25:22.146 A:middle
the corruption.

00:25:22.746 --> 00:25:24.276 A:middle
And that's because if the only

00:25:24.276 --> 00:25:26.136 A:middle
thing retaining this field is

00:25:26.136 --> 00:25:27.996 A:middle
these blocks, the order of

00:25:27.996 --> 00:25:29.156 A:middle
destruction of the blocks isn't

00:25:29.156 --> 00:25:29.606 A:middle
defined.

00:25:30.346 --> 00:25:31.906 A:middle
If the outer block, deallocates

00:25:31.906 --> 00:25:33.356 A:middle
last, the text field will

00:25:33.356 --> 00:25:34.696 A:middle
deallocate on a background

00:25:34.696 --> 00:25:36.716 A:middle
thread and the text field by

00:25:36.716 --> 00:25:38.326 A:middle
virtue of being a responder is

00:25:38.326 --> 00:25:39.526 A:middle
part of the responder chain.

00:25:39.866 --> 00:25:40.966 A:middle
It can be part of the view

00:25:40.966 --> 00:25:42.496 A:middle
hierarchy or the key view loop,

00:25:42.886 --> 00:25:44.246 A:middle
so there's all these global data

00:25:44.246 --> 00:25:45.456 A:middle
structures that aren't safe to

00:25:45.456 --> 00:25:47.096 A:middle
modify from the background which

00:25:47.096 --> 00:25:47.876 A:middle
is what dealloc would do.

00:25:47.876 --> 00:25:52.306 A:middle
In macOS 10.15, this isn't a

00:25:52.306 --> 00:25:52.766 A:middle
problem.

00:25:53.126 --> 00:25:54.886 A:middle
NSResponder will automatically

00:25:54.886 --> 00:25:56.646 A:middle
move the dealloc method for it

00:25:56.646 --> 00:25:58.266 A:middle
and its descendants to the main

00:25:58.266 --> 00:25:58.636 A:middle
thread.

00:25:59.486 --> 00:26:00.766 A:middle
So it becomes safe to capture

00:25:59.486 --> 00:26:00.766 A:middle
So it becomes safe to capture

00:26:00.766 --> 00:26:02.136 A:middle
these in blocks without being

00:26:02.136 --> 00:26:03.216 A:middle
concerned about where those

00:26:03.216 --> 00:26:04.126 A:middle
blocks are released.

00:26:04.126 --> 00:26:05.646 A:middle
And we think this is going to

00:26:06.006 --> 00:26:07.396 A:middle
remove a whole complex set of

00:26:07.466 --> 00:26:08.766 A:middle
crashes from many of your apps

00:26:09.096 --> 00:26:10.536 A:middle
where the corruption from doing

00:26:10.536 --> 00:26:11.586 A:middle
work on a background thread

00:26:11.896 --> 00:26:13.326 A:middle
isn't visible until seconds or

00:26:13.326 --> 00:26:13.956 A:middle
minutes afterward.

00:26:21.586 --> 00:26:23.386 A:middle
So, I want to talk about open

00:26:23.386 --> 00:26:24.546 A:middle
and safe panels for a moment.

00:26:25.416 --> 00:26:27.976 A:middle
We have a fairly broad change in

00:26:27.976 --> 00:26:29.036 A:middle
macOS 10.15.

00:26:29.836 --> 00:26:31.826 A:middle
And that's that open and safe

00:26:31.826 --> 00:26:34.156 A:middle
panels are now using a separate

00:26:34.156 --> 00:26:34.666 A:middle
process.

00:26:35.366 --> 00:26:37.256 A:middle
This is a behavior that's

00:26:37.256 --> 00:26:38.256 A:middle
already been present for

00:26:38.256 --> 00:26:40.256 A:middle
sandboxed applications and we've

00:26:40.256 --> 00:26:41.256 A:middle
simply brought it over to the

00:26:41.256 --> 00:26:41.986 A:middle
remaining apps.

00:26:43.026 --> 00:26:44.386 A:middle
Generally, this should be a

00:26:44.386 --> 00:26:45.106 A:middle
silent change.

00:26:45.106 --> 00:26:45.816 A:middle
We don't think you're going to

00:26:45.816 --> 00:26:48.096 A:middle
notice anything here apart from

00:26:48.096 --> 00:26:49.366 A:middle
some performance and security

00:26:49.366 --> 00:26:50.266 A:middle
benefits.

00:26:50.366 --> 00:26:51.596 A:middle
However, if you were

00:26:51.596 --> 00:26:53.286 A:middle
sub-classing open and safe panel

00:26:53.286 --> 00:26:54.806 A:middle
and relying on specific view

00:26:54.806 --> 00:26:56.426 A:middle
hierarchy configurations, you

00:26:56.426 --> 00:26:58.116 A:middle
might run into problems and we'd

00:26:58.116 --> 00:26:59.446 A:middle
be happy to see you in the labs

00:26:59.446 --> 00:27:00.706 A:middle
to talk about those and help

00:26:59.446 --> 00:27:00.706 A:middle
to talk about those and help

00:27:00.706 --> 00:27:00.976 A:middle
work through them.

00:27:05.256 --> 00:27:06.966 A:middle
We also have some new NSWorspace

00:27:06.966 --> 00:27:10.246 A:middle
methods in macOS 10.15.

00:27:10.246 --> 00:27:11.436 A:middle
These are methods that can open

00:27:11.436 --> 00:27:13.276 A:middle
one or more URLs or open an

00:27:13.276 --> 00:27:13.946 A:middle
application.

00:27:14.526 --> 00:27:15.596 A:middle
And that will sound familiar

00:27:15.596 --> 00:27:16.996 A:middle
because you'll think NSWorspace

00:27:16.996 --> 00:27:18.536 A:middle
already has methods to do that.

00:27:18.926 --> 00:27:21.166 A:middle
It does but the new methods are

00:27:21.166 --> 00:27:21.826 A:middle
asynchronous.

00:27:21.906 --> 00:27:23.056 A:middle
So they're not going to block

00:27:23.056 --> 00:27:23.836 A:middle
the main thread at all.

00:27:24.396 --> 00:27:25.676 A:middle
When the application finishes

00:27:25.676 --> 00:27:27.086 A:middle
launching or the operation is

00:27:27.086 --> 00:27:28.436 A:middle
canceled, we will call you back

00:27:28.436 --> 00:27:29.536 A:middle
using a completion handler.

00:27:29.656 --> 00:27:31.436 A:middle
And in addition to be an

00:27:31.436 --> 00:27:33.406 A:middle
asynchronous, these methods also

00:27:33.406 --> 00:27:35.016 A:middle
offer a high degree of control

00:27:35.256 --> 00:27:36.916 A:middle
over how we launch those URLs

00:27:37.086 --> 00:27:37.906 A:middle
and applications.

00:27:38.036 --> 00:27:40.516 A:middle
And that control is achieved

00:27:40.886 --> 00:27:42.746 A:middle
through the new NSWorspace open

00:27:42.746 --> 00:27:43.886 A:middle
configuration object.

00:27:44.256 --> 00:27:46.936 A:middle
This is just a sampling of the

00:27:46.936 --> 00:27:48.626 A:middle
knobs it has to play with but

00:27:48.626 --> 00:27:50.196 A:middle
you can control whether the user

00:27:50.196 --> 00:27:51.296 A:middle
needs to participate on this

00:27:51.336 --> 00:27:51.806 A:middle
process.

00:27:51.806 --> 00:27:53.306 A:middle
So for example, if you're

00:27:53.306 --> 00:27:54.676 A:middle
requesting a server mount or if

00:27:54.676 --> 00:27:55.776 A:middle
we don't know what application

00:27:55.776 --> 00:27:57.126 A:middle
to use, the user might need to

00:27:57.126 --> 00:27:59.036 A:middle
pick which application and you

00:27:59.036 --> 00:28:00.036 A:middle
can instead suppress that

00:27:59.036 --> 00:28:00.036 A:middle
can instead suppress that

00:28:00.036 --> 00:28:01.216 A:middle
behavior and just cancel the

00:28:01.216 --> 00:28:01.946 A:middle
open process.

00:28:02.046 --> 00:28:04.036 A:middle
You can also control whether an

00:28:04.036 --> 00:28:05.666 A:middle
application or document is added

00:28:05.666 --> 00:28:06.476 A:middle
to the Recents menu.

00:28:07.266 --> 00:28:08.836 A:middle
And there's an entire variety of

00:28:08.836 --> 00:28:09.936 A:middle
things for controlling which

00:28:09.936 --> 00:28:11.276 A:middle
applications can be hidden on

00:28:11.276 --> 00:28:12.856 A:middle
launch or which are activated in

00:28:12.856 --> 00:28:13.886 A:middle
the background or foreground.

00:28:14.566 --> 00:28:16.256 A:middle
So we think whatever your URL

00:28:16.256 --> 00:28:17.676 A:middle
application opening needs,

00:28:17.966 --> 00:28:19.416 A:middle
NSWorspace will accommodate it

00:28:19.416 --> 00:28:21.006 A:middle
wonderfully in macOS 10.15.

00:28:25.656 --> 00:28:27.686 A:middle
We're going to talk events for a

00:28:27.686 --> 00:28:28.106 A:middle
little bit.

00:28:28.106 --> 00:28:30.536 A:middle
And there's a feature I want to

00:28:30.536 --> 00:28:30.926 A:middle
show you.

00:28:31.216 --> 00:28:33.176 A:middle
And this is-- if you hover your

00:28:33.176 --> 00:28:36.096 A:middle
mouse over the green button in

00:28:36.096 --> 00:28:37.656 A:middle
the window title bar, you're

00:28:37.656 --> 00:28:38.706 A:middle
going to get this new menu.

00:28:39.216 --> 00:28:40.506 A:middle
And the first set of options

00:28:40.746 --> 00:28:42.106 A:middle
concerns things like making a

00:28:42.106 --> 00:28:43.356 A:middle
window full screen or

00:28:43.386 --> 00:28:44.926 A:middle
positioning it in a shared full

00:28:44.926 --> 00:28:45.686 A:middle
screen space.

00:28:46.046 --> 00:28:47.286 A:middle
And those are fairly useful.

00:28:47.776 --> 00:28:49.006 A:middle
But there's another feature that

00:28:49.006 --> 00:28:50.936 A:middle
I think is even more useful and

00:28:50.936 --> 00:28:52.136 A:middle
that's the ability to move a

00:28:52.136 --> 00:28:53.486 A:middle
window to another display.

00:28:53.636 --> 00:28:56.176 A:middle
As someone who is constantly

00:28:56.176 --> 00:28:57.526 A:middle
moving their laptop to different

00:28:57.526 --> 00:28:59.056 A:middle
external monitors, I found this

00:28:59.056 --> 00:29:01.296 A:middle
to be incredibly useful but you

00:28:59.056 --> 00:29:01.296 A:middle
to be incredibly useful but you

00:29:01.296 --> 00:29:02.486 A:middle
don't actually have to use a

00:29:02.486 --> 00:29:05.086 A:middle
conventional display, iPads will

00:29:05.086 --> 00:29:06.466 A:middle
function as additional displays

00:29:06.466 --> 00:29:06.936 A:middle
now too.

00:29:08.626 --> 00:29:09.536 A:middle
So you kind of see where I'm

00:29:09.536 --> 00:29:10.456 A:middle
going with this given that the

00:29:10.456 --> 00:29:12.066 A:middle
iPad application is named pencil

00:29:12.066 --> 00:29:13.296 A:middle
draw and we have this beautiful

00:29:13.296 --> 00:29:14.726 A:middle
cursive script on there.

00:29:15.596 --> 00:29:17.106 A:middle
This supports Apple Pencil so

00:29:17.106 --> 00:29:19.456 A:middle
many iPads can now function as

00:29:19.456 --> 00:29:21.146 A:middle
tablet devices for Macs.

00:29:22.076 --> 00:29:23.656 A:middle
So in macOS 10.15, we're going

00:29:23.656 --> 00:29:25.286 A:middle
to have many more tablet users.

00:29:25.976 --> 00:29:27.676 A:middle
If you've been thinking about

00:29:27.676 --> 00:29:28.986 A:middle
adding tablet support to your

00:29:28.986 --> 00:29:30.716 A:middle
app at any point in the last

00:29:30.716 --> 00:29:32.726 A:middle
many years, now is a great time

00:29:32.726 --> 00:29:33.336 A:middle
to adopt it.

00:29:33.336 --> 00:29:35.186 A:middle
So I'm going to show what you

00:29:35.186 --> 00:29:36.666 A:middle
need to know to do that.

00:29:37.676 --> 00:29:40.836 A:middle
Tablet events come in basically

00:29:40.836 --> 00:29:41.926 A:middle
as normal mouse events.

00:29:43.646 --> 00:29:44.866 A:middle
There's a difference though and

00:29:44.866 --> 00:29:46.286 A:middle
that's if you pay attention to

00:29:46.326 --> 00:29:47.706 A:middle
the NSEvents subtype field,

00:29:48.026 --> 00:29:49.726 A:middle
there is a tablet point value

00:29:49.726 --> 00:29:49.906 A:middle
there.

00:29:50.036 --> 00:29:52.226 A:middle
And when you see a tablet point

00:29:52.226 --> 00:29:53.876 A:middle
event it, one, comes from a

00:29:53.876 --> 00:29:56.226 A:middle
tablet but it's also going to

00:29:56.226 --> 00:29:57.466 A:middle
have pressure information

00:29:57.466 --> 00:29:57.956 A:middle
attached.

00:29:58.596 --> 00:29:59.596 A:middle
And paying attention to that

00:29:59.596 --> 00:30:01.016 A:middle
pressure information is critical

00:29:59.596 --> 00:30:01.016 A:middle
pressure information is critical

00:30:01.016 --> 00:30:02.236 A:middle
for making things like that nice

00:30:02.236 --> 00:30:03.716 A:middle
cursive stroke where you have

00:30:03.946 --> 00:30:05.506 A:middle
different pen width throughout

00:30:05.796 --> 00:30:05.866 A:middle
it.

00:30:07.176 --> 00:30:09.186 A:middle
If you've used the pencil APIs

00:30:09.186 --> 00:30:11.026 A:middle
on iOS in the past, there was

00:30:11.236 --> 00:30:12.846 A:middle
something that you could do by

00:30:12.846 --> 00:30:13.956 A:middle
registering a handler to

00:30:13.956 --> 00:30:15.946 A:middle
retroactively receive updates to

00:30:15.946 --> 00:30:17.826 A:middle
pressure in the past.

00:30:17.826 --> 00:30:19.076 A:middle
That is not present on the Mac.

00:30:19.176 --> 00:30:20.226 A:middle
You can just pay attention to

00:30:20.226 --> 00:30:21.576 A:middle
the pressure field in the

00:30:21.576 --> 00:30:22.366 A:middle
NSEvent.

00:30:25.096 --> 00:30:26.586 A:middle
There's another convention

00:30:26.666 --> 00:30:28.056 A:middle
related to the Apple Pencil I

00:30:28.056 --> 00:30:28.696 A:middle
want to mention.

00:30:29.316 --> 00:30:30.666 A:middle
And this is that you can double

00:30:30.666 --> 00:30:32.476 A:middle
tap it the side of the pencil

00:30:32.956 --> 00:30:34.696 A:middle
and it will switch whatever the

00:30:34.696 --> 00:30:35.846 A:middle
current tool is in the drawing

00:30:35.846 --> 00:30:36.576 A:middle
app for example.

00:30:37.156 --> 00:30:38.406 A:middle
And we call this the change mode

00:30:38.406 --> 00:30:38.676 A:middle
event.

00:30:39.206 --> 00:30:40.416 A:middle
There's a new event type for it

00:30:40.416 --> 00:30:41.766 A:middle
on this event and there's a new

00:30:41.766 --> 00:30:43.416 A:middle
responder method to handle

00:30:43.416 --> 00:30:44.756 A:middle
directing that through the

00:30:44.756 --> 00:30:45.526 A:middle
responder chain.

00:30:46.716 --> 00:30:49.866 A:middle
In many cases, you might want to

00:30:49.866 --> 00:30:51.426 A:middle
have tablet functionality that

00:30:51.426 --> 00:30:53.116 A:middle
isn't actually anchored in a

00:30:53.116 --> 00:30:54.676 A:middle
responder subclass like a view

00:30:54.936 --> 00:30:56.616 A:middle
but you might still want to

00:30:56.616 --> 00:30:58.026 A:middle
handle events directly and

00:30:58.026 --> 00:30:59.456 A:middle
there's a way you can accomplish

00:30:59.456 --> 00:31:01.206 A:middle
this using the existing local

00:30:59.456 --> 00:31:01.206 A:middle
this using the existing local

00:31:01.206 --> 00:31:02.086 A:middle
event monitor API.

00:31:03.256 --> 00:31:04.556 A:middle
So if you look at the snippet on

00:31:04.556 --> 00:31:06.336 A:middle
the bottom of the screen, you

00:31:06.476 --> 00:31:08.276 A:middle
can see that we use the NSEvent

00:31:08.276 --> 00:31:09.726 A:middle
add local event monitor for

00:31:09.726 --> 00:31:12.326 A:middle
events function to catch these

00:31:12.326 --> 00:31:13.256 A:middle
change mode events.

00:31:13.356 --> 00:31:14.706 A:middle
And then we just cycle through

00:31:14.706 --> 00:31:16.106 A:middle
our tools and we return the

00:31:16.106 --> 00:31:17.646 A:middle
event allowing it to flow

00:31:17.646 --> 00:31:18.186 A:middle
through the rest of the

00:31:18.186 --> 00:31:18.886 A:middle
responder chain.

00:31:19.006 --> 00:31:21.496 A:middle
So that can be a great way of

00:31:21.496 --> 00:31:23.506 A:middle
factoring your code more

00:31:23.506 --> 00:31:23.926 A:middle
usefully.

00:31:27.746 --> 00:31:30.836 A:middle
OK. Let's talk about a

00:31:30.836 --> 00:31:31.766 A:middle
foundation feature.

00:31:32.296 --> 00:31:33.526 A:middle
We have some new geometry data

00:31:33.526 --> 00:31:33.916 A:middle
types.

00:31:33.916 --> 00:31:35.036 A:middle
I know normally when we get into

00:31:35.036 --> 00:31:36.496 A:middle
foundation everyone is on the

00:31:36.496 --> 00:31:37.136 A:middle
edge of their seat.

00:31:37.796 --> 00:31:39.276 A:middle
This year, you can pick which

00:31:39.276 --> 00:31:42.736 A:middle
edge of the seat you're on

00:31:42.736 --> 00:31:43.086 A:middle
[laughter].

00:31:43.086 --> 00:31:44.366 A:middle
The data types are

00:31:44.366 --> 00:31:45.896 A:middle
NSDirectionalRectEdge,

00:31:46.366 --> 00:31:48.446 A:middle
NSDirectionalEdgeInsets, and

00:31:48.566 --> 00:31:49.336 A:middle
NSRectAlignment.

00:31:49.446 --> 00:31:51.176 A:middle
And instead of working in

00:31:51.176 --> 00:31:53.106 A:middle
currency like min-X or max-X or

00:31:53.106 --> 00:31:54.946 A:middle
left and right, these are using

00:31:55.036 --> 00:31:56.606 A:middle
leading and trailing identifiers

00:31:56.606 --> 00:31:57.026 A:middle
instead.

00:31:57.216 --> 00:31:58.806 A:middle
So they'll automatically flip

00:31:58.806 --> 00:32:00.486 A:middle
based on context in the left to

00:31:58.806 --> 00:32:00.486 A:middle
based on context in the left to

00:32:00.486 --> 00:32:02.106 A:middle
right or right to left system.

00:32:02.376 --> 00:32:04.546 A:middle
And NSCollectionVeiw uses these

00:32:04.546 --> 00:32:05.876 A:middle
exactly for this purpose.

00:32:06.006 --> 00:32:07.246 A:middle
We think you'll be able to adopt

00:32:07.246 --> 00:32:08.136 A:middle
them directly in your

00:32:08.136 --> 00:32:08.976 A:middle
applications too.

00:32:12.936 --> 00:32:14.456 A:middle
Another foundation feature I

00:32:14.456 --> 00:32:15.466 A:middle
want to talk about that will

00:32:15.466 --> 00:32:17.036 A:middle
help with localization is new

00:32:17.036 --> 00:32:17.766 A:middle
formatters.

00:32:18.906 --> 00:32:20.576 A:middle
The first of these is the

00:32:20.576 --> 00:32:23.436 A:middle
NSRelativeDateFormatter.

00:32:23.436 --> 00:32:25.096 A:middle
And NSRelativeDateFormatter has

00:32:25.096 --> 00:32:26.256 A:middle
two important properties, a

00:32:26.256 --> 00:32:28.176 A:middle
dateTimeStyle which allows you

00:32:28.226 --> 00:32:29.416 A:middle
to pick whether you're sort of

00:32:29.416 --> 00:32:30.536 A:middle
working in absolute units or

00:32:30.536 --> 00:32:31.986 A:middle
more colloquial terms, the one

00:32:31.986 --> 00:32:33.536 A:middle
week ago versus last week, as

00:32:33.786 --> 00:32:35.096 A:middle
well as the unitStyle

00:32:35.096 --> 00:32:37.336 A:middle
controlling how verbose or how

00:32:37.416 --> 00:32:39.486 A:middle
terse our languages.

00:32:42.056 --> 00:32:43.376 A:middle
There's also a new

00:32:43.436 --> 00:32:44.686 A:middle
NSListFormatter class.

00:32:45.416 --> 00:32:46.506 A:middle
And NSListFormatter is

00:32:46.506 --> 00:32:47.826 A:middle
interesting in that instead of

00:32:47.826 --> 00:32:49.676 A:middle
formatting sort of a scalar

00:32:49.676 --> 00:32:51.606 A:middle
object, it will format an array

00:32:51.606 --> 00:32:52.636 A:middle
of objects instead.

00:32:52.636 --> 00:32:55.206 A:middle
And it will do that by using a

00:32:55.206 --> 00:32:56.856 A:middle
separate item formatter for each

00:32:56.856 --> 00:32:57.776 A:middle
object individually.

00:32:58.646 --> 00:33:01.316 A:middle
The value the ListFormatter adds

00:32:58.646 --> 00:33:01.316 A:middle
The value the ListFormatter adds

00:33:01.316 --> 00:33:02.546 A:middle
is in knowing where to place the

00:33:02.546 --> 00:33:04.196 A:middle
commas between the individual

00:33:04.196 --> 00:33:06.226 A:middle
formatted strings as well as

00:33:06.226 --> 00:33:07.366 A:middle
whether an Oxford comma is

00:33:07.366 --> 00:33:08.646 A:middle
necessary or a conjunction.

00:33:08.996 --> 00:33:10.906 A:middle
There's a section covering this

00:33:10.906 --> 00:33:12.256 A:middle
in much greater detail later,

00:33:12.336 --> 00:33:14.046 A:middle
which I encourage you to check

00:33:14.046 --> 00:33:14.926 A:middle
out.

00:33:17.116 --> 00:33:19.356 A:middle
Foundation also has a new

00:33:19.356 --> 00:33:20.746 A:middle
feature we're very excited about

00:33:20.746 --> 00:33:21.516 A:middle
called Combine.

00:33:21.566 --> 00:33:24.826 A:middle
And Combine is a Swift API for

00:33:24.826 --> 00:33:26.356 A:middle
connecting properties of the

00:33:26.356 --> 00:33:27.886 A:middle
objects in your applications to

00:33:27.886 --> 00:33:29.876 A:middle
other properties in your

00:33:29.876 --> 00:33:30.406 A:middle
application.

00:33:31.246 --> 00:33:33.386 A:middle
So a specific example I want to

00:33:33.386 --> 00:33:35.666 A:middle
show is this awakeFromNib method

00:33:35.666 --> 00:33:37.336 A:middle
we've implemented where we go

00:33:37.336 --> 00:33:38.766 A:middle
ahead and we bind to the name

00:33:38.766 --> 00:33:40.296 A:middle
property from our model object

00:33:40.666 --> 00:33:42.266 A:middle
to the value of an NSTextField.

00:33:42.266 --> 00:33:44.136 A:middle
And whenever that name changes,

00:33:44.336 --> 00:33:45.326 A:middle
that text field is going to

00:33:45.326 --> 00:33:46.186 A:middle
update its string.

00:33:46.756 --> 00:33:48.696 A:middle
So this is incredibly powerful.

00:33:48.996 --> 00:33:50.526 A:middle
It has applications beyond just

00:33:50.526 --> 00:33:51.236 A:middle
UI binding.

00:33:51.556 --> 00:33:52.616 A:middle
And there's another section

00:33:52.616 --> 00:33:54.136 A:middle
dedicated to specifically this

00:33:54.136 --> 00:33:54.926 A:middle
that we think is going to be

00:33:54.926 --> 00:33:55.536 A:middle
fantastic.

00:33:56.366 --> 00:33:57.616 A:middle
So go ahead and check that out

00:33:57.616 --> 00:33:57.956 A:middle
this week too.

00:34:02.056 --> 00:34:04.076 A:middle
And finally, I want to mention

00:34:04.076 --> 00:34:04.996 A:middle
some changes in system

00:34:04.996 --> 00:34:06.316 A:middle
extensions for Mac OS.

00:34:07.476 --> 00:34:08.916 A:middle
We have a small addition to the

00:34:08.916 --> 00:34:11.036 A:middle
system extension family in the

00:34:11.036 --> 00:34:13.306 A:middle
form of a non-UI file provider

00:34:13.306 --> 00:34:14.116 A:middle
action extension.

00:34:14.636 --> 00:34:16.735 A:middle
And if you are familiar with UI

00:34:16.735 --> 00:34:18.735 A:middle
base file-- or file provider

00:34:18.735 --> 00:34:20.146 A:middle
action extension, this is the

00:34:20.146 --> 00:34:21.786 A:middle
same thing but sometimes you

00:34:21.786 --> 00:34:23.255 A:middle
just don't need that extra UI.

00:34:23.366 --> 00:34:24.876 A:middle
You can do without it and this

00:34:24.876 --> 00:34:25.876 A:middle
satisfies that need.

00:34:27.696 --> 00:34:29.686 A:middle
Something else that we think is

00:34:29.686 --> 00:34:31.755 A:middle
even more interesting is there's

00:34:31.755 --> 00:34:33.525 A:middle
functionality that in the past

00:34:33.525 --> 00:34:34.335 A:middle
you would have had to use a

00:34:34.335 --> 00:34:35.706 A:middle
kernel extension to add at the

00:34:35.706 --> 00:34:36.056 A:middle
OS.

00:34:36.156 --> 00:34:37.636 A:middle
And we've now made system

00:34:37.636 --> 00:34:39.545 A:middle
extensions to do similar things.

00:34:40.196 --> 00:34:41.616 A:middle
We have new network extensions.

00:34:41.985 --> 00:34:43.585 A:middle
We have DriverKit to help

00:34:43.585 --> 00:34:45.106 A:middle
writing certain types of device

00:34:45.106 --> 00:34:45.606 A:middle
drivers.

00:34:46.056 --> 00:34:47.356 A:middle
And we have a new endpoint

00:34:47.356 --> 00:34:48.626 A:middle
security system that will help

00:34:48.626 --> 00:34:49.775 A:middle
write antivirus software.

00:34:50.396 --> 00:34:51.556 A:middle
So if you have been writing

00:34:51.556 --> 00:34:52.696 A:middle
kernel extension all these

00:34:52.696 --> 00:34:53.755 A:middle
years, we think these will be

00:34:53.755 --> 00:34:54.815 A:middle
very useful for you.

00:34:55.315 --> 00:34:57.106 A:middle
We're excited with a security

00:34:57.106 --> 00:34:58.016 A:middle
enhancements we get to make

00:34:58.016 --> 00:34:59.046 A:middle
around this and we think you'll

00:34:59.046 --> 00:35:00.256 A:middle
be excited about not doing

00:34:59.046 --> 00:35:00.256 A:middle
be excited about not doing

00:35:00.256 --> 00:35:03.096 A:middle
kernel-mode debugging anymore.

00:35:03.806 --> 00:35:06.226 A:middle
So, that covers our additions.

00:35:06.916 --> 00:35:09.066 A:middle
I want to remind you of many of

00:35:09.066 --> 00:35:10.446 A:middle
the great things that we covered

00:35:10.446 --> 00:35:10.696 A:middle
today.

00:35:11.496 --> 00:35:12.816 A:middle
We had additions for NSColor

00:35:12.816 --> 00:35:14.046 A:middle
including new dynamic system

00:35:14.046 --> 00:35:15.746 A:middle
colors, new ways of embedding

00:35:15.746 --> 00:35:17.396 A:middle
your own programmatic dynamism,

00:35:17.396 --> 00:35:19.786 A:middle
under the NSColor system as well

00:35:19.786 --> 00:35:20.996 A:middle
as the ColorSampler class you

00:35:20.996 --> 00:35:22.466 A:middle
can use yourself for picking

00:35:22.466 --> 00:35:23.756 A:middle
colors directly from the screen.

00:35:24.436 --> 00:35:27.346 A:middle
We covered a number of APIs and

00:35:27.346 --> 00:35:28.946 A:middle
NSScreen including those for you

00:35:28.946 --> 00:35:30.376 A:middle
to make a great usage of

00:35:30.376 --> 00:35:31.616 A:middle
extended dynamic range.

00:35:31.686 --> 00:35:34.506 A:middle
And we have an entire variety of

00:35:34.506 --> 00:35:35.436 A:middle
text enhancements.

00:35:35.496 --> 00:35:38.066 A:middle
If you want your apps to look

00:35:38.066 --> 00:35:39.546 A:middle
great in Dark Mode and you're

00:35:39.696 --> 00:35:41.016 A:middle
presenting either simple or rich

00:35:41.016 --> 00:35:43.356 A:middle
text, the Dark Mode enhancements

00:35:43.356 --> 00:35:44.656 A:middle
are going to great, the text

00:35:44.656 --> 00:35:45.636 A:middle
tracking controllers will let

00:35:45.636 --> 00:35:46.946 A:middle
you enrich your own text engines

00:35:46.946 --> 00:35:49.066 A:middle
like never before, and our

00:35:49.066 --> 00:35:51.316 A:middle
compatibility between iOS and

00:35:51.316 --> 00:35:53.506 A:middle
Mac OS regarding text sizing is

00:35:53.506 --> 00:35:55.326 A:middle
very useful especially given the

00:35:55.326 --> 00:35:56.636 A:middle
presence of UIKit on the Mac

00:35:56.636 --> 00:35:56.946 A:middle
this year.

00:35:57.916 --> 00:36:00.786 A:middle
We covered controls like

00:35:57.916 --> 00:36:00.786 A:middle
We covered controls like

00:36:00.876 --> 00:36:02.596 A:middle
NSSwitch as well as collection

00:36:02.596 --> 00:36:02.826 A:middle
view.

00:36:03.026 --> 00:36:04.416 A:middle
And we definitely encourage you

00:36:04.416 --> 00:36:05.446 A:middle
to check out the collection view

00:36:05.446 --> 00:36:06.566 A:middle
section because collection view

00:36:06.566 --> 00:36:07.846 A:middle
has become a very important part

00:36:07.846 --> 00:36:08.976 A:middle
of our UI vocabulary.

00:36:10.386 --> 00:36:11.126 A:middle
We covered some great

00:36:11.126 --> 00:36:12.416 A:middle
enhancement for NSToolbar

00:36:12.706 --> 00:36:13.556 A:middle
allowing you to make push

00:36:13.556 --> 00:36:15.696 A:middle
buttons more easily and more

00:36:15.696 --> 00:36:17.996 A:middle
versatile ways of using the tool

00:36:17.996 --> 00:36:18.746 A:middle
bar item group.

00:36:18.746 --> 00:36:23.006 A:middle
And then we've also covered some

00:36:23.006 --> 00:36:24.136 A:middle
things for handling tablet

00:36:24.136 --> 00:36:25.936 A:middle
events in NSEvent and specific

00:36:25.936 --> 00:36:27.106 A:middle
support for the Apple Pencil.

00:36:27.536 --> 00:36:28.716 A:middle
And again, with so many more

00:36:28.716 --> 00:36:30.046 A:middle
tablet users coming to the Mac

00:36:30.046 --> 00:36:31.586 A:middle
in the near future, we think if

00:36:31.586 --> 00:36:33.326 A:middle
your app can use tablets, it's a

00:36:33.376 --> 00:36:34.196 A:middle
great feature to add.

00:36:34.326 --> 00:36:36.446 A:middle
And we wrapped up with the

00:36:36.446 --> 00:36:38.906 A:middle
localization enhancements for NS

00:36:38.906 --> 00:36:40.166 A:middle
or for foundation geometry data

00:36:40.166 --> 00:36:41.886 A:middle
types and then new formatters.

00:36:43.286 --> 00:36:44.886 A:middle
So we hope you're excited to

00:36:44.886 --> 00:36:45.626 A:middle
adopt these too.

00:36:46.166 --> 00:36:47.386 A:middle
And please have a great week.

00:36:47.556 --> 00:36:48.976 A:middle
Thank you very much.

00:36:49.516 --> 00:36:56.500 A:middle
[ Applause ]
