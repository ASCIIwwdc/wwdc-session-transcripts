WEBVTT

00:00:01.176 --> 00:00:04.500 A:middle
[ Music ]

00:00:08.321 --> 00:00:10.321 A:middle
[ Applause ]

00:00:10.626 --> 00:00:10.896 A:middle
&gt;&gt; Good morning.

00:00:11.516 --> 00:00:15.736 A:middle
[ Applause ]

00:00:16.236 --> 00:00:16.826 A:middle
Good morning.

00:00:17.016 --> 00:00:18.316 A:middle
And welcome to SwiftUI

00:00:18.436 --> 00:00:19.136 A:middle
Essentials.

00:00:19.696 --> 00:00:21.376 A:middle
My name is Matt Ricketson and I

00:00:21.376 --> 00:00:23.276 A:middle
work on SwiftUI and later I'll

00:00:23.276 --> 00:00:24.296 A:middle
be joined by my colleague

00:00:24.296 --> 00:00:24.676 A:middle
Taylor.

00:00:25.276 --> 00:00:26.326 A:middle
So what do you all think of

00:00:26.326 --> 00:00:26.906 A:middle
SwiftUI so far?

00:00:27.516 --> 00:00:32.396 A:middle
[ Applause ]

00:00:32.896 --> 00:00:34.566 A:middle
Me too. I'm incredibly excited

00:00:34.566 --> 00:00:36.016 A:middle
to talk to you today about

00:00:36.016 --> 00:00:36.436 A:middle
SwiftUI.

00:00:37.266 --> 00:00:38.126 A:middle
Now we have a lot to cover in

00:00:38.126 --> 00:00:39.476 A:middle
this session, so let's dive

00:00:39.476 --> 00:00:39.846 A:middle
right in.

00:00:42.036 --> 00:00:44.606 A:middle
SwiftUI is a new framework that

00:00:45.066 --> 00:00:46.876 A:middle
is designed to give you the

00:00:46.876 --> 00:00:49.266 A:middle
shortest path to building a

00:00:49.266 --> 00:00:49.686 A:middle
great app.

00:00:50.456 --> 00:00:51.736 A:middle
And that means giving you the

00:00:51.736 --> 00:00:53.846 A:middle
shortest path to building great

00:00:54.006 --> 00:00:55.026 A:middle
user interfaces.

00:00:55.886 --> 00:00:57.876 A:middle
But even though SwiftUI is a new

00:00:57.876 --> 00:00:59.846 A:middle
framework, a lot of it will

00:00:59.846 --> 00:01:01.156 A:middle
already look familiar to you.

00:00:59.846 --> 00:01:01.156 A:middle
already look familiar to you.

00:01:01.766 --> 00:01:04.056 A:middle
And that's because it has all of

00:01:04.056 --> 00:01:05.626 A:middle
the basic components that you'd

00:01:05.626 --> 00:01:06.916 A:middle
expect from a UI framework.

00:01:07.846 --> 00:01:10.356 A:middle
It has controls like buttons and

00:01:10.356 --> 00:01:10.966 A:middle
text fields.

00:01:11.856 --> 00:01:13.896 A:middle
It has layout containers like

00:01:13.896 --> 00:01:15.236 A:middle
stacks and lists.

00:01:15.886 --> 00:01:18.586 A:middle
It has drawing, animations and

00:01:18.586 --> 00:01:19.106 A:middle
gestures.

00:01:19.476 --> 00:01:21.236 A:middle
And SwiftUI even embraces

00:01:21.536 --> 00:01:23.586 A:middle
platform-specific concepts like

00:01:23.586 --> 00:01:25.756 A:middle
menus on the Mac, the Digital

00:01:25.756 --> 00:01:27.946 A:middle
Crown on Apple Watch, and the

00:01:27.946 --> 00:01:29.596 A:middle
Siri remote on Apple TV.

00:01:29.596 --> 00:01:33.066 A:middle
And so the takeaway here is that

00:01:33.066 --> 00:01:34.596 A:middle
we're not trying to reinvent the

00:01:34.596 --> 00:01:35.546 A:middle
wheel with SwiftUI.

00:01:36.776 --> 00:01:39.196 A:middle
But as we all know, the reality

00:01:39.196 --> 00:01:40.666 A:middle
is that just knowing how to use

00:01:40.666 --> 00:01:42.906 A:middle
these kinds of components is not

00:01:42.906 --> 00:01:45.026 A:middle
what it takes to build a great

00:01:45.916 --> 00:01:48.186 A:middle
app, because a great app also

00:01:48.186 --> 00:01:50.186 A:middle
needs to account for these kinds

00:01:50.186 --> 00:01:50.636 A:middle
of things.

00:01:51.346 --> 00:01:53.326 A:middle
It needs to be accessible and

00:01:53.326 --> 00:01:54.916 A:middle
work with features like dynamic

00:01:55.046 --> 00:01:55.246 A:middle
type.

00:01:56.366 --> 00:01:57.546 A:middle
It needs to adapt to different

00:01:57.546 --> 00:02:00.216 A:middle
devices and screen sizes and

00:01:57.546 --> 00:02:00.216 A:middle
devices and screen sizes and

00:02:00.216 --> 00:02:00.936 A:middle
input types.

00:02:01.366 --> 00:02:03.216 A:middle
And it needs to come alive with

00:02:03.466 --> 00:02:04.386 A:middle
things like interactive

00:02:04.386 --> 00:02:06.636 A:middle
animations and support for

00:02:06.636 --> 00:02:08.066 A:middle
system features like Dark Mode

00:02:08.526 --> 00:02:09.256 A:middle
and Drag and Drop.

00:02:10.795 --> 00:02:12.216 A:middle
These are the kinds of things

00:02:12.646 --> 00:02:14.386 A:middle
that help your app to reach the

00:02:14.386 --> 00:02:16.146 A:middle
largest possible audience and

00:02:16.146 --> 00:02:18.056 A:middle
also help keep it feeling

00:02:18.056 --> 00:02:18.436 A:middle
modern.

00:02:19.046 --> 00:02:23.206 A:middle
Now we all know that even this

00:02:23.206 --> 00:02:24.916 A:middle
though is not the whole picture,

00:02:26.056 --> 00:02:27.516 A:middle
because of course you also add

00:02:27.516 --> 00:02:29.346 A:middle
in your own unique features that

00:02:29.346 --> 00:02:31.016 A:middle
make your apps stand out from

00:02:31.016 --> 00:02:31.416 A:middle
the crowd.

00:02:32.476 --> 00:02:34.206 A:middle
So I just want to take a moment

00:02:34.206 --> 00:02:35.756 A:middle
to step back and acknowledge

00:02:36.546 --> 00:02:38.156 A:middle
that this is a lot of stuff to

00:02:38.156 --> 00:02:38.756 A:middle
have to learn.

00:02:39.796 --> 00:02:40.706 A:middle
It's a lot of stuff to have to

00:02:40.706 --> 00:02:43.116 A:middle
code and maintain, and so how

00:02:43.116 --> 00:02:45.496 A:middle
can SwiftUI help you with all

00:02:47.416 --> 00:02:47.526 A:middle
this?

00:02:48.036 --> 00:02:49.136 A:middle
Well, think about your own apps

00:02:49.136 --> 00:02:49.586 A:middle
for a moment.

00:02:50.606 --> 00:02:51.636 A:middle
First, you have those basic

00:02:51.636 --> 00:02:53.546 A:middle
features that everyone expects

00:02:53.546 --> 00:02:55.596 A:middle
from your app, like controls and

00:02:55.596 --> 00:02:57.576 A:middle
navigation, being accessible and

00:02:57.696 --> 00:02:58.786 A:middle
adapting your layout to

00:02:58.786 --> 00:02:59.536 A:middle
different devices.

00:03:00.856 --> 00:03:02.956 A:middle
We need to do these things and

00:03:02.956 --> 00:03:04.596 A:middle
we need to do them right in

00:03:04.596 --> 00:03:06.136 A:middle
order to build a really great

00:03:06.136 --> 00:03:06.206 A:middle
app.

00:03:08.606 --> 00:03:09.296 A:middle
But then there are those

00:03:09.296 --> 00:03:11.636 A:middle
exciting custom features that

00:03:11.636 --> 00:03:12.476 A:middle
are unique to your app.

00:03:12.476 --> 00:03:14.776 A:middle
And these are also the fun

00:03:14.776 --> 00:03:16.996 A:middle
features, the features that we

00:03:16.996 --> 00:03:19.046 A:middle
pour our passion into, the

00:03:19.046 --> 00:03:20.886 A:middle
features that make us feel proud

00:03:20.886 --> 00:03:21.606 A:middle
of what we've built.

00:03:22.856 --> 00:03:24.816 A:middle
And so the goal of SwiftUI is

00:03:24.896 --> 00:03:27.376 A:middle
pretty simple: we want you to

00:03:27.376 --> 00:03:28.736 A:middle
spend as much of your time as

00:03:28.736 --> 00:03:30.966 A:middle
possible on that fun stuff and

00:03:30.966 --> 00:03:32.666 A:middle
less time on the basic stuff,

00:03:32.756 --> 00:03:35.236 A:middle
but without compromising on

00:03:35.236 --> 00:03:35.746 A:middle
quality.

00:03:36.856 --> 00:03:38.986 A:middle
And this is what we mean by

00:03:38.986 --> 00:03:40.846 A:middle
giving you the shortest path to

00:03:40.846 --> 00:03:41.956 A:middle
a great app.

00:03:42.176 --> 00:03:43.346 A:middle
Because all of you are building

00:03:43.346 --> 00:03:44.346 A:middle
great apps already.

00:03:45.116 --> 00:03:46.056 A:middle
We just want to help you get

00:03:46.096 --> 00:03:47.956 A:middle
there a little bit faster.

00:03:50.056 --> 00:03:51.536 A:middle
This session is about giving you

00:03:51.576 --> 00:03:52.856 A:middle
a better understanding of

00:03:52.856 --> 00:03:53.206 A:middle
SwiftUI.

00:03:53.206 --> 00:03:54.986 A:middle
We're going to look at some

00:03:54.986 --> 00:03:56.736 A:middle
code, but we're also going to

00:03:56.736 --> 00:03:58.796 A:middle
talk about SwiftUI's design and

00:03:58.796 --> 00:04:00.356 A:middle
how it helps you build better

00:03:58.796 --> 00:04:00.356 A:middle
how it helps you build better

00:04:00.506 --> 00:04:00.746 A:middle
apps.

00:04:01.846 --> 00:04:02.816 A:middle
By the end of this session,

00:04:03.586 --> 00:04:04.916 A:middle
you'll be able to build a

00:04:04.916 --> 00:04:06.826 A:middle
complete user interface with

00:04:06.826 --> 00:04:07.176 A:middle
SwiftUI.

00:04:07.916 --> 00:04:10.886 A:middle
And we're going to start by

00:04:10.886 --> 00:04:12.866 A:middle
covering the basics of views and

00:04:12.866 --> 00:04:13.646 A:middle
modifiers.

00:04:14.636 --> 00:04:16.266 A:middle
And for that we'll need an

00:04:16.266 --> 00:04:16.796 A:middle
example.

00:04:17.055 --> 00:04:18.166 A:middle
And I always try to pick an

00:04:18.166 --> 00:04:20.446 A:middle
example that I care about to

00:04:20.755 --> 00:04:21.546 A:middle
help motivate me.

00:04:22.896 --> 00:04:24.726 A:middle
Now if any of you have been on

00:04:24.726 --> 00:04:26.416 A:middle
the internet lately, you've

00:04:26.416 --> 00:04:27.446 A:middle
probably read about what

00:04:27.506 --> 00:04:30.576 A:middle
Millennials like myself consider

00:04:30.756 --> 00:04:33.766 A:middle
to be the most important part of

00:04:33.766 --> 00:04:34.266 A:middle
our lives.

00:04:35.956 --> 00:04:38.876 A:middle
That's right, avocado toast.

00:04:39.016 --> 00:04:41.016 A:middle
[ Laughter ]

00:04:41.516 --> 00:04:44.566 A:middle
[ Applause ]

00:04:45.066 --> 00:04:45.966 A:middle
We've got some Millennials in

00:04:45.966 --> 00:04:46.806 A:middle
the audience.

00:04:47.116 --> 00:04:49.196 A:middle
So today we're going to build an

00:04:49.196 --> 00:04:51.306 A:middle
app for ordering avocado toast.

00:04:51.896 --> 00:04:53.136 A:middle
And I've already done a little

00:04:53.136 --> 00:04:54.416 A:middle
bit of work on it already and it

00:04:54.416 --> 00:04:55.496 A:middle
looks a little like this.

00:04:56.616 --> 00:04:58.596 A:middle
It's a simple form that lets me

00:04:58.596 --> 00:04:59.896 A:middle
quickly order just what I want

00:04:59.896 --> 00:05:01.066 A:middle
right from my phone.

00:04:59.896 --> 00:05:01.066 A:middle
right from my phone.

00:05:02.096 --> 00:05:03.536 A:middle
Now this is not much so far,

00:05:03.536 --> 00:05:04.876 A:middle
clearly, but we're going to

00:05:04.876 --> 00:05:05.616 A:middle
build on this throughout the

00:05:05.616 --> 00:05:06.016 A:middle
talk.

00:05:07.026 --> 00:05:07.866 A:middle
But before we dive into the

00:05:07.866 --> 00:05:09.456 A:middle
code, I want to talk a little

00:05:09.456 --> 00:05:11.016 A:middle
bit about views.

00:05:11.586 --> 00:05:15.346 A:middle
And that's because views are the

00:05:15.346 --> 00:05:17.146 A:middle
basic building blocks of user

00:05:17.146 --> 00:05:17.746 A:middle
interfaces.

00:05:18.636 --> 00:05:19.856 A:middle
And they're important to

00:05:19.856 --> 00:05:21.596 A:middle
everything that we do in

00:05:21.596 --> 00:05:21.996 A:middle
SwiftUI.

00:05:23.776 --> 00:05:25.586 A:middle
If you've ever used another UI

00:05:25.586 --> 00:05:27.806 A:middle
framework before like UIKit or

00:05:27.806 --> 00:05:30.066 A:middle
AppKit, you've probably already

00:05:30.136 --> 00:05:31.196 A:middle
heard of the term view.

00:05:32.676 --> 00:05:34.756 A:middle
SwiftUI also has views and they

00:05:34.756 --> 00:05:36.726 A:middle
serve the same primary role as

00:05:36.726 --> 00:05:38.146 A:middle
they do in those frameworks.

00:05:39.676 --> 00:05:42.146 A:middle
Which is that at a high level, a

00:05:42.146 --> 00:05:43.506 A:middle
view is just something that

00:05:43.506 --> 00:05:47.306 A:middle
defines a piece of your UI.

00:05:47.566 --> 00:05:49.146 A:middle
When you look at an app,

00:05:49.146 --> 00:05:50.826 A:middle
everything that you see is

00:05:50.826 --> 00:05:52.096 A:middle
defined by a view.

00:05:53.656 --> 00:05:55.116 A:middle
Individual controls are views.

00:05:56.426 --> 00:05:58.616 A:middle
The containers holding them are

00:05:58.616 --> 00:05:59.306 A:middle
also views.

00:05:59.656 --> 00:06:02.026 A:middle
And in fact, every single pixel

00:05:59.656 --> 00:06:02.026 A:middle
And in fact, every single pixel

00:06:02.026 --> 00:06:03.616 A:middle
that you see onscreen can be

00:06:03.616 --> 00:06:05.316 A:middle
traced back in some way to a

00:06:05.316 --> 00:06:05.606 A:middle
view.

00:06:06.206 --> 00:06:09.306 A:middle
And we build user interfaces by

00:06:09.306 --> 00:06:11.226 A:middle
composing these views into a

00:06:11.226 --> 00:06:12.826 A:middle
hierarchy of containment.

00:06:13.306 --> 00:06:16.026 A:middle
From the containers at the root,

00:06:16.866 --> 00:06:20.906 A:middle
to the text, images and shapes

00:06:21.136 --> 00:06:21.776 A:middle
that are at the bottom.

00:06:24.076 --> 00:06:25.446 A:middle
Now if you've used UIKit or

00:06:25.446 --> 00:06:26.826 A:middle
AppKit before, this picture

00:06:26.826 --> 00:06:28.176 A:middle
should look familiar to you.

00:06:28.316 --> 00:06:29.526 A:middle
And the important thing to

00:06:29.526 --> 00:06:31.666 A:middle
understand is that this is also

00:06:31.666 --> 00:06:33.706 A:middle
true of views in SwiftUI.

00:06:33.706 --> 00:06:36.636 A:middle
Where SwiftUI may be different

00:06:36.636 --> 00:06:38.316 A:middle
than what you're used to is in

00:06:38.316 --> 00:06:40.256 A:middle
the way that views are expressed

00:06:40.556 --> 00:06:41.166 A:middle
in code.

00:06:42.116 --> 00:06:44.966 A:middle
So let's look at some code.

00:06:45.516 --> 00:06:47.356 A:middle
In our example app, we just have

00:06:47.356 --> 00:06:49.176 A:middle
a vertical stack of controls and

00:06:49.176 --> 00:06:49.676 A:middle
text.

00:06:50.276 --> 00:06:51.936 A:middle
And it's easy to see that just

00:06:51.936 --> 00:06:52.656 A:middle
by reading the code.

00:06:55.186 --> 00:06:56.236 A:middle
But in fact you'll notice how

00:06:56.286 --> 00:06:57.886 A:middle
closely the code on the left

00:06:58.776 --> 00:07:00.086 A:middle
matches the equivalent view

00:06:58.776 --> 00:07:00.086 A:middle
matches the equivalent view

00:07:00.086 --> 00:07:01.666 A:middle
hierarchy diagram on the right.

00:07:03.276 --> 00:07:04.586 A:middle
We see that in the stack at the

00:07:04.586 --> 00:07:07.866 A:middle
root, to the text and controls

00:07:07.866 --> 00:07:09.506 A:middle
contained in the stack.

00:07:10.276 --> 00:07:12.316 A:middle
To the individual text labels

00:07:12.646 --> 00:07:13.716 A:middle
contained in each of our

00:07:13.716 --> 00:07:14.306 A:middle
controls.

00:07:18.046 --> 00:07:19.816 A:middle
Now what you don't see is calls

00:07:19.816 --> 00:07:21.526 A:middle
to functions like Add subviews

00:07:21.526 --> 00:07:21.936 A:middle
anywhere.

00:07:23.146 --> 00:07:24.356 A:middle
Because instead of building up

00:07:24.356 --> 00:07:25.426 A:middle
our view hierarchy piece by

00:07:25.426 --> 00:07:27.636 A:middle
piece, we initialize it as a

00:07:27.636 --> 00:07:29.976 A:middle
complete, composed structure.

00:07:31.626 --> 00:07:34.006 A:middle
This is because SwiftUI defines

00:07:34.006 --> 00:07:36.926 A:middle
its views declaratively as

00:07:36.926 --> 00:07:38.266 A:middle
opposed to imperatively.

00:07:39.136 --> 00:07:41.126 A:middle
And I can't think of a better

00:07:41.126 --> 00:07:42.286 A:middle
analogy to help explain these

00:07:42.286 --> 00:07:44.376 A:middle
concepts than of course with

00:07:44.376 --> 00:07:45.526 A:middle
avocado toast.

00:07:45.776 --> 00:07:47.036 A:middle
So let's try making avocado

00:07:47.036 --> 00:07:47.976 A:middle
toast imperatively.

00:07:50.556 --> 00:07:51.956 A:middle
Imperative code involves

00:07:51.956 --> 00:07:53.676 A:middle
building a result by sending

00:07:53.676 --> 00:07:54.826 A:middle
explicit commands.

00:07:55.966 --> 00:07:57.116 A:middle
That's sort of like teaching a

00:07:57.116 --> 00:07:58.696 A:middle
friend how to make avocado toast

00:07:58.836 --> 00:07:59.686 A:middle
over the phone.

00:08:01.186 --> 00:08:02.186 A:middle
You start by telling them what

00:08:02.186 --> 00:08:03.766 A:middle
ingredients to get and what

00:08:03.766 --> 00:08:06.496 A:middle
equipment they'll need, then you

00:08:06.496 --> 00:08:07.496 A:middle
start guiding them through

00:08:07.496 --> 00:08:08.876 A:middle
making the toast and cutting the

00:08:08.876 --> 00:08:10.506 A:middle
avocado and all these

00:08:10.506 --> 00:08:12.466 A:middle
instructions start getting a

00:08:12.466 --> 00:08:13.366 A:middle
little tedious.

00:08:13.666 --> 00:08:16.126 A:middle
And if your friend messes up any

00:08:16.126 --> 00:08:17.956 A:middle
little step like forgetting to

00:08:17.956 --> 00:08:20.146 A:middle
toast the bread, then the final

00:08:20.206 --> 00:08:21.686 A:middle
result is ruined.

00:08:24.216 --> 00:08:25.626 A:middle
Now let's compare that to making

00:08:25.626 --> 00:08:27.606 A:middle
avocado toast declaratively.

00:08:29.466 --> 00:08:30.526 A:middle
Declarative code involves

00:08:30.526 --> 00:08:32.546 A:middle
building a result by describing

00:08:32.546 --> 00:08:33.655 A:middle
what you want but letting

00:08:33.655 --> 00:08:35.306 A:middle
someone else figure out how to

00:08:35.306 --> 00:08:36.126 A:middle
make it for you.

00:08:36.696 --> 00:08:39.476 A:middle
That's sort of like ordering

00:08:39.476 --> 00:08:41.746 A:middle
avocado toast from an avocado

00:08:42.155 --> 00:08:42.655 A:middle
artisan.

00:08:45.596 --> 00:08:47.236 A:middle
Luckily, we have a lot of those

00:08:47.236 --> 00:08:47.766 A:middle
in California.

00:08:49.726 --> 00:08:50.936 A:middle
Now all you have to do is say

00:08:50.936 --> 00:08:51.886 A:middle
exactly what you want.

00:08:52.416 --> 00:08:54.876 A:middle
You can even throw in a custom

00:08:54.876 --> 00:08:55.336 A:middle
instruction.

00:08:55.936 --> 00:08:58.156 A:middle
And that's all there is to it.

00:08:58.416 --> 00:08:59.826 A:middle
And because an expert is making

00:08:59.826 --> 00:09:01.326 A:middle
it for us, we're guaranteed to

00:08:59.826 --> 00:09:01.326 A:middle
it for us, we're guaranteed to

00:09:01.326 --> 00:09:02.766 A:middle
get a high-quality result.

00:09:03.446 --> 00:09:06.006 A:middle
Now going back to our code,

00:09:06.176 --> 00:09:08.476 A:middle
SwiftUI is serving that role of

00:09:08.476 --> 00:09:10.426 A:middle
the expert ready to assist you.

00:09:11.376 --> 00:09:13.506 A:middle
In code, we declare the

00:09:13.506 --> 00:09:15.046 A:middle
hierarchical relationships

00:09:15.236 --> 00:09:17.136 A:middle
between our views by

00:09:17.136 --> 00:09:19.176 A:middle
initializing a structure that

00:09:19.176 --> 00:09:20.976 A:middle
encodes those relationships.

00:09:23.416 --> 00:09:25.726 A:middle
And SwiftUI does the hard work

00:09:26.086 --> 00:09:29.326 A:middle
of translating your views into a

00:09:29.326 --> 00:09:30.736 A:middle
rendered result onscreen.

00:09:33.166 --> 00:09:34.186 A:middle
Now there's a lot more to say

00:09:34.186 --> 00:09:35.776 A:middle
about that, but for now let's

00:09:35.776 --> 00:09:37.456 A:middle
just get used to the syntax in

00:09:37.456 --> 00:09:37.876 A:middle
the code.

00:09:38.326 --> 00:09:39.966 A:middle
And we'll start with container

00:09:39.966 --> 00:09:40.326 A:middle
views.

00:09:43.356 --> 00:09:44.706 A:middle
container views are declared as

00:09:44.706 --> 00:09:46.686 A:middle
a composition of other views

00:09:46.746 --> 00:09:47.816 A:middle
serving as their content.

00:09:49.806 --> 00:09:51.096 A:middle
Those Content views are declared

00:09:51.096 --> 00:09:53.066 A:middle
within a special kind of closer

00:09:53.146 --> 00:09:54.366 A:middle
known as a view builder.

00:09:55.946 --> 00:09:57.156 A:middle
For example, we already saw

00:09:57.156 --> 00:09:59.916 A:middle
VStack or Vertical Stack which

00:09:59.916 --> 00:10:01.066 A:middle
is an example of one of these

00:09:59.916 --> 00:10:01.066 A:middle
is an example of one of these

00:10:01.066 --> 00:10:01.686 A:middle
containers.

00:10:02.206 --> 00:10:04.586 A:middle
view Builders allow us to write

00:10:04.586 --> 00:10:06.646 A:middle
declarative code in the body of

00:10:06.646 --> 00:10:07.206 A:middle
the closure.

00:10:08.186 --> 00:10:09.466 A:middle
Instead of calling a function

00:10:09.466 --> 00:10:11.446 A:middle
like AddSubViews, we can just

00:10:11.446 --> 00:10:13.346 A:middle
list out our contents within the

00:10:13.346 --> 00:10:13.726 A:middle
closure.

00:10:14.476 --> 00:10:16.716 A:middle
To see a little bit more about

00:10:16.716 --> 00:10:17.916 A:middle
how this works, let's take a

00:10:17.916 --> 00:10:19.226 A:middle
look at the actual API for

00:10:19.226 --> 00:10:19.876 A:middle
VStack.

00:10:20.366 --> 00:10:23.306 A:middle
You can see the content

00:10:23.306 --> 00:10:25.776 A:middle
parameter defined as a closure

00:10:26.296 --> 00:10:27.706 A:middle
but marked with this ViewBuilder

00:10:27.706 --> 00:10:28.176 A:middle
attribute.

00:10:29.446 --> 00:10:31.426 A:middle
The Swift Compiler knows how to

00:10:31.426 --> 00:10:33.196 A:middle
translate a closure marked by

00:10:33.236 --> 00:10:35.076 A:middle
this attribute into a new

00:10:35.076 --> 00:10:37.166 A:middle
closure that returns a single

00:10:37.166 --> 00:10:38.846 A:middle
view representing all of the

00:10:38.886 --> 00:10:40.576 A:middle
contents within our stack.

00:10:42.106 --> 00:10:43.636 A:middle
This is an example of SwiftUI

00:10:44.256 --> 00:10:46.046 A:middle
using the power of Swift to help

00:10:46.046 --> 00:10:47.966 A:middle
you write less code.

00:10:51.416 --> 00:10:53.066 A:middle
views like VStack can also take

00:10:53.066 --> 00:10:54.436 A:middle
other parameters in addition to

00:10:54.436 --> 00:10:55.006 A:middle
their content.

00:10:55.426 --> 00:10:57.136 A:middle
For example, we could configure

00:10:57.136 --> 00:10:59.136 A:middle
our VStack to align its content

00:10:59.136 --> 00:11:00.856 A:middle
along its leading edge instead

00:10:59.136 --> 00:11:00.856 A:middle
along its leading edge instead

00:11:00.856 --> 00:11:02.306 A:middle
of using the default center

00:11:02.306 --> 00:11:02.696 A:middle
alignment.

00:11:06.486 --> 00:11:08.356 A:middle
Taken together, this is a really

00:11:08.356 --> 00:11:10.986 A:middle
nice and natural syntax that

00:11:10.986 --> 00:11:12.676 A:middle
lets us use braces and

00:11:12.676 --> 00:11:15.416 A:middle
indentation to differentiate our

00:11:15.416 --> 00:11:17.336 A:middle
container views and their

00:11:17.336 --> 00:11:19.726 A:middle
configuration from the contents

00:11:19.726 --> 00:11:21.076 A:middle
inside of them.

00:11:24.046 --> 00:11:24.966 A:middle
And we also follow the syntax

00:11:24.966 --> 00:11:26.506 A:middle
for many controls since most

00:11:26.506 --> 00:11:28.526 A:middle
controls in SwiftUI are also

00:11:28.526 --> 00:11:28.976 A:middle
containers.

00:11:31.046 --> 00:11:32.476 A:middle
You saw this in our example app.

00:11:32.476 --> 00:11:34.566 A:middle
In each case here, our controls

00:11:34.566 --> 00:11:36.776 A:middle
define a piece of text serving

00:11:36.776 --> 00:11:38.786 A:middle
as their label which describes

00:11:38.786 --> 00:11:39.396 A:middle
their purpose.

00:11:42.046 --> 00:11:43.026 A:middle
Now we can put more than just

00:11:43.086 --> 00:11:43.516 A:middle
text here.

00:11:43.516 --> 00:11:44.516 A:middle
We can put any kind of view.

00:11:45.396 --> 00:11:46.886 A:middle
And we'll go into more depth on

00:11:46.886 --> 00:11:47.716 A:middle
that later in the talk.

00:11:49.636 --> 00:11:51.466 A:middle
Now another kind of syntax you

00:11:51.466 --> 00:11:53.266 A:middle
see here are those dollar signs

00:11:53.676 --> 00:11:54.946 A:middle
preceding the arguments to our

00:11:54.946 --> 00:11:55.976 A:middle
Toggles and stepper.

00:11:57.426 --> 00:11:58.466 A:middle
The leading dollar sign

00:11:58.546 --> 00:12:00.206 A:middle
indicates that we're passing a

00:11:58.546 --> 00:12:00.206 A:middle
indicates that we're passing a

00:12:00.316 --> 00:12:02.166 A:middle
binding to the control instead

00:12:02.166 --> 00:12:03.366 A:middle
of just a normal value.

00:12:04.796 --> 00:12:05.886 A:middle
So what are bindings?

00:12:06.356 --> 00:12:09.366 A:middle
In our example app, our stepper

00:12:09.366 --> 00:12:11.106 A:middle
is contained within a view that

00:12:11.106 --> 00:12:12.606 A:middle
depends on persistent state to

00:12:12.606 --> 00:12:13.676 A:middle
track the current order.

00:12:13.966 --> 00:12:15.786 A:middle
It declares a property for its

00:12:15.786 --> 00:12:18.386 A:middle
order using a state attribute.

00:12:19.536 --> 00:12:21.116 A:middle
When SwiftUI sees a property

00:12:21.116 --> 00:12:22.926 A:middle
marked with this attribute, it

00:12:22.926 --> 00:12:24.346 A:middle
automatically creates and

00:12:24.346 --> 00:12:26.226 A:middle
manages persistent state behind

00:12:26.226 --> 00:12:28.336 A:middle
the scenes and then exposes the

00:12:28.336 --> 00:12:30.606 A:middle
value of that state through this

00:12:30.606 --> 00:12:30.976 A:middle
property.

00:12:34.106 --> 00:12:36.096 A:middle
In this case, our state contains

00:12:36.096 --> 00:12:37.656 A:middle
a struct that I defined myself

00:12:38.746 --> 00:12:40.176 A:middle
that represents all of our order

00:12:40.176 --> 00:12:40.696 A:middle
information.

00:12:43.096 --> 00:12:45.276 A:middle
If we just want to read or write

00:12:45.336 --> 00:12:46.996 A:middle
to the data in our state, it's

00:12:46.996 --> 00:12:47.616 A:middle
really easy.

00:12:47.806 --> 00:12:49.106 A:middle
We can just read or write to a

00:12:49.106 --> 00:12:50.116 A:middle
property directly.

00:12:51.316 --> 00:12:52.376 A:middle
And we did that here when we

00:12:52.376 --> 00:12:53.806 A:middle
made the label for our stepper.

00:12:56.136 --> 00:12:58.016 A:middle
However, a stepper also needs to

00:12:58.016 --> 00:12:59.896 A:middle
be able to edit the state when

00:12:59.896 --> 00:13:01.056 A:middle
its buttons are tapped.

00:12:59.896 --> 00:13:01.056 A:middle
its buttons are tapped.

00:13:02.306 --> 00:13:03.946 A:middle
And we use this dollar sign

00:13:03.946 --> 00:13:05.886 A:middle
prefix to indicate that we

00:13:05.886 --> 00:13:08.306 A:middle
should pass a binding to that

00:13:08.306 --> 00:13:09.846 A:middle
Quantity Property in our state

00:13:10.656 --> 00:13:12.146 A:middle
instead of just passing a

00:13:12.186 --> 00:13:13.296 A:middle
read-only value.

00:13:14.836 --> 00:13:17.056 A:middle
A binding is a kind of managed

00:13:17.136 --> 00:13:19.106 A:middle
reference that allows one view

00:13:19.506 --> 00:13:21.266 A:middle
to edit the state of another

00:13:21.266 --> 00:13:21.456 A:middle
view.

00:13:24.456 --> 00:13:26.016 A:middle
Now to learn more about state

00:13:26.016 --> 00:13:27.976 A:middle
and bindings and how to manage

00:13:28.146 --> 00:13:29.196 A:middle
all other kinds of data

00:13:29.196 --> 00:13:31.056 A:middle
dependencies that you'll use in

00:13:31.056 --> 00:13:32.796 A:middle
your app, I highly recommend

00:13:32.796 --> 00:13:34.216 A:middle
that you watch the Data Flow

00:13:34.216 --> 00:13:35.296 A:middle
Through SwiftUI talk.

00:13:35.906 --> 00:13:38.066 A:middle
But for now, the important thing

00:13:38.066 --> 00:13:40.496 A:middle
to remember is that if you ever

00:13:40.496 --> 00:13:41.866 A:middle
see a property attribute like

00:13:41.866 --> 00:13:44.536 A:middle
state that usually represents

00:13:44.986 --> 00:13:46.616 A:middle
some kind of data dependency

00:13:47.016 --> 00:13:48.806 A:middle
that SwiftUI is managing on your

00:13:48.806 --> 00:13:50.546 A:middle
behalf behind the scenes.

00:13:52.156 --> 00:13:53.726 A:middle
And if you ever see a dollar

00:13:53.726 --> 00:13:55.876 A:middle
sign prefix, that usually means

00:13:55.876 --> 00:13:57.596 A:middle
that we're passing a binding to

00:13:57.676 --> 00:13:57.976 A:middle
another view.

00:14:03.046 --> 00:14:04.106 A:middle
Now going back to our example

00:14:04.106 --> 00:14:06.256 A:middle
app, there's one more important

00:14:06.256 --> 00:14:07.866 A:middle
piece of syntax that we haven't

00:14:07.866 --> 00:14:08.236 A:middle
covered yet.

00:14:08.516 --> 00:14:09.556 A:middle
And you can see it up there at

00:14:09.556 --> 00:14:11.446 A:middle
the top where we set the font

00:14:11.876 --> 00:14:12.476 A:middle
for our title.

00:14:14.016 --> 00:14:14.726 A:middle
Let's zoom in on that.

00:14:18.046 --> 00:14:19.676 A:middle
First we initialized our text,

00:14:21.106 --> 00:14:22.476 A:middle
which again is just another kind

00:14:22.476 --> 00:14:23.466 A:middle
of view in SwiftUI.

00:14:26.046 --> 00:14:27.556 A:middle
Then we called a method on the

00:14:27.556 --> 00:14:29.906 A:middle
text named font and passed it a

00:14:29.906 --> 00:14:32.296 A:middle
system-defined text style.

00:14:32.936 --> 00:14:35.116 A:middle
This kind of method is known as

00:14:35.116 --> 00:14:36.736 A:middle
a modifier in SwiftUI.

00:14:37.526 --> 00:14:39.626 A:middle
And a modifier is just a method

00:14:40.076 --> 00:14:42.076 A:middle
that creates a new view from an

00:14:42.076 --> 00:14:42.766 A:middle
existing view.

00:14:45.086 --> 00:14:46.406 A:middle
Let's see what I mean.

00:14:47.516 --> 00:14:48.846 A:middle
This is what our UI would have

00:14:48.846 --> 00:14:49.976 A:middle
looked like without the font

00:14:49.976 --> 00:14:52.046 A:middle
modifier, in which case our

00:14:52.046 --> 00:14:53.176 A:middle
title would have rendered with

00:14:53.176 --> 00:14:55.146 A:middle
just the default body font.

00:14:56.356 --> 00:14:57.966 A:middle
This is what the view hierarchy

00:14:57.966 --> 00:14:58.746 A:middle
diagram looks like.

00:14:59.536 --> 00:15:01.226 A:middle
We just see our text contained

00:14:59.536 --> 00:15:01.226 A:middle
We just see our text contained

00:15:01.446 --> 00:15:02.806 A:middle
by our VStack.

00:15:06.076 --> 00:15:07.766 A:middle
When the text is modified, a new

00:15:07.766 --> 00:15:10.076 A:middle
view is inserted that wraps our

00:15:10.076 --> 00:15:10.826 A:middle
existing text.

00:15:11.656 --> 00:15:13.616 A:middle
The new view tells SwiftUI to

00:15:13.616 --> 00:15:15.256 A:middle
render that text with its new

00:15:15.256 --> 00:15:15.586 A:middle
font.

00:15:17.396 --> 00:15:18.436 A:middle
These modifiers can even be

00:15:18.436 --> 00:15:18.996 A:middle
chained together.

00:15:20.076 --> 00:15:21.356 A:middle
For example, we could change the

00:15:21.356 --> 00:15:22.886 A:middle
text color of our title by

00:15:22.886 --> 00:15:23.986 A:middle
adding a foreground color

00:15:23.986 --> 00:15:24.506 A:middle
modifier.

00:15:25.986 --> 00:15:27.436 A:middle
This adds another view into the

00:15:27.436 --> 00:15:29.556 A:middle
view Tree that wraps our font

00:15:29.686 --> 00:15:30.386 A:middle
modifier view.

00:15:34.286 --> 00:15:35.866 A:middle
Now clearly our view hierarchy

00:15:36.426 --> 00:15:37.886 A:middle
is starting to get bigger pretty

00:15:37.886 --> 00:15:38.236 A:middle
quickly.

00:15:38.236 --> 00:15:40.546 A:middle
And for the experienced UI

00:15:40.546 --> 00:15:42.236 A:middle
programmers among you, this may

00:15:42.236 --> 00:15:43.506 A:middle
be setting off some internal

00:15:43.596 --> 00:15:44.186 A:middle
alarm bells.

00:15:45.006 --> 00:15:46.586 A:middle
Because over the years we've

00:15:46.716 --> 00:15:48.606 A:middle
trained ourselves to optimize

00:15:48.606 --> 00:15:50.396 A:middle
the performance of our apps by

00:15:50.396 --> 00:15:52.046 A:middle
keeping our view hierarchies as

00:15:52.046 --> 00:15:54.506 A:middle
small and light as possible.

00:15:55.046 --> 00:15:58.366 A:middle
But remember, we're writing

00:15:58.506 --> 00:15:59.556 A:middle
declarative code.

00:16:00.976 --> 00:16:03.486 A:middle
And SwiftUI is our expert chef

00:16:03.876 --> 00:16:05.786 A:middle
taking our views and skillfully

00:16:05.786 --> 00:16:07.366 A:middle
producing a rendered result

00:16:07.766 --> 00:16:09.086 A:middle
according to just what we

00:16:09.086 --> 00:16:09.426 A:middle
ordered.

00:16:10.326 --> 00:16:11.326 A:middle
And so even though we had to

00:16:11.326 --> 00:16:13.236 A:middle
wrap our text in multiple

00:16:13.236 --> 00:16:16.026 A:middle
wrapper views, SwiftUI collapses

00:16:16.026 --> 00:16:17.916 A:middle
that down behind the scenes into

00:16:17.966 --> 00:16:20.376 A:middle
an efficient data structure that

00:16:20.376 --> 00:16:21.856 A:middle
is then used by the render

00:16:21.856 --> 00:16:22.236 A:middle
system.

00:16:23.786 --> 00:16:25.066 A:middle
And without having to worry

00:16:25.066 --> 00:16:26.506 A:middle
about the performance impact,

00:16:27.376 --> 00:16:29.526 A:middle
you'll find that this chaining

00:16:29.526 --> 00:16:31.596 A:middle
modifier syntax actually

00:16:31.596 --> 00:16:32.746 A:middle
provides a lot of really nice

00:16:32.746 --> 00:16:33.236 A:middle
benefits.

00:16:34.836 --> 00:16:37.406 A:middle
For example, modifier chains

00:16:37.686 --> 00:16:40.006 A:middle
enforce a deterministic ordering

00:16:40.366 --> 00:16:41.476 A:middle
of visual effects.

00:16:43.586 --> 00:16:44.856 A:middle
So here we have a piece of text

00:16:44.856 --> 00:16:45.796 A:middle
with a green background.

00:16:46.736 --> 00:16:48.726 A:middle
But the text is looking a little

00:16:48.726 --> 00:16:50.446 A:middle
cramped, so let's try expanding

00:16:50.446 --> 00:16:51.906 A:middle
that background by adding some

00:16:52.226 --> 00:16:53.496 A:middle
padding around our text.

00:16:56.046 --> 00:16:57.436 A:middle
So we added the padding modifier

00:16:57.436 --> 00:16:59.606 A:middle
and you can see it adding a new

00:16:59.606 --> 00:17:00.766 A:middle
view to our view hierarchy.

00:16:59.606 --> 00:17:00.766 A:middle
view to our view hierarchy.

00:17:01.896 --> 00:17:02.976 A:middle
But nothing changed onscreen.

00:17:06.046 --> 00:17:07.406 A:middle
In fact, the padding is there;

00:17:07.406 --> 00:17:08.415 A:middle
we just can't see it.

00:17:09.996 --> 00:17:11.195 A:middle
Looking at the code, our

00:17:11.195 --> 00:17:12.876 A:middle
background modifier is only

00:17:12.876 --> 00:17:14.586 A:middle
wrapping our text, not our

00:17:14.586 --> 00:17:15.036 A:middle
padding.

00:17:15.586 --> 00:17:16.935 A:middle
Which means that the padding

00:17:16.935 --> 00:17:18.336 A:middle
gets applied outside of our

00:17:18.336 --> 00:17:18.786 A:middle
background.

00:17:21.046 --> 00:17:22.646 A:middle
And luckily, it's really easy to

00:17:22.646 --> 00:17:23.976 A:middle
fix this by just moving that

00:17:23.976 --> 00:17:25.656 A:middle
background modifier to wrap both

00:17:25.656 --> 00:17:26.996 A:middle
the text and the padding

00:17:27.046 --> 00:17:27.455 A:middle
instead.

00:17:32.046 --> 00:17:32.856 A:middle
Now let's take a step back and

00:17:32.856 --> 00:17:33.806 A:middle
appreciate what we just did

00:17:33.806 --> 00:17:34.026 A:middle
there.

00:17:35.466 --> 00:17:36.716 A:middle
Imagine if padding and

00:17:36.716 --> 00:17:38.116 A:middle
background were properties on

00:17:38.116 --> 00:17:40.226 A:middle
our text instead of separate

00:17:40.226 --> 00:17:40.946 A:middle
modifiers.

00:17:42.206 --> 00:17:43.726 A:middle
In that case, we would have no

00:17:43.726 --> 00:17:45.416 A:middle
way to know which order they get

00:17:45.416 --> 00:17:47.366 A:middle
applied in without trial and

00:17:47.366 --> 00:17:49.246 A:middle
error or reading documentation.

00:17:50.416 --> 00:17:52.566 A:middle
Instead, by chaining modifiers

00:17:52.566 --> 00:17:54.656 A:middle
together like this, we make that

00:17:54.656 --> 00:17:55.646 A:middle
order explicit.

00:17:56.686 --> 00:17:57.976 A:middle
And we also make it super easy

00:17:57.976 --> 00:17:59.966 A:middle
to customize like we just did.

00:18:02.096 --> 00:18:03.036 A:middle
Now another benefit of these

00:18:03.036 --> 00:18:04.476 A:middle
modifiers is that they can be

00:18:04.476 --> 00:18:06.056 A:middle
shared across views.

00:18:06.486 --> 00:18:08.686 A:middle
For example, here we've applied

00:18:08.796 --> 00:18:11.256 A:middle
an opacity effect to multiple

00:18:11.256 --> 00:18:12.566 A:middle
different kinds of controls.

00:18:13.836 --> 00:18:14.846 A:middle
And we can even apply that

00:18:14.846 --> 00:18:16.376 A:middle
opacity to the entire stack

00:18:17.356 --> 00:18:18.386 A:middle
instead of each individual

00:18:18.386 --> 00:18:18.786 A:middle
control.

00:18:19.906 --> 00:18:21.466 A:middle
None of these views had to

00:18:21.466 --> 00:18:23.036 A:middle
define their own opacity

00:18:23.036 --> 00:18:23.476 A:middle
property.

00:18:24.146 --> 00:18:25.766 A:middle
Which means that they're free to

00:18:25.766 --> 00:18:28.156 A:middle
have simpler, more focused

00:18:28.416 --> 00:18:29.526 A:middle
interfaces of their own.

00:18:30.576 --> 00:18:31.866 A:middle
And this gets at a general

00:18:31.866 --> 00:18:33.316 A:middle
principle of SwiftUI.

00:18:36.046 --> 00:18:37.196 A:middle
Which is to prefer smaller,

00:18:37.936 --> 00:18:39.216 A:middle
single-purpose views.

00:18:40.446 --> 00:18:42.106 A:middle
These kinds of simpler views are

00:18:42.106 --> 00:18:44.296 A:middle
easier to understand and also

00:18:44.296 --> 00:18:45.966 A:middle
easier to maintain over time.

00:18:47.436 --> 00:18:48.296 A:middle
And once you have all of these

00:18:48.296 --> 00:18:50.076 A:middle
little views, you can compose

00:18:50.076 --> 00:18:51.376 A:middle
them together to create bigger,

00:18:51.476 --> 00:18:52.556 A:middle
more complex views.

00:18:54.016 --> 00:18:56.986 A:middle
The entire SwiftUI framework is

00:18:57.086 --> 00:18:59.336 A:middle
oriented around composition of

00:18:59.336 --> 00:19:01.466 A:middle
small pieces and you should

00:18:59.336 --> 00:19:01.466 A:middle
small pieces and you should

00:19:01.466 --> 00:19:02.796 A:middle
organize your code in the same

00:19:02.796 --> 00:19:02.976 A:middle
way.

00:19:05.246 --> 00:19:06.446 A:middle
So you can start with something

00:19:06.446 --> 00:19:07.636 A:middle
simple like our text.

00:19:09.086 --> 00:19:10.086 A:middle
You can modify that into

00:19:10.086 --> 00:19:10.786 A:middle
something better.

00:19:10.896 --> 00:19:12.666 A:middle
And you can compose that

00:19:12.666 --> 00:19:14.006 A:middle
together to build something

00:19:14.006 --> 00:19:14.316 A:middle
great.

00:19:15.406 --> 00:19:17.066 A:middle
You know, like an app for

00:19:17.066 --> 00:19:18.766 A:middle
avocado toast.

00:19:18.766 --> 00:19:20.216 A:middle
And personally I can't wait to

00:19:20.216 --> 00:19:21.966 A:middle
see the kinds of user interfaces

00:19:22.046 --> 00:19:23.226 A:middle
that all of you are going to

00:19:23.226 --> 00:19:23.976 A:middle
build with SwiftUI.

00:19:26.466 --> 00:19:27.506 A:middle
But before you can do that,

00:19:27.506 --> 00:19:28.366 A:middle
we're first going to need to

00:19:28.366 --> 00:19:30.586 A:middle
know how to build our own custom

00:19:30.586 --> 00:19:31.056 A:middle
views.

00:19:31.056 --> 00:19:32.226 A:middle
And so let's build something new

00:19:32.226 --> 00:19:32.456 A:middle
now.

00:19:35.616 --> 00:19:37.296 A:middle
Looking at our app, I'd really

00:19:37.296 --> 00:19:38.726 A:middle
love to be able to see a history

00:19:38.726 --> 00:19:39.666 A:middle
of my previous orders.

00:19:40.856 --> 00:19:41.806 A:middle
I've already sketched out a

00:19:41.806 --> 00:19:42.266 A:middle
design.

00:19:42.896 --> 00:19:44.346 A:middle
It's just a simple list showing

00:19:44.346 --> 00:19:46.186 A:middle
a summary of each order and some

00:19:46.186 --> 00:19:47.716 A:middle
icons for the toppings that I

00:19:47.716 --> 00:19:48.446 A:middle
chose to include.

00:19:50.136 --> 00:19:51.516 A:middle
I've already gotten started on

00:19:51.516 --> 00:19:53.306 A:middle
the code, so let's just go

00:19:53.306 --> 00:19:54.306 A:middle
through this quickly step by

00:19:54.306 --> 00:19:54.566 A:middle
step.

00:19:55.926 --> 00:19:58.286 A:middle
First, I declared a new view

00:19:58.896 --> 00:20:01.296 A:middle
called OrderHistory as a struct

00:19:58.896 --> 00:20:01.296 A:middle
called OrderHistory as a struct

00:20:01.366 --> 00:20:02.446 A:middle
that conforms to the view

00:20:02.446 --> 00:20:02.926 A:middle
protocol.

00:20:04.176 --> 00:20:05.436 A:middle
We'll come back to that.

00:20:06.466 --> 00:20:07.716 A:middle
My view has a single input

00:20:07.716 --> 00:20:09.956 A:middle
property, previousOrders, which

00:20:09.956 --> 00:20:11.196 A:middle
is just a collection of all of

00:20:11.196 --> 00:20:12.066 A:middle
my order information.

00:20:14.726 --> 00:20:16.136 A:middle
My view has a computed property

00:20:16.136 --> 00:20:17.926 A:middle
called body returning the

00:20:17.926 --> 00:20:18.856 A:middle
contents of the view.

00:20:19.936 --> 00:20:21.246 A:middle
And the sum keyword that we use

00:20:21.246 --> 00:20:22.956 A:middle
here is a Swift feature that

00:20:22.956 --> 00:20:25.726 A:middle
lets Swift infer our return type

00:20:25.726 --> 00:20:26.306 A:middle
automatically.

00:20:30.046 --> 00:20:32.216 A:middle
Our body property returns a list

00:20:32.466 --> 00:20:34.676 A:middle
which generates its contents by

00:20:34.676 --> 00:20:36.056 A:middle
mapping each of our previous

00:20:36.056 --> 00:20:39.036 A:middle
orders into a collection of new

00:20:39.036 --> 00:20:41.736 A:middle
views, one for each order using

00:20:41.956 --> 00:20:43.286 A:middle
another one of those trailing

00:20:43.286 --> 00:20:43.976 A:middle
ViewBuilders.

00:20:48.046 --> 00:20:49.566 A:middle
So now that we understand this

00:20:49.726 --> 00:20:51.316 A:middle
code, let's go back and take a

00:20:51.316 --> 00:20:52.786 A:middle
deeper dive and learn why

00:20:52.786 --> 00:20:55.416 A:middle
SwiftUI defines custom views in

00:20:55.416 --> 00:20:55.766 A:middle
this way.

00:20:57.286 --> 00:20:58.736 A:middle
And let's start with how views

00:20:58.796 --> 00:21:00.816 A:middle
are structs that conform to the

00:20:58.796 --> 00:21:00.816 A:middle
are structs that conform to the

00:21:00.816 --> 00:21:01.716 A:middle
view protocol.

00:21:02.466 --> 00:21:04.066 A:middle
If you're coming from UIKit or

00:21:04.066 --> 00:21:06.456 A:middle
AppKitt, you've probably gotten

00:21:06.456 --> 00:21:07.786 A:middle
used to views being defined as

00:21:07.786 --> 00:21:09.696 A:middle
classes that inherit from a

00:21:09.696 --> 00:21:12.176 A:middle
common view superclass instead

00:21:12.256 --> 00:21:13.506 A:middle
of as structs conforming to

00:21:13.506 --> 00:21:14.076 A:middle
protocols.

00:21:14.546 --> 00:21:17.686 A:middle
For example, custom views in

00:21:17.686 --> 00:21:20.616 A:middle
UIKit inherit from the UIView

00:21:20.866 --> 00:21:21.546 A:middle
superclass.

00:21:22.556 --> 00:21:24.736 A:middle
And UIView defines storage for

00:21:24.736 --> 00:21:26.076 A:middle
common view properties like

00:21:26.076 --> 00:21:27.356 A:middle
alpha and backgroundColor.

00:21:27.906 --> 00:21:30.886 A:middle
Let's imagine we built our

00:21:30.886 --> 00:21:33.186 A:middle
OrderHistory using UIKit instead

00:21:33.186 --> 00:21:33.636 A:middle
of SwiftUI.

00:21:33.636 --> 00:21:36.586 A:middle
Our Custom View would inherit

00:21:36.586 --> 00:21:38.316 A:middle
the stored properties of UIView

00:21:38.556 --> 00:21:39.856 A:middle
as well as adding more

00:21:39.856 --> 00:21:41.096 A:middle
properties for its own custom

00:21:41.096 --> 00:21:41.506 A:middle
behavior.

00:21:43.116 --> 00:21:44.816 A:middle
So how is SwiftUI different than

00:21:46.246 --> 00:21:46.346 A:middle
this?

00:21:46.676 --> 00:21:47.736 A:middle
Well, remember that in SwiftUI

00:21:48.486 --> 00:21:50.146 A:middle
we represent those same kinds of

00:21:50.146 --> 00:21:51.816 A:middle
common view properties as

00:21:51.816 --> 00:21:53.836 A:middle
separate modifiers instead, like

00:21:53.836 --> 00:21:54.976 A:middle
we did for opacity and

00:21:54.976 --> 00:21:55.416 A:middle
background.

00:21:55.986 --> 00:21:58.116 A:middle
And each of these modifiers

00:21:58.306 --> 00:21:59.286 A:middle
creates their own view.

00:22:00.536 --> 00:22:02.216 A:middle
And this means that the storage

00:22:02.546 --> 00:22:03.856 A:middle
for those properties is

00:22:03.906 --> 00:22:05.456 A:middle
distributed across our view

00:22:05.456 --> 00:22:07.206 A:middle
hierarchy in each of these

00:22:07.206 --> 00:22:09.416 A:middle
modifier views instead of being

00:22:09.416 --> 00:22:11.736 A:middle
inherited by every individual

00:22:11.736 --> 00:22:12.046 A:middle
view.

00:22:13.576 --> 00:22:14.936 A:middle
Now this allows our views to be

00:22:14.936 --> 00:22:16.856 A:middle
lighter weight, optimizing their

00:22:16.856 --> 00:22:18.916 A:middle
storage for just their unique

00:22:19.126 --> 00:22:19.636 A:middle
purpose.

00:22:22.046 --> 00:22:23.366 A:middle
And in this world, it makes a

00:22:23.366 --> 00:22:25.336 A:middle
lot of sense that view just

00:22:25.336 --> 00:22:27.126 A:middle
becomes a protocol because it's

00:22:27.126 --> 00:22:28.956 A:middle
no longer needing to serve a

00:22:28.956 --> 00:22:30.506 A:middle
common storage template for all

00:22:30.506 --> 00:22:31.066 A:middle
of your views.

00:22:31.176 --> 00:22:33.626 A:middle
But what does this view protocol

00:22:33.626 --> 00:22:34.126 A:middle
actually do?

00:22:34.626 --> 00:22:35.976 A:middle
Well, let's remember our

00:22:35.976 --> 00:22:37.796 A:middle
conceptual definition of a view.

00:22:38.946 --> 00:22:41.296 A:middle
Which is that a view defines a

00:22:41.356 --> 00:22:43.306 A:middle
piece of our UI and we build

00:22:43.306 --> 00:22:45.076 A:middle
bigger views by composing

00:22:45.076 --> 00:22:46.716 A:middle
together smaller views.

00:22:47.216 --> 00:22:49.706 A:middle
And that's all that the view

00:22:49.706 --> 00:22:50.506 A:middle
protocol does.

00:22:51.306 --> 00:22:52.716 A:middle
It defines a piece of our view

00:22:52.716 --> 00:22:54.446 A:middle
hierarchy, giving it a name so

00:22:54.446 --> 00:22:55.986 A:middle
that it can be composed and

00:22:55.986 --> 00:22:58.366 A:middle
reused across your entire app.

00:22:59.026 --> 00:23:00.956 A:middle
And each concrete type of view

00:22:59.026 --> 00:23:00.956 A:middle
And each concrete type of view

00:23:01.266 --> 00:23:03.506 A:middle
is just an encapsulation of some

00:23:03.506 --> 00:23:04.886 A:middle
other view representing its

00:23:04.886 --> 00:23:06.616 A:middle
contents in its body property

00:23:07.776 --> 00:23:09.516 A:middle
and all of the inputs required

00:23:09.666 --> 00:23:11.566 A:middle
to create that view represented

00:23:11.566 --> 00:23:12.386 A:middle
by its properties.

00:23:15.116 --> 00:23:16.916 A:middle
Now the actual protocol just

00:23:16.916 --> 00:23:18.906 A:middle
defines that one body property

00:23:19.176 --> 00:23:20.606 A:middle
returning just another kind of

00:23:20.606 --> 00:23:20.916 A:middle
view.

00:23:23.076 --> 00:23:24.736 A:middle
But looking at this definition

00:23:24.736 --> 00:23:26.416 A:middle
for a second, some of you may be

00:23:26.416 --> 00:23:28.936 A:middle
asking yourselves, isn't that

00:23:28.936 --> 00:23:29.726 A:middle
kind of recursive?

00:23:31.336 --> 00:23:33.246 A:middle
If I have some view and it

00:23:33.246 --> 00:23:35.186 A:middle
defines as body as another kind

00:23:35.186 --> 00:23:38.256 A:middle
of view, well, then that view is

00:23:38.256 --> 00:23:39.306 A:middle
going to define its body as

00:23:39.306 --> 00:23:41.976 A:middle
another kind of view.

00:23:42.196 --> 00:23:44.526 A:middle
And it has to end somewhere,

00:23:44.526 --> 00:23:44.686 A:middle
right?

00:23:44.686 --> 00:23:47.746 A:middle
It can't just go on forever.

00:23:50.046 --> 00:23:51.176 A:middle
So the reason this works is

00:23:51.176 --> 00:23:52.806 A:middle
because SwiftUI provides many

00:23:52.806 --> 00:23:54.746 A:middle
kinds of primitive views,

00:23:55.616 --> 00:23:56.756 A:middle
meaning views that don't have

00:23:56.756 --> 00:23:59.756 A:middle
any contents of their own and

00:23:59.756 --> 00:24:01.736 A:middle
that represent those atomic

00:23:59.756 --> 00:24:01.736 A:middle
that represent those atomic

00:24:01.736 --> 00:24:03.676 A:middle
building blocks on which all

00:24:03.676 --> 00:24:04.976 A:middle
other views are built.

00:24:07.046 --> 00:24:09.046 A:middle
We've already seen text.

00:24:09.046 --> 00:24:10.626 A:middle
An image is another example of a

00:24:10.626 --> 00:24:11.876 A:middle
primitive view.

00:24:13.336 --> 00:24:15.426 A:middle
SwiftUI also offers primitives

00:24:15.586 --> 00:24:16.596 A:middle
for drawing like Color and

00:24:16.596 --> 00:24:18.246 A:middle
Shape, as well as layout

00:24:18.246 --> 00:24:19.276 A:middle
primitives like Spacer.

00:24:19.676 --> 00:24:23.096 A:middle
In fact, you can do some pretty

00:24:23.096 --> 00:24:25.196 A:middle
sophisticated drawing just using

00:24:25.196 --> 00:24:26.736 A:middle
primitive views in SwiftUI.

00:24:27.766 --> 00:24:28.936 A:middle
And to learn more about that,

00:24:29.206 --> 00:24:30.166 A:middle
you should definitely watch

00:24:30.366 --> 00:24:31.826 A:middle
Building Custom Views in SwiftUI

00:24:31.826 --> 00:24:31.976 A:middle
talk.

00:24:35.066 --> 00:24:36.156 A:middle
Our example uses text.

00:24:37.256 --> 00:24:38.866 A:middle
But our list actually adds in

00:24:38.866 --> 00:24:40.836 A:middle
its own primitive views that you

00:24:40.836 --> 00:24:42.326 A:middle
can see as the dividers in

00:24:42.326 --> 00:24:42.976 A:middle
between each of our rows.

00:24:46.066 --> 00:24:46.976 A:middle
Now we also saw that our Custom

00:24:46.976 --> 00:24:48.246 A:middle
View is defined as a struct

00:24:48.446 --> 00:24:49.416 A:middle
instead of a class.

00:24:49.496 --> 00:24:51.166 A:middle
And this goes back to how views

00:24:51.166 --> 00:24:52.776 A:middle
are defined declaratively in

00:24:52.776 --> 00:24:53.176 A:middle
SwiftUI.

00:24:54.346 --> 00:24:55.606 A:middle
In this case, that means our

00:24:55.606 --> 00:24:58.106 A:middle
views are not persistent objects

00:24:58.356 --> 00:25:00.346 A:middle
that we update over time using

00:24:58.356 --> 00:25:00.346 A:middle
that we update over time using

00:25:00.346 --> 00:25:02.976 A:middle
imperative event-based code.

00:25:05.556 --> 00:25:07.756 A:middle
Instead, our views are defined

00:25:07.886 --> 00:25:10.376 A:middle
declaratively as a function of

00:25:10.376 --> 00:25:10.876 A:middle
their inputs.

00:25:13.046 --> 00:25:14.096 A:middle
So whenever one of our inputs

00:25:14.096 --> 00:25:16.506 A:middle
changes, SwiftUI will call our

00:25:16.506 --> 00:25:18.746 A:middle
body property again to fetch an

00:25:18.746 --> 00:25:19.976 A:middle
updated version of our view.

00:25:23.096 --> 00:25:24.766 A:middle
Now List that we're using here

00:25:25.536 --> 00:25:26.896 A:middle
-- List is a great example of

00:25:26.896 --> 00:25:29.576 A:middle
the power of declarative code.

00:25:29.766 --> 00:25:31.126 A:middle
If our previousOrders collection

00:25:31.126 --> 00:25:33.716 A:middle
changes, SwiftUI will compare

00:25:33.876 --> 00:25:35.116 A:middle
the old and new versions of our

00:25:35.116 --> 00:25:37.096 A:middle
list and efficiently update the

00:25:37.096 --> 00:25:39.506 A:middle
rendered result onscreen just

00:25:39.546 --> 00:25:40.646 A:middle
based on what's changed.

00:25:42.066 --> 00:25:43.996 A:middle
For example, I've been working

00:25:43.996 --> 00:25:45.416 A:middle
on cloud sync for my app.

00:25:45.736 --> 00:25:47.196 A:middle
And it's really important to me

00:25:47.196 --> 00:25:48.776 A:middle
that all of my avocado toast

00:25:48.776 --> 00:25:50.996 A:middle
data is available on all of my

00:25:50.996 --> 00:25:51.536 A:middle
devices.

00:25:52.586 --> 00:25:53.486 A:middle
So let's see what happens if

00:25:53.486 --> 00:25:55.586 A:middle
another device starts adding and

00:25:55.586 --> 00:25:56.566 A:middle
removing orders from our

00:25:56.566 --> 00:25:56.916 A:middle
history.

00:25:59.356 --> 00:26:00.946 A:middle
What you see on the right is

00:25:59.356 --> 00:26:00.946 A:middle
What you see on the right is

00:26:00.946 --> 00:26:03.056 A:middle
SwiftUI automatically diffing

00:26:03.306 --> 00:26:04.506 A:middle
the changes in our collection

00:26:05.086 --> 00:26:07.036 A:middle
and synthesizing insertions and

00:26:07.036 --> 00:26:08.636 A:middle
deletions and then rendering

00:26:08.636 --> 00:26:10.496 A:middle
them with appropriate default

00:26:10.496 --> 00:26:11.216 A:middle
animations.

00:26:12.126 --> 00:26:13.676 A:middle
And this is all functionality

00:26:13.676 --> 00:26:15.426 A:middle
that you get for free without

00:26:15.426 --> 00:26:16.956 A:middle
writing any additional code.

00:26:17.516 --> 00:26:25.546 A:middle
[ Applause ]

00:26:26.046 --> 00:26:26.566 A:middle
It's pretty awesome.

00:26:26.966 --> 00:26:29.556 A:middle
And the reason this works is

00:26:29.556 --> 00:26:31.306 A:middle
because you don't have to manage

00:26:31.306 --> 00:26:32.456 A:middle
that persistent render state

00:26:32.456 --> 00:26:33.076 A:middle
yourselves.

00:26:34.136 --> 00:26:36.086 A:middle
Instead, you can just generate

00:26:36.146 --> 00:26:38.426 A:middle
new values for your view based

00:26:38.426 --> 00:26:40.106 A:middle
on your current data in that

00:26:40.286 --> 00:26:40.896 A:middle
body property.

00:26:43.046 --> 00:26:44.666 A:middle
And you can let SwiftUI generate

00:26:44.666 --> 00:26:46.646 A:middle
the necessary changes between

00:26:46.646 --> 00:26:47.676 A:middle
those two versions on your

00:26:47.676 --> 00:26:47.966 A:middle
behalf.

00:26:50.066 --> 00:26:51.036 A:middle
And that's the power of

00:26:51.036 --> 00:26:51.706 A:middle
declarative code.

00:26:54.236 --> 00:26:55.126 A:middle
So let's build out the rest of

00:26:55.126 --> 00:26:55.946 A:middle
our orderHistory view.

00:26:56.156 --> 00:26:57.536 A:middle
And if you recall, our original

00:26:57.536 --> 00:26:59.466 A:middle
design included these icons for

00:26:59.466 --> 00:27:00.776 A:middle
any extra toppings that I

00:26:59.466 --> 00:27:00.776 A:middle
any extra toppings that I

00:27:01.206 --> 00:27:02.956 A:middle
included in my order, like salt

00:27:03.096 --> 00:27:04.166 A:middle
and red pepper flakes.

00:27:05.136 --> 00:27:06.256 A:middle
So let's start by showing that

00:27:06.256 --> 00:27:07.026 A:middle
icon for salt.

00:27:07.906 --> 00:27:09.396 A:middle
First, we'll add a horizontal

00:27:09.396 --> 00:27:10.916 A:middle
stack with a Spacer after our

00:27:10.916 --> 00:27:11.266 A:middle
text.

00:27:12.826 --> 00:27:14.826 A:middle
And then I'll show my SaltIcon

00:27:14.826 --> 00:27:16.746 A:middle
view but only if our order

00:27:16.826 --> 00:27:17.536 A:middle
contains salt.

00:27:20.176 --> 00:27:21.306 A:middle
As you can see in the code here,

00:27:22.166 --> 00:27:23.406 A:middle
that ViewBuilder syntax that we

00:27:23.406 --> 00:27:25.316 A:middle
talked about earlier, it lets us

00:27:25.316 --> 00:27:27.676 A:middle
use natural control flow like if

00:27:27.676 --> 00:27:29.426 A:middle
statements to declaratively

00:27:29.426 --> 00:27:31.356 A:middle
define when a view should be

00:27:31.356 --> 00:27:32.316 A:middle
included in our stack.

00:27:35.476 --> 00:27:36.656 A:middle
And using if statements like

00:27:36.686 --> 00:27:38.616 A:middle
this in our declarative code

00:27:38.956 --> 00:27:39.946 A:middle
feels really natural.

00:27:40.666 --> 00:27:42.296 A:middle
But there are also other ways to

00:27:42.296 --> 00:27:43.446 A:middle
write conditional code within

00:27:43.446 --> 00:27:43.976 A:middle
your views.

00:27:44.386 --> 00:27:45.686 A:middle
And it's important to choose the

00:27:45.686 --> 00:27:47.006 A:middle
right tool to get the correct

00:27:47.006 --> 00:27:48.006 A:middle
result onscreen.

00:27:48.316 --> 00:27:49.986 A:middle
So let's look at a quick example

00:27:49.986 --> 00:27:50.696 A:middle
to see what I mean.

00:27:51.286 --> 00:27:53.976 A:middle
I built another screen for our

00:27:53.976 --> 00:27:55.486 A:middle
app which lets you choose

00:27:55.486 --> 00:27:57.456 A:middle
between a normal and flipped

00:27:57.456 --> 00:27:57.976 A:middle
AppIcon.

00:27:59.726 --> 00:28:01.676 A:middle
And my first pass at this was

00:27:59.726 --> 00:28:01.676 A:middle
And my first pass at this was

00:28:01.676 --> 00:28:04.066 A:middle
writing a custom view that takes

00:28:04.066 --> 00:28:05.846 A:middle
a flipped state as an input and

00:28:05.846 --> 00:28:07.466 A:middle
conditionally applies a rotation

00:28:07.466 --> 00:28:11.246 A:middle
modifier based on my state.

00:28:13.386 --> 00:28:15.186 A:middle
However, this produces an ugly

00:28:15.186 --> 00:28:16.556 A:middle
crossfade animation when we

00:28:16.556 --> 00:28:19.886 A:middle
actually try to flip that icon.

00:28:20.116 --> 00:28:21.686 A:middle
This is because our code is

00:28:21.736 --> 00:28:23.546 A:middle
telling SwiftUI to switch

00:28:23.546 --> 00:28:25.106 A:middle
between two different kinds of

00:28:25.106 --> 00:28:25.606 A:middle
views.

00:28:26.716 --> 00:28:28.816 A:middle
A view wrapped in that rotation

00:28:28.816 --> 00:28:32.196 A:middle
modifier versus our AppIcon just

00:28:32.196 --> 00:28:32.756 A:middle
by itself.

00:28:33.326 --> 00:28:37.426 A:middle
And by default, SwiftUI fades in

00:28:37.426 --> 00:28:39.936 A:middle
and out views when they're added

00:28:39.936 --> 00:28:40.676 A:middle
and removed.

00:28:41.596 --> 00:28:42.506 A:middle
Which is why we get this

00:28:42.506 --> 00:28:43.966 A:middle
crossfade effect.

00:28:46.156 --> 00:28:47.426 A:middle
Now instead I'd really like that

00:28:47.426 --> 00:28:48.876 A:middle
icon to rotate when it's

00:28:48.876 --> 00:28:49.156 A:middle
flipped.

00:28:50.136 --> 00:28:52.556 A:middle
And so to do that, I define a

00:28:52.556 --> 00:28:54.096 A:middle
single view with a single

00:28:54.096 --> 00:28:56.786 A:middle
rotationEffect modifier and

00:28:57.126 --> 00:28:59.086 A:middle
conditonalize its input based on

00:28:59.086 --> 00:28:59.526 A:middle
our state.

00:29:00.116 --> 00:29:02.986 A:middle
By defining our condition inside

00:29:02.986 --> 00:29:05.026 A:middle
of our modifier, SwiftUI can

00:29:05.026 --> 00:29:06.136 A:middle
provide a better default

00:29:06.136 --> 00:29:08.266 A:middle
animation, rotating our icon to

00:29:08.266 --> 00:29:09.186 A:middle
the new orientation.

00:29:10.396 --> 00:29:11.856 A:middle
And the lesson here is that you

00:29:11.856 --> 00:29:12.736 A:middle
should try to push your

00:29:12.736 --> 00:29:15.066 A:middle
conditions into your modifiers

00:29:15.066 --> 00:29:16.306 A:middle
as much as possible.

00:29:16.996 --> 00:29:18.286 A:middle
Because that will help SwiftUI

00:29:19.126 --> 00:29:20.476 A:middle
detect those changes and give

00:29:20.476 --> 00:29:21.566 A:middle
you better animations.

00:29:23.116 --> 00:29:24.926 A:middle
That if statement syntax that we

00:29:24.926 --> 00:29:26.806 A:middle
saw earlier, that's really great

00:29:27.106 --> 00:29:28.666 A:middle
if your intention is to actually

00:29:28.706 --> 00:29:30.916 A:middle
add or remove views from your

00:29:30.916 --> 00:29:31.316 A:middle
hierarchy.

00:29:36.046 --> 00:29:37.136 A:middle
So going back to our example

00:29:37.316 --> 00:29:39.886 A:middle
app, our orderHistory view is

00:29:40.006 --> 00:29:40.966 A:middle
starting to get a little bit

00:29:40.966 --> 00:29:41.166 A:middle
big.

00:29:41.526 --> 00:29:42.686 A:middle
So it would be nice to start

00:29:42.686 --> 00:29:43.656 A:middle
breaking this down into some

00:29:43.656 --> 00:29:44.446 A:middle
smaller pieces.

00:29:45.226 --> 00:29:46.346 A:middle
So let's try factoring out the

00:29:46.346 --> 00:29:48.096 A:middle
code for each List row into its

00:29:48.096 --> 00:29:48.936 A:middle
own custom view.

00:29:51.116 --> 00:29:52.166 A:middle
First, I'm going to create a new

00:29:52.166 --> 00:29:53.506 A:middle
custom view called OrderCell.

00:29:53.506 --> 00:29:56.356 A:middle
Now I'll need a body for this

00:29:56.356 --> 00:29:58.436 A:middle
view, and luckily we've pretty

00:29:58.436 --> 00:30:00.326 A:middle
much already built that just

00:29:58.436 --> 00:30:00.326 A:middle
much already built that just

00:30:00.326 --> 00:30:01.606 A:middle
within our lists in our

00:30:01.606 --> 00:30:02.296 A:middle
OrderHistory view.

00:30:02.366 --> 00:30:03.936 A:middle
So let's move that code over.

00:30:06.316 --> 00:30:09.176 A:middle
Our OrderCell requires input

00:30:09.176 --> 00:30:10.516 A:middle
data in order to generate its

00:30:10.516 --> 00:30:10.836 A:middle
body.

00:30:11.416 --> 00:30:12.616 A:middle
So we're also going to need to

00:30:12.616 --> 00:30:14.216 A:middle
add a property to represent

00:30:14.886 --> 00:30:14.976 A:middle
that.

00:30:16.156 --> 00:30:18.096 A:middle
And finally, we'll finish up by

00:30:18.096 --> 00:30:19.396 A:middle
creating an instance of our new

00:30:19.396 --> 00:30:21.386 A:middle
view for each row within our

00:30:21.386 --> 00:30:21.736 A:middle
list.

00:30:24.076 --> 00:30:25.746 A:middle
And the takeaway here is that

00:30:25.746 --> 00:30:27.896 A:middle
it's really easy to break down

00:30:27.896 --> 00:30:29.406 A:middle
your UI into smaller pieces and

00:30:29.406 --> 00:30:31.016 A:middle
to factor out code into new

00:30:31.016 --> 00:30:31.466 A:middle
views.

00:30:32.106 --> 00:30:34.056 A:middle
And remember, with declarative

00:30:34.056 --> 00:30:36.046 A:middle
code, adding a new wrapper view

00:30:36.306 --> 00:30:38.436 A:middle
is effectively free since

00:30:38.436 --> 00:30:40.526 A:middle
SwiftUI will optimize it down

00:30:40.926 --> 00:30:41.766 A:middle
behind the scenes.

00:30:42.366 --> 00:30:44.656 A:middle
And so the important thing here

00:30:44.856 --> 00:30:46.136 A:middle
is that you no longer have to

00:30:46.136 --> 00:30:48.096 A:middle
compromise between organizing

00:30:48.096 --> 00:30:49.416 A:middle
your view code the way that

00:30:49.416 --> 00:30:51.566 A:middle
makes the most sense to you and

00:30:51.566 --> 00:30:52.886 A:middle
getting the best performance

00:30:53.126 --> 00:30:53.796 A:middle
from your app.

00:30:54.516 --> 00:31:01.736 A:middle
[ Applause ]

00:30:54.516 --> 00:31:01.736 A:middle
[ Applause ]

00:31:02.236 --> 00:31:03.386 A:middle
So let's finish by including

00:31:03.386 --> 00:31:05.136 A:middle
that final icon for red pepper

00:31:05.136 --> 00:31:05.526 A:middle
flakes.

00:31:06.126 --> 00:31:07.486 A:middle
And it's easy to do that just by

00:31:07.486 --> 00:31:08.936 A:middle
adding another condition like we

00:31:08.936 --> 00:31:09.446 A:middle
did before.

00:31:10.616 --> 00:31:12.476 A:middle
Now this works but it doesn't

00:31:12.476 --> 00:31:13.396 A:middle
seem very scalable.

00:31:13.896 --> 00:31:15.286 A:middle
If we add new toppings in the

00:31:15.286 --> 00:31:17.306 A:middle
future, we'll have to add them

00:31:17.306 --> 00:31:18.476 A:middle
with new conditions into our

00:31:18.476 --> 00:31:18.726 A:middle
code.

00:31:18.726 --> 00:31:20.686 A:middle
What would be really great

00:31:20.686 --> 00:31:22.896 A:middle
instead would be to

00:31:22.896 --> 00:31:24.406 A:middle
conditionally generate a

00:31:24.406 --> 00:31:26.256 A:middle
collection of icons from our

00:31:26.256 --> 00:31:26.716 A:middle
order data.

00:31:29.306 --> 00:31:30.226 A:middle
To generate a collection of

00:31:30.226 --> 00:31:32.306 A:middle
views, we can use a ForEach

00:31:32.306 --> 00:31:32.576 A:middle
view.

00:31:34.086 --> 00:31:35.976 A:middle
Just like our List, ForEach

00:31:36.376 --> 00:31:38.316 A:middle
takes a collection of data and a

00:31:38.316 --> 00:31:40.266 A:middle
ViewBuilder that maps each data

00:31:40.316 --> 00:31:42.076 A:middle
item into its own view.

00:31:43.366 --> 00:31:46.056 A:middle
But unlike List, ForEach doesn't

00:31:46.056 --> 00:31:47.716 A:middle
add any visual effects of its

00:31:47.716 --> 00:31:47.976 A:middle
own.

00:31:49.056 --> 00:31:51.116 A:middle
Instead, it just adds its own

00:31:51.116 --> 00:31:53.076 A:middle
contents to its container.

00:31:56.106 --> 00:31:57.206 A:middle
So this code is a lot better

00:31:57.476 --> 00:31:58.626 A:middle
because now our order history

00:31:58.746 --> 00:32:00.046 A:middle
will automatically support new

00:31:58.746 --> 00:32:00.046 A:middle
will automatically support new

00:32:00.046 --> 00:32:01.446 A:middle
toppings in the future without

00:32:01.486 --> 00:32:03.316 A:middle
us having to add any more code

00:32:03.316 --> 00:32:03.776 A:middle
to our view.

00:32:06.066 --> 00:32:07.116 A:middle
For example, we could add a

00:32:07.116 --> 00:32:08.686 A:middle
third icon for eggs.

00:32:11.286 --> 00:32:13.236 A:middle
So taking a step back, it's

00:32:13.236 --> 00:32:14.806 A:middle
pretty amazing how much

00:32:14.806 --> 00:32:16.096 A:middle
functionality we were able to

00:32:16.096 --> 00:32:18.066 A:middle
just build with just about a

00:32:18.066 --> 00:32:19.306 A:middle
dozen or so lines of code.

00:32:20.476 --> 00:32:22.386 A:middle
And what's even more amazing is

00:32:22.456 --> 00:32:24.346 A:middle
all of the code that we didn't

00:32:24.346 --> 00:32:25.226 A:middle
have to write.

00:32:26.776 --> 00:32:28.026 A:middle
We already saw how SwiftUI

00:32:28.256 --> 00:32:29.866 A:middle
automatically handled changing

00:32:29.866 --> 00:32:31.956 A:middle
data, even inserting default

00:32:31.956 --> 00:32:33.476 A:middle
animations when our data is

00:32:33.476 --> 00:32:34.396 A:middle
added and removed.

00:32:37.046 --> 00:32:38.736 A:middle
But I didn't mention that our

00:32:38.736 --> 00:32:40.496 A:middle
app also adapts to dynamic type.

00:32:41.686 --> 00:32:43.066 A:middle
And it even supports Dark Mode.

00:32:43.266 --> 00:32:44.896 A:middle
And we got all of this support

00:32:44.896 --> 00:32:46.346 A:middle
for free without writing any

00:32:46.346 --> 00:32:46.976 A:middle
additional code.

00:32:48.516 --> 00:32:55.226 A:middle
[ Applause ]

00:32:55.726 --> 00:32:57.566 A:middle
This is pretty great and this is

00:32:57.566 --> 00:32:59.566 A:middle
what we mean by SwiftUI giving

00:32:59.566 --> 00:33:01.746 A:middle
you that shorter path to a great

00:32:59.566 --> 00:33:01.746 A:middle
you that shorter path to a great

00:33:01.746 --> 00:33:01.886 A:middle
app.

00:33:04.106 --> 00:33:05.716 A:middle
So that's a lesson on building

00:33:05.716 --> 00:33:07.426 A:middle
custom views with SwiftUI.

00:33:08.786 --> 00:33:10.256 A:middle
And now I'd like to invite up my

00:33:10.256 --> 00:33:12.116 A:middle
colleague Taylor to talk to you

00:33:12.306 --> 00:33:13.716 A:middle
about how to take full advantage

00:33:13.996 --> 00:33:15.416 A:middle
of the views that SwiftUI

00:33:15.416 --> 00:33:17.616 A:middle
provides for you out of the box.

00:33:18.276 --> 00:33:18.596 A:middle
Thanks.

00:33:19.516 --> 00:33:24.656 A:middle
[ Applause ]

00:33:25.156 --> 00:33:25.716 A:middle
&gt;&gt; Thank you, Matt.

00:33:28.046 --> 00:33:28.646 A:middle
Hello, everybody.

00:33:29.396 --> 00:33:31.376 A:middle
At this point, we have a pretty

00:33:31.376 --> 00:33:33.216 A:middle
good start to our app, with Matt

00:33:33.216 --> 00:33:34.276 A:middle
building out the initial order

00:33:34.276 --> 00:33:35.586 A:middle
form and history screens.

00:33:35.586 --> 00:33:37.516 A:middle
But one thing that stands out is

00:33:37.516 --> 00:33:38.746 A:middle
that this doesn't quite look

00:33:39.006 --> 00:33:40.536 A:middle
like iOS apps we're used to.

00:33:40.886 --> 00:33:41.986 A:middle
They're usually not these simple

00:33:41.986 --> 00:33:43.866 A:middle
vertical stacks of controls.

00:33:44.756 --> 00:33:46.246 A:middle
And typically, this type of UI

00:33:46.246 --> 00:33:47.096 A:middle
looks something more like you'd

00:33:47.096 --> 00:33:47.616 A:middle
see on the right.

00:33:47.796 --> 00:33:49.456 A:middle
And one of the biggest

00:33:49.456 --> 00:33:51.126 A:middle
differences is the container

00:33:51.206 --> 00:33:52.796 A:middle
around the controls themselves

00:33:54.006 --> 00:33:55.636 A:middle
having this standardized group

00:33:55.636 --> 00:33:56.176 A:middle
list style.

00:33:57.056 --> 00:33:58.836 A:middle
Now in SwiftUI we refer to this

00:33:59.236 --> 00:33:59.816 A:middle
as a form.

00:33:59.816 --> 00:34:02.406 A:middle
And a form is a container just

00:33:59.816 --> 00:34:02.406 A:middle
And a form is a container just

00:34:02.406 --> 00:34:03.926 A:middle
like VStack, but one built

00:34:03.926 --> 00:34:05.536 A:middle
specifically for building these

00:34:05.596 --> 00:34:06.696 A:middle
sections of heterogeneous

00:34:06.726 --> 00:34:08.616 A:middle
controls, giving the overall

00:34:08.616 --> 00:34:10.436 A:middle
result a standard look and feel

00:34:10.786 --> 00:34:11.956 A:middle
no matter what the platform.

00:34:14.045 --> 00:34:15.916 A:middle
Now we've already defined the

00:34:15.916 --> 00:34:17.476 A:middle
exact set of functionalities we

00:34:17.476 --> 00:34:18.376 A:middle
want in our app.

00:34:19.025 --> 00:34:21.446 A:middle
The title, Toggles, stepper and

00:34:21.446 --> 00:34:21.726 A:middle
button.

00:34:23.036 --> 00:34:24.616 A:middle
And all we're doing is changing

00:34:24.616 --> 00:34:26.186 A:middle
the container itself from the

00:34:26.186 --> 00:34:29.005 A:middle
existing VStack into a form.

00:34:29.005 --> 00:34:30.936 A:middle
And then we can easily add in

00:34:30.936 --> 00:34:32.795 A:middle
some sections to divide up that

00:34:32.795 --> 00:34:33.255 A:middle
content.

00:34:34.565 --> 00:34:35.596 A:middle
Now just as Matt previously

00:34:35.596 --> 00:34:37.596 A:middle
discussed, our code continues to

00:34:37.596 --> 00:34:39.206 A:middle
reflect the resulting UI.

00:34:40.346 --> 00:34:41.646 A:middle
And since the core definition of

00:34:41.646 --> 00:34:43.696 A:middle
our controls didn't change, our

00:34:43.696 --> 00:34:44.626 A:middle
code really didn't have to

00:34:44.626 --> 00:34:44.946 A:middle
either.

00:34:45.985 --> 00:34:47.106 A:middle
Just by changing the container

00:34:47.106 --> 00:34:49.356 A:middle
from a VStack to a form resulted

00:34:49.356 --> 00:34:50.596 A:middle
in the controls automatically

00:34:50.596 --> 00:34:52.156 A:middle
adapting to that context.

00:34:52.966 --> 00:34:54.045 A:middle
From the overall background and

00:34:54.045 --> 00:34:55.666 A:middle
scrollability to the lines

00:34:55.806 --> 00:34:57.256 A:middle
separating each of the controls,

00:34:57.566 --> 00:34:58.766 A:middle
to even the styling of things

00:34:58.766 --> 00:34:59.196 A:middle
like button.

00:35:00.316 --> 00:35:02.316 A:middle
This is yet again SwiftUI taking

00:35:02.316 --> 00:35:03.816 A:middle
care of the details for what

00:35:03.816 --> 00:35:05.626 A:middle
exactly it takes to render those

00:35:05.626 --> 00:35:07.786 A:middle
elements, and allowing us to

00:35:07.786 --> 00:35:09.356 A:middle
focus on the functionality of

00:35:09.356 --> 00:35:09.846 A:middle
our app.

00:35:11.676 --> 00:35:12.986 A:middle
Now one subtle change that

00:35:12.986 --> 00:35:14.706 A:middle
happened isn't visible from this

00:35:14.706 --> 00:35:15.546 A:middle
static screenshot.

00:35:16.556 --> 00:35:17.966 A:middle
Focusing on the buttons, you can

00:35:17.966 --> 00:35:19.216 A:middle
see that the alignment, padding

00:35:19.216 --> 00:35:20.486 A:middle
and decoration has all changed

00:35:20.486 --> 00:35:22.646 A:middle
around the button, but the press

00:35:22.646 --> 00:35:24.436 A:middle
state has even taken on the

00:35:24.436 --> 00:35:25.996 A:middle
special full bleed effect that

00:35:25.996 --> 00:35:27.346 A:middle
you would expect from this type

00:35:27.346 --> 00:35:30.516 A:middle
of UI, all the while showing the

00:35:30.516 --> 00:35:32.276 A:middle
same exact definition of being a

00:35:32.276 --> 00:35:32.546 A:middle
button.

00:35:34.116 --> 00:35:35.536 A:middle
Like you might expect, this same

00:35:35.536 --> 00:35:36.516 A:middle
definition works in other

00:35:36.516 --> 00:35:37.936 A:middle
contexts or other platforms,

00:35:38.306 --> 00:35:39.316 A:middle
having a wide variety of

00:35:39.316 --> 00:35:41.896 A:middle
possible looks and feel.

00:35:42.126 --> 00:35:43.076 A:middle
button also demonstrates the

00:35:43.076 --> 00:35:44.556 A:middle
same inherent ability for

00:35:44.556 --> 00:35:46.086 A:middle
composability that we've seen in

00:35:46.086 --> 00:35:46.816 A:middle
other views.

00:35:47.396 --> 00:35:48.286 A:middle
The label is of course not

00:35:48.286 --> 00:35:49.586 A:middle
constrained to just being a text

00:35:49.586 --> 00:35:51.016 A:middle
but could also be an image.

00:35:51.016 --> 00:35:52.696 A:middle
It really could be any type of

00:35:52.696 --> 00:35:54.996 A:middle
view that we could define, even

00:35:54.996 --> 00:35:56.656 A:middle
an explicit vertical stack of an

00:35:56.656 --> 00:35:58.876 A:middle
image and a text.

00:35:59.516 --> 00:36:05.846 A:middle
[ Applause ]

00:35:59.516 --> 00:36:05.846 A:middle
[ Applause ]

00:36:06.346 --> 00:36:07.856 A:middle
And this inherent composability

00:36:07.856 --> 00:36:08.946 A:middle
enables a wide variety of

00:36:08.946 --> 00:36:10.826 A:middle
possibilities while at the same

00:36:10.826 --> 00:36:12.186 A:middle
time enabling button to be

00:36:12.186 --> 00:36:13.636 A:middle
distilled down to two

00:36:13.636 --> 00:36:14.556 A:middle
fundamental properties.

00:36:15.576 --> 00:36:16.556 A:middle
The action it performs when

00:36:16.556 --> 00:36:18.036 A:middle
activated and the label

00:36:18.176 --> 00:36:19.256 A:middle
describing what that action is.

00:36:20.596 --> 00:36:21.756 A:middle
And that's the entire API

00:36:21.756 --> 00:36:22.886 A:middle
surface of button.

00:36:24.046 --> 00:36:25.176 A:middle
This is of course not to say

00:36:25.176 --> 00:36:26.496 A:middle
that these are the only two ways

00:36:26.546 --> 00:36:27.996 A:middle
that buttons can be customized.

00:36:28.736 --> 00:36:29.556 A:middle
Like we saw before and will

00:36:29.556 --> 00:36:31.426 A:middle
continue to see, both context

00:36:31.476 --> 00:36:33.346 A:middle
and modifiers enable adding many

00:36:33.346 --> 00:36:35.036 A:middle
more rich behaviors from

00:36:35.036 --> 00:36:36.716 A:middle
disabled state to the styling of

00:36:36.716 --> 00:36:38.446 A:middle
the button to even control sizes

00:36:38.446 --> 00:36:39.196 A:middle
on macOS.

00:36:40.016 --> 00:36:41.826 A:middle
But this core definition plus

00:36:41.826 --> 00:36:43.776 A:middle
adaptive behaviors enables any

00:36:43.776 --> 00:36:44.336 A:middle
type of button.

00:36:45.196 --> 00:36:46.366 A:middle
And over time and across the

00:36:46.366 --> 00:36:48.186 A:middle
different platforms, we've seen

00:36:48.186 --> 00:36:49.166 A:middle
a lot of different buttons.

00:36:49.956 --> 00:36:51.006 A:middle
Not only did they vary based on

00:36:51.006 --> 00:36:52.756 A:middle
how they look but also in how we

00:36:52.756 --> 00:36:54.686 A:middle
interact with them, from a click

00:36:54.686 --> 00:36:56.376 A:middle
to a tap, to being selected

00:36:56.376 --> 00:36:57.726 A:middle
using the switch control or the

00:36:57.726 --> 00:37:00.206 A:middle
Siri Remote, but they can all be

00:36:57.726 --> 00:37:00.206 A:middle
Siri Remote, but they can all be

00:37:00.206 --> 00:37:02.016 A:middle
distilled down to having an

00:37:02.016 --> 00:37:03.296 A:middle
action and a label.

00:37:05.096 --> 00:37:07.116 A:middle
Now just like button, every

00:37:07.116 --> 00:37:08.736 A:middle
control in SwiftUI carries the

00:37:08.736 --> 00:37:10.666 A:middle
same ability to have this

00:37:10.666 --> 00:37:11.966 A:middle
adaptive behavior.

00:37:13.276 --> 00:37:15.066 A:middle
Controls describe the purpose or

00:37:15.066 --> 00:37:16.466 A:middle
the role that they serve instead

00:37:16.466 --> 00:37:17.126 A:middle
of just how they look.

00:37:17.126 --> 00:37:18.816 A:middle
And this allows them to be

00:37:18.816 --> 00:37:19.896 A:middle
reused across these different

00:37:19.896 --> 00:37:21.886 A:middle
contexts and platforms and adapt

00:37:21.886 --> 00:37:22.716 A:middle
to those situations.

00:37:23.696 --> 00:37:24.606 A:middle
And this also helps them have

00:37:24.606 --> 00:37:26.716 A:middle
that smaller API surface catered

00:37:26.716 --> 00:37:27.606 A:middle
to that exact role.

00:37:27.606 --> 00:37:29.726 A:middle
And at the same time still

00:37:29.726 --> 00:37:31.426 A:middle
having fewer controls rather

00:37:31.426 --> 00:37:32.746 A:middle
than need a control for every

00:37:32.746 --> 00:37:33.926 A:middle
context you might need to use it

00:37:33.926 --> 00:37:34.206 A:middle
in.

00:37:35.726 --> 00:37:37.386 A:middle
And all the while still enabling

00:37:37.386 --> 00:37:38.766 A:middle
really powerful customization

00:37:39.046 --> 00:37:40.356 A:middle
such as completely redefining

00:37:40.356 --> 00:37:41.836 A:middle
how buttons should look in your

00:37:42.736 --> 00:37:42.826 A:middle
app.

00:37:43.756 --> 00:37:46.016 A:middle
Now we saw how this adaptivity

00:37:46.016 --> 00:37:47.406 A:middle
allowed us to quickly transform

00:37:47.406 --> 00:37:49.206 A:middle
from a simple stack of controls

00:37:49.486 --> 00:37:50.576 A:middle
into the standard look and feel

00:37:50.746 --> 00:37:51.546 A:middle
of a system form.

00:37:52.416 --> 00:37:53.666 A:middle
But this same adaptivity also

00:37:53.666 --> 00:37:54.516 A:middle
enables us to take these

00:37:54.516 --> 00:37:55.996 A:middle
controls to other platforms such

00:37:56.446 --> 00:37:58.126 A:middle
as the Watch, so we can quickly

00:37:58.126 --> 00:37:59.316 A:middle
order our toast on the go.

00:38:01.596 --> 00:38:02.456 A:middle
Now the other control we're

00:38:02.456 --> 00:38:04.236 A:middle
already using is Toggle.

00:38:04.956 --> 00:38:06.126 A:middle
And you've already seen how

00:38:06.126 --> 00:38:07.916 A:middle
Toggle in SwiftUI is more than

00:38:07.916 --> 00:38:09.006 A:middle
just a literal switch.

00:38:09.696 --> 00:38:11.586 A:middle
And this is true regardless of

00:38:11.586 --> 00:38:12.686 A:middle
the platform it's on.

00:38:13.616 --> 00:38:15.086 A:middle
And like button, Toggle has two

00:38:15.086 --> 00:38:16.926 A:middle
fundamental properties, whether

00:38:16.926 --> 00:38:18.486 A:middle
it's on or off, and the label

00:38:18.486 --> 00:38:19.766 A:middle
describing the overall purpose

00:38:20.156 --> 00:38:20.596 A:middle
of the Toggle.

00:38:21.656 --> 00:38:22.736 A:middle
And again, that's reflected in

00:38:22.876 --> 00:38:23.926 A:middle
the construction itself.

00:38:26.046 --> 00:38:26.916 A:middle
Now one notable difference from

00:38:26.916 --> 00:38:28.226 A:middle
button is that it doesn't take

00:38:28.226 --> 00:38:30.086 A:middle
an action, but instead takes a

00:38:30.086 --> 00:38:31.816 A:middle
binding to a Boolean value.

00:38:32.336 --> 00:38:33.876 A:middle
And this binding is a direct

00:38:33.916 --> 00:38:35.176 A:middle
read/write connection to some

00:38:35.176 --> 00:38:36.706 A:middle
piece of state or model in your

00:38:36.706 --> 00:38:38.176 A:middle
application and allows the

00:38:38.176 --> 00:38:39.706 A:middle
Toggle to reflect and update

00:38:39.706 --> 00:38:41.366 A:middle
that without manually needing to

00:38:41.366 --> 00:38:42.966 A:middle
respond to an action, pull the

00:38:42.966 --> 00:38:44.136 A:middle
value out and then set it in

00:38:44.136 --> 00:38:44.636 A:middle
your model.

00:38:45.246 --> 00:38:46.616 A:middle
It takes care of it all for

00:38:46.616 --> 00:38:46.956 A:middle
yourself.

00:38:48.516 --> 00:38:54.566 A:middle
[ Applause ]

00:38:55.066 --> 00:38:56.446 A:middle
Now Toggle and the other

00:38:56.446 --> 00:38:58.426 A:middle
controls are also adaptive in

00:38:58.426 --> 00:38:59.616 A:middle
one other very important way.

00:39:00.606 --> 00:39:01.986 A:middle
For some people, UI's are a

00:39:01.986 --> 00:39:03.816 A:middle
visual experience while others

00:39:03.816 --> 00:39:04.906 A:middle
might predominantly use their

00:39:04.906 --> 00:39:06.736 A:middle
other senses to experience that

00:39:06.736 --> 00:39:07.846 A:middle
exact same UI.

00:39:07.846 --> 00:39:10.436 A:middle
For instance, people with

00:39:10.436 --> 00:39:11.926 A:middle
impaired vision are able to use

00:39:11.926 --> 00:39:13.306 A:middle
VoiceOver to navigate and

00:39:13.306 --> 00:39:14.746 A:middle
interact with your app using

00:39:14.746 --> 00:39:15.106 A:middle
audio.

00:39:15.106 --> 00:39:16.996 A:middle
And for those of you who haven't

00:39:16.996 --> 00:39:18.116 A:middle
heard it, this is what it sounds

00:39:18.116 --> 00:39:19.566 A:middle
like to begin using VoiceOver.

00:39:19.956 --> 00:39:21.016 A:middle
&gt;&gt; VoiceOver On.

00:39:22.406 --> 00:39:23.876 A:middle
&gt;&gt; Now VoiceOver is just one of

00:39:23.876 --> 00:39:25.196 A:middle
the system-wide features that

00:39:25.196 --> 00:39:26.896 A:middle
are able to take your UI and

00:39:26.896 --> 00:39:28.166 A:middle
surface it in these alternate

00:39:28.166 --> 00:39:28.706 A:middle
forms.

00:39:29.326 --> 00:39:30.766 A:middle
And because Toggle and the other

00:39:30.766 --> 00:39:32.056 A:middle
controls are defined based on

00:39:32.056 --> 00:39:34.216 A:middle
their purpose and include that

00:39:34.216 --> 00:39:35.816 A:middle
human interpretable label, they

00:39:35.816 --> 00:39:37.026 A:middle
can automatically adapt for

00:39:37.396 --> 00:39:38.206 A:middle
these features.

00:39:39.216 --> 00:39:40.176 A:middle
So when we navigate to this

00:39:40.176 --> 00:39:41.236 A:middle
Toggle using VoiceOver --

00:39:41.946 --> 00:39:44.126 A:middle
&gt;&gt; Include Salt, Switch button,

00:39:44.516 --> 00:39:48.236 A:middle
On Double-Tap to Toggle Setting.

00:39:48.806 --> 00:39:50.386 A:middle
&gt;&gt; It is able to reflect that

00:39:50.386 --> 00:39:50.846 A:middle
same label.

00:39:50.846 --> 00:39:52.766 A:middle
And this is true even when the

00:39:52.766 --> 00:39:53.716 A:middle
label isn't text.

00:39:54.606 --> 00:39:56.166 A:middle
Now for images, if the image

00:39:56.166 --> 00:39:57.476 A:middle
name isn't descriptive enough,

00:39:57.696 --> 00:39:58.806 A:middle
you can explicitly provide a

00:39:58.806 --> 00:40:00.406 A:middle
label directly alongside the

00:39:58.806 --> 00:40:00.406 A:middle
label directly alongside the

00:40:00.406 --> 00:40:00.886 A:middle
image.

00:40:03.046 --> 00:40:03.956 A:middle
And of course even for

00:40:03.956 --> 00:40:04.746 A:middle
completely custom --

00:40:05.151 --> 00:40:07.151 A:middle
[ Applause ]

00:40:07.286 --> 00:40:08.216 A:middle
It's really exciting, yeah.

00:40:09.041 --> 00:40:11.041 A:middle
[ Applause ]

00:40:11.066 --> 00:40:11.696 A:middle
And of course even for

00:40:11.696 --> 00:40:13.386 A:middle
completely custom views, you can

00:40:13.386 --> 00:40:14.426 A:middle
always explicitly provide the

00:40:14.426 --> 00:40:15.846 A:middle
label using the accessibility

00:40:15.846 --> 00:40:16.706 A:middle
label modifier.

00:40:18.086 --> 00:40:19.176 A:middle
Now in addition to VoiceOver,

00:40:19.376 --> 00:40:20.706 A:middle
this information also admits use

00:40:20.706 --> 00:40:22.186 A:middle
for other features, like the new

00:40:22.186 --> 00:40:24.276 A:middle
Voice Control on iOS and macOS

00:40:24.736 --> 00:40:26.096 A:middle
so that we can say, "Tap Include

00:40:26.146 --> 00:40:28.046 A:middle
Salt," and our UI behaves as we

00:40:28.046 --> 00:40:28.416 A:middle
expect.

00:40:29.676 --> 00:40:30.646 A:middle
And making sure your app is

00:40:30.646 --> 00:40:32.016 A:middle
accessible means it will work

00:40:32.016 --> 00:40:32.906 A:middle
with all these different

00:40:32.906 --> 00:40:34.236 A:middle
technologies and means that

00:40:34.236 --> 00:40:36.026 A:middle
everyone can use your app.

00:40:36.026 --> 00:40:38.086 A:middle
And SwiftUI is here to help.

00:40:39.676 --> 00:40:40.666 A:middle
There's a great talk this year

00:40:40.666 --> 00:40:41.626 A:middle
that will go into a lot more

00:40:41.626 --> 00:40:43.116 A:middle
detail about how you can make

00:40:43.116 --> 00:40:45.306 A:middle
sure that your SwiftUI app is

00:40:45.306 --> 00:40:45.976 A:middle
fully accessible.

00:40:48.656 --> 00:40:49.766 A:middle
Now at this point we've been

00:40:49.766 --> 00:40:50.916 A:middle
able to quickly build up this

00:40:50.916 --> 00:40:52.566 A:middle
initial basic interface that has

00:40:52.566 --> 00:40:53.636 A:middle
all the behaviors we expect:

00:40:54.466 --> 00:40:56.356 A:middle
dynamic type, Dark Mode and

00:40:56.356 --> 00:40:57.066 A:middle
accessibility.

00:40:57.066 --> 00:40:58.956 A:middle
But we've really only added a

00:40:58.956 --> 00:41:00.576 A:middle
few customization options for

00:40:58.956 --> 00:41:00.576 A:middle
few customization options for

00:41:00.576 --> 00:41:01.466 A:middle
the toast itself.

00:41:02.476 --> 00:41:04.256 A:middle
And of course everyone knows

00:41:04.316 --> 00:41:05.636 A:middle
that a professional artisanal

00:41:05.636 --> 00:41:07.076 A:middle
toast repertoire comes with a

00:41:07.076 --> 00:41:08.026 A:middle
variety of different bread

00:41:08.026 --> 00:41:09.716 A:middle
types, methods to prepare the

00:41:09.716 --> 00:41:11.676 A:middle
avocado and of course a variety

00:41:11.676 --> 00:41:13.056 A:middle
of spreads and add-ons.

00:41:13.786 --> 00:41:15.826 A:middle
To add in these more advanced

00:41:15.826 --> 00:41:17.986 A:middle
configuration options, we can

00:41:17.986 --> 00:41:19.386 A:middle
look for some inspiration from

00:41:19.386 --> 00:41:21.786 A:middle
the flexibility that is macOS.

00:41:22.016 --> 00:41:23.026 A:middle
Or we might want to have a

00:41:23.026 --> 00:41:24.496 A:middle
little utility window to allow

00:41:24.496 --> 00:41:26.206 A:middle
us to order toast right from our

00:41:26.206 --> 00:41:26.546 A:middle
desk.

00:41:28.276 --> 00:41:29.576 A:middle
You can see here that the

00:41:29.576 --> 00:41:30.706 A:middle
existing controls we're already

00:41:30.706 --> 00:41:32.396 A:middle
using take on the expected look

00:41:32.586 --> 00:41:34.376 A:middle
for macOS -- the Toggles, the

00:41:34.376 --> 00:41:35.446 A:middle
stepper, the button.

00:41:35.446 --> 00:41:37.036 A:middle
But we also have a few

00:41:37.036 --> 00:41:38.666 A:middle
additional controls that allow

00:41:38.666 --> 00:41:39.646 A:middle
us to pick from the type of

00:41:39.686 --> 00:41:42.676 A:middle
bread, the spread to add, and

00:41:42.706 --> 00:41:43.976 A:middle
how to prepare the avocado.

00:41:46.436 --> 00:41:48.046 A:middle
Now these are all examples of

00:41:48.046 --> 00:41:49.436 A:middle
the Picker control in SwiftUI.

00:41:50.206 --> 00:41:51.906 A:middle
Picker is built for the purpose

00:41:51.906 --> 00:41:53.666 A:middle
of selecting one value out of a

00:41:53.666 --> 00:41:54.316 A:middle
set of options.

00:41:55.606 --> 00:41:56.796 A:middle
Now Picker is obviously a little

00:41:56.796 --> 00:41:58.206 A:middle
more complicated than the other

00:41:58.206 --> 00:42:00.196 A:middle
controls and in fact has three

00:41:58.206 --> 00:42:00.196 A:middle
controls and in fact has three

00:42:00.196 --> 00:42:01.416 A:middle
core properties instead of two.

00:42:02.596 --> 00:42:03.456 A:middle
The options that you can pick

00:42:03.456 --> 00:42:05.356 A:middle
from, the current selection from

00:42:05.356 --> 00:42:06.816 A:middle
those options and the label

00:42:06.946 --> 00:42:08.146 A:middle
describing the overall purpose

00:42:08.436 --> 00:42:11.006 A:middle
of the Picker.

00:42:11.186 --> 00:42:13.216 A:middle
Now the selection is a binding,

00:42:13.796 --> 00:42:14.896 A:middle
just like Toggles is on

00:42:14.896 --> 00:42:15.276 A:middle
property.

00:42:15.856 --> 00:42:17.016 A:middle
Which allows us to directly

00:42:17.016 --> 00:42:18.896 A:middle
connect it again to our modeler

00:42:18.896 --> 00:42:19.256 A:middle
state.

00:42:19.346 --> 00:42:21.416 A:middle
And the type of this binding

00:42:21.656 --> 00:42:23.376 A:middle
corresponds to the tag values

00:42:23.456 --> 00:42:24.506 A:middle
associated with each of these

00:42:24.506 --> 00:42:24.886 A:middle
options.

00:42:25.926 --> 00:42:26.746 A:middle
When one of the options is

00:42:26.746 --> 00:42:28.636 A:middle
selected, that tag value is

00:42:28.636 --> 00:42:29.826 A:middle
written back into the selection

00:42:30.096 --> 00:42:31.556 A:middle
and back into our model, all

00:42:31.556 --> 00:42:32.946 A:middle
with no work.

00:42:35.046 --> 00:42:36.676 A:middle
Now of course Pickers on macOS

00:42:36.776 --> 00:42:38.366 A:middle
don't always manifest as pop-up

00:42:38.366 --> 00:42:38.656 A:middle
buttons.

00:42:39.416 --> 00:42:40.736 A:middle
In this single window, we can

00:42:40.736 --> 00:42:41.766 A:middle
see two different styles of

00:42:41.766 --> 00:42:44.356 A:middle
Picker, both a pop-up button and

00:42:44.356 --> 00:42:45.726 A:middle
a radio group.

00:42:46.396 --> 00:42:47.926 A:middle
While SwiftUI automatically

00:42:47.926 --> 00:42:49.476 A:middle
provides a default style that's

00:42:49.476 --> 00:42:50.686 A:middle
adaptive to where controls are

00:42:50.686 --> 00:42:53.176 A:middle
used, controls also inherently

00:42:53.176 --> 00:42:54.756 A:middle
have the ability to customize

00:42:54.756 --> 00:42:56.486 A:middle
their styling, both to

00:42:56.486 --> 00:42:58.136 A:middle
system-provided styles and even

00:42:58.136 --> 00:42:59.246 A:middle
custom-built ones.

00:43:00.336 --> 00:43:01.436 A:middle
In this case, we want to

00:43:01.436 --> 00:43:02.996 A:middle
override the default style and

00:43:02.996 --> 00:43:04.636 A:middle
impose an explicit radio group

00:43:04.976 --> 00:43:05.946 A:middle
since we know that we are only

00:43:05.946 --> 00:43:07.106 A:middle
picking from two options.

00:43:08.986 --> 00:43:10.336 A:middle
Now we can consider doing the

00:43:10.336 --> 00:43:11.386 A:middle
same for our spreads.

00:43:12.566 --> 00:43:13.636 A:middle
But what might start out as a

00:43:13.636 --> 00:43:14.786 A:middle
humble set of four possible

00:43:14.786 --> 00:43:16.916 A:middle
spreads could quickly grow into

00:43:16.916 --> 00:43:17.716 A:middle
a wide variety.

00:43:18.466 --> 00:43:20.486 A:middle
So when it comes to building our

00:43:20.486 --> 00:43:22.826 A:middle
Picker, we obviously wouldn't

00:43:22.826 --> 00:43:23.716 A:middle
want to splay out each of these

00:43:23.716 --> 00:43:26.236 A:middle
options one by one, just as we

00:43:26.236 --> 00:43:27.516 A:middle
wouldn't want to build a UI that

00:43:27.516 --> 00:43:29.046 A:middle
displays them all as radio

00:43:29.046 --> 00:43:29.356 A:middle
buttons.

00:43:31.006 --> 00:43:32.406 A:middle
We've already seen using ForEach

00:43:32.406 --> 00:43:33.826 A:middle
to build data-driven views.

00:43:34.476 --> 00:43:35.666 A:middle
And since each of these options

00:43:35.776 --> 00:43:37.576 A:middle
are views themselves, we can use

00:43:37.576 --> 00:43:38.206 A:middle
it here as well.

00:43:39.836 --> 00:43:40.546 A:middle
This is a lot better.

00:43:41.876 --> 00:43:42.846 A:middle
Here we're going through each of

00:43:42.846 --> 00:43:44.406 A:middle
the cases of spread and creating

00:43:44.406 --> 00:43:45.666 A:middle
a new option with the spread's

00:43:45.666 --> 00:43:47.456 A:middle
name and the spread itself as

00:43:47.456 --> 00:43:47.836 A:middle
the tag.

00:43:50.236 --> 00:43:50.546 A:middle
Now --

00:43:51.516 --> 00:43:56.676 A:middle
[ Applause ]

00:43:57.176 --> 00:43:58.946 A:middle
Now obviously Pickers exist on

00:43:58.946 --> 00:43:59.906 A:middle
more than just macOS.

00:44:00.306 --> 00:44:02.066 A:middle
And then isolation -- a Picker

00:44:02.066 --> 00:44:03.096 A:middle
on iOS looks like the

00:44:03.096 --> 00:44:04.456 A:middle
traditional wheel-style Picker.

00:44:05.446 --> 00:44:06.806 A:middle
However, since we're building up

00:44:06.806 --> 00:44:08.406 A:middle
a form, SwiftUI will

00:44:08.406 --> 00:44:09.816 A:middle
automatically adapt Picker to

00:44:09.816 --> 00:44:11.226 A:middle
take on another really common

00:44:11.226 --> 00:44:12.696 A:middle
style of this type of UI.

00:44:14.686 --> 00:44:16.276 A:middle
Here we can see that the spread

00:44:16.276 --> 00:44:18.006 A:middle
Picker is now represented by a

00:44:18.006 --> 00:44:19.866 A:middle
navigation row displaying both

00:44:19.866 --> 00:44:21.396 A:middle
its label and currently selected

00:44:21.396 --> 00:44:21.786 A:middle
value.

00:44:22.936 --> 00:44:24.266 A:middle
Tapping on that row brings us to

00:44:24.266 --> 00:44:25.636 A:middle
a list of all of our options.

00:44:26.076 --> 00:44:27.326 A:middle
And tapping one of those selects

00:44:27.326 --> 00:44:28.146 A:middle
it and brings us back.

00:44:29.516 --> 00:44:36.646 A:middle
[ Applause ]

00:44:37.146 --> 00:44:38.096 A:middle
You stole my punch line.

00:44:38.286 --> 00:44:39.856 A:middle
This is SwiftUI taking care and

00:44:39.856 --> 00:44:41.266 A:middle
creating that entire interaction

00:44:41.526 --> 00:44:43.166 A:middle
just with our simple creation of

00:44:43.166 --> 00:44:43.726 A:middle
a Picker.

00:44:44.516 --> 00:44:49.646 A:middle
[ Applause ]

00:44:50.146 --> 00:44:51.246 A:middle
Making it trivial to build out

00:44:51.246 --> 00:44:52.306 A:middle
the rest of our three Pickers.

00:44:53.196 --> 00:44:54.666 A:middle
And just like in macOS, we still

00:44:54.666 --> 00:44:56.206 A:middle
have explicit control over the

00:44:56.206 --> 00:44:56.866 A:middle
ultimate style.

00:44:57.406 --> 00:44:58.426 A:middle
If we wanted a wheel-style

00:44:58.426 --> 00:44:59.796 A:middle
Picker here, we could again just

00:44:59.796 --> 00:45:00.976 A:middle
impose that.

00:44:59.796 --> 00:45:00.976 A:middle
impose that.

00:45:04.046 --> 00:45:06.376 A:middle
Now we have a pretty nice set of

00:45:06.376 --> 00:45:07.086 A:middle
apps at this point.

00:45:07.836 --> 00:45:08.906 A:middle
But it's one thing to order

00:45:08.906 --> 00:45:10.866 A:middle
toast at our desk or while on

00:45:10.866 --> 00:45:12.946 A:middle
the go, and it's another thing

00:45:12.946 --> 00:45:14.526 A:middle
entirely to have heated debates

00:45:14.696 --> 00:45:16.096 A:middle
with friends and family about

00:45:16.096 --> 00:45:17.546 A:middle
what exactly makes the best

00:45:17.546 --> 00:45:18.366 A:middle
avocado toast.

00:45:21.066 --> 00:45:21.736 A:middle
The form on the right side

00:45:21.736 --> 00:45:23.026 A:middle
consists of the same content

00:45:23.026 --> 00:45:24.556 A:middle
that we saw in the other apps

00:45:25.136 --> 00:45:26.186 A:middle
and taking a look at the code

00:45:26.186 --> 00:45:27.846 A:middle
that's used to build it, it's

00:45:27.846 --> 00:45:28.896 A:middle
not a surprise that it's using

00:45:28.896 --> 00:45:30.296 A:middle
the same structure and control

00:45:30.296 --> 00:45:31.666 A:middle
creation that we used before.

00:45:32.406 --> 00:45:33.556 A:middle
And again, the difference is

00:45:33.556 --> 00:45:34.726 A:middle
that automatic adaptation.

00:45:35.436 --> 00:45:36.536 A:middle
For instance, Toggle being

00:45:36.536 --> 00:45:37.916 A:middle
represented using on/off buttons

00:45:38.266 --> 00:45:38.976 A:middle
instead of switches.

00:45:41.286 --> 00:45:42.146 A:middle
And this gets to the heart of

00:45:42.146 --> 00:45:43.146 A:middle
something really important

00:45:43.356 --> 00:45:44.266 A:middle
across all of SwiftUI.

00:45:44.266 --> 00:45:46.886 A:middle
The idea that you can learn a

00:45:46.886 --> 00:45:48.726 A:middle
concept once and apply it

00:45:48.726 --> 00:45:49.136 A:middle
anywhere.

00:45:50.456 --> 00:45:51.986 A:middle
SwiftUI is not just a means to

00:45:51.986 --> 00:45:53.676 A:middle
write once and run anywhere, but

00:45:53.676 --> 00:45:54.726 A:middle
it's a framework that enables

00:45:54.726 --> 00:45:56.086 A:middle
you to learn these core concepts

00:45:56.376 --> 00:45:57.376 A:middle
and use them in a variety of

00:45:57.376 --> 00:45:58.366 A:middle
different contexts and

00:45:58.366 --> 00:45:58.866 A:middle
platforms.

00:45:59.966 --> 00:46:01.386 A:middle
This scales from the modifiers

00:45:59.966 --> 00:46:01.386 A:middle
This scales from the modifiers

00:46:01.386 --> 00:46:02.906 A:middle
and ViewBuilder syntax to the

00:46:02.906 --> 00:46:04.686 A:middle
shared core types like color,

00:46:04.686 --> 00:46:06.776 A:middle
image and ForEach, to even these

00:46:06.836 --> 00:46:07.886 A:middle
higher-level controls.

00:46:08.476 --> 00:46:11.056 A:middle
One example that really

00:46:11.056 --> 00:46:12.366 A:middle
illustrates to me this reuse of

00:46:12.366 --> 00:46:14.096 A:middle
knowledge is a slightly

00:46:14.096 --> 00:46:16.726 A:middle
platform-specific example of

00:46:16.726 --> 00:46:17.786 A:middle
building a contextMenu.

00:46:18.376 --> 00:46:20.696 A:middle
The contextMenu itself can be

00:46:20.696 --> 00:46:22.526 A:middle
attached to an associated view

00:46:22.526 --> 00:46:23.326 A:middle
using a modifier.

00:46:23.416 --> 00:46:25.446 A:middle
And this modifier uses the

00:46:25.446 --> 00:46:27.136 A:middle
ViewBuilder syntax to define its

00:46:27.136 --> 00:46:27.816 A:middle
menu contents.

00:46:28.586 --> 00:46:29.516 A:middle
Now if we take a look at the

00:46:29.516 --> 00:46:31.066 A:middle
menu, we can see a few familiar

00:46:31.066 --> 00:46:31.746 A:middle
concepts.

00:46:32.636 --> 00:46:33.806 A:middle
Some elements that on click

00:46:34.136 --> 00:46:35.456 A:middle
perform an action and have a

00:46:35.456 --> 00:46:36.656 A:middle
label describing that action,

00:46:37.356 --> 00:46:38.946 A:middle
and others that specifically get

00:46:38.946 --> 00:46:39.756 A:middle
turned on and off.

00:46:39.756 --> 00:46:42.186 A:middle
So it's not a surprise that the

00:46:42.186 --> 00:46:43.896 A:middle
contents themselves are built up

00:46:43.996 --> 00:46:45.456 A:middle
using the same controls we've

00:46:45.456 --> 00:46:46.406 A:middle
already learned how to use.

00:46:47.026 --> 00:46:48.576 A:middle
buttons, dividers and Toggles.

00:46:49.636 --> 00:46:51.516 A:middle
But still, automatically taking

00:46:51.516 --> 00:46:52.766 A:middle
on the expected look and feel

00:46:53.066 --> 00:46:54.906 A:middle
for our macOS menu, from the

00:46:54.906 --> 00:46:56.316 A:middle
hover and accelerated gesture

00:46:56.316 --> 00:46:57.506 A:middle
handling, to the special

00:46:57.506 --> 00:46:58.976 A:middle
highlight and selection styling.

00:47:01.516 --> 00:47:03.016 A:middle
From these few examples, you can

00:47:03.016 --> 00:47:04.266 A:middle
already tell that controls in

00:47:04.266 --> 00:47:05.606 A:middle
SwiftUI are a little bit

00:47:05.606 --> 00:47:05.936 A:middle
special.

00:47:06.796 --> 00:47:07.556 A:middle
They're defined based on their

00:47:07.556 --> 00:47:08.836 A:middle
purpose, the role that they

00:47:08.836 --> 00:47:10.506 A:middle
serve, their connection to your

00:47:10.506 --> 00:47:11.936 A:middle
app's model, rather than

00:47:11.936 --> 00:47:12.936 A:middle
specifically to their visual

00:47:12.936 --> 00:47:13.266 A:middle
appearance.

00:47:14.236 --> 00:47:14.866 A:middle
And this means that they're

00:47:14.866 --> 00:47:16.506 A:middle
inherently reusable across a

00:47:16.506 --> 00:47:17.746 A:middle
variety of historic contexts,

00:47:18.236 --> 00:47:19.076 A:middle
and the appropriate look and

00:47:19.076 --> 00:47:20.466 A:middle
feel can be determined based on

00:47:20.466 --> 00:47:22.436 A:middle
that context, platform or other

00:47:22.436 --> 00:47:23.016 A:middle
information.

00:47:23.936 --> 00:47:25.306 A:middle
And at the same time, they're

00:47:25.426 --> 00:47:27.636 A:middle
customizable, both in their use

00:47:27.636 --> 00:47:29.546 A:middle
of views as labels and options

00:47:29.626 --> 00:47:30.506 A:middle
as well as being able to

00:47:30.506 --> 00:47:32.386 A:middle
arbitrarily style these controls

00:47:32.696 --> 00:47:33.856 A:middle
from the system styles like you

00:47:33.856 --> 00:47:35.066 A:middle
saw with Picker to even

00:47:35.066 --> 00:47:36.406 A:middle
completely custom-built styles.

00:47:37.216 --> 00:47:38.176 A:middle
And no matter what the style,

00:47:38.616 --> 00:47:39.616 A:middle
still having accessibility

00:47:39.616 --> 00:47:40.976 A:middle
support built right in.

00:47:44.046 --> 00:47:45.236 A:middle
Now earlier Matt showed a few

00:47:45.236 --> 00:47:47.126 A:middle
examples of using modifiers to

00:47:47.126 --> 00:47:49.406 A:middle
impose additional behavior on

00:47:49.406 --> 00:47:49.846 A:middle
views.

00:47:50.296 --> 00:47:51.596 A:middle
And the same is true for

00:47:51.596 --> 00:47:52.746 A:middle
controls as well.

00:47:54.606 --> 00:47:55.846 A:middle
One example that those of you on

00:47:55.846 --> 00:47:56.776 A:middle
iOS will already be familiar

00:47:56.776 --> 00:47:58.226 A:middle
with is changing the tint or

00:47:58.296 --> 00:48:00.556 A:middle
accent color for your UI, which

00:47:58.296 --> 00:48:00.556 A:middle
accent color for your UI, which

00:48:00.556 --> 00:48:01.356 A:middle
affects how many different

00:48:01.356 --> 00:48:02.236 A:middle
system controls appear.

00:48:03.016 --> 00:48:04.346 A:middle
And if we want to apply this to

00:48:04.346 --> 00:48:06.156 A:middle
our entire app, we can apply the

00:48:06.156 --> 00:48:07.696 A:middle
accentColor modifier to our

00:48:07.696 --> 00:48:09.126 A:middle
outermost view and it will be

00:48:09.126 --> 00:48:10.106 A:middle
inherited by the entire

00:48:10.106 --> 00:48:11.666 A:middle
hierarchy such as this button.

00:48:11.666 --> 00:48:14.486 A:middle
Now when it comes to disabling

00:48:14.486 --> 00:48:15.956 A:middle
controls, we can use the

00:48:15.956 --> 00:48:16.846 A:middle
disabled modifier.

00:48:17.686 --> 00:48:18.736 A:middle
For instance, disabling the

00:48:18.736 --> 00:48:19.846 A:middle
Order button when maybe there

00:48:19.846 --> 00:48:21.086 A:middle
are no toasts being ordered.

00:48:21.086 --> 00:48:23.016 A:middle
But there also might be

00:48:23.016 --> 00:48:24.106 A:middle
scenarios when we need to

00:48:24.106 --> 00:48:25.236 A:middle
disable entire groups of

00:48:25.236 --> 00:48:25.836 A:middle
controls.

00:48:26.536 --> 00:48:27.616 A:middle
For instance, when we're unable

00:48:27.616 --> 00:48:28.646 A:middle
to connect to the toast network

00:48:28.876 --> 00:48:30.606 A:middle
to even place our order, we

00:48:30.606 --> 00:48:32.146 A:middle
probably want to disable each

00:48:32.146 --> 00:48:33.596 A:middle
and every control in our form.

00:48:34.726 --> 00:48:36.046 A:middle
But this looks a little tedious

00:48:36.046 --> 00:48:37.566 A:middle
and error-prone if we ever add

00:48:37.566 --> 00:48:38.456 A:middle
additional controls.

00:48:39.066 --> 00:48:40.146 A:middle
But like you saw with modifiers

00:48:40.146 --> 00:48:41.986 A:middle
in general, we can instead lift

00:48:41.986 --> 00:48:43.696 A:middle
this modifier up and apply the

00:48:43.696 --> 00:48:45.126 A:middle
modifier to our entire form,

00:48:45.536 --> 00:48:46.226 A:middle
just like we did with the

00:48:46.226 --> 00:48:47.226 A:middle
accentColor modifier.

00:48:48.516 --> 00:48:54.546 A:middle
[ Applause ]

00:48:55.046 --> 00:48:56.226 A:middle
Now all the controls in our form

00:48:56.226 --> 00:48:57.236 A:middle
will be disabled based on this

00:48:57.236 --> 00:48:58.126 A:middle
single statement.

00:48:59.156 --> 00:49:01.286 A:middle
And all of this adaptivity and

00:48:59.156 --> 00:49:01.286 A:middle
And all of this adaptivity and

00:49:01.286 --> 00:49:03.176 A:middle
inherited behavior is pretty

00:49:03.176 --> 00:49:04.976 A:middle
powerful and potentially comes

00:49:04.976 --> 00:49:06.516 A:middle
as a surprise since we're using

00:49:06.516 --> 00:49:08.686 A:middle
these simple value-type views.

00:49:09.316 --> 00:49:10.286 A:middle
But let's take a little look

00:49:10.336 --> 00:49:11.666 A:middle
under the hood for how some of

00:49:11.666 --> 00:49:12.336 A:middle
this works.

00:49:12.866 --> 00:49:15.116 A:middle
These examples are built on top

00:49:15.116 --> 00:49:16.146 A:middle
of something called the

00:49:16.146 --> 00:49:16.686 A:middle
environment.

00:49:17.706 --> 00:49:18.976 A:middle
And the environment consists of

00:49:18.976 --> 00:49:20.436 A:middle
all the context for where your

00:49:20.436 --> 00:49:21.056 A:middle
views appear in.

00:49:22.486 --> 00:49:23.256 A:middle
These are things that you might

00:49:23.256 --> 00:49:24.276 A:middle
have previously thought of as

00:49:24.276 --> 00:49:26.066 A:middle
being shared global state, part

00:49:26.066 --> 00:49:26.936 A:middle
of our trait collection or

00:49:26.936 --> 00:49:28.256 A:middle
properties on your view, or

00:49:28.256 --> 00:49:29.346 A:middle
maybe even had to reach up to

00:49:29.346 --> 00:49:30.796 A:middle
some ancestor object to pull the

00:49:30.796 --> 00:49:31.326 A:middle
value out.

00:49:32.376 --> 00:49:33.866 A:middle
But now this is all packaged up

00:49:34.026 --> 00:49:34.796 A:middle
into the environment.

00:49:35.326 --> 00:49:36.916 A:middle
And it's accessible to any of

00:49:36.916 --> 00:49:38.076 A:middle
you that might want to access

00:49:38.076 --> 00:49:38.276 A:middle
it.

00:49:39.246 --> 00:49:40.286 A:middle
And each view inherits that

00:49:40.286 --> 00:49:41.696 A:middle
environment from its parent.

00:49:43.076 --> 00:49:44.826 A:middle
Now as an example, when running

00:49:44.826 --> 00:49:46.196 A:middle
in an Arabic locale, the

00:49:46.196 --> 00:49:47.476 A:middle
environment at the root of our

00:49:47.476 --> 00:49:48.776 A:middle
app has a right-to-left layout

00:49:48.776 --> 00:49:49.166 A:middle
direction.

00:49:49.886 --> 00:49:51.156 A:middle
And every view inherits that

00:49:51.156 --> 00:49:51.746 A:middle
layout direction.

00:49:52.716 --> 00:49:54.136 A:middle
But at any given point, the

00:49:54.136 --> 00:49:55.086 A:middle
environment can also be

00:49:55.086 --> 00:49:56.526 A:middle
overridden for a subtree of

00:49:56.526 --> 00:49:57.016 A:middle
views.

00:49:58.176 --> 00:49:59.046 A:middle
So if we were building up some

00:49:59.046 --> 00:50:00.526 A:middle
media playback controls, we'd

00:49:59.046 --> 00:50:00.526 A:middle
media playback controls, we'd

00:50:00.526 --> 00:50:01.616 A:middle
want to ensure that they're laid

00:50:01.616 --> 00:50:02.686 A:middle
out left-to-right.

00:50:03.546 --> 00:50:04.636 A:middle
And so by using the environment

00:50:04.636 --> 00:50:06.216 A:middle
modifier, we can impose that on

00:50:06.216 --> 00:50:06.976 A:middle
that hierarchy.

00:50:10.046 --> 00:50:11.666 A:middle
Now the environment is also one

00:50:11.666 --> 00:50:12.776 A:middle
of the important technologies

00:50:12.956 --> 00:50:14.596 A:middle
that helps make previews so

00:50:14.596 --> 00:50:15.156 A:middle
powerful.

00:50:15.756 --> 00:50:16.836 A:middle
It enables showing the same

00:50:16.836 --> 00:50:18.466 A:middle
exact UI in a variety of these

00:50:18.466 --> 00:50:19.936 A:middle
different contexts so we can

00:50:19.936 --> 00:50:21.206 A:middle
really preview our app against

00:50:21.206 --> 00:50:22.516 A:middle
all the ways people might be

00:50:22.516 --> 00:50:22.976 A:middle
using them.

00:50:25.276 --> 00:50:26.196 A:middle
Now you've seen how the

00:50:26.196 --> 00:50:26.986 A:middle
environment automatically

00:50:26.986 --> 00:50:28.416 A:middle
affects various system views,

00:50:28.416 --> 00:50:29.696 A:middle
and custom views are able to use

00:50:29.696 --> 00:50:30.986 A:middle
the environment as well.

00:50:31.746 --> 00:50:32.516 A:middle
So I've been working on a little

00:50:32.516 --> 00:50:33.886 A:middle
control for our next update,

00:50:34.696 --> 00:50:36.406 A:middle
which allows deciding exactly

00:50:36.406 --> 00:50:38.076 A:middle
where on top of our toast an egg

00:50:38.076 --> 00:50:38.766 A:middle
should be placed.

00:50:39.646 --> 00:50:41.156 A:middle
You can see it's built up using

00:50:41.156 --> 00:50:43.116 A:middle
a simple ZStack of two images: a

00:50:43.116 --> 00:50:44.676 A:middle
toast on the bottom and an image

00:50:44.676 --> 00:50:45.436 A:middle
being positioned with a

00:50:45.436 --> 00:50:46.666 A:middle
dragGesture on top.

00:50:47.526 --> 00:50:48.686 A:middle
With that, we can tap and drag

00:50:48.686 --> 00:50:50.066 A:middle
the egg into just the right

00:50:50.066 --> 00:50:50.426 A:middle
spot.

00:50:51.756 --> 00:50:53.466 A:middle
Now if we go to use our Egg

00:50:53.466 --> 00:50:55.476 A:middle
View, there may be some cases we

00:50:55.476 --> 00:50:56.246 A:middle
need to disable it.

00:50:56.466 --> 00:50:57.766 A:middle
Maybe the shop ran out of eggs.

00:50:58.986 --> 00:51:00.106 A:middle
But since we're using a system

00:50:58.986 --> 00:51:00.106 A:middle
But since we're using a system

00:51:00.106 --> 00:51:01.416 A:middle
dragGesture, it will

00:51:01.466 --> 00:51:03.176 A:middle
automatically be disabled by the

00:51:03.176 --> 00:51:04.036 A:middle
disabled modifier.

00:51:04.036 --> 00:51:05.316 A:middle
So if somebody comes in and

00:51:05.316 --> 00:51:06.946 A:middle
tries to drag that egg, it won't

00:51:06.946 --> 00:51:07.306 A:middle
budge.

00:51:08.496 --> 00:51:09.826 A:middle
Of course, we should also offer

00:51:09.826 --> 00:51:10.956 A:middle
some visual feedback that it's

00:51:10.986 --> 00:51:12.526 A:middle
disabled as well, and thankfully

00:51:12.526 --> 00:51:13.206 A:middle
that's pretty easy.

00:51:14.606 --> 00:51:15.706 A:middle
We can add an environment

00:51:15.706 --> 00:51:17.506 A:middle
property that's connected to the

00:51:17.506 --> 00:51:18.586 A:middle
isEnabled value from the

00:51:18.586 --> 00:51:19.036 A:middle
environment.

00:51:19.886 --> 00:51:21.276 A:middle
And we can use its value just

00:51:21.276 --> 00:51:22.146 A:middle
like any other property.

00:51:22.966 --> 00:51:24.206 A:middle
For instance, reducing the

00:51:24.206 --> 00:51:25.276 A:middle
saturation of our overall

00:51:25.276 --> 00:51:26.976 A:middle
construction when it's disabled.

00:51:30.066 --> 00:51:30.766 A:middle
And if the egg placement view

00:51:30.766 --> 00:51:32.126 A:middle
ever becomes no longer disabled,

00:51:32.446 --> 00:51:33.816 A:middle
SwiftUI will automatically

00:51:33.816 --> 00:51:35.286 A:middle
recall our view's body and

00:51:35.286 --> 00:51:36.606 A:middle
re-render it to the now

00:51:37.026 --> 00:51:37.896 A:middle
undisabled state.

00:51:37.976 --> 00:51:41.126 A:middle
And again, this is SwiftUI

00:51:41.126 --> 00:51:42.026 A:middle
automatically managing our

00:51:42.026 --> 00:51:43.106 A:middle
dependencies on the environment

00:51:43.106 --> 00:51:44.276 A:middle
so we can just express our

00:51:44.276 --> 00:51:45.676 A:middle
view's relationship to it and

00:51:45.676 --> 00:51:46.846 A:middle
not have to worry about

00:51:46.846 --> 00:51:47.966 A:middle
observing for when things

00:51:47.966 --> 00:51:48.416 A:middle
change.

00:51:51.436 --> 00:51:53.236 A:middle
Now we've covered a number of

00:51:53.236 --> 00:51:54.396 A:middle
controls and how to compose

00:51:54.396 --> 00:51:55.096 A:middle
those all together.

00:51:55.096 --> 00:51:56.766 A:middle
But we're still missing one

00:51:56.766 --> 00:51:58.376 A:middle
really important piece of every

00:51:58.376 --> 00:52:00.286 A:middle
app, and that's navigating

00:51:58.376 --> 00:52:00.286 A:middle
app, and that's navigating

00:52:00.286 --> 00:52:02.246 A:middle
between these screens, from the

00:52:02.246 --> 00:52:03.896 A:middle
order form to the egg placement

00:52:03.896 --> 00:52:05.496 A:middle
Picker to the order history.

00:52:06.236 --> 00:52:06.946 A:middle
Now let's start in with the

00:52:06.946 --> 00:52:07.456 A:middle
order form.

00:52:07.456 --> 00:52:09.166 A:middle
Now a problem that some of you

00:52:09.166 --> 00:52:10.186 A:middle
might have already noticed is

00:52:10.186 --> 00:52:11.276 A:middle
the look of the title in the

00:52:11.276 --> 00:52:11.606 A:middle
form.

00:52:12.196 --> 00:52:13.086 A:middle
It doesn't use the standard

00:52:13.086 --> 00:52:14.106 A:middle
navigation bar styling.

00:52:14.106 --> 00:52:16.286 A:middle
So we can first wrap our

00:52:16.286 --> 00:52:17.976 A:middle
Orderform in a NavigationView as

00:52:17.976 --> 00:52:18.836 A:middle
the content of our app.

00:52:19.606 --> 00:52:20.596 A:middle
NavigationView provides the

00:52:20.596 --> 00:52:21.776 A:middle
ability to navigate through

00:52:21.776 --> 00:52:23.326 A:middle
screens of our app revealing

00:52:23.326 --> 00:52:24.446 A:middle
more nested or detailed

00:52:24.446 --> 00:52:24.946 A:middle
information.

00:52:25.696 --> 00:52:27.646 A:middle
On iOS, NavigationView also adds

00:52:27.646 --> 00:52:28.796 A:middle
in the standard navigation bar

00:52:28.796 --> 00:52:29.146 A:middle
Chrome.

00:52:29.146 --> 00:52:31.096 A:middle
And then we can use the

00:52:31.096 --> 00:52:32.846 A:middle
NavigationBarTitle modifier to

00:52:32.846 --> 00:52:34.056 A:middle
produce that large beautiful

00:52:34.056 --> 00:52:35.156 A:middle
title for our form.

00:52:35.976 --> 00:52:37.196 A:middle
Now this modifier is a little

00:52:37.196 --> 00:52:37.706 A:middle
bit special.

00:52:38.306 --> 00:52:39.336 A:middle
It provides information that's

00:52:39.336 --> 00:52:40.716 A:middle
able to be interpreted by a

00:52:40.716 --> 00:52:41.976 A:middle
NavigationView ancestor.

00:52:43.006 --> 00:52:44.056 A:middle
We saw earlier examples of

00:52:44.056 --> 00:52:46.136 A:middle
modifiers that have information

00:52:46.136 --> 00:52:47.316 A:middle
flow down the view hierarchy

00:52:47.516 --> 00:52:49.066 A:middle
using the environment, and this

00:52:49.066 --> 00:52:50.386 A:middle
is an example of one that flows

00:52:50.386 --> 00:52:51.816 A:middle
information upwards using

00:52:51.816 --> 00:52:52.696 A:middle
something called preferences.

00:52:52.696 --> 00:52:54.576 A:middle
Now we're not going to go into

00:52:54.576 --> 00:52:55.646 A:middle
too much detail on that, but

00:52:55.646 --> 00:52:56.456 A:middle
you'll see other similar

00:52:56.456 --> 00:52:57.596 A:middle
examples later.

00:52:59.336 --> 00:53:00.816 A:middle
So focusing on the form, the

00:52:59.336 --> 00:53:00.816 A:middle
So focusing on the form, the

00:53:00.816 --> 00:53:01.726 A:middle
next thing we want to do is add

00:53:01.726 --> 00:53:03.296 A:middle
support for including an egg in

00:53:03.296 --> 00:53:03.656 A:middle
our order.

00:53:04.276 --> 00:53:05.476 A:middle
So we can add a little Toggle

00:53:05.476 --> 00:53:06.966 A:middle
here and then whenever somebody

00:53:06.966 --> 00:53:08.946 A:middle
opts into including an egg, we

00:53:08.946 --> 00:53:10.426 A:middle
can add a navigation row which

00:53:10.426 --> 00:53:11.706 A:middle
takes us to our

00:53:11.706 --> 00:53:12.466 A:middle
EggLocationPicker.

00:53:13.156 --> 00:53:14.456 A:middle
So let's expand out the form to

00:53:14.456 --> 00:53:15.396 A:middle
see how this works.

00:53:16.506 --> 00:53:18.226 A:middle
It's built using a Toggle bound

00:53:18.226 --> 00:53:19.246 A:middle
to whether or not our order

00:53:19.246 --> 00:53:19.856 A:middle
includes an egg.

00:53:19.856 --> 00:53:21.546 A:middle
And then it uses the same

00:53:21.546 --> 00:53:22.456 A:middle
ViewBuilder conditional that

00:53:22.456 --> 00:53:23.756 A:middle
Matt showed us earlier to

00:53:23.756 --> 00:53:24.796 A:middle
optionally include that

00:53:24.796 --> 00:53:25.506 A:middle
navigation row.

00:53:26.446 --> 00:53:28.516 A:middle
Now the really cool thing is

00:53:28.516 --> 00:53:29.926 A:middle
that we provided an animated

00:53:29.926 --> 00:53:31.196 A:middle
binding to the Toggle.

00:53:31.796 --> 00:53:32.936 A:middle
So whenever somebody taps that

00:53:32.936 --> 00:53:34.836 A:middle
switch, our navigation row will

00:53:34.836 --> 00:53:36.336 A:middle
be animatedly inserted in for

00:53:36.336 --> 00:53:37.676 A:middle
the formList just with the

00:53:37.676 --> 00:53:37.976 A:middle
setup.

00:53:40.046 --> 00:53:40.976 A:middle
And expressing the navigation

00:53:40.976 --> 00:53:42.536 A:middle
row is also amazingly simple.

00:53:43.246 --> 00:53:44.556 A:middle
It's using a specialized control

00:53:44.556 --> 00:53:46.776 A:middle
called a Navigationbutton which

00:53:47.116 --> 00:53:48.346 A:middle
allows us to provide some

00:53:48.346 --> 00:53:49.986 A:middle
destination content to navigate

00:53:49.986 --> 00:53:50.816 A:middle
to when interacted.

00:53:51.636 --> 00:53:52.786 A:middle
Navigationbutton automatically

00:53:52.786 --> 00:53:53.826 A:middle
comes with all of the right look

00:53:53.826 --> 00:53:55.366 A:middle
and feel such as the disclosure

00:53:55.366 --> 00:53:56.866 A:middle
indicator on the trailing edge.

00:53:57.446 --> 00:53:58.966 A:middle
Now because views are

00:53:58.966 --> 00:54:00.156 A:middle
lightweight, we don't have to

00:53:58.966 --> 00:54:00.156 A:middle
lightweight, we don't have to

00:54:00.156 --> 00:54:01.276 A:middle
worry about having created the

00:54:01.276 --> 00:54:02.416 A:middle
EggLocationPicker here.

00:54:03.106 --> 00:54:04.426 A:middle
SwiftUI takes care to only

00:54:04.426 --> 00:54:06.046 A:middle
render these views once they're

00:54:06.046 --> 00:54:07.446 A:middle
actually presented.

00:54:08.596 --> 00:54:10.256 A:middle
Now inside the EggLocationPicker

00:54:10.256 --> 00:54:11.516 A:middle
we can use our PlacementView,

00:54:12.146 --> 00:54:13.526 A:middle
customize the navigation bar so

00:54:13.526 --> 00:54:14.546 A:middle
that once it's presented, the

00:54:14.546 --> 00:54:15.936 A:middle
title reflects its current

00:54:15.936 --> 00:54:16.346 A:middle
state.

00:54:16.966 --> 00:54:17.936 A:middle
We could also add a trailing

00:54:17.936 --> 00:54:19.416 A:middle
BarItem to quickly reset the egg

00:54:19.416 --> 00:54:20.756 A:middle
back to its start state.

00:54:21.726 --> 00:54:22.686 A:middle
Like you hopefully expect at

00:54:22.686 --> 00:54:24.176 A:middle
this point, the items here are

00:54:24.176 --> 00:54:25.176 A:middle
the same views we've already

00:54:25.176 --> 00:54:26.466 A:middle
learned how to use, so we can

00:54:26.466 --> 00:54:27.326 A:middle
just provide a button.

00:54:28.346 --> 00:54:29.046 A:middle
And that's all it takes to

00:54:29.046 --> 00:54:30.436 A:middle
create this complete navigation

00:54:30.436 --> 00:54:30.976 A:middle
experience.

00:54:33.096 --> 00:54:34.376 A:middle
Now we can turn our attention to

00:54:34.376 --> 00:54:35.176 A:middle
the OrderHistory.

00:54:36.116 --> 00:54:37.346 A:middle
Now we want to navigate to this,

00:54:37.456 --> 00:54:38.646 A:middle
but it isn't more detailed or

00:54:38.646 --> 00:54:39.966 A:middle
nested information of the form,

00:54:40.436 --> 00:54:41.756 A:middle
but it's instead an entirely

00:54:41.756 --> 00:54:43.316 A:middle
different section of our app.

00:54:44.556 --> 00:54:45.406 A:middle
This is more appropriate for the

00:54:45.406 --> 00:54:46.576 A:middle
use of a TabbedView.

00:54:47.796 --> 00:54:49.186 A:middle
As such, we can wrap our form in

00:54:49.186 --> 00:54:50.596 A:middle
a TabbedView just like we did

00:54:50.596 --> 00:54:52.856 A:middle
NavigationView and then add the

00:54:52.856 --> 00:54:54.436 A:middle
OrderHistory as another child.

00:54:55.616 --> 00:54:56.976 A:middle
Both have tabItemLabel modifiers

00:54:56.976 --> 00:54:57.896 A:middle
that it described to the

00:54:57.896 --> 00:54:59.636 A:middle
TabbedView how to label them in

00:54:59.636 --> 00:55:00.096 A:middle
the TabBar.

00:54:59.636 --> 00:55:00.096 A:middle
the TabBar.

00:55:03.046 --> 00:55:03.996 A:middle
Now we can quickly jump over to

00:55:03.996 --> 00:55:04.746 A:middle
our OrderHistory.

00:55:04.916 --> 00:55:06.196 A:middle
But at this point we've a pretty

00:55:06.196 --> 00:55:07.596 A:middle
simple level of detail for the

00:55:07.596 --> 00:55:09.226 A:middle
OrderHistory and we might want

00:55:09.226 --> 00:55:10.316 A:middle
to expand this into a much more

00:55:10.316 --> 00:55:12.046 A:middle
detailed set of information that

00:55:12.046 --> 00:55:13.446 A:middle
we navigate to from our history

00:55:13.446 --> 00:55:13.736 A:middle
list.

00:55:14.646 --> 00:55:15.796 A:middle
This is another case of nesting

00:55:15.796 --> 00:55:16.676 A:middle
or showing more detailed

00:55:16.676 --> 00:55:18.236 A:middle
information like we saw earlier

00:55:18.236 --> 00:55:19.626 A:middle
with NavigationView and button.

00:55:19.626 --> 00:55:22.156 A:middle
So we can replace the contents

00:55:22.156 --> 00:55:23.356 A:middle
of our OrderHistory list so

00:55:23.646 --> 00:55:24.896 A:middle
instead of it being in list with

00:55:24.896 --> 00:55:25.896 A:middle
the OrderDetail displayed

00:55:25.896 --> 00:55:27.646 A:middle
inline, we can instead use this

00:55:27.646 --> 00:55:28.926 A:middle
new OrderDetail as the

00:55:28.926 --> 00:55:30.066 A:middle
destination for our

00:55:30.066 --> 00:55:30.856 A:middle
NavigationButtons.

00:55:31.786 --> 00:55:32.986 A:middle
And really it's this simple to

00:55:32.986 --> 00:55:34.516 A:middle
build a data-driven list that's

00:55:34.516 --> 00:55:35.846 A:middle
able to navigate to additional

00:55:35.846 --> 00:55:36.336 A:middle
content.

00:55:37.606 --> 00:55:38.796 A:middle
This works great on the iPhone

00:55:38.796 --> 00:55:40.206 A:middle
but if we take a look at the

00:55:40.206 --> 00:55:41.736 A:middle
iPad, we want this to be set up

00:55:41.736 --> 00:55:43.176 A:middle
using a master detail with a

00:55:43.176 --> 00:55:43.726 A:middle
SplitView.

00:55:44.486 --> 00:55:45.926 A:middle
Unlike NavigationStacks on

00:55:45.926 --> 00:55:47.456 A:middle
iPhone that push onto a single

00:55:47.456 --> 00:55:49.226 A:middle
RootView, here we know we have

00:55:49.226 --> 00:55:50.966 A:middle
two points of navigation: the

00:55:50.966 --> 00:55:52.336 A:middle
Master which is able to push

00:55:52.336 --> 00:55:55.476 A:middle
content onto the Detail.

00:55:55.646 --> 00:55:56.716 A:middle
So while our NavigationView

00:55:56.716 --> 00:55:57.626 A:middle
behaved correctly with just the

00:55:57.626 --> 00:55:59.776 A:middle
single RootContent on iPhone, we

00:55:59.776 --> 00:56:00.606 A:middle
want to indicate that it

00:55:59.776 --> 00:56:00.606 A:middle
want to indicate that it

00:56:00.606 --> 00:56:01.826 A:middle
intrinsically has these two

00:56:01.826 --> 00:56:03.656 A:middle
pieces of content: the

00:56:03.656 --> 00:56:05.326 A:middle
OrderHistory Master and the

00:56:05.326 --> 00:56:05.936 A:middle
DetailView.

00:56:06.696 --> 00:56:07.636 A:middle
Here we can use an

00:56:07.636 --> 00:56:09.276 A:middle
OrderDetailPlaceholder View to

00:56:09.276 --> 00:56:10.456 A:middle
act as the placeholder for when

00:56:10.456 --> 00:56:11.276 A:middle
nothing is selected.

00:56:12.196 --> 00:56:12.956 A:middle
Now with this, when a

00:56:12.956 --> 00:56:14.516 A:middle
Navigationbutton is interacted

00:56:14.516 --> 00:56:15.566 A:middle
with in the OrderHistory, it

00:56:15.746 --> 00:56:17.016 A:middle
will automatically get pushed

00:56:17.336 --> 00:56:18.286 A:middle
onto the OrderDetail.

00:56:18.286 --> 00:56:20.196 A:middle
This will behave as we expect on

00:56:20.196 --> 00:56:21.406 A:middle
the iPad and other wide-size

00:56:21.436 --> 00:56:23.306 A:middle
classes using a SplitView.

00:56:23.776 --> 00:56:24.966 A:middle
And for narrow-size classes,

00:56:25.276 --> 00:56:26.566 A:middle
will automatically collapse into

00:56:26.566 --> 00:56:27.606 A:middle
a single NavigationStack.

00:56:28.176 --> 00:56:30.656 A:middle
And of course, this works on

00:56:30.656 --> 00:56:32.376 A:middle
macOS as well, resulting in a

00:56:32.376 --> 00:56:32.946 A:middle
SplitView there.

00:56:32.946 --> 00:56:35.606 A:middle
And this isn't really write once

00:56:35.606 --> 00:56:36.596 A:middle
and run anywhere; there are

00:56:36.596 --> 00:56:37.706 A:middle
still these additional design

00:56:37.706 --> 00:56:38.906 A:middle
considerations such as the

00:56:38.906 --> 00:56:40.666 A:middle
increased information density on

00:56:40.666 --> 00:56:41.276 A:middle
macOS.

00:56:42.656 --> 00:56:43.936 A:middle
But SwiftUI is automatically

00:56:43.936 --> 00:56:45.606 A:middle
taking care of a base level of

00:56:45.606 --> 00:56:47.206 A:middle
platform look and feel from how

00:56:47.206 --> 00:56:48.656 A:middle
the SplitView behaves to the

00:56:48.656 --> 00:56:50.086 A:middle
height of the table rows, et

00:56:50.086 --> 00:56:50.396 A:middle
cetera.

00:56:51.426 --> 00:56:52.436 A:middle
So that we can learn how to use

00:56:52.436 --> 00:56:53.526 A:middle
these different concepts once

00:56:53.526 --> 00:56:55.306 A:middle
and then apply them anywhere.

00:56:56.406 --> 00:56:57.556 A:middle
And then we can focus our time

00:56:57.826 --> 00:56:59.206 A:middle
on those exciting and custom

00:56:59.206 --> 00:57:00.706 A:middle
features that make each of your

00:56:59.206 --> 00:57:00.706 A:middle
features that make each of your

00:57:00.706 --> 00:57:00.976 A:middle
apps great.

00:57:03.256 --> 00:57:04.436 A:middle
Now we've covered a reasonable

00:57:04.436 --> 00:57:05.516 A:middle
amount of breadth in this last

00:57:05.516 --> 00:57:06.966 A:middle
hour and there are a number of

00:57:06.966 --> 00:57:07.946 A:middle
other talks that go into a lot

00:57:07.946 --> 00:57:08.486 A:middle
more detail.

00:57:09.366 --> 00:57:10.456 A:middle
We showed how state and bindings

00:57:10.456 --> 00:57:11.426 A:middle
will change how you interact

00:57:11.426 --> 00:57:12.926 A:middle
with controls, but data flow in

00:57:12.926 --> 00:57:14.266 A:middle
SwiftUI will make you rethink

00:57:14.266 --> 00:57:16.226 A:middle
altogether about data-driven UI

00:57:16.226 --> 00:57:16.506 A:middle
updates.

00:57:17.916 --> 00:57:19.056 A:middle
We built up a few custom views

00:57:19.056 --> 00:57:20.346 A:middle
using layout adjusters, but

00:57:20.346 --> 00:57:21.636 A:middle
Custom Controls in SwiftUI will

00:57:21.636 --> 00:57:23.266 A:middle
go into a deep dive on advanced

00:57:23.266 --> 00:57:24.826 A:middle
used of layout, graphics and

00:57:24.826 --> 00:57:26.226 A:middle
animations and has the most

00:57:26.226 --> 00:57:26.886 A:middle
awesome demo.

00:57:28.256 --> 00:57:29.116 A:middle
We know that many of you are

00:57:29.116 --> 00:57:30.116 A:middle
going to be eager to jump into

00:57:30.116 --> 00:57:31.546 A:middle
SwiftUI right away and might be

00:57:31.546 --> 00:57:32.486 A:middle
wondering if you can integrate

00:57:32.486 --> 00:57:33.426 A:middle
this into your existing app.

00:57:33.426 --> 00:57:34.706 A:middle
And the good news is yes,

00:57:35.036 --> 00:57:36.106 A:middle
SwiftUI is designed to be

00:57:36.106 --> 00:57:37.616 A:middle
integrated seamlessly alongside

00:57:37.616 --> 00:57:39.116 A:middle
your existing views and models.

00:57:39.766 --> 00:57:40.686 A:middle
And we have an entire talk

00:57:40.776 --> 00:57:41.626 A:middle
showing you how to do that.

00:57:43.026 --> 00:57:44.036 A:middle
We touched upon how SwiftUI is

00:57:44.036 --> 00:57:44.906 A:middle
designed to make your app

00:57:44.906 --> 00:57:46.426 A:middle
accessible to everyone out of

00:57:46.426 --> 00:57:46.926 A:middle
the box.

00:57:47.446 --> 00:57:48.166 A:middle
Of course, there will always be

00:57:48.166 --> 00:57:49.236 A:middle
some additional considerations

00:57:49.346 --> 00:57:50.296 A:middle
and this talk will go into

00:57:50.296 --> 00:57:51.186 A:middle
additional detail.

00:57:52.086 --> 00:57:53.096 A:middle
And finally, last but certainly

00:57:53.096 --> 00:57:54.446 A:middle
not least, we've shown how

00:57:54.446 --> 00:57:56.066 A:middle
SwiftUI raises the bar for how

00:57:56.066 --> 00:57:57.196 A:middle
much you can share across

00:57:57.196 --> 00:57:57.746 A:middle
platforms.

00:57:58.616 --> 00:57:59.986 A:middle
SwiftUI on all devices takes

00:57:59.986 --> 00:58:01.426 A:middle
that as a baseline and goes into

00:57:59.986 --> 00:58:01.426 A:middle
that as a baseline and goes into

00:58:01.426 --> 00:58:02.786 A:middle
additional detail on how you can

00:58:02.786 --> 00:58:04.156 A:middle
make a great app on any

00:58:04.156 --> 00:58:04.646 A:middle
platform.

00:58:05.606 --> 00:58:06.756 A:middle
There are a few additional talks

00:58:06.756 --> 00:58:08.526 A:middle
such as WatchOS Specifics for

00:58:08.526 --> 00:58:09.706 A:middle
more details on what's driving

00:58:09.706 --> 00:58:11.416 A:middle
this and What's New in Swift.

00:58:12.266 --> 00:58:13.666 A:middle
And finally, thank all of you

00:58:13.666 --> 00:58:14.216 A:middle
for watching.

00:58:14.566 --> 00:58:15.526 A:middle
We are so excited.

00:58:16.516 --> 00:58:23.500 A:middle
[ Applause ]
