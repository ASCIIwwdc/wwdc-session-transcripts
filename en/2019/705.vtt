WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:11.076 --> 00:00:14.866 A:middle
&gt;&gt; Hello. [applause] Welcome to

00:00:14.866 --> 00:00:16.376 A:middle
What's New in Core Location.

00:00:16.826 --> 00:00:18.366 A:middle
My name is Adam Driscoll, and

00:00:18.366 --> 00:00:19.326 A:middle
I'm an engineer on the Core

00:00:19.326 --> 00:00:20.106 A:middle
Location team.

00:00:20.966 --> 00:00:22.526 A:middle
I'm excited to walk you through

00:00:22.526 --> 00:00:23.416 A:middle
the improvements we've made to

00:00:23.416 --> 00:00:25.986 A:middle
Core Location, new in iOS 13.

00:00:27.276 --> 00:00:28.836 A:middle
So, I think this is where we all

00:00:28.836 --> 00:00:30.066 A:middle
start out as developers.

00:00:30.176 --> 00:00:31.396 A:middle
We want to make our users happy,

00:00:32.165 --> 00:00:35.586 A:middle
and we have an app to do it.

00:00:35.586 --> 00:00:36.706 A:middle
And then, because you're here at

00:00:36.706 --> 00:00:37.976 A:middle
my talk today, I'm going to

00:00:37.976 --> 00:00:39.726 A:middle
assume that the user's location

00:00:39.726 --> 00:00:40.926 A:middle
is an important ingredient in

00:00:40.926 --> 00:00:42.606 A:middle
how your app can make your users

00:00:42.606 --> 00:00:42.936 A:middle
happy.

00:00:43.466 --> 00:00:45.036 A:middle
So, you'll want to use Core

00:00:45.036 --> 00:00:45.506 A:middle
Location.

00:00:47.676 --> 00:00:48.966 A:middle
Probably you already know that

00:00:48.966 --> 00:00:50.426 A:middle
your app will require the user's

00:00:50.466 --> 00:00:51.476 A:middle
permission to access their

00:00:51.476 --> 00:00:53.846 A:middle
location via Core Location, so

00:00:53.846 --> 00:00:54.896 A:middle
zooming in a little further,

00:00:56.036 --> 00:00:57.836 A:middle
you're going to need to request

00:00:57.896 --> 00:01:00.166 A:middle
and react to the user's choices

00:00:57.896 --> 00:01:00.166 A:middle
and react to the user's choices

00:01:00.166 --> 00:01:01.526 A:middle
via our authorization prompting

00:01:01.526 --> 00:01:03.836 A:middle
system and then use the rest of

00:01:03.836 --> 00:01:05.306 A:middle
our API to do its thing.

00:01:05.986 --> 00:01:08.026 A:middle
Well, this is what we're here to

00:01:08.026 --> 00:01:09.966 A:middle
talk about today, because in iOS

00:01:10.016 --> 00:01:12.266 A:middle
13 our authorization system and

00:01:12.266 --> 00:01:13.486 A:middle
the options it presents has

00:01:13.486 --> 00:01:16.736 A:middle
changed, and so has our API in

00:01:16.816 --> 00:01:18.146 A:middle
the area of [inaudible].

00:01:20.106 --> 00:01:21.066 A:middle
Concretely then, we're going to

00:01:21.066 --> 00:01:22.576 A:middle
talk about always authorization,

00:01:23.046 --> 00:01:25.086 A:middle
which now works a little bit

00:01:25.656 --> 00:01:26.066 A:middle
differently,

00:01:26.066 --> 00:01:27.396 A:middle
WhenInUse Authorization which

00:01:27.396 --> 00:01:29.736 A:middle
can now do more,

00:01:29.956 --> 00:01:31.306 A:middle
Temporary Authorization, which

00:01:31.306 --> 00:01:31.976 A:middle
is brand new,

00:01:31.976 --> 00:01:33.556 A:middle
and we hope you and your user's

00:01:33.556 --> 00:01:33.936 A:middle
will love it.

00:01:35.126 --> 00:01:36.196 A:middle
And then I'm going to invite my

00:01:36.196 --> 00:01:37.686 A:middle
colleague, Andrea, up on stage

00:01:37.686 --> 00:01:38.356 A:middle
to walk you through the

00:01:38.356 --> 00:01:39.736 A:middle
applications of these things,

00:01:39.806 --> 00:01:41.596 A:middle
concretely, in the context of

00:01:41.596 --> 00:01:42.216 A:middle
beacon ranging.

00:01:43.406 --> 00:01:44.366 A:middle
All right.

00:01:44.366 --> 00:01:45.466 A:middle
Let's get started by looking at

00:01:45.466 --> 00:01:47.336 A:middle
that prompt I just used.

00:01:49.536 --> 00:01:51.156 A:middle
You may also recognize this from

00:01:51.156 --> 00:01:52.196 A:middle
the State of the Union talk.

00:01:53.886 --> 00:01:56.456 A:middle
In iOS 13, every new user

00:01:56.586 --> 00:01:58.106 A:middle
authorization interaction starts

00:01:58.106 --> 00:01:58.736 A:middle
with this prompt.

00:01:59.366 --> 00:02:01.986 A:middle
I do want to call out the option

00:01:59.366 --> 00:02:01.986 A:middle
I do want to call out the option

00:02:01.986 --> 00:02:03.006 A:middle
we're not going to talk too much

00:02:03.006 --> 00:02:04.006 A:middle
about today, which is at the

00:02:04.006 --> 00:02:05.116 A:middle
bottom there, don't allow.

00:02:06.096 --> 00:02:07.556 A:middle
If the user selects don't allow,

00:02:07.556 --> 00:02:08.425 A:middle
then your app will not have

00:02:08.425 --> 00:02:09.716 A:middle
access to their location, and it

00:02:09.716 --> 00:02:10.856 A:middle
will not be able to prompt

00:02:10.856 --> 00:02:11.116 A:middle
again.

00:02:11.856 --> 00:02:13.436 A:middle
So, you're probably already

00:02:13.436 --> 00:02:14.816 A:middle
thinking this, but be mindful

00:02:14.816 --> 00:02:15.946 A:middle
about when you present this

00:02:16.046 --> 00:02:17.626 A:middle
prompt-- when you request for

00:02:17.626 --> 00:02:18.806 A:middle
this prompt to be presented to

00:02:18.806 --> 00:02:19.336 A:middle
your users.

00:02:20.026 --> 00:02:21.356 A:middle
Do it at a time when users will

00:02:21.356 --> 00:02:22.706 A:middle
best understand why you need

00:02:22.706 --> 00:02:24.496 A:middle
access to their location and be

00:02:24.496 --> 00:02:26.146 A:middle
most favorably disposed to

00:02:26.146 --> 00:02:26.586 A:middle
granting it.

00:02:27.966 --> 00:02:29.126 A:middle
Okay, but the agenda said we're

00:02:29.126 --> 00:02:30.276 A:middle
here to talk about always right

00:02:30.276 --> 00:02:31.986 A:middle
now, and there's no allow always

00:02:31.986 --> 00:02:34.166 A:middle
authorization option on this

00:02:34.166 --> 00:02:34.546 A:middle
prompt.

00:02:35.006 --> 00:02:36.006 A:middle
So, is it a mystery?

00:02:37.056 --> 00:02:38.556 A:middle
Well, if we look at how your app

00:02:38.556 --> 00:02:40.516 A:middle
would request the display of

00:02:40.516 --> 00:02:41.356 A:middle
this prompt, I think that

00:02:41.356 --> 00:02:42.506 A:middle
mystery will begin to unravel.

00:02:43.386 --> 00:02:45.026 A:middle
So, first up, you're going to

00:02:45.026 --> 00:02:46.536 A:middle
need a CL location manager, and

00:02:46.536 --> 00:02:47.526 A:middle
it needs to live for a little

00:02:47.526 --> 00:02:47.816 A:middle
while.

00:02:47.966 --> 00:02:50.056 A:middle
So, if you have a simple app,

00:02:50.096 --> 00:02:51.096 A:middle
setting it as an instance

00:02:51.096 --> 00:02:52.296 A:middle
variable on your application

00:02:52.296 --> 00:02:54.246 A:middle
delegate is a good place to put

00:02:55.346 --> 00:02:55.426 A:middle
it.

00:02:55.696 --> 00:02:57.006 A:middle
Then, your app would call one of

00:02:57.006 --> 00:02:57.926 A:middle
these two methods, either

00:02:57.926 --> 00:02:58.796 A:middle
request when in-use

00:02:58.796 --> 00:03:00.336 A:middle
authorization or request always

00:02:58.796 --> 00:03:00.336 A:middle
authorization or request always

00:03:00.336 --> 00:03:01.086 A:middle
authorization.

00:03:01.866 --> 00:03:03.966 A:middle
For this walk-through, let's say

00:03:04.266 --> 00:03:05.096 A:middle
it requests always

00:03:05.096 --> 00:03:05.766 A:middle
authorization.

00:03:07.116 --> 00:03:08.836 A:middle
In iOS 12, this would result in

00:03:08.836 --> 00:03:10.026 A:middle
a prompt that actually provided

00:03:10.026 --> 00:03:11.476 A:middle
the user both options, both when

00:03:11.476 --> 00:03:13.086 A:middle
in use authorization and always

00:03:13.086 --> 00:03:14.666 A:middle
authorization, but now in iOS

00:03:14.716 --> 00:03:16.736 A:middle
13, it provides this one, which

00:03:16.736 --> 00:03:17.816 A:middle
does not have an option for

00:03:17.816 --> 00:03:18.206 A:middle
always.

00:03:19.466 --> 00:03:21.866 A:middle
However, Core Location remembers

00:03:21.866 --> 00:03:24.536 A:middle
what your app asked for, so if

00:03:24.536 --> 00:03:25.386 A:middle
you asked for always

00:03:25.386 --> 00:03:26.646 A:middle
authorization and the user

00:03:26.646 --> 00:03:27.876 A:middle
grants the most permanent

00:03:28.186 --> 00:03:29.426 A:middle
positive thing they can here,

00:03:29.426 --> 00:03:30.726 A:middle
which is allow while in use,

00:03:32.216 --> 00:03:33.626 A:middle
then that's what you'll get.

00:03:33.626 --> 00:03:34.786 A:middle
Apple will receive when in use

00:03:34.786 --> 00:03:36.176 A:middle
authorization, but it will also

00:03:36.176 --> 00:03:37.806 A:middle
enter what we call provisional

00:03:37.806 --> 00:03:38.816 A:middle
always authorization.

00:03:39.426 --> 00:03:40.856 A:middle
So, let's see how that will all

00:03:40.936 --> 00:03:42.000 A:middle
play out.

00:03:45.156 --> 00:03:46.836 A:middle
So, on the top of this timeline

00:03:46.836 --> 00:03:48.056 A:middle
here we have in blue what the

00:03:48.056 --> 00:03:51.346 A:middle
user will see and in green below

00:03:51.346 --> 00:03:52.636 A:middle
what your app will see.

00:03:52.896 --> 00:03:53.786 A:middle
Because under provisional

00:03:53.786 --> 00:03:55.546 A:middle
authorization, these two are

00:03:55.576 --> 00:03:56.716 A:middle
actually different.

00:03:57.616 --> 00:03:59.466 A:middle
So, your app asked for always

00:03:59.466 --> 00:04:03.126 A:middle
authorization, and then the user

00:03:59.466 --> 00:04:03.126 A:middle
authorization, and then the user

00:04:03.126 --> 00:04:04.266 A:middle
granted it when in use.

00:04:04.866 --> 00:04:07.636 A:middle
Now, if the user goes to

00:04:07.636 --> 00:04:09.176 A:middle
settings, they'll see that your

00:04:09.176 --> 00:04:10.236 A:middle
app has when in use

00:04:10.236 --> 00:04:10.916 A:middle
authorization.

00:04:12.196 --> 00:04:13.876 A:middle
But, Core Location has called

00:04:13.876 --> 00:04:15.166 A:middle
your delegate back and told that

00:04:15.166 --> 00:04:15.956 A:middle
it received always

00:04:15.956 --> 00:04:16.616 A:middle
authorization.

00:04:17.716 --> 00:04:18.935 A:middle
So, we hope this will make it

00:04:18.935 --> 00:04:20.076 A:middle
really simple and obvious what

00:04:20.076 --> 00:04:21.076 A:middle
your app should do in this

00:04:21.076 --> 00:04:21.576 A:middle
context.

00:04:22.416 --> 00:04:23.336 A:middle
It should use it's always

00:04:23.376 --> 00:04:23.936 A:middle
powers.

00:04:24.156 --> 00:04:25.796 A:middle
It should whatever it needed

00:04:25.796 --> 00:04:28.356 A:middle
always authorization to do.

00:04:28.586 --> 00:04:29.616 A:middle
We'll get more into what that

00:04:29.616 --> 00:04:31.536 A:middle
might be later when we talk

00:04:31.536 --> 00:04:33.056 A:middle
about when in use authorization,

00:04:33.176 --> 00:04:35.746 A:middle
but for example, maybe it would

00:04:35.746 --> 00:04:38.136 A:middle
set up some GEO fences and then

00:04:38.386 --> 00:04:41.046 A:middle
start doing automation behavior

00:04:41.046 --> 00:04:42.286 A:middle
for the user in the background

00:04:42.286 --> 00:04:43.226 A:middle
based on their location.

00:04:45.216 --> 00:04:47.376 A:middle
Okay, if it does that, then Core

00:04:47.376 --> 00:04:48.666 A:middle
Location will monitor for those

00:04:48.666 --> 00:04:52.186 A:middle
GEO fences, and then at some

00:04:52.186 --> 00:04:53.586 A:middle
point the user will enter or

00:04:53.586 --> 00:04:55.086 A:middle
exit one of them, and an event

00:04:55.086 --> 00:04:55.896 A:middle
will be generated.

00:04:57.526 --> 00:04:58.766 A:middle
Normally, this event would be

00:04:58.766 --> 00:05:00.416 A:middle
delivered to your location

00:04:58.766 --> 00:05:00.416 A:middle
delivered to your location

00:05:00.416 --> 00:05:02.316 A:middle
manager delegate, but because

00:05:02.316 --> 00:05:03.786 A:middle
your authorization is

00:05:03.846 --> 00:05:06.346 A:middle
provisional, instead, Core

00:05:06.346 --> 00:05:08.016 A:middle
Location holds onto it and waits

00:05:08.016 --> 00:05:09.436 A:middle
for a good time to ask the user

00:05:09.726 --> 00:05:10.966 A:middle
if they want to upgrade your app

00:05:11.006 --> 00:05:12.086 A:middle
to always authorization.

00:05:12.626 --> 00:05:17.946 A:middle
That prompt looks like this, and

00:05:17.996 --> 00:05:19.036 A:middle
finally we see a button at the

00:05:19.036 --> 00:05:20.536 A:middle
bottom that does allow always

00:05:20.536 --> 00:05:21.276 A:middle
authorization.

00:05:21.976 --> 00:05:23.756 A:middle
So your app has been thinking it

00:05:23.756 --> 00:05:24.976 A:middle
has always authorization all

00:05:24.976 --> 00:05:27.126 A:middle
this time, and the user has been

00:05:27.126 --> 00:05:28.256 A:middle
thinking that is has when in use

00:05:28.256 --> 00:05:28.996 A:middle
authorization.

00:05:29.846 --> 00:05:30.716 A:middle
This prompt is how we get

00:05:30.716 --> 00:05:32.416 A:middle
everybody back together all on

00:05:32.416 --> 00:05:33.726 A:middle
the same page in agreement.

00:05:34.246 --> 00:05:38.596 A:middle
Now, if this prompt were to

00:05:38.596 --> 00:05:39.616 A:middle
appear at a time when the user

00:05:39.616 --> 00:05:41.106 A:middle
does not understand why your app

00:05:41.226 --> 00:05:42.616 A:middle
needs access to their location

00:05:43.366 --> 00:05:44.456 A:middle
or they do not want your app to

00:05:44.456 --> 00:05:45.786 A:middle
have access to their location in

00:05:45.786 --> 00:05:47.566 A:middle
the background, then they can at

00:05:47.566 --> 00:05:48.636 A:middle
this point respond that they'd

00:05:48.636 --> 00:05:49.816 A:middle
like to keep your app in when in

00:05:49.816 --> 00:05:50.736 A:middle
use authorization.

00:05:53.126 --> 00:05:54.646 A:middle
But, if you and your users are

00:05:54.646 --> 00:05:55.756 A:middle
on the same page and they like

00:05:55.756 --> 00:05:57.606 A:middle
what they see, they can also

00:05:58.026 --> 00:05:58.936 A:middle
grant your app always

00:05:58.936 --> 00:06:01.486 A:middle
authorization from here.

00:05:58.936 --> 00:06:01.486 A:middle
authorization from here.

00:06:01.696 --> 00:06:03.076 A:middle
Either way, the provisional

00:06:03.076 --> 00:06:04.296 A:middle
authorization period ends.

00:06:05.326 --> 00:06:06.646 A:middle
If your app ends up with always

00:06:06.646 --> 00:06:08.026 A:middle
authorization, then it will also

00:06:08.026 --> 00:06:09.876 A:middle
receive the event that started

00:06:09.876 --> 00:06:10.626 A:middle
this process.

00:06:11.746 --> 00:06:12.866 A:middle
If it ends up with when in use

00:06:12.866 --> 00:06:16.526 A:middle
authorization, it will not.

00:06:16.526 --> 00:06:19.186 A:middle
Okay, let's talk details.

00:06:19.296 --> 00:06:20.476 A:middle
So, first remember that while

00:06:20.476 --> 00:06:22.216 A:middle
your app is provisionally always

00:06:22.216 --> 00:06:24.396 A:middle
authorized, Core Location will

00:06:24.396 --> 00:06:26.036 A:middle
be monitoring for and generating

00:06:26.036 --> 00:06:26.826 A:middle
events that your app is

00:06:26.826 --> 00:06:28.366 A:middle
interested in but not delivering

00:06:28.366 --> 00:06:30.096 A:middle
them to your app unless doing so

00:06:30.186 --> 00:06:31.976 A:middle
would be consistent with the

00:06:31.976 --> 00:06:33.176 A:middle
when in use authorization it

00:06:33.176 --> 00:06:34.696 A:middle
actually has.

00:06:36.456 --> 00:06:38.736 A:middle
Second, the prompt that the user

00:06:38.736 --> 00:06:40.006 A:middle
can grant your app always

00:06:40.006 --> 00:06:41.536 A:middle
authorization from will occur

00:06:41.536 --> 00:06:42.006 A:middle
later.

00:06:42.636 --> 00:06:46.766 A:middle
And third, you can only start

00:06:46.806 --> 00:06:47.886 A:middle
this process once.

00:06:50.536 --> 00:06:52.216 A:middle
However, you can, as in this

00:06:52.216 --> 00:06:54.986 A:middle
example, request always

00:06:54.986 --> 00:06:56.326 A:middle
authorization right from the

00:06:56.326 --> 00:06:59.046 A:middle
beginning, or you can request

00:06:59.046 --> 00:07:00.866 A:middle
when in use authorization first

00:06:59.046 --> 00:07:00.866 A:middle
when in use authorization first

00:07:00.866 --> 00:07:02.136 A:middle
and then at some later point

00:07:02.176 --> 00:07:03.666 A:middle
when maybe the user interacts

00:07:03.666 --> 00:07:04.946 A:middle
with a feature of your app that

00:07:04.946 --> 00:07:06.416 A:middle
warrants it, seek always

00:07:06.416 --> 00:07:09.036 A:middle
authorization later as an

00:07:09.136 --> 00:07:09.586 A:middle
upgrade.

00:07:10.116 --> 00:07:13.376 A:middle
Okay, so Core Location is

00:07:13.376 --> 00:07:14.906 A:middle
monitoring and consuming events

00:07:14.956 --> 00:07:16.056 A:middle
that your app is interested in.

00:07:16.566 --> 00:07:17.706 A:middle
Let's talk about when they'll be

00:07:17.706 --> 00:07:18.706 A:middle
delivered to your app and when

00:07:18.706 --> 00:07:19.346 A:middle
they'll be dropped.

00:07:20.006 --> 00:07:22.576 A:middle
So first, as we've seen, they'll

00:07:22.576 --> 00:07:24.096 A:middle
be delivered if you app receives

00:07:24.096 --> 00:07:25.596 A:middle
always authorization ultimately

00:07:26.106 --> 00:07:27.536 A:middle
and not if it receives a when in

00:07:27.536 --> 00:07:28.416 A:middle
use authorization.

00:07:28.926 --> 00:07:31.446 A:middle
But they also won't be delivered

00:07:31.446 --> 00:07:32.796 A:middle
if the user just hasn't chosen

00:07:32.796 --> 00:07:32.986 A:middle
yet.

00:07:34.366 --> 00:07:36.036 A:middle
Now, Core Location waits for a

00:07:36.086 --> 00:07:37.506 A:middle
time when we think that the user

00:07:37.506 --> 00:07:39.426 A:middle
is not busy in order to maximize

00:07:39.466 --> 00:07:40.466 A:middle
their ability to understand

00:07:40.466 --> 00:07:41.916 A:middle
what's going on and minimize the

00:07:41.916 --> 00:07:42.596 A:middle
chance that they'll give a

00:07:42.596 --> 00:07:43.726 A:middle
get-out-of-my-way kind of

00:07:43.726 --> 00:07:44.326 A:middle
response.

00:07:45.676 --> 00:07:47.736 A:middle
So, during this time, if more

00:07:47.736 --> 00:07:48.726 A:middle
events are generated on that

00:07:48.726 --> 00:07:49.786 A:middle
basis, if you're monitoring

00:07:49.786 --> 00:07:51.546 A:middle
requests, then those events will

00:07:51.546 --> 00:07:53.766 A:middle
displace the ones that came

00:07:53.766 --> 00:07:55.076 A:middle
earlier, and the earlier ones

00:07:55.076 --> 00:07:55.656 A:middle
will be dropped.

00:07:56.866 --> 00:07:58.646 A:middle
And then finally Core Location

00:07:58.646 --> 00:08:00.466 A:middle
will drop the event part for

00:07:58.646 --> 00:08:00.466 A:middle
will drop the event part for

00:08:00.466 --> 00:08:02.236 A:middle
anything that's become just too

00:08:02.236 --> 00:08:02.536 A:middle
old.

00:08:03.246 --> 00:08:04.206 A:middle
That's because it may not be

00:08:04.206 --> 00:08:05.316 A:middle
relevant for your use case

00:08:05.316 --> 00:08:06.646 A:middle
anymore, but it also is

00:08:06.646 --> 00:08:07.996 A:middle
definitely not in the user's

00:08:07.996 --> 00:08:09.336 A:middle
perspective, in the user's mind

00:08:09.336 --> 00:08:10.766 A:middle
space anymore , so it doesn't

00:08:10.766 --> 00:08:11.666 A:middle
help them understand what's

00:08:11.666 --> 00:08:12.106 A:middle
going on.

00:08:12.886 --> 00:08:16.226 A:middle
So, finally, to be clear, I know

00:08:16.226 --> 00:08:18.146 A:middle
that this process will result in

00:08:18.146 --> 00:08:19.476 A:middle
dropped events at the beginning

00:08:19.476 --> 00:08:22.776 A:middle
for many use cases, but we think

00:08:22.776 --> 00:08:24.856 A:middle
it's really important for, but

00:08:24.896 --> 00:08:26.296 A:middle
please plan on this, because

00:08:26.356 --> 00:08:27.476 A:middle
you're just getting to know

00:08:27.526 --> 00:08:30.016 A:middle
users in this case, and by

00:08:30.156 --> 00:08:31.436 A:middle
pursuing always authorization,

00:08:31.436 --> 00:08:32.366 A:middle
you're asking for a lot of

00:08:32.366 --> 00:08:33.000 A:middle
trust.

00:08:35.666 --> 00:08:35.916 A:middle
All right.

00:08:35.916 --> 00:08:37.106 A:middle
I want to mention at this point

00:08:37.206 --> 00:08:38.356 A:middle
that the availability and

00:08:38.356 --> 00:08:39.466 A:middle
treatment of always

00:08:39.466 --> 00:08:40.566 A:middle
authorization varies by

00:08:40.566 --> 00:08:41.106 A:middle
platform.

00:08:42.876 --> 00:08:44.906 A:middle
So, tvOS only supports when in

00:08:44.906 --> 00:08:48.586 A:middle
use authorization, and watchOS

00:08:48.586 --> 00:08:50.006 A:middle
only really needs when in use

00:08:50.006 --> 00:08:50.766 A:middle
authorization.

00:08:52.106 --> 00:08:53.586 A:middle
That's because access to the

00:08:53.586 --> 00:08:54.816 A:middle
background runtime is very

00:08:54.816 --> 00:08:56.256 A:middle
tightly constrained on watchOS,

00:08:56.316 --> 00:08:58.016 A:middle
and most of our API does not

00:08:58.016 --> 00:08:59.176 A:middle
provide launching behavior.

00:09:01.006 --> 00:09:02.486 A:middle
Plus, context like the watch

00:09:02.486 --> 00:09:03.816 A:middle
face are effectively always in

00:09:03.816 --> 00:09:06.256 A:middle
use, so if you're working on a

00:09:06.256 --> 00:09:07.406 A:middle
complication, you're app

00:09:07.406 --> 00:09:08.606 A:middle
probably will not need always

00:09:08.606 --> 00:09:11.566 A:middle
authorization, but, probably

00:09:12.306 --> 00:09:13.176 A:middle
will not need always

00:09:13.176 --> 00:09:14.146 A:middle
authorization.

00:09:15.026 --> 00:09:17.376 A:middle
So, macOS similarly does not

00:09:17.376 --> 00:09:18.736 A:middle
support always authorization per

00:09:18.736 --> 00:09:21.386 A:middle
se, but prompting is automatic,

00:09:21.386 --> 00:09:22.756 A:middle
so you'll not have to request

00:09:22.756 --> 00:09:23.476 A:middle
authorization.

00:09:26.066 --> 00:09:27.946 A:middle
Which means that for iPad apps

00:09:27.946 --> 00:09:29.926 A:middle
on the Mac, when in use

00:09:29.926 --> 00:09:30.996 A:middle
authorization and always

00:09:30.996 --> 00:09:32.186 A:middle
authorization are effectively

00:09:32.186 --> 00:09:32.586 A:middle
equivalent.

00:09:33.876 --> 00:09:35.766 A:middle
Your UIKit code can and should

00:09:35.766 --> 00:09:37.296 A:middle
use whichever request, whichever

00:09:37.296 --> 00:09:38.326 A:middle
one makes sense from its

00:09:38.326 --> 00:09:40.196 A:middle
perspective on iOS when it's

00:09:40.196 --> 00:09:44.106 A:middle
running on the Mac.

00:09:44.316 --> 00:09:44.636 A:middle
All right.

00:09:44.676 --> 00:09:46.056 A:middle
So that's always authorization.

00:09:46.666 --> 00:09:47.886 A:middle
Now, we've already come up a

00:09:47.886 --> 00:09:49.706 A:middle
couple of times on this question

00:09:49.706 --> 00:09:51.306 A:middle
of what would your app need

00:09:51.306 --> 00:09:53.006 A:middle
always authorization for anyway.

00:09:53.616 --> 00:09:55.686 A:middle
Well, let's take a look at when

00:09:55.686 --> 00:09:56.826 A:middle
in use authorization and I think

00:09:56.826 --> 00:09:56.976 A:middle
we'll see.

00:10:00.716 --> 00:10:02.186 A:middle
So, I think I already, I

00:10:02.246 --> 00:10:03.926 A:middle
implied, but you probably

00:10:03.926 --> 00:10:05.746 A:middle
already guessed that if your app

00:10:05.936 --> 00:10:07.506 A:middle
asked for when in use

00:10:07.506 --> 00:10:08.846 A:middle
authorization, requests when in

00:10:08.846 --> 00:10:10.166 A:middle
use authorization up front and

00:10:10.306 --> 00:10:11.426 A:middle
the user granted it at this

00:10:11.426 --> 00:10:12.756 A:middle
prompt, then your app had

00:10:12.756 --> 00:10:13.446 A:middle
received when in use

00:10:13.446 --> 00:10:14.476 A:middle
authorization with no

00:10:14.476 --> 00:10:16.296 A:middle
provisional period and no

00:10:16.496 --> 00:10:19.606 A:middle
followup prompt.

00:10:19.606 --> 00:10:20.736 A:middle
And it would also have saved up

00:10:20.736 --> 00:10:21.766 A:middle
its opportunity to ask for

00:10:21.766 --> 00:10:22.896 A:middle
always later when maybe you

00:10:22.896 --> 00:10:24.056 A:middle
introduce a killer new feature

00:10:24.056 --> 00:10:25.506 A:middle
that really needs it.

00:10:26.256 --> 00:10:28.066 A:middle
So, how far can you go before

00:10:28.066 --> 00:10:29.156 A:middle
you have to start calling that

00:10:29.156 --> 00:10:30.846 A:middle
new feature killer and asking

00:10:30.846 --> 00:10:31.956 A:middle
for always authorization to

00:10:31.956 --> 00:10:33.046 A:middle
power it?

00:10:35.316 --> 00:10:38.326 A:middle
In iOS 12 and in early releases,

00:10:38.376 --> 00:10:40.216 A:middle
this table provided the answer

00:10:40.216 --> 00:10:40.426 A:middle
there.

00:10:41.756 --> 00:10:43.316 A:middle
As you can see, an app with when

00:10:43.316 --> 00:10:45.196 A:middle
in use authorization can receive

00:10:45.196 --> 00:10:47.536 A:middle
location updates, it can arrange

00:10:47.586 --> 00:10:49.906 A:middle
beacons, it can even receive

00:10:50.006 --> 00:10:51.546 A:middle
continuous location updates in

00:10:51.546 --> 00:10:53.046 A:middle
the background after starting

00:10:53.046 --> 00:10:55.426 A:middle
them in the foreground through

00:10:55.426 --> 00:10:57.726 A:middle
the use of the blue bar or pill

00:10:58.196 --> 00:10:59.536 A:middle
the background usage indicator.

00:11:00.146 --> 00:11:03.036 A:middle
But it could not start location

00:11:03.036 --> 00:11:03.926 A:middle
updates directly from the

00:11:03.926 --> 00:11:05.766 A:middle
background, and it could not use

00:11:05.766 --> 00:11:07.276 A:middle
any of our monitoring APIs,

00:11:07.276 --> 00:11:08.376 A:middle
which have the potential to

00:11:08.376 --> 00:11:10.536 A:middle
launch it in the background with

00:11:10.536 --> 00:11:11.736 A:middle
location-related information.

00:11:12.526 --> 00:11:14.316 A:middle
So what's a consistent feature

00:11:14.316 --> 00:11:14.586 A:middle
here?

00:11:15.836 --> 00:11:16.696 A:middle
Well, you'll notice that

00:11:17.386 --> 00:11:18.666 A:middle
services near the top of this

00:11:18.666 --> 00:11:20.586 A:middle
chart only function when your

00:11:20.716 --> 00:11:21.636 A:middle
app is in use.

00:11:24.156 --> 00:11:25.416 A:middle
While services near the bottom

00:11:26.736 --> 00:11:28.106 A:middle
function, have the potential to

00:11:28.136 --> 00:11:29.166 A:middle
deliver location related

00:11:29.166 --> 00:11:30.446 A:middle
information even when your app

00:11:30.446 --> 00:11:32.046 A:middle
is not in use.

00:11:34.576 --> 00:11:35.866 A:middle
So, in iOS 12, they're not

00:11:35.866 --> 00:11:37.246 A:middle
available to apps, which only

00:11:37.246 --> 00:11:38.506 A:middle
have authorization while they're

00:11:38.506 --> 00:11:41.146 A:middle
in use, but what if these

00:11:41.146 --> 00:11:42.326 A:middle
services at the bottom could run

00:11:42.326 --> 00:11:43.216 A:middle
in a mode where they don't

00:11:43.216 --> 00:11:44.486 A:middle
deliver related information to

00:11:44.486 --> 00:11:45.956 A:middle
your app unless it is in use?

00:11:46.936 --> 00:11:47.756 A:middle
In this case, they'd be

00:11:47.756 --> 00:11:48.986 A:middle
compatible with when in use

00:11:48.986 --> 00:11:50.816 A:middle
authorization, and we can stop

00:11:50.816 --> 00:11:52.536 A:middle
thinking so much about what

00:11:52.536 --> 00:11:55.426 A:middle
services your app is allowed to

00:11:55.426 --> 00:11:56.656 A:middle
use and start thinking more

00:11:56.656 --> 00:11:57.766 A:middle
about whether, just whether it's

00:11:57.816 --> 00:11:58.896 A:middle
in use or not.

00:11:59.506 --> 00:12:01.786 A:middle
So, that's what we've done in

00:11:59.506 --> 00:12:01.786 A:middle
So, that's what we've done in

00:12:01.916 --> 00:12:02.716 A:middle
iOS 13.

00:12:03.606 --> 00:12:04.866 A:middle
Each of these green checkmarks

00:12:04.866 --> 00:12:07.556 A:middle
now describes complete access to

00:12:07.626 --> 00:12:09.236 A:middle
all of our API including

00:12:09.236 --> 00:12:10.446 A:middle
significant location change

00:12:10.446 --> 00:12:12.696 A:middle
monitoring, region monitoring,

00:12:13.266 --> 00:12:14.636 A:middle
visit monitoring.

00:12:15.946 --> 00:12:17.486 A:middle
If your app is in use, it will

00:12:17.486 --> 00:12:18.466 A:middle
receive that significant

00:12:18.466 --> 00:12:20.296 A:middle
location change, that region

00:12:20.296 --> 00:12:23.196 A:middle
entry, that visit exit, and if

00:12:23.196 --> 00:12:25.286 A:middle
it's not, it will not.

00:12:27.136 --> 00:12:29.646 A:middle
So, under iOS 12, if you knew

00:12:30.026 --> 00:12:31.466 A:middle
your app needed to do region

00:12:31.466 --> 00:12:32.386 A:middle
monitoring, you might have

00:12:32.386 --> 00:12:33.376 A:middle
stopped thinking right there

00:12:33.376 --> 00:12:34.676 A:middle
about what kind of authorization

00:12:34.676 --> 00:12:35.066 A:middle
you needed.

00:12:36.476 --> 00:12:37.916 A:middle
But now, in iOS 13, you should

00:12:37.916 --> 00:12:38.766 A:middle
think a little deeper.

00:12:40.356 --> 00:12:41.416 A:middle
Whatever you need to do, will

00:12:41.416 --> 00:12:42.906 A:middle
the user know your doing it, can

00:12:43.826 --> 00:12:45.546 A:middle
the user be involved directly in

00:12:45.546 --> 00:12:45.966 A:middle
doing it?

00:12:47.456 --> 00:12:49.286 A:middle
In sort, when in use

00:12:49.286 --> 00:12:50.676 A:middle
authorization will be sufficient

00:12:50.676 --> 00:12:53.016 A:middle
for your app's needs if it will

00:12:53.056 --> 00:12:58.246 A:middle
or can be in use at the time.

00:12:58.466 --> 00:12:58.756 A:middle
Okay.

00:12:58.756 --> 00:13:00.796 A:middle
So, when is your app in use?

00:12:58.756 --> 00:13:00.796 A:middle
So, when is your app in use?

00:13:01.106 --> 00:13:04.256 A:middle
Well, at some point on this

00:13:04.256 --> 00:13:05.186 A:middle
timeline, your app will enter

00:13:05.186 --> 00:13:07.756 A:middle
the foreground, and from then,

00:13:07.826 --> 00:13:09.006 A:middle
until it enters the background,

00:13:09.006 --> 00:13:12.516 A:middle
it's considered in use, and then

00:13:12.516 --> 00:13:14.046 A:middle
actually for a few seconds more.

00:13:14.436 --> 00:13:15.726 A:middle
So this is the grace period

00:13:15.776 --> 00:13:16.986 A:middle
that's intended to cover your

00:13:16.986 --> 00:13:19.316 A:middle
app for race cases when the

00:13:19.316 --> 00:13:21.606 A:middle
event that you need location for

00:13:21.606 --> 00:13:22.926 A:middle
happens right before the user

00:13:22.926 --> 00:13:24.776 A:middle
leaves your app, but it's very

00:13:24.776 --> 00:13:27.006 A:middle
short, so try not to depend on

00:13:27.006 --> 00:13:29.106 A:middle
it too much.

00:13:29.446 --> 00:13:30.926 A:middle
Then your app will remain out of

00:13:30.956 --> 00:13:32.296 A:middle
use until it next enters the

00:13:32.376 --> 00:13:33.506 A:middle
foreground and this process

00:13:33.506 --> 00:13:34.006 A:middle
repeats.

00:13:39.176 --> 00:13:39.506 A:middle
Okay.

00:13:39.506 --> 00:13:42.656 A:middle
So, if you add location updates

00:13:42.706 --> 00:13:44.956 A:middle
to the list of background modes

00:13:44.956 --> 00:13:46.976 A:middle
that your app supports in Xcode,

00:13:47.766 --> 00:13:49.026 A:middle
then you can also get into this

00:13:49.026 --> 00:13:51.236 A:middle
situation where after your app

00:13:51.236 --> 00:13:52.786 A:middle
enters the foreground and

00:13:53.996 --> 00:13:55.646 A:middle
becomes in use, you start

00:13:55.646 --> 00:13:57.166 A:middle
updating your location, and then

00:13:57.166 --> 00:13:58.566 A:middle
you set the allows background

00:13:58.566 --> 00:14:00.316 A:middle
location updates property to

00:13:58.566 --> 00:14:00.316 A:middle
location updates property to

00:14:00.316 --> 00:14:01.726 A:middle
true on your location manager.

00:14:02.886 --> 00:14:03.956 A:middle
And then when you app enters the

00:14:03.956 --> 00:14:05.886 A:middle
background, that blue background

00:14:05.886 --> 00:14:08.386 A:middle
usage indicator will show, and

00:14:08.386 --> 00:14:10.256 A:middle
your app will continue to be in

00:14:10.256 --> 00:14:11.396 A:middle
use throughout its period in the

00:14:11.396 --> 00:14:12.986 A:middle
background until it enters the

00:14:12.986 --> 00:14:14.336 A:middle
foreground again.

00:14:16.636 --> 00:14:17.856 A:middle
Then, at some point you set

00:14:17.856 --> 00:14:18.976 A:middle
allows background location

00:14:18.976 --> 00:14:20.196 A:middle
updates to false, and that's

00:14:20.196 --> 00:14:21.326 A:middle
sufficient to return to the

00:14:21.326 --> 00:14:22.776 A:middle
usual behavior where the next

00:14:22.776 --> 00:14:24.566 A:middle
time your app leaves the

00:14:24.656 --> 00:14:26.296 A:middle
foreground, it will cease to be

00:14:26.296 --> 00:14:27.000 A:middle
in use.

00:14:31.516 --> 00:14:31.826 A:middle
All right.

00:14:31.826 --> 00:14:32.966 A:middle
What about complications?

00:14:33.576 --> 00:14:35.026 A:middle
Well, the complications on the

00:14:35.026 --> 00:14:36.106 A:middle
current watch face are

00:14:36.106 --> 00:14:37.336 A:middle
effectively always in use.

00:14:37.886 --> 00:14:42.176 A:middle
Note though that like the grace

00:14:42.176 --> 00:14:43.676 A:middle
period in the background usage

00:14:43.676 --> 00:14:46.036 A:middle
indicator period, this is a dark

00:14:46.036 --> 00:14:48.826 A:middle
green color, and your app is not

00:14:48.826 --> 00:14:50.266 A:middle
considered in use enough to

00:14:50.266 --> 00:14:51.756 A:middle
request an authorization prompt

00:14:51.956 --> 00:14:54.296 A:middle
in this state or to do anything

00:14:54.296 --> 00:14:55.766 A:middle
but receive location updates.

00:14:56.666 --> 00:14:58.066 A:middle
So, if you're working on a

00:14:58.066 --> 00:14:59.326 A:middle
complication, your app probably

00:14:59.326 --> 00:15:00.516 A:middle
will not require always

00:14:59.326 --> 00:15:00.516 A:middle
will not require always

00:15:00.516 --> 00:15:02.266 A:middle
authorization, but you will need

00:15:02.266 --> 00:15:03.466 A:middle
to seek authorization from your

00:15:03.466 --> 00:15:05.000 A:middle
app context.

00:15:07.076 --> 00:15:08.896 A:middle
There's one other case I'd like

00:15:08.896 --> 00:15:10.116 A:middle
to draw your attention to

00:15:10.116 --> 00:15:11.896 A:middle
because it provides a lot of

00:15:12.026 --> 00:15:13.246 A:middle
additional power to when in use

00:15:13.246 --> 00:15:15.036 A:middle
authorization in those cases

00:15:15.036 --> 00:15:16.646 A:middle
where you can afford to directly

00:15:16.646 --> 00:15:17.336 A:middle
involve the user.

00:15:17.676 --> 00:15:19.636 A:middle
So, if you can do that, then you

00:15:19.636 --> 00:15:21.206 A:middle
can create a local notification

00:15:21.256 --> 00:15:23.256 A:middle
with a UN location notification

00:15:23.256 --> 00:15:25.756 A:middle
trigger that names a region of

00:15:26.546 --> 00:15:27.000 A:middle
interest.

00:15:28.346 --> 00:15:30.216 A:middle
Then, when the user enters that

00:15:30.216 --> 00:15:32.496 A:middle
region, that notification will

00:15:32.496 --> 00:15:33.456 A:middle
become relevant and will be

00:15:33.456 --> 00:15:34.246 A:middle
displayed to them.

00:15:35.786 --> 00:15:37.066 A:middle
Note that at this point up to

00:15:37.066 --> 00:15:38.106 A:middle
this point your app has not

00:15:38.106 --> 00:15:39.396 A:middle
received any information about

00:15:39.396 --> 00:15:40.556 A:middle
where the location, where the

00:15:40.556 --> 00:15:43.086 A:middle
user is, and you're not told

00:15:43.086 --> 00:15:45.016 A:middle
when this notification presents

00:15:45.016 --> 00:15:46.346 A:middle
or doesn't present.

00:15:47.626 --> 00:15:49.146 A:middle
However, at this point, if the

00:15:49.146 --> 00:15:51.006 A:middle
user taps through from that

00:15:51.006 --> 00:15:52.656 A:middle
notification and launches your

00:15:52.656 --> 00:15:54.376 A:middle
app, boom, your app is in the

00:15:54.376 --> 00:15:54.896 A:middle
foreground.

00:15:55.026 --> 00:15:56.376 A:middle
It's in use in the regular way,

00:15:56.616 --> 00:15:57.776 A:middle
right at the context where you

00:15:57.776 --> 00:16:01.446 A:middle
needed it to be.

00:15:57.776 --> 00:16:01.446 A:middle
needed it to be.

00:16:02.026 --> 00:16:03.416 A:middle
Okay, so remember, all the Core

00:16:03.416 --> 00:16:05.246 A:middle
Location API surfaces are now

00:16:05.246 --> 00:16:07.076 A:middle
available to all clients under

00:16:07.076 --> 00:16:09.086 A:middle
at least some circumstances, and

00:16:09.086 --> 00:16:10.606 A:middle
you can use local notifications

00:16:10.676 --> 00:16:12.366 A:middle
or the blue background usage

00:16:12.366 --> 00:16:14.416 A:middle
indicator to get or stay in

00:16:14.416 --> 00:16:15.596 A:middle
those circumstances as

00:16:15.596 --> 00:16:19.226 A:middle
appropriate, which means you

00:16:19.226 --> 00:16:20.076 A:middle
should now need always

00:16:20.076 --> 00:16:21.546 A:middle
authorization only for those

00:16:21.546 --> 00:16:23.236 A:middle
cases, those kinds of automation

00:16:23.236 --> 00:16:24.966 A:middle
where the user can't or doesn't

00:16:25.036 --> 00:16:26.676 A:middle
want to be involved before your

00:16:26.676 --> 00:16:27.000 A:middle
app is.

00:16:29.526 --> 00:16:30.556 A:middle
We hope that this will help you

00:16:30.556 --> 00:16:31.916 A:middle
make your authorization story

00:16:31.916 --> 00:16:33.186 A:middle
more comfortable for all those

00:16:33.186 --> 00:16:35.206 A:middle
users in other cases.

00:16:39.126 --> 00:16:41.186 A:middle
Okay, and there's one more way

00:16:41.386 --> 00:16:42.436 A:middle
in which we've made a temporary

00:16:42.436 --> 00:16:43.786 A:middle
authorization, when in use

00:16:43.786 --> 00:16:45.506 A:middle
authorization cooler, and that's

00:16:45.646 --> 00:16:46.516 A:middle
that we allowed it to be

00:16:46.516 --> 00:16:47.086 A:middle
temporary.

00:16:48.026 --> 00:16:49.456 A:middle
So, that's what the middle

00:16:49.456 --> 00:16:50.606 A:middle
button on this prompt does.

00:16:55.456 --> 00:16:56.746 A:middle
Let's take a look at all the

00:16:56.746 --> 00:16:59.026 A:middle
states that your authorization

00:16:59.026 --> 00:17:00.056 A:middle
states that your app can be in

00:16:59.026 --> 00:17:00.056 A:middle
states that your app can be in

00:17:00.056 --> 00:17:01.226 A:middle
and some of the transitions that

00:17:01.356 --> 00:17:02.626 A:middle
you can make between the VR

00:17:02.626 --> 00:17:04.616 A:middle
prompting system so that we can

00:17:04.616 --> 00:17:06.406 A:middle
figure out where this temporary

00:17:06.406 --> 00:17:07.496 A:middle
authorization fits into the

00:17:07.496 --> 00:17:07.836 A:middle
picture.

00:17:08.506 --> 00:17:11.996 A:middle
So, starting with the way this

00:17:11.996 --> 00:17:13.455 A:middle
works in iOS 12, when your app

00:17:13.715 --> 00:17:15.486 A:middle
first enters to foreground, its

00:17:15.486 --> 00:17:17.965 A:middle
state is not determined, which

00:17:17.965 --> 00:17:18.705 A:middle
means that it does not have

00:17:18.705 --> 00:17:20.455 A:middle
access-- by the way we're going

00:17:20.455 --> 00:17:21.806 A:middle
to have more permanent states

00:17:21.806 --> 00:17:24.086 A:middle
off to the sides and more highly

00:17:24.165 --> 00:17:25.465 A:middle
authorized states up to the top.

00:17:25.465 --> 00:17:26.925 A:middle
So not determined is at the

00:17:26.925 --> 00:17:27.306 A:middle
bottom.

00:17:27.526 --> 00:17:29.216 A:middle
Your app cannot access location,

00:17:29.446 --> 00:17:31.706 A:middle
the user's location, but it's

00:17:31.706 --> 00:17:32.446 A:middle
not denied.

00:17:33.246 --> 00:17:34.206 A:middle
It's not determined.

00:17:35.796 --> 00:17:36.836 A:middle
So, crucially, in a not

00:17:36.836 --> 00:17:38.066 A:middle
determined state, your app can

00:17:38.066 --> 00:17:39.566 A:middle
request an authorization prompt,

00:17:40.276 --> 00:17:41.366 A:middle
and as soon as it does, then it

00:17:41.366 --> 00:17:42.806 A:middle
may be denied, and then it will

00:17:42.806 --> 00:17:44.206 A:middle
not be able to prompt again, but

00:17:44.516 --> 00:17:45.926 A:middle
the user could also grant a when

00:17:45.926 --> 00:17:49.596 A:middle
in use authorization, and if you

00:17:50.086 --> 00:17:52.136 A:middle
request always authorization

00:17:52.136 --> 00:17:53.226 A:middle
from there, you can get into

00:17:53.226 --> 00:17:56.096 A:middle
always authorization, or you can

00:17:56.096 --> 00:17:57.076 A:middle
ask directly for always

00:17:57.076 --> 00:17:57.846 A:middle
authorization from the

00:17:57.846 --> 00:17:58.166 A:middle
beginning.

00:17:59.316 --> 00:18:00.776 A:middle
So, that's iOS 12.

00:17:59.316 --> 00:18:00.776 A:middle
So, that's iOS 12.

00:18:01.886 --> 00:18:06.746 A:middle
Now, in iOS 13, we've seen that

00:18:07.686 --> 00:18:09.336 A:middle
the path to always authorization

00:18:09.336 --> 00:18:11.306 A:middle
involves a new temporary state

00:18:11.506 --> 00:18:12.726 A:middle
called provisional always

00:18:12.726 --> 00:18:14.356 A:middle
authorization, which functions a

00:18:14.356 --> 00:18:15.826 A:middle
lot like always authorization

00:18:16.526 --> 00:18:17.956 A:middle
but from which a transition back

00:18:18.136 --> 00:18:19.396 A:middle
to when in use authorization is

00:18:19.396 --> 00:18:20.126 A:middle
also possible.

00:18:20.126 --> 00:18:23.916 A:middle
Well, a temporary authorization

00:18:23.916 --> 00:18:24.926 A:middle
works very similarly.

00:18:25.736 --> 00:18:27.586 A:middle
It's a temporary state that

00:18:27.856 --> 00:18:29.166 A:middle
behaves a lot like when in use

00:18:29.166 --> 00:18:30.866 A:middle
authorization but from which a

00:18:30.866 --> 00:18:32.576 A:middle
return to not determined state

00:18:33.186 --> 00:18:35.536 A:middle
always happens as soon as your

00:18:35.536 --> 00:18:37.000 A:middle
app is no longer in use.

00:18:42.336 --> 00:18:43.886 A:middle
Okay, so temporary, a when in

00:18:43.886 --> 00:18:45.906 A:middle
use authorization is temporary,

00:18:46.666 --> 00:18:50.726 A:middle
but otherwise it works just like

00:18:50.726 --> 00:18:51.916 A:middle
when in use authorization.

00:18:52.056 --> 00:18:54.126 A:middle
So, your location manager's

00:18:54.126 --> 00:18:55.096 A:middle
delegate will be called back

00:18:55.096 --> 00:18:56.626 A:middle
with location manager did change

00:18:56.626 --> 00:18:58.996 A:middle
authorization to authorize when

00:18:58.996 --> 00:19:01.116 A:middle
in use and then again later with

00:18:58.996 --> 00:19:01.116 A:middle
in use and then again later with

00:19:01.366 --> 00:19:01.986 A:middle
not determined.

00:19:02.506 --> 00:19:05.226 A:middle
But the key is, after that

00:19:05.376 --> 00:19:07.036 A:middle
happens, your app can and should

00:19:07.036 --> 00:19:08.416 A:middle
request authorization again the

00:19:08.416 --> 00:19:09.416 A:middle
next time it needs it.

00:19:14.936 --> 00:19:16.286 A:middle
And the main thing to remember

00:19:16.286 --> 00:19:18.036 A:middle
is just that authorization with

00:19:18.036 --> 00:19:18.776 A:middle
temporary when in use

00:19:18.776 --> 00:19:20.566 A:middle
authorization is closely tied to

00:19:20.566 --> 00:19:22.586 A:middle
when exactly your app is in use,

00:19:23.236 --> 00:19:24.836 A:middle
and also because you can request

00:19:24.836 --> 00:19:26.376 A:middle
it again, it's more closely tied

00:19:26.416 --> 00:19:27.766 A:middle
to where in your app's flow you

00:19:27.766 --> 00:19:29.596 A:middle
actually need location access.

00:19:31.066 --> 00:19:32.986 A:middle
So, let's look at some of those

00:19:33.186 --> 00:19:34.906 A:middle
green in usage charts again now

00:19:34.906 --> 00:19:35.426 A:middle
in this light.

00:19:36.006 --> 00:19:38.916 A:middle
So here's the most basic case,

00:19:39.076 --> 00:19:40.006 A:middle
but we'll make it even more

00:19:40.006 --> 00:19:41.446 A:middle
basic by pulling that second

00:19:41.446 --> 00:19:43.186 A:middle
region of usage up close to the

00:19:43.186 --> 00:19:43.686 A:middle
first one.

00:19:45.316 --> 00:19:46.356 A:middle
Now, while your app is

00:19:46.436 --> 00:19:48.546 A:middle
foreground and in use, let's say

00:19:48.546 --> 00:19:50.966 A:middle
the user interacts in a way that

00:19:51.326 --> 00:19:52.426 A:middle
makes you know that your app

00:19:52.426 --> 00:19:52.976 A:middle
will need authorization,

00:19:53.446 --> 00:19:55.576 A:middle
so you request authorization at

00:19:55.606 --> 00:19:56.086 A:middle
that point.

00:19:56.576 --> 00:19:58.986 A:middle
And the user grants it-- with

00:19:58.986 --> 00:20:00.406 A:middle
the allow once, the user grants

00:19:58.986 --> 00:20:00.406 A:middle
the allow once, the user grants

00:20:00.406 --> 00:20:01.326 A:middle
a temporary when in use

00:20:01.326 --> 00:20:01.996 A:middle
authorization.

00:20:03.326 --> 00:20:04.516 A:middle
In that case, your app will have

00:20:04.516 --> 00:20:05.776 A:middle
when in use authorization

00:20:06.296 --> 00:20:07.296 A:middle
through the remainder of that

00:20:07.296 --> 00:20:09.226 A:middle
foreground period, across that

00:20:09.226 --> 00:20:10.506 A:middle
brief dip into the background,

00:20:10.906 --> 00:20:11.776 A:middle
and then through the next

00:20:11.776 --> 00:20:13.436 A:middle
foreground period all the way

00:20:13.436 --> 00:20:14.756 A:middle
until it fully enters the

00:20:14.756 --> 00:20:16.500 A:middle
background at the end.

00:20:21.486 --> 00:20:22.306 A:middle
All right, but what happens if

00:20:22.306 --> 00:20:23.976 A:middle
that gap in the middle opens up

00:20:23.976 --> 00:20:24.996 A:middle
a little bit more and your app

00:20:25.026 --> 00:20:26.476 A:middle
really ceases to be in use in

00:20:26.476 --> 00:20:26.846 A:middle
between.

00:20:28.186 --> 00:20:30.456 A:middle
Then, the user does that thing,

00:20:31.236 --> 00:20:32.816 A:middle
you request authorization, you

00:20:32.816 --> 00:20:34.986 A:middle
receive a temporary when in use

00:20:34.986 --> 00:20:36.656 A:middle
authorization, but it's going to

00:20:36.656 --> 00:20:38.096 A:middle
lapse when you enter into the

00:20:38.096 --> 00:20:38.616 A:middle
background.

00:20:39.146 --> 00:20:42.006 A:middle
So, you're probably thinking,

00:20:42.006 --> 00:20:44.116 A:middle
okay, when do I ask for

00:20:44.316 --> 00:20:45.836 A:middle
authorization again in that

00:20:45.886 --> 00:20:47.556 A:middle
second period of in useness?

00:20:47.776 --> 00:20:48.606 A:middle
Should I do it as soon as I

00:20:48.606 --> 00:20:49.396 A:middle
enter the foreground?

00:20:50.916 --> 00:20:51.696 A:middle
No, you shouldn't.

00:20:51.696 --> 00:20:53.586 A:middle
You should instead keep in mind

00:20:53.746 --> 00:20:54.946 A:middle
what it was that caused you to

00:20:54.946 --> 00:20:55.926 A:middle
ask for authorization in the

00:20:55.926 --> 00:20:56.546 A:middle
first place.

00:20:57.586 --> 00:20:58.836 A:middle
For example, maybe the user

00:20:58.836 --> 00:21:00.456 A:middle
asked that you keep a MAT view

00:20:58.836 --> 00:21:00.456 A:middle
asked that you keep a MAT view

00:21:00.456 --> 00:21:01.366 A:middle
updated with their current

00:21:01.366 --> 00:21:02.946 A:middle
location or that you GEO tag a

00:21:02.946 --> 00:21:03.886 A:middle
message they're sending.

00:21:04.476 --> 00:21:08.146 A:middle
If they do that again in the

00:21:08.216 --> 00:21:09.576 A:middle
second usage period, then ask

00:21:09.576 --> 00:21:11.176 A:middle
for authorization to do it in

00:21:11.176 --> 00:21:12.206 A:middle
order to support them with that

00:21:12.206 --> 00:21:12.726 A:middle
request.

00:21:12.896 --> 00:21:14.446 A:middle
If they don't, don't.

00:21:15.306 --> 00:21:17.196 A:middle
The key is, if the user doesn't

00:21:17.196 --> 00:21:18.866 A:middle
expect you to continue using

00:21:18.866 --> 00:21:20.106 A:middle
their location from the previous

00:21:20.106 --> 00:21:21.926 A:middle
time, don't ask again as soon as

00:21:21.926 --> 00:21:22.706 A:middle
you enter the foreground.

00:21:24.956 --> 00:21:25.296 A:middle
Okay.

00:21:25.606 --> 00:21:28.716 A:middle
But, sometimes maybe you're

00:21:28.716 --> 00:21:31.366 A:middle
tracking a user's run or helping

00:21:31.366 --> 00:21:32.716 A:middle
them navigate, and the user will

00:21:32.716 --> 00:21:34.456 A:middle
expect you to continue accessing

00:21:34.456 --> 00:21:37.646 A:middle
their location even after across

00:21:37.756 --> 00:21:40.076 A:middle
periods of time in the

00:21:40.076 --> 00:21:40.556 A:middle
background.

00:21:41.176 --> 00:21:41.766 A:middle
Well, in that case we're

00:21:41.766 --> 00:21:43.106 A:middle
probably in this situation

00:21:43.106 --> 00:21:46.086 A:middle
whereas after you start that run

00:21:46.136 --> 00:21:48.126 A:middle
and you ask for authorization to

00:21:48.126 --> 00:21:49.816 A:middle
record it, and you receive

00:21:49.816 --> 00:21:50.816 A:middle
temporary when in use

00:21:50.816 --> 00:21:52.206 A:middle
authorization, you're going to

00:21:52.206 --> 00:21:53.616 A:middle
be starting location updates.

00:21:53.616 --> 00:21:54.406 A:middle
You're going to be setting

00:21:54.406 --> 00:21:55.706 A:middle
allows back on location updates

00:21:55.706 --> 00:21:56.126 A:middle
to true.

00:21:56.696 --> 00:21:57.956 A:middle
And so when your app enters the

00:21:57.956 --> 00:21:59.946 A:middle
background, that blue background

00:21:59.946 --> 00:22:01.446 A:middle
usage indicator will show, and

00:21:59.946 --> 00:22:01.446 A:middle
usage indicator will show, and

00:22:01.446 --> 00:22:03.116 A:middle
your app will remain in use and

00:22:03.116 --> 00:22:04.576 A:middle
therefore continue to have its

00:22:04.576 --> 00:22:05.436 A:middle
temporary when in use

00:22:05.436 --> 00:22:06.816 A:middle
authorization uninterrupted

00:22:06.866 --> 00:22:08.246 A:middle
across that background session.

00:22:09.876 --> 00:22:11.166 A:middle
Then, when [inaudible] in the

00:22:11.216 --> 00:22:13.146 A:middle
foreground again, end the run or

00:22:13.146 --> 00:22:14.666 A:middle
end the navigation session, you

00:22:14.736 --> 00:22:16.206 A:middle
set allows background location

00:22:16.206 --> 00:22:17.886 A:middle
updates to false again, and we

00:22:17.886 --> 00:22:19.276 A:middle
return to the normal situation.

00:22:19.876 --> 00:22:22.846 A:middle
Okay, I do want to call out that

00:22:22.846 --> 00:22:24.376 A:middle
there is a valid use case for

00:22:24.376 --> 00:22:25.626 A:middle
requesting authorization more or

00:22:25.626 --> 00:22:26.486 A:middle
less as soon as you enter the

00:22:26.486 --> 00:22:28.326 A:middle
foreground, which is if the user

00:22:28.326 --> 00:22:29.806 A:middle
expects your app to always have

00:22:29.806 --> 00:22:31.306 A:middle
authorization, always be

00:22:31.396 --> 00:22:32.506 A:middle
updating a map with their

00:22:32.506 --> 00:22:34.096 A:middle
location, but only when they're

00:22:34.096 --> 00:22:35.296 A:middle
directly interacting with it.

00:22:36.256 --> 00:22:37.276 A:middle
In those cases, when you enter

00:22:37.276 --> 00:22:38.376 A:middle
the foreground, request

00:22:38.376 --> 00:22:40.046 A:middle
authorization, but don't set

00:22:40.046 --> 00:22:41.126 A:middle
allows background location

00:22:41.126 --> 00:22:42.876 A:middle
updates then you won't get the

00:22:42.876 --> 00:22:44.256 A:middle
background usage indicator, and

00:22:44.256 --> 00:22:45.276 A:middle
your authorization will just

00:22:45.276 --> 00:22:46.236 A:middle
lapse when you enter the

00:22:46.236 --> 00:22:46.686 A:middle
background.

00:22:47.206 --> 00:22:49.766 A:middle
Then when you come to the

00:22:49.816 --> 00:22:51.336 A:middle
foreground again, repeat.

00:22:52.966 --> 00:22:55.596 A:middle
Now, ask yourself seriously

00:22:55.596 --> 00:22:56.726 A:middle
though, if the user really wants

00:22:56.726 --> 00:22:57.266 A:middle
you to do this.

00:22:57.336 --> 00:22:58.006 A:middle
Maybe they do.

00:22:58.536 --> 00:22:59.986 A:middle
In such cases, you're likely to

00:22:59.986 --> 00:23:02.156 A:middle
end up in more permanent when in

00:22:59.986 --> 00:23:02.156 A:middle
end up in more permanent when in

00:23:02.156 --> 00:23:03.936 A:middle
use authorization sooner or

00:23:03.936 --> 00:23:05.496 A:middle
later, but it makes sense to

00:23:05.496 --> 00:23:07.276 A:middle
still ask in this way for that

00:23:07.276 --> 00:23:08.436 A:middle
period of time before users are

00:23:08.436 --> 00:23:09.746 A:middle
sure if they want to grant that

00:23:09.786 --> 00:23:10.586 A:middle
or not.

00:23:15.136 --> 00:23:16.686 A:middle
Okay, so we've seen that when in

00:23:16.686 --> 00:23:18.106 A:middle
use authorization can now handle

00:23:18.106 --> 00:23:19.576 A:middle
some uses such as region

00:23:19.576 --> 00:23:23.356 A:middle
monitoring and that temporary

00:23:23.356 --> 00:23:24.456 A:middle
authorization can bring them

00:23:24.456 --> 00:23:25.836 A:middle
that power even on a

00:23:25.836 --> 00:23:27.686 A:middle
case-by-case basis, and I

00:23:27.686 --> 00:23:28.866 A:middle
promised you some revamped

00:23:28.896 --> 00:23:29.766 A:middle
beacon ranging API.

00:23:30.546 --> 00:23:31.656 A:middle
So I'd like to invite my

00:23:31.656 --> 00:23:33.086 A:middle
colleague, Andre Guzzo, up on

00:23:33.086 --> 00:23:34.336 A:middle
stage to walk you through that.

00:23:34.716 --> 00:23:34.976 A:middle
Andre.

00:23:35.516 --> 00:23:41.176 A:middle
[ Applause ]

00:23:41.676 --> 00:23:42.426 A:middle
&gt;&gt; Hi everybody.

00:23:42.726 --> 00:23:44.406 A:middle
My name is Andre Guzzo.

00:23:44.596 --> 00:23:46.376 A:middle
I'm a software engineer in the

00:23:46.376 --> 00:23:49.286 A:middle
Core Location team, and I'm here

00:23:49.286 --> 00:23:50.706 A:middle
today to talk to you about

00:23:50.706 --> 00:23:51.496 A:middle
beacon ranging.

00:23:52.396 --> 00:23:54.886 A:middle
We'll see what's changed in the

00:23:54.886 --> 00:23:57.776 A:middle
API in iOS 13 and I will walk

00:23:57.776 --> 00:24:01.466 A:middle
you through a simple example on

00:23:57.776 --> 00:24:01.466 A:middle
you through a simple example on

00:24:01.516 --> 00:24:03.256 A:middle
how to use beacon ranging and

00:24:03.256 --> 00:24:04.786 A:middle
provide a great location

00:24:04.786 --> 00:24:07.206 A:middle
experience to your users without

00:24:07.206 --> 00:24:08.066 A:middle
the need of always

00:24:08.066 --> 00:24:08.796 A:middle
authorization.

00:24:10.576 --> 00:24:12.796 A:middle
Let's start with a refresher

00:24:12.796 --> 00:24:13.746 A:middle
about beacon ranging.

00:24:13.746 --> 00:24:14.896 A:middle
What is beacon ranging?

00:24:15.596 --> 00:24:18.456 A:middle
We introduced it in iOS 7 as an

00:24:18.456 --> 00:24:19.626 A:middle
extension of the regional

00:24:19.626 --> 00:24:23.476 A:middle
monitoring API and as a way to

00:24:23.476 --> 00:24:25.476 A:middle
provide a new dimension of

00:24:25.476 --> 00:24:27.166 A:middle
location aware experience to

00:24:27.166 --> 00:24:28.016 A:middle
your users.

00:24:30.146 --> 00:24:31.056 A:middle
It's part of the region

00:24:31.056 --> 00:24:33.626 A:middle
monitoring API because you want

00:24:34.656 --> 00:24:36.026 A:middle
to use region monitoring in

00:24:36.026 --> 00:24:37.596 A:middle
order to initiate ranging.

00:24:37.756 --> 00:24:40.066 A:middle
You want to assure you are in an

00:24:40.066 --> 00:24:41.376 A:middle
area where your beacons are

00:24:41.376 --> 00:24:43.276 A:middle
visible before you start ranging

00:24:43.276 --> 00:24:45.886 A:middle
for them to not waste resources.

00:24:47.156 --> 00:24:48.976 A:middle
And region monitoring since its

00:24:48.976 --> 00:24:51.796 A:middle
introduction has required always

00:24:51.796 --> 00:24:52.746 A:middle
authorization.

00:24:52.746 --> 00:24:55.226 A:middle
Now in iOS 13, it can be used

00:24:55.226 --> 00:24:56.716 A:middle
with when in use authorization

00:24:56.716 --> 00:24:57.186 A:middle
instead.

00:24:57.736 --> 00:25:02.046 A:middle
So, as I said, we introduced

00:24:57.736 --> 00:25:02.046 A:middle
So, as I said, we introduced

00:25:02.046 --> 00:25:03.706 A:middle
beacon ranging as an extension

00:25:03.706 --> 00:25:04.666 A:middle
of region monitoring.

00:25:04.786 --> 00:25:06.566 A:middle
So in order to represent a

00:25:06.566 --> 00:25:08.776 A:middle
region which is defined by the

00:25:08.776 --> 00:25:11.336 A:middle
presence of beacons, we have

00:25:11.336 --> 00:25:14.616 A:middle
extended the CL region object

00:25:14.616 --> 00:25:16.486 A:middle
into the CL beacon region, and

00:25:16.486 --> 00:25:17.866 A:middle
among other properties, we

00:25:17.866 --> 00:25:19.646 A:middle
included what actually

00:25:19.646 --> 00:25:22.586 A:middle
identifies a beacon, which is

00:25:22.586 --> 00:25:23.836 A:middle
[inaudible] major and minor.

00:25:25.786 --> 00:25:28.246 A:middle
And you would pass this data

00:25:28.246 --> 00:25:30.616 A:middle
type to the beacon ranging API

00:25:30.616 --> 00:25:35.346 A:middle
in iOS 12 and previous releases.

00:25:35.346 --> 00:25:36.836 A:middle
But let's focus on this

00:25:36.836 --> 00:25:37.976 A:middle
[inaudible] it identifies

00:25:37.976 --> 00:25:39.216 A:middle
exactly one beacon.

00:25:39.466 --> 00:25:41.276 A:middle
Well, you might configure the

00:25:41.276 --> 00:25:42.476 A:middle
same [inaudible] on multiple

00:25:42.476 --> 00:25:43.706 A:middle
beacons, but it would appear

00:25:43.706 --> 00:25:44.686 A:middle
like a bigger beacon.

00:25:45.456 --> 00:25:47.866 A:middle
So, when I'm defining a region

00:25:47.866 --> 00:25:49.756 A:middle
with all the elements of the

00:25:49.756 --> 00:25:50.356 A:middle
[inaudible], I'm actually

00:25:50.356 --> 00:25:51.956 A:middle
defining a region with exactly

00:25:51.956 --> 00:25:53.526 A:middle
that beacon matching the

00:25:53.526 --> 00:25:54.686 A:middle
[inaudible].

00:25:54.686 --> 00:25:56.346 A:middle
But in the beacon region case,

00:25:56.346 --> 00:25:58.836 A:middle
we can omit the minor and major

00:25:58.836 --> 00:26:00.526 A:middle
number, which is equivalent to

00:25:58.836 --> 00:26:00.526 A:middle
number, which is equivalent to

00:26:00.526 --> 00:26:01.616 A:middle
using a wild card.

00:26:01.746 --> 00:26:03.996 A:middle
So, I can omit the minor number,

00:26:03.996 --> 00:26:05.976 A:middle
and now my region is defined by

00:26:05.976 --> 00:26:07.876 A:middle
all the beacons sharing the same

00:26:07.876 --> 00:26:09.786 A:middle
UUID and major number.

00:26:09.786 --> 00:26:12.246 A:middle
In the same way, I can omit the

00:26:12.246 --> 00:26:14.326 A:middle
major, and now I extended my

00:26:14.326 --> 00:26:15.616 A:middle
region to include all the

00:26:15.616 --> 00:26:17.876 A:middle
beacons that have just the same

00:26:17.876 --> 00:26:19.866 A:middle
UUID but different major and

00:26:19.866 --> 00:26:20.706 A:middle
minor numbers.

00:26:21.736 --> 00:26:24.076 A:middle
This is why in iOS 13 we

00:26:24.076 --> 00:26:27.386 A:middle
introduced a data type CL Beacon

00:26:27.386 --> 00:26:29.776 A:middle
Identity Constraint, in order to

00:26:29.776 --> 00:26:32.596 A:middle
represent the meaning of

00:26:32.596 --> 00:26:34.556 A:middle
[inaudible], which is telling me

00:26:34.636 --> 00:26:35.806 A:middle
what are the beacons I'm

00:26:35.806 --> 00:26:37.266 A:middle
interested into and that are

00:26:37.266 --> 00:26:38.436 A:middle
defining my region.

00:26:39.626 --> 00:26:42.506 A:middle
And now, you will use this

00:26:42.506 --> 00:26:44.536 A:middle
identity constraint, this data

00:26:44.536 --> 00:26:45.826 A:middle
type, when you create your

00:26:45.826 --> 00:26:46.556 A:middle
beacon region.

00:26:47.106 --> 00:26:49.056 A:middle
And you can later get an

00:26:49.056 --> 00:26:51.876 A:middle
instance of this data type when

00:26:51.876 --> 00:26:54.426 A:middle
you will need it to access the

00:26:54.426 --> 00:26:57.116 A:middle
new beacon ranging API where

00:26:57.116 --> 00:26:58.556 A:middle
this data type is expected.

00:27:02.176 --> 00:27:04.386 A:middle
So, let's now see how this works

00:27:04.386 --> 00:27:06.566 A:middle
in practice by making a simple

00:27:06.566 --> 00:27:07.186 A:middle
example.

00:27:09.796 --> 00:27:10.876 A:middle
Imagine we are building an

00:27:10.876 --> 00:27:13.946 A:middle
application to be used while

00:27:13.946 --> 00:27:15.186 A:middle
visiting a museum.

00:27:16.246 --> 00:27:18.616 A:middle
We want to provide the visitor

00:27:18.616 --> 00:27:20.206 A:middle
with details about the object

00:27:20.206 --> 00:27:21.556 A:middle
he's standing in front of

00:27:22.746 --> 00:27:24.966 A:middle
without the need of having him

00:27:24.966 --> 00:27:26.756 A:middle
typing in some long name or

00:27:26.756 --> 00:27:28.156 A:middle
browsing through the catalogue.

00:27:29.336 --> 00:27:30.956 A:middle
To achieve this, we are going to

00:27:30.956 --> 00:27:32.806 A:middle
install our beacons in the

00:27:32.806 --> 00:27:34.756 A:middle
museum in the exhibition rooms.

00:27:35.846 --> 00:27:37.646 A:middle
We will use the same UUID for

00:27:37.646 --> 00:27:38.956 A:middle
all the beacons that we will

00:27:38.956 --> 00:27:40.886 A:middle
deploy in our museum.

00:27:42.106 --> 00:27:44.006 A:middle
We will configure a specific

00:27:44.006 --> 00:27:45.516 A:middle
major number for each of the

00:27:45.516 --> 00:27:48.366 A:middle
exhibition rooms and a minor

00:27:48.366 --> 00:27:50.106 A:middle
number for the specific object

00:27:50.186 --> 00:27:51.106 A:middle
inside the room.

00:27:51.986 --> 00:27:53.986 A:middle
Then, we need to be able to

00:27:53.986 --> 00:27:56.176 A:middle
determine when the visitor is or

00:27:56.176 --> 00:27:57.636 A:middle
not in one of the exhibition

00:27:57.636 --> 00:27:57.756 A:middle
rooms.

00:27:57.756 --> 00:27:59.066 A:middle
We don't want to be ranging

00:27:59.066 --> 00:28:00.076 A:middle
while the visitor is in the

00:27:59.066 --> 00:28:00.076 A:middle
while the visitor is in the

00:28:00.076 --> 00:28:02.726 A:middle
cafeteria doing something else.

00:28:02.896 --> 00:28:03.956 A:middle
We want to be ranging for

00:28:03.956 --> 00:28:06.556 A:middle
beacons when we know he is one

00:28:06.556 --> 00:28:07.726 A:middle
of the exhibition room and

00:28:07.726 --> 00:28:08.816 A:middle
engaged with the visit.

00:28:08.816 --> 00:28:11.176 A:middle
At that point, we need to

00:28:11.176 --> 00:28:12.566 A:middle
determine what is the object

00:28:12.566 --> 00:28:15.336 A:middle
closest to the visitor and

00:28:15.336 --> 00:28:17.026 A:middle
provide details about that one.

00:28:19.276 --> 00:28:22.506 A:middle
Finally, all this happens while

00:28:22.506 --> 00:28:25.176 A:middle
our application is in use.

00:28:25.736 --> 00:28:28.626 A:middle
We can safely assume that since

00:28:28.626 --> 00:28:30.416 A:middle
it's a guide for the visit to

00:28:30.416 --> 00:28:31.496 A:middle
the museum, the visitor will

00:28:31.496 --> 00:28:33.396 A:middle
probably be already engaged with

00:28:33.396 --> 00:28:35.476 A:middle
our app, but if we want to

00:28:35.476 --> 00:28:37.616 A:middle
remind the visitor about our

00:28:37.616 --> 00:28:39.266 A:middle
application, we can use a local

00:28:39.626 --> 00:28:42.536 A:middle
notification to trigger a

00:28:42.536 --> 00:28:44.076 A:middle
notification when the visitor

00:28:44.076 --> 00:28:45.366 A:middle
arrives physically to the

00:28:45.366 --> 00:28:47.156 A:middle
museum, so he has a choice to

00:28:47.426 --> 00:28:49.476 A:middle
tap through and start our

00:28:49.476 --> 00:28:50.436 A:middle
application.

00:28:52.526 --> 00:28:54.076 A:middle
So, let's see what our app would

00:28:54.076 --> 00:28:54.676 A:middle
look like.

00:28:55.016 --> 00:28:56.826 A:middle
This diagram represents the

00:28:56.826 --> 00:28:58.486 A:middle
state of our application while

00:28:58.486 --> 00:28:59.466 A:middle
it's being used.

00:29:00.486 --> 00:29:01.876 A:middle
We will be monitoring for our

00:29:01.876 --> 00:29:03.626 A:middle
beacon defined region and react

00:29:03.786 --> 00:29:06.126 A:middle
to enter and exit events, and

00:29:06.126 --> 00:29:07.906 A:middle
while we are ranging, we will

00:29:07.906 --> 00:29:09.766 A:middle
receive updates about the

00:29:09.766 --> 00:29:11.546 A:middle
proximity of our beacons.

00:29:12.006 --> 00:29:17.026 A:middle
Let's focus on the first state,

00:29:17.026 --> 00:29:19.116 A:middle
so how do we define our

00:29:19.116 --> 00:29:20.386 A:middle
beacon-defined region.

00:29:20.996 --> 00:29:22.196 A:middle
As I said, we are going to

00:29:22.196 --> 00:29:23.906 A:middle
install beacons in all the

00:29:23.906 --> 00:29:25.806 A:middle
exhibition rooms, and we will

00:29:25.806 --> 00:29:27.256 A:middle
use the same UUID for all the

00:29:27.256 --> 00:29:29.316 A:middle
beacons and then major for the

00:29:29.716 --> 00:29:31.626 A:middle
exhibition room and minor for

00:29:31.626 --> 00:29:32.636 A:middle
the specific object.

00:29:33.656 --> 00:29:35.356 A:middle
Since we are interested in

00:29:35.356 --> 00:29:36.756 A:middle
determining when the visitor

00:29:36.756 --> 00:29:38.956 A:middle
enters any of our exhibition

00:29:38.956 --> 00:29:40.936 A:middle
rooms, we will omit major and

00:29:40.936 --> 00:29:42.866 A:middle
minor, and we will just provide

00:29:42.866 --> 00:29:45.166 A:middle
the UUID when creating our

00:29:45.166 --> 00:29:46.816 A:middle
beacon region.

00:29:47.026 --> 00:29:49.086 A:middle
Let's see how this looks into

00:29:49.086 --> 00:29:49.426 A:middle
code.

00:29:49.426 --> 00:29:52.506 A:middle
First of all, we are going to

00:29:52.506 --> 00:29:53.786 A:middle
ensure we have when in use

00:29:53.786 --> 00:29:54.566 A:middle
authorization.

00:29:56.006 --> 00:29:58.546 A:middle
Then we will create our beacon

00:29:58.546 --> 00:30:01.846 A:middle
constraint by providing only the

00:29:58.546 --> 00:30:01.846 A:middle
constraint by providing only the

00:30:01.846 --> 00:30:02.106 A:middle
UUID.

00:30:03.586 --> 00:30:05.656 A:middle
Then we create our beacon region

00:30:05.736 --> 00:30:07.616 A:middle
with a new API by providing the

00:30:07.616 --> 00:30:09.596 A:middle
constraint as argument, and we

00:30:09.596 --> 00:30:11.000 A:middle
can start monitoring for it.

00:30:14.106 --> 00:30:15.636 A:middle
At this point, we are able to

00:30:15.636 --> 00:30:17.276 A:middle
determine when the visitor is

00:30:17.276 --> 00:30:19.156 A:middle
inside or outside one of our

00:30:19.156 --> 00:30:20.476 A:middle
exhibition rooms.

00:30:20.896 --> 00:30:22.946 A:middle
And so we just need to react to

00:30:22.946 --> 00:30:25.176 A:middle
the state change.

00:30:25.306 --> 00:30:27.536 A:middle
We have to start ranging when

00:30:27.536 --> 00:30:29.126 A:middle
the visitor enters one of the

00:30:29.126 --> 00:30:32.406 A:middle
exhibition rooms and stop

00:30:32.406 --> 00:30:33.936 A:middle
ranging when he leaves one of

00:30:33.936 --> 00:30:34.796 A:middle
the exhibition rooms.

00:30:35.296 --> 00:30:39.176 A:middle
We achieve this by defining our

00:30:39.176 --> 00:30:42.796 A:middle
delegate method, and in the

00:30:42.796 --> 00:30:44.746 A:middle
delegate method, we will react

00:30:44.746 --> 00:30:46.166 A:middle
accordingly to the state.

00:30:46.166 --> 00:30:47.726 A:middle
If we are inside, we will start

00:30:47.726 --> 00:30:48.416 A:middle
ranging.

00:30:48.416 --> 00:30:50.076 A:middle
If we outside, we will stop

00:30:50.076 --> 00:30:50.576 A:middle
ranging.

00:30:51.076 --> 00:30:52.936 A:middle
And as you see we are providing

00:30:52.936 --> 00:30:55.066 A:middle
the beacon identity constraint

00:30:55.156 --> 00:30:57.066 A:middle
we just introduced that you can

00:30:57.066 --> 00:30:59.000 A:middle
retrieve through the region.

00:31:00.046 --> 00:31:01.016 A:middle
Note that this delegate method

00:31:01.016 --> 00:31:02.846 A:middle
will be called, also the first

00:31:02.846 --> 00:31:04.876 A:middle
time you start monitoring, in

00:31:04.876 --> 00:31:06.146 A:middle
order for you to know your

00:31:06.146 --> 00:31:08.866 A:middle
initial state, so if the visitor

00:31:08.866 --> 00:31:10.186 A:middle
starts your application while

00:31:10.186 --> 00:31:11.246 A:middle
he's already in one of the

00:31:11.246 --> 00:31:13.876 A:middle
exhibition rooms, you will have

00:31:13.876 --> 00:31:15.836 A:middle
your delegate being called with

00:31:15.836 --> 00:31:16.606 A:middle
the state inside.

00:31:16.606 --> 00:31:18.426 A:middle
So, you will be aware about

00:31:18.426 --> 00:31:18.606 A:middle
that.

00:31:21.656 --> 00:31:23.406 A:middle
Okay, now that we know how to

00:31:23.406 --> 00:31:25.636 A:middle
react to entrance and exits from

00:31:25.636 --> 00:31:27.386 A:middle
the exhibition rooms, let's see

00:31:27.386 --> 00:31:28.806 A:middle
what we have to do when we are

00:31:28.806 --> 00:31:30.396 A:middle
inside in order to determine

00:31:30.396 --> 00:31:32.146 A:middle
what the object closest to the

00:31:32.146 --> 00:31:32.736 A:middle
visitor.

00:31:34.846 --> 00:31:36.416 A:middle
We want to provide information

00:31:36.416 --> 00:31:38.156 A:middle
about what the visitor is

00:31:38.156 --> 00:31:39.426 A:middle
actually standing in front of,

00:31:40.056 --> 00:31:41.526 A:middle
and we want to know if the

00:31:41.526 --> 00:31:42.596 A:middle
visitor moves inside the

00:31:42.596 --> 00:31:44.076 A:middle
exhibition room what is the new

00:31:44.076 --> 00:31:47.666 A:middle
object closest to him.

00:31:47.666 --> 00:31:48.986 A:middle
We only need to define our

00:31:48.986 --> 00:31:49.796 A:middle
delegate method.

00:31:49.796 --> 00:31:51.276 A:middle
It will be periodically called

00:31:51.686 --> 00:31:53.506 A:middle
with a status update on the

00:31:53.506 --> 00:31:56.316 A:middle
proximity of your beacons, and

00:31:56.316 --> 00:31:57.466 A:middle
you will receive a list of

00:31:57.466 --> 00:31:59.446 A:middle
beacons already categorized by

00:31:59.446 --> 00:32:00.256 A:middle
proximity.

00:31:59.446 --> 00:32:00.256 A:middle
proximity.

00:32:00.256 --> 00:32:03.256 A:middle
So, it's very easy to know which

00:32:03.256 --> 00:32:05.146 A:middle
one is the closest beacon and

00:32:05.146 --> 00:32:06.026 A:middle
act accordingly.

00:32:08.776 --> 00:32:11.006 A:middle
So we have seen what do we need

00:32:11.006 --> 00:32:13.196 A:middle
to do while our app is being

00:32:13.196 --> 00:32:16.506 A:middle
used, but as I said, we might

00:32:16.506 --> 00:32:17.976 A:middle
want to engage the visitor when

00:32:17.976 --> 00:32:18.946 A:middle
he arrives to the museum.

00:32:18.946 --> 00:32:20.386 A:middle
Most likely, they downloaded our

00:32:20.386 --> 00:32:21.886 A:middle
application the day before or a

00:32:21.886 --> 00:32:22.746 A:middle
few days earlier.

00:32:23.796 --> 00:32:25.516 A:middle
So we might want to remind him

00:32:25.606 --> 00:32:27.196 A:middle
to launch our application while

00:32:27.196 --> 00:32:28.396 A:middle
he is inside the museum.

00:32:28.926 --> 00:32:30.646 A:middle
We are going to use user local

00:32:30.646 --> 00:32:33.056 A:middle
notification for that, which is

00:32:33.156 --> 00:32:34.856 A:middle
triggered by the location.

00:32:38.176 --> 00:32:39.586 A:middle
So, we will need to create an

00:32:39.586 --> 00:32:41.366 A:middle
actual geographical region by

00:32:41.366 --> 00:32:42.856 A:middle
providing the geographical

00:32:42.856 --> 00:32:44.316 A:middle
coordinates of our museum.

00:32:46.646 --> 00:32:49.316 A:middle
Then, I actually declare that

00:32:49.316 --> 00:32:51.066 A:middle
I'm interested only in arrivals.

00:32:51.066 --> 00:32:53.506 A:middle
You might want to register your

00:32:53.506 --> 00:32:55.076 A:middle
notification also for departures

00:32:55.076 --> 00:32:56.526 A:middle
if you want to take any action

00:32:56.526 --> 00:32:58.016 A:middle
in that case.

00:32:58.346 --> 00:32:59.936 A:middle
And then we use the user

00:32:59.936 --> 00:33:03.176 A:middle
notification API to register our

00:32:59.936 --> 00:33:03.176 A:middle
notification API to register our

00:33:03.176 --> 00:33:04.066 A:middle
local notification.

00:33:08.286 --> 00:33:09.386 A:middle
Okay, so this is all.

00:33:10.696 --> 00:33:13.036 A:middle
We had a brief refresher about

00:33:13.036 --> 00:33:14.206 A:middle
what is beacon ranging.

00:33:14.206 --> 00:33:16.196 A:middle
We have seen what change in iOS

00:33:16.246 --> 00:33:19.156 A:middle
13 in the beacon ranging API and

00:33:19.156 --> 00:33:21.306 A:middle
a simple example on how to

00:33:21.306 --> 00:33:23.106 A:middle
provide a great location aware

00:33:23.106 --> 00:33:25.066 A:middle
experience by using beacon

00:33:25.066 --> 00:33:26.976 A:middle
ranging only when in use

00:33:26.976 --> 00:33:27.756 A:middle
authorization.

00:33:28.266 --> 00:33:29.936 A:middle
And now, back to my colleague,

00:33:29.936 --> 00:33:31.626 A:middle
Adam, for a final summary.

00:33:32.516 --> 00:33:39.256 A:middle
[ Applause ]

00:33:39.756 --> 00:33:40.566 A:middle
&gt;&gt; Thanks Andre.

00:33:41.026 --> 00:33:43.136 A:middle
So, what are the three things

00:33:43.136 --> 00:33:44.776 A:middle
that we need to think about?

00:33:45.596 --> 00:33:49.226 A:middle
First is location authorization

00:33:49.226 --> 00:33:49.946 A:middle
has changed.

00:33:50.296 --> 00:33:51.466 A:middle
It works in some new ways.

00:33:51.586 --> 00:33:52.696 A:middle
We hope that it will actually

00:33:52.696 --> 00:33:54.136 A:middle
really fit your app better and

00:33:54.136 --> 00:33:55.156 A:middle
help you to increase the

00:33:55.156 --> 00:33:57.026 A:middle
confidence that users have in

00:33:57.026 --> 00:33:58.986 A:middle
interacting with your app by

00:33:58.986 --> 00:33:59.966 A:middle
letting them know that their

00:34:00.116 --> 00:34:02.146 A:middle
privacy is being carefully

00:34:02.146 --> 00:34:02.476 A:middle
guarded.

00:34:04.126 --> 00:34:05.056 A:middle
That means there is a call to

00:34:05.056 --> 00:34:07.106 A:middle
action here to test, test your

00:34:07.106 --> 00:34:07.356 A:middle
app.

00:34:08.065 --> 00:34:09.545 A:middle
Try living on it with granting

00:34:09.545 --> 00:34:11.206 A:middle
only temporary authorization,

00:34:11.286 --> 00:34:12.136 A:middle
temporary when in use

00:34:12.136 --> 00:34:12.835 A:middle
authorization.

00:34:12.976 --> 00:34:13.646 A:middle
Does it work?

00:34:14.436 --> 00:34:15.326 A:middle
Is it irritating?

00:34:16.005 --> 00:34:17.295 A:middle
What could you do to improve

00:34:17.576 --> 00:34:19.376 A:middle
this experience for your users

00:34:19.376 --> 00:34:20.306 A:middle
so that they don't have to

00:34:20.306 --> 00:34:22.606 A:middle
decide to grant or deny your app

00:34:22.916 --> 00:34:24.126 A:middle
permanent authorization to

00:34:24.126 --> 00:34:25.466 A:middle
access their location before

00:34:25.466 --> 00:34:25.976 A:middle
they're ready?

00:34:26.516 --> 00:34:29.446 A:middle
And then, in the spirit of

00:34:29.485 --> 00:34:32.116 A:middle
testing, ranging has a new way

00:34:32.116 --> 00:34:33.896 A:middle
to help make you, help you make

00:34:34.206 --> 00:34:35.795 A:middle
location-related experiences

00:34:35.795 --> 00:34:37.516 A:middle
that are really great, and we

00:34:37.516 --> 00:34:40.496 A:middle
have a sample in the toolkit

00:34:40.596 --> 00:34:42.456 A:middle
today, which is really great for

00:34:42.456 --> 00:34:44.246 A:middle
the new ranging, exploring the

00:34:44.246 --> 00:34:45.396 A:middle
new ranging APIs.

00:34:45.716 --> 00:34:47.246 A:middle
Very minimal, just what you need

00:34:47.246 --> 00:34:48.000 A:middle
to know.

00:34:51.106 --> 00:34:52.946 A:middle
So, if you have questions, we

00:34:52.946 --> 00:34:54.186 A:middle
have two labs this week.

00:34:54.255 --> 00:34:57.466 A:middle
One is in an hour or something.

00:34:57.466 --> 00:34:58.426 A:middle
I don't know what time it is.

00:34:58.426 --> 00:35:01.076 A:middle
There's 11:00 to 1:00 today, and

00:34:58.426 --> 00:35:01.076 A:middle
There's 11:00 to 1:00 today, and

00:35:01.076 --> 00:35:02.806 A:middle
the other one is 1:00 to 3:00

00:35:02.806 --> 00:35:03.000 A:middle
tomorrow.

00:35:04.476 --> 00:35:05.666 A:middle
And you've already about

00:35:05.666 --> 00:35:06.816 A:middle
temporary authorization in the

00:35:06.816 --> 00:35:08.686 A:middle
keynote, and in the state of the

00:35:08.686 --> 00:35:10.326 A:middle
union, and now this is the third

00:35:10.376 --> 00:35:11.356 A:middle
time, so if you'd like to hear

00:35:11.356 --> 00:35:12.326 A:middle
it a fourth time, they're going

00:35:12.326 --> 00:35:13.716 A:middle
to cover it in designing for

00:35:13.716 --> 00:35:16.166 A:middle
privacy today at 2:00.

00:35:16.316 --> 00:35:17.606 A:middle
There's also, in the rest of the

00:35:17.606 --> 00:35:19.186 A:middle
week, a couple of mapping

00:35:19.186 --> 00:35:21.906 A:middle
related talks, both indoor and

00:35:21.906 --> 00:35:23.106 A:middle
outdoor that pair really well

00:35:23.106 --> 00:35:24.626 A:middle
with Core Location, but they

00:35:24.626 --> 00:35:25.926 A:middle
don't fit on this slide.

00:35:26.306 --> 00:35:27.846 A:middle
So, the most important thing is,

00:35:27.876 --> 00:35:29.156 A:middle
enjoy your time here the rest of

00:35:29.156 --> 00:35:32.176 A:middle
the week in WWDC19, and we look

00:35:32.176 --> 00:35:33.636 A:middle
forward to seeing you in the

00:35:33.636 --> 00:35:33.976 A:middle
labs.

00:35:34.516 --> 00:35:39.500 A:middle
[ Applause ]
