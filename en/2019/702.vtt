WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:12.616 A:middle
[ Applause ]

00:00:13.116 --> 00:00:14.076 A:middle
&gt;&gt; My name is Joe.

00:00:14.076 --> 00:00:15.666 A:middle
And later, I'll be joined by my

00:00:15.666 --> 00:00:17.276 A:middle
colleagues Simon and Scott.

00:00:17.696 --> 00:00:19.766 A:middle
We're from the Core OS Group and

00:00:19.766 --> 00:00:21.246 A:middle
we'd like to tell you about some

00:00:21.296 --> 00:00:22.816 A:middle
new developments with Kernel

00:00:22.816 --> 00:00:25.526 A:middle
Extensions in macOS 10.15

00:00:25.526 --> 00:00:26.046 A:middle
Catalina.

00:00:28.276 --> 00:00:31.266 A:middle
Kernel Extensions or Kexts, are

00:00:31.266 --> 00:00:32.896 A:middle
a technology that's been part of

00:00:32.896 --> 00:00:34.786 A:middle
macOS from the very beginning.

00:00:36.046 --> 00:00:37.796 A:middle
Using Kexts, you can build

00:00:37.846 --> 00:00:39.846 A:middle
powerful and innovative apps

00:00:40.246 --> 00:00:41.656 A:middle
that extend the built-in

00:00:41.656 --> 00:00:43.446 A:middle
functionality of the operating

00:00:43.446 --> 00:00:43.816 A:middle
system.

00:00:44.406 --> 00:00:47.386 A:middle
This power to extend the system

00:00:47.836 --> 00:00:49.556 A:middle
is an important part of what

00:00:49.556 --> 00:00:51.246 A:middle
makes the Mac the Mac.

00:00:51.806 --> 00:00:54.866 A:middle
But there are some problems with

00:00:54.866 --> 00:00:55.926 A:middle
Kernel Extensions.

00:00:57.326 --> 00:00:59.166 A:middle
They can be difficult to develop

00:00:59.166 --> 00:01:02.406 A:middle
and to debug, they can be a risk

00:00:59.166 --> 00:01:02.406 A:middle
and to debug, they can be a risk

00:01:02.456 --> 00:01:04.846 A:middle
to security and privacy on the

00:01:04.846 --> 00:01:07.086 A:middle
machine, and they can be a risk

00:01:07.086 --> 00:01:08.216 A:middle
to the reliability of the

00:01:08.216 --> 00:01:08.676 A:middle
system.

00:01:09.756 --> 00:01:11.356 A:middle
It's time for an upgrade.

00:01:12.816 --> 00:01:15.076 A:middle
MacOS Catalina introduces two

00:01:15.076 --> 00:01:17.066 A:middle
new technologies called System

00:01:17.066 --> 00:01:18.916 A:middle
Extensions and DriverKit.

00:01:20.106 --> 00:01:22.566 A:middle
Using them, your apps can extend

00:01:22.736 --> 00:01:24.486 A:middle
the operating system in ways

00:01:24.486 --> 00:01:26.656 A:middle
that are more reliable, more

00:01:26.656 --> 00:01:29.436 A:middle
secure, and easier to develop

00:01:29.706 --> 00:01:30.536 A:middle
than ever before.

00:01:31.056 --> 00:01:34.516 A:middle
Here's what we'll talk about

00:01:34.516 --> 00:01:34.936 A:middle
today.

00:01:35.466 --> 00:01:37.136 A:middle
First, I'll introduce these new

00:01:37.136 --> 00:01:40.196 A:middle
technologies and show you how

00:01:40.196 --> 00:01:41.626 A:middle
they avoid the problems of

00:01:41.666 --> 00:01:42.676 A:middle
Kernel Extensions.

00:01:43.896 --> 00:01:46.166 A:middle
Then, Simon will come up and

00:01:46.166 --> 00:01:47.586 A:middle
show us how to build Driver

00:01:47.586 --> 00:01:49.366 A:middle
Extensions using DriverKit.

00:01:51.056 --> 00:01:53.176 A:middle
Scott will show us how to write

00:01:53.236 --> 00:01:55.526 A:middle
and debug a simple USB driver.

00:01:57.016 --> 00:01:58.346 A:middle
And then, I'll tell you how to

00:01:58.346 --> 00:01:59.946 A:middle
include System Extensions in

00:01:59.946 --> 00:02:02.166 A:middle
your apps.

00:01:59.946 --> 00:02:02.166 A:middle
your apps.

00:02:02.166 --> 00:02:04.576 A:middle
Let's get started.

00:02:04.656 --> 00:02:07.466 A:middle
System Extensions are our first

00:02:07.466 --> 00:02:08.895 A:middle
new technology in macOS

00:02:08.946 --> 00:02:09.425 A:middle
Catalina.

00:02:10.126 --> 00:02:12.686 A:middle
A System Extension is part of

00:02:12.686 --> 00:02:14.326 A:middle
your app that extends the

00:02:14.326 --> 00:02:15.926 A:middle
functionality of the operating

00:02:15.926 --> 00:02:18.176 A:middle
system in ways similar to a

00:02:18.176 --> 00:02:20.176 A:middle
Kernel Extension but running in

00:02:20.176 --> 00:02:22.456 A:middle
user space outside the kernel.

00:02:24.376 --> 00:02:26.256 A:middle
There are three kinds of System

00:02:26.256 --> 00:02:27.696 A:middle
Extensions that you can build in

00:02:27.696 --> 00:02:28.266 A:middle
Catalina.

00:02:28.956 --> 00:02:30.656 A:middle
They are Network Extensions,

00:02:31.246 --> 00:02:33.696 A:middle
Driver Extensions, and Endpoint

00:02:33.696 --> 00:02:34.936 A:middle
Security Extensions.

00:02:36.826 --> 00:02:38.136 A:middle
Network Extensions are a

00:02:38.136 --> 00:02:40.176 A:middle
replacement for Network Kernel

00:02:40.176 --> 00:02:40.956 A:middle
Extensions.

00:02:42.616 --> 00:02:44.316 A:middle
They can filter and reroute

00:02:44.316 --> 00:02:46.706 A:middle
network traffic or connect to a

00:02:47.246 --> 00:02:47.330 A:middle
VPN.

00:02:48.516 --> 00:02:50.026 A:middle
For more information on Network

00:02:50.026 --> 00:02:51.866 A:middle
Extensions, there's a session

00:02:51.866 --> 00:02:53.306 A:middle
dedicated to them on Friday

00:02:53.306 --> 00:02:53.726 A:middle
morning.

00:02:56.596 --> 00:02:59.446 A:middle
Endpoint Security Extensions are

00:02:59.446 --> 00:03:01.656 A:middle
a replacement for Kexts that

00:02:59.446 --> 00:03:01.656 A:middle
a replacement for Kexts that

00:03:01.846 --> 00:03:03.066 A:middle
intercept and monitor

00:03:03.066 --> 00:03:05.346 A:middle
security-related events with the

00:03:05.346 --> 00:03:06.636 A:middle
KAUTH interfaces.

00:03:07.616 --> 00:03:08.836 A:middle
Some of the apps you can build

00:03:08.836 --> 00:03:10.866 A:middle
this way are Endpoint Detection

00:03:10.866 --> 00:03:12.306 A:middle
and Response and Data Loss

00:03:12.306 --> 00:03:13.306 A:middle
Prevention apps.

00:03:14.406 --> 00:03:15.706 A:middle
If you're interested in Endpoint

00:03:15.706 --> 00:03:17.456 A:middle
Security Extensions, please,

00:03:17.456 --> 00:03:18.956 A:middle
come to the Security Labs.

00:03:19.476 --> 00:03:20.966 A:middle
There's one happening right now

00:03:20.966 --> 00:03:22.566 A:middle
and continuing after this talk

00:03:23.056 --> 00:03:24.696 A:middle
and one on Thursday afternoon.

00:03:25.276 --> 00:03:29.796 A:middle
The third type of extension is

00:03:29.796 --> 00:03:31.826 A:middle
Driver Extensions which are a

00:03:31.826 --> 00:03:33.526 A:middle
replacement for Device Driver

00:03:33.526 --> 00:03:34.856 A:middle
Kexts using IOKit.

00:03:35.576 --> 00:03:38.326 A:middle
In Catalina, you can control

00:03:38.446 --> 00:03:41.396 A:middle
USB, Serial, Network Interface,

00:03:41.526 --> 00:03:43.206 A:middle
and Human Interface devices.

00:03:45.056 --> 00:03:47.146 A:middle
Driver Extensions are built with

00:03:47.186 --> 00:03:49.196 A:middle
DriverKit which is our second

00:03:49.196 --> 00:03:51.146 A:middle
new technology in Catalina.

00:03:52.566 --> 00:03:56.636 A:middle
DriverKit is a new SDK with all

00:03:56.636 --> 00:03:59.896 A:middle
new frameworks based on IOKit

00:03:59.976 --> 00:04:01.726 A:middle
but updated and modernized,

00:03:59.976 --> 00:04:01.726 A:middle
but updated and modernized,

00:04:03.106 --> 00:04:04.566 A:middle
designed for building Driver

00:04:04.566 --> 00:04:07.256 A:middle
Extensions in user space outside

00:04:07.256 --> 00:04:07.836 A:middle
the kernel.

00:04:08.446 --> 00:04:11.386 A:middle
Now, that we've met these new

00:04:11.386 --> 00:04:15.056 A:middle
technologies let's see how they

00:04:15.056 --> 00:04:16.716 A:middle
avoid the problems of Kernel

00:04:16.716 --> 00:04:17.396 A:middle
Extensions.

00:04:19.036 --> 00:04:20.826 A:middle
There's a phrase I used in both

00:04:20.826 --> 00:04:23.046 A:middle
of those definitions; in user

00:04:23.046 --> 00:04:24.946 A:middle
space, outside the kernel.

00:04:26.016 --> 00:04:27.046 A:middle
Why does this matter?

00:04:28.386 --> 00:04:30.136 A:middle
The kernel is a very unforgiving

00:04:30.136 --> 00:04:31.896 A:middle
and difficult environment to

00:04:31.896 --> 00:04:32.806 A:middle
program within.

00:04:33.286 --> 00:04:36.816 A:middle
The kernel is the conductor of

00:04:36.926 --> 00:04:38.146 A:middle
everything that happens on the

00:04:38.146 --> 00:04:40.946 A:middle
machine, so it must never stop

00:04:40.946 --> 00:04:43.016 A:middle
running, must never wait for

00:04:43.016 --> 00:04:44.466 A:middle
anything to happen, and must

00:04:44.466 --> 00:04:45.386 A:middle
never crash.

00:04:46.776 --> 00:04:49.216 A:middle
Code in the kernel has to be

00:04:49.216 --> 00:04:53.186 A:middle
fast, has to be predictable, has

00:04:53.186 --> 00:04:54.626 A:middle
to be frugal with its use of

00:04:54.626 --> 00:04:56.706 A:middle
resources like memory, and has

00:04:56.706 --> 00:04:58.116 A:middle
to be essentially bug-free.

00:04:59.316 --> 00:05:00.796 A:middle
It's very difficult to write

00:04:59.316 --> 00:05:00.796 A:middle
It's very difficult to write

00:05:00.856 --> 00:05:02.526 A:middle
code that meets all of these

00:05:02.576 --> 00:05:03.256 A:middle
restrictions.

00:05:05.236 --> 00:05:07.326 A:middle
System Extensions run in user

00:05:07.326 --> 00:05:09.516 A:middle
space outside the kernel which

00:05:09.516 --> 00:05:11.246 A:middle
means they run in a comfortable

00:05:11.246 --> 00:05:13.046 A:middle
modern programming environment.

00:05:14.516 --> 00:05:16.596 A:middle
This makes them easier to

00:05:16.596 --> 00:05:19.606 A:middle
develop than Kexts where kernel

00:05:19.606 --> 00:05:21.816 A:middle
code has restrictions on when

00:05:21.816 --> 00:05:23.556 A:middle
and how it can allocate memory

00:05:23.556 --> 00:05:25.186 A:middle
or synchronize between threads.

00:05:26.326 --> 00:05:27.736 A:middle
This means it cannot use most

00:05:27.736 --> 00:05:29.526 A:middle
system frameworks such as

00:05:29.526 --> 00:05:31.106 A:middle
Foundation since they are not

00:05:31.106 --> 00:05:32.106 A:middle
designed to run in this

00:05:32.106 --> 00:05:32.656 A:middle
environment.

00:05:33.946 --> 00:05:35.416 A:middle
The only supported language for

00:05:35.416 --> 00:05:38.526 A:middle
Kext development is C and C++.

00:05:39.906 --> 00:05:41.536 A:middle
System Extensions, on the other

00:05:41.536 --> 00:05:43.456 A:middle
hand, have no such restrictions

00:05:44.006 --> 00:05:45.206 A:middle
which means they can be built

00:05:45.566 --> 00:05:49.006 A:middle
using any framework in the macOS

00:05:49.416 --> 00:05:49.506 A:middle
SDK

00:05:50.026 --> 00:05:51.496 A:middle
and can be written in any

00:05:51.496 --> 00:05:53.056 A:middle
language including Swift.

00:05:54.516 --> 00:05:58.446 A:middle
[ Applause ]

00:05:58.946 --> 00:06:00.266 A:middle
There is one exception to this.

00:05:58.946 --> 00:06:00.266 A:middle
There is one exception to this.

00:06:00.926 --> 00:06:02.706 A:middle
Driver Extensions, because of

00:06:02.706 --> 00:06:04.046 A:middle
their close relationship with

00:06:04.076 --> 00:06:06.106 A:middle
hardware, still have some

00:06:06.106 --> 00:06:06.866 A:middle
restrictions.

00:06:08.026 --> 00:06:09.386 A:middle
They must use the DriverKit

00:06:09.386 --> 00:06:11.526 A:middle
frameworks and run in a tailored

00:06:11.526 --> 00:06:13.476 A:middle
runtime which isolates them from

00:06:13.576 --> 00:06:16.026 A:middle
the rest of the system.

00:06:16.216 --> 00:06:18.356 A:middle
Driver Extensions must be

00:06:18.356 --> 00:06:20.126 A:middle
written in C or C++.

00:06:20.206 --> 00:06:22.736 A:middle
However, the default is C++17.

00:06:23.516 --> 00:06:27.586 A:middle
[ Applause ]

00:06:28.086 --> 00:06:29.436 A:middle
System Extensions are also

00:06:29.436 --> 00:06:31.086 A:middle
easier to debug than Kernel

00:06:31.086 --> 00:06:31.796 A:middle
Extensions.

00:06:32.716 --> 00:06:34.326 A:middle
Attaching a debugger to the

00:06:34.326 --> 00:06:36.296 A:middle
kernel halts the kernel and the

00:06:36.296 --> 00:06:38.676 A:middle
entire machine including the

00:06:38.676 --> 00:06:39.166 A:middle
debugger.

00:06:40.126 --> 00:06:41.456 A:middle
This means you usually need a

00:06:41.456 --> 00:06:43.616 A:middle
second machine to debug and you

00:06:43.616 --> 00:06:44.886 A:middle
may need special cables or

00:06:44.886 --> 00:06:46.566 A:middle
network configuration to connect

00:06:46.566 --> 00:06:47.286 A:middle
the machines.

00:06:47.816 --> 00:06:50.756 A:middle
The cycle of building, testing,

00:06:50.926 --> 00:06:53.376 A:middle
and debugging a Kext can be slow

00:06:53.496 --> 00:06:55.146 A:middle
because any crash in the Kext

00:06:55.146 --> 00:06:56.556 A:middle
means the whole system has to

00:06:56.556 --> 00:06:57.006 A:middle
restart.

00:06:57.656 --> 00:07:00.716 A:middle
And the kernel debugger has

00:06:57.656 --> 00:07:00.716 A:middle
And the kernel debugger has

00:07:00.716 --> 00:07:01.646 A:middle
limited support.

00:07:01.976 --> 00:07:02.956 A:middle
It cannot do things like

00:07:02.956 --> 00:07:04.646 A:middle
evaluate expressions or print

00:07:04.646 --> 00:07:05.906 A:middle
the value of objects.

00:07:06.346 --> 00:07:09.686 A:middle
System Extensions, on the other

00:07:09.686 --> 00:07:13.946 A:middle
hand, can be debugged and the

00:07:14.196 --> 00:07:15.396 A:middle
kernel keeps running.

00:07:16.966 --> 00:07:18.526 A:middle
There's no need to restart if an

00:07:18.526 --> 00:07:19.706 A:middle
extension crashes.

00:07:20.836 --> 00:07:22.796 A:middle
You can build, test, and debug

00:07:23.016 --> 00:07:25.196 A:middle
all on one machine with full

00:07:25.196 --> 00:07:25.966 A:middle
debugger support.

00:07:26.556 --> 00:07:30.246 A:middle
But the biggest improvements of

00:07:30.246 --> 00:07:32.246 A:middle
System Extensions over Kernel

00:07:32.246 --> 00:07:34.406 A:middle
Extensions are in the areas of

00:07:34.406 --> 00:07:36.646 A:middle
security, privacy, and

00:07:36.646 --> 00:07:37.316 A:middle
reliability.

00:07:37.936 --> 00:07:42.436 A:middle
The kernel has many jobs, but

00:07:42.436 --> 00:07:44.196 A:middle
one of the most important is to

00:07:44.196 --> 00:07:46.746 A:middle
define and enforce the rules of

00:07:46.746 --> 00:07:48.276 A:middle
the system's Security Policy.

00:07:49.266 --> 00:07:51.186 A:middle
The kernel separates apps from

00:07:51.186 --> 00:07:52.806 A:middle
each other and from direct

00:07:52.806 --> 00:07:53.836 A:middle
access to hardware.

00:07:54.606 --> 00:07:56.126 A:middle
Then, it allows them to share

00:07:56.126 --> 00:07:57.816 A:middle
data and system services

00:07:58.036 --> 00:07:59.716 A:middle
following the rules of the

00:07:59.716 --> 00:08:00.706 A:middle
Security Policy.

00:07:59.716 --> 00:08:00.706 A:middle
Security Policy.

00:08:01.226 --> 00:08:04.436 A:middle
When a Kernel Extension loads,

00:08:04.846 --> 00:08:06.786 A:middle
it becomes part of the kernel.

00:08:07.896 --> 00:08:09.686 A:middle
It has access to everything on

00:08:09.686 --> 00:08:10.186 A:middle
the machine.

00:08:11.066 --> 00:08:12.666 A:middle
This is where a Kext's power

00:08:12.666 --> 00:08:13.186 A:middle
comes from.

00:08:13.686 --> 00:08:16.566 A:middle
But it can also be a danger.

00:08:16.716 --> 00:08:18.886 A:middle
Because the Kernel Extension is

00:08:18.886 --> 00:08:20.416 A:middle
part of the kernel which makes

00:08:20.416 --> 00:08:22.936 A:middle
the security rules, it is above

00:08:22.936 --> 00:08:23.686 A:middle
the rules.

00:08:24.256 --> 00:08:27.576 A:middle
If a Kext has a bug that allows

00:08:27.576 --> 00:08:30.396 A:middle
it to be compromised, it can

00:08:30.396 --> 00:08:32.116 A:middle
take over the entire machine

00:08:33.155 --> 00:08:34.576 A:middle
doing things its developers

00:08:34.576 --> 00:08:36.556 A:middle
never intended and its users

00:08:36.556 --> 00:08:37.176 A:middle
don't want.

00:08:37.916 --> 00:08:39.716 A:middle
There are no security rules that

00:08:39.716 --> 00:08:40.486 A:middle
can restrain it.

00:08:41.626 --> 00:08:43.166 A:middle
This means that any bug in a

00:08:43.166 --> 00:08:45.606 A:middle
Kext can be a critical security

00:08:45.606 --> 00:08:45.996 A:middle
problem.

00:08:46.546 --> 00:08:51.406 A:middle
Any bug in a Kext can also be a,

00:08:52.416 --> 00:08:55.226 A:middle
can also be a, what's happening?

00:08:55.226 --> 00:08:56.166 A:middle
Where are my slides?

00:08:57.376 --> 00:09:01.066 A:middle
Any bug in a Kext can also be a

00:08:57.376 --> 00:09:01.066 A:middle
Any bug in a Kext can also be a

00:09:01.066 --> 00:09:02.746 A:middle
critical reliability problem.

00:09:03.516 --> 00:09:05.596 A:middle
[ Applause ]

00:09:06.096 --> 00:09:08.116 A:middle
Because the kernel does not just

00:09:08.116 --> 00:09:09.956 A:middle
crash, it panics, and the entire

00:09:09.956 --> 00:09:11.236 A:middle
machine has to restart.

00:09:11.916 --> 00:09:13.846 A:middle
If you're a Kext developer,

00:09:13.846 --> 00:09:15.476 A:middle
you've surely seen this dialog a

00:09:15.476 --> 00:09:15.826 A:middle
lot.

00:09:15.976 --> 00:09:18.136 A:middle
And unfortunately, so have too

00:09:18.136 --> 00:09:19.186 A:middle
many of our users.

00:09:19.726 --> 00:09:22.166 A:middle
Let's see how the picture

00:09:22.166 --> 00:09:23.876 A:middle
changes with System Extensions.

00:09:25.136 --> 00:09:27.036 A:middle
A System Extension runs in

00:09:27.036 --> 00:09:27.776 A:middle
userspace.

00:09:28.386 --> 00:09:30.406 A:middle
Like other apps, it has to

00:09:30.406 --> 00:09:31.786 A:middle
follow the rules of the System

00:09:31.786 --> 00:09:32.796 A:middle
Security Policy.

00:09:33.746 --> 00:09:35.476 A:middle
Unlike other apps, System

00:09:35.476 --> 00:09:37.166 A:middle
Extensions are granted special

00:09:37.166 --> 00:09:39.106 A:middle
privileges to do special jobs.

00:09:40.126 --> 00:09:41.566 A:middle
For example, they may have

00:09:41.566 --> 00:09:42.726 A:middle
direct access to their

00:09:42.726 --> 00:09:44.786 A:middle
associated hardware devices or

00:09:44.786 --> 00:09:46.706 A:middle
use special APIs to communicate

00:09:46.706 --> 00:09:48.256 A:middle
directly with kernel systems.

00:09:49.706 --> 00:09:51.356 A:middle
If a System Extension crashes,

00:09:52.016 --> 00:09:53.636 A:middle
the rest of the system and apps

00:09:53.636 --> 00:09:58.736 A:middle
are unaffected and keep running.

00:09:58.966 --> 00:10:00.906 A:middle
For all these reasons, we think

00:09:58.966 --> 00:10:00.906 A:middle
For all these reasons, we think

00:10:00.906 --> 00:10:02.916 A:middle
that System Extensions are a big

00:10:02.916 --> 00:10:04.466 A:middle
step forward for the Mac

00:10:04.466 --> 00:10:04.976 A:middle
platform.

00:10:05.566 --> 00:10:08.216 A:middle
In fact, we think they're such

00:10:08.216 --> 00:10:09.906 A:middle
an improvement that we recommend

00:10:09.906 --> 00:10:11.426 A:middle
you adopt them immediately.

00:10:12.016 --> 00:10:14.726 A:middle
As Sebastian said in the State

00:10:14.726 --> 00:10:17.006 A:middle
of the Union yesterday, "We are

00:10:17.006 --> 00:10:18.526 A:middle
beginning the process of

00:10:18.556 --> 00:10:20.196 A:middle
deprecating Kernel Extensions.

00:10:20.926 --> 00:10:23.256 A:middle
MacOS 10.15 Catalina will be the

00:10:23.256 --> 00:10:25.446 A:middle
last release to fully support

00:10:25.446 --> 00:10:26.726 A:middle
Kernel Extensions without

00:10:26.726 --> 00:10:27.416 A:middle
compromises."

00:10:28.516 --> 00:10:32.036 A:middle
[ Applause ]

00:10:32.536 --> 00:10:33.946 A:middle
Specifically, for the

00:10:33.946 --> 00:10:35.876 A:middle
capabilities supported by System

00:10:35.876 --> 00:10:37.296 A:middle
Extensions and the device

00:10:37.296 --> 00:10:39.036 A:middle
families supported by DriverKit,

00:10:39.646 --> 00:10:41.246 A:middle
using a Kernel Extension to do

00:10:41.246 --> 00:10:43.506 A:middle
that same job is now deprecated

00:10:44.336 --> 00:10:46.026 A:middle
and a future release of macOS

00:10:46.026 --> 00:10:47.826 A:middle
will not load Kernel Extensions

00:10:47.826 --> 00:10:48.846 A:middle
of these kinds.

00:10:49.416 --> 00:10:53.326 A:middle
In future releases, we will add

00:10:53.326 --> 00:10:55.196 A:middle
more kinds of System Extensions

00:10:55.446 --> 00:10:56.776 A:middle
and more device families to

00:10:56.776 --> 00:10:57.406 A:middle
DriverKit.

00:10:58.576 --> 00:11:00.536 A:middle
In turn, Kernel Extensions of

00:10:58.576 --> 00:11:00.536 A:middle
In turn, Kernel Extensions of

00:11:00.536 --> 00:11:02.366 A:middle
those kinds will also be

00:11:02.366 --> 00:11:02.976 A:middle
deprecated.

00:11:07.046 --> 00:11:09.056 A:middle
So, that's a brief introduction

00:11:09.056 --> 00:11:10.356 A:middle
to System Extensions.

00:11:11.726 --> 00:11:13.566 A:middle
They avoid the difficulties of

00:11:13.566 --> 00:11:15.406 A:middle
kernel programming by running in

00:11:15.406 --> 00:11:17.336 A:middle
user space which lets your apps

00:11:17.336 --> 00:11:19.266 A:middle
extend the system in ways that

00:11:19.266 --> 00:11:22.176 A:middle
are easier to develop and debug,

00:11:22.866 --> 00:11:25.856 A:middle
that protect the security and

00:11:25.856 --> 00:11:28.766 A:middle
reliability of our users' data.

00:11:29.246 --> 00:11:32.666 A:middle
And now, I'd like to turn it

00:11:32.666 --> 00:11:34.136 A:middle
over to Simon, who will show you

00:11:34.136 --> 00:11:35.696 A:middle
how to build Driver Extensions

00:11:35.956 --> 00:11:37.606 A:middle
using the new DriverKit Runtime.

00:11:38.516 --> 00:11:44.546 A:middle
[ Applause ]

00:11:45.046 --> 00:11:46.986 A:middle
Well, thanks, Joe.

00:11:47.696 --> 00:11:50.006 A:middle
As Joe just said, a Driver

00:11:50.006 --> 00:11:51.276 A:middle
Extension is a new type of

00:11:51.276 --> 00:11:53.296 A:middle
System Extension that controls

00:11:53.296 --> 00:11:55.236 A:middle
the hardware device and makes

00:11:55.236 --> 00:11:56.616 A:middle
its services available across

00:11:56.616 --> 00:11:57.386 A:middle
the whole OS.

00:11:58.726 --> 00:11:59.676 A:middle
We call these new Driver

00:11:59.676 --> 00:12:01.346 A:middle
Extensions a Dext.

00:11:59.676 --> 00:12:01.346 A:middle
Extensions a Dext.

00:12:02.726 --> 00:12:03.726 A:middle
And our goal is to make the

00:12:03.726 --> 00:12:05.046 A:middle
transition from our Kernel

00:12:05.046 --> 00:12:07.066 A:middle
Extension to a Driver Extension

00:12:07.486 --> 00:12:08.496 A:middle
as easy as possible.

00:12:10.306 --> 00:12:11.286 A:middle
To show you how Driver

00:12:11.286 --> 00:12:12.826 A:middle
Extensions work and how you can

00:12:12.826 --> 00:12:14.356 A:middle
build your own or transition

00:12:14.356 --> 00:12:16.396 A:middle
from a Kext, we're going to talk

00:12:16.396 --> 00:12:17.000 A:middle
about four things.

00:12:19.736 --> 00:12:21.466 A:middle
We're going to talk about their

00:12:21.806 --> 00:12:22.126 A:middle
lifecycle

00:12:22.976 --> 00:12:25.000 A:middle
and how they match and start.

00:12:31.266 --> 00:12:32.766 A:middle
And how they compete with Kexts,

00:12:33.246 --> 00:12:34.616 A:middle
and we're going to talk about

00:12:34.616 --> 00:12:36.056 A:middle
how to build them with the new

00:12:36.056 --> 00:12:36.856 A:middle
DriverKit SDK.

00:12:36.856 --> 00:12:39.596 A:middle
And we're going to go over some

00:12:39.596 --> 00:12:40.856 A:middle
security features such as

00:12:40.856 --> 00:12:41.656 A:middle
entitlements.

00:12:42.206 --> 00:12:44.486 A:middle
And finally, we'll talk about

00:12:44.486 --> 00:12:45.816 A:middle
some compatibility questions

00:12:45.816 --> 00:12:47.146 A:middle
about how you can deploy an app

00:12:47.726 --> 00:12:49.546 A:middle
to macOS Catalina and Mojave.

00:12:55.596 --> 00:12:56.276 A:middle
So, let's talk about the

00:12:56.276 --> 00:12:57.526 A:middle
lifecycle of a Kext.

00:13:02.066 --> 00:13:03.186 A:middle
Let's look at the process that

00:13:03.186 --> 00:13:04.396 A:middle
happens when a device appears

00:13:04.396 --> 00:13:05.626 A:middle
that has a Driver Extension.

00:13:06.566 --> 00:13:07.956 A:middle
We start with IOKit Matching

00:13:07.956 --> 00:13:09.596 A:middle
creating a kernel service to

00:13:09.596 --> 00:13:10.746 A:middle
represent your service.

00:13:11.406 --> 00:13:12.386 A:middle
This is written by Apple.

00:13:13.076 --> 00:13:17.856 A:middle
We then start a process hosting

00:13:17.856 --> 00:13:19.236 A:middle
your driver with your DriverKit

00:13:19.236 --> 00:13:20.266 A:middle
class instantiated.

00:13:20.876 --> 00:13:23.936 A:middle
And the process also as proxy

00:13:23.936 --> 00:13:26.896 A:middle
objects for any services it uses

00:13:27.116 --> 00:13:28.096 A:middle
such as its provider.

00:13:29.446 --> 00:13:31.476 A:middle
This device is using a USB

00:13:31.476 --> 00:13:32.636 A:middle
device or device.

00:13:33.136 --> 00:13:34.776 A:middle
This, this device is using a USB

00:13:34.776 --> 00:13:36.846 A:middle
device so it has a proxy object

00:13:36.846 --> 00:13:37.876 A:middle
to call that represents the

00:13:37.876 --> 00:13:38.706 A:middle
kernel device.

00:13:39.246 --> 00:13:41.796 A:middle
This means that DriverKit

00:13:42.306 --> 00:13:43.866 A:middle
drivers appears to Kernel

00:13:43.866 --> 00:13:45.876 A:middle
Extensions and can compete in

00:13:45.876 --> 00:13:47.286 A:middle
matching with kernel drivers.

00:13:47.956 --> 00:13:50.126 A:middle
You can see them in the registry

00:13:50.496 --> 00:13:52.186 A:middle
with tools like IOReg and you

00:13:52.186 --> 00:13:54.286 A:middle
can use the IOKit Framework APIs

00:13:54.966 --> 00:13:56.986 A:middle
with them.

00:13:57.186 --> 00:13:58.966 A:middle
Since DriverKit drivers are

00:13:58.966 --> 00:14:00.566 A:middle
separated from the kernel and

00:13:58.966 --> 00:14:00.566 A:middle
separated from the kernel and

00:14:00.566 --> 00:14:02.606 A:middle
from each other, another device

00:14:02.606 --> 00:14:03.946 A:middle
will have its own process and

00:14:03.946 --> 00:14:08.256 A:middle
another instance of the driver.

00:14:08.416 --> 00:14:11.326 A:middle
In macOS Catalina, Apple has

00:14:11.326 --> 00:14:12.596 A:middle
started to move several of its

00:14:12.596 --> 00:14:13.696 A:middle
own drivers to Driver

00:14:13.696 --> 00:14:14.256 A:middle
Extensions.

00:14:15.566 --> 00:14:16.886 A:middle
Here, you can see a process that

00:14:16.886 --> 00:14:18.526 A:middle
is hosting a USB networking

00:14:18.526 --> 00:14:21.006 A:middle
device which is visible in the

00:14:21.006 --> 00:14:22.736 A:middle
registry as a normal ethernet

00:14:22.736 --> 00:14:26.896 A:middle
device to the rest of the OS.

00:14:26.896 --> 00:14:27.966 A:middle
And you can also see some other

00:14:27.966 --> 00:14:29.366 A:middle
processes in the registry

00:14:29.926 --> 00:14:31.516 A:middle
hosting several HID and serial

00:14:31.516 --> 00:14:31.936 A:middle
drivers.

00:14:31.936 --> 00:14:35.806 A:middle
So, now we're going to talk

00:14:35.806 --> 00:14:36.896 A:middle
about building your Driver

00:14:36.896 --> 00:14:39.206 A:middle
Extension with the DriverKit

00:14:39.916 --> 00:14:40.006 A:middle
SDK.

00:14:42.056 --> 00:14:43.456 A:middle
We wanted to make building

00:14:43.456 --> 00:14:44.756 A:middle
Driver Extensions an easy

00:14:44.756 --> 00:14:46.136 A:middle
transition for those of you who

00:14:46.136 --> 00:14:47.866 A:middle
currently build Kexts so we

00:14:48.276 --> 00:14:50.396 A:middle
started with the IOKit C++ APIs

00:14:50.396 --> 00:14:52.406 A:middle
that you are familiar with.

00:14:53.556 --> 00:14:55.206 A:middle
The DriverKit APIs are an

00:14:55.206 --> 00:14:57.036 A:middle
extension of the IOKit APIs to

00:14:57.036 --> 00:14:57.816 A:middle
userspace.

00:14:58.366 --> 00:14:59.436 A:middle
And we have collected them into

00:14:59.436 --> 00:15:01.496 A:middle
a new DriverKit SDK that is

00:14:59.436 --> 00:15:01.496 A:middle
a new DriverKit SDK that is

00:15:01.496 --> 00:15:04.916 A:middle
separate to the macOS SDK.

00:15:05.166 --> 00:15:07.456 A:middle
This SDK has a limited API

00:15:07.646 --> 00:15:09.186 A:middle
surface for reliability and

00:15:09.186 --> 00:15:12.036 A:middle
security and there is no direct

00:15:12.036 --> 00:15:13.536 A:middle
access to the file system,

00:15:14.086 --> 00:15:15.536 A:middle
networking, or mock messaging.

00:15:16.166 --> 00:15:19.306 A:middle
This allows Apple to tailor the

00:15:19.306 --> 00:15:21.066 A:middle
userspace process to running

00:15:21.066 --> 00:15:24.666 A:middle
drivers and can give it elevated

00:15:24.666 --> 00:15:25.726 A:middle
priority and increased

00:15:25.726 --> 00:15:26.306 A:middle
capabilities.

00:15:27.026 --> 00:15:30.006 A:middle
So, let's talk about some of the

00:15:30.006 --> 00:15:31.536 A:middle
classes in the DriverKit SDK.

00:15:32.326 --> 00:15:35.686 A:middle
First, the IOService class

00:15:35.686 --> 00:15:37.146 A:middle
exists in DriverKit and is very

00:15:37.146 --> 00:15:40.736 A:middle
similar to the IOKit class.

00:15:40.916 --> 00:15:42.706 A:middle
There also IOMemoryDescriptor

00:15:42.706 --> 00:15:44.056 A:middle
and IOBufferMemoryDescriptor

00:15:44.056 --> 00:15:45.356 A:middle
classes available that are,

00:15:45.356 --> 00:15:49.556 A:middle
again, very similar to IOKit.

00:15:49.656 --> 00:15:50.886 A:middle
We also have replacements for

00:15:50.886 --> 00:15:52.286 A:middle
the IOWorkLoop and EventSource

00:15:52.286 --> 00:15:53.376 A:middle
classes in IOKit.

00:15:54.176 --> 00:15:57.546 A:middle
And finally, there's a new class

00:15:57.546 --> 00:15:59.746 A:middle
called OSAction that is required

00:15:59.746 --> 00:16:00.966 A:middle
to represent a C Function

00:15:59.746 --> 00:16:00.966 A:middle
to represent a C Function

00:16:00.966 --> 00:16:01.316 A:middle
Pointer.

00:16:04.716 --> 00:16:06.246 A:middle
So, let's take a look, closer

00:16:06.246 --> 00:16:11.396 A:middle
look at some of these classes.

00:16:11.466 --> 00:16:13.196 A:middle
The IOService class has the

00:16:13.196 --> 00:16:14.876 A:middle
lifecycle APIs from IOKit like

00:16:14.876 --> 00:16:16.186 A:middle
Start, Stop, and Terminate.

00:16:17.596 --> 00:16:22.096 A:middle
For synchronization, every

00:16:22.256 --> 00:16:23.846 A:middle
IOService has a default

00:16:23.846 --> 00:16:26.366 A:middle
DispatchQueue and all methods

00:16:26.366 --> 00:16:27.816 A:middle
are invoked on a queue including

00:16:27.816 --> 00:16:28.856 A:middle
interrupts, timers, and

00:16:28.856 --> 00:16:29.556 A:middle
completions.

00:16:30.876 --> 00:16:33.246 A:middle
IODispatchQueue is built on the

00:16:33.246 --> 00:16:34.136 A:middle
pre-run Grand Central

00:16:34.136 --> 00:16:36.286 A:middle
Dispatch code and is a special

00:16:36.286 --> 00:16:37.666 A:middle
version optimized for running in

00:16:37.666 --> 00:16:38.846 A:middle
the restricted DriverKit

00:16:38.846 --> 00:16:39.406 A:middle
environment.

00:16:40.876 --> 00:16:42.556 A:middle
Drivers do have control over

00:16:42.556 --> 00:16:44.746 A:middle
their queues and which methods

00:16:44.746 --> 00:16:46.266 A:middle
are invoked on which queues for

00:16:46.266 --> 00:16:47.086 A:middle
advanced use.

00:16:47.656 --> 00:16:52.336 A:middle
The event APIs are similar to

00:16:52.336 --> 00:16:53.776 A:middle
the IOWorkLoop model in IOKit

00:16:53.776 --> 00:16:56.286 A:middle
but are now based on the Grand

00:16:56.286 --> 00:17:00.136 A:middle
Central Dispatch APIs with

00:16:56.286 --> 00:17:00.136 A:middle
Central Dispatch APIs with

00:17:00.336 --> 00:17:01.876 A:middle
queues and dispatch sources for

00:17:01.876 --> 00:17:02.936 A:middle
interrupts and timers.

00:17:04.256 --> 00:17:05.935 A:middle
The block API is replaced by a

00:17:05.935 --> 00:17:09.056 A:middle
command gate and GCD provides

00:17:09.056 --> 00:17:10.866 A:middle
synchronization parameters that

00:17:10.866 --> 00:17:12.296 A:middle
are easy to use and very likely

00:17:12.296 --> 00:17:13.736 A:middle
familiar to you.

00:17:15.056 --> 00:17:16.146 A:middle
There is also an

00:17:16.146 --> 00:17:18.006 A:middle
IOSharedDataQueueDispatchSource

00:17:18.006 --> 00:17:19.806 A:middle
class that provides a shared

00:17:19.806 --> 00:17:23.425 A:middle
memory ring buffer for fast, for

00:17:23.425 --> 00:17:24.476 A:middle
low overhead message passing.

00:17:24.776 --> 00:17:28.556 A:middle
The last class we'll talk about

00:17:28.556 --> 00:17:31.636 A:middle
is OSAction which encapsulates

00:17:31.636 --> 00:17:32.906 A:middle
what would be a callback in the

00:17:32.906 --> 00:17:34.986 A:middle
IOKit APIs.

00:17:35.576 --> 00:17:38.196 A:middle
They are always asynchronous and

00:17:38.196 --> 00:17:39.686 A:middle
they hold the callback client's

00:17:39.686 --> 00:17:40.566 A:middle
state privately.

00:17:41.236 --> 00:17:43.806 A:middle
And they allow the callback to

00:17:43.806 --> 00:17:45.086 A:middle
be defined with arbitrary

00:17:45.086 --> 00:17:46.936 A:middle
arguments and with type checking

00:17:46.936 --> 00:17:48.166 A:middle
in compile and runtime.

00:17:48.806 --> 00:17:51.036 A:middle
So, there were some of the

00:17:51.036 --> 00:17:52.136 A:middle
classes in DriverKit.

00:17:52.366 --> 00:17:53.396 A:middle
Let's look at how we define

00:17:53.396 --> 00:17:55.046 A:middle
these classes which is a little

00:17:55.046 --> 00:17:56.726 A:middle
different from IOKit.

00:17:58.576 --> 00:17:59.996 A:middle
DriverKit interfaces are

00:17:59.996 --> 00:18:01.656 A:middle
described with a new file type

00:17:59.996 --> 00:18:01.656 A:middle
described with a new file type

00:18:01.656 --> 00:18:04.876 A:middle
with the .iig extension and they

00:18:04.876 --> 00:18:06.396 A:middle
are processed by a tool also

00:18:06.396 --> 00:18:08.000 A:middle
called IIG.

00:18:09.116 --> 00:18:11.376 A:middle
The IIG file is a class

00:18:11.376 --> 00:18:12.976 A:middle
definition that is compiled by

00:18:12.976 --> 00:18:15.086 A:middle
Clang and can import C and

00:18:15.086 --> 00:18:17.986 A:middle
C++ headers for common types and

00:18:17.986 --> 00:18:18.596 A:middle
structures.

00:18:19.166 --> 00:18:21.796 A:middle
But it does have some extra

00:18:21.796 --> 00:18:23.006 A:middle
attributes to its class and

00:18:23.006 --> 00:18:25.016 A:middle
method definitions that allow it

00:18:25.016 --> 00:18:27.396 A:middle
to be used, to be used for

00:18:27.396 --> 00:18:28.526 A:middle
calling from separate address

00:18:28.526 --> 00:18:29.046 A:middle
spaces.

00:18:29.516 --> 00:18:34.046 A:middle
Here, you can see a basic class

00:18:34.046 --> 00:18:35.346 A:middle
definition that looks mostly

00:18:35.346 --> 00:18:37.356 A:middle
normal but it has some extra

00:18:37.356 --> 00:18:39.296 A:middle
attributes such as kernel on the

00:18:39.296 --> 00:18:40.706 A:middle
class, which means the class is

00:18:40.706 --> 00:18:41.696 A:middle
defined in the kernel.

00:18:42.856 --> 00:18:44.146 A:middle
And local on some method

00:18:44.146 --> 00:18:45.846 A:middle
declarations which means the

00:18:45.846 --> 00:18:47.156 A:middle
method is implemented in a user

00:18:47.156 --> 00:18:47.576 A:middle
driver.

00:18:47.576 --> 00:18:51.646 A:middle
Some of the families that are

00:18:51.646 --> 00:18:54.006 A:middle
available in the macOS Catalina

00:18:54.006 --> 00:18:56.266 A:middle
developer preview today are

00:18:56.266 --> 00:18:57.826 A:middle
NetworkingDriverKit for creating

00:18:57.826 --> 00:18:58.836 A:middle
network interfaces.

00:19:00.276 --> 00:19:01.936 A:middle
HIDDriverKit for creating HID

00:19:01.936 --> 00:19:02.606 A:middle
devices,

00:19:04.836 --> 00:19:07.336 A:middle
USBSerialDriverKit to make a USB

00:19:07.476 --> 00:19:09.306 A:middle
serial device available to the

00:19:09.306 --> 00:19:12.756 A:middle
OS, and USB DriverKit to make

00:19:12.786 --> 00:19:14.486 A:middle
use of USB device providers in

00:19:14.486 --> 00:19:15.166 A:middle
your drivers.

00:19:17.326 --> 00:19:18.226 A:middle
Shortly, Scott will be

00:19:18.226 --> 00:19:20.016 A:middle
demonstrating what a USB device

00:19:20.536 --> 00:19:21.926 A:middle
support looks like with

00:19:21.926 --> 00:19:22.506 A:middle
USBDriverKit.

00:19:22.506 --> 00:19:26.456 A:middle
So, now we're going to talk

00:19:26.456 --> 00:19:28.376 A:middle
about some security aspects of

00:19:28.596 --> 00:19:30.186 A:middle
developing Driver Extensions.

00:19:30.866 --> 00:19:34.196 A:middle
There are a few types of driver,

00:19:34.276 --> 00:19:36.006 A:middle
of, of entitlement that your

00:19:36.006 --> 00:19:37.236 A:middle
Driver Extension will need to

00:19:37.236 --> 00:19:37.636 A:middle
obtain.

00:19:38.976 --> 00:19:40.346 A:middle
There's one for all Driver

00:19:40.346 --> 00:19:42.886 A:middle
Extensions and there's one to

00:19:42.886 --> 00:19:44.466 A:middle
take control of, of a device

00:19:44.466 --> 00:19:45.886 A:middle
called the transport entitlement

00:19:46.626 --> 00:19:47.826 A:middle
which is specific to the kind of

00:19:47.826 --> 00:19:48.376 A:middle
device.

00:19:48.926 --> 00:19:51.806 A:middle
And there is also a family

00:19:51.806 --> 00:19:53.206 A:middle
entitlement that is required to

00:19:53.206 --> 00:19:54.806 A:middle
make available a service into

00:19:54.806 --> 00:19:56.086 A:middle
the OS.

00:19:56.786 --> 00:19:58.256 A:middle
And Joe will talk later in this

00:19:58.296 --> 00:19:59.716 A:middle
session about code signing and

00:19:59.716 --> 00:20:00.776 A:middle
the approval process for

00:19:59.716 --> 00:20:00.776 A:middle
the approval process for

00:20:00.776 --> 00:20:01.976 A:middle
obtaining these entitlements.

00:20:02.716 --> 00:20:07.466 A:middle
Now, we'll have a quick word on

00:20:07.466 --> 00:20:08.686 A:middle
shipping products that work on

00:20:08.686 --> 00:20:10.276 A:middle
all versions of macOS.

00:20:11.866 --> 00:20:14.266 A:middle
Shipping a product for both

00:20:14.266 --> 00:20:15.806 A:middle
macOS Catalina and earlier

00:20:15.806 --> 00:20:17.756 A:middle
releases will require you to

00:20:17.756 --> 00:20:19.836 A:middle
install a Kernel Extension for

00:20:19.836 --> 00:20:21.806 A:middle
older releases but use the

00:20:21.806 --> 00:20:23.476 A:middle
System Extensions Framework and

00:20:23.476 --> 00:20:25.366 A:middle
provide a Driver Extension on

00:20:25.366 --> 00:20:26.356 A:middle
macOS Catalina.

00:20:27.026 --> 00:20:29.876 A:middle
So, now Scott will be

00:20:29.876 --> 00:20:31.256 A:middle
demonstrating how to make use of

00:20:31.256 --> 00:20:33.096 A:middle
the new USBDriverKit Framework.

00:20:34.096 --> 00:20:34.556 A:middle
Thanks, Scott.

00:20:35.516 --> 00:20:41.936 A:middle
[ Applause ]

00:20:42.436 --> 00:20:43.366 A:middle
&gt;&gt; Thanks, Simon.

00:20:43.686 --> 00:20:45.116 A:middle
So, today I'm going to show you

00:20:45.116 --> 00:20:47.396 A:middle
how to build a simple USB driver

00:20:47.396 --> 00:20:48.356 A:middle
that reads data from an

00:20:48.356 --> 00:20:50.156 A:middle
interrupt endpoint using the new

00:20:50.156 --> 00:20:52.016 A:middle
USBDriverKit Framework.

00:20:52.316 --> 00:20:53.786 A:middle
We'll briefly go over how to

00:20:53.786 --> 00:20:55.396 A:middle
create a new project in Xcode

00:20:55.396 --> 00:20:56.626 A:middle
using the DriverKit Template.

00:20:57.376 --> 00:20:58.636 A:middle
After that, we'll take a look at

00:20:58.636 --> 00:20:59.966 A:middle
a kernel class versus a

00:20:59.966 --> 00:21:00.916 A:middle
DriverKit class.

00:20:59.966 --> 00:21:00.916 A:middle
DriverKit class.

00:21:01.786 --> 00:21:02.816 A:middle
Then, next, I'll go into the

00:21:02.816 --> 00:21:04.176 A:middle
details of the implementation in

00:21:04.176 --> 00:21:04.966 A:middle
DriverKit.

00:21:05.326 --> 00:21:06.566 A:middle
And finally, I'll give a short

00:21:06.566 --> 00:21:08.056 A:middle
demonstration of the driver in

00:21:08.056 --> 00:21:09.326 A:middle
action and how you can debug

00:21:09.326 --> 00:21:10.676 A:middle
your Dext live with LLDB.

00:21:10.676 --> 00:21:15.776 A:middle
Creating a new DriverKit project

00:21:15.776 --> 00:21:17.556 A:middle
with Xcode is as simple as

00:21:17.556 --> 00:21:18.746 A:middle
selecting the proper template

00:21:18.746 --> 00:21:20.386 A:middle
during Xcode's new Project

00:21:20.386 --> 00:21:20.836 A:middle
Workflow.

00:21:21.516 --> 00:21:23.126 A:middle
Once completed, Xcode will have

00:21:23.126 --> 00:21:24.316 A:middle
autogenerated a few files to

00:21:24.316 --> 00:21:24.876 A:middle
help you begin.

00:21:25.416 --> 00:21:28.906 A:middle
The generated project includes

00:21:28.906 --> 00:21:29.956 A:middle
the standard files needed to

00:21:29.956 --> 00:21:30.896 A:middle
successfully build.

00:21:30.896 --> 00:21:33.316 A:middle
As with the Kernel Extension,

00:21:33.416 --> 00:21:34.996 A:middle
the project includes the C++

00:21:34.996 --> 00:21:36.616 A:middle
implementation, entitlements,

00:21:36.616 --> 00:21:37.666 A:middle
and an info.pist.

00:21:38.866 --> 00:21:41.076 A:middle
In addition to those, Xcode has

00:21:41.076 --> 00:21:43.106 A:middle
also generated the IIG file that

00:21:43.106 --> 00:21:44.286 A:middle
Simon mentioned earlier.

00:21:45.106 --> 00:21:46.206 A:middle
This file contains the class

00:21:46.256 --> 00:21:47.806 A:middle
definition for your driver.

00:21:49.026 --> 00:21:49.996 A:middle
So, let's take a look at the

00:21:49.996 --> 00:21:51.056 A:middle
class definition for

00:21:51.056 --> 00:21:53.146 A:middle
MyUserUSBInterfaceDriver.

00:21:53.686 --> 00:21:56.916 A:middle
You can see how this looks very

00:21:56.916 --> 00:21:58.486 A:middle
similar to a kernel driver.

00:21:59.116 --> 00:22:01.016 A:middle
For example, the same public

00:21:59.116 --> 00:22:01.016 A:middle
For example, the same public

00:22:01.016 --> 00:22:02.476 A:middle
IOKit Lifecycle method, start

00:22:02.476 --> 00:22:03.786 A:middle
and stop existing DriverKit

00:22:03.786 --> 00:22:04.786 A:middle
would have been capitalized.

00:22:05.976 --> 00:22:07.866 A:middle
That said, there are a few small

00:22:07.866 --> 00:22:08.966 A:middle
but important differences.

00:22:10.746 --> 00:22:12.346 A:middle
First, the DriverKit class

00:22:12.346 --> 00:22:13.766 A:middle
requires a different callback

00:22:13.766 --> 00:22:14.936 A:middle
with an additional attribute.

00:22:15.416 --> 00:22:17.246 A:middle
This attribute indicates that

00:22:17.306 --> 00:22:18.346 A:middle
this method conforms to the

00:22:18.346 --> 00:22:20.276 A:middle
callback type defined by the

00:22:20.276 --> 00:22:21.766 A:middle
IOUSBHostPipe object and

00:22:21.766 --> 00:22:23.596 A:middle
enforces compile-time type

00:22:23.636 --> 00:22:23.986 A:middle
checking.

00:22:24.816 --> 00:22:26.486 A:middle
And second, there are no

00:22:26.486 --> 00:22:28.006 A:middle
instance variables declared in a

00:22:28.006 --> 00:22:28.996 A:middle
DriverKit class.

00:22:29.816 --> 00:22:31.786 A:middle
This is because all instance

00:22:31.786 --> 00:22:33.296 A:middle
variables must be allocated by

00:22:33.296 --> 00:22:34.306 A:middle
the driver during

00:22:34.306 --> 00:22:35.086 A:middle
initialization.

00:22:35.636 --> 00:22:36.836 A:middle
So, let's take a look at how

00:22:36.836 --> 00:22:37.466 A:middle
that's done for

00:22:37.466 --> 00:22:39.556 A:middle
MyUserUSBInterfaceDriver.

00:22:41.116 --> 00:22:42.876 A:middle
First, you need to declare a

00:22:42.876 --> 00:22:44.446 A:middle
structure to hold all of your

00:22:44.446 --> 00:22:45.166 A:middle
instance variables.

00:22:45.926 --> 00:22:47.046 A:middle
All instance variables that

00:22:47.046 --> 00:22:48.496 A:middle
would have previously been part

00:22:48.496 --> 00:22:49.916 A:middle
of your kernel class should be

00:22:49.916 --> 00:22:50.796 A:middle
part of this structure.

00:22:51.656 --> 00:22:53.096 A:middle
For this class, we have pointers

00:22:53.096 --> 00:22:54.586 A:middle
to the same USB kernel types

00:22:55.066 --> 00:22:55.726 A:middle
that a Kext would.

00:22:56.326 --> 00:22:58.296 A:middle
Such as an IOUSBHostInterface

00:22:58.296 --> 00:23:01.226 A:middle
provider and IOUSBHostPipe

00:22:58.296 --> 00:23:01.226 A:middle
provider and IOUSBHostPipe

00:23:01.226 --> 00:23:02.396 A:middle
object for performing IO.

00:23:02.396 --> 00:23:05.086 A:middle
And there's also an OSAction

00:23:05.086 --> 00:23:06.186 A:middle
object that will be used to

00:23:06.186 --> 00:23:07.346 A:middle
encapsulate the callback for

00:23:07.346 --> 00:23:08.196 A:middle
asynchronous IO.

00:23:08.776 --> 00:23:10.646 A:middle
Then, you simply need to

00:23:10.646 --> 00:23:11.886 A:middle
allocate the structure during

00:23:11.886 --> 00:23:12.576 A:middle
your INIT routine.

00:23:13.126 --> 00:23:16.536 A:middle
And here's the INIT routine for

00:23:16.536 --> 00:23:18.516 A:middle
MyUserUSBInterfaceDriver.

00:23:19.016 --> 00:23:21.136 A:middle
It calls INIT on the superclass

00:23:21.136 --> 00:23:22.246 A:middle
in the same way a Kext would.

00:23:22.596 --> 00:23:24.046 A:middle
And then, it allocates the IVAR

00:23:24.046 --> 00:23:24.486 A:middle
structure.

00:23:25.826 --> 00:23:27.546 A:middle
It should be noted that the

00:23:27.546 --> 00:23:29.116 A:middle
superclass defines an IVAR's

00:23:29.646 --> 00:23:31.156 A:middle
member that must be used to

00:23:31.156 --> 00:23:32.106 A:middle
assign the result of the

00:23:32.106 --> 00:23:32.706 A:middle
allocation.

00:23:33.726 --> 00:23:35.436 A:middle
So, next, we'll take a look at

00:23:35.436 --> 00:23:37.206 A:middle
the implementation of Start.

00:23:38.136 --> 00:23:40.216 A:middle
This portion of Start is

00:23:40.216 --> 00:23:41.386 A:middle
responsible for calling into the

00:23:41.386 --> 00:23:42.786 A:middle
superclass and validating the

00:23:42.786 --> 00:23:43.256 A:middle
provider.

00:23:44.476 --> 00:23:45.756 A:middle
Here, things are slightly

00:23:45.756 --> 00:23:46.746 A:middle
different than the kernel

00:23:46.746 --> 00:23:47.466 A:middle
implementation.

00:23:49.596 --> 00:23:50.946 A:middle
You can see the definition is

00:23:50.946 --> 00:23:52.156 A:middle
wrapped in a macro IMPL.

00:23:52.156 --> 00:23:53.986 A:middle
And this macro is required to

00:23:53.986 --> 00:23:55.706 A:middle
support the IPC communication

00:23:55.706 --> 00:23:57.386 A:middle
between the user process and the

00:23:57.386 --> 00:23:58.556 A:middle
kernel proxy object.

00:23:59.736 --> 00:24:01.616 A:middle
And you can also see that

00:23:59.736 --> 00:24:01.616 A:middle
And you can also see that

00:24:01.616 --> 00:24:03.586 A:middle
calling super start takes a

00:24:04.036 --> 00:24:06.266 A:middle
different form.

00:24:07.236 --> 00:24:09.806 A:middle
Next, using the USB DriverKit

00:24:09.806 --> 00:24:11.596 A:middle
APIs, you open your IOUSB host

00:24:11.596 --> 00:24:15.116 A:middle
interface provider and you

00:24:15.246 --> 00:24:16.666 A:middle
allocate your Pipe object.

00:24:18.826 --> 00:24:19.806 A:middle
And then, allocate a memory

00:24:19.806 --> 00:24:20.976 A:middle
descriptor to be used for IO.

00:24:22.096 --> 00:24:23.286 A:middle
This should be a fairly familiar

00:24:23.286 --> 00:24:24.606 A:middle
paradigm and is basically

00:24:24.606 --> 00:24:25.716 A:middle
identical to what's done in a

00:24:25.716 --> 00:24:26.000 A:middle
Kext.

00:24:30.096 --> 00:24:31.196 A:middle
In this case, we're performing

00:24:31.296 --> 00:24:32.926 A:middle
asynchronous IO, so we need to

00:24:32.926 --> 00:24:34.766 A:middle
allocate an OS attribute object

00:24:34.856 --> 00:24:35.926 A:middle
to encapsulate the callback.

00:24:37.566 --> 00:24:38.636 A:middle
And then, finally, all that

00:24:38.636 --> 00:24:40.136 A:middle
remains is to enqueue the IO.

00:24:41.756 --> 00:24:43.576 A:middle
At this point, assuming the

00:24:43.576 --> 00:24:45.846 A:middle
setup was successful, there's an

00:24:45.846 --> 00:24:47.136 A:middle
asynchronous read which we'll

00:24:47.136 --> 00:24:48.736 A:middle
call ReadComplete when finished.

00:24:49.026 --> 00:24:50.406 A:middle
And the ReadComplete method for

00:24:50.406 --> 00:24:51.616 A:middle
this driver just prints the

00:24:51.616 --> 00:24:53.206 A:middle
number of bytes transferred and

00:24:53.206 --> 00:24:53.866 A:middle
the status.

00:24:54.116 --> 00:24:55.556 A:middle
If successful, it re-enqueues

00:24:55.556 --> 00:24:55.916 A:middle
the IO.

00:24:56.356 --> 00:24:58.456 A:middle
So, next, let's take a look at

00:24:58.456 --> 00:25:01.536 A:middle
the driver in action.

00:24:58.456 --> 00:25:01.536 A:middle
the driver in action.

00:25:02.246 --> 00:25:04.026 A:middle
So, in this demo, you'll see

00:25:04.026 --> 00:25:05.186 A:middle
some logging I've added to

00:25:05.186 --> 00:25:07.516 A:middle
MyUserUSBInterfaceDriver that

00:25:07.516 --> 00:25:11.076 A:middle
will print some of the lifecycle

00:25:11.076 --> 00:25:11.646 A:middle
methods.

00:25:15.426 --> 00:25:17.966 A:middle
I've also added an infinite loop

00:25:18.556 --> 00:25:20.536 A:middle
which we'll debug using LDB.

00:25:20.536 --> 00:25:23.856 A:middle
And then, I've also introduced a

00:25:23.856 --> 00:25:27.946 A:middle
crash which we can see how is

00:25:27.986 --> 00:25:29.236 A:middle
recoverable now using the new

00:25:29.236 --> 00:25:30.326 A:middle
DriverKit Framework.

00:25:30.956 --> 00:25:32.676 A:middle
So, if I plug in the device you

00:25:32.676 --> 00:25:34.396 A:middle
can see INIT and start run just

00:25:34.396 --> 00:25:35.416 A:middle
like they would in a Kext.

00:25:35.726 --> 00:25:37.226 A:middle
And ReadComplete is being called

00:25:37.326 --> 00:25:39.176 A:middle
as data is being transferred to

00:25:39.246 --> 00:25:41.236 A:middle
and from the device.

00:25:41.236 --> 00:25:46.396 A:middle
Using PS, we can see that our

00:25:46.956 --> 00:25:47.926 A:middle
driver is running.

00:25:48.826 --> 00:25:50.506 A:middle
And now, we've hit my infinite

00:25:50.506 --> 00:25:51.506 A:middle
loop that I added and we can

00:25:51.506 --> 00:25:53.326 A:middle
take a look with LDB at what's

00:25:53.326 --> 00:25:54.976 A:middle
happening in the driver.

00:26:02.356 --> 00:26:03.616 A:middle
So, from earlier, we can see our

00:26:03.616 --> 00:26:06.086 A:middle
PID is 2572, so we need to

00:26:06.086 --> 00:26:07.586 A:middle
attach to that process.

00:26:15.116 --> 00:26:16.456 A:middle
We need to find the thread

00:26:16.456 --> 00:26:17.906 A:middle
running the ReadComplete method.

00:26:19.386 --> 00:26:22.286 A:middle
You can see, that's thread two.

00:26:24.436 --> 00:26:26.656 A:middle
And here, we've definitely got

00:26:26.656 --> 00:26:27.436 A:middle
an infinite loop.

00:26:27.496 --> 00:26:28.356 A:middle
And because we're running in

00:26:28.356 --> 00:26:30.266 A:middle
userspace, we can modify our

00:26:30.266 --> 00:26:30.976 A:middle
loop variable.

00:26:36.306 --> 00:26:37.726 A:middle
And before I continue, if you

00:26:37.726 --> 00:26:39.316 A:middle
look closely, you can see

00:26:39.836 --> 00:26:41.506 A:middle
there's definitely a null

00:26:41.506 --> 00:26:43.346 A:middle
pointer D reference, which will

00:26:43.346 --> 00:26:44.276 A:middle
crash the driver.

00:26:44.796 --> 00:26:48.206 A:middle
And you can see it's crashed.

00:26:49.646 --> 00:26:51.146 A:middle
But then, immediately restarted

00:26:51.576 --> 00:26:52.566 A:middle
without affecting the rest of

00:26:52.566 --> 00:26:53.036 A:middle
the system.

00:26:53.956 --> 00:26:55.716 A:middle
And then, on unplug you can see

00:26:55.716 --> 00:26:57.156 A:middle
your stop and free methods would

00:26:57.156 --> 00:26:58.206 A:middle
run as normal.

00:27:01.516 --> 00:27:04.086 A:middle
[ Applause ]

00:27:04.586 --> 00:27:05.106 A:middle
And so, that's--

00:27:06.516 --> 00:27:08.826 A:middle
[ Applause ]

00:27:09.326 --> 00:27:10.476 A:middle
-- that's how easy it is to

00:27:10.476 --> 00:27:12.626 A:middle
build and debug a new driver

00:27:12.826 --> 00:27:13.796 A:middle
with the new DriverKit

00:27:13.796 --> 00:27:14.236 A:middle
Framework.

00:27:14.426 --> 00:27:16.046 A:middle
Now, I'll hand it back to Joe to

00:27:16.516 --> 00:27:17.936 A:middle
talk about how to deliver System

00:27:17.936 --> 00:27:19.056 A:middle
Extensions in your apps.

00:27:21.546 --> 00:27:22.586 A:middle
&gt;&gt; Thank you, Scott.

00:27:23.886 --> 00:27:24.946 A:middle
Now, that we've seen how to

00:27:24.946 --> 00:27:26.526 A:middle
build a Driver Extension, I'd

00:27:26.526 --> 00:27:27.986 A:middle
like to tell you how to ship a

00:27:27.986 --> 00:27:30.176 A:middle
driver or other type of System

00:27:30.176 --> 00:27:32.326 A:middle
Extension in your app.

00:27:33.816 --> 00:27:35.476 A:middle
We'll talk about how your

00:27:35.476 --> 00:27:36.926 A:middle
extension relates to your app,

00:27:38.486 --> 00:27:39.976 A:middle
how to build and package the

00:27:39.976 --> 00:27:41.196 A:middle
extension bundle.

00:27:42.056 --> 00:27:43.406 A:middle
We'll talk about code signing

00:27:43.446 --> 00:27:45.886 A:middle
and entitlements and how to

00:27:45.886 --> 00:27:48.056 A:middle
install, update, and uninstall

00:27:48.056 --> 00:27:49.066 A:middle
your System Extension.

00:27:49.666 --> 00:27:54.526 A:middle
A System Extension is always

00:27:54.666 --> 00:27:55.436 A:middle
part of an app.

00:27:56.196 --> 00:27:57.836 A:middle
This is a basic principle of the

00:27:57.836 --> 00:27:58.326 A:middle
design.

00:27:58.926 --> 00:28:00.286 A:middle
There's no such thing as a

00:27:58.926 --> 00:28:00.286 A:middle
There's no such thing as a

00:28:00.286 --> 00:28:02.056 A:middle
standalone System Extension.

00:28:03.586 --> 00:28:05.426 A:middle
This is because users think in

00:28:05.426 --> 00:28:06.326 A:middle
terms of apps.

00:28:06.806 --> 00:28:09.056 A:middle
They purchase apps, install

00:28:09.056 --> 00:28:11.196 A:middle
apps, and run apps.

00:28:12.116 --> 00:28:14.066 A:middle
Your System Extension should be

00:28:14.066 --> 00:28:16.026 A:middle
an implementation detail of your

00:28:16.026 --> 00:28:16.206 A:middle
app.

00:28:17.566 --> 00:28:18.986 A:middle
The app is how the user

00:28:19.616 --> 00:28:21.596 A:middle
interacts with and controls your

00:28:21.596 --> 00:28:22.166 A:middle
extension.

00:28:22.736 --> 00:28:25.986 A:middle
Once you've packaged your System

00:28:25.986 --> 00:28:28.226 A:middle
Extension into an app, you can

00:28:28.226 --> 00:28:29.666 A:middle
distribute that app directly to

00:28:29.666 --> 00:28:32.816 A:middle
your users using Developer ID or

00:28:32.816 --> 00:28:34.366 A:middle
through the Mac App Store, which

00:28:34.366 --> 00:28:35.646 A:middle
has never been possible with

00:28:35.646 --> 00:28:36.386 A:middle
Kernel Extensions.

00:28:37.516 --> 00:28:41.256 A:middle
[ Applause ]

00:28:41.756 --> 00:28:42.716 A:middle
Because of the close

00:28:42.716 --> 00:28:44.266 A:middle
relationship between your app

00:28:44.266 --> 00:28:46.556 A:middle
and its extensions, your System

00:28:46.556 --> 00:28:48.646 A:middle
Extension should be identifiable

00:28:48.646 --> 00:28:51.026 A:middle
by the user as related to your

00:28:52.046 --> 00:28:52.116 A:middle
app.

00:28:52.336 --> 00:28:52.956 A:middle
You should use the

00:28:52.956 --> 00:28:55.476 A:middle
CFBundleDisplayName key in the

00:28:55.476 --> 00:28:57.386 A:middle
extension's info.plist to give

00:28:57.386 --> 00:28:59.456 A:middle
it a good localized name and

00:28:59.456 --> 00:29:00.686 A:middle
give it a custom icon that

00:28:59.456 --> 00:29:00.686 A:middle
give it a custom icon that

00:29:00.686 --> 00:29:02.496 A:middle
relates to your app's main icon.

00:29:03.246 --> 00:29:04.696 A:middle
This way, if the extension is

00:29:04.696 --> 00:29:06.106 A:middle
ever shown in the user

00:29:06.106 --> 00:29:08.156 A:middle
interface, a user will recognize

00:29:08.156 --> 00:29:09.796 A:middle
it as part of an app that they

00:29:09.796 --> 00:29:10.330 A:middle
use.

00:29:13.096 --> 00:29:14.826 A:middle
You should also include a usage

00:29:14.826 --> 00:29:16.466 A:middle
description string in your

00:29:16.466 --> 00:29:18.926 A:middle
extension's info.pList that

00:29:18.926 --> 00:29:20.536 A:middle
explains simply what the

00:29:20.536 --> 00:29:22.956 A:middle
extension is and does and why a

00:29:22.956 --> 00:29:23.866 A:middle
user would run it.

00:29:24.626 --> 00:29:26.076 A:middle
Think of this as similar to the

00:29:26.076 --> 00:29:27.516 A:middle
usage stings required for

00:29:27.516 --> 00:29:31.816 A:middle
calendar or camera access.

00:29:33.336 --> 00:29:35.896 A:middle
For Driver Extensions, use the

00:29:35.896 --> 00:29:38.256 A:middle
key OSBundleUsageDescription.

00:29:38.526 --> 00:29:39.716 A:middle
And for other types of System

00:29:39.716 --> 00:29:41.616 A:middle
Extensions, use the key

00:29:41.616 --> 00:29:43.356 A:middle
NSSystemExtensionUsage

00:29:43.356 --> 00:29:43.896 A:middle
Description.

00:29:45.056 --> 00:29:46.656 A:middle
Remember to localize these and

00:29:46.656 --> 00:29:48.206 A:middle
all other strings for all the

00:29:48.206 --> 00:29:49.846 A:middle
languages your app supports.

00:29:50.416 --> 00:29:54.546 A:middle
The System Extension itself is a

00:29:54.586 --> 00:29:56.466 A:middle
separate sub-bundle of your app

00:29:56.466 --> 00:29:58.176 A:middle
with its own executable and

00:29:58.176 --> 00:30:00.626 A:middle
info.plist embedded within your

00:29:58.176 --> 00:30:00.626 A:middle
info.plist embedded within your

00:30:00.626 --> 00:30:00.906 A:middle
application.

00:30:01.986 --> 00:30:03.436 A:middle
Here's a peek inside a sample

00:30:03.436 --> 00:30:05.206 A:middle
application showing a System

00:30:05.206 --> 00:30:06.906 A:middle
Extension in its Contents

00:30:07.006 --> 00:30:08.676 A:middle
Library System Extension's

00:30:08.746 --> 00:30:09.176 A:middle
folder.

00:30:11.606 --> 00:30:14.066 A:middle
Driver Extension bundles use the

00:30:14.066 --> 00:30:16.286 A:middle
.dext filename suffix and the

00:30:16.286 --> 00:30:17.866 A:middle
package type DEXT.

00:30:18.806 --> 00:30:21.066 A:middle
They use OSBundle keys in their

00:30:21.066 --> 00:30:23.046 A:middle
info.plist similarly to Kernel

00:30:23.046 --> 00:30:24.026 A:middle
Extension bundles.

00:30:25.516 --> 00:30:27.036 A:middle
Driver Extension bundles should

00:30:27.036 --> 00:30:30.016 A:middle
be flat bundles with no contents

00:30:30.016 --> 00:30:32.756 A:middle
folder, similar to iOS apps.

00:30:34.156 --> 00:30:35.976 A:middle
System Extension bundles of

00:30:35.976 --> 00:30:38.186 A:middle
other types use the .system

00:30:38.186 --> 00:30:40.216 A:middle
extension filename suffix and

00:30:40.216 --> 00:30:43.576 A:middle
the CFBundlePackageType SYSX,

00:30:44.386 --> 00:30:45.846 A:middle
System X tension.

00:30:46.476 --> 00:30:50.496 A:middle
In Xcode, your System Extension

00:30:50.496 --> 00:30:51.606 A:middle
is a separate target.

00:30:52.206 --> 00:30:56.046 A:middle
Xcode has templates for Network

00:30:56.046 --> 00:30:58.306 A:middle
Extensions and DriverKit drivers

00:30:58.566 --> 00:30:59.806 A:middle
built in.

00:31:01.986 --> 00:31:03.606 A:middle
When you create such a target,

00:31:03.606 --> 00:31:05.026 A:middle
Xcode will ask if you want to

00:31:05.026 --> 00:31:06.686 A:middle
embed it in an application

00:31:06.686 --> 00:31:07.806 A:middle
that's already part of your

00:31:07.806 --> 00:31:08.186 A:middle
project.

00:31:08.806 --> 00:31:11.016 A:middle
If you do, it will create a Copy

00:31:11.016 --> 00:31:13.056 A:middle
Files phase that copies the

00:31:13.056 --> 00:31:14.706 A:middle
extension build product into

00:31:14.706 --> 00:31:15.566 A:middle
your application.

00:31:16.166 --> 00:31:20.946 A:middle
Once you've built your System

00:31:20.946 --> 00:31:23.346 A:middle
Extension, you sign it with the

00:31:23.346 --> 00:31:24.886 A:middle
same certificate that you sign

00:31:24.886 --> 00:31:25.336 A:middle
your app.

00:31:25.776 --> 00:31:27.486 A:middle
There is no need for a special

00:31:27.486 --> 00:31:29.936 A:middle
Kext certificate, Kext specific

00:31:29.936 --> 00:31:31.346 A:middle
signing certificate, anymore.

00:31:32.516 --> 00:31:36.146 A:middle
[ Applause ]

00:31:36.646 --> 00:31:39.056 A:middle
Normally, the Team ID used to

00:31:39.056 --> 00:31:40.526 A:middle
sign your System Extension and

00:31:40.526 --> 00:31:41.936 A:middle
your main app must match.

00:31:42.266 --> 00:31:43.486 A:middle
This is a security measure.

00:31:44.206 --> 00:31:45.976 A:middle
However, you may be building an

00:31:45.976 --> 00:31:47.676 A:middle
extension that's intended to be

00:31:47.676 --> 00:31:49.336 A:middle
packaged in other developers'

00:31:49.336 --> 00:31:49.786 A:middle
apps.

00:31:50.036 --> 00:31:52.026 A:middle
For example, a Driver Extension

00:31:52.276 --> 00:31:54.596 A:middle
for a common type of USB serial

00:31:54.596 --> 00:31:56.036 A:middle
interface chip that's included

00:31:56.036 --> 00:31:56.956 A:middle
in many products.

00:31:57.676 --> 00:31:59.206 A:middle
If so, there is an entitlement

00:31:59.246 --> 00:32:00.356 A:middle
you can use on the System

00:31:59.246 --> 00:32:00.356 A:middle
you can use on the System

00:32:00.356 --> 00:32:02.166 A:middle
Extension to allow it to be

00:32:02.166 --> 00:32:03.216 A:middle
packaged in a different

00:32:03.276 --> 00:32:04.866 A:middle
developer's app.

00:32:08.196 --> 00:32:09.436 A:middle
If you sign your System

00:32:09.436 --> 00:32:11.546 A:middle
Extension with Developer ID, it

00:32:11.546 --> 00:32:13.296 A:middle
must be notarized before it will

00:32:13.296 --> 00:32:15.386 A:middle
run on a user's system.

00:32:16.416 --> 00:32:17.316 A:middle
For more information on

00:32:17.316 --> 00:32:19.236 A:middle
notarization, please watch the

00:32:19.236 --> 00:32:21.986 A:middle
session from last year or come

00:32:21.986 --> 00:32:23.606 A:middle
to the Notarization Lab later

00:32:23.606 --> 00:32:24.296 A:middle
this afternoon.

00:32:26.976 --> 00:32:29.136 A:middle
Your System Extension uses

00:32:29.136 --> 00:32:31.296 A:middle
entitlements to describe its

00:32:31.296 --> 00:32:32.846 A:middle
capabilities to the operating

00:32:32.846 --> 00:32:35.026 A:middle
system; what type of extension

00:32:35.026 --> 00:32:36.366 A:middle
it is and what it can do.

00:32:37.236 --> 00:32:39.506 A:middle
For example, DriverKit Drive--

00:32:39.506 --> 00:32:41.626 A:middle
Extensions use the Transport and

00:32:41.626 --> 00:32:43.296 A:middle
Family entitlements that Simon

00:32:43.296 --> 00:32:44.000 A:middle
showed.

00:32:46.076 --> 00:32:47.536 A:middle
Your app that contains System

00:32:47.536 --> 00:32:49.686 A:middle
Extensions also should use the

00:32:49.686 --> 00:32:51.476 A:middle
com-apple-developer-system

00:32:51.476 --> 00:32:53.256 A:middle
extension-install entitlement.

00:32:55.256 --> 00:32:56.866 A:middle
For more information on these

00:32:56.866 --> 00:32:58.706 A:middle
entitlements and to request the

00:32:58.706 --> 00:33:00.146 A:middle
use of them by your development

00:32:58.706 --> 00:33:00.146 A:middle
use of them by your development

00:33:00.146 --> 00:33:03.596 A:middle
team, visit developer.apple.com

00:33:03.596 --> 00:33:05.096 A:middle
/system-extensions.

00:33:05.636 --> 00:33:09.106 A:middle
In the Developer Seed of

00:33:09.106 --> 00:33:12.276 A:middle
Catalina for local development,

00:33:12.926 --> 00:33:14.386 A:middle
you can turn System Integrity

00:33:14.386 --> 00:33:16.346 A:middle
Protection off to disable some

00:33:16.346 --> 00:33:17.766 A:middle
of the checks for code signing

00:33:17.766 --> 00:33:19.386 A:middle
and entitlements while you are

00:33:19.386 --> 00:33:19.796 A:middle
testing.

00:33:21.046 --> 00:33:22.316 A:middle
Please, remember to turn System

00:33:22.316 --> 00:33:23.836 A:middle
Integrity Protection on again

00:33:23.836 --> 00:33:24.806 A:middle
when you're finished testing.

00:33:25.446 --> 00:33:28.856 A:middle
Now that you've built your app

00:33:29.216 --> 00:33:30.786 A:middle
with the System Extension, how

00:33:31.556 --> 00:33:33.466 A:middle
does the extension get installed

00:33:33.466 --> 00:33:35.066 A:middle
on a user's system?

00:33:35.796 --> 00:33:38.096 A:middle
There's no need for an installer

00:33:38.096 --> 00:33:38.836 A:middle
or a package.

00:33:39.316 --> 00:33:41.236 A:middle
Your System Extension stays in

00:33:41.476 --> 00:33:43.546 A:middle
your app bundle.

00:33:43.676 --> 00:33:45.316 A:middle
Your app uses the new System

00:33:45.316 --> 00:33:47.426 A:middle
Extensions Framework and creates

00:33:47.426 --> 00:33:50.076 A:middle
an activation request to request

00:33:50.076 --> 00:33:51.136 A:middle
that the extension be made

00:33:51.136 --> 00:33:52.866 A:middle
available for the system to use.

00:33:52.866 --> 00:33:55.206 A:middle
A system administrator will

00:33:55.206 --> 00:33:58.586 A:middle
approve this request.

00:33:59.026 --> 00:34:00.876 A:middle
Most apps should probably create

00:33:59.026 --> 00:34:00.876 A:middle
Most apps should probably create

00:34:00.876 --> 00:34:02.746 A:middle
an activation request during app

00:34:02.746 --> 00:34:04.536 A:middle
launch so the extension is made

00:34:04.536 --> 00:34:05.636 A:middle
available right away.

00:34:06.306 --> 00:34:08.266 A:middle
If your extension has previously

00:34:08.466 --> 00:34:10.716 A:middle
been activated and approved, the

00:34:10.716 --> 00:34:12.206 A:middle
activation request will return

00:34:12.206 --> 00:34:13.335 A:middle
quickly with success.

00:34:14.235 --> 00:34:16.106 A:middle
However, you may wish to

00:34:16.106 --> 00:34:17.746 A:middle
activate your System Extensions

00:34:17.746 --> 00:34:18.706 A:middle
at different points in your

00:34:18.706 --> 00:34:20.676 A:middle
app's lifecycle such as after a

00:34:20.676 --> 00:34:22.346 A:middle
user has agreed to a license

00:34:22.346 --> 00:34:24.166 A:middle
agreement or made an in-app

00:34:24.266 --> 00:34:25.576 A:middle
purchase if that's required for

00:34:25.576 --> 00:34:26.156 A:middle
your extension.

00:34:28.956 --> 00:34:30.476 A:middle
Once your extension has been

00:34:30.476 --> 00:34:32.306 A:middle
activated, the system will

00:34:32.306 --> 00:34:34.366 A:middle
manage its lifecycle starting it

00:34:34.436 --> 00:34:35.936 A:middle
automatically when it is needed.

00:34:36.676 --> 00:34:38.376 A:middle
For example, a Driver Extension

00:34:38.376 --> 00:34:40.005 A:middle
will start when a matching

00:34:40.005 --> 00:34:41.366 A:middle
hardware device is connected.

00:34:45.126 --> 00:34:47.116 A:middle
To update your System Extension,

00:34:47.806 --> 00:34:49.166 A:middle
update your app bundle.

00:34:50.206 --> 00:34:52.406 A:middle
A user may install a new version

00:34:52.406 --> 00:34:53.496 A:middle
that they download from your

00:34:53.496 --> 00:34:56.156 A:middle
website, your auto-updater may

00:34:56.156 --> 00:34:57.616 A:middle
update the app bundle in place,

00:34:58.156 --> 00:34:59.846 A:middle
or if you release a new version

00:34:59.846 --> 00:35:01.156 A:middle
on the app store it will be

00:34:59.846 --> 00:35:01.156 A:middle
on the app store it will be

00:35:01.156 --> 00:35:02.096 A:middle
updated for the user.

00:35:02.716 --> 00:35:06.226 A:middle
The next time your app runs and

00:35:06.226 --> 00:35:07.746 A:middle
submits an activation request,

00:35:08.406 --> 00:35:09.766 A:middle
the system will notice that the

00:35:09.766 --> 00:35:11.906 A:middle
extension's version has changed.

00:35:12.336 --> 00:35:13.816 A:middle
It will ask your activation

00:35:13.816 --> 00:35:15.826 A:middle
request delegate to compare the

00:35:15.826 --> 00:35:17.686 A:middle
version numbers following your

00:35:17.686 --> 00:35:19.426 A:middle
own version number rules.

00:35:20.756 --> 00:35:22.146 A:middle
If your delegate determines that

00:35:22.146 --> 00:35:24.456 A:middle
this is an upgrade, the system

00:35:24.456 --> 00:35:25.936 A:middle
will stop the old version of the

00:35:25.936 --> 00:35:27.616 A:middle
System Extension and start the

00:35:27.616 --> 00:35:27.986 A:middle
new one.

00:35:28.616 --> 00:35:32.546 A:middle
If a user wishes to uninstall

00:35:32.546 --> 00:35:35.126 A:middle
your application, when they move

00:35:35.126 --> 00:35:36.716 A:middle
it to the Trash, all of its

00:35:36.716 --> 00:35:38.276 A:middle
extensions will automatically be

00:35:38.276 --> 00:35:39.606 A:middle
deactivated, as well.

00:35:40.686 --> 00:35:42.226 A:middle
There is a deactivationRequest

00:35:42.286 --> 00:35:44.766 A:middle
API if you wish to use it, but

00:35:44.766 --> 00:35:46.296 A:middle
there's no need for a dedicated

00:35:46.296 --> 00:35:47.086 A:middle
uninstaller.

00:35:53.536 --> 00:35:56.146 A:middle
So, today we introduced System

00:35:56.146 --> 00:35:58.276 A:middle
Extensions, the replacement for

00:35:58.276 --> 00:35:59.746 A:middle
Kernel Extensions that lets your

00:35:59.746 --> 00:36:02.246 A:middle
apps extend the system in ways

00:35:59.746 --> 00:36:02.246 A:middle
apps extend the system in ways

00:36:02.246 --> 00:36:04.426 A:middle
that are more reliable, more

00:36:04.426 --> 00:36:07.066 A:middle
secure, and easier to develop

00:36:07.066 --> 00:36:07.736 A:middle
than ever before.

00:36:09.256 --> 00:36:11.406 A:middle
We saw how to use the DriverKit

00:36:11.406 --> 00:36:14.256 A:middle
SDK and frameworks, which are a

00:36:14.256 --> 00:36:16.986 A:middle
modernized update of IOKit to

00:36:16.986 --> 00:36:17.796 A:middle
build a driver.

00:36:18.386 --> 00:36:21.306 A:middle
And we saw how to write and then

00:36:21.306 --> 00:36:23.696 A:middle
debug an example USB driver all

00:36:23.696 --> 00:36:24.456 A:middle
on one machine.

00:36:25.786 --> 00:36:27.156 A:middle
Finally, we talked about how to

00:36:27.156 --> 00:36:28.766 A:middle
include System Extensions in

00:36:28.766 --> 00:36:30.036 A:middle
your apps.

00:36:32.776 --> 00:36:34.626 A:middle
If you have any questions, we

00:36:34.626 --> 00:36:36.446 A:middle
would love to answer them at the

00:36:36.446 --> 00:36:37.726 A:middle
Core OS Labs.

00:36:37.946 --> 00:36:39.576 A:middle
There's one later today and one

00:36:39.576 --> 00:36:40.486 A:middle
Thursday morning.

00:36:41.946 --> 00:36:43.066 A:middle
You may also wish to visit the

00:36:43.066 --> 00:36:45.466 A:middle
Security Lab happening now or on

00:36:45.466 --> 00:36:46.796 A:middle
Thursday afternoon or the

00:36:46.796 --> 00:36:48.146 A:middle
Networking Lab on Friday

00:36:48.146 --> 00:36:48.456 A:middle
morning.

00:36:48.996 --> 00:36:51.726 A:middle
Thanks, very much, and enjoy the

00:36:51.726 --> 00:36:52.756 A:middle
rest of WWDC.

00:36:53.516 --> 00:36:58.506 A:middle
[ Applause ]
