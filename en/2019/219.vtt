WEBVTT

00:00:09.516 --> 00:00:11.546 A:middle
[ Applause ]

00:00:12.046 --> 00:00:14.776 A:middle
&gt;&gt; Hello. Welcome.

00:00:15.796 --> 00:00:17.126 A:middle
My name is Matthew Koonce

00:00:17.336 --> 00:00:18.206 A:middle
and I'm an engineer

00:00:18.346 --> 00:00:19.676 A:middle
on the watchOS Frameworks Team.

00:00:20.686 --> 00:00:22.396 A:middle
I'm thrilled to be here today

00:00:22.696 --> 00:00:23.916 A:middle
alongside my friend and

00:00:23.916 --> 00:00:25.536 A:middle
colleague, Josh Weinberg, to

00:00:26.006 --> 00:00:27.216 A:middle
talk about how we can use

00:00:27.246 --> 00:00:29.156 A:middle
SwiftUI to build some really

00:00:29.156 --> 00:00:30.916 A:middle
amazing experiences that happen

00:00:31.276 --> 00:00:32.665 A:middle
right on your wrist.

00:00:33.936 --> 00:00:36.246 A:middle
Since our humble beginnings in

00:00:36.246 --> 00:00:38.806 A:middle
watchOS 1, the Apple Watch has

00:00:38.806 --> 00:00:41.046 A:middle
evolved significantly, and

00:00:41.046 --> 00:00:42.776 A:middle
watchOS has evolved right along

00:00:42.776 --> 00:00:43.726 A:middle
with it.

00:00:44.296 --> 00:00:45.686 A:middle
Over the years, we've been

00:00:45.686 --> 00:00:47.236 A:middle
adding some really great APIs

00:00:47.236 --> 00:00:48.846 A:middle
and features that have enabled

00:00:48.846 --> 00:00:50.616 A:middle
all of you to build some really

00:00:50.616 --> 00:00:51.746 A:middle
awesome experiences.

00:00:52.286 --> 00:00:55.046 A:middle
But that is just the beginning,

00:00:56.206 --> 00:00:58.496 A:middle
because with watchOS 6, we've

00:00:58.496 --> 00:00:59.766 A:middle
brought the platform to a whole

00:00:59.766 --> 00:01:00.436 A:middle
new level.

00:00:59.766 --> 00:01:00.436 A:middle
new level.

00:01:01.686 --> 00:01:03.636 A:middle
With independent apps, we've

00:01:03.636 --> 00:01:06.156 A:middle
decoupled the iOS and watch OS

00:01:06.156 --> 00:01:06.866 A:middle
experiences.

00:01:08.056 --> 00:01:09.816 A:middle
And for the first time, your

00:01:09.816 --> 00:01:11.096 A:middle
apps can be downloaded right on

00:01:11.096 --> 00:01:12.736 A:middle
Apple Watch with the new app

00:01:12.736 --> 00:01:13.046 A:middle
store.

00:01:14.606 --> 00:01:15.736 A:middle
We've also added support for

00:01:15.736 --> 00:01:17.126 A:middle
some new APIs like streaming

00:01:17.126 --> 00:01:19.376 A:middle
audio and extended runtime

00:01:19.376 --> 00:01:19.976 A:middle
sessions.

00:01:20.526 --> 00:01:23.636 A:middle
But we've also brought something

00:01:23.856 --> 00:01:26.346 A:middle
super awesome, and that is the

00:01:26.536 --> 00:01:28.236 A:middle
full power of SwiftUI to

00:01:28.236 --> 00:01:29.566 A:middle
watchOS.

00:01:30.516 --> 00:01:35.186 A:middle
[ Applause ]

00:01:35.686 --> 00:01:37.116 A:middle
With SwiftUI's powerful

00:01:37.116 --> 00:01:39.256 A:middle
declarative syntax and its

00:01:39.256 --> 00:01:40.866 A:middle
integration right into Xcode's

00:01:40.866 --> 00:01:43.276 A:middle
canvas, it's never been easier

00:01:43.276 --> 00:01:44.636 A:middle
to express the views that you

00:01:44.636 --> 00:01:45.136 A:middle
want to build.

00:01:46.266 --> 00:01:48.776 A:middle
And on watchOS, it means that we

00:01:48.776 --> 00:01:50.076 A:middle
have a whole new UI framework.

00:01:51.056 --> 00:01:52.916 A:middle
And with it comes some really

00:01:52.916 --> 00:01:55.166 A:middle
awesome features, APIs, and just

00:01:55.506 --> 00:01:56.926 A:middle
a whole new world of

00:01:56.926 --> 00:01:58.706 A:middle
possibilities for things that

00:01:58.706 --> 00:02:01.086 A:middle
you can build.

00:01:58.706 --> 00:02:01.086 A:middle
you can build.

00:02:01.266 --> 00:02:04.856 A:middle
For example, with Lists, we

00:02:04.856 --> 00:02:06.366 A:middle
finally brought support for

00:02:06.486 --> 00:02:08.626 A:middle
swipe to delete and drag to

00:02:08.626 --> 00:02:08.996 A:middle
reorder.

00:02:10.286 --> 00:02:11.856 A:middle
And with SwiftUI's powerful

00:02:11.856 --> 00:02:13.566 A:middle
animations, you can create

00:02:13.566 --> 00:02:14.696 A:middle
completely complex,

00:02:14.776 --> 00:02:16.116 A:middle
interruptible, and custom

00:02:16.116 --> 00:02:17.886 A:middle
animations happening right on

00:02:18.616 --> 00:02:20.136 A:middle
the watch.

00:02:20.346 --> 00:02:22.546 A:middle
Now, SwiftUI is fully integrated

00:02:22.546 --> 00:02:24.736 A:middle
with WatchKit, which means that

00:02:24.796 --> 00:02:27.286 A:middle
you can have SwiftUI views that

00:02:27.286 --> 00:02:28.746 A:middle
live right alongside your

00:02:28.746 --> 00:02:30.326 A:middle
existing WatchKit interface

00:02:30.326 --> 00:02:31.056 A:middle
controllers.

00:02:32.236 --> 00:02:34.246 A:middle
And we have enough support for

00:02:34.246 --> 00:02:35.816 A:middle
embedding some WatchKit provided

00:02:35.816 --> 00:02:37.356 A:middle
interface objects directly

00:02:37.356 --> 00:02:38.706 A:middle
within your SwiftUI view

00:02:38.706 --> 00:02:40.136 A:middle
hierarchies, like the brand-new

00:02:40.306 --> 00:02:41.946 A:middle
sign-in with Apple button.

00:02:43.896 --> 00:02:45.666 A:middle
In fact, SwiftUI has really

00:02:45.666 --> 00:02:47.386 A:middle
robust support for integrating

00:02:47.386 --> 00:02:48.576 A:middle
with all of our existing UI

00:02:48.576 --> 00:02:49.276 A:middle
frameworks.

00:02:49.826 --> 00:02:51.266 A:middle
And we have a whole talk

00:02:51.266 --> 00:02:52.556 A:middle
dedicated to the topic that I

00:02:52.556 --> 00:02:53.706 A:middle
highly recommend that you check

00:02:53.706 --> 00:02:53.926 A:middle
out.

00:02:55.826 --> 00:02:58.326 A:middle
All right, so SwiftUI is fully

00:02:58.326 --> 00:02:59.496 A:middle
immersed in the watchOS

00:02:59.496 --> 00:03:02.156 A:middle
experience, which means that you

00:02:59.496 --> 00:03:02.156 A:middle
experience, which means that you

00:03:02.156 --> 00:03:04.266 A:middle
can use all those great APIs you

00:03:04.266 --> 00:03:06.496 A:middle
have with watchOS 6 and all

00:03:06.496 --> 00:03:07.286 A:middle
those awesome things we've been

00:03:07.286 --> 00:03:08.306 A:middle
adding over the years.

00:03:09.046 --> 00:03:09.966 A:middle
Whether you're using a streaming

00:03:09.966 --> 00:03:11.636 A:middle
audio app, you're using our new

00:03:11.636 --> 00:03:13.546 A:middle
extended runtime features, or

00:03:13.546 --> 00:03:14.486 A:middle
you're creating something

00:03:14.486 --> 00:03:18.946 A:middle
completely new for the platform.

00:03:18.946 --> 00:03:20.906 A:middle
For the first time, we have a UI

00:03:20.906 --> 00:03:23.606 A:middle
framework that works on all of

00:03:23.606 --> 00:03:24.346 A:middle
our devices.

00:03:25.376 --> 00:03:26.406 A:middle
Whether you're developing for

00:03:26.406 --> 00:03:28.946 A:middle
the 38 mm Apple Watch or

00:03:28.946 --> 00:03:30.996 A:middle
creating something for a 65 inch

00:03:31.046 --> 00:03:32.666 A:middle
television, all of it can be

00:03:32.666 --> 00:03:33.686 A:middle
done with SwiftUI.

00:03:34.306 --> 00:03:36.576 A:middle
But the Apple Watch is a unique

00:03:36.576 --> 00:03:38.756 A:middle
device and it has its own

00:03:38.756 --> 00:03:40.026 A:middle
considerations when building an

00:03:40.026 --> 00:03:40.586 A:middle
application.

00:03:43.076 --> 00:03:45.366 A:middle
Creating for Apple Watch is more

00:03:45.366 --> 00:03:46.216 A:middle
than just creating a

00:03:46.216 --> 00:03:47.726 A:middle
miniaturized version of your iOS

00:03:47.726 --> 00:03:50.166 A:middle
app, it's about distilling down

00:03:50.166 --> 00:03:51.816 A:middle
what makes your experience

00:03:51.866 --> 00:03:52.166 A:middle
great.

00:03:52.306 --> 00:03:54.956 A:middle
An Apple Watch is a highly

00:03:54.956 --> 00:03:56.606 A:middle
personal device and provides

00:03:56.906 --> 00:03:58.416 A:middle
easy access to vital

00:03:58.416 --> 00:03:58.916 A:middle
information.

00:03:59.546 --> 00:04:02.706 A:middle
So while your iOS app may be

00:03:59.546 --> 00:04:02.706 A:middle
So while your iOS app may be

00:04:02.706 --> 00:04:03.826 A:middle
used for a couple of minutes

00:04:03.826 --> 00:04:04.646 A:middle
while you're waiting in line at

00:04:04.646 --> 00:04:06.666 A:middle
the grocery store, on Apple

00:04:06.666 --> 00:04:07.836 A:middle
Watch, the interactions are

00:04:07.836 --> 00:04:09.036 A:middle
typically a bit shorter.

00:04:10.236 --> 00:04:11.136 A:middle
People see information at a

00:04:11.136 --> 00:04:13.516 A:middle
glance and respond with just a

00:04:13.516 --> 00:04:14.816 A:middle
few taps.

00:04:15.436 --> 00:04:18.255 A:middle
All right, so creating for Apple

00:04:18.255 --> 00:04:21.416 A:middle
Watch may start in your

00:04:21.416 --> 00:04:23.616 A:middle
application, but it's about

00:04:23.616 --> 00:04:25.686 A:middle
building an experience that

00:04:25.746 --> 00:04:27.066 A:middle
spans all these different touch

00:04:27.116 --> 00:04:28.396 A:middle
points we offer throughout the

00:04:28.396 --> 00:04:28.846 A:middle
system.

00:04:30.206 --> 00:04:31.006 A:middle
Whether you're creating a

00:04:31.006 --> 00:04:34.206 A:middle
dynamic notification, using Siri

00:04:34.206 --> 00:04:36.506 A:middle
relevant actions to show timely

00:04:36.506 --> 00:04:37.776 A:middle
information right on the watch

00:04:37.776 --> 00:04:40.176 A:middle
face, or using complications.

00:04:41.006 --> 00:04:44.056 A:middle
So that experience is really

00:04:44.056 --> 00:04:46.026 A:middle
important to Apple Watch and

00:04:46.116 --> 00:04:47.586 A:middle
defining that experience is even

00:04:47.586 --> 00:04:48.226 A:middle
more important.

00:04:48.716 --> 00:04:50.426 A:middle
That experience should be a

00:04:50.426 --> 00:04:51.346 A:middle
couple of different things.

00:04:51.676 --> 00:04:53.776 A:middle
And it should be contextual and

00:04:53.776 --> 00:04:54.196 A:middle
timely.

00:04:55.246 --> 00:04:56.496 A:middle
Showing the right information to

00:04:56.496 --> 00:04:58.496 A:middle
your users at the right time.

00:04:59.056 --> 00:05:02.106 A:middle
It should be highly legible,

00:04:59.056 --> 00:05:02.106 A:middle
It should be highly legible,

00:05:03.196 --> 00:05:05.076 A:middle
showcasing beautiful design

00:05:05.836 --> 00:05:06.886 A:middle
right on the watch screen.

00:05:07.446 --> 00:05:10.426 A:middle
And it should prioritize quick

00:05:10.426 --> 00:05:12.766 A:middle
interactions, getting things

00:05:12.766 --> 00:05:16.666 A:middle
done with just a few taps.

00:05:16.826 --> 00:05:19.956 A:middle
Which brings us right back to

00:05:20.556 --> 00:05:21.656 A:middle
SwiftUI, because SwiftUI, you

00:05:21.656 --> 00:05:22.876 A:middle
can finally build those

00:05:22.876 --> 00:05:24.066 A:middle
experiences that you've always

00:05:24.066 --> 00:05:25.496 A:middle
wanted to build for Apple Watch.

00:05:26.106 --> 00:05:29.036 A:middle
So today we'll take a look at a

00:05:29.036 --> 00:05:30.236 A:middle
couple of different ways we can

00:05:30.236 --> 00:05:31.866 A:middle
use SwiftUI on watchOS.

00:05:33.166 --> 00:05:35.436 A:middle
First, we'll see how we can use

00:05:35.536 --> 00:05:37.586 A:middle
SwiftUI in an application, build

00:05:38.466 --> 00:05:40.606 A:middle
an engaging and highly

00:05:40.606 --> 00:05:43.006 A:middle
interactive notification, and

00:05:43.876 --> 00:05:45.676 A:middle
harness the power of the digital

00:05:45.676 --> 00:05:47.566 A:middle
crown to create tactile

00:05:47.566 --> 00:05:48.216 A:middle
experience.

00:05:49.656 --> 00:05:50.876 A:middle
So let's get started by looking

00:05:50.876 --> 00:05:51.666 A:middle
at an app.

00:05:52.386 --> 00:05:53.446 A:middle
And let's look at an app that

00:05:53.446 --> 00:05:55.106 A:middle
Josh and I have been working on.

00:06:02.246 --> 00:06:02.696 A:middle
All right.

00:06:02.696 --> 00:06:04.176 A:middle
So here I am in Xcode and the

00:06:04.176 --> 00:06:05.446 A:middle
app Josh and I have been working

00:06:05.446 --> 00:06:06.736 A:middle
on is called Pop Quiz.

00:06:07.686 --> 00:06:09.516 A:middle
It's a flashcard app that lets

00:06:09.516 --> 00:06:10.576 A:middle
me take my studies with me

00:06:10.576 --> 00:06:10.946 A:middle
anywhere.

00:06:11.516 --> 00:06:13.926 A:middle
And what I have open right now

00:06:13.926 --> 00:06:15.296 A:middle
is my interface controller.

00:06:16.406 --> 00:06:17.956 A:middle
If you've used WatchKit before,

00:06:18.316 --> 00:06:19.526 A:middle
interface controller will feel

00:06:19.526 --> 00:06:20.206 A:middle
familiar.

00:06:20.536 --> 00:06:22.076 A:middle
And this is an interface

00:06:22.076 --> 00:06:23.316 A:middle
controller, but it's a bit

00:06:23.356 --> 00:06:23.706 A:middle
different.

00:06:25.046 --> 00:06:27.726 A:middle
First, this interface controller

00:06:27.726 --> 00:06:29.826 A:middle
is subclassing WK hosting

00:06:29.826 --> 00:06:31.896 A:middle
controller, which is a type of

00:06:31.896 --> 00:06:32.866 A:middle
interface controller that is

00:06:32.866 --> 00:06:34.176 A:middle
provided by SwiftUI.

00:06:34.176 --> 00:06:38.246 A:middle
Now, because this is a type of

00:06:38.246 --> 00:06:40.576 A:middle
interface controller, I can use

00:06:40.576 --> 00:06:41.976 A:middle
this interface controller

00:06:42.746 --> 00:06:43.796 A:middle
wherever I'm using other

00:06:43.796 --> 00:06:44.806 A:middle
interface controllers.

00:06:46.056 --> 00:06:48.066 A:middle
For example, this one is set up

00:06:48.066 --> 00:06:49.786 A:middle
in my storyboard to be the

00:06:49.786 --> 00:06:51.266 A:middle
initial interface controller for

00:06:51.266 --> 00:06:53.296 A:middle
this app, making this interface

00:06:53.296 --> 00:06:54.606 A:middle
controller the entry point for

00:06:54.606 --> 00:06:55.306 A:middle
my application.

00:06:56.806 --> 00:06:58.306 A:middle
But, for example, if I wanted to

00:06:58.306 --> 00:07:00.926 A:middle
use a paging interface, in my

00:06:58.306 --> 00:07:00.926 A:middle
use a paging interface, in my

00:07:00.926 --> 00:07:02.646 A:middle
storyboard I can set up my

00:07:02.646 --> 00:07:04.336 A:middle
interface controller here to be

00:07:04.406 --> 00:07:06.116 A:middle
paged among side other WK

00:07:06.116 --> 00:07:07.596 A:middle
interface controllers.

00:07:08.086 --> 00:07:08.786 A:middle
Which gives it a nice

00:07:08.786 --> 00:07:10.286 A:middle
interoperability between

00:07:10.286 --> 00:07:11.936 A:middle
WatchKit and SwiftUI.

00:07:12.716 --> 00:07:15.266 A:middle
I can also push to this

00:07:15.266 --> 00:07:16.636 A:middle
interface controller using the

00:07:16.716 --> 00:07:17.966 A:middle
same WatchKit interface

00:07:17.966 --> 00:07:19.456 A:middle
controller push APIs.

00:07:20.306 --> 00:07:22.796 A:middle
Or I can use SwiftUI's

00:07:22.796 --> 00:07:25.586 A:middle
navigation button and give a

00:07:25.586 --> 00:07:27.516 A:middle
destination of an interface

00:07:27.516 --> 00:07:29.826 A:middle
controller name and push to

00:07:29.866 --> 00:07:31.706 A:middle
WatchKit from SwiftUI.

00:07:32.276 --> 00:07:35.666 A:middle
Okay. So let's go back to this

00:07:35.726 --> 00:07:35.886 A:middle
code.

00:07:37.106 --> 00:07:38.196 A:middle
So one other thing you might

00:07:38.196 --> 00:07:39.166 A:middle
notice here that's a bit

00:07:39.166 --> 00:07:40.736 A:middle
different from using WatchKit is

00:07:41.446 --> 00:07:42.766 A:middle
that there's no IB outlets.

00:07:44.196 --> 00:07:45.606 A:middle
That's because with WB hosting

00:07:45.606 --> 00:07:46.896 A:middle
controller and SwiftUI, our

00:07:47.666 --> 00:07:49.456 A:middle
entire applications interface

00:07:49.456 --> 00:07:51.616 A:middle
controller's views are defined

00:07:51.896 --> 00:07:52.546 A:middle
with SwiftUI.

00:07:53.496 --> 00:07:55.126 A:middle
That's so awesome.

00:07:56.216 --> 00:07:57.786 A:middle
So something else that's new

00:07:57.786 --> 00:07:59.816 A:middle
here is this use of the body

00:07:59.816 --> 00:08:00.346 A:middle
property.

00:07:59.816 --> 00:08:00.346 A:middle
property.

00:08:00.346 --> 00:08:01.766 A:middle
And this is a type of property

00:08:01.766 --> 00:08:03.786 A:middle
that's provided by WK hosting

00:08:03.786 --> 00:08:04.246 A:middle
controller.

00:08:04.696 --> 00:08:07.156 A:middle
And we override it here.

00:08:07.386 --> 00:08:09.026 A:middle
This body property lets us

00:08:09.316 --> 00:08:11.046 A:middle
specify which SwiftUI view we

00:08:11.046 --> 00:08:12.746 A:middle
want associated to our interface

00:08:12.746 --> 00:08:13.226 A:middle
controller.

00:08:13.736 --> 00:08:15.636 A:middle
And in this case, it's our topic

00:08:15.636 --> 00:08:17.736 A:middle
list, which is just a list of

00:08:17.736 --> 00:08:19.206 A:middle
topics I have of different

00:08:19.206 --> 00:08:19.796 A:middle
flashcards.

00:08:20.266 --> 00:08:21.316 A:middle
And you can see a preview of it

00:08:21.316 --> 00:08:23.326 A:middle
over here on the right side.

00:08:24.116 --> 00:08:24.756 A:middle
All right.

00:08:24.756 --> 00:08:26.036 A:middle
So let's go dive in to our topic

00:08:26.036 --> 00:08:26.346 A:middle
list.

00:08:26.926 --> 00:08:31.626 A:middle
So as the name implies, our

00:08:31.626 --> 00:08:33.275 A:middle
topic list is a list.

00:08:33.326 --> 00:08:36.275 A:middle
And this list says, for each

00:08:36.416 --> 00:08:37.976 A:middle
model -- sorry, for each topic

00:08:37.976 --> 00:08:39.885 A:middle
in my model, I'm creating a

00:08:39.885 --> 00:08:41.586 A:middle
navigation button that's going

00:08:41.586 --> 00:08:43.035 A:middle
to go to another SwiftUI view,

00:08:43.306 --> 00:08:44.736 A:middle
in this case, the flashcard

00:08:44.736 --> 00:08:45.086 A:middle
list.

00:08:46.436 --> 00:08:48.046 A:middle
And it creates a topic cell.

00:08:49.176 --> 00:08:50.636 A:middle
And I'm using this list row

00:08:50.776 --> 00:08:53.076 A:middle
platter color modifier, which is

00:08:53.076 --> 00:08:54.316 A:middle
what's putting that color on

00:08:54.316 --> 00:08:55.116 A:middle
each of these cells.

00:08:55.856 --> 00:08:58.096 A:middle
If I go down here to my topic

00:08:58.096 --> 00:08:59.836 A:middle
cell, you can see that's pretty

00:08:59.836 --> 00:09:00.406 A:middle
simple right now.

00:08:59.836 --> 00:09:00.406 A:middle
simple right now.

00:09:01.006 --> 00:09:03.926 A:middle
Right now it's just using my

00:09:03.926 --> 00:09:06.516 A:middle
topics title and it's being

00:09:06.516 --> 00:09:08.146 A:middle
modified to use the System

00:09:08.146 --> 00:09:09.666 A:middle
Rounded font, which looks

00:09:09.666 --> 00:09:10.836 A:middle
gorgeous on Apple Watch.

00:09:11.456 --> 00:09:14.206 A:middle
Okay. One other thing to note

00:09:14.206 --> 00:09:16.296 A:middle
here at the top is this use of

00:09:16.296 --> 00:09:17.596 A:middle
app object binding.

00:09:18.646 --> 00:09:19.966 A:middle
App object binding is how I'm

00:09:19.966 --> 00:09:21.986 A:middle
letting SwiftUI know that this

00:09:21.986 --> 00:09:23.866 A:middle
model is the source of truth for

00:09:23.866 --> 00:09:27.396 A:middle
this view and that my view

00:09:27.396 --> 00:09:29.066 A:middle
should be updated whenever this

00:09:29.066 --> 00:09:29.956 A:middle
model changes.

00:09:30.546 --> 00:09:33.096 A:middle
Now, understanding how data

00:09:33.096 --> 00:09:34.616 A:middle
flows through SwiftUI is a

00:09:34.616 --> 00:09:36.046 A:middle
fundamentally important topic,

00:09:36.046 --> 00:09:37.806 A:middle
and we have a whole talk

00:09:37.806 --> 00:09:39.656 A:middle
dedicated to it called Data Flow

00:09:39.656 --> 00:09:40.636 A:middle
in SwiftUI, and I highly

00:09:40.636 --> 00:09:41.496 A:middle
recommend that you check that

00:09:41.496 --> 00:09:41.656 A:middle
out.

00:09:42.676 --> 00:09:44.416 A:middle
For now, what we need to know is

00:09:44.416 --> 00:09:45.586 A:middle
that this is how I'm keeping my

00:09:45.586 --> 00:09:47.126 A:middle
model and my list in sync.

00:09:47.186 --> 00:09:49.866 A:middle
So let's go ahead and make this

00:09:49.866 --> 00:09:51.636 A:middle
preview live by pressing the

00:09:51.636 --> 00:09:54.136 A:middle
play button here.

00:09:54.256 --> 00:09:55.816 A:middle
The application comes alive and

00:09:55.816 --> 00:09:57.576 A:middle
I can scroll it right within

00:09:57.576 --> 00:09:57.916 A:middle
Xcode.

00:09:59.036 --> 00:10:00.696 A:middle
And you can see, by default, we

00:09:59.036 --> 00:10:00.696 A:middle
And you can see, by default, we

00:10:00.696 --> 00:10:01.746 A:middle
have a pretty well-behaving

00:10:01.746 --> 00:10:02.346 A:middle
application.

00:10:03.296 --> 00:10:05.106 A:middle
Just by using list, we're doing

00:10:05.106 --> 00:10:06.146 A:middle
some really cool things under

00:10:06.146 --> 00:10:07.056 A:middle
the hood, like giving this

00:10:07.056 --> 00:10:09.486 A:middle
really nice animation here as

00:10:09.486 --> 00:10:11.406 A:middle
the list scrolls, we collapse

00:10:11.436 --> 00:10:12.386 A:middle
the cells and it feels like your

00:10:12.386 --> 00:10:13.696 A:middle
content is just flowing right

00:10:13.696 --> 00:10:14.986 A:middle
off your wrist.

00:10:16.656 --> 00:10:17.486 A:middle
All right.

00:10:17.746 --> 00:10:18.866 A:middle
So there's been a couple things

00:10:18.866 --> 00:10:19.906 A:middle
I've been meaning to do to this

00:10:19.906 --> 00:10:21.446 A:middle
list, let's go ahead and do

00:10:21.446 --> 00:10:21.776 A:middle
those now.

00:10:23.256 --> 00:10:25.676 A:middle
First is I have -- I want to add

00:10:25.676 --> 00:10:27.656 A:middle
a label to each of my -- in my

00:10:27.656 --> 00:10:30.166 A:middle
topic cell here that just shows

00:10:30.166 --> 00:10:31.726 A:middle
the count of cards I have for

00:10:31.756 --> 00:10:32.876 A:middle
each of my topics.

00:10:33.876 --> 00:10:35.126 A:middle
Just so I can see at a glance

00:10:35.126 --> 00:10:36.166 A:middle
like how many morphemes do I

00:10:36.166 --> 00:10:36.676 A:middle
need to study.

00:10:37.226 --> 00:10:39.226 A:middle
Let's go ahead and just do that

00:10:39.226 --> 00:10:39.426 A:middle
now.

00:10:39.426 --> 00:10:41.146 A:middle
And to do that I need a VStack.

00:10:42.136 --> 00:10:43.326 A:middle
Well, the editor in Xcode makes

00:10:43.326 --> 00:10:44.536 A:middle
that super easy to do.

00:10:45.996 --> 00:10:47.066 A:middle
I can just command click on my

00:10:47.066 --> 00:10:48.836 A:middle
text here and bring up the quick

00:10:48.836 --> 00:10:49.476 A:middle
action menu.

00:10:50.876 --> 00:10:52.756 A:middle
And I can select the embed in

00:10:52.756 --> 00:10:53.426 A:middle
VStack option.

00:10:54.056 --> 00:10:56.746 A:middle
The code is inserted.

00:10:57.666 --> 00:11:00.026 A:middle
And now below this text, I can

00:10:57.666 --> 00:11:00.026 A:middle
And now below this text, I can

00:11:00.026 --> 00:11:02.236 A:middle
add the count of cards I have.

00:11:03.076 --> 00:11:03.836 A:middle
And you can see the preview

00:11:03.836 --> 00:11:04.536 A:middle
updates right away.

00:11:05.716 --> 00:11:07.486 A:middle
Now, you can see that VStack

00:11:07.486 --> 00:11:09.156 A:middle
aligns center by default.

00:11:09.386 --> 00:11:11.456 A:middle
And in this case, I want a

00:11:11.456 --> 00:11:12.266 A:middle
leaning alignment.

00:11:13.466 --> 00:11:15.546 A:middle
Again we can do that with the

00:11:16.116 --> 00:11:16.596 A:middle
editor.

00:11:16.596 --> 00:11:18.766 A:middle
If I select this VStack, command

00:11:18.766 --> 00:11:20.086 A:middle
click on it, and select the

00:11:20.136 --> 00:11:22.466 A:middle
inspector, I get this window

00:11:22.466 --> 00:11:23.516 A:middle
that shows me different kinds of

00:11:23.516 --> 00:11:25.486 A:middle
modifiers I can apply to this

00:11:25.486 --> 00:11:25.756 A:middle
VStack.

00:11:26.816 --> 00:11:28.146 A:middle
And in this case I want to use

00:11:28.296 --> 00:11:29.516 A:middle
the leading alignment option.

00:11:30.096 --> 00:11:31.996 A:middle
You can see the preview updates

00:11:31.996 --> 00:11:33.006 A:middle
again right away.

00:11:33.006 --> 00:11:35.046 A:middle
It's just super fast.

00:11:35.936 --> 00:11:37.306 A:middle
Now, we're using the leading

00:11:37.306 --> 00:11:38.176 A:middle
alignments and trailing

00:11:38.176 --> 00:11:40.206 A:middle
alignments in SwiftUI, because

00:11:40.206 --> 00:11:41.936 A:middle
by default we support right to

00:11:41.936 --> 00:11:42.586 A:middle
left languages.

00:11:43.686 --> 00:11:44.946 A:middle
If I have a localizable strings

00:11:44.946 --> 00:11:46.276 A:middle
file on my project that has

00:11:46.276 --> 00:11:48.696 A:middle
Arabic or Hebrew, by default,

00:11:48.696 --> 00:11:50.106 A:middle
this entire app's user interface

00:11:50.296 --> 00:11:52.596 A:middle
will flip and will support right

00:11:52.596 --> 00:11:54.466 A:middle
to left languages by default.

00:11:55.656 --> 00:11:56.186 A:middle
All right.

00:11:56.256 --> 00:11:57.516 A:middle
So there is actually something

00:11:57.516 --> 00:11:58.686 A:middle
else I want to add here, which

00:11:58.686 --> 00:11:59.726 A:middle
is like a symbol I have

00:11:59.726 --> 00:12:00.936 A:middle
associated to each of these

00:11:59.726 --> 00:12:00.936 A:middle
associated to each of these

00:12:00.936 --> 00:12:01.596 A:middle
topics.

00:12:01.996 --> 00:12:03.496 A:middle
And I want that to appear on the

00:12:03.496 --> 00:12:05.016 A:middle
leading side of both of my

00:12:05.016 --> 00:12:05.606 A:middle
texts.

00:12:06.136 --> 00:12:08.176 A:middle
And I can do that with an

00:12:08.176 --> 00:12:08.506 A:middle
HStack.

00:12:10.096 --> 00:12:11.776 A:middle
So, again, let's use the editor

00:12:11.776 --> 00:12:13.146 A:middle
here, command click on this

00:12:13.146 --> 00:12:15.426 A:middle
VStack, and select the embed in

00:12:15.426 --> 00:12:16.136 A:middle
HStack option.

00:12:16.706 --> 00:12:19.036 A:middle
And then I can insert my symbol,

00:12:20.086 --> 00:12:21.016 A:middle
which is just an emoji.

00:12:22.286 --> 00:12:23.976 A:middle
Now, that's a bit small, I'd

00:12:23.976 --> 00:12:26.306 A:middle
actually like that a bit bigger.

00:12:26.306 --> 00:12:27.706 A:middle
So, again, I can return to our

00:12:27.706 --> 00:12:30.006 A:middle
now familiar inspector, command

00:12:30.006 --> 00:12:31.826 A:middle
click on this text, bring up the

00:12:31.826 --> 00:12:32.476 A:middle
inspector.

00:12:33.196 --> 00:12:34.556 A:middle
And you can see I now have

00:12:34.556 --> 00:12:35.846 A:middle
different contextual options.

00:12:37.046 --> 00:12:38.666 A:middle
And I can select here on my font

00:12:39.616 --> 00:12:40.256 A:middle
a title font.

00:12:40.696 --> 00:12:42.536 A:middle
And these inspectors make it so

00:12:42.536 --> 00:12:44.436 A:middle
easy to learn and like how to

00:12:44.436 --> 00:12:45.896 A:middle
add and modify this code,

00:12:45.896 --> 00:12:47.886 A:middle
because it's adding real code

00:12:47.886 --> 00:12:49.006 A:middle
into my code base.

00:12:49.006 --> 00:12:51.026 A:middle
It's not changing a POS file on

00:12:51.026 --> 00:12:52.276 A:middle
my storyboard, it's actually

00:12:52.356 --> 00:12:53.636 A:middle
teaching me how to write good

00:12:53.636 --> 00:12:54.346 A:middle
SwiftUI code.

00:12:54.346 --> 00:12:55.026 A:middle
All right.

00:12:56.436 --> 00:12:59.146 A:middle
So with just a few lines of

00:12:59.146 --> 00:13:00.356 A:middle
SwiftUI code, we've built out

00:12:59.146 --> 00:13:00.356 A:middle
SwiftUI code, we've built out

00:13:00.356 --> 00:13:01.206 A:middle
this cell a bit more.

00:13:01.206 --> 00:13:02.686 A:middle
And, again, this entire time

00:13:02.686 --> 00:13:04.746 A:middle
it's been running live right in

00:13:04.746 --> 00:13:05.076 A:middle
Xcode.

00:13:05.146 --> 00:13:07.306 A:middle
I have a need to build and run

00:13:07.306 --> 00:13:07.686 A:middle
this app.

00:13:09.186 --> 00:13:10.476 A:middle
This kind of iteration is just

00:13:10.476 --> 00:13:12.006 A:middle
so powerful on Apple Watch.

00:13:12.996 --> 00:13:14.576 A:middle
We can finally get this really

00:13:14.576 --> 00:13:16.716 A:middle
quick design flow going and I

00:13:16.716 --> 00:13:17.956 A:middle
don't need to like do a

00:13:17.956 --> 00:13:19.236 A:middle
round-trip to the device.

00:13:19.796 --> 00:13:23.166 A:middle
Okay. So there's something else

00:13:23.306 --> 00:13:25.706 A:middle
in SwiftUI that's brand-new with

00:13:25.706 --> 00:13:28.046 A:middle
it and is unique to Apple Watch,

00:13:29.266 --> 00:13:30.906 A:middle
and that's an entirely new way,

00:13:31.416 --> 00:13:32.946 A:middle
new style of scrolling.

00:13:34.246 --> 00:13:35.956 A:middle
So to do that, let's first add a

00:13:35.956 --> 00:13:37.166 A:middle
bit of height to each of these

00:13:37.166 --> 00:13:37.546 A:middle
cells.

00:13:37.596 --> 00:13:40.786 A:middle
I'll go back to the inspector

00:13:40.786 --> 00:13:44.756 A:middle
here and go to my height, and

00:13:45.416 --> 00:13:46.586 A:middle
out of height, elect 100.

00:13:47.096 --> 00:13:49.196 A:middle
The preview updates.

00:13:50.056 --> 00:13:51.256 A:middle
And now I can go to my list.

00:13:52.076 --> 00:13:53.386 A:middle
And this new style of scrolling

00:13:53.386 --> 00:13:55.136 A:middle
is called the Carousel style.

00:13:56.166 --> 00:13:57.606 A:middle
With just one line of SwiftUI

00:13:57.706 --> 00:13:58.926 A:middle
code, we've completely

00:13:58.926 --> 00:14:00.436 A:middle
transformed the way that this

00:13:58.926 --> 00:14:00.436 A:middle
transformed the way that this

00:14:00.476 --> 00:14:01.306 A:middle
list scrolls.

00:14:02.556 --> 00:14:03.596 A:middle
If I go ahead and scroll it down

00:14:03.596 --> 00:14:05.576 A:middle
in the preview, you can see that

00:14:05.576 --> 00:14:07.296 A:middle
each of these cards now centers

00:14:07.466 --> 00:14:08.076 A:middle
right in the middle of the

00:14:08.076 --> 00:14:08.516 A:middle
screen.

00:14:09.766 --> 00:14:10.856 A:middle
This gives our users a nice

00:14:10.906 --> 00:14:11.826 A:middle
sense of place.

00:14:11.886 --> 00:14:12.726 A:middle
As they're scrolling this

00:14:12.726 --> 00:14:14.526 A:middle
content, it let's you bring

00:14:14.656 --> 00:14:16.176 A:middle
focus onto each of the elements

00:14:16.176 --> 00:14:16.676 A:middle
in the list.

00:14:17.786 --> 00:14:19.706 A:middle
Now, I decided to use this type

00:14:19.766 --> 00:14:21.306 A:middle
of scrolling for Pop Quiz

00:14:21.306 --> 00:14:22.496 A:middle
because we only have a handful

00:14:22.496 --> 00:14:23.626 A:middle
of elements in this list.

00:14:23.886 --> 00:14:25.866 A:middle
And I can make each of them big

00:14:25.866 --> 00:14:26.786 A:middle
by using a frame.

00:14:26.786 --> 00:14:28.986 A:middle
And this is where the Carousel

00:14:28.986 --> 00:14:30.156 A:middle
style really shines.

00:14:31.446 --> 00:14:32.806 A:middle
The Carousel list style is also

00:14:32.806 --> 00:14:33.746 A:middle
a great option if you have

00:14:33.806 --> 00:14:35.726 A:middle
interactive elements within each

00:14:35.726 --> 00:14:37.406 A:middle
of your cells, because it gives

00:14:37.406 --> 00:14:39.396 A:middle
that nice bit of focus and lets

00:14:39.396 --> 00:14:40.806 A:middle
our users have nice big tap

00:14:41.626 --> 00:14:41.856 A:middle
targets.

00:14:43.466 --> 00:14:47.796 A:middle
Okay. So there's also two new

00:14:47.796 --> 00:14:48.966 A:middle
types of interactions we've

00:14:48.966 --> 00:14:50.586 A:middle
added with List, both of which

00:14:50.676 --> 00:14:52.686 A:middle
are brand-new on Apple Watch.

00:14:53.616 --> 00:14:55.466 A:middle
The first is the ability to drag

00:14:55.466 --> 00:14:56.046 A:middle
to reorder.

00:14:57.276 --> 00:14:58.216 A:middle
Now, we've made this really

00:14:58.216 --> 00:14:59.786 A:middle
simple with just one modifier.

00:15:01.296 --> 00:15:03.886 A:middle
You can add on move and pass on

00:15:03.886 --> 00:15:05.766 A:middle
move closure that tells it how

00:15:05.766 --> 00:15:07.726 A:middle
to update your data store.

00:15:07.776 --> 00:15:09.846 A:middle
In this case, just moving from

00:15:09.846 --> 00:15:13.376 A:middle
one element to the next.

00:15:13.376 --> 00:15:16.126 A:middle
And I can add a delete, a swipe

00:15:16.126 --> 00:15:16.516 A:middle
to delete.

00:15:17.526 --> 00:15:18.726 A:middle
What used to be a bunch of

00:15:18.766 --> 00:15:20.096 A:middle
delegate methods and setting up

00:15:20.096 --> 00:15:22.306 A:middle
swipe actions is just one line

00:15:22.306 --> 00:15:23.076 A:middle
of SwiftUI code.

00:15:23.136 --> 00:15:26.866 A:middle
So now I can scroll this list,

00:15:26.866 --> 00:15:29.816 A:middle
we have this really beautiful

00:15:29.816 --> 00:15:32.256 A:middle
animation, these really nice

00:15:32.256 --> 00:15:33.796 A:middle
built out cells, all this code

00:15:33.796 --> 00:15:35.866 A:middle
is right here, right next to my

00:15:35.866 --> 00:15:36.256 A:middle
preview.

00:15:36.796 --> 00:15:38.116 A:middle
And I find a cell I want to

00:15:38.116 --> 00:15:39.826 A:middle
delete, I can just swipe it

00:15:39.826 --> 00:15:41.466 A:middle
right in the preview and delete

00:15:41.466 --> 00:15:41.556 A:middle
it.

00:15:41.646 --> 00:15:43.796 A:middle
It's just so cool and so

00:15:43.796 --> 00:15:44.306 A:middle
powerful.

00:15:46.516 --> 00:15:53.546 A:middle
[ Applause ]

00:15:54.046 --> 00:15:54.656 A:middle
All right.

00:15:55.146 --> 00:15:56.376 A:middle
So that was how we could use

00:15:56.426 --> 00:15:59.466 A:middle
SwiftUI in our topic list and to

00:15:59.466 --> 00:16:00.486 A:middle
build out these really great

00:15:59.466 --> 00:16:00.486 A:middle
build out these really great

00:16:00.486 --> 00:16:01.926 A:middle
interactions that were just not

00:16:01.926 --> 00:16:03.436 A:middle
possible before on Apple Watch.

00:16:05.016 --> 00:16:06.536 A:middle
But that's just the start of

00:16:06.536 --> 00:16:08.586 A:middle
what's possible on SwiftUI and

00:16:08.586 --> 00:16:09.226 A:middle
Apple Watch.

00:16:10.776 --> 00:16:12.286 A:middle
To see how to take your

00:16:12.286 --> 00:16:14.326 A:middle
experiences to the next level, I

00:16:14.446 --> 00:16:15.406 A:middle
would like to invite Josh

00:16:15.446 --> 00:16:16.366 A:middle
Weinberg to the stage.

00:16:17.516 --> 00:16:23.196 A:middle
[ Applause ]

00:16:23.696 --> 00:16:24.266 A:middle
&gt;&gt; Thanks, Matthew.

00:16:25.546 --> 00:16:28.476 A:middle
So Matthew talked a lot about

00:16:28.476 --> 00:16:29.586 A:middle
how we can use the power of

00:16:29.586 --> 00:16:31.416 A:middle
SwiftUI to create amazing

00:16:31.416 --> 00:16:33.836 A:middle
interactions just for Apple

00:16:33.836 --> 00:16:34.166 A:middle
Watch.

00:16:34.826 --> 00:16:37.266 A:middle
But, as we said, the experience

00:16:37.266 --> 00:16:38.866 A:middle
on Apple Watch is about much

00:16:38.866 --> 00:16:42.176 A:middle
more than just the application.

00:16:43.646 --> 00:16:45.436 A:middle
To build an experience on Apple

00:16:45.436 --> 00:16:47.406 A:middle
Watch, first I want to dive into

00:16:47.486 --> 00:16:49.016 A:middle
interactive notifications.

00:16:49.886 --> 00:16:51.486 A:middle
Now, interactive notifications

00:16:51.486 --> 00:16:53.396 A:middle
on Apple Watch are the primary

00:16:53.396 --> 00:16:55.076 A:middle
way which you have to provide

00:16:55.216 --> 00:16:56.226 A:middle
timely and contextual

00:16:56.226 --> 00:16:58.156 A:middle
information to your users.

00:16:59.536 --> 00:17:01.456 A:middle
On Apple Watch, notifications

00:16:59.536 --> 00:17:01.456 A:middle
On Apple Watch, notifications

00:17:01.456 --> 00:17:02.486 A:middle
are made up of two primary

00:17:02.546 --> 00:17:03.046 A:middle
parts.

00:17:03.586 --> 00:17:05.476 A:middle
The first is the short look.

00:17:06.306 --> 00:17:07.606 A:middle
Now, a short look appears

00:17:07.606 --> 00:17:08.996 A:middle
immediately upon registries and

00:17:08.996 --> 00:17:10.296 A:middle
will provide information

00:17:10.296 --> 00:17:11.826 A:middle
directly from the notification

00:17:11.826 --> 00:17:12.266 A:middle
payload.

00:17:13.046 --> 00:17:14.185 A:middle
This also includes your

00:17:14.185 --> 00:17:15.705 A:middle
application icon automatically.

00:17:16.896 --> 00:17:18.465 A:middle
After looking at the short look

00:17:18.465 --> 00:17:20.036 A:middle
for a period of time, it will

00:17:20.036 --> 00:17:21.766 A:middle
transition automatically into

00:17:21.766 --> 00:17:22.386 A:middle
the long look.

00:17:22.455 --> 00:17:25.006 A:middle
The long look is a scrolling

00:17:25.006 --> 00:17:26.316 A:middle
interface which allows you to

00:17:26.316 --> 00:17:28.916 A:middle
specify both a custom body as

00:17:28.916 --> 00:17:30.026 A:middle
well as these notification

00:17:30.026 --> 00:17:31.246 A:middle
actions below.

00:17:32.146 --> 00:17:33.546 A:middle
Here you're seeing a beautiful

00:17:33.546 --> 00:17:35.026 A:middle
implementation from Yelp where

00:17:35.026 --> 00:17:36.136 A:middle
they've created a complete

00:17:36.136 --> 00:17:37.436 A:middle
reservation confirmation

00:17:37.436 --> 00:17:39.236 A:middle
experience completely within

00:17:39.236 --> 00:17:39.986 A:middle
their notification.

00:17:41.366 --> 00:17:43.116 A:middle
To see how we can extend Pop

00:17:43.116 --> 00:17:45.026 A:middle
Quiz to really live up to its

00:17:45.026 --> 00:17:47.326 A:middle
name, let's add a notification

00:17:47.326 --> 00:17:48.726 A:middle
which will place a flashcard

00:17:48.726 --> 00:17:51.066 A:middle
right into the body to make sure

00:17:51.066 --> 00:17:54.976 A:middle
I'm keeping up on my studies.

00:17:55.206 --> 00:17:58.386 A:middle
So where I want to start is in

00:17:58.386 --> 00:17:59.756 A:middle
the notification controller.

00:18:00.506 --> 00:18:02.296 A:middle
The notification controller was

00:18:02.326 --> 00:18:04.376 A:middle
provided by the template when we

00:18:04.376 --> 00:18:06.076 A:middle
created this project by just

00:18:06.076 --> 00:18:07.576 A:middle
selecting the include

00:18:07.576 --> 00:18:08.876 A:middle
notification checkbox.

00:18:10.146 --> 00:18:11.896 A:middle
Very much like the interface

00:18:11.896 --> 00:18:13.476 A:middle
controller, this is new, it's

00:18:14.266 --> 00:18:16.876 A:middle
part of SwiftUI, but it comes

00:18:16.876 --> 00:18:19.486 A:middle
from the WK user interface

00:18:19.486 --> 00:18:20.436 A:middle
controller underneath.

00:18:21.306 --> 00:18:23.006 A:middle
So this new user notification

00:18:23.006 --> 00:18:24.696 A:middle
hosting controller provides the

00:18:24.696 --> 00:18:25.956 A:middle
entry point for interactive

00:18:25.956 --> 00:18:27.276 A:middle
notification and allows us to

00:18:27.276 --> 00:18:28.836 A:middle
provide SwiftUI content.

00:18:29.146 --> 00:18:31.396 A:middle
If you've used these before,

00:18:31.446 --> 00:18:33.016 A:middle
it'll be very familiar and you

00:18:33.016 --> 00:18:34.696 A:middle
have the same did receive method

00:18:34.776 --> 00:18:35.356 A:middle
coming from the user

00:18:35.356 --> 00:18:36.446 A:middle
notification framework.

00:18:37.186 --> 00:18:39.206 A:middle
The did receive method allows us

00:18:39.206 --> 00:18:41.286 A:middle
to extract information from the

00:18:41.286 --> 00:18:43.926 A:middle
notification, store it within

00:18:43.926 --> 00:18:45.786 A:middle
our interface controller, and

00:18:45.786 --> 00:18:47.296 A:middle
also provide those notification

00:18:47.296 --> 00:18:48.996 A:middle
actions that appear below the

00:18:48.996 --> 00:18:49.986 A:middle
notifications' body.

00:18:50.726 --> 00:18:52.706 A:middle
And then much like the interface

00:18:52.706 --> 00:18:54.096 A:middle
controller, we have the same

00:18:54.096 --> 00:18:54.926 A:middle
body property.

00:18:55.766 --> 00:18:57.156 A:middle
The one difference here is,

00:18:57.156 --> 00:18:58.576 A:middle
after did receive is called,

00:18:59.176 --> 00:19:00.886 A:middle
we'll automatically invalidate

00:18:59.176 --> 00:19:00.886 A:middle
we'll automatically invalidate

00:19:00.936 --> 00:19:02.596 A:middle
and reevaluate your body

00:19:02.596 --> 00:19:03.556 A:middle
property so that your

00:19:03.556 --> 00:19:04.886 A:middle
notifications' view is

00:19:04.886 --> 00:19:06.346 A:middle
completely up-to-date.

00:19:07.236 --> 00:19:08.656 A:middle
To see what this notification

00:19:08.656 --> 00:19:10.006 A:middle
looks like, let's jump in to the

00:19:10.006 --> 00:19:10.946 A:middle
notifications' view.

00:19:12.146 --> 00:19:14.586 A:middle
Now, here we'll have a preview

00:19:14.586 --> 00:19:15.426 A:middle
of what this notification

00:19:15.426 --> 00:19:17.266 A:middle
appears, but it's not really

00:19:17.266 --> 00:19:18.296 A:middle
super useful if I'm trying to

00:19:18.296 --> 00:19:18.696 A:middle
study.

00:19:18.696 --> 00:19:20.726 A:middle
Here at the bottom we can see a

00:19:20.726 --> 00:19:22.206 A:middle
flashcard view which is showing

00:19:22.206 --> 00:19:23.976 A:middle
you both the question and the

00:19:23.976 --> 00:19:24.366 A:middle
answer.

00:19:25.596 --> 00:19:27.026 A:middle
To build this out and make it

00:19:27.026 --> 00:19:28.686 A:middle
feel a little better, I want go

00:19:28.686 --> 00:19:30.186 A:middle
and pin this preview, using the

00:19:30.236 --> 00:19:31.456 A:middle
pin button in the bottom left of

00:19:31.456 --> 00:19:34.026 A:middle
the canvas, and then go look at

00:19:34.026 --> 00:19:34.806 A:middle
the flashcard view.

00:19:35.716 --> 00:19:37.176 A:middle
And so now we can see I'm

00:19:37.266 --> 00:19:39.016 A:middle
building my flashcard as well as

00:19:39.016 --> 00:19:40.106 A:middle
seeing what it will look like in

00:19:40.106 --> 00:19:42.886 A:middle
context when I'm all done.

00:19:43.096 --> 00:19:44.626 A:middle
So I've already created some

00:19:44.626 --> 00:19:46.116 A:middle
views which I can place into my

00:19:46.186 --> 00:19:47.626 A:middle
flashcard to make this look a

00:19:47.626 --> 00:19:48.196 A:middle
lot better.

00:19:49.066 --> 00:19:50.226 A:middle
So the first thing I want to do

00:19:50.226 --> 00:19:52.016 A:middle
is replace both of these texts

00:19:52.436 --> 00:19:53.906 A:middle
by wrapping them within this

00:19:53.906 --> 00:19:54.306 A:middle
side.

00:19:55.056 --> 00:19:57.356 A:middle
Now, a flashcard has two sides.

00:19:57.506 --> 00:19:58.616 A:middle
So let's wrap this in both

00:19:58.616 --> 00:19:59.196 A:middle
sides.

00:19:59.196 --> 00:20:00.836 A:middle
And we've gotten this really

00:19:59.196 --> 00:20:00.836 A:middle
And we've gotten this really

00:20:00.836 --> 00:20:02.586 A:middle
nice chrome around my flashcard

00:20:02.586 --> 00:20:03.896 A:middle
and all the default styling that

00:20:03.896 --> 00:20:05.406 A:middle
I'd want for any content which I

00:20:05.406 --> 00:20:06.836 A:middle
put inside of them.

00:20:07.346 --> 00:20:09.436 A:middle
But I can still see both sides

00:20:09.436 --> 00:20:10.936 A:middle
at once, and I'm really trying

00:20:10.936 --> 00:20:11.826 A:middle
to get better at studying.

00:20:12.756 --> 00:20:14.756 A:middle
So I want to replace this VStack

00:20:14.756 --> 00:20:16.046 A:middle
with a custom container which

00:20:16.046 --> 00:20:17.726 A:middle
I've written, which I call Flip

00:20:17.726 --> 00:20:18.026 A:middle
View.

00:20:18.976 --> 00:20:21.056 A:middle
Now, the Flip View provides all

00:20:21.056 --> 00:20:22.686 A:middle
of the transformations as well

00:20:22.686 --> 00:20:23.816 A:middle
as the interactivity, which

00:20:23.816 --> 00:20:24.666 A:middle
we're going to look at in a

00:20:24.666 --> 00:20:25.126 A:middle
second.

00:20:25.646 --> 00:20:27.326 A:middle
And all of the source code for

00:20:27.326 --> 00:20:28.756 A:middle
this will be available after the

00:20:28.756 --> 00:20:29.876 A:middle
conference, a sample code.

00:20:31.066 --> 00:20:33.036 A:middle
So to see what the notification

00:20:33.036 --> 00:20:34.976 A:middle
looks like in practice, we can

00:20:34.976 --> 00:20:36.316 A:middle
build and run using the

00:20:36.316 --> 00:20:38.036 A:middle
notification scheme which was

00:20:38.036 --> 00:20:39.856 A:middle
included as part of the Xcode

00:20:39.856 --> 00:20:40.296 A:middle
project.

00:20:40.456 --> 00:20:42.256 A:middle
And we'll see that the short

00:20:42.256 --> 00:20:43.116 A:middle
look appears.

00:20:43.296 --> 00:20:44.626 A:middle
We transition directly into the

00:20:44.626 --> 00:20:47.156 A:middle
long look, which looks exactly

00:20:47.156 --> 00:20:48.356 A:middle
like our preview like we'd want.

00:20:48.616 --> 00:20:49.516 A:middle
We get these notification

00:20:49.516 --> 00:20:50.466 A:middle
actions below.

00:20:50.746 --> 00:20:51.776 A:middle
And as promised, the

00:20:51.776 --> 00:20:53.026 A:middle
notification is fully

00:20:53.026 --> 00:20:53.526 A:middle
interactive.

00:20:53.666 --> 00:20:54.976 A:middle
I can tap the flashcard to flip

00:20:54.976 --> 00:20:57.086 A:middle
it over or even drag to interact

00:20:57.316 --> 00:20:58.506 A:middle
directly within the notification

00:20:58.506 --> 00:20:58.816 A:middle
body.

00:21:00.361 --> 00:21:02.361 A:middle
[ Applause ]

00:21:02.706 --> 00:21:04.456 A:middle
Now, that was really easy

00:21:04.456 --> 00:21:06.256 A:middle
question, and I definitely got

00:21:06.256 --> 00:21:10.506 A:middle
that one right.

00:21:10.506 --> 00:21:12.926 A:middle
So we've seen with taking

00:21:12.926 --> 00:21:14.666 A:middle
advantage of the same technology

00:21:14.906 --> 00:21:15.916 A:middle
that we've used to build the

00:21:15.916 --> 00:21:18.046 A:middle
application, we can create rich

00:21:18.046 --> 00:21:19.496 A:middle
and interactive experiences

00:21:19.496 --> 00:21:20.446 A:middle
within the notification.

00:21:21.976 --> 00:21:23.956 A:middle
Finally, there's one more piece

00:21:23.956 --> 00:21:24.996 A:middle
of the Apple Watch which I'd

00:21:24.996 --> 00:21:26.646 A:middle
like to talk about, which is the

00:21:26.646 --> 00:21:27.416 A:middle
digital crown.

00:21:28.436 --> 00:21:29.736 A:middle
Now, you've already been able to

00:21:29.736 --> 00:21:30.926 A:middle
take advantage of the digital

00:21:30.926 --> 00:21:32.286 A:middle
crown within your WatchKit

00:21:32.286 --> 00:21:33.726 A:middle
applications using the

00:21:33.726 --> 00:21:35.496 A:middle
WKCrownSequencer API.

00:21:36.866 --> 00:21:39.346 A:middle
This API allowed you to do some

00:21:39.346 --> 00:21:40.876 A:middle
very limited things with the

00:21:40.876 --> 00:21:43.666 A:middle
crown, digital crown, but we

00:21:43.666 --> 00:21:45.026 A:middle
want to be able -- we want you

00:21:45.026 --> 00:21:46.526 A:middle
to be able to create interfaces

00:21:46.526 --> 00:21:47.496 A:middle
much more like the ones which we

00:21:47.496 --> 00:21:48.986 A:middle
create in our own applications.

00:21:49.496 --> 00:21:52.906 A:middle
With Apple Watch Series 4, we

00:21:52.906 --> 00:21:54.686 A:middle
introduced a brand-new haptic

00:21:54.716 --> 00:21:55.166 A:middle
crown.

00:21:55.796 --> 00:21:57.536 A:middle
The haptic crown, digital crown,

00:21:57.616 --> 00:21:59.846 A:middle
provides feedback as content

00:21:59.846 --> 00:22:00.806 A:middle
scrolls on the screen.

00:21:59.846 --> 00:22:00.806 A:middle
scrolls on the screen.

00:22:01.506 --> 00:22:02.726 A:middle
This provides some really nice

00:22:02.726 --> 00:22:04.066 A:middle
resistance and weight to each

00:22:04.066 --> 00:22:05.906 A:middle
element, allowing the content to

00:22:05.906 --> 00:22:07.086 A:middle
feel more connected to the

00:22:07.086 --> 00:22:08.456 A:middle
digital crown than it ever had

00:22:08.486 --> 00:22:08.886 A:middle
before.

00:22:10.386 --> 00:22:11.586 A:middle
We've already taken advantage of

00:22:11.586 --> 00:22:13.216 A:middle
this all across our own

00:22:13.306 --> 00:22:14.586 A:middle
applications.

00:22:14.656 --> 00:22:16.596 A:middle
For example, in workout, where

00:22:16.596 --> 00:22:18.016 A:middle
we have this beautiful list

00:22:18.016 --> 00:22:19.266 A:middle
where the elements have a lot of

00:22:19.266 --> 00:22:20.206 A:middle
weight to them as they scroll

00:22:20.206 --> 00:22:20.536 A:middle
by.

00:22:21.306 --> 00:22:22.686 A:middle
Or when you're creating a custom

00:22:22.686 --> 00:22:24.116 A:middle
timer and you have these pickers

00:22:24.116 --> 00:22:25.176 A:middle
where as you fly through, it

00:22:25.176 --> 00:22:26.286 A:middle
provides haptic feedback.

00:22:27.426 --> 00:22:29.166 A:middle
In SwiftUI, we've provided

00:22:29.166 --> 00:22:30.656 A:middle
system components that give you

00:22:30.656 --> 00:22:32.446 A:middle
this all out-of-the-box.

00:22:32.576 --> 00:22:34.926 A:middle
For example, list, picker, and

00:22:34.926 --> 00:22:36.256 A:middle
scroll view will do all of this

00:22:36.256 --> 00:22:36.586 A:middle
for you.

00:22:37.986 --> 00:22:39.096 A:middle
But if you're going to build

00:22:39.096 --> 00:22:40.386 A:middle
something a little more custom,

00:22:41.296 --> 00:22:42.926 A:middle
we have some new modifiers as

00:22:42.926 --> 00:22:44.446 A:middle
part of SwiftUI that allow you

00:22:44.446 --> 00:22:45.636 A:middle
to realize these visions.

00:22:46.846 --> 00:22:48.146 A:middle
The first kind custom interface

00:22:48.146 --> 00:22:49.476 A:middle
I want to talk about is what we

00:22:49.476 --> 00:22:51.156 A:middle
call a free scrolling interface.

00:22:51.896 --> 00:22:53.256 A:middle
In a free scrolling interface,

00:22:53.726 --> 00:22:55.096 A:middle
you don't really have concrete

00:22:55.136 --> 00:22:57.506 A:middle
stops between your content, and

00:22:57.506 --> 00:22:58.786 A:middle
instead you want to be able to

00:22:58.786 --> 00:23:00.536 A:middle
stop anywhere along the sequence

00:22:58.786 --> 00:23:00.536 A:middle
stop anywhere along the sequence

00:23:00.536 --> 00:23:01.526 A:middle
which the digital crown is

00:23:01.526 --> 00:23:01.876 A:middle
moving.

00:23:03.336 --> 00:23:04.616 A:middle
To implement something like

00:23:04.616 --> 00:23:06.276 A:middle
this, you use the new Digital

00:23:06.276 --> 00:23:07.866 A:middle
Crown Rotation Modifier,

00:23:08.136 --> 00:23:09.266 A:middle
provided by SwiftUI.

00:23:10.036 --> 00:23:11.466 A:middle
In its really simple form here,

00:23:11.666 --> 00:23:13.516 A:middle
it only takes three parameters.

00:23:14.266 --> 00:23:15.226 A:middle
The first one we need to worry

00:23:15.226 --> 00:23:16.676 A:middle
about is the binding.

00:23:17.726 --> 00:23:19.426 A:middle
Now, like any other SwiftUI

00:23:19.426 --> 00:23:20.876 A:middle
component which takes a binding,

00:23:20.926 --> 00:23:22.296 A:middle
this provides the source of

00:23:22.346 --> 00:23:24.756 A:middle
truth for how this modifier

00:23:24.756 --> 00:23:25.796 A:middle
interacts with the system.

00:23:26.276 --> 00:23:27.986 A:middle
In the case of a free scrolling

00:23:27.986 --> 00:23:30.486 A:middle
list, we might want to bind to

00:23:30.486 --> 00:23:31.766 A:middle
the offset of the view which

00:23:31.816 --> 00:23:32.266 A:middle
we're moving.

00:23:33.466 --> 00:23:34.786 A:middle
We also need to tell the digital

00:23:34.786 --> 00:23:37.206 A:middle
crown where we're going from and

00:23:37.206 --> 00:23:38.286 A:middle
where we're going through.

00:23:38.856 --> 00:23:40.136 A:middle
These define the limits of the

00:23:40.136 --> 00:23:41.586 A:middle
sequence over which the digital

00:23:41.586 --> 00:23:42.446 A:middle
crown will move.

00:23:44.176 --> 00:23:45.206 A:middle
To see what this looks like in

00:23:45.206 --> 00:23:47.356 A:middle
action, we can see that now as

00:23:47.356 --> 00:23:48.406 A:middle
we move the digital crown

00:23:48.436 --> 00:23:50.356 A:middle
represented by the red dot,

00:23:50.786 --> 00:23:52.666 A:middle
we'll provide linear feedback as

00:23:52.666 --> 00:23:54.746 A:middle
well as some nice haptic

00:23:54.746 --> 00:23:56.046 A:middle
feedback in a rubber banding

00:23:56.046 --> 00:23:57.946 A:middle
behavior at either limit of the

00:23:57.946 --> 00:23:59.716 A:middle
digital crown's sequence.

00:24:00.146 --> 00:24:02.876 A:middle
Next, if you wanted to build

00:24:02.876 --> 00:24:04.416 A:middle
something a little more custom

00:24:04.456 --> 00:24:05.526 A:middle
-- for example, like this

00:24:05.596 --> 00:24:06.986 A:middle
picker, which we've provided as

00:24:07.026 --> 00:24:08.596 A:middle
part of -- which is included in

00:24:08.596 --> 00:24:09.956 A:middle
the new calculator application.

00:24:10.706 --> 00:24:11.986 A:middle
We're here, we're no longer

00:24:11.986 --> 00:24:13.046 A:middle
scrolling content.

00:24:13.046 --> 00:24:14.676 A:middle
Instead we're picking between

00:24:14.676 --> 00:24:16.146 A:middle
discrete elements and using the

00:24:16.146 --> 00:24:17.456 A:middle
digital crown to move from one

00:24:17.456 --> 00:24:18.106 A:middle
to the next.

00:24:18.586 --> 00:24:20.986 A:middle
We can use the exact same

00:24:20.986 --> 00:24:22.746 A:middle
Digital Crown Rotation Modifier

00:24:22.746 --> 00:24:24.246 A:middle
with many of the same

00:24:24.246 --> 00:24:25.006 A:middle
parameters.

00:24:25.756 --> 00:24:28.956 A:middle
Now, these parameters -- instead

00:24:28.956 --> 00:24:31.356 A:middle
of going over scrollable lists,

00:24:31.356 --> 00:24:32.206 A:middle
we're selecting between the

00:24:32.206 --> 00:24:33.936 A:middle
number of people and going from

00:24:33.936 --> 00:24:34.916 A:middle
1 through 15 of them.

00:24:35.536 --> 00:24:37.466 A:middle
Now, the new parameter here is

00:24:37.466 --> 00:24:38.456 A:middle
the by parameter.

00:24:38.696 --> 00:24:40.536 A:middle
And by allows us to specify the

00:24:40.536 --> 00:24:43.226 A:middle
stride along which the sequence,

00:24:43.336 --> 00:24:44.436 A:middle
the digital crown sequence, will

00:24:44.436 --> 00:24:45.896 A:middle
provide that haptic feedback and

00:24:45.896 --> 00:24:47.156 A:middle
settling behavior for you.

00:24:47.736 --> 00:24:50.046 A:middle
To see what this looks like, we

00:24:50.046 --> 00:24:51.196 A:middle
can see now that the digital

00:24:51.196 --> 00:24:52.546 A:middle
crown will provide haptic

00:24:52.546 --> 00:24:53.696 A:middle
feedback as we go from one

00:24:53.696 --> 00:24:55.936 A:middle
element to the next, and it's

00:24:55.936 --> 00:24:56.526 A:middle
just that easy.

00:24:57.096 --> 00:25:00.026 A:middle
And finally, if you wanted to do

00:24:57.096 --> 00:25:00.026 A:middle
And finally, if you wanted to do

00:25:00.026 --> 00:25:01.386 A:middle
something even more custom --

00:25:01.386 --> 00:25:03.236 A:middle
for example, the interface that

00:25:03.236 --> 00:25:04.126 A:middle
we've had in alarms.

00:25:04.776 --> 00:25:06.286 A:middle
Where here the digital crown is

00:25:06.286 --> 00:25:08.426 A:middle
controlling a view which is

00:25:08.426 --> 00:25:09.576 A:middle
moving around a circle.

00:25:09.676 --> 00:25:11.366 A:middle
It's no longer limited at either

00:25:11.366 --> 00:25:12.176 A:middle
end of its sequence.

00:25:13.346 --> 00:25:14.416 A:middle
Here, we come back to the

00:25:14.416 --> 00:25:15.996 A:middle
familiar Digital Crown Rotation

00:25:15.996 --> 00:25:16.686 A:middle
Modifier.

00:25:17.186 --> 00:25:18.936 A:middle
This modifier takes all of the

00:25:18.936 --> 00:25:19.856 A:middle
same parameters which we've

00:25:19.856 --> 00:25:21.866 A:middle
already been talking about, as

00:25:21.866 --> 00:25:23.316 A:middle
well as I want to introduce two

00:25:23.316 --> 00:25:23.906 A:middle
new ones.

00:25:24.566 --> 00:25:25.996 A:middle
First is sensitivity.

00:25:26.936 --> 00:25:28.816 A:middle
Sensitivity allows us to specify

00:25:28.816 --> 00:25:30.486 A:middle
how much rotation we need to

00:25:30.486 --> 00:25:31.916 A:middle
apply to the digital crown to

00:25:31.916 --> 00:25:33.226 A:middle
move from one element to the

00:25:33.226 --> 00:25:33.696 A:middle
next.

00:25:34.446 --> 00:25:35.696 A:middle
And finally, we have the

00:25:35.696 --> 00:25:36.736 A:middle
continuous parameter.

00:25:37.276 --> 00:25:38.946 A:middle
This parameter allows us to

00:25:38.946 --> 00:25:40.626 A:middle
specify that we no longer want

00:25:40.626 --> 00:25:42.186 A:middle
the digital crown to stop at

00:25:42.186 --> 00:25:43.456 A:middle
either limit of its sequence.

00:25:43.996 --> 00:25:47.166 A:middle
In action, we can see now we

00:25:47.166 --> 00:25:48.226 A:middle
have this really nice

00:25:48.226 --> 00:25:49.876 A:middle
interaction where we can go all

00:25:49.876 --> 00:25:51.666 A:middle
the way back around and continue

00:25:51.666 --> 00:25:53.066 A:middle
moving the digital crown in one

00:25:53.066 --> 00:25:53.596 A:middle
direction.

00:25:54.176 --> 00:25:55.456 A:middle
There's no more limits to the

00:25:55.456 --> 00:25:55.976 A:middle
sequence.

00:25:57.916 --> 00:26:00.406 A:middle
Finally, to let the digital

00:25:57.916 --> 00:26:00.406 A:middle
Finally, to let the digital

00:26:00.406 --> 00:26:02.616 A:middle
crown get its input, we need to

00:26:02.616 --> 00:26:04.046 A:middle
tell the system how to get it

00:26:04.106 --> 00:26:04.266 A:middle
there.

00:26:04.916 --> 00:26:06.146 A:middle
To do that, we introduce the

00:26:06.146 --> 00:26:07.296 A:middle
focusable modifier.

00:26:07.296 --> 00:26:09.896 A:middle
Now, focusable will feel very

00:26:09.896 --> 00:26:11.436 A:middle
familiar to you if you've used

00:26:11.436 --> 00:26:12.496 A:middle
other UI frameworks which we

00:26:12.496 --> 00:26:12.966 A:middle
provide.

00:26:13.456 --> 00:26:15.046 A:middle
This is a lot like the UI Focus

00:26:15.046 --> 00:26:17.326 A:middle
Engine in UIKit or First

00:26:17.326 --> 00:26:18.486 A:middle
Responder, which I'm sure

00:26:18.486 --> 00:26:19.576 A:middle
everyone here has used before.

00:26:20.896 --> 00:26:22.256 A:middle
And by just adding this

00:26:22.256 --> 00:26:24.436 A:middle
focusable modifier, we can now

00:26:24.436 --> 00:26:25.846 A:middle
use the digital crown to update

00:26:25.846 --> 00:26:27.536 A:middle
the people picker, tap over to

00:26:27.536 --> 00:26:28.766 A:middle
tip, and continue using the

00:26:28.766 --> 00:26:30.446 A:middle
crown to update the now focused

00:26:30.446 --> 00:26:30.676 A:middle
view.

00:26:32.996 --> 00:26:34.576 A:middle
To learn a lot more about how

00:26:34.576 --> 00:26:36.196 A:middle
focusable works, please go check

00:26:36.196 --> 00:26:37.876 A:middle
out the SwiftUI in All Devices

00:26:38.506 --> 00:26:38.606 A:middle
talk.

00:26:40.056 --> 00:26:41.616 A:middle
To see how we can take advantage

00:26:41.616 --> 00:26:43.376 A:middle
of this and to build some really

00:26:43.376 --> 00:26:45.086 A:middle
awesome interactions in Pop

00:26:45.086 --> 00:26:50.996 A:middle
Quiz, let's go back to demo.

00:26:51.146 --> 00:26:53.146 A:middle
So Matthew had already shown the

00:26:53.246 --> 00:26:56.206 A:middle
really nice card list at the

00:26:56.206 --> 00:26:57.766 A:middle
entry point of the application

00:26:57.816 --> 00:26:59.186 A:middle
-- or the topic list at the

00:26:59.186 --> 00:27:00.086 A:middle
entry to the application.

00:26:59.186 --> 00:27:00.086 A:middle
entry to the application.

00:27:01.346 --> 00:27:03.406 A:middle
But I want to build out a really

00:27:03.406 --> 00:27:04.626 A:middle
cool card list.

00:27:04.726 --> 00:27:06.896 A:middle
Now, we already have a nice list

00:27:06.896 --> 00:27:07.836 A:middle
here where we're seeing these

00:27:07.836 --> 00:27:10.276 A:middle
flashcards in a scrollable view,

00:27:10.336 --> 00:27:11.346 A:middle
which we can still see in the

00:27:11.346 --> 00:27:11.746 A:middle
preview.

00:27:12.296 --> 00:27:13.816 A:middle
But wouldn't it be nice if we

00:27:13.816 --> 00:27:16.396 A:middle
had a really cool, custom

00:27:16.396 --> 00:27:18.116 A:middle
interaction driven completely by

00:27:18.116 --> 00:27:18.826 A:middle
the digital crown?

00:27:19.446 --> 00:27:22.246 A:middle
To do that, what I first want to

00:27:22.246 --> 00:27:23.926 A:middle
do is replace the scroll view

00:27:24.186 --> 00:27:24.906 A:middle
with a ZStack.

00:27:25.836 --> 00:27:27.696 A:middle
Now, we'll see that flashcards

00:27:27.696 --> 00:27:29.486 A:middle
are no longer stacked vertically

00:27:29.486 --> 00:27:30.816 A:middle
but instead stacked one on top

00:27:30.816 --> 00:27:31.316 A:middle
of each other.

00:27:31.716 --> 00:27:32.946 A:middle
But I promise you that every one

00:27:32.946 --> 00:27:33.896 A:middle
of them are still there.

00:27:34.366 --> 00:27:36.786 A:middle
Next, because we're going to be

00:27:36.786 --> 00:27:38.296 A:middle
building something using the

00:27:38.296 --> 00:27:40.076 A:middle
digital crown, we need to supply

00:27:40.526 --> 00:27:42.826 A:middle
the focusable modifier as well

00:27:42.826 --> 00:27:44.576 A:middle
as the Digital Crown Rotation

00:27:44.576 --> 00:27:45.216 A:middle
Modifier.

00:27:46.436 --> 00:27:47.646 A:middle
Now, there's a lot of parameters

00:27:47.646 --> 00:27:48.986 A:middle
here, but these are the exact

00:27:48.986 --> 00:27:49.926 A:middle
same parameters which we've

00:27:49.926 --> 00:27:51.006 A:middle
already just talked about.

00:27:51.006 --> 00:27:52.286 A:middle
So let's go through them one by

00:27:52.286 --> 00:27:52.616 A:middle
one.

00:27:53.256 --> 00:27:54.436 A:middle
First we're going to need to

00:27:54.436 --> 00:27:56.096 A:middle
supply a binding, or the source

00:27:56.096 --> 00:27:58.066 A:middle
of truth where the digital crown

00:27:58.066 --> 00:27:59.436 A:middle
will be updating its value.

00:28:00.486 --> 00:28:01.816 A:middle
To do that, we need to provide

00:28:01.816 --> 00:28:02.396 A:middle
some state.

00:28:03.406 --> 00:28:04.606 A:middle
Here, I want to provide the

00:28:04.606 --> 00:28:06.036 A:middle
current index into which this

00:28:06.036 --> 00:28:07.196 A:middle
custom interaction will be

00:28:07.196 --> 00:28:09.406 A:middle
moving between.

00:28:09.526 --> 00:28:12.626 A:middle
Next we supply that binding to

00:28:12.626 --> 00:28:14.486 A:middle
that state back into the digital

00:28:14.486 --> 00:28:15.306 A:middle
crown rotation.

00:28:15.736 --> 00:28:17.266 A:middle
Here, I want to use an animated

00:28:17.266 --> 00:28:19.056 A:middle
version of that binding, so as

00:28:19.056 --> 00:28:20.816 A:middle
the digital crown updates, it

00:28:20.816 --> 00:28:22.456 A:middle
refreshes this view in an

00:28:22.456 --> 00:28:23.366 A:middle
animated fashion.

00:28:24.816 --> 00:28:26.876 A:middle
Next we need to specify how far

00:28:26.876 --> 00:28:28.936 A:middle
we're going from as well as

00:28:28.936 --> 00:28:29.996 A:middle
where we're going through in the

00:28:29.996 --> 00:28:30.726 A:middle
sequence.

00:28:31.096 --> 00:28:32.256 A:middle
Here, we're going to the second

00:28:32.256 --> 00:28:33.476 A:middle
to the last card in the sequence

00:28:33.476 --> 00:28:34.566 A:middle
to achieve the effect which

00:28:34.616 --> 00:28:35.196 A:middle
we're going for.

00:28:36.616 --> 00:28:38.906 A:middle
Next we need to specify the by

00:28:38.906 --> 00:28:40.326 A:middle
value, which is the stride

00:28:40.376 --> 00:28:43.026 A:middle
between each of these cards, as

00:28:43.026 --> 00:28:44.496 A:middle
well as the sensitivity.

00:28:44.696 --> 00:28:46.216 A:middle
Which here, I want to specify a

00:28:46.216 --> 00:28:47.726 A:middle
low sensitivity so that each

00:28:47.726 --> 00:28:49.516 A:middle
card gets a lot of weight to it

00:28:49.516 --> 00:28:50.526 A:middle
and I can make sure I'm looking

00:28:50.526 --> 00:28:51.596 A:middle
at the card which I want to look

00:28:51.596 --> 00:28:51.776 A:middle
at.

00:28:51.776 --> 00:28:55.276 A:middle
And then finally, to actually

00:28:55.326 --> 00:28:56.946 A:middle
get the nice effect we want to

00:28:56.946 --> 00:28:58.766 A:middle
look at, I've already written

00:28:58.766 --> 00:29:00.646 A:middle
this Card Transform Modifier.

00:28:58.766 --> 00:29:00.646 A:middle
this Card Transform Modifier.

00:29:00.716 --> 00:29:01.876 A:middle
Now, this is a custom view

00:29:01.876 --> 00:29:03.386 A:middle
modifier which I've already

00:29:03.386 --> 00:29:06.386 A:middle
written, which will provide all

00:29:06.386 --> 00:29:09.096 A:middle
of the 3-D effects and allow the

00:29:09.096 --> 00:29:10.956 A:middle
card to update with the current

00:29:10.956 --> 00:29:11.496 A:middle
index.

00:29:12.126 --> 00:29:13.366 A:middle
And we're passing in the current

00:29:13.366 --> 00:29:14.966 A:middle
index into this modifier so that

00:29:14.966 --> 00:29:16.366 A:middle
it's updated every time this

00:29:16.366 --> 00:29:17.536 A:middle
view is re-rendered.

00:29:18.036 --> 00:29:19.756 A:middle
And that's it.

00:29:21.116 --> 00:29:23.046 A:middle
Now we can go build and run this

00:29:23.046 --> 00:29:23.716 A:middle
application.

00:29:24.256 --> 00:29:26.746 A:middle
And as it comes up in the

00:29:26.746 --> 00:29:28.076 A:middle
simulator, we'll see the same

00:29:28.076 --> 00:29:29.176 A:middle
view which Matthew had already

00:29:29.176 --> 00:29:30.036 A:middle
showed us at the beginning.

00:29:31.376 --> 00:29:32.516 A:middle
We can go through this list,

00:29:32.516 --> 00:29:34.736 A:middle
select what we want to see, and

00:29:34.736 --> 00:29:35.906 A:middle
see that now we have this nice

00:29:35.906 --> 00:29:37.626 A:middle
interface which we can scroll

00:29:37.626 --> 00:29:39.116 A:middle
through using the digital crown.

00:29:40.216 --> 00:29:41.986 A:middle
And that's it.

00:29:42.796 --> 00:29:43.806 A:middle
And if anyone does know the

00:29:43.806 --> 00:29:44.946 A:middle
answer to this question, please

00:29:44.946 --> 00:29:46.116 A:middle
let me know, I'm really looking

00:29:46.116 --> 00:29:46.766 A:middle
to get the answer.

00:29:48.516 --> 00:29:54.546 A:middle
[ Applause ]

00:29:55.046 --> 00:29:55.866 A:middle
So that was awesome.

00:29:56.486 --> 00:29:58.436 A:middle
We've seen how we can build some

00:29:58.436 --> 00:30:00.446 A:middle
really great experiences using

00:29:58.436 --> 00:30:00.446 A:middle
really great experiences using

00:30:00.446 --> 00:30:02.636 A:middle
SwiftUI and to take advantage of

00:30:02.816 --> 00:30:04.036 A:middle
everything that the Apple Watch

00:30:04.036 --> 00:30:05.446 A:middle
has to offer to get us there.

00:30:06.536 --> 00:30:07.866 A:middle
But there's more to it than

00:30:07.866 --> 00:30:08.186 A:middle
that.

00:30:08.396 --> 00:30:11.186 A:middle
Now we have the same UI

00:30:11.186 --> 00:30:12.386 A:middle
framework across all of our

00:30:12.386 --> 00:30:13.136 A:middle
platforms.

00:30:13.536 --> 00:30:14.976 A:middle
You can take the same concept

00:30:14.976 --> 00:30:16.156 A:middle
you've learned building your

00:30:16.236 --> 00:30:18.456 A:middle
awesome iPhone application and

00:30:18.456 --> 00:30:20.266 A:middle
apply them directly to building

00:30:20.266 --> 00:30:22.116 A:middle
experiences on Apple Watch.

00:30:23.116 --> 00:30:24.596 A:middle
We really can't wait to see what

00:30:24.596 --> 00:30:25.786 A:middle
you build now that you can make

00:30:25.786 --> 00:30:26.946 A:middle
the interfaces you've always

00:30:26.946 --> 00:30:28.366 A:middle
wanted to make on Apple Watch.

00:30:29.546 --> 00:30:31.326 A:middle
There's a ton of great sessions

00:30:31.446 --> 00:30:32.896 A:middle
to talk about SwiftUI at the

00:30:32.896 --> 00:30:33.726 A:middle
conference this year.

00:30:34.126 --> 00:30:35.086 A:middle
And to learn more about how to

00:30:35.086 --> 00:30:36.566 A:middle
make those 3-D animations,

00:30:36.566 --> 00:30:37.676 A:middle
definitely go check out the

00:30:37.676 --> 00:30:38.726 A:middle
Building Custom Views with

00:30:38.726 --> 00:30:39.516 A:middle
SwiftUI talk.

00:30:40.136 --> 00:30:41.176 A:middle
Enjoy the conference.

00:30:41.356 --> 00:30:41.696 A:middle
Thank you.

00:30:42.516 --> 00:30:45.500 A:middle
[ Applause ]
