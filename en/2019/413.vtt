WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:13.656 A:middle
[ Applause ]

00:00:14.156 --> 00:00:15.606 A:middle
&gt;&gt; Good morning, and welcome to

00:00:15.606 --> 00:00:16.676 A:middle
Testing in Xcode.

00:00:16.676 --> 00:00:18.836 A:middle
My name is Ana Calinov and I'll

00:00:18.836 --> 00:00:20.106 A:middle
be presenting along with my

00:00:20.106 --> 00:00:21.786 A:middle
colleagues, Stuart Montgomery

00:00:21.856 --> 00:00:22.686 A:middle
and Ethan Vaughan.

00:00:24.016 --> 00:00:25.786 A:middle
In today's session, we'll start

00:00:25.786 --> 00:00:27.196 A:middle
with an introduction to testing

00:00:27.286 --> 00:00:28.426 A:middle
in XCode with XCTest.

00:00:29.386 --> 00:00:31.116 A:middle
Then, Stuart will tell you about

00:00:31.146 --> 00:00:32.286 A:middle
the test plans feature.

00:00:32.956 --> 00:00:34.556 A:middle
Finally, Ethan will show you

00:00:34.556 --> 00:00:36.856 A:middle
applications of XCTest with

00:00:36.856 --> 00:00:38.066 A:middle
continuous integration.

00:00:39.436 --> 00:00:42.546 A:middle
Let's get started with XCTest.

00:00:42.626 --> 00:00:45.436 A:middle
XCTest is the automation testing

00:00:45.436 --> 00:00:47.626 A:middle
framework provided in Xcode with

00:00:47.686 --> 00:00:49.576 A:middle
built-in support to help you set

00:00:50.026 --> 00:00:52.506 A:middle
up and execute your tests.

00:00:52.506 --> 00:00:54.126 A:middle
Testing is an important step of

00:00:54.126 --> 00:00:56.056 A:middle
developing any project which can

00:00:56.056 --> 00:00:57.746 A:middle
help you find bugs in your

00:00:57.746 --> 00:00:58.386 A:middle
source code.

00:00:59.306 --> 00:01:00.986 A:middle
You can also use test to codify

00:00:59.306 --> 00:01:00.986 A:middle
You can also use test to codify

00:01:00.986 --> 00:01:03.566 A:middle
requirements, meaning you make

00:01:03.566 --> 00:01:05.436 A:middle
test for expected behaviors for

00:01:05.436 --> 00:01:07.376 A:middle
your app, and further work by

00:01:07.376 --> 00:01:09.126 A:middle
you and your team can be

00:01:09.126 --> 00:01:10.206 A:middle
qualified against these

00:01:10.206 --> 00:01:10.976 A:middle
expectations.

00:01:10.976 --> 00:01:13.496 A:middle
We're going to start with a

00:01:13.496 --> 00:01:14.816 A:middle
summary of how you should

00:01:14.816 --> 00:01:16.216 A:middle
consider planning out the

00:01:16.216 --> 00:01:17.716 A:middle
automation test suite of any

00:01:17.716 --> 00:01:18.216 A:middle
project.

00:01:19.116 --> 00:01:20.776 A:middle
The pyramid model approach to

00:01:20.776 --> 00:01:22.786 A:middle
testing helps to strike a

00:01:22.786 --> 00:01:24.256 A:middle
balance between thoroughness,

00:01:24.726 --> 00:01:26.736 A:middle
quality and execution speed.

00:01:28.146 --> 00:01:29.766 A:middle
Unit tests are the foundation of

00:01:29.766 --> 00:01:30.206 A:middle
our pyramid.

00:01:30.206 --> 00:01:33.246 A:middle
Unit tests help verify a single

00:01:33.246 --> 00:01:34.766 A:middle
piece of code, generally a

00:01:34.766 --> 00:01:35.326 A:middle
function.

00:01:36.426 --> 00:01:37.866 A:middle
This is done by inputting

00:01:37.866 --> 00:01:39.916 A:middle
variables to the function and

00:01:39.916 --> 00:01:40.946 A:middle
checking that they return the

00:01:40.946 --> 00:01:42.026 A:middle
expected output.

00:01:43.006 --> 00:01:45.546 A:middle
Unit tests are short, simple,

00:01:45.846 --> 00:01:46.966 A:middle
and run very quickly.

00:01:47.916 --> 00:01:49.336 A:middle
This is the foundation of all of

00:01:49.336 --> 00:01:50.886 A:middle
our testing so you want to write

00:01:50.916 --> 00:01:52.546 A:middle
many unit tests to cover all

00:01:52.546 --> 00:01:53.246 A:middle
your functions.

00:01:53.646 --> 00:01:56.346 A:middle
Next, we have integration tests.

00:01:57.446 --> 00:01:58.876 A:middle
Integration tests are used to

00:01:58.876 --> 00:02:00.666 A:middle
validate a larger section of

00:01:58.876 --> 00:02:00.666 A:middle
validate a larger section of

00:02:00.666 --> 00:02:01.096 A:middle
your code.

00:02:02.056 --> 00:02:03.326 A:middle
These tests should target

00:02:03.426 --> 00:02:05.516 A:middle
discrete subsystems or clusters

00:02:05.516 --> 00:02:07.656 A:middle
of classes to make sure that

00:02:07.656 --> 00:02:09.045 A:middle
different components behave

00:02:09.045 --> 00:02:11.686 A:middle
correctly together.

00:02:11.816 --> 00:02:13.416 A:middle
Integration tests sit on top of

00:02:13.416 --> 00:02:14.956 A:middle
unit tests, because you want to

00:02:14.956 --> 00:02:16.306 A:middle
make sure that the individual

00:02:16.356 --> 00:02:17.856 A:middle
functions behave correctly

00:02:17.986 --> 00:02:19.606 A:middle
before testing this larger piece

00:02:19.606 --> 00:02:20.156 A:middle
of your code.

00:02:21.176 --> 00:02:22.716 A:middle
You generally also won't need as

00:02:22.716 --> 00:02:24.486 A:middle
many integration tests as unit

00:02:24.486 --> 00:02:24.616 A:middle
test.

00:02:25.536 --> 00:02:26.826 A:middle
They may take slightly longer to

00:02:26.826 --> 00:02:28.546 A:middle
run but they do test more of

00:02:28.546 --> 00:02:30.906 A:middle
your app at once.

00:02:31.066 --> 00:02:33.446 A:middle
Lastly, user interface or UI

00:02:33.446 --> 00:02:36.086 A:middle
tests observe the user-phasing

00:02:36.086 --> 00:02:37.066 A:middle
behavior of your app.

00:02:38.106 --> 00:02:39.426 A:middle
This makes sure that your app

00:02:39.596 --> 00:02:41.226 A:middle
truly does what you expect it

00:02:41.286 --> 00:02:41.516 A:middle
to.

00:02:42.536 --> 00:02:44.696 A:middle
UI tests take the longest to run

00:02:45.006 --> 00:02:45.686 A:middle
but they're vital to

00:02:45.686 --> 00:02:47.126 A:middle
demonstrating that everything

00:02:47.126 --> 00:02:48.026 A:middle
behaves correctly.

00:02:49.476 --> 00:02:51.156 A:middle
UI tests also require more

00:02:51.156 --> 00:02:52.726 A:middle
maintenance because your app's

00:02:52.726 --> 00:02:54.596 A:middle
UI may change more frequently.

00:02:55.556 --> 00:02:56.746 A:middle
The full pyramid of tests can

00:02:57.136 --> 00:02:58.726 A:middle
therefore help you balance

00:02:58.776 --> 00:02:59.986 A:middle
between these three different

00:02:59.986 --> 00:03:02.046 A:middle
test types and ensures your test

00:02:59.986 --> 00:03:02.046 A:middle
test types and ensures your test

00:03:02.046 --> 00:03:03.486 A:middle
suite gives you the coverage

00:03:03.556 --> 00:03:04.106 A:middle
that you need.

00:03:05.646 --> 00:03:06.966 A:middle
So we just went over how to

00:03:06.966 --> 00:03:08.876 A:middle
balance your test suite, so now

00:03:08.876 --> 00:03:09.986 A:middle
let's switch to the tools

00:03:09.986 --> 00:03:11.976 A:middle
provided by XCTest to help you

00:03:11.976 --> 00:03:12.676 A:middle
implement it.

00:03:13.126 --> 00:03:18.366 A:middle
Unit tests in XCTest are all of

00:03:18.366 --> 00:03:19.796 A:middle
your tests targeting your source

00:03:19.796 --> 00:03:20.146 A:middle
code.

00:03:20.936 --> 00:03:22.456 A:middle
This includes both your standard

00:03:22.456 --> 00:03:24.066 A:middle
unit test and also your

00:03:24.066 --> 00:03:25.506 A:middle
integration tests.

00:03:26.476 --> 00:03:28.676 A:middle
UI tests execute on top of your

00:03:28.766 --> 00:03:31.016 A:middle
app's UI to provide end-to-end

00:03:31.016 --> 00:03:32.616 A:middle
qualification of your app.

00:03:33.586 --> 00:03:35.466 A:middle
UI tests are also black box test

00:03:35.926 --> 00:03:37.446 A:middle
because they won't rely on any

00:03:37.446 --> 00:03:38.966 A:middle
knowledge of the functions or

00:03:39.046 --> 00:03:40.566 A:middle
classes actually supporting your

00:03:40.566 --> 00:03:40.633 A:middle
app.

00:03:41.926 --> 00:03:44.486 A:middle
UI tests will be able to make

00:03:44.486 --> 00:03:45.726 A:middle
sure that everything behaves

00:03:45.846 --> 00:03:47.176 A:middle
correctly at the very end.

00:03:48.636 --> 00:03:50.876 A:middle
Lastly, performance tests run

00:03:50.876 --> 00:03:52.726 A:middle
multiple times over a given test

00:03:53.486 --> 00:03:55.066 A:middle
to look at the average timing,

00:03:55.316 --> 00:03:57.336 A:middle
memory usage or other metric

00:03:57.446 --> 00:03:59.086 A:middle
given to it to make sure you

00:03:59.086 --> 00:04:00.516 A:middle
don't introduce regressions in

00:03:59.086 --> 00:04:00.516 A:middle
don't introduce regressions in

00:04:00.516 --> 00:04:01.236 A:middle
these areas.

00:04:02.066 --> 00:04:04.196 A:middle
Today, we'll be focusing on unit

00:04:04.276 --> 00:04:04.866 A:middle
and UI tests.

00:04:06.436 --> 00:04:07.846 A:middle
The easiest way to get started

00:04:07.846 --> 00:04:09.126 A:middle
with testing in your Xcode

00:04:09.176 --> 00:04:11.336 A:middle
project is to choose to include

00:04:11.566 --> 00:04:13.776 A:middle
both unit and UI tests when

00:04:13.776 --> 00:04:14.846 A:middle
starting a new project.

00:04:15.396 --> 00:04:18.255 A:middle
In our brand new project, you

00:04:18.255 --> 00:04:19.956 A:middle
can see the unit tests targeting

00:04:19.956 --> 00:04:22.286 A:middle
class and the UI tests targeting

00:04:22.286 --> 00:04:24.726 A:middle
class automatically created and

00:04:24.726 --> 00:04:25.816 A:middle
displayed in your project

00:04:25.816 --> 00:04:26.236 A:middle
navigator.

00:04:26.236 --> 00:04:29.386 A:middle
You are also provided with the

00:04:29.386 --> 00:04:31.406 A:middle
template to start writing each

00:04:31.406 --> 00:04:32.586 A:middle
of these test classes and the

00:04:32.716 --> 00:04:34.216 A:middle
test cases within them.

00:04:35.676 --> 00:04:37.186 A:middle
Now let's take a closer look at

00:04:37.186 --> 00:04:39.246 A:middle
a test class that uses XCTest.

00:04:40.586 --> 00:04:42.276 A:middle
The class imports the XCTest

00:04:42.276 --> 00:04:43.906 A:middle
framework along with the target

00:04:43.936 --> 00:04:44.626 A:middle
to be tested.

00:04:45.836 --> 00:04:47.826 A:middle
The class itself is a subclass

00:04:47.826 --> 00:04:50.026 A:middle
of XCTest case which allows its

00:04:50.026 --> 00:04:52.306 A:middle
methods to be used by Xcode to

00:04:52.306 --> 00:04:53.606 A:middle
execute tests.

00:04:54.466 --> 00:04:55.946 A:middle
Each method we want to use as a

00:04:55.946 --> 00:04:57.866 A:middle
test case must start with the

00:04:57.866 --> 00:04:59.776 A:middle
word test and then hopefully be

00:04:59.776 --> 00:05:01.316 A:middle
named something that indicates

00:04:59.776 --> 00:05:01.316 A:middle
named something that indicates

00:05:01.316 --> 00:05:02.656 A:middle
what it will do.

00:05:03.516 --> 00:05:05.386 A:middle
You'll also see a test diamond

00:05:05.446 --> 00:05:06.736 A:middle
appear to the left of the test

00:05:07.416 --> 00:05:09.316 A:middle
to show that Xcode can execute

00:05:10.586 --> 00:05:10.866 A:middle
it.

00:05:11.136 --> 00:05:13.306 A:middle
Inside of the test, assertion

00:05:13.306 --> 00:05:15.146 A:middle
APIs are used to evaluate and

00:05:15.146 --> 00:05:16.326 A:middle
validate your source code.

00:05:17.106 --> 00:05:19.516 A:middle
In this case, XCTAssertEqual

00:05:19.516 --> 00:05:20.706 A:middle
will compare the first two

00:05:20.706 --> 00:05:22.476 A:middle
values given to it and make sure

00:05:22.476 --> 00:05:23.176 A:middle
that they're equal.

00:05:23.876 --> 00:05:25.756 A:middle
If they differ, the test will

00:05:25.756 --> 00:05:26.516 A:middle
fail instead.

00:05:27.916 --> 00:05:30.576 A:middle
Now, once we run this test, we

00:05:30.576 --> 00:05:32.256 A:middle
hope that it passes and the test

00:05:32.346 --> 00:05:33.606 A:middle
diamond turns green with the

00:05:33.606 --> 00:05:34.516 A:middle
checkmark inside.

00:05:35.566 --> 00:05:36.686 A:middle
We know this isn't always the

00:05:36.686 --> 00:05:37.306 A:middle
case though.

00:05:38.216 --> 00:05:39.866 A:middle
If the test fails, the test

00:05:39.866 --> 00:05:41.566 A:middle
diamond turns red with an x and

00:05:42.046 --> 00:05:43.106 A:middle
the relevant line will

00:05:43.166 --> 00:05:43.566 A:middle
highlight.

00:05:44.686 --> 00:05:46.416 A:middle
We also get an error message

00:05:46.416 --> 00:05:47.546 A:middle
that shows what went wrong in

00:05:47.546 --> 00:05:47.766 A:middle
the test.

00:05:49.156 --> 00:05:50.526 A:middle
The string we pass to

00:05:50.526 --> 00:05:52.826 A:middle
XCTAssertEqual also shows up now

00:05:53.156 --> 00:05:54.586 A:middle
to give us more information to

00:05:54.586 --> 00:05:55.416 A:middle
debug the issue.

00:05:55.416 --> 00:05:58.556 A:middle
In this case, we may have an off

00:05:58.596 --> 00:06:00.386 A:middle
by one error in our source code

00:05:58.596 --> 00:06:00.386 A:middle
by one error in our source code

00:06:00.756 --> 00:06:02.496 A:middle
or you may have initialized to

00:06:02.496 --> 00:06:03.606 A:middle
an unexpected value.

00:06:04.446 --> 00:06:05.586 A:middle
We can go back to the source

00:06:05.636 --> 00:06:07.976 A:middle
code, fix this issue, and run

00:06:07.976 --> 00:06:12.526 A:middle
our test again until it passes.

00:06:12.666 --> 00:06:14.226 A:middle
Each test class template will

00:06:14.226 --> 00:06:16.316 A:middle
also include a setUp and a

00:06:16.316 --> 00:06:16.826 A:middle
tearDown method.

00:06:17.646 --> 00:06:19.236 A:middle
These blocks serve as a way for

00:06:19.236 --> 00:06:20.966 A:middle
you to do any work you need to

00:06:21.056 --> 00:06:22.886 A:middle
around your test in order to

00:06:22.946 --> 00:06:24.226 A:middle
keep your tests specific to

00:06:24.226 --> 00:06:24.846 A:middle
their purpose.

00:06:25.386 --> 00:06:28.096 A:middle
SetUp is called before each of

00:06:28.096 --> 00:06:29.486 A:middle
your test cases executes.

00:06:30.256 --> 00:06:32.156 A:middle
In UI test, this helps ensure

00:06:32.156 --> 00:06:33.566 A:middle
that your app is launched before

00:06:33.566 --> 00:06:34.756 A:middle
you try interacting with it.

00:06:36.056 --> 00:06:37.646 A:middle
XCTest then runs your test

00:06:37.646 --> 00:06:39.596 A:middle
method and afterwards tearDown

00:06:39.776 --> 00:06:42.146 A:middle
can be used to clean up any

00:06:42.296 --> 00:06:43.606 A:middle
changes you've made to the data

00:06:44.106 --> 00:06:46.396 A:middle
or the global state of your app,

00:06:46.396 --> 00:06:47.536 A:middle
to make sure your test leaves

00:06:47.536 --> 00:06:48.996 A:middle
nothing behind that could impact

00:06:49.056 --> 00:06:49.806 A:middle
subsequent tests.

00:06:51.356 --> 00:06:53.586 A:middle
Now, let's go into a demo to see

00:06:53.586 --> 00:06:55.236 A:middle
how to write unit and UI tests

00:06:55.566 --> 00:06:56.646 A:middle
for your app.

00:06:57.516 --> 00:07:02.926 A:middle
[ Applause ]

00:06:57.516 --> 00:07:02.926 A:middle
[ Applause ]

00:07:03.426 --> 00:07:04.606 A:middle
So, we've been working on a

00:07:04.606 --> 00:07:05.416 A:middle
travel app.

00:07:05.946 --> 00:07:06.726 A:middle
This shows different

00:07:06.726 --> 00:07:08.096 A:middle
destinations around the world

00:07:08.096 --> 00:07:09.096 A:middle
and can help you plan a

00:07:09.096 --> 00:07:09.766 A:middle
vacation.

00:07:10.746 --> 00:07:12.376 A:middle
I'd like to add a new feature to

00:07:12.376 --> 00:07:14.356 A:middle
my app that shows how far away

00:07:14.476 --> 00:07:16.056 A:middle
each of these destinations is

00:07:16.146 --> 00:07:17.666 A:middle
from our current location in San

00:07:17.666 --> 00:07:18.076 A:middle
Jose.

00:07:19.306 --> 00:07:21.016 A:middle
For this, I've written a new

00:07:21.016 --> 00:07:22.896 A:middle
class called DistanceCalculator.

00:07:23.886 --> 00:07:25.606 A:middle
This class defines a city struct

00:07:26.106 --> 00:07:27.666 A:middle
that contains a string with the

00:07:27.666 --> 00:07:29.826 A:middle
name of the city and a tuple for

00:07:29.826 --> 00:07:30.436 A:middle
its coordinates.

00:07:31.176 --> 00:07:33.586 A:middle
I currently have my list of

00:07:33.636 --> 00:07:35.236 A:middle
cities stored in a dictionary.

00:07:35.496 --> 00:07:36.756 A:middle
I'm planning on moving these two

00:07:36.756 --> 00:07:37.766 A:middle
database later though.

00:07:39.146 --> 00:07:40.656 A:middle
I have a function called city

00:07:40.916 --> 00:07:42.226 A:middle
that will return an optional

00:07:42.226 --> 00:07:44.566 A:middle
city struct type to be able to

00:07:44.566 --> 00:07:46.246 A:middle
search my dictionary for the

00:07:46.246 --> 00:07:46.636 A:middle
cities.

00:07:47.156 --> 00:07:49.326 A:middle
The main function I'm planning

00:07:49.326 --> 00:07:50.976 A:middle
on using from this class is

00:07:51.026 --> 00:07:51.976 A:middle
distanceInMiles.

00:07:52.926 --> 00:07:54.596 A:middle
This takes in two strings with

00:07:54.686 --> 00:07:56.156 A:middle
city names and returns the

00:07:56.156 --> 00:07:57.596 A:middle
distance between them as a

00:07:57.596 --> 00:07:57.976 A:middle
double.

00:07:58.846 --> 00:08:00.326 A:middle
If either of the cities can't be

00:07:58.846 --> 00:08:00.326 A:middle
If either of the cities can't be

00:08:00.326 --> 00:08:02.006 A:middle
found in our dictionary, an

00:08:02.056 --> 00:08:04.046 A:middle
error will be thrown instead.

00:08:05.196 --> 00:08:06.986 A:middle
Lastly, I have another helper

00:08:06.986 --> 00:08:08.096 A:middle
function also called

00:08:08.096 --> 00:08:08.986 A:middle
distanceInMiles.

00:08:09.756 --> 00:08:10.896 A:middle
This one takes in our city

00:08:10.896 --> 00:08:12.356 A:middle
struct and returns the distance

00:08:12.356 --> 00:08:12.996 A:middle
between them.

00:08:13.846 --> 00:08:15.206 A:middle
This function uses the core

00:08:15.206 --> 00:08:17.286 A:middle
location framework so that it

00:08:17.286 --> 00:08:18.606 A:middle
does the heavy lifting for me.

00:08:19.956 --> 00:08:21.386 A:middle
Now, to start writing unit test

00:08:21.386 --> 00:08:23.546 A:middle
for this class, I've created a

00:08:23.546 --> 00:08:24.816 A:middle
new test class called

00:08:24.876 --> 00:08:26.356 A:middle
DistanceCalculatorTests.

00:08:27.566 --> 00:08:29.286 A:middle
As I start writing tests, I want

00:08:29.286 --> 00:08:30.506 A:middle
to see my source code so I'm

00:08:30.596 --> 00:08:32.416 A:middle
going to open another editor

00:08:32.416 --> 00:08:34.556 A:middle
below, and then navigate to my

00:08:34.686 --> 00:08:36.706 A:middle
DistanceCalculator class.

00:08:39.296 --> 00:08:40.936 A:middle
The first test that I want to

00:08:40.936 --> 00:08:42.265 A:middle
write is testing my city

00:08:42.265 --> 00:08:42.796 A:middle
function.

00:08:43.346 --> 00:08:45.526 A:middle
So I'm going to start writing a

00:08:45.526 --> 00:08:48.016 A:middle
unit test and I can call it

00:08:48.156 --> 00:08:49.526 A:middle
testCoordinatesOfSeattle.

00:08:50.366 --> 00:08:51.456 A:middle
For each of my unit test

00:08:51.586 --> 00:08:53.196 A:middle
classes, I'm going to choose a

00:08:53.196 --> 00:08:55.386 A:middle
specific test case to make sure

00:08:55.386 --> 00:08:56.246 A:middle
that my function works.

00:08:57.276 --> 00:08:58.956 A:middle
In this case, I'm going to input

00:08:59.026 --> 00:09:01.126 A:middle
Seattle to my city function and

00:08:59.026 --> 00:09:01.126 A:middle
Seattle to my city function and

00:09:01.126 --> 00:09:02.106 A:middle
make sure that its correct

00:09:02.106 --> 00:09:03.166 A:middle
coordinates are returned.

00:09:04.356 --> 00:09:05.856 A:middle
The first thing I'll do is to

00:09:05.856 --> 00:09:08.416 A:middle
find calculator by initializing

00:09:08.566 --> 00:09:09.596 A:middle
my DistanceCalculator.

00:09:09.596 --> 00:09:13.276 A:middle
Now, I can start writing and

00:09:14.166 --> 00:09:15.666 A:middle
make a call to my function.

00:09:16.606 --> 00:09:18.476 A:middle
But one thing to remember is

00:09:18.476 --> 00:09:20.816 A:middle
that city returns an optional

00:09:20.816 --> 00:09:21.436 A:middle
city struct.

00:09:22.286 --> 00:09:23.536 A:middle
So I want to make sure that the

00:09:23.536 --> 00:09:25.696 A:middle
value I get is not nil.

00:09:26.606 --> 00:09:28.696 A:middle
To do this, I can use this API

00:09:29.486 --> 00:09:31.976 A:middle
and try using XCTUnwrap to make

00:09:31.976 --> 00:09:34.256 A:middle
sure that the value is valid.

00:09:38.816 --> 00:09:40.836 A:middle
Then I can call calculator for

00:09:40.836 --> 00:09:41.346 A:middle
Seattle.

00:09:42.626 --> 00:09:43.826 A:middle
Now, I'll get an error message

00:09:43.866 --> 00:09:45.576 A:middle
that appears, because it looks

00:09:45.576 --> 00:09:46.626 A:middle
like there's an error that could

00:09:46.626 --> 00:09:48.516 A:middle
be thrown that is not being

00:09:48.516 --> 00:09:48.886 A:middle
handled.

00:09:50.006 --> 00:09:52.066 A:middle
If city returns a nil value,

00:09:52.606 --> 00:09:54.016 A:middle
then I have to make sure that my

00:09:54.116 --> 00:09:55.776 A:middle
test case also throws to

00:09:55.776 --> 00:09:58.006 A:middle
properly show the issue.

00:10:00.086 --> 00:10:02.616 A:middle
Now, I have my city variable for

00:10:02.616 --> 00:10:05.096 A:middle
the value return for Seattle and

00:10:05.096 --> 00:10:07.276 A:middle
I can use my assertion APIs to

00:10:07.276 --> 00:10:08.956 A:middle
make sure that both the latitude

00:10:08.956 --> 00:10:11.566 A:middle
and the longitude are right.

00:10:12.576 --> 00:10:13.876 A:middle
Now, I'll run my test by

00:10:13.876 --> 00:10:15.846 A:middle
clicking on the test diamond.

00:10:17.036 --> 00:10:19.076 A:middle
This will launch the app, run

00:10:19.076 --> 00:10:20.726 A:middle
the test, and tell us what

00:10:20.726 --> 00:10:21.216 A:middle
happened.

00:10:21.776 --> 00:10:23.986 A:middle
It looks like our test

00:10:23.986 --> 00:10:24.566 A:middle
succeeded.

00:10:24.986 --> 00:10:25.416 A:middle
It's great.

00:10:25.416 --> 00:10:29.186 A:middle
I can write another test now for

00:10:29.186 --> 00:10:30.846 A:middle
my class and I'm going to focus

00:10:30.846 --> 00:10:32.966 A:middle
on my distanceInMiles class.

00:10:34.936 --> 00:10:36.216 A:middle
My function is going to be

00:10:36.256 --> 00:10:38.376 A:middle
called testSanFranciscoToNewYork

00:10:38.696 --> 00:10:40.256 A:middle
to specifically look at what my

00:10:40.256 --> 00:10:41.656 A:middle
functional return for the

00:10:41.656 --> 00:10:42.266 A:middle
assistance.

00:10:43.456 --> 00:10:44.556 A:middle
Now the first thing I'm going to

00:10:44.556 --> 00:10:46.106 A:middle
have to do here is to find

00:10:46.106 --> 00:10:47.406 A:middle
another calculator by

00:10:47.406 --> 00:10:49.046 A:middle
initializing DistanceCalculator.

00:10:49.936 --> 00:10:50.966 A:middle
But at this point, my code is

00:10:50.966 --> 00:10:52.386 A:middle
getting repetitive because I

00:10:52.476 --> 00:10:53.926 A:middle
have to do this at the beginning

00:10:53.926 --> 00:10:55.326 A:middle
of each of my test cases.

00:10:56.366 --> 00:10:58.426 A:middle
So instead, I'm going to declare

00:10:58.426 --> 00:11:01.076 A:middle
a class variable called

00:10:58.426 --> 00:11:01.076 A:middle
a class variable called

00:11:01.076 --> 00:11:03.226 A:middle
calculator and make use of my

00:11:03.226 --> 00:11:05.296 A:middle
setUp function to initialize it

00:11:05.366 --> 00:11:07.000 A:middle
before each test begins.

00:11:12.906 --> 00:11:19.126 A:middle
Now I can start writing my test.

00:11:19.226 --> 00:11:21.146 A:middle
I'll define distance in miles by

00:11:21.146 --> 00:11:22.476 A:middle
trying to call distanceInMiles

00:11:22.786 --> 00:11:24.316 A:middle
from my function from San

00:11:24.316 --> 00:11:25.326 A:middle
Francisco to New York.

00:11:25.326 --> 00:11:28.056 A:middle
And then I'll use my assertion

00:11:28.056 --> 00:11:29.676 A:middle
APIs to make sure that the

00:11:29.676 --> 00:11:30.526 A:middle
distance is correct.

00:11:31.296 --> 00:11:33.706 A:middle
I'll run my test from the test

00:11:33.886 --> 00:11:34.336 A:middle
diamond.

00:11:34.886 --> 00:11:38.816 A:middle
And it looks like this test

00:11:38.816 --> 00:11:39.676 A:middle
failed instead.

00:11:39.876 --> 00:11:42.716 A:middle
I can look at the error message

00:11:43.236 --> 00:11:44.986 A:middle
at the failure message in my

00:11:44.986 --> 00:11:45.866 A:middle
issue navigator.

00:11:46.366 --> 00:11:51.396 A:middle
This time our test runs and we

00:11:51.396 --> 00:11:52.806 A:middle
get an error message with an

00:11:52.886 --> 00:11:53.886 A:middle
actual test failure.

00:11:55.046 --> 00:11:57.296 A:middle
It looks like the value that

00:11:57.296 --> 00:11:58.936 A:middle
we're expecting and comparing to

00:11:58.936 --> 00:12:00.376 A:middle
has a lot more precision than

00:11:58.936 --> 00:12:00.376 A:middle
has a lot more precision than

00:12:00.376 --> 00:12:02.176 A:middle
the one we're actually looking

00:12:02.176 --> 00:12:02.436 A:middle
for.

00:12:03.016 --> 00:12:05.946 A:middle
In this case, I don't care about

00:12:05.946 --> 00:12:07.736 A:middle
all this precision because I

00:12:07.736 --> 00:12:09.116 A:middle
only want to show my user a

00:12:09.116 --> 00:12:10.776 A:middle
whole number of miles between

00:12:10.776 --> 00:12:11.326 A:middle
these cities.

00:12:12.296 --> 00:12:14.116 A:middle
So, I can add an accuracy

00:12:14.116 --> 00:12:18.546 A:middle
argument instead of equal to

00:12:18.546 --> 00:12:18.926 A:middle
one.

00:12:19.746 --> 00:12:21.816 A:middle
This will allow XCTAssertEqual

00:12:21.856 --> 00:12:23.846 A:middle
to have a leniency and allow the

00:12:23.846 --> 00:12:25.456 A:middle
numbers to defer by one and

00:12:25.456 --> 00:12:26.216 A:middle
still pass the test.

00:12:27.596 --> 00:12:29.536 A:middle
I'll write my test again to make

00:12:29.726 --> 00:12:32.656 A:middle
sure it passes.

00:12:32.806 --> 00:12:32.956 A:middle
Great.

00:12:33.516 --> 00:12:38.466 A:middle
[ Applause ]

00:12:38.966 --> 00:12:40.606 A:middle
Now I've written two tests so

00:12:40.606 --> 00:12:42.596 A:middle
far for my unit test class, but

00:12:42.596 --> 00:12:44.526 A:middle
both of these tests take valid

00:12:44.526 --> 00:12:46.656 A:middle
inputs to the functions and

00:12:46.656 --> 00:12:47.876 A:middle
check that a valid input is

00:12:47.876 --> 00:12:48.516 A:middle
returned.

00:12:49.046 --> 00:12:50.106 A:middle
But there are some other test

00:12:50.106 --> 00:12:51.406 A:middle
cases I want to check for my

00:12:51.406 --> 00:12:51.976 A:middle
function.

00:12:52.596 --> 00:12:54.056 A:middle
I want to make sure that errors

00:12:54.056 --> 00:12:55.846 A:middle
are also handled correctly in my

00:12:55.846 --> 00:12:56.596 A:middle
class.

00:12:57.576 --> 00:12:58.916 A:middle
So, the next function I'm going

00:12:58.916 --> 00:13:00.176 A:middle
to write is going to be a

00:12:58.916 --> 00:13:00.176 A:middle
to write is going to be a

00:13:00.176 --> 00:13:01.176 A:middle
negative test case.

00:13:01.946 --> 00:13:03.866 A:middle
I don't expect Cupertino to be

00:13:03.866 --> 00:13:05.466 A:middle
my database of cities because

00:13:05.466 --> 00:13:06.906 A:middle
I'm only considering large

00:13:06.906 --> 00:13:09.206 A:middle
cities, and Cupertino won't be

00:13:09.206 --> 00:13:11.436 A:middle
one of them.

00:13:12.666 --> 00:13:14.796 A:middle
So, when I call Cupertino, I'll

00:13:14.796 --> 00:13:16.856 A:middle
expect an error to be thrown to

00:13:16.856 --> 00:13:18.416 A:middle
say that the city is unknown in

00:13:18.416 --> 00:13:19.036 A:middle
our database.

00:13:19.686 --> 00:13:24.966 A:middle
I can use XCTAssertThrowsError

00:13:24.966 --> 00:13:27.056 A:middle
to do this.

00:13:27.226 --> 00:13:29.066 A:middle
I can then use a closure to look

00:13:29.066 --> 00:13:30.376 A:middle
at the exact errors that were

00:13:30.436 --> 00:13:32.836 A:middle
thrown and compare them with

00:13:32.836 --> 00:13:34.816 A:middle
XCTAssertEqual to make sure

00:13:34.816 --> 00:13:35.336 A:middle
they're correct.

00:13:36.596 --> 00:13:38.116 A:middle
Now, I've written three tests

00:13:38.116 --> 00:13:39.996 A:middle
and I want to run all of them at

00:13:39.996 --> 00:13:41.246 A:middle
once to make sure that

00:13:41.356 --> 00:13:42.366 A:middle
everything is working right.

00:13:43.256 --> 00:13:44.206 A:middle
So I can go to the test

00:13:44.296 --> 00:13:46.646 A:middle
navigator and this will show me

00:13:46.896 --> 00:13:48.906 A:middle
row by row, all of the different

00:13:48.906 --> 00:13:50.996 A:middle
test targets, test classes, and

00:13:50.996 --> 00:13:52.756 A:middle
test cases in my project.

00:13:53.696 --> 00:13:55.396 A:middle
I can select at each level to

00:13:55.456 --> 00:13:57.176 A:middle
run all of the tests below it.

00:13:58.066 --> 00:13:59.726 A:middle
So, if click the play button

00:13:59.846 --> 00:14:01.606 A:middle
next to DistanceCalculatorTest,

00:13:59.846 --> 00:14:01.606 A:middle
next to DistanceCalculatorTest,

00:14:01.806 --> 00:14:03.176 A:middle
it will run all three of these

00:14:03.176 --> 00:14:03.326 A:middle
tests.

00:14:04.516 --> 00:14:06.856 A:middle
My Apple launch runs them and

00:14:06.856 --> 00:14:08.456 A:middle
all the green checkmarks means

00:14:08.456 --> 00:14:09.886 A:middle
they all passed.

00:14:10.576 --> 00:14:12.906 A:middle
I can also command and click on

00:14:12.906 --> 00:14:15.696 A:middle
different rows in order to

00:14:15.696 --> 00:14:17.436 A:middle
select different values to run

00:14:18.026 --> 00:14:19.466 A:middle
or different test categories to

00:14:19.466 --> 00:14:21.896 A:middle
run if I don't want to run all

00:14:21.896 --> 00:14:22.576 A:middle
of them at once.

00:14:23.506 --> 00:14:24.806 A:middle
By context clicking, I can

00:14:24.806 --> 00:14:27.316 A:middle
choose to run them.

00:14:27.516 --> 00:14:29.436 A:middle
If I do choose a subset to run

00:14:29.436 --> 00:14:31.126 A:middle
and then want to rerun the same

00:14:31.126 --> 00:14:32.616 A:middle
subset later after I fix some

00:14:32.616 --> 00:14:34.466 A:middle
issues, I can also go to the

00:14:34.466 --> 00:14:36.626 A:middle
Product menu, click on Perform

00:14:36.726 --> 00:14:38.706 A:middle
Action and choose to rerun just

00:14:38.706 --> 00:14:40.076 A:middle
the last test that was run.

00:14:41.096 --> 00:14:42.996 A:middle
Now that I've written some unit

00:14:42.996 --> 00:14:44.686 A:middle
tests for my class, I want to

00:14:44.686 --> 00:14:45.686 A:middle
implement it in the UI.

00:14:46.766 --> 00:14:48.026 A:middle
I'll do so by showing a

00:14:48.026 --> 00:14:51.326 A:middle
distanceText and running my

00:14:52.336 --> 00:14:52.476 A:middle
class.

00:14:52.656 --> 00:14:54.466 A:middle
Now, under the city name, we

00:14:54.466 --> 00:14:55.756 A:middle
have a distance that shows how

00:14:55.756 --> 00:14:57.346 A:middle
far away these cities are from

00:14:57.346 --> 00:14:58.326 A:middle
our current location.

00:14:58.926 --> 00:15:04.056 A:middle
So, I've created a new UITest

00:14:58.926 --> 00:15:04.056 A:middle
So, I've created a new UITest

00:15:04.096 --> 00:15:05.826 A:middle
class called DiscoverUITest.

00:15:07.176 --> 00:15:09.116 A:middle
Our UITest class has set up

00:15:09.216 --> 00:15:10.606 A:middle
populated with two things.

00:15:11.386 --> 00:15:13.016 A:middle
Continue after failure is set to

00:15:13.016 --> 00:15:13.426 A:middle
false.

00:15:13.976 --> 00:15:16.006 A:middle
Once we failed a UI test, it

00:15:16.006 --> 00:15:17.366 A:middle
usually means we've gone into a

00:15:17.366 --> 00:15:19.126 A:middle
UI state that's unexpected.

00:15:19.756 --> 00:15:21.346 A:middle
Chances are we won't be able to

00:15:21.346 --> 00:15:23.186 A:middle
interact with anything further

00:15:23.346 --> 00:15:24.206 A:middle
because we don't know what's

00:15:24.206 --> 00:15:25.246 A:middle
actually on the screen.

00:15:25.796 --> 00:15:27.956 A:middle
We also want to make sure that

00:15:27.956 --> 00:15:29.476 A:middle
our app is launched before we

00:15:29.476 --> 00:15:30.506 A:middle
try interacting with it.

00:15:31.036 --> 00:15:33.336 A:middle
We can start writing our UI

00:15:33.336 --> 00:15:35.156 A:middle
tests just as we were writing

00:15:35.156 --> 00:15:35.726 A:middle
our unit test.

00:15:35.726 --> 00:15:37.706 A:middle
I'm going to write

00:15:37.846 --> 00:15:40.046 A:middle
testMilesToParis and the goal

00:15:40.046 --> 00:15:42.596 A:middle
will be to open the app, swipe

00:15:42.596 --> 00:15:45.876 A:middle
to the Paris icon and then make

00:15:45.876 --> 00:15:47.256 A:middle
sure that the distance shown is

00:15:48.266 --> 00:15:48.426 A:middle
correct.

00:15:50.096 --> 00:15:52.026 A:middle
The first thing I'm going to do

00:15:52.246 --> 00:15:53.496 A:middle
is actually make sure that we're

00:15:53.496 --> 00:15:54.876 A:middle
on the discover tab when our

00:15:54.876 --> 00:15:55.186 A:middle
test starts.

00:15:55.246 --> 00:15:58.366 A:middle
I can write UI test by looking

00:15:58.366 --> 00:16:00.366 A:middle
for elements in the app's UI and

00:15:58.366 --> 00:16:00.366 A:middle
for elements in the app's UI and

00:16:00.366 --> 00:16:01.196 A:middle
interacting with them.

00:16:01.196 --> 00:16:03.616 A:middle
In this case I'm going to look

00:16:03.616 --> 00:16:05.496 A:middle
for a tab bar button called

00:16:05.616 --> 00:16:06.086 A:middle
Discover.

00:16:06.086 --> 00:16:09.146 A:middle
And then I'm going to tap on it

00:16:09.536 --> 00:16:10.536 A:middle
to make sure we're on the right

00:16:10.576 --> 00:16:10.846 A:middle
tab.

00:16:11.976 --> 00:16:14.636 A:middle
After every UI action we do, we

00:16:14.636 --> 00:16:16.406 A:middle
want to verify that the correct

00:16:16.536 --> 00:16:17.786 A:middle
screen is now displayed.

00:16:18.406 --> 00:16:20.496 A:middle
So I'm going to then make sure

00:16:20.496 --> 00:16:22.186 A:middle
that San Francisco is visible on

00:16:22.186 --> 00:16:24.906 A:middle
the screen to make sure we're in

00:16:25.016 --> 00:16:28.546 A:middle
the expected state.

00:16:28.746 --> 00:16:30.676 A:middle
I'll use an XCTAssert statement

00:16:30.776 --> 00:16:32.646 A:middle
to make sure that San Francisco,

00:16:32.646 --> 00:16:34.656 A:middle
a static text isHittable.

00:16:35.326 --> 00:16:37.016 A:middle
IsHittable will ensure both that

00:16:37.016 --> 00:16:38.986 A:middle
the element exists and that is

00:16:38.986 --> 00:16:40.946 A:middle
on the screen so we can interact

00:16:41.426 --> 00:16:42.546 A:middle
with it.

00:16:42.816 --> 00:16:44.526 A:middle
Now, the next thing I want to do

00:16:44.526 --> 00:16:46.296 A:middle
is swipe left on this image to

00:16:46.296 --> 00:16:47.716 A:middle
get to the Paris location.

00:16:48.266 --> 00:16:50.996 A:middle
But I'm actually not sure how to

00:16:50.996 --> 00:16:52.646 A:middle
interact with this image because

00:16:52.646 --> 00:16:54.036 A:middle
they may have a custom label

00:16:54.266 --> 00:16:55.656 A:middle
that I'm not sure how to define.

00:16:56.386 --> 00:16:57.996 A:middle
So I can use the debugger to get

00:16:57.996 --> 00:16:59.636 A:middle
more information about my app's

00:16:59.826 --> 00:16:59.966 A:middle
UI.

00:16:59.966 --> 00:17:02.656 A:middle
I'm going to set a breakpoint on

00:16:59.966 --> 00:17:02.656 A:middle
I'm going to set a breakpoint on

00:17:02.656 --> 00:17:04.776 A:middle
line 26 and then run my test

00:17:05.016 --> 00:17:05.955 A:middle
from the test diamond.

00:17:06.496 --> 00:17:09.266 A:middle
The Apple launch click on

00:17:09.266 --> 00:17:10.836 A:middle
Discover, make sure San

00:17:10.836 --> 00:17:12.546 A:middle
Francisco is visible and then

00:17:12.546 --> 00:17:13.556 A:middle
pause in the debugger.

00:17:18.556 --> 00:17:20.336 A:middle
From the debugger, we can get

00:17:20.336 --> 00:17:21.736 A:middle
more information about the app.

00:17:22.826 --> 00:17:24.675 A:middle
We can print out the exact view

00:17:24.675 --> 00:17:27.766 A:middle
hierarchy by using po app to get

00:17:27.766 --> 00:17:28.636 A:middle
this information.

00:17:29.176 --> 00:17:32.716 A:middle
Here we have a list of all of

00:17:32.716 --> 00:17:34.936 A:middle
the UI elements in our app.

00:17:34.986 --> 00:17:36.266 A:middle
This is a little overwhelming

00:17:36.266 --> 00:17:37.836 A:middle
though so I'm going to further

00:17:37.836 --> 00:17:40.106 A:middle
specify that I want to print out

00:17:40.576 --> 00:17:42.046 A:middle
all of the images in my app

00:17:42.046 --> 00:17:42.456 A:middle
only.

00:17:43.016 --> 00:17:43.146 A:middle
Great.

00:17:43.936 --> 00:17:45.876 A:middle
Now we have a list of all of

00:17:45.876 --> 00:17:47.656 A:middle
these images and it looks like

00:17:47.656 --> 00:17:49.126 A:middle
San Francisco is the one I want.

00:17:50.126 --> 00:17:51.706 A:middle
So I'm going to copy the string

00:17:52.136 --> 00:17:54.246 A:middle
and I'll close the debugger and

00:17:57.356 --> 00:18:01.176 A:middle
then define my sfImage to be an

00:17:57.356 --> 00:18:01.176 A:middle
then define my sfImage to be an

00:18:01.176 --> 00:18:02.996 A:middle
image with this identifier.

00:18:02.996 --> 00:18:09.886 A:middle
Now, I can simply call on this

00:18:09.886 --> 00:18:11.206 A:middle
query to swipe left.

00:18:12.456 --> 00:18:13.926 A:middle
Once I've done this, I want to

00:18:13.926 --> 00:18:15.766 A:middle
confirm that Paris is actually

00:18:15.766 --> 00:18:17.466 A:middle
visible on the screen so that no

00:18:17.466 --> 00:18:18.836 A:middle
changes in the UI would

00:18:18.996 --> 00:18:20.566 A:middle
interrupt this test.

00:18:23.096 --> 00:18:25.536 A:middle
So I can use XCTAssert to make

00:18:25.536 --> 00:18:26.766 A:middle
sure that Paris is hittable.

00:18:27.936 --> 00:18:30.016 A:middle
Lastly, I want to make sure that

00:18:30.016 --> 00:18:31.036 A:middle
this correct distance is

00:18:31.076 --> 00:18:31.616 A:middle
displayed.

00:18:31.996 --> 00:18:33.846 A:middle
So I'll use one more XCTAssert

00:18:33.846 --> 00:18:37.596 A:middle
statement to make sure that 5586

00:18:37.596 --> 00:18:39.386 A:middle
miles, a static text, is

00:18:39.386 --> 00:18:39.826 A:middle
visible.

00:18:40.896 --> 00:18:43.086 A:middle
Now we can run our test from the

00:18:43.086 --> 00:18:46.456 A:middle
test diamond and we'll see the

00:18:46.456 --> 00:18:48.326 A:middle
app launch and execute through

00:18:48.326 --> 00:18:52.126 A:middle
each of these steps, once I

00:18:52.126 --> 00:18:52.926 A:middle
remove my breakpoint.

00:18:58.816 --> 00:19:00.206 A:middle
So we'll see that the app

00:18:58.816 --> 00:19:00.206 A:middle
So we'll see that the app

00:19:00.206 --> 00:19:02.066 A:middle
launches, we press Discover,

00:19:02.266 --> 00:19:04.266 A:middle
check for the text, swipe left

00:19:04.796 --> 00:19:06.076 A:middle
and then make sure that all of

00:19:06.076 --> 00:19:06.806 A:middle
our correct strings are

00:19:06.806 --> 00:19:07.286 A:middle
displayed.

00:19:08.516 --> 00:19:13.426 A:middle
[ Applause ]

00:19:13.926 --> 00:19:15.176 A:middle
One more thing to consider with

00:19:15.176 --> 00:19:16.586 A:middle
this test is that we're looking

00:19:16.586 --> 00:19:18.436 A:middle
for a static text, which says

00:19:18.436 --> 00:19:21.346 A:middle
exactly 5586 miles.

00:19:22.086 --> 00:19:23.366 A:middle
You may want to make sure that

00:19:23.366 --> 00:19:24.876 A:middle
you're mocking your location or

00:19:24.876 --> 00:19:26.116 A:middle
simulating that you're in

00:19:26.116 --> 00:19:28.506 A:middle
exactly in San Jose whenever you

00:19:28.506 --> 00:19:30.606 A:middle
run this test because otherwise

00:19:30.606 --> 00:19:32.026 A:middle
the distance will vary based on

00:19:32.026 --> 00:19:33.156 A:middle
your actual location.

00:19:34.176 --> 00:19:35.506 A:middle
And now let's go back to the

00:19:35.506 --> 00:19:36.726 A:middle
slide to talk about test

00:19:36.726 --> 00:19:38.306 A:middle
organization in your project.

00:19:48.246 --> 00:19:50.206 A:middle
So when starting to write your

00:19:50.206 --> 00:19:52.186 A:middle
test class, you'll start out

00:19:52.186 --> 00:19:53.526 A:middle
with two test targets,

00:19:53.976 --> 00:19:55.476 A:middle
generally, one for unit tests

00:19:55.786 --> 00:19:56.736 A:middle
and one for UI tests.

00:19:58.016 --> 00:20:00.116 A:middle
Unit test and UI test must be

00:19:58.016 --> 00:20:00.116 A:middle
Unit test and UI test must be

00:20:00.116 --> 00:20:01.956 A:middle
separated by type because of the

00:20:01.956 --> 00:20:03.666 A:middle
differences in how they execute

00:20:03.786 --> 00:20:04.216 A:middle
on your app.

00:20:05.396 --> 00:20:06.846 A:middle
Each of these test classes--

00:20:07.276 --> 00:20:09.016 A:middle
test targets will contain your

00:20:09.016 --> 00:20:09.936 A:middle
test classes.

00:20:11.076 --> 00:20:12.456 A:middle
Your test targets can have as

00:20:12.456 --> 00:20:14.346 A:middle
many test classes as necessary

00:20:14.346 --> 00:20:14.986 A:middle
to test your app.

00:20:16.696 --> 00:20:19.036 A:middle
Your test classes then contain

00:20:19.036 --> 00:20:20.306 A:middle
each of your test cases.

00:20:21.206 --> 00:20:23.476 A:middle
Together, your unit test target

00:20:23.566 --> 00:20:25.216 A:middle
and UI test target can fully

00:20:25.216 --> 00:20:25.816 A:middle
test your app.

00:20:27.006 --> 00:20:28.316 A:middle
But there are some cases where

00:20:28.316 --> 00:20:29.836 A:middle
you may need more test targets.

00:20:30.686 --> 00:20:31.866 A:middle
As your project becomes more

00:20:31.866 --> 00:20:34.366 A:middle
complicated you may want a new--

00:20:34.516 --> 00:20:35.666 A:middle
to create a new framework.

00:20:36.406 --> 00:20:37.616 A:middle
This framework should have its

00:20:37.616 --> 00:20:39.556 A:middle
own unit test target to contain

00:20:39.556 --> 00:20:39.856 A:middle
its test.

00:20:41.286 --> 00:20:43.226 A:middle
Additionally, Swift packages

00:20:43.256 --> 00:20:44.816 A:middle
that you create and write tests

00:20:44.816 --> 00:20:47.086 A:middle
for in Xcode already define test

00:20:47.126 --> 00:20:47.526 A:middle
targets.

00:20:48.386 --> 00:20:50.096 A:middle
These test targets behave the

00:20:50.096 --> 00:20:52.536 A:middle
same way in Xcode as any other

00:20:52.706 --> 00:20:54.206 A:middle
unit test target.

00:20:55.056 --> 00:20:57.006 A:middle
Finally, once you have a full

00:20:57.006 --> 00:20:58.746 A:middle
test rewritten for each of your

00:20:58.746 --> 00:21:00.996 A:middle
test targets you may wonder how

00:20:58.746 --> 00:21:00.996 A:middle
test targets you may wonder how

00:21:00.996 --> 00:21:02.896 A:middle
well your test actually cover

00:21:02.896 --> 00:21:03.966 A:middle
all of your source code.

00:21:04.776 --> 00:21:06.266 A:middle
For this you can use Code

00:21:06.266 --> 00:21:06.816 A:middle
Coverage.

00:21:07.636 --> 00:21:09.246 A:middle
Code Coverage is a feature in

00:21:09.476 --> 00:21:11.556 A:middle
Xcode in XCTest that will

00:21:11.556 --> 00:21:13.566 A:middle
measure and visualize the number

00:21:13.566 --> 00:21:15.216 A:middle
of times each line of your

00:21:15.216 --> 00:21:17.396 A:middle
source code was executed during

00:21:17.396 --> 00:21:18.116 A:middle
your test run.

00:21:19.596 --> 00:21:21.476 A:middle
After enabling the feature and

00:21:21.476 --> 00:21:23.386 A:middle
running your test, you can go to

00:21:23.386 --> 00:21:25.436 A:middle
the report navigator and select

00:21:25.436 --> 00:21:27.116 A:middle
the coverage data for your test

00:21:27.866 --> 00:21:27.976 A:middle
run.

00:21:29.136 --> 00:21:31.636 A:middle
There, you'll see a list of each

00:21:31.636 --> 00:21:33.476 A:middle
of your test targets and classes

00:21:33.806 --> 00:21:35.456 A:middle
along with the percentage that

00:21:35.456 --> 00:21:37.306 A:middle
shows how much of your source

00:21:37.366 --> 00:21:38.976 A:middle
code in that section was

00:21:39.286 --> 00:21:40.506 A:middle
actually executed.

00:21:41.376 --> 00:21:42.946 A:middle
You can select each test class

00:21:43.116 --> 00:21:44.566 A:middle
to switch directly to the file.

00:21:45.846 --> 00:21:47.346 A:middle
When showing coverage data in a

00:21:47.346 --> 00:21:49.316 A:middle
source file, the source editor

00:21:49.316 --> 00:21:51.416 A:middle
gutter on the right will show a

00:21:51.416 --> 00:21:53.626 A:middle
number indicating how many times

00:21:53.796 --> 00:21:55.636 A:middle
that line was executed when you

00:21:55.636 --> 00:21:56.116 A:middle
ran your tests.

00:21:57.336 --> 00:21:58.696 A:middle
You can also hover over the

00:21:58.696 --> 00:22:00.346 A:middle
numbers to see information

00:21:58.696 --> 00:22:00.346 A:middle
numbers to see information

00:22:00.346 --> 00:22:01.706 A:middle
directly in your source editor.

00:22:03.176 --> 00:22:04.706 A:middle
Lines that were executed will

00:22:04.706 --> 00:22:05.356 A:middle
turn green.

00:22:06.286 --> 00:22:07.436 A:middle
Sections that were not hit

00:22:07.436 --> 00:22:09.026 A:middle
during your test will highlight

00:22:09.026 --> 00:22:09.326 A:middle
red.

00:22:10.356 --> 00:22:11.756 A:middle
You can also see complex

00:22:11.756 --> 00:22:13.856 A:middle
information showing individual

00:22:13.856 --> 00:22:16.296 A:middle
code paths that were not hit

00:22:16.296 --> 00:22:17.796 A:middle
during your test, such as

00:22:17.796 --> 00:22:18.976 A:middle
conditionals that were never

00:22:18.976 --> 00:22:19.616 A:middle
selected.

00:22:20.466 --> 00:22:22.406 A:middle
The code coverage tool overall

00:22:22.406 --> 00:22:24.146 A:middle
gives you more information about

00:22:24.146 --> 00:22:25.746 A:middle
your test and can help you

00:22:25.746 --> 00:22:27.696 A:middle
identify areas you may want to

00:22:27.696 --> 00:22:30.356 A:middle
write more tests for.

00:22:30.576 --> 00:22:31.646 A:middle
When committing new work to

00:22:31.696 --> 00:22:33.936 A:middle
repository including your test

00:22:34.336 --> 00:22:36.286 A:middle
along with your code ensures

00:22:36.286 --> 00:22:37.586 A:middle
that everything is quality

00:22:37.586 --> 00:22:39.456 A:middle
controlled and checking your

00:22:39.456 --> 00:22:41.446 A:middle
code coverage ensures that you

00:22:41.446 --> 00:22:42.526 A:middle
don't miss anything.

00:22:43.696 --> 00:22:44.676 A:middle
If you feel like your tests

00:22:44.946 --> 00:22:46.486 A:middle
don't fully cover your changes,

00:22:46.816 --> 00:22:48.706 A:middle
it may be a good time to go back

00:22:48.706 --> 00:22:50.366 A:middle
and write more tests.

00:22:51.016 --> 00:22:52.846 A:middle
You'll get the most value out of

00:22:52.846 --> 00:22:54.136 A:middle
your tests by writing them

00:22:54.136 --> 00:22:54.526 A:middle
early.

00:22:55.296 --> 00:22:57.106 A:middle
By having a test suite that goes

00:22:57.106 --> 00:22:59.016 A:middle
along with your source code, you

00:22:59.016 --> 00:23:00.276 A:middle
can ensure that each new

00:22:59.016 --> 00:23:00.276 A:middle
can ensure that each new

00:23:00.306 --> 00:23:02.296 A:middle
function you write is reliable

00:23:02.446 --> 00:23:03.836 A:middle
and behaves as expected.

00:23:04.696 --> 00:23:06.496 A:middle
And remember, testing is an

00:23:06.496 --> 00:23:08.656 A:middle
ongoing process and vital to the

00:23:08.656 --> 00:23:10.466 A:middle
health of your app.

00:23:10.466 --> 00:23:12.246 A:middle
Now, I'd like to invite Stuart

00:23:12.246 --> 00:23:13.956 A:middle
to the stage to tell you more

00:23:14.006 --> 00:23:15.376 A:middle
about how you can get the most

00:23:15.376 --> 00:23:16.976 A:middle
out of your tests in Xcode.

00:23:17.516 --> 00:23:25.656 A:middle
[ Applause ]

00:23:26.156 --> 00:23:27.056 A:middle
&gt;&gt; Thanks, Ana.

00:23:27.586 --> 00:23:28.846 A:middle
So now that you've learned the

00:23:28.846 --> 00:23:31.056 A:middle
basics of testing in Xcode, I'd

00:23:31.056 --> 00:23:32.436 A:middle
like to talk about a new feature

00:23:32.436 --> 00:23:34.366 A:middle
in Xcode 11 called Test Plans,

00:23:34.576 --> 00:23:36.196 A:middle
which helps you get the most out

00:23:36.196 --> 00:23:38.596 A:middle
of your tests.

00:23:38.776 --> 00:23:39.816 A:middle
So whether you're just getting

00:23:39.816 --> 00:23:41.926 A:middle
started with writing test or if

00:23:41.926 --> 00:23:43.356 A:middle
your project already has a large

00:23:43.356 --> 00:23:45.366 A:middle
and robust test suite, there's

00:23:45.366 --> 00:23:46.526 A:middle
one piece of advice we'd like to

00:23:46.526 --> 00:23:47.786 A:middle
share to help you get the most

00:23:47.786 --> 00:23:48.516 A:middle
out of your tests.

00:23:49.326 --> 00:23:50.456 A:middle
We actually recommend that you

00:23:50.456 --> 00:23:51.856 A:middle
run them more than once in

00:23:51.856 --> 00:23:52.546 A:middle
different ways.

00:23:53.756 --> 00:23:54.896 A:middle
Now even if you don't modify

00:23:54.896 --> 00:23:56.486 A:middle
your tests at all, if you

00:23:56.486 --> 00:23:58.266 A:middle
leverage more of Xcode's build

00:23:58.266 --> 00:23:59.816 A:middle
in testing options and its

00:23:59.816 --> 00:24:01.566 A:middle
advance capabilities, you can

00:23:59.816 --> 00:24:01.566 A:middle
advance capabilities, you can

00:24:01.566 --> 00:24:02.976 A:middle
get a lot more out of your tests

00:24:03.056 --> 00:24:04.186 A:middle
and catch more bugs.

00:24:05.036 --> 00:24:06.116 A:middle
Let's walk through an example to

00:24:06.116 --> 00:24:07.406 A:middle
explain this.

00:24:07.996 --> 00:24:09.716 A:middle
So, imagine that the app we've

00:24:09.716 --> 00:24:11.576 A:middle
been working on is localized

00:24:11.576 --> 00:24:12.436 A:middle
into several different

00:24:12.436 --> 00:24:12.996 A:middle
languages.

00:24:13.896 --> 00:24:15.096 A:middle
And now that we've learned how,

00:24:15.486 --> 00:24:16.786 A:middle
we've written several UI tests

00:24:16.786 --> 00:24:17.616 A:middle
for our app as well.

00:24:18.946 --> 00:24:21.156 A:middle
Now, once we've done this, our

00:24:21.156 --> 00:24:22.746 A:middle
test will most likely succeed

00:24:22.886 --> 00:24:23.706 A:middle
when we run them in our

00:24:23.706 --> 00:24:25.326 A:middle
development language, which in

00:24:25.326 --> 00:24:26.266 A:middle
this case is English.

00:24:27.666 --> 00:24:29.166 A:middle
But imagine that one day we

00:24:29.166 --> 00:24:30.906 A:middle
discover a bug that only

00:24:30.906 --> 00:24:32.536 A:middle
reproduces in certain languages

00:24:33.096 --> 00:24:34.516 A:middle
where a localization string is

00:24:34.516 --> 00:24:35.656 A:middle
missing for that language.

00:24:36.386 --> 00:24:37.706 A:middle
It's using a placeholder string

00:24:37.706 --> 00:24:39.226 A:middle
instead which breaks the UI

00:24:39.226 --> 00:24:39.586 A:middle
layout.

00:24:40.856 --> 00:24:42.016 A:middle
Now, once we're aware of this

00:24:42.076 --> 00:24:43.896 A:middle
bug, we can adjust Xcode

00:24:43.896 --> 00:24:46.196 A:middle
settings to manually run our UI

00:24:46.196 --> 00:24:47.336 A:middle
tests in that language.

00:24:47.766 --> 00:24:49.576 A:middle
And if we do that we might see a

00:24:49.576 --> 00:24:50.476 A:middle
UI test failure.

00:24:51.336 --> 00:24:52.806 A:middle
Of course if we don't, that's a

00:24:52.806 --> 00:24:54.476 A:middle
great opportunity to write a new

00:24:54.476 --> 00:24:56.246 A:middle
test that reproduces the issue

00:24:56.526 --> 00:24:58.156 A:middle
and fails until we fix the bug.

00:24:59.526 --> 00:25:01.026 A:middle
But once we fix that issue and

00:24:59.526 --> 00:25:01.026 A:middle
But once we fix that issue and

00:25:01.026 --> 00:25:02.096 A:middle
we have a test covering it,

00:25:02.556 --> 00:25:04.066 A:middle
ideally we should always run our

00:25:04.066 --> 00:25:05.896 A:middle
tests in this language in

00:25:05.896 --> 00:25:06.906 A:middle
addition to our development

00:25:06.906 --> 00:25:08.296 A:middle
language to make sure it doesn't

00:25:08.296 --> 00:25:08.786 A:middle
break again.

00:25:09.406 --> 00:25:12.946 A:middle
So that's just one example but

00:25:12.946 --> 00:25:14.306 A:middle
there are other cases too of

00:25:14.566 --> 00:25:16.246 A:middle
bugs that might only be caught

00:25:16.446 --> 00:25:17.746 A:middle
if you run your tests more than

00:25:17.746 --> 00:25:19.286 A:middle
once in a different way each

00:25:19.286 --> 00:25:19.496 A:middle
time.

00:25:20.776 --> 00:25:22.366 A:middle
For example, you might choose to

00:25:22.366 --> 00:25:23.426 A:middle
run your test in both

00:25:23.506 --> 00:25:25.536 A:middle
alphabetical and random order

00:25:25.976 --> 00:25:27.006 A:middle
since running your tests in a

00:25:27.006 --> 00:25:28.286 A:middle
randomized order is really

00:25:28.286 --> 00:25:29.546 A:middle
helpful for finding hidden

00:25:29.546 --> 00:25:30.776 A:middle
dependencies between your test

00:25:30.776 --> 00:25:31.206 A:middle
methods.

00:25:32.586 --> 00:25:33.656 A:middle
Or you might want to run your

00:25:33.656 --> 00:25:34.806 A:middle
tests using more than one

00:25:34.806 --> 00:25:37.616 A:middle
sanitizer, such as both address

00:25:37.616 --> 00:25:39.166 A:middle
sanitizer and thread sanitizer.

00:25:40.056 --> 00:25:40.936 A:middle
And I'll explain a little bit

00:25:40.936 --> 00:25:41.806 A:middle
more about what these are later

00:25:41.806 --> 00:25:42.786 A:middle
on if you're not familiar.

00:25:43.906 --> 00:25:45.936 A:middle
Or you could even vary arbitrary

00:25:45.936 --> 00:25:47.516 A:middle
command line arguments or

00:25:47.516 --> 00:25:48.766 A:middle
environment variables each time

00:25:48.766 --> 00:25:49.276 A:middle
you test.

00:25:49.926 --> 00:25:51.086 A:middle
And this can be helpful if the

00:25:51.086 --> 00:25:52.616 A:middle
code that you're testing needs

00:25:52.646 --> 00:25:54.796 A:middle
to modify or fake certain things

00:25:54.796 --> 00:25:55.956 A:middle
when you're testing such as

00:25:56.266 --> 00:25:57.686 A:middle
using a testing version of your

00:25:57.686 --> 00:25:59.606 A:middle
web server or maybe mock data

00:26:00.346 --> 00:26:00.466 A:middle
sets.

00:26:01.756 --> 00:26:03.636 A:middle
Xcode allows you to configure

00:26:03.636 --> 00:26:05.176 A:middle
various options about how your

00:26:05.176 --> 00:26:06.526 A:middle
app is run using the scheme

00:26:06.526 --> 00:26:07.146 A:middle
editor today.

00:26:08.256 --> 00:26:09.406 A:middle
You can visit the Arguments,

00:26:09.526 --> 00:26:11.936 A:middle
Options or Diagnostics tabs to

00:26:11.936 --> 00:26:13.556 A:middle
control various things about how

00:26:13.556 --> 00:26:14.396 A:middle
your app is launched.

00:26:15.686 --> 00:26:17.026 A:middle
But this only allows you to run

00:26:17.026 --> 00:26:18.816 A:middle
your app interactively a single

00:26:18.816 --> 00:26:20.206 A:middle
time using whichever settings

00:26:20.206 --> 00:26:20.516 A:middle
you pick.

00:26:21.256 --> 00:26:23.036 A:middle
What we really like and what

00:26:23.036 --> 00:26:24.316 A:middle
we've been talking about is the

00:26:24.316 --> 00:26:25.696 A:middle
ability to run our tests

00:26:25.696 --> 00:26:26.596 A:middle
multiple times.

00:26:27.246 --> 00:26:28.696 A:middle
And for that, we're introducing

00:26:28.696 --> 00:26:30.766 A:middle
a new feature in Xcode 11 called

00:26:31.816 --> 00:26:32.736 A:middle
test plans.

00:26:32.866 --> 00:26:34.906 A:middle
So test plans allows running

00:26:34.906 --> 00:26:36.546 A:middle
your test more than once with

00:26:36.546 --> 00:26:37.166 A:middle
different settings.

00:26:38.496 --> 00:26:39.826 A:middle
Using a test plan, you can

00:26:39.826 --> 00:26:41.426 A:middle
define all your testing variance

00:26:41.476 --> 00:26:42.336 A:middle
in one place.

00:26:42.976 --> 00:26:43.946 A:middle
And then, you can share that

00:26:43.946 --> 00:26:45.166 A:middle
between multiple schemes.

00:26:46.266 --> 00:26:47.416 A:middle
Now, if you've previously

00:26:47.416 --> 00:26:49.336 A:middle
duplicated your schemes just so

00:26:49.336 --> 00:26:50.536 A:middle
that you can run your test more

00:26:50.536 --> 00:26:52.316 A:middle
than once, you might be able to

00:26:52.316 --> 00:26:54.456 A:middle
undo that and consolidate your

00:26:54.456 --> 00:26:56.036 A:middle
schemes back down to just one

00:26:56.116 --> 00:26:58.266 A:middle
using a test plan.

00:26:58.476 --> 00:26:59.836 A:middle
So test plans is supported in

00:26:59.836 --> 00:27:01.676 A:middle
Xcode as well as in xcodebuild

00:26:59.836 --> 00:27:01.676 A:middle
Xcode as well as in xcodebuild

00:27:01.876 --> 00:27:02.916 A:middle
for use on continuous

00:27:02.916 --> 00:27:04.946 A:middle
integration servers and in Xcode

00:27:04.946 --> 00:27:05.386 A:middle
Server.

00:27:06.286 --> 00:27:07.846 A:middle
And it's really easy to adopt in

00:27:07.846 --> 00:27:08.716 A:middle
existing projects.

00:27:09.856 --> 00:27:11.016 A:middle
So rather than keep talking

00:27:11.016 --> 00:27:12.126 A:middle
about it, I'd like to go back to

00:27:12.126 --> 00:27:13.336 A:middle
my demo project and show you how

00:27:13.336 --> 00:27:13.706 A:middle
it works.

00:27:14.516 --> 00:27:19.500 A:middle
[ Applause ]

00:27:26.756 --> 00:27:28.076 A:middle
All right.

00:27:29.076 --> 00:27:30.236 A:middle
So back in the project that I've

00:27:30.236 --> 00:27:31.856 A:middle
been working on, I'll get

00:27:31.856 --> 00:27:33.016 A:middle
started showing your test plans

00:27:33.076 --> 00:27:34.546 A:middle
by clicking on the New Test Plan

00:27:34.546 --> 00:27:35.666 A:middle
File in my project.

00:27:36.576 --> 00:27:37.726 A:middle
So here, I can see all the

00:27:37.726 --> 00:27:39.166 A:middle
details about my test plan.

00:27:40.256 --> 00:27:42.066 A:middle
I can see all of the tests

00:27:42.426 --> 00:27:44.076 A:middle
organized first by test target

00:27:44.946 --> 00:27:47.286 A:middle
then by test class and then by

00:27:47.326 --> 00:27:48.576 A:middle
all of the test method inside of

00:27:48.576 --> 00:27:49.126 A:middle
each class.

00:27:50.396 --> 00:27:51.946 A:middle
Now, using this view, I can see

00:27:51.946 --> 00:27:52.786 A:middle
a few different things.

00:27:52.786 --> 00:27:54.546 A:middle
I can see the full list of all

00:27:54.546 --> 00:27:56.796 A:middle
of my tests, of course, or if I

00:27:56.796 --> 00:27:58.166 A:middle
want to find a specific test, I

00:27:58.166 --> 00:27:59.456 A:middle
can use it-- the filter field to

00:27:59.456 --> 00:27:59.976 A:middle
search for it.

00:28:01.106 --> 00:28:02.706 A:middle
Or if I ever need to temporarily

00:28:02.706 --> 00:28:04.286 A:middle
disable a test for any reason;

00:28:04.716 --> 00:28:05.916 A:middle
for instance, if this one is not

00:28:05.916 --> 00:28:07.046 A:middle
working at the moment, I can

00:28:07.046 --> 00:28:08.516 A:middle
just uncheck it in enabled

00:28:08.516 --> 00:28:08.896 A:middle
column.

00:28:09.516 --> 00:28:11.866 A:middle
I can also modify settings

00:28:11.866 --> 00:28:14.146 A:middle
related to test targets by

00:28:14.146 --> 00:28:15.226 A:middle
clicking on the options button

00:28:15.226 --> 00:28:15.586 A:middle
on the right.

00:28:17.156 --> 00:28:18.546 A:middle
And in this case, I happen to

00:28:18.546 --> 00:28:20.336 A:middle
know that this test target is my

00:28:20.336 --> 00:28:21.776 A:middle
UI test target and it would

00:28:21.776 --> 00:28:23.126 A:middle
really benefit from running all

00:28:23.126 --> 00:28:24.516 A:middle
of its test in parallel on

00:28:24.516 --> 00:28:26.406 A:middle
multiple clone simulators so

00:28:26.406 --> 00:28:27.736 A:middle
that they'll run a lot faster.

00:28:28.116 --> 00:28:29.396 A:middle
So I'll do that by enabling that

00:28:29.716 --> 00:28:29.996 A:middle
here.

00:28:29.996 --> 00:28:32.606 A:middle
So next, I'll go to the

00:28:32.606 --> 00:28:34.236 A:middle
Configurations tab of my test

00:28:34.236 --> 00:28:34.456 A:middle
plan.

00:28:35.276 --> 00:28:36.586 A:middle
And this is where I can control

00:28:36.816 --> 00:28:38.066 A:middle
how my tests will run and how

00:28:38.066 --> 00:28:39.086 A:middle
many times that they'll run.

00:28:40.216 --> 00:28:41.656 A:middle
On the left, we have a list of

00:28:41.656 --> 00:28:42.376 A:middle
what are called test

00:28:42.376 --> 00:28:43.136 A:middle
configurations.

00:28:43.816 --> 00:28:45.076 A:middle
And we also have an item at the

00:28:45.076 --> 00:28:46.736 A:middle
top called Shared Settings.

00:28:47.236 --> 00:28:48.806 A:middle
And the Shared Settings is where

00:28:48.806 --> 00:28:50.706 A:middle
I can control options for-- that

00:28:50.706 --> 00:28:52.246 A:middle
are common to all the times in

00:28:52.246 --> 00:28:53.006 A:middle
my test run.

00:28:54.196 --> 00:28:56.466 A:middle
And if we look at what all I can

00:28:56.466 --> 00:28:57.766 A:middle
control in a test plan, there's

00:28:57.766 --> 00:28:58.816 A:middle
a lot of things I can set.

00:28:59.936 --> 00:29:01.466 A:middle
I can modify different arguments

00:28:59.936 --> 00:29:01.466 A:middle
I can modify different arguments

00:29:01.466 --> 00:29:03.016 A:middle
for how my tester should be

00:29:03.016 --> 00:29:03.396 A:middle
launched.

00:29:03.446 --> 00:29:05.626 A:middle
I can modify settings about

00:29:05.626 --> 00:29:09.556 A:middle
localization or alter how long

00:29:09.556 --> 00:29:11.046 A:middle
my UI testing screenshots are

00:29:11.046 --> 00:29:11.536 A:middle
preserved.

00:29:12.676 --> 00:29:14.366 A:middle
I can modify the test execution

00:29:14.366 --> 00:29:16.956 A:middle
order, enable code coverage or

00:29:16.956 --> 00:29:18.376 A:middle
enable things like run time

00:29:18.376 --> 00:29:19.566 A:middle
sanitizers or memory

00:29:19.566 --> 00:29:20.346 A:middle
diagnostics.

00:29:20.906 --> 00:29:23.416 A:middle
Now, you may notice that some of

00:29:23.416 --> 00:29:25.256 A:middle
the items here are in bold text

00:29:25.796 --> 00:29:26.686 A:middle
such as the Environment

00:29:26.686 --> 00:29:27.396 A:middle
Variables row.

00:29:28.256 --> 00:29:29.446 A:middle
That signifies that I've given

00:29:29.446 --> 00:29:30.186 A:middle
it a custom value.

00:29:30.186 --> 00:29:32.016 A:middle
And here, I've given it a custom

00:29:32.016 --> 00:29:33.216 A:middle
environment variable to run my

00:29:33.216 --> 00:29:33.666 A:middle
test with.

00:29:34.996 --> 00:29:36.666 A:middle
I've also customized my tests to

00:29:36.666 --> 00:29:37.966 A:middle
always run them in a random

00:29:37.966 --> 00:29:40.076 A:middle
order instead of alphabetical.

00:29:40.646 --> 00:29:43.336 A:middle
So what I really like to do in

00:29:43.336 --> 00:29:45.456 A:middle
this test plan is to modify it

00:29:45.626 --> 00:29:47.896 A:middle
to run similar to the example I

00:29:47.896 --> 00:29:49.596 A:middle
gave earlier so that it will run

00:29:49.596 --> 00:29:50.726 A:middle
two times using different

00:29:50.726 --> 00:29:51.286 A:middle
languages.

00:29:52.396 --> 00:29:53.966 A:middle
I'll do that by adding a second

00:29:53.966 --> 00:29:54.626 A:middle
configuration.

00:29:55.406 --> 00:29:56.396 A:middle
And because I'm going run it in

00:29:56.396 --> 00:29:57.286 A:middle
a different language, I'll give

00:29:57.286 --> 00:29:58.766 A:middle
it a custom name of the language

00:29:58.766 --> 00:30:00.376 A:middle
I'll use which is German.

00:29:58.766 --> 00:30:00.376 A:middle
I'll use which is German.

00:30:01.106 --> 00:30:02.476 A:middle
And while I'm here, I'll

00:30:02.476 --> 00:30:04.076 A:middle
customize the name of the first

00:30:04.076 --> 00:30:05.876 A:middle
configuration to US English.

00:30:05.876 --> 00:30:08.776 A:middle
Now, in the US English

00:30:08.906 --> 00:30:10.506 A:middle
configuration, I'm actually

00:30:10.506 --> 00:30:11.656 A:middle
going to leave it as is with all

00:30:11.656 --> 00:30:13.506 A:middle
of its default values plus the

00:30:13.506 --> 00:30:14.316 A:middle
shared settings.

00:30:15.276 --> 00:30:16.976 A:middle
But in the German configuration,

00:30:16.976 --> 00:30:18.476 A:middle
I will customize the language

00:30:19.336 --> 00:30:20.766 A:middle
and the region.

00:30:21.396 --> 00:30:25.066 A:middle
And I want to point out that

00:30:25.106 --> 00:30:26.756 A:middle
since I'm editing the-- a

00:30:26.756 --> 00:30:29.306 A:middle
configuration right now, in the

00:30:29.436 --> 00:30:31.446 A:middle
pop-up menu, I see an extra item

00:30:31.446 --> 00:30:33.326 A:middle
at the top labeled Plan Default

00:30:33.326 --> 00:30:33.696 A:middle
Value.

00:30:33.696 --> 00:30:35.656 A:middle
And this item represents the

00:30:35.836 --> 00:30:37.856 A:middle
value that it would be inherited

00:30:37.906 --> 00:30:39.036 A:middle
from the shared settings level

00:30:39.036 --> 00:30:39.566 A:middle
of the plan.

00:30:40.126 --> 00:30:41.466 A:middle
So if I ever want to revert this

00:30:41.566 --> 00:30:42.986 A:middle
customization and go back to the

00:30:43.036 --> 00:30:44.896 A:middle
inherited value, I can just

00:30:45.326 --> 00:30:46.976 A:middle
select this.

00:30:47.196 --> 00:30:47.716 A:middle
All right.

00:30:47.716 --> 00:30:48.836 A:middle
So, now I've configured my test

00:30:48.836 --> 00:30:49.566 A:middle
plan how I want it.

00:30:50.256 --> 00:30:51.486 A:middle
Next, I like to show you a few

00:30:51.486 --> 00:30:52.726 A:middle
ways that you can use test plans

00:30:52.756 --> 00:30:55.736 A:middle
throughout the rest of Xcode.

00:30:55.926 --> 00:30:57.596 A:middle
I'll go to an event-- a unit

00:30:57.596 --> 00:30:59.166 A:middle
test file I've been working on

00:30:59.166 --> 00:31:01.166 A:middle
called EventTests, which tests

00:30:59.166 --> 00:31:01.166 A:middle
called EventTests, which tests

00:31:01.216 --> 00:31:02.476 A:middle
the event struct in my app.

00:31:03.616 --> 00:31:04.726 A:middle
And it's just got a couple of

00:31:04.726 --> 00:31:06.006 A:middle
small unit test about the

00:31:06.006 --> 00:31:06.396 A:middle
struct.

00:31:07.596 --> 00:31:09.956 A:middle
And if I click on any of the

00:31:09.956 --> 00:31:12.376 A:middle
test diamonds in this test file,

00:31:13.036 --> 00:31:14.296 A:middle
because I've configured my test

00:31:14.296 --> 00:31:15.886 A:middle
plan with two configurations, it

00:31:16.326 --> 00:31:18.296 A:middle
will run my tests two times

00:31:18.296 --> 00:31:18.616 A:middle
total.

00:31:19.516 --> 00:31:21.796 A:middle
And that's great for situations

00:31:21.796 --> 00:31:22.956 A:middle
when I want to run all of my

00:31:22.956 --> 00:31:24.526 A:middle
tests especially on my

00:31:24.526 --> 00:31:25.786 A:middle
continuous integration server.

00:31:26.516 --> 00:31:28.376 A:middle
But as I'm developing my test, I

00:31:28.376 --> 00:31:30.046 A:middle
may not run-- run them all those

00:31:30.046 --> 00:31:30.516 A:middle
times.

00:31:31.196 --> 00:31:32.816 A:middle
So I can choose to just run a

00:31:32.816 --> 00:31:34.936 A:middle
single configuration by option

00:31:34.936 --> 00:31:36.616 A:middle
clicking on the test diamond and

00:31:36.616 --> 00:31:38.586 A:middle
here I see a menu with just so I

00:31:38.586 --> 00:31:39.806 A:middle
could select one configuration.

00:31:41.666 --> 00:31:42.846 A:middle
I can-- Yeah, thank you

00:31:43.346 --> 00:31:45.666 A:middle
[applause].

00:31:46.166 --> 00:31:48.286 A:middle
I can also do this in the test

00:31:48.286 --> 00:31:48.786 A:middle
navigator.

00:31:49.386 --> 00:31:51.346 A:middle
If I control click on any test

00:31:51.346 --> 00:31:52.656 A:middle
in the test navigator, I see a

00:31:52.656 --> 00:31:54.946 A:middle
similar menu allowing me to run

00:31:55.026 --> 00:31:56.536 A:middle
either all the configurations or

00:31:56.536 --> 00:31:56.886 A:middle
just one.

00:31:57.506 --> 00:32:00.146 A:middle
And while I'm here, I also want

00:31:57.506 --> 00:32:00.146 A:middle
And while I'm here, I also want

00:32:00.146 --> 00:32:01.136 A:middle
to mention that the test

00:32:01.136 --> 00:32:03.336 A:middle
navigator now shows the-- which

00:32:03.406 --> 00:32:05.536 A:middle
test plan is actually active at

00:32:05.536 --> 00:32:05.936 A:middle
the moment.

00:32:06.516 --> 00:32:08.356 A:middle
I only have one test plan in my

00:32:08.356 --> 00:32:10.176 A:middle
scheme but there can be multiple

00:32:10.446 --> 00:32:11.186 A:middle
and we'll talk about the

00:32:11.186 --> 00:32:12.266 A:middle
benefits of doing that a little

00:32:12.266 --> 00:32:12.786 A:middle
bit later on.

00:32:12.976 --> 00:32:13.506 A:middle
All right.

00:32:14.536 --> 00:32:16.636 A:middle
So now, I like to just run my

00:32:16.706 --> 00:32:18.036 A:middle
unit tests in all of the

00:32:18.036 --> 00:32:18.756 A:middle
configurations.

00:32:20.166 --> 00:32:21.776 A:middle
And now, we'll see Xcode quickly

00:32:21.916 --> 00:32:24.186 A:middle
build my entire project and then

00:32:24.186 --> 00:32:26.206 A:middle
run my test two times in the

00:32:26.206 --> 00:32:26.726 A:middle
simulator.

00:32:27.506 --> 00:32:28.326 A:middle
And it's already done.

00:32:29.366 --> 00:32:30.406 A:middle
So there, it looks like there

00:32:30.406 --> 00:32:31.836 A:middle
was at least one issue though.

00:32:32.226 --> 00:32:33.516 A:middle
So let's go see the details

00:32:33.516 --> 00:32:34.066 A:middle
about that.

00:32:35.346 --> 00:32:36.336 A:middle
I'll see those details by

00:32:36.336 --> 00:32:37.746 A:middle
clicking on the report navigator

00:32:38.466 --> 00:32:39.806 A:middle
and going to the most recent

00:32:39.806 --> 00:32:40.526 A:middle
test action.

00:32:41.806 --> 00:32:44.776 A:middle
So here, we can see that most of

00:32:44.776 --> 00:32:45.726 A:middle
my tests succeeded.

00:32:46.136 --> 00:32:47.276 A:middle
So they get the green check mark

00:32:48.696 --> 00:32:51.006 A:middle
and one of the tests had an

00:32:51.006 --> 00:32:52.006 A:middle
issue of some kind, so it has a

00:32:52.006 --> 00:32:53.596 A:middle
red icon with a dash through it.

00:32:53.596 --> 00:32:55.916 A:middle
And the test report is really

00:32:55.916 --> 00:32:57.156 A:middle
good at showing me all of the

00:32:57.156 --> 00:32:58.406 A:middle
details about everything that

00:32:58.406 --> 00:32:59.996 A:middle
happened in my testing session.

00:32:59.996 --> 00:33:01.836 A:middle
And if I expand this, I can

00:32:59.996 --> 00:33:01.836 A:middle
And if I expand this, I can

00:33:01.836 --> 00:33:03.776 A:middle
see-- it looks like this test

00:33:03.776 --> 00:33:05.336 A:middle
method succeeded in one

00:33:05.336 --> 00:33:06.826 A:middle
configuration and failed in

00:33:06.826 --> 00:33:07.116 A:middle
another.

00:33:08.346 --> 00:33:09.626 A:middle
And if I open it further, I can

00:33:09.626 --> 00:33:10.876 A:middle
see exactly the issue.

00:33:11.596 --> 00:33:12.706 A:middle
It looks like this test method

00:33:13.166 --> 00:33:14.806 A:middle
received English text but it was

00:33:14.806 --> 00:33:15.996 A:middle
expecting German text.

00:33:16.746 --> 00:33:18.506 A:middle
So that looks like a real issue

00:33:18.506 --> 00:33:19.386 A:middle
that I'll need to go back to

00:33:19.386 --> 00:33:20.796 A:middle
my-- either my app code or my

00:33:20.796 --> 00:33:22.486 A:middle
test and adjust and I'll do that

00:33:22.486 --> 00:33:22.866 A:middle
later on.

00:33:23.906 --> 00:33:25.176 A:middle
But before I wrap up, I want to

00:33:25.176 --> 00:33:26.296 A:middle
show you a few other

00:33:26.296 --> 00:33:28.026 A:middle
enhancements to the test report

00:33:28.026 --> 00:33:28.226 A:middle
here.

00:33:29.046 --> 00:33:30.556 A:middle
If I want to only see test

00:33:30.556 --> 00:33:32.356 A:middle
methods like this one which had

00:33:32.356 --> 00:33:34.436 A:middle
a mixed status between the two

00:33:34.436 --> 00:33:36.346 A:middle
configurations, I can do that

00:33:36.346 --> 00:33:37.526 A:middle
easily by just clicking on the

00:33:37.526 --> 00:33:40.506 A:middle
Mixed button in the scope bar.

00:33:40.716 --> 00:33:42.806 A:middle
Or if I only want to see the

00:33:42.806 --> 00:33:44.086 A:middle
results from a certain

00:33:44.086 --> 00:33:45.856 A:middle
configuration, I can just click

00:33:46.076 --> 00:33:47.286 A:middle
on the test configurations

00:33:47.316 --> 00:33:48.986 A:middle
popover and select one of the

00:33:48.986 --> 00:33:49.796 A:middle
configurations.

00:33:53.536 --> 00:33:54.146 A:middle
All right.

00:33:54.246 --> 00:33:55.426 A:middle
So that's a quick tour of test

00:33:55.426 --> 00:33:56.206 A:middle
plans in Xcode.

00:33:56.436 --> 00:33:57.376 A:middle
And now, let me just go back to

00:33:57.376 --> 00:33:57.746 A:middle
slides.

00:33:59.516 --> 00:34:04.500 A:middle
[ Applause ]

00:33:59.516 --> 00:34:04.500 A:middle
[ Applause ]

00:34:06.876 --> 00:34:08.676 A:middle
So, now that you've seen test

00:34:08.676 --> 00:34:09.966 A:middle
plans in action, I'd like to

00:34:09.966 --> 00:34:11.226 A:middle
mention a few details about how

00:34:11.226 --> 00:34:11.646 A:middle
it works.

00:34:12.876 --> 00:34:14.976 A:middle
A test plan file is really just

00:34:14.976 --> 00:34:17.426 A:middle
a JSON file with a .xctestplan

00:34:17.496 --> 00:34:18.166 A:middle
file extension.

00:34:18.775 --> 00:34:20.446 A:middle
And it contains all of your

00:34:20.446 --> 00:34:22.735 A:middle
tests to run as well as all of

00:34:22.735 --> 00:34:24.416 A:middle
the test configurations which

00:34:24.416 --> 00:34:25.696 A:middle
describe how your test will run.

00:34:26.326 --> 00:34:28.315 A:middle
Now, a test plan file is

00:34:28.315 --> 00:34:29.666 A:middle
included in your regular project

00:34:29.666 --> 00:34:31.196 A:middle
structure and it can be

00:34:31.196 --> 00:34:32.436 A:middle
referenced by one or more

00:34:32.436 --> 00:34:33.016 A:middle
schemes.

00:34:33.565 --> 00:34:38.315 A:middle
Now, a test configuration

00:34:38.315 --> 00:34:40.266 A:middle
meanwhile describes a single run

00:34:40.436 --> 00:34:42.016 A:middle
of your entire plan's test.

00:34:42.766 --> 00:34:44.356 A:middle
Now, each test configuration has

00:34:44.356 --> 00:34:46.826 A:middle
a customizable unique name and

00:34:46.826 --> 00:34:48.235 A:middle
it's a really good idea to give

00:34:48.235 --> 00:34:49.466 A:middle
each test configuration a

00:34:49.466 --> 00:34:50.815 A:middle
meaningful name for your project

00:34:51.315 --> 00:34:52.286 A:middle
since we'll see that name in

00:34:52.286 --> 00:34:53.646 A:middle
places like the test diamond

00:34:53.646 --> 00:34:55.936 A:middle
popover menu and the test report

00:34:55.936 --> 00:34:56.436 A:middle
like we saw.

00:34:56.585 --> 00:34:59.516 A:middle
Now, each test configuration

00:34:59.516 --> 00:35:01.126 A:middle
includes all of the options for

00:34:59.516 --> 00:35:01.126 A:middle
includes all of the options for

00:35:01.126 --> 00:35:02.716 A:middle
how to build and run your test.

00:35:03.586 --> 00:35:05.316 A:middle
And they can inherit any common

00:35:05.316 --> 00:35:06.896 A:middle
options from the shared settings

00:35:06.896 --> 00:35:07.586 A:middle
level of the plan.

00:35:08.506 --> 00:35:09.836 A:middle
So if you have any settings that

00:35:09.836 --> 00:35:11.226 A:middle
are the same each time you run

00:35:11.226 --> 00:35:12.736 A:middle
your tests, you can just define

00:35:12.736 --> 00:35:13.886 A:middle
them in one place and not need

00:35:13.886 --> 00:35:14.656 A:middle
to repeat yourself.

00:35:15.206 --> 00:35:18.676 A:middle
So if you're curious, here is

00:35:18.676 --> 00:35:20.306 A:middle
the full list of all the options

00:35:20.306 --> 00:35:21.556 A:middle
that you can set on each test

00:35:21.556 --> 00:35:22.266 A:middle
configuration.

00:35:23.386 --> 00:35:24.746 A:middle
And all this can be found in the

00:35:24.746 --> 00:35:25.546 A:middle
test plan editors

00:35:25.546 --> 00:35:27.846 A:middle
configuration's tab that I

00:35:29.256 --> 00:35:29.376 A:middle
showed.

00:35:29.596 --> 00:35:31.106 A:middle
So you might be wondering, how

00:35:31.106 --> 00:35:32.386 A:middle
can I begin using test plans.

00:35:32.876 --> 00:35:34.886 A:middle
If you have an existing project,

00:35:35.036 --> 00:35:36.026 A:middle
you'll first need to convert

00:35:36.026 --> 00:35:38.176 A:middle
it-- your scheme to use test

00:35:38.176 --> 00:35:38.576 A:middle
plans.

00:35:39.566 --> 00:35:41.116 A:middle
To do that, first, edit the

00:35:41.116 --> 00:35:44.556 A:middle
scheme then go to the schemes

00:35:44.666 --> 00:35:45.456 A:middle
test action.

00:35:45.986 --> 00:35:48.056 A:middle
And there, you'll see a button

00:35:48.056 --> 00:35:49.626 A:middle
labeled convert to use test

00:35:49.626 --> 00:35:50.006 A:middle
plans.

00:35:51.446 --> 00:35:52.336 A:middle
Clicking on this button will

00:35:52.336 --> 00:35:53.876 A:middle
show a sheet offering the

00:35:53.876 --> 00:35:55.066 A:middle
different ways that you can

00:35:55.066 --> 00:35:55.876 A:middle
convert the scheme.

00:35:56.406 --> 00:35:58.646 A:middle
Well, the first option is to

00:35:58.646 --> 00:35:59.906 A:middle
create a brand new test plan

00:35:59.956 --> 00:36:01.886 A:middle
file from the scheme's existing

00:35:59.956 --> 00:36:01.886 A:middle
file from the scheme's existing

00:36:01.886 --> 00:36:02.366 A:middle
settings.

00:36:03.026 --> 00:36:04.676 A:middle
If this is the first or the only

00:36:04.676 --> 00:36:05.326 A:middle
scheme that you're going to

00:36:05.326 --> 00:36:06.556 A:middle
convert, this is probably the

00:36:06.556 --> 00:36:07.926 A:middle
choice you want.

00:36:08.696 --> 00:36:10.206 A:middle
But another option is to choose

00:36:10.206 --> 00:36:11.426 A:middle
an existing test plan in a

00:36:11.426 --> 00:36:11.826 A:middle
project.

00:36:12.916 --> 00:36:14.246 A:middle
And if you choose this, it will

00:36:14.246 --> 00:36:15.546 A:middle
show a sheet allowing you to

00:36:15.546 --> 00:36:16.836 A:middle
pick an existing test plan in

00:36:16.836 --> 00:36:17.496 A:middle
the work space.

00:36:18.546 --> 00:36:20.946 A:middle
And this is a good option if the

00:36:20.946 --> 00:36:22.876 A:middle
scheme you're converting-- if

00:36:22.876 --> 00:36:23.826 A:middle
you've already converted one

00:36:23.826 --> 00:36:25.286 A:middle
scheme to use test plans and you

00:36:25.286 --> 00:36:26.896 A:middle
want a different scheme to share

00:36:26.896 --> 00:36:27.596 A:middle
that same plan.

00:36:28.476 --> 00:36:29.596 A:middle
And you can also use this if

00:36:29.596 --> 00:36:30.886 A:middle
you've created a test plan file

00:36:30.886 --> 00:36:31.496 A:middle
from scratch.

00:36:32.056 --> 00:36:32.156 A:middle
OK.

00:36:33.856 --> 00:36:35.946 A:middle
So now that we've covered what a

00:36:35.946 --> 00:36:37.786 A:middle
test plan is and you've seen how

00:36:37.786 --> 00:36:39.416 A:middle
to begin using one, I'd like to

00:36:39.416 --> 00:36:40.946 A:middle
offer a few potential ways that

00:36:40.946 --> 00:36:42.326 A:middle
you could use test plans in your

00:36:42.326 --> 00:36:42.796 A:middle
own project.

00:36:43.366 --> 00:36:46.166 A:middle
So here is one basic example of

00:36:46.166 --> 00:36:46.896 A:middle
a test plan that you could

00:36:46.896 --> 00:36:47.256 A:middle
create.

00:36:48.626 --> 00:36:50.066 A:middle
Each of the red boxes represents

00:36:50.066 --> 00:36:51.606 A:middle
one configuration in the plan.

00:36:52.466 --> 00:36:53.416 A:middle
And the first one has the

00:36:53.416 --> 00:36:55.136 A:middle
address sanitizer enabled and

00:36:55.136 --> 00:36:56.306 A:middle
the other has thread sanitizer.

00:36:56.306 --> 00:36:58.346 A:middle
Now, if you're not familiar with

00:36:58.346 --> 00:37:00.266 A:middle
these, sanitizers are tools

00:36:58.346 --> 00:37:00.266 A:middle
these, sanitizers are tools

00:37:00.266 --> 00:37:02.406 A:middle
built into Xcode that instrument

00:37:02.406 --> 00:37:03.916 A:middle
your code and help identify bugs

00:37:03.916 --> 00:37:04.746 A:middle
that can be really hard

00:37:04.746 --> 00:37:05.686 A:middle
reproduce manually.

00:37:06.776 --> 00:37:08.496 A:middle
And some sanitizers like these

00:37:08.496 --> 00:37:09.876 A:middle
two can all be combined with

00:37:09.876 --> 00:37:10.246 A:middle
each other.

00:37:10.896 --> 00:37:12.886 A:middle
But if you construct a test plan

00:37:12.886 --> 00:37:14.286 A:middle
this way, you could still run

00:37:14.286 --> 00:37:15.586 A:middle
your test using both of them and

00:37:15.586 --> 00:37:16.716 A:middle
get all of their benefits.

00:37:17.286 --> 00:37:20.636 A:middle
Now, to get even more value out

00:37:20.636 --> 00:37:22.176 A:middle
of this test plan, if your

00:37:22.176 --> 00:37:23.476 A:middle
project includes C or

00:37:23.476 --> 00:37:25.586 A:middle
Objective-C code, you can expand

00:37:25.586 --> 00:37:26.656 A:middle
the plan by enabling the

00:37:26.656 --> 00:37:28.236 A:middle
undefined behavior sanitizer in

00:37:28.236 --> 00:37:30.266 A:middle
each of the configurations as

00:37:30.896 --> 00:37:31.016 A:middle
well.

00:37:31.216 --> 00:37:32.296 A:middle
So you might look at this and

00:37:32.296 --> 00:37:33.206 A:middle
notice that the undefined

00:37:33.206 --> 00:37:35.136 A:middle
behavior sanitizer is set in two

00:37:35.136 --> 00:37:35.746 A:middle
places.

00:37:35.986 --> 00:37:37.206 A:middle
It's repeated in each of the

00:37:37.206 --> 00:37:38.126 A:middle
configurations.

00:37:38.546 --> 00:37:41.166 A:middle
This would be a great setting to

00:37:41.166 --> 00:37:42.626 A:middle
move up to the shared settings

00:37:42.626 --> 00:37:43.856 A:middle
level of the plan instead.

00:37:44.886 --> 00:37:45.746 A:middle
And then, it will be

00:37:45.746 --> 00:37:47.646 A:middle
automatically inherited by every

00:37:47.646 --> 00:37:50.356 A:middle
configuration in the plan.

00:37:50.506 --> 00:37:51.686 A:middle
Now, one thing to be aware of is

00:37:51.686 --> 00:37:52.796 A:middle
that if you configure a test

00:37:52.796 --> 00:37:54.436 A:middle
plan like this with mutually

00:37:54.436 --> 00:37:56.936 A:middle
incompatible sanitizers is that

00:37:56.936 --> 00:37:58.686 A:middle
if you run both configurations

00:37:58.686 --> 00:38:00.526 A:middle
in the plan, Xcode will need to

00:37:58.686 --> 00:38:00.526 A:middle
in the plan, Xcode will need to

00:38:00.526 --> 00:38:02.146 A:middle
build your project twice, once

00:38:02.146 --> 00:38:03.366 A:middle
for each set of sanitizers.

00:38:04.656 --> 00:38:06.016 A:middle
This is ideal for continuous

00:38:06.016 --> 00:38:07.926 A:middle
integration environments where

00:38:08.036 --> 00:38:09.186 A:middle
you don't mind your test taking

00:38:09.186 --> 00:38:10.346 A:middle
a little bit longer to build

00:38:10.626 --> 00:38:11.816 A:middle
since they're performing more

00:38:11.926 --> 00:38:12.606 A:middle
thorough testing.

00:38:13.306 --> 00:38:16.896 A:middle
But test plan isn't just about

00:38:16.896 --> 00:38:18.176 A:middle
picking different sanitizers.

00:38:18.876 --> 00:38:20.076 A:middle
As I showed in my demo earlier,

00:38:20.306 --> 00:38:21.656 A:middle
you can also configure a plan

00:38:21.656 --> 00:38:23.126 A:middle
with configurations representing

00:38:23.126 --> 00:38:24.696 A:middle
different languages or locales.

00:38:25.706 --> 00:38:27.136 A:middle
For example, I've picked the US,

00:38:27.516 --> 00:38:29.116 A:middle
South Korea, and Italy here and

00:38:29.656 --> 00:38:30.926 A:middle
there is no limit on the number

00:38:30.926 --> 00:38:32.086 A:middle
of configurations you can have.

00:38:32.206 --> 00:38:35.106 A:middle
Now, if you configure a plan

00:38:35.106 --> 00:38:36.736 A:middle
like this, you could use it to

00:38:36.736 --> 00:38:37.876 A:middle
run your UI tests.

00:38:38.276 --> 00:38:39.526 A:middle
And then, you could collect the

00:38:39.526 --> 00:38:41.286 A:middle
screenshots from those tests by

00:38:41.286 --> 00:38:42.736 A:middle
enabling the new localization

00:38:42.736 --> 00:38:44.186 A:middle
screenshots feature in Shared

00:38:44.216 --> 00:38:44.646 A:middle
Settings.

00:38:45.956 --> 00:38:47.336 A:middle
Localization screenshots is a

00:38:47.336 --> 00:38:49.176 A:middle
new feature in Xcode 11, which

00:38:49.176 --> 00:38:50.786 A:middle
will cause your UI tests to

00:38:50.786 --> 00:38:51.776 A:middle
preserve all of their

00:38:51.776 --> 00:38:53.776 A:middle
screenshots even for test that

00:38:53.776 --> 00:38:54.196 A:middle
succeed.

00:38:54.946 --> 00:38:56.446 A:middle
And it will gather data about

00:38:56.446 --> 00:38:57.486 A:middle
the localized string that your

00:38:57.486 --> 00:38:57.966 A:middle
app uses.

00:38:59.486 --> 00:39:00.546 A:middle
So this allows you to reference

00:38:59.486 --> 00:39:00.546 A:middle
So this allows you to reference

00:39:00.546 --> 00:39:02.176 A:middle
the screenshot for context when

00:39:02.176 --> 00:39:04.316 A:middle
you're localizing your app or if

00:39:04.316 --> 00:39:05.066 A:middle
you've already finished

00:39:05.066 --> 00:39:06.436 A:middle
localizing, you could use the

00:39:06.436 --> 00:39:07.536 A:middle
screenshots in your app store

00:39:07.536 --> 00:39:08.546 A:middle
listings around the world.

00:39:10.516 --> 00:39:14.976 A:middle
[ Applause ]

00:39:15.476 --> 00:39:16.626 A:middle
Now for more information about

00:39:16.626 --> 00:39:17.866 A:middle
this and other localization

00:39:17.866 --> 00:39:19.426 A:middle
enhancements this year, check

00:39:19.426 --> 00:39:21.156 A:middle
out our the great-- Creating

00:39:21.156 --> 00:39:22.766 A:middle
Great Localized Experiences

00:39:22.766 --> 00:39:24.296 A:middle
session on the WWDC website.

00:39:24.866 --> 00:39:27.716 A:middle
Now, finally, I'd like to

00:39:27.716 --> 00:39:28.966 A:middle
emphasize that you can mix and

00:39:28.966 --> 00:39:30.176 A:middle
match these settings in a test

00:39:30.176 --> 00:39:31.556 A:middle
plan however it makes sense for

00:39:31.556 --> 00:39:32.366 A:middle
your project.

00:39:33.406 --> 00:39:34.876 A:middle
For example, you could construct

00:39:34.876 --> 00:39:36.466 A:middle
a test plan like this one with

00:39:36.566 --> 00:39:37.596 A:middle
three very different

00:39:37.596 --> 00:39:38.446 A:middle
configurations.

00:39:39.796 --> 00:39:41.306 A:middle
The first one focuses on memory

00:39:41.306 --> 00:39:42.866 A:middle
safety, and so it has the

00:39:42.866 --> 00:39:44.776 A:middle
Address Sanitizer and the Zombie

00:39:44.776 --> 00:39:45.896 A:middle
Objects memory setting.

00:39:46.556 --> 00:39:48.926 A:middle
The second one is all about

00:39:48.926 --> 00:39:50.726 A:middle
concurrency and it's got the

00:39:50.816 --> 00:39:52.776 A:middle
Thread Sanitizer, the Undefined

00:39:52.776 --> 00:39:55.006 A:middle
Behavior Sanitizer, and it runs

00:39:55.006 --> 00:39:56.276 A:middle
tests in a random order each

00:39:56.276 --> 00:39:56.506 A:middle
time.

00:39:57.166 --> 00:39:59.616 A:middle
Then the last configuration is

00:39:59.616 --> 00:40:00.776 A:middle
set up to collect extra

00:39:59.616 --> 00:40:00.776 A:middle
set up to collect extra

00:40:00.776 --> 00:40:02.346 A:middle
diagnostics while running test.

00:40:03.136 --> 00:40:04.246 A:middle
And it does this by setting a

00:40:04.246 --> 00:40:06.056 A:middle
custom environment variable that

00:40:06.126 --> 00:40:07.446 A:middle
the code being tested knows

00:40:07.446 --> 00:40:08.956 A:middle
about in order to trigger more

00:40:08.956 --> 00:40:09.616 A:middle
log collection.

00:40:10.556 --> 00:40:12.326 A:middle
And it also enables the option

00:40:12.326 --> 00:40:13.786 A:middle
to keep all custom file

00:40:13.786 --> 00:40:15.366 A:middle
attachments even for tests that

00:40:15.366 --> 00:40:15.796 A:middle
succeed.

00:40:16.366 --> 00:40:18.646 A:middle
So this is a fairly complex

00:40:18.646 --> 00:40:20.406 A:middle
example but hopefully it shows

00:40:20.406 --> 00:40:21.716 A:middle
the power and the flexibility of

00:40:21.716 --> 00:40:23.056 A:middle
a test plan to run your tests

00:40:23.056 --> 00:40:24.486 A:middle
however you would like.

00:40:26.176 --> 00:40:27.826 A:middle
So that's test plans, a new

00:40:27.826 --> 00:40:29.966 A:middle
feature in Xcode 11 to get more

00:40:29.966 --> 00:40:31.696 A:middle
value out of your tests by

00:40:31.696 --> 00:40:32.876 A:middle
running them multiple times in

00:40:32.876 --> 00:40:33.506 A:middle
different ways.

00:40:34.446 --> 00:40:35.656 A:middle
Now, I'll hand it over to Ethan

00:40:35.826 --> 00:40:37.086 A:middle
to share some ways you can use

00:40:37.086 --> 00:40:37.826 A:middle
Xcode for continuous

00:40:37.826 --> 00:40:38.346 A:middle
integration.

00:40:39.516 --> 00:40:45.456 A:middle
[ Applause ]

00:40:45.956 --> 00:40:46.706 A:middle
&gt;&gt; Thanks, Stuart.

00:40:47.106 --> 00:40:48.626 A:middle
To leverage the full power of

00:40:48.626 --> 00:40:50.346 A:middle
test plans, you likely want to

00:40:50.346 --> 00:40:51.696 A:middle
run your tests under many

00:40:51.696 --> 00:40:52.906 A:middle
different configurations.

00:40:53.456 --> 00:40:55.166 A:middle
A great place to do this is in

00:40:55.166 --> 00:40:56.736 A:middle
continuous integration which

00:40:56.766 --> 00:40:58.066 A:middle
automates the process of

00:40:58.126 --> 00:41:00.106 A:middle
building and running your tests.

00:40:58.126 --> 00:41:00.106 A:middle
building and running your tests.

00:41:00.236 --> 00:41:01.806 A:middle
While at your desk, you focus on

00:41:01.806 --> 00:41:03.116 A:middle
getting individual tests to

00:41:03.116 --> 00:41:05.226 A:middle
pass, continuous integration

00:41:05.226 --> 00:41:06.926 A:middle
runs all of your tests across

00:41:06.926 --> 00:41:08.576 A:middle
all of your devices giving you

00:41:08.576 --> 00:41:09.556 A:middle
maximum coverage.

00:41:10.636 --> 00:41:11.586 A:middle
When it comes to continuous

00:41:11.586 --> 00:41:13.166 A:middle
integration with Xcode, there

00:41:13.166 --> 00:41:14.686 A:middle
are two primary solutions to

00:41:14.686 --> 00:41:15.206 A:middle
choose from.

00:41:15.896 --> 00:41:17.886 A:middle
The first is Xcode Server which

00:41:17.886 --> 00:41:19.486 A:middle
is built directly into Xcode.

00:41:20.296 --> 00:41:21.556 A:middle
With Xcode Server, you can

00:41:21.586 --> 00:41:23.396 A:middle
easily set a box to build and

00:41:23.396 --> 00:41:24.656 A:middle
test your app with minimal

00:41:24.656 --> 00:41:25.516 A:middle
configuration.

00:41:26.326 --> 00:41:28.176 A:middle
The second option is to build

00:41:28.176 --> 00:41:29.736 A:middle
your own continuous integration

00:41:29.736 --> 00:41:30.066 A:middle
setup.

00:41:30.936 --> 00:41:32.576 A:middle
While more advanced, this option

00:41:32.606 --> 00:41:34.236 A:middle
is ideal if you have custom

00:41:34.236 --> 00:41:35.656 A:middle
requirements or need to

00:41:35.656 --> 00:41:36.736 A:middle
integrate with existing

00:41:36.736 --> 00:41:37.466 A:middle
infrastructure.

00:41:38.246 --> 00:41:39.876 A:middle
If you do require a custom

00:41:39.876 --> 00:41:41.036 A:middle
setup, you're in luck.

00:41:41.826 --> 00:41:43.416 A:middle
Xcode comes with powerful tools

00:41:43.416 --> 00:41:44.696 A:middle
that you can use to build your

00:41:44.696 --> 00:41:45.546 A:middle
own automation.

00:41:46.156 --> 00:41:48.966 A:middle
In this section of the talk,

00:41:49.186 --> 00:41:50.566 A:middle
we're going to focus on option

00:41:50.566 --> 00:41:52.056 A:middle
two and learn how to build a

00:41:52.056 --> 00:41:53.586 A:middle
completely custom continuous

00:41:53.586 --> 00:41:54.636 A:middle
integration pipeline.

00:41:55.166 --> 00:41:57.326 A:middle
End to end, our pipeline will be

00:41:57.326 --> 00:41:59.516 A:middle
composed of four steps involving

00:41:59.516 --> 00:42:00.996 A:middle
the use of different tools at

00:41:59.516 --> 00:42:00.996 A:middle
the use of different tools at

00:42:00.996 --> 00:42:01.456 A:middle
each step.

00:42:02.826 --> 00:42:05.056 A:middle
In step number one, we'll build

00:42:05.056 --> 00:42:06.916 A:middle
our tests on a dedicated builder

00:42:06.916 --> 00:42:07.376 A:middle
machine.

00:42:07.976 --> 00:42:11.046 A:middle
In step two, we'll take the

00:42:11.046 --> 00:42:12.586 A:middle
tests that were built and

00:42:12.586 --> 00:42:13.956 A:middle
execute them on a suite of

00:42:13.956 --> 00:42:14.506 A:middle
devices.

00:42:15.536 --> 00:42:16.966 A:middle
These devices will be connected

00:42:16.966 --> 00:42:18.306 A:middle
to a second machine that we've

00:42:18.306 --> 00:42:21.526 A:middle
set aside for running the tests.

00:42:21.676 --> 00:42:23.246 A:middle
The first two tests will produce

00:42:23.246 --> 00:42:24.996 A:middle
a set of build and test results.

00:42:25.886 --> 00:42:27.206 A:middle
These results will serve as the

00:42:27.206 --> 00:42:30.016 A:middle
source of data for our next two

00:42:31.216 --> 00:42:31.376 A:middle
steps.

00:42:31.546 --> 00:42:33.156 A:middle
In step three, we'll mind the

00:42:33.156 --> 00:42:34.326 A:middle
build and test results for

00:42:34.326 --> 00:42:36.336 A:middle
failures in order to populate

00:42:36.336 --> 00:42:37.576 A:middle
our favorite issue tracker.

00:42:39.486 --> 00:42:41.736 A:middle
And finally in step four, we'll

00:42:41.736 --> 00:42:42.886 A:middle
track our code coverage over

00:42:42.886 --> 00:42:44.586 A:middle
time to get a sense of how we're

00:42:44.586 --> 00:42:46.176 A:middle
doing in terms of our overall

00:42:47.536 --> 00:42:49.436 A:middle
test coverage.

00:42:50.066 --> 00:42:51.496 A:middle
Let's start with the first two

00:42:51.496 --> 00:42:53.136 A:middle
steps-- building and running our

00:42:54.226 --> 00:42:54.386 A:middle
tests.

00:42:54.996 --> 00:42:56.866 A:middle
For these tasks, we'll be using

00:42:56.866 --> 00:42:57.616 A:middle
xcodebuild.

00:42:58.286 --> 00:42:59.746 A:middle
Xcodebuild is the command line

00:42:59.746 --> 00:43:01.386 A:middle
interface to Xcode that will

00:42:59.746 --> 00:43:01.386 A:middle
interface to Xcode that will

00:43:01.386 --> 00:43:02.946 A:middle
power the core of a workflow.

00:43:03.776 --> 00:43:05.566 A:middle
Behind xcodebuild, sits the

00:43:05.566 --> 00:43:07.886 A:middle
xcodebuild system and the XCTest

00:43:08.026 --> 00:43:09.646 A:middle
testing harness.

00:43:10.236 --> 00:43:12.386 A:middle
With xcodebuild, there are two

00:43:12.386 --> 00:43:13.436 A:middle
ways to run tests.

00:43:14.276 --> 00:43:15.946 A:middle
The first is to build and test

00:43:15.946 --> 00:43:17.106 A:middle
in the same invocation.

00:43:18.086 --> 00:43:19.476 A:middle
For this, you use the test

00:43:19.476 --> 00:43:21.146 A:middle
action, passing in the name of

00:43:21.146 --> 00:43:22.336 A:middle
the project and scheme you want

00:43:22.336 --> 00:43:23.936 A:middle
to test, as well as the

00:43:23.936 --> 00:43:25.786 A:middle
destination on which tests

00:43:26.536 --> 00:43:27.876 A:middle
should be run.

00:43:28.526 --> 00:43:30.076 A:middle
The second is to build and then

00:43:30.836 --> 00:43:30.956 A:middle
test.

00:43:31.076 --> 00:43:32.196 A:middle
This puts up the actions of

00:43:32.196 --> 00:43:33.696 A:middle
building and testing into two

00:43:33.696 --> 00:43:34.936 A:middle
separate invocations of

00:43:34.936 --> 00:43:35.606 A:middle
xcodebuild.

00:43:36.626 --> 00:43:38.096 A:middle
One of the primary use cases of

00:43:38.096 --> 00:43:39.886 A:middle
this functionality is to have

00:43:39.926 --> 00:43:41.096 A:middle
one machine dedicated to

00:43:41.096 --> 00:43:42.846 A:middle
building and another dedicated

00:43:42.846 --> 00:43:44.376 A:middle
to running tests, which is the

00:43:44.376 --> 00:43:45.476 A:middle
workflow that we're trying to

00:43:45.476 --> 00:43:45.796 A:middle
achieve.

00:43:47.056 --> 00:43:48.616 A:middle
To accomplish this, you first

00:43:48.616 --> 00:43:49.846 A:middle
invoke the build for testing

00:43:49.846 --> 00:43:51.526 A:middle
action passing in the same

00:43:51.526 --> 00:43:52.766 A:middle
parameters as before.

00:43:53.886 --> 00:43:55.376 A:middle
This will produce both the build

00:43:55.376 --> 00:43:56.806 A:middle
products that are necessary for

00:43:56.806 --> 00:43:59.066 A:middle
testing, as well as an xctestrun

00:43:59.066 --> 00:43:59.496 A:middle
file.

00:44:00.446 --> 00:44:02.476 A:middle
The xctestrun file is a manifest

00:44:02.636 --> 00:44:03.586 A:middle
that describes the build

00:44:03.586 --> 00:44:05.046 A:middle
products and instructs

00:44:05.046 --> 00:44:07.586 A:middle
xcodebuild what to do at test

00:44:08.276 --> 00:44:08.456 A:middle
time.

00:44:09.226 --> 00:44:10.796 A:middle
Next, invoke the test without

00:44:10.796 --> 00:44:12.936 A:middle
building action, passing in the

00:44:12.936 --> 00:44:14.366 A:middle
xctestrun file that was produced

00:44:14.366 --> 00:44:14.806 A:middle
earlier.

00:44:16.116 --> 00:44:17.106 A:middle
This will cause your test to

00:44:17.106 --> 00:44:18.106 A:middle
actually execute.

00:44:18.616 --> 00:44:21.966 A:middle
It's actually possible to craft

00:44:21.966 --> 00:44:24.326 A:middle
your own xctestrun files giving

00:44:24.326 --> 00:44:25.516 A:middle
you more control over what

00:44:25.516 --> 00:44:26.746 A:middle
happens during test without

00:44:26.746 --> 00:44:27.236 A:middle
building.

00:44:28.156 --> 00:44:29.376 A:middle
If you like to learn more about

00:44:29.376 --> 00:44:31.066 A:middle
the format of these files, check

00:44:31.066 --> 00:44:32.046 A:middle
out the man page.

00:44:32.996 --> 00:44:34.476 A:middle
Also, note that the format can

00:44:34.476 --> 00:44:36.056 A:middle
change between Xcode releases.

00:44:36.816 --> 00:44:38.476 A:middle
In general, use the same version

00:44:38.476 --> 00:44:40.216 A:middle
of Xcode, both for building and

00:44:40.216 --> 00:44:43.596 A:middle
running your tests.

00:44:43.746 --> 00:44:44.926 A:middle
Speaking of running tests,

00:44:45.306 --> 00:44:47.186 A:middle
xcodebuild supports testing on

00:44:47.186 --> 00:44:48.966 A:middle
multiple devices or simulators

00:44:48.966 --> 00:44:49.756 A:middle
at the same time.

00:44:50.826 --> 00:44:52.216 A:middle
This can give you maximum

00:44:52.216 --> 00:44:53.756 A:middle
coverage across a variety of

00:44:53.756 --> 00:44:55.116 A:middle
device types and sizes.

00:44:56.046 --> 00:44:57.446 A:middle
And this is especially useful

00:44:57.446 --> 00:44:59.496 A:middle
for UI tests since your app's UI

00:44:59.496 --> 00:45:01.286 A:middle
likely varies according to size

00:44:59.496 --> 00:45:01.286 A:middle
likely varies according to size

00:45:01.326 --> 00:45:01.606 A:middle
class.

00:45:03.206 --> 00:45:04.196 A:middle
If you'd like to learn more

00:45:04.196 --> 00:45:05.806 A:middle
about xcodebuild support for

00:45:05.806 --> 00:45:07.826 A:middle
multiple destinations, check out

00:45:07.826 --> 00:45:08.836 A:middle
the What's New in Testing

00:45:08.836 --> 00:45:12.626 A:middle
session from 2018.

00:45:13.196 --> 00:45:14.666 A:middle
So far we've covered the basics

00:45:14.666 --> 00:45:16.176 A:middle
of xcodebuild, how to build and

00:45:16.176 --> 00:45:16.986 A:middle
run our tests.

00:45:17.406 --> 00:45:18.476 A:middle
Now I'd like to talk about a

00:45:18.476 --> 00:45:19.976 A:middle
couple options that are specific

00:45:20.006 --> 00:45:20.816 A:middle
to test plans.

00:45:22.016 --> 00:45:23.316 A:middle
If you have a scheme with

00:45:23.316 --> 00:45:24.966 A:middle
multiple test plans, you can

00:45:24.966 --> 00:45:26.716 A:middle
list them all using the show

00:45:26.716 --> 00:45:27.746 A:middle
test plans option.

00:45:28.306 --> 00:45:30.726 A:middle
Having a scheme with multiple

00:45:30.726 --> 00:45:32.246 A:middle
test plans opens up some

00:45:32.246 --> 00:45:33.206 A:middle
compelling workflows.

00:45:33.766 --> 00:45:34.906 A:middle
For example, you could have a

00:45:34.906 --> 00:45:36.146 A:middle
long running test plan

00:45:36.246 --> 00:45:37.386 A:middle
containing your full suite of

00:45:37.386 --> 00:45:39.346 A:middle
tests, and a short running test

00:45:39.346 --> 00:45:40.756 A:middle
plan with a handful of smoke

00:45:40.796 --> 00:45:41.076 A:middle
tests.

00:45:42.286 --> 00:45:43.206 A:middle
If you do decide to have

00:45:43.206 --> 00:45:45.006 A:middle
multiple, one of those test

00:45:45.006 --> 00:45:46.476 A:middle
plans is considered the default

00:45:46.876 --> 00:45:48.076 A:middle
which you can configure in the

00:45:48.076 --> 00:45:49.256 A:middle
test action of the scheme

00:45:49.256 --> 00:45:49.686 A:middle
editor.

00:45:50.286 --> 00:45:52.066 A:middle
The default plan is the one that

00:45:52.066 --> 00:45:53.476 A:middle
xcodebuild will run unless you

00:45:53.476 --> 00:45:56.736 A:middle
tell it otherwise.

00:45:56.886 --> 00:45:58.616 A:middle
To overwrite the default test

00:45:58.616 --> 00:46:00.656 A:middle
plan, use the test plan option

00:45:58.616 --> 00:46:00.656 A:middle
plan, use the test plan option

00:46:01.156 --> 00:46:02.246 A:middle
passing in the name of the

00:46:02.296 --> 00:46:04.596 A:middle
particular plan that you want to

00:46:06.176 --> 00:46:06.516 A:middle
run.

00:46:07.296 --> 00:46:08.146 A:middle
Armed with all that we've

00:46:08.146 --> 00:46:10.006 A:middle
learned about xcodebuild, we can

00:46:10.006 --> 00:46:10.876 A:middle
start to fill in some of the

00:46:10.876 --> 00:46:11.986 A:middle
gaps in our pipeline.

00:46:13.446 --> 00:46:14.436 A:middle
Starting with the builder

00:46:14.436 --> 00:46:16.556 A:middle
machine, we'll use xcodebuild

00:46:16.556 --> 00:46:18.236 A:middle
build-for-testing to produce the

00:46:18.236 --> 00:46:19.816 A:middle
build products and xctestrun

00:46:19.816 --> 00:46:21.226 A:middle
file that we need.

00:46:21.796 --> 00:46:23.256 A:middle
This will get passed to the

00:46:23.256 --> 00:46:25.056 A:middle
runner machine, which invokes

00:46:25.096 --> 00:46:26.926 A:middle
xcodebuild test-without-building

00:46:27.196 --> 00:46:28.776 A:middle
to execute the test on our suite

00:46:28.776 --> 00:46:29.396 A:middle
of devices.

00:46:30.096 --> 00:46:33.546 A:middle
The product of these two steps

00:46:33.666 --> 00:46:34.846 A:middle
is the build and test results,

00:46:35.456 --> 00:46:36.396 A:middle
which brings me to the next

00:46:36.396 --> 00:46:37.386 A:middle
thing I'd like to talk about,

00:46:38.376 --> 00:46:40.036 A:middle
and that is result bundles.

00:46:40.716 --> 00:46:41.976 A:middle
We have some really exciting

00:46:41.976 --> 00:46:42.916 A:middle
stuff to share with you about

00:46:42.916 --> 00:46:45.556 A:middle
result bundles this year.

00:46:45.676 --> 00:46:47.796 A:middle
First off, what is a result

00:46:47.796 --> 00:46:48.136 A:middle
bundle?

00:46:48.816 --> 00:46:50.276 A:middle
A result bundle is a file

00:46:50.276 --> 00:46:52.116 A:middle
produced by Xcode containing

00:46:52.116 --> 00:46:53.646 A:middle
structured data describing the

00:46:53.646 --> 00:46:54.846 A:middle
outcome of building and running

00:46:54.846 --> 00:46:55.306 A:middle
your tests.

00:46:56.616 --> 00:46:58.216 A:middle
It contains assets such as the

00:46:58.216 --> 00:46:59.836 A:middle
build log, revealing which

00:46:59.836 --> 00:47:01.116 A:middle
targets and source files were

00:46:59.836 --> 00:47:01.116 A:middle
targets and source files were

00:47:01.116 --> 00:47:01.686 A:middle
compiled.

00:47:03.136 --> 00:47:04.596 A:middle
The test report showing you

00:47:04.596 --> 00:47:06.016 A:middle
which test passed and failed.

00:47:06.656 --> 00:47:08.866 A:middle
The code coverage report

00:47:09.076 --> 00:47:10.596 A:middle
reviewing which code was covered

00:47:10.596 --> 00:47:13.956 A:middle
by the test ran, and any test

00:47:13.956 --> 00:47:15.556 A:middle
attachments that were created by

00:47:15.556 --> 00:47:17.316 A:middle
the tests using XC test

00:47:17.316 --> 00:47:18.476 A:middle
attachment APIs.

00:47:19.146 --> 00:47:22.286 A:middle
So how do you produce a result

00:47:22.286 --> 00:47:22.676 A:middle
bundle?

00:47:23.326 --> 00:47:24.826 A:middle
Just pass the result bundle path

00:47:24.826 --> 00:47:26.176 A:middle
option to xcodebuild.

00:47:26.706 --> 00:47:30.196 A:middle
Now that we know how to produce

00:47:30.196 --> 00:47:31.856 A:middle
a result bundle, we can fill in

00:47:31.856 --> 00:47:32.986 A:middle
another missing piece in our

00:47:32.986 --> 00:47:33.466 A:middle
story.

00:47:34.316 --> 00:47:35.946 A:middle
We'll add the result bundle path

00:47:35.946 --> 00:47:37.256 A:middle
option to our Xcode build

00:47:37.256 --> 00:47:39.216 A:middle
invocation to start producing

00:47:39.216 --> 00:47:40.436 A:middle
those build and test results.

00:47:40.496 --> 00:47:44.486 A:middle
Now, result bundles have been

00:47:44.486 --> 00:47:46.366 A:middle
around for a while but in Xcode

00:47:46.366 --> 00:47:48.066 A:middle
11 we completely redesigned the

00:47:48.066 --> 00:47:49.566 A:middle
underlying file format, which

00:47:49.566 --> 00:47:50.646 A:middle
has come with several benefits.

00:47:52.096 --> 00:47:53.976 A:middle
First, the new format is highly

00:47:53.976 --> 00:47:55.436 A:middle
optimized to be efficient on

00:47:55.436 --> 00:47:55.786 A:middle
disc.

00:47:56.576 --> 00:47:57.816 A:middle
In our own testing, we found

00:47:57.816 --> 00:47:59.226 A:middle
result bundles to be four times

00:47:59.226 --> 00:48:00.756 A:middle
smaller on average compared to

00:47:59.226 --> 00:48:00.756 A:middle
smaller on average compared to

00:48:00.756 --> 00:48:01.496 A:middle
the previous format.

00:48:02.646 --> 00:48:03.826 A:middle
This is especially useful in

00:48:03.826 --> 00:48:05.496 A:middle
continuous integration where

00:48:05.496 --> 00:48:06.836 A:middle
result bundles can be generated

00:48:06.836 --> 00:48:10.166 A:middle
and stored at a very high rate.

00:48:10.356 --> 00:48:11.876 A:middle
Second, it's now possible to

00:48:11.876 --> 00:48:13.406 A:middle
open result bundles directly in

00:48:13.516 --> 00:48:15.496 A:middle
Xcode allowing you to easily dig

00:48:15.496 --> 00:48:16.416 A:middle
into the results of an

00:48:16.416 --> 00:48:16.986 A:middle
integration.

00:48:17.566 --> 00:48:20.596 A:middle
And third, for the first time we

00:48:20.596 --> 00:48:21.476 A:middle
are providing a way to

00:48:21.536 --> 00:48:22.836 A:middle
programmatically access the

00:48:22.836 --> 00:48:24.046 A:middle
contents of the result bundle

00:48:24.406 --> 00:48:25.506 A:middle
which we will be leveraging in

00:48:25.506 --> 00:48:26.926 A:middle
our own continuous integration

00:48:27.586 --> 00:48:27.746 A:middle
setup.

00:48:29.476 --> 00:48:30.856 A:middle
To open a result bundle in

00:48:30.956 --> 00:48:32.616 A:middle
Xcode, simply double click the

00:48:32.616 --> 00:48:34.506 A:middle
file to view its contents using

00:48:34.506 --> 00:48:35.396 A:middle
the UI that you're already

00:48:35.446 --> 00:48:35.936 A:middle
familiar with.

00:48:36.976 --> 00:48:38.596 A:middle
See failing and passing test in

00:48:38.596 --> 00:48:40.206 A:middle
the test report, dig into the

00:48:40.206 --> 00:48:41.656 A:middle
build failures in the build log,

00:48:42.116 --> 00:48:43.066 A:middle
and see how you're doing on

00:48:43.066 --> 00:48:44.576 A:middle
coverage in the code coverage

00:48:44.976 --> 00:48:45.166 A:middle
report.

00:48:46.516 --> 00:48:50.966 A:middle
[ Applause ]

00:48:51.466 --> 00:48:51.846 A:middle
Thank you.

00:48:52.506 --> 00:48:54.096 A:middle
To access the result bundle's

00:48:54.096 --> 00:48:55.716 A:middle
contents programmatically, you

00:48:55.716 --> 00:48:57.076 A:middle
can use a new command line tool

00:48:57.076 --> 00:48:59.066 A:middle
in Xcode 11 called xcresulttool.

00:49:00.666 --> 00:49:02.336 A:middle
Xcresulttool gives you complete

00:49:02.336 --> 00:49:03.756 A:middle
access to the structure data

00:49:03.756 --> 00:49:04.986 A:middle
contained in the result bundle.

00:49:06.236 --> 00:49:08.186 A:middle
It emits this data as JSON and

00:49:08.186 --> 00:49:09.416 A:middle
the format of the JSON is

00:49:09.456 --> 00:49:10.576 A:middle
publicly documented and

00:49:10.576 --> 00:49:11.036 A:middle
versioned.

00:49:11.626 --> 00:49:14.886 A:middle
We'll be leveraging xcresulttool

00:49:14.886 --> 00:49:16.466 A:middle
in our next step, which is to

00:49:16.466 --> 00:49:18.046 A:middle
populate our issue tracker with

00:49:18.046 --> 00:49:19.406 A:middle
any failures that occur during

00:49:19.406 --> 00:49:20.246 A:middle
building or testing.

00:49:20.906 --> 00:49:24.226 A:middle
To extract build failures,

00:49:24.666 --> 00:49:26.386 A:middle
invoke xcresulttool using the

00:49:26.386 --> 00:49:28.336 A:middle
get command passing in the path

00:49:28.416 --> 00:49:29.226 A:middle
of the ResultBundle.

00:49:30.696 --> 00:49:32.276 A:middle
In the JSON output that follows,

00:49:32.976 --> 00:49:34.396 A:middle
you can find build failures

00:49:34.566 --> 00:49:35.966 A:middle
nested in one of the objects.

00:49:37.226 --> 00:49:38.736 A:middle
Each build failure includes both

00:49:38.776 --> 00:49:40.556 A:middle
the failure message as well as

00:49:40.556 --> 00:49:41.826 A:middle
the source file and line number

00:49:41.826 --> 00:49:44.936 A:middle
that failed to build.

00:49:45.116 --> 00:49:46.666 A:middle
Test failures are also nested

00:49:46.666 --> 00:49:48.556 A:middle
inside of the JSON with the name

00:49:48.556 --> 00:49:50.196 A:middle
of the test that failed, as well

00:49:50.196 --> 00:49:51.296 A:middle
as the assertion message.

00:49:51.806 --> 00:49:55.766 A:middle
Don't worry if you didn't follow

00:49:55.866 --> 00:49:56.876 A:middle
those steps 100%.

00:49:57.246 --> 00:49:58.756 A:middle
Like I mentioned previously, a

00:49:58.756 --> 00:50:00.486 A:middle
big benefit of xcresulttool is

00:49:58.756 --> 00:50:00.486 A:middle
big benefit of xcresulttool is

00:50:00.486 --> 00:50:02.046 A:middle
that the JSON it produces is

00:50:02.046 --> 00:50:03.976 A:middle
publicly documented.

00:50:04.046 --> 00:50:05.426 A:middle
In fact, the tool itself can

00:50:05.426 --> 00:50:07.146 A:middle
describe the schema of the JSON

00:50:07.426 --> 00:50:08.626 A:middle
using the format description

00:50:08.626 --> 00:50:09.046 A:middle
command.

00:50:10.216 --> 00:50:11.446 A:middle
The schema lists all of the

00:50:11.446 --> 00:50:12.786 A:middle
possible types of objects that

00:50:12.786 --> 00:50:14.106 A:middle
can be present in the output.

00:50:14.506 --> 00:50:15.866 A:middle
So I encourage you to refer to

00:50:15.866 --> 00:50:16.756 A:middle
it as you write your own

00:50:16.756 --> 00:50:18.296 A:middle
automation on top of the tool.

00:50:18.836 --> 00:50:22.146 A:middle
Last but not least, check out

00:50:22.146 --> 00:50:23.606 A:middle
the tool's man page for more

00:50:23.606 --> 00:50:24.166 A:middle
information.

00:50:24.726 --> 00:50:27.886 A:middle
With our newfound knowledge of

00:50:27.886 --> 00:50:29.356 A:middle
xcresulttool, we can now throw

00:50:29.356 --> 00:50:30.376 A:middle
in step number three.

00:50:31.116 --> 00:50:32.836 A:middle
We'll use xcresulttool get to

00:50:32.836 --> 00:50:34.416 A:middle
extract those build and test

00:50:34.416 --> 00:50:35.646 A:middle
failures from the result bundle

00:50:35.866 --> 00:50:36.656 A:middle
and put them in our issue

00:50:36.656 --> 00:50:37.056 A:middle
tracker.

00:50:37.606 --> 00:50:40.906 A:middle
We've come a long way at this

00:50:40.906 --> 00:50:42.506 A:middle
point but we have one last step

00:50:42.556 --> 00:50:43.286 A:middle
to accomplish.

00:50:43.886 --> 00:50:44.796 A:middle
We want to track our code

00:50:44.796 --> 00:50:46.306 A:middle
coverage over time to know if it

00:50:46.306 --> 00:50:47.086 A:middle
ever decreases.

00:50:47.786 --> 00:50:50.066 A:middle
For this, we can use another

00:50:50.066 --> 00:50:51.776 A:middle
command line tool called xccov.

00:50:52.866 --> 00:50:54.426 A:middle
Xccov provides programmatic

00:50:54.426 --> 00:50:55.526 A:middle
access to the code coverage

00:50:55.526 --> 00:50:57.056 A:middle
report either as human readable

00:50:57.056 --> 00:50:58.066 A:middle
text or JSON.

00:50:59.336 --> 00:51:00.346 A:middle
To view the coverage report

00:50:59.336 --> 00:51:00.346 A:middle
To view the coverage report

00:51:00.346 --> 00:51:01.976 A:middle
using xccov, invoke the view

00:51:01.976 --> 00:51:03.596 A:middle
command passing it the result

00:51:03.596 --> 00:51:03.966 A:middle
bundle.

00:51:04.556 --> 00:51:06.956 A:middle
In the output that follows, you

00:51:06.956 --> 00:51:08.546 A:middle
can see the line coverage for

00:51:08.546 --> 00:51:11.306 A:middle
every target, source file, and

00:51:11.356 --> 00:51:13.746 A:middle
function or method in your

00:51:14.956 --> 00:51:15.176 A:middle
project.

00:51:15.266 --> 00:51:16.956 A:middle
Now, simply viewing the coverage

00:51:16.956 --> 00:51:18.316 A:middle
report may not be exactly what

00:51:18.386 --> 00:51:18.806 A:middle
you want.

00:51:19.566 --> 00:51:20.826 A:middle
If instead you want to compare

00:51:20.826 --> 00:51:22.866 A:middle
two reports to see if coverage

00:51:22.866 --> 00:51:24.656 A:middle
has gotten better or worse, you

00:51:24.656 --> 00:51:25.896 A:middle
can use the diff command.

00:51:26.866 --> 00:51:28.216 A:middle
Pass the paths to two result

00:51:28.216 --> 00:51:29.716 A:middle
bundles of the tool which will

00:51:29.716 --> 00:51:30.946 A:middle
produce output similar to this.

00:51:32.476 --> 00:51:33.866 A:middle
In this example, we can see that

00:51:33.866 --> 00:51:34.726 A:middle
the code coverage for

00:51:34.726 --> 00:51:36.686 A:middle
AppDelegate file increased by

00:51:36.756 --> 00:51:39.106 A:middle
50% between the two result

00:51:41.696 --> 00:51:42.096 A:middle
bundles.

00:51:42.566 --> 00:51:44.426 A:middle
Like xcresulttool, xccov also

00:51:44.426 --> 00:51:46.126 A:middle
has a man page, so check that

00:51:46.126 --> 00:51:46.936 A:middle
out for more info.

00:51:47.506 --> 00:51:51.006 A:middle
And with that we can finally

00:51:51.066 --> 00:51:51.946 A:middle
fill in our last step.

00:51:52.746 --> 00:51:54.706 A:middle
We'll use xccov to extract code

00:51:54.706 --> 00:51:56.206 A:middle
coverage from the bundle to

00:51:56.206 --> 00:51:59.696 A:middle
track our progress over time.

00:52:00.846 --> 00:52:01.286 A:middle
Awesome.

00:52:01.286 --> 00:52:02.526 A:middle
Our continuous integration

00:52:02.526 --> 00:52:03.576 A:middle
workflow is complete.

00:52:04.086 --> 00:52:05.606 A:middle
Using xcodebuild to build and

00:52:05.606 --> 00:52:07.826 A:middle
run our tests, xcresulttool to

00:52:07.826 --> 00:52:08.766 A:middle
extract, build, and test

00:52:08.766 --> 00:52:10.916 A:middle
failures, and xccov to view code

00:52:10.916 --> 00:52:12.416 A:middle
coverage, we built a fully

00:52:12.416 --> 00:52:14.086 A:middle
functional end-to-end pipeline

00:52:14.086 --> 00:52:15.196 A:middle
that automates the testing of

00:52:15.196 --> 00:52:16.766 A:middle
our app.

00:52:16.766 --> 00:52:17.896 A:middle
Hopefully this gives you a sense

00:52:17.896 --> 00:52:19.016 A:middle
of just how much power and

00:52:19.046 --> 00:52:20.736 A:middle
flexibility is available to you

00:52:20.916 --> 00:52:21.956 A:middle
using the tools that come with

00:52:22.126 --> 00:52:22.406 A:middle
Xcode.

00:52:23.256 --> 00:52:24.546 A:middle
We've only covered one possible

00:52:24.546 --> 00:52:26.296 A:middle
workflow but with these building

00:52:26.296 --> 00:52:28.276 A:middle
blocks the sky is really the

00:52:29.236 --> 00:52:29.436 A:middle
limit.

00:52:30.066 --> 00:52:31.286 A:middle
We've covered a lot of content

00:52:31.286 --> 00:52:32.456 A:middle
in our talk today so let's

00:52:32.516 --> 00:52:33.586 A:middle
briefly recap what we've

00:52:33.586 --> 00:52:33.916 A:middle
learned.

00:52:35.056 --> 00:52:36.866 A:middle
We started off today's talk with

00:52:36.866 --> 00:52:38.076 A:middle
an introduction to testing in

00:52:38.266 --> 00:52:38.586 A:middle
Xcode.

00:52:39.396 --> 00:52:40.666 A:middle
We learned how to write unit and

00:52:40.666 --> 00:52:42.796 A:middle
UI test using XCTest and how to

00:52:42.796 --> 00:52:43.726 A:middle
run them to catch bugs.

00:52:45.416 --> 00:52:46.666 A:middle
Next, we learned about Test

00:52:46.736 --> 00:52:48.476 A:middle
Plans, a new feature allowing us

00:52:48.516 --> 00:52:50.416 A:middle
to better organize our tests, as

00:52:50.416 --> 00:52:51.786 A:middle
well as run them multiple times

00:52:51.786 --> 00:52:53.126 A:middle
under different configurations.

00:52:54.596 --> 00:52:55.706 A:middle
And finally, we learned about

00:52:55.706 --> 00:52:56.896 A:middle
the tools that we can use to

00:52:56.896 --> 00:52:58.316 A:middle
build a custom continuous

00:52:58.316 --> 00:52:59.326 A:middle
integration pipeline.

00:52:59.936 --> 00:53:02.226 A:middle
If you'd like to learn more,

00:52:59.936 --> 00:53:02.226 A:middle
If you'd like to learn more,

00:53:02.226 --> 00:53:03.796 A:middle
grab a copy of these slides from

00:53:03.796 --> 00:53:05.836 A:middle
developer.apple.com and be sure

00:53:05.836 --> 00:53:06.886 A:middle
to check out the release notes

00:53:06.886 --> 00:53:07.766 A:middle
for Xcode 11.

00:53:08.966 --> 00:53:10.156 A:middle
Finally, if you're interested in

00:53:10.156 --> 00:53:12.196 A:middle
hearing about new APIs in XCTest

00:53:12.196 --> 00:53:13.406 A:middle
for measuring the performance of

00:53:13.406 --> 00:53:14.646 A:middle
your code, check out the

00:53:14.646 --> 00:53:15.786 A:middle
Improving Battery Life and

00:53:15.786 --> 00:53:16.946 A:middle
Performance session later today.

00:53:18.086 --> 00:53:19.226 A:middle
Come see us in the labs and have

00:53:19.226 --> 00:53:19.976 A:middle
a great WWDC.

00:53:20.516 --> 00:53:26.500 A:middle
[ Applause ]
