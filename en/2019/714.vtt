WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:10.516 --> 00:00:12.546 A:middle
[ Applause ]

00:00:13.046 --> 00:00:15.746 A:middle
&gt;&gt; Hello. Welcome to Network

00:00:15.746 --> 00:00:17.436 A:middle
Extensions for Modern macOS.

00:00:18.346 --> 00:00:19.366 A:middle
My name is Jamie Wood.

00:00:19.586 --> 00:00:21.426 A:middle
I'm a Software Engineer working

00:00:21.426 --> 00:00:22.626 A:middle
on Internet Technologies at

00:00:22.626 --> 00:00:22.996 A:middle
Apple.

00:00:23.796 --> 00:00:25.126 A:middle
And I am thrilled to be here

00:00:25.126 --> 00:00:26.706 A:middle
today to tell you about a bunch

00:00:26.706 --> 00:00:28.866 A:middle
of great new powerful APIs that

00:00:29.316 --> 00:00:31.076 A:middle
we've added in macOS Catalina

00:00:31.226 --> 00:00:33.606 A:middle
that allow you to create apps

00:00:33.636 --> 00:00:35.916 A:middle
that extend and customize the

00:00:35.916 --> 00:00:37.636 A:middle
networking capabilities of macOS

00:00:38.146 --> 00:00:39.456 A:middle
without the use of Network

00:00:39.486 --> 00:00:40.456 A:middle
Kernel Extensions.

00:00:41.906 --> 00:00:44.376 A:middle
To start off, I want to say

00:00:44.376 --> 00:00:45.896 A:middle
thank you for your feedback.

00:00:46.766 --> 00:00:48.226 A:middle
Over the past few years here at

00:00:48.226 --> 00:00:51.216 A:middle
WWDC we've asked you to file

00:00:51.216 --> 00:00:53.196 A:middle
bugs and give us feedback about

00:00:53.196 --> 00:00:54.856 A:middle
how you're making use of Network

00:00:54.936 --> 00:00:57.016 A:middle
Kernel Extensions in your apps

00:00:57.066 --> 00:00:57.676 A:middle
today.

00:00:58.526 --> 00:01:00.166 A:middle
We got a lot of great feedback.

00:00:58.526 --> 00:01:00.166 A:middle
We got a lot of great feedback.

00:01:00.966 --> 00:01:02.406 A:middle
We've taken your feedback, and

00:01:02.406 --> 00:01:04.226 A:middle
we came up with a set of

00:01:04.436 --> 00:01:08.196 A:middle
categories of apps where on a

00:01:08.196 --> 00:01:10.306 A:middle
macOS Mojavi and earlier you

00:01:10.306 --> 00:01:11.496 A:middle
really need to use Network

00:01:11.496 --> 00:01:13.316 A:middle
Kernel Extensions to fully

00:01:13.316 --> 00:01:14.566 A:middle
implement apps in these

00:01:14.566 --> 00:01:15.196 A:middle
categories.

00:01:16.606 --> 00:01:19.146 A:middle
So today I want to take you on a

00:01:19.146 --> 00:01:20.726 A:middle
journey for each one of these

00:01:20.726 --> 00:01:22.676 A:middle
app categories and talk about

00:01:22.856 --> 00:01:24.246 A:middle
all the great new APIs we've

00:01:24.246 --> 00:01:26.196 A:middle
added in macOS Catalina that

00:01:26.616 --> 00:01:28.276 A:middle
allow you to create apps in

00:01:28.276 --> 00:01:30.356 A:middle
these categories without using

00:01:30.356 --> 00:01:31.736 A:middle
Network Kernel Extensions.

00:01:32.636 --> 00:01:33.746 A:middle
So let's go ahead and get

00:01:33.746 --> 00:01:34.106 A:middle
started.

00:01:35.536 --> 00:01:36.586 A:middle
First, I want to talk about

00:01:36.806 --> 00:01:38.866 A:middle
Content Filter Apps.

00:01:39.286 --> 00:01:40.866 A:middle
One example of a Content Filter

00:01:40.866 --> 00:01:43.336 A:middle
App is a Personal Firewall App.

00:01:43.866 --> 00:01:45.216 A:middle
These are apps that examine the

00:01:45.216 --> 00:01:46.946 A:middle
network traffic as it's flowing

00:01:47.136 --> 00:01:49.456 A:middle
through the system and block

00:01:49.586 --> 00:01:50.596 A:middle
traffic that's deemed to be

00:01:50.596 --> 00:01:51.786 A:middle
malicious in some way.

00:01:53.006 --> 00:01:54.336 A:middle
Another example of a Content

00:01:54.336 --> 00:01:56.526 A:middle
Filter App is a Parental

00:01:56.526 --> 00:01:58.476 A:middle
Controls App.

00:01:58.896 --> 00:02:02.276 A:middle
This is an app that focuses on

00:01:58.896 --> 00:02:02.276 A:middle
This is an app that focuses on

00:02:02.276 --> 00:02:04.026 A:middle
web-browsing activity and blocks

00:02:04.026 --> 00:02:05.646 A:middle
access to websites that are

00:02:05.646 --> 00:02:06.746 A:middle
deemed inappropriate for

00:02:06.746 --> 00:02:07.146 A:middle
children.

00:02:08.395 --> 00:02:11.386 A:middle
Another example of a Content

00:02:11.386 --> 00:02:13.596 A:middle
Filter App is an app that

00:02:13.596 --> 00:02:14.866 A:middle
doesn't actively block any

00:02:14.866 --> 00:02:17.106 A:middle
network traffic but instead just

00:02:17.106 --> 00:02:18.526 A:middle
keeps a record of network

00:02:18.526 --> 00:02:21.436 A:middle
activity on the Mac so that that

00:02:21.436 --> 00:02:23.536 A:middle
log of no activity can be

00:02:23.536 --> 00:02:26.436 A:middle
analyzed later, for example, to

00:02:26.476 --> 00:02:27.766 A:middle
determine when some sensitive

00:02:27.766 --> 00:02:28.706 A:middle
data was transmitted.

00:02:30.066 --> 00:02:32.026 A:middle
So before I talk about the APIs

00:02:32.026 --> 00:02:33.896 A:middle
we've added that allow you to

00:02:33.896 --> 00:02:35.216 A:middle
create Content Filter Apps, I

00:02:35.536 --> 00:02:37.776 A:middle
want to talk about some

00:02:37.776 --> 00:02:39.356 A:middle
particular runtime requirements

00:02:39.606 --> 00:02:41.756 A:middle
that Content Filter Apps have.

00:02:42.576 --> 00:02:43.636 A:middle
So the code in your Content

00:02:43.636 --> 00:02:45.346 A:middle
Filter App that is actually

00:02:45.346 --> 00:02:47.426 A:middle
filtering network traffic has

00:02:47.426 --> 00:02:48.736 A:middle
some specific runtime

00:02:48.736 --> 00:02:49.456 A:middle
requirements.

00:02:50.486 --> 00:02:51.836 A:middle
Your code needs to be running

00:02:51.836 --> 00:02:53.666 A:middle
all the time, and it needs to be

00:02:53.666 --> 00:02:54.616 A:middle
running even when there's no

00:02:54.616 --> 00:02:56.506 A:middle
user logged into the system.

00:02:57.556 --> 00:02:59.306 A:middle
For example, in your Parental

00:02:59.306 --> 00:03:01.576 A:middle
Controls App, you app needs to

00:02:59.306 --> 00:03:01.576 A:middle
Controls App, you app needs to

00:03:01.576 --> 00:03:03.106 A:middle
be doing its job of blocking

00:03:03.106 --> 00:03:05.506 A:middle
access to inappropriate websites

00:03:06.056 --> 00:03:07.476 A:middle
even when your app isn't

00:03:07.476 --> 00:03:08.136 A:middle
actually running.

00:03:09.276 --> 00:03:12.106 A:middle
In your Personal Firewall App,

00:03:12.106 --> 00:03:13.316 A:middle
your app needs to be doing its

00:03:13.316 --> 00:03:15.886 A:middle
job of protecting the Mac from

00:03:15.886 --> 00:03:18.016 A:middle
incoming attacks coming in over

00:03:18.016 --> 00:03:19.826 A:middle
the network even if there's no

00:03:19.826 --> 00:03:21.096 A:middle
user logged into the system.

00:03:22.546 --> 00:03:23.956 A:middle
Now, when you've implemented

00:03:24.166 --> 00:03:26.876 A:middle
your content filter code inside

00:03:26.876 --> 00:03:28.836 A:middle
of a Kernel Extension, these

00:03:28.836 --> 00:03:29.796 A:middle
runtime requirements are

00:03:29.796 --> 00:03:31.116 A:middle
obviously met because your code

00:03:31.116 --> 00:03:32.086 A:middle
is running in the Kernel.

00:03:32.576 --> 00:03:34.816 A:middle
So it's running all the time and

00:03:34.816 --> 00:03:35.726 A:middle
it's running even when there's

00:03:35.726 --> 00:03:37.096 A:middle
no user logged into the system.

00:03:37.666 --> 00:03:41.346 A:middle
So to satisfy these runtime

00:03:41.346 --> 00:03:42.896 A:middle
requirements in user space,

00:03:42.896 --> 00:03:43.836 A:middle
we've introduced a new

00:03:43.836 --> 00:03:46.216 A:middle
technology in macOS Catalina

00:03:46.356 --> 00:03:47.726 A:middle
called System Extensions.

00:03:49.596 --> 00:03:51.326 A:middle
Now you're probably familiar

00:03:51.326 --> 00:03:52.486 A:middle
with app extensions.

00:03:53.146 --> 00:03:54.776 A:middle
These are bundles of executable

00:03:54.776 --> 00:03:57.346 A:middle
code that you can use on macOS

00:03:57.446 --> 00:03:59.646 A:middle
to extend and customize various

00:03:59.646 --> 00:04:01.396 A:middle
aspects of the macOS user

00:03:59.646 --> 00:04:01.396 A:middle
aspects of the macOS user

00:04:01.396 --> 00:04:02.096 A:middle
experience.

00:04:03.446 --> 00:04:05.186 A:middle
So system extensions share a lot

00:04:05.186 --> 00:04:06.196 A:middle
of similarities with app

00:04:06.196 --> 00:04:06.856 A:middle
extensions.

00:04:07.686 --> 00:04:09.396 A:middle
Like app extensions, system

00:04:09.396 --> 00:04:10.976 A:middle
extensions are packaged inside

00:04:10.976 --> 00:04:13.066 A:middle
of your app and they're

00:04:13.066 --> 00:04:14.446 A:middle
completely managed by the

00:04:14.446 --> 00:04:15.256 A:middle
operating system.

00:04:16.086 --> 00:04:17.435 A:middle
So this is great because it

00:04:17.435 --> 00:04:18.926 A:middle
means you don't need to write

00:04:18.926 --> 00:04:20.766 A:middle
any customer installer package

00:04:20.766 --> 00:04:22.316 A:middle
to place your system extensions

00:04:22.316 --> 00:04:25.066 A:middle
somewhere in a file system, and

00:04:25.066 --> 00:04:25.696 A:middle
you don't need to write an

00:04:25.696 --> 00:04:27.036 A:middle
uninstaller to remove your

00:04:27.036 --> 00:04:29.056 A:middle
system extension when the user

00:04:29.056 --> 00:04:31.326 A:middle
uninstalls your app.

00:04:31.516 --> 00:04:32.686 A:middle
Also you don't need to worry

00:04:32.686 --> 00:04:34.966 A:middle
about starting and stopping your

00:04:34.966 --> 00:04:35.946 A:middle
system extension.

00:04:36.676 --> 00:04:38.346 A:middle
The operating system will run

00:04:38.536 --> 00:04:43.006 A:middle
your system extension as needed.

00:04:43.676 --> 00:04:45.316 A:middle
Another similarity with app

00:04:45.316 --> 00:04:46.806 A:middle
extensions and system extensions

00:04:46.806 --> 00:04:48.836 A:middle
is that system extensions are

00:04:48.836 --> 00:04:50.866 A:middle
very easy to develop and debug.

00:04:51.186 --> 00:04:52.626 A:middle
You can use all the regular

00:04:52.626 --> 00:04:54.406 A:middle
tools you use to develop any

00:04:54.406 --> 00:04:56.816 A:middle
regular app -- Xcode, LLDB,

00:04:56.816 --> 00:04:57.976 A:middle
Instruments.

00:05:02.046 --> 00:05:03.426 A:middle
This is in contrast to Kernel

00:05:03.426 --> 00:05:05.086 A:middle
Extensions which are notoriously

00:05:05.086 --> 00:05:07.596 A:middle
difficult to develop and debug.

00:05:08.496 --> 00:05:10.136 A:middle
You frequently have to reboot as

00:05:10.136 --> 00:05:11.606 A:middle
you're developing your

00:05:11.606 --> 00:05:12.426 A:middle
extension.

00:05:12.896 --> 00:05:14.416 A:middle
And to debug a Kernel Extension

00:05:14.416 --> 00:05:15.426 A:middle
you have to have two separate

00:05:15.426 --> 00:05:17.686 A:middle
machines and if you do manage to

00:05:17.686 --> 00:05:18.646 A:middle
connect these two machines

00:05:18.646 --> 00:05:20.726 A:middle
together and drop into the

00:05:20.726 --> 00:05:21.806 A:middle
debugger in your Kernel

00:05:21.806 --> 00:05:23.926 A:middle
Extension Code, single-stepping

00:05:23.926 --> 00:05:25.436 A:middle
through your source code is a

00:05:25.436 --> 00:05:27.346 A:middle
very dicey proposition and -- if

00:05:27.346 --> 00:05:27.956 A:middle
it works at all.

00:05:28.506 --> 00:05:32.526 A:middle
Unlike app extensions, system

00:05:32.526 --> 00:05:34.106 A:middle
extensions run independently of

00:05:34.106 --> 00:05:36.116 A:middle
any user logged into the system.

00:05:36.896 --> 00:05:38.346 A:middle
So systems extensions are really

00:05:38.346 --> 00:05:39.876 A:middle
an ideal place for you to be

00:05:39.876 --> 00:05:41.596 A:middle
running your network processing

00:05:41.596 --> 00:05:42.756 A:middle
code like your content filter

00:05:43.606 --> 00:05:43.706 A:middle
code.

00:05:46.156 --> 00:05:47.896 A:middle
For information and details

00:05:47.896 --> 00:05:49.736 A:middle
about system extensions and for

00:05:49.736 --> 00:05:51.756 A:middle
some other use cases of system

00:05:51.756 --> 00:05:52.856 A:middle
extensions, please see the

00:05:52.856 --> 00:05:53.896 A:middle
session that happened earlier

00:05:53.896 --> 00:05:56.056 A:middle
this week, System Extensions and

00:05:56.056 --> 00:05:57.286 A:middle
Driver Kit.

00:05:59.536 --> 00:06:00.196 A:middle
All right.

00:05:59.536 --> 00:06:00.196 A:middle
All right.

00:06:00.196 --> 00:06:03.286 A:middle
So you use system extensions to

00:06:03.826 --> 00:06:05.436 A:middle
implement several different apps

00:06:05.516 --> 00:06:07.066 A:middle
in these categories that I've

00:06:07.066 --> 00:06:08.596 A:middle
listed here -- Content Filter

00:06:08.596 --> 00:06:10.306 A:middle
Apps, Transparent Proxy Apps,

00:06:10.726 --> 00:06:13.976 A:middle
DNS Proxy Apps and VPN Apps.

00:06:14.076 --> 00:06:16.016 A:middle
Now I want to dive into the APIs

00:06:16.016 --> 00:06:17.446 A:middle
we've added that allow you to

00:06:17.646 --> 00:06:18.926 A:middle
implement Content Filter Apps.

00:06:25.046 --> 00:06:27.026 A:middle
So the Content Filter APIs are

00:06:27.026 --> 00:06:28.056 A:middle
in the Network Extension

00:06:28.116 --> 00:06:32.406 A:middle
Framework and these APIs were

00:06:32.406 --> 00:06:34.876 A:middle
first introduced back in iOS 9.

00:06:35.816 --> 00:06:37.226 A:middle
And so what we've done in macOS

00:06:37.226 --> 00:06:38.896 A:middle
Catalina is brought these APIs

00:06:38.896 --> 00:06:40.166 A:middle
over and made them available on

00:06:40.166 --> 00:06:41.896 A:middle
the Mac and added a bunch of

00:06:41.896 --> 00:06:43.186 A:middle
great new enhancements that make

00:06:43.186 --> 00:06:44.766 A:middle
these APIs even better.

00:06:44.836 --> 00:06:47.966 A:middle
So let's take a look at the

00:06:47.966 --> 00:06:49.416 A:middle
Content Filter APIs and how you

00:06:49.416 --> 00:06:51.046 A:middle
use them in your app.

00:06:51.636 --> 00:06:54.656 A:middle
So in your main UI App, you use

00:06:54.716 --> 00:06:56.936 A:middle
NEFilterManager to create a

00:06:56.936 --> 00:06:58.426 A:middle
content filter configuration.

00:06:59.426 --> 00:07:00.746 A:middle
The content filter configuration

00:06:59.426 --> 00:07:00.746 A:middle
The content filter configuration

00:07:00.746 --> 00:07:02.056 A:middle
registers your content filter

00:07:02.056 --> 00:07:03.456 A:middle
with the system so the system

00:07:03.456 --> 00:07:05.186 A:middle
knows how to run your filter.

00:07:05.816 --> 00:07:09.066 A:middle
You also create a system

00:07:09.066 --> 00:07:09.616 A:middle
extension.

00:07:09.616 --> 00:07:10.666 A:middle
This is where your code that

00:07:10.666 --> 00:07:12.096 A:middle
actually filters network content

00:07:12.166 --> 00:07:12.646 A:middle
will run.

00:07:14.176 --> 00:07:15.806 A:middle
The Content Filter APIs allow

00:07:15.806 --> 00:07:18.336 A:middle
you to filter network content at

00:07:18.386 --> 00:07:19.346 A:middle
two different layers.

00:07:20.126 --> 00:07:21.316 A:middle
You can filter content at the

00:07:21.316 --> 00:07:23.426 A:middle
flow layer or at the packet

00:07:23.426 --> 00:07:23.656 A:middle
layer.

00:07:25.036 --> 00:07:27.576 A:middle
For flow layer filtering, you

00:07:27.576 --> 00:07:30.386 A:middle
create a subclass of any data

00:07:30.386 --> 00:07:31.256 A:middle
filter provider.

00:07:32.776 --> 00:07:35.116 A:middle
Once your content filter

00:07:35.116 --> 00:07:36.916 A:middle
configuration is registered with

00:07:36.916 --> 00:07:38.396 A:middle
the system, and your filter's up

00:07:38.396 --> 00:07:41.736 A:middle
and running, the system, as new

00:07:41.736 --> 00:07:44.606 A:middle
connections, as new TCP and UDP

00:07:44.656 --> 00:07:46.156 A:middle
flows of network data are

00:07:46.156 --> 00:07:48.916 A:middle
created on the system, those

00:07:48.916 --> 00:07:50.636 A:middle
flows get passed to your --

00:07:50.636 --> 00:07:52.536 A:middle
NEFilterDataProvider subclass

00:07:53.206 --> 00:07:54.626 A:middle
represented as individual

00:07:54.706 --> 00:07:56.326 A:middle
NEFilterFlowObjects.

00:07:56.896 --> 00:08:00.046 A:middle
It's then the responsibility of

00:07:56.896 --> 00:08:00.046 A:middle
It's then the responsibility of

00:08:00.046 --> 00:08:03.476 A:middle
your subclass to make a allow or

00:08:03.476 --> 00:08:04.766 A:middle
drop decision about each

00:08:04.766 --> 00:08:06.406 A:middle
individual flow.

00:08:07.696 --> 00:08:09.006 A:middle
You can make this decision about

00:08:09.006 --> 00:08:10.836 A:middle
each flow at any point in the

00:08:10.836 --> 00:08:11.996 A:middle
lifetime of the flow.

00:08:11.996 --> 00:08:13.276 A:middle
You can make it right up front

00:08:13.386 --> 00:08:15.396 A:middle
when the flow is first opened or

00:08:15.396 --> 00:08:17.016 A:middle
you can wait after you've seen

00:08:17.196 --> 00:08:17.966 A:middle
some amount of the flow's data.

00:08:22.076 --> 00:08:23.606 A:middle
I want to note here that the

00:08:23.606 --> 00:08:25.796 A:middle
NEFilterDataProvider class gives

00:08:25.796 --> 00:08:27.506 A:middle
you read-only access to flows.

00:08:29.246 --> 00:08:31.076 A:middle
You can't modify any aspect of a

00:08:31.076 --> 00:08:32.145 A:middle
flow, including any of the

00:08:32.145 --> 00:08:32.736 A:middle
flow's data.

00:08:34.676 --> 00:08:36.666 A:middle
By default, the system will pass

00:08:36.666 --> 00:08:38.905 A:middle
every single flow of TCP and UDP

00:08:38.905 --> 00:08:40.796 A:middle
data to your

00:08:40.796 --> 00:08:42.456 A:middle
NEFilterDataProvider subclass.

00:08:42.996 --> 00:08:44.826 A:middle
If this isn't exactly what you

00:08:44.826 --> 00:08:46.426 A:middle
want -- for example, if you're

00:08:46.426 --> 00:08:47.906 A:middle
writing a Parental Controls App,

00:08:48.546 --> 00:08:49.926 A:middle
so you're only interested in Web

00:08:49.926 --> 00:08:51.896 A:middle
traffic, you use NEFilter

00:08:51.896 --> 00:08:54.066 A:middle
settings to create a set of

00:08:54.066 --> 00:08:56.326 A:middle
rules that inform the system

00:08:56.326 --> 00:08:57.606 A:middle
about the flows that you want to

00:08:57.606 --> 00:08:58.906 A:middle
see in your filter.

00:08:59.606 --> 00:09:04.406 A:middle
So that's how flow level

00:08:59.606 --> 00:09:04.406 A:middle
So that's how flow level

00:09:04.406 --> 00:09:05.286 A:middle
filtering works.

00:09:07.066 --> 00:09:09.436 A:middle
If you want to filter traffic at

00:09:09.436 --> 00:09:12.216 A:middle
the packet layer, you create a

00:09:12.216 --> 00:09:12.846 A:middle
subclass of

00:09:12.916 --> 00:09:15.426 A:middle
NEFilterPacketProvider in your

00:09:15.426 --> 00:09:18.936 A:middle
system extension and as network

00:09:18.936 --> 00:09:19.906 A:middle
packets are flowing through the

00:09:19.906 --> 00:09:23.026 A:middle
system, the system will pass

00:09:23.326 --> 00:09:24.686 A:middle
those packets to your

00:09:24.686 --> 00:09:27.316 A:middle
FilterPacketProvider subclass as

00:09:27.316 --> 00:09:29.546 A:middle
individual packet objects, and

00:09:30.176 --> 00:09:33.026 A:middle
you make a Allow or Drop

00:09:33.026 --> 00:09:34.376 A:middle
decision about each individual

00:09:35.796 --> 00:09:35.966 A:middle
packet.

00:09:36.496 --> 00:09:37.476 A:middle
Okay. So there's a brief

00:09:37.476 --> 00:09:39.376 A:middle
overview of the Content Filter

00:09:39.486 --> 00:09:41.786 A:middle
APIs and how you use them in

00:09:41.786 --> 00:09:43.726 A:middle
your app.

00:09:43.986 --> 00:09:45.596 A:middle
Next I want to give you a brief

00:09:45.596 --> 00:09:47.086 A:middle
demonstration of an app that

00:09:47.086 --> 00:09:49.606 A:middle
uses the system extensions and

00:09:49.606 --> 00:09:52.016 A:middle
content filter APIs to implement

00:09:52.016 --> 00:09:52.976 A:middle
a firewall.

00:10:00.116 --> 00:10:01.196 A:middle
So the functionality of my app

00:10:01.196 --> 00:10:02.136 A:middle
is very simple.

00:10:03.026 --> 00:10:05.876 A:middle
I'm going to prompt the user to

00:10:05.876 --> 00:10:09.696 A:middle
allow or deny incoming TCP

00:10:09.696 --> 00:10:11.736 A:middle
connections on Port 8888.

00:10:12.616 --> 00:10:14.346 A:middle
So let me go ahead and run the

00:10:14.346 --> 00:10:15.866 A:middle
app and show you how it works.

00:10:16.506 --> 00:10:19.086 A:middle
So the app's called Simple

00:10:19.086 --> 00:10:19.856 A:middle
Firewall.

00:10:19.926 --> 00:10:21.126 A:middle
Go ahead and run the app.

00:10:22.496 --> 00:10:25.496 A:middle
And you can see my UI indicator

00:10:25.496 --> 00:10:25.686 A:middle
here.

00:10:25.686 --> 00:10:27.066 A:middle
The red dot is showing that my

00:10:27.066 --> 00:10:28.496 A:middle
content filter is not currently

00:10:28.496 --> 00:10:28.806 A:middle
running.

00:10:29.056 --> 00:10:29.746 A:middle
So I'm going to go ahead and

00:10:29.746 --> 00:10:31.000 A:middle
click start.

00:10:32.926 --> 00:10:34.656 A:middle
Alright. So I get this dialog

00:10:34.656 --> 00:10:36.366 A:middle
from the system indicating that

00:10:36.626 --> 00:10:37.816 A:middle
my system extension has been

00:10:37.816 --> 00:10:38.576 A:middle
blocked from running.

00:10:39.536 --> 00:10:41.276 A:middle
Now system extensions are very

00:10:41.276 --> 00:10:41.776 A:middle
powerful.

00:10:41.996 --> 00:10:44.306 A:middle
They give you the ability to do

00:10:44.306 --> 00:10:45.996 A:middle
lots of things on the system

00:10:46.256 --> 00:10:48.166 A:middle
including looking at network

00:10:48.166 --> 00:10:49.006 A:middle
traffic that's flowing through

00:10:49.006 --> 00:10:49.576 A:middle
the system.

00:10:49.996 --> 00:10:52.676 A:middle
So we want to make sure that we

00:10:52.676 --> 00:10:54.516 A:middle
get the user's permission before

00:10:54.516 --> 00:10:55.876 A:middle
allowing system extensions to

00:10:55.876 --> 00:10:56.086 A:middle
run.

00:10:56.086 --> 00:10:58.036 A:middle
So I'm going to go ahead and

00:10:58.036 --> 00:10:59.426 A:middle
open Security Preferences.

00:11:00.866 --> 00:11:01.676 A:middle
This will take me to the

00:11:01.676 --> 00:11:03.596 A:middle
Security and Privacy Preferences

00:11:03.596 --> 00:11:03.946 A:middle
pane.

00:11:04.796 --> 00:11:05.956 A:middle
I'll provide my admin

00:11:05.956 --> 00:11:08.476 A:middle
credentials and go ahead and

00:11:08.476 --> 00:11:10.206 A:middle
click allow to allow my system

00:11:10.206 --> 00:11:11.846 A:middle
extension to run.

00:11:13.916 --> 00:11:15.346 A:middle
The network extension framework

00:11:15.346 --> 00:11:17.266 A:middle
also prompts the user to confirm

00:11:17.266 --> 00:11:18.086 A:middle
that they want to allow the

00:11:18.086 --> 00:11:20.026 A:middle
system extension to filter

00:11:20.026 --> 00:11:21.386 A:middle
network traffic on the Mac.

00:11:21.386 --> 00:11:23.426 A:middle
So go ahead and click allow.

00:11:23.426 --> 00:11:24.976 A:middle
All right.

00:11:24.976 --> 00:11:26.726 A:middle
So, now back in simple firewall

00:11:26.726 --> 00:11:29.236 A:middle
we can see that my content

00:11:29.236 --> 00:11:30.656 A:middle
filter is now running.

00:11:31.166 --> 00:11:32.856 A:middle
So let's go ahead and connect to

00:11:32.856 --> 00:11:36.466 A:middle
Port 8888 here on my local Mac

00:11:36.626 --> 00:11:37.436 A:middle
and see what happens.

00:11:38.066 --> 00:11:39.496 A:middle
So I'm running a webserver on

00:11:39.496 --> 00:11:40.586 A:middle
Port 8888.

00:11:41.356 --> 00:11:43.956 A:middle
So I'm going to go ahead bring

00:11:43.956 --> 00:11:44.606 A:middle
up Safari.

00:11:44.606 --> 00:11:46.896 A:middle
And I have it bookmarked to my

00:11:46.896 --> 00:11:47.646 A:middle
local webserver.

00:11:47.646 --> 00:11:48.646 A:middle
So I'll click on that.

00:11:48.646 --> 00:11:50.956 A:middle
So the webpage starts to load,

00:11:50.956 --> 00:11:52.636 A:middle
but you can see it pauses here.

00:11:53.146 --> 00:11:54.886 A:middle
And sure enough, over in the

00:11:54.886 --> 00:11:57.136 A:middle
simple firewall app I have this

00:11:57.136 --> 00:11:58.576 A:middle
dialog inform me that a new

00:11:58.576 --> 00:12:00.306 A:middle
connection has been created on

00:11:58.576 --> 00:12:00.306 A:middle
connection has been created on

00:12:00.306 --> 00:12:02.826 A:middle
Port 8888 asking me if I want to

00:12:02.826 --> 00:12:03.766 A:middle
allow or deny.

00:12:04.706 --> 00:12:06.056 A:middle
So I'll click allow, and the

00:12:06.056 --> 00:12:06.976 A:middle
webpage loads.

00:12:09.506 --> 00:12:10.036 A:middle
So, cool.

00:12:10.246 --> 00:12:11.106 A:middle
My app is working.

00:12:12.606 --> 00:12:13.666 A:middle
Now let's go ahead and take a

00:12:13.666 --> 00:12:14.856 A:middle
look at some of the code in

00:12:14.856 --> 00:12:16.466 A:middle
simple firewall to see how it

00:12:16.466 --> 00:12:17.696 A:middle
makes use of the system

00:12:17.696 --> 00:12:20.316 A:middle
extensions and content filter

00:12:20.536 --> 00:12:20.976 A:middle
APIs.

00:12:22.306 --> 00:12:24.236 A:middle
So over here you can see my

00:12:24.236 --> 00:12:24.696 A:middle
project.

00:12:24.696 --> 00:12:26.036 A:middle
I have two different targets.

00:12:26.516 --> 00:12:28.696 A:middle
I have the SimpleFirewall Target

00:12:28.696 --> 00:12:29.916 A:middle
which is my main UI App.

00:12:31.076 --> 00:12:31.986 A:middle
And I have the

00:12:31.986 --> 00:12:33.766 A:middle
SimpleFirewallExtension Target

00:12:34.386 --> 00:12:35.976 A:middle
which is my System Extension.

00:12:40.256 --> 00:12:41.386 A:middle
Let's start off my looking at

00:12:41.386 --> 00:12:44.506 A:middle
some of the code in the app.

00:12:44.706 --> 00:12:46.176 A:middle
We'll take a look at the

00:12:46.176 --> 00:12:48.006 A:middle
implementation of my main View

00:12:48.006 --> 00:12:48.856 A:middle
Controller Class.

00:12:49.986 --> 00:12:51.326 A:middle
And I want to start by looking

00:12:51.326 --> 00:12:53.896 A:middle
at the startFilter function.

00:12:54.936 --> 00:12:56.906 A:middle
So this is the function that was

00:12:56.906 --> 00:12:57.766 A:middle
called when I clicked on the

00:12:57.766 --> 00:12:59.156 A:middle
start button in the

00:12:59.156 --> 00:13:00.136 A:middle
SimpleFirewall UI.

00:12:59.156 --> 00:13:00.136 A:middle
SimpleFirewall UI.

00:13:00.136 --> 00:13:02.816 A:middle
I start off by getting the

00:13:02.816 --> 00:13:04.356 A:middle
bundle identifier of my system

00:13:04.356 --> 00:13:07.256 A:middle
extension and using that to

00:13:07.256 --> 00:13:09.206 A:middle
create a system extension

00:13:09.206 --> 00:13:10.416 A:middle
activationRequest.

00:13:10.986 --> 00:13:16.226 A:middle
I set the view controller object

00:13:16.226 --> 00:13:16.946 A:middle
as the delegate of the

00:13:16.946 --> 00:13:18.316 A:middle
activationRequest so that it

00:13:18.316 --> 00:13:19.596 A:middle
will be notified when the

00:13:19.596 --> 00:13:20.716 A:middle
Request is complete.

00:13:21.276 --> 00:13:25.816 A:middle
Once the activationRequest is

00:13:25.816 --> 00:13:28.336 A:middle
created, I submit it to the

00:13:28.336 --> 00:13:29.816 A:middle
OSSystemExtensionManager.

00:13:30.736 --> 00:13:31.906 A:middle
This kicks off the process of

00:13:31.906 --> 00:13:33.446 A:middle
activating the system extension

00:13:33.746 --> 00:13:35.316 A:middle
including prompting the user to

00:13:35.566 --> 00:13:37.616 A:middle
allow the SystemExtension to run

00:13:38.016 --> 00:13:38.676 A:middle
if necessary.

00:13:40.636 --> 00:13:41.136 A:middle
Okay.

00:13:41.136 --> 00:13:43.706 A:middle
So once the user has allowed the

00:13:43.706 --> 00:13:47.116 A:middle
SystemExtension to run, my view

00:13:47.116 --> 00:13:48.736 A:middle
controller's request did finish

00:13:48.736 --> 00:13:50.546 A:middle
with result function gets

00:13:50.546 --> 00:13:51.156 A:middle
called.

00:13:52.196 --> 00:13:53.846 A:middle
I make sure that the activation

00:13:53.846 --> 00:13:56.926 A:middle
request was completed and I go

00:13:56.926 --> 00:13:59.226 A:middle
ahead and create my content

00:13:59.226 --> 00:14:00.386 A:middle
filter configuration.

00:13:59.226 --> 00:14:00.386 A:middle
filter configuration.

00:14:01.026 --> 00:14:03.826 A:middle
So here's where I'm using

00:14:03.826 --> 00:14:06.016 A:middle
AnyFilterManager to create my

00:14:06.016 --> 00:14:07.066 A:middle
filter configuration and

00:14:07.066 --> 00:14:08.176 A:middle
register it with the system.

00:14:08.826 --> 00:14:11.986 A:middle
So here you can see I'm setting

00:14:11.986 --> 00:14:14.246 A:middle
up some details about my -- on

00:14:14.246 --> 00:14:15.096 A:middle
my configuration.

00:14:16.526 --> 00:14:20.036 A:middle
I specify True for filter

00:14:20.036 --> 00:14:20.666 A:middle
sockets.

00:14:21.016 --> 00:14:22.256 A:middle
This indicates that I'm going to

00:14:22.256 --> 00:14:24.116 A:middle
be filtering network traffic at

00:14:24.116 --> 00:14:25.046 A:middle
the flow layer.

00:14:26.436 --> 00:14:28.226 A:middle
I set filter packets to False to

00:14:28.226 --> 00:14:29.296 A:middle
indicate that I'm not going to

00:14:29.296 --> 00:14:31.266 A:middle
be filtering network traffic at

00:14:31.266 --> 00:14:31.896 A:middle
the packet layer.

00:14:32.516 --> 00:14:36.556 A:middle
I go ahead and Enable my Content

00:14:36.556 --> 00:14:38.586 A:middle
Filter Configuration and then

00:14:38.586 --> 00:14:40.116 A:middle
register the Configuration with

00:14:40.116 --> 00:14:41.686 A:middle
the system by calling Save to

00:14:41.686 --> 00:14:42.406 A:middle
Preferences.

00:14:44.106 --> 00:14:46.476 A:middle
So since my Content Filter

00:14:46.476 --> 00:14:48.736 A:middle
Configuration is enabled, this

00:14:48.736 --> 00:14:50.336 A:middle
will cause the system to start

00:14:50.686 --> 00:14:53.386 A:middle
the SystemExtension and start my

00:14:53.386 --> 00:14:54.106 A:middle
Content Filter.

00:14:54.806 --> 00:14:56.526 A:middle
So let's go ahead and take a

00:14:56.526 --> 00:14:59.646 A:middle
look at the implementation of my

00:14:59.646 --> 00:15:01.356 A:middle
NEFilterDataProvider subclass

00:14:59.646 --> 00:15:01.356 A:middle
NEFilterDataProvider subclass

00:15:01.936 --> 00:15:03.986 A:middle
running inside of the system

00:15:03.986 --> 00:15:04.446 A:middle
extension.

00:15:05.106 --> 00:15:08.456 A:middle
So here's by subclass.

00:15:08.456 --> 00:15:09.786 A:middle
It's called FilterDataProvider.

00:15:10.046 --> 00:15:11.076 A:middle
And I've overridden three

00:15:11.076 --> 00:15:13.926 A:middle
different methods in this class

00:15:15.256 --> 00:15:17.366 A:middle
-- StartFilter, StopFilter, and

00:15:17.646 --> 00:15:18.676 A:middle
HandleNewFlow.

00:15:20.066 --> 00:15:21.326 A:middle
So, first, let's take a look at

00:15:21.326 --> 00:15:21.976 A:middle
StartFilter.

00:15:22.556 --> 00:15:25.006 A:middle
This is the function that is

00:15:25.006 --> 00:15:26.966 A:middle
called when the system starts my

00:15:27.316 --> 00:15:27.986 A:middle
content filter.

00:15:28.646 --> 00:15:32.016 A:middle
Now, by default, the system is

00:15:32.016 --> 00:15:34.326 A:middle
going to pass every single TCP

00:15:34.326 --> 00:15:36.656 A:middle
and UDP flow to my content

00:15:36.656 --> 00:15:37.096 A:middle
filter.

00:15:37.096 --> 00:15:38.116 A:middle
And this isn't really what I

00:15:38.116 --> 00:15:38.916 A:middle
want to do here.

00:15:39.216 --> 00:15:41.426 A:middle
I'm only interested in inbound

00:15:41.516 --> 00:15:43.136 A:middle
TCP connections connecting to

00:15:43.136 --> 00:15:46.986 A:middle
Port 8888 on my Mac.

00:15:47.306 --> 00:15:48.536 A:middle
So I'm going to create an

00:15:48.536 --> 00:15:50.946 A:middle
NEFilterSettingsObject to inform

00:15:50.946 --> 00:15:52.516 A:middle
the system about what traffic I

00:15:52.516 --> 00:15:55.146 A:middle
want to see.

00:15:56.196 --> 00:15:59.456 A:middle
Now I don't care where the TCP

00:15:59.456 --> 00:16:02.186 A:middle
connections are coming from, and

00:15:59.456 --> 00:16:02.186 A:middle
connections are coming from, and

00:16:02.186 --> 00:16:04.166 A:middle
I also don't care what address

00:16:04.876 --> 00:16:05.946 A:middle
the TCP connections are

00:16:05.946 --> 00:16:07.906 A:middle
connecting to on my Mac.

00:16:08.836 --> 00:16:10.226 A:middle
So I'm going to create two

00:16:10.226 --> 00:16:13.986 A:middle
NEFilter Rules, one with the

00:16:13.986 --> 00:16:16.266 A:middle
wildcard IPV4 address and

00:16:16.736 --> 00:16:18.496 A:middle
another with the wildcard IPV6

00:16:18.566 --> 00:16:19.000 A:middle
address.

00:16:21.976 --> 00:16:23.106 A:middle
For each Filter Rule that I

00:16:23.106 --> 00:16:25.116 A:middle
create, I create an

00:16:25.116 --> 00:16:27.156 A:middle
NENetworkRuleObject that

00:16:27.156 --> 00:16:28.636 A:middle
specifies the characteristics of

00:16:28.636 --> 00:16:30.106 A:middle
the flows that I want to see,

00:16:30.106 --> 00:16:31.506 A:middle
that I want the Filter Rule to

00:16:31.506 --> 00:16:32.000 A:middle
match.

00:16:34.966 --> 00:16:36.566 A:middle
So for remote network and remote

00:16:36.566 --> 00:16:38.106 A:middle
prefix, I'm passing nil and

00:16:38.106 --> 00:16:38.566 A:middle
zero.

00:16:39.516 --> 00:16:41.376 A:middle
So this means that my filter

00:16:41.376 --> 00:16:42.936 A:middle
rule is going to match traffic

00:16:43.066 --> 00:16:44.476 A:middle
coming from anywhere.

00:16:44.476 --> 00:16:45.726 A:middle
I don't care where it's coming

00:16:45.726 --> 00:16:46.086 A:middle
from.

00:16:47.166 --> 00:16:49.456 A:middle
For a local network, I pass in a

00:16:49.456 --> 00:16:51.476 A:middle
NWHostEndPoint that I've created

00:16:51.666 --> 00:16:54.246 A:middle
using the wildcard address and a

00:16:54.246 --> 00:16:56.046 A:middle
local port of 8888.

00:16:56.676 --> 00:16:56.776 A:middle
Okay.

00:16:58.436 --> 00:17:00.556 A:middle
So this means that my filter

00:16:58.436 --> 00:17:00.556 A:middle
So this means that my filter

00:17:00.556 --> 00:17:03.506 A:middle
rule's going to match flows that

00:17:03.506 --> 00:17:04.675 A:middle
are coming in and connecting to

00:17:04.675 --> 00:17:09.286 A:middle
Port 8888 on any address.

00:17:09.976 --> 00:17:12.935 A:middle
I specify a protocol of TCP and

00:17:12.935 --> 00:17:14.076 A:middle
a direction of Inbound.

00:17:15.516 --> 00:17:16.646 A:middle
I go ahead and create the

00:17:16.646 --> 00:17:18.675 A:middle
NEFilterRuleObject, passing in

00:17:18.675 --> 00:17:20.836 A:middle
the NENetworkRule, and an action

00:17:20.836 --> 00:17:21.536 A:middle
of filter data.

00:17:23.016 --> 00:17:26.096 A:middle
So when a new flow of network

00:17:26.096 --> 00:17:27.806 A:middle
data that matches my

00:17:27.886 --> 00:17:31.526 A:middle
NENetworkRule is created on the

00:17:31.526 --> 00:17:34.526 A:middle
system, the system will pass

00:17:34.566 --> 00:17:36.736 A:middle
that flow to my content filter

00:17:37.666 --> 00:17:39.006 A:middle
per the filter data action.

00:17:39.736 --> 00:17:40.796 A:middle
All right.

00:17:42.096 --> 00:17:43.736 A:middle
So once I've created these

00:17:43.736 --> 00:17:45.386 A:middle
NEFilterRules, I go ahead and

00:17:45.386 --> 00:17:46.526 A:middle
create my

00:17:46.526 --> 00:17:49.136 A:middle
NEFilterSettingsObject, passing

00:17:49.136 --> 00:17:51.516 A:middle
in the rules and specifying a

00:17:51.516 --> 00:17:52.766 A:middle
default action of Allow.

00:17:53.216 --> 00:17:55.106 A:middle
So what this means is if a new

00:17:55.106 --> 00:17:56.486 A:middle
flow is created on the system,

00:17:56.486 --> 00:17:57.736 A:middle
and it doesn't match any of my

00:17:57.736 --> 00:17:59.676 A:middle
filter rules, I want the system

00:17:59.676 --> 00:18:01.236 A:middle
to just allow that flow.

00:17:59.676 --> 00:18:01.236 A:middle
to just allow that flow.

00:18:01.716 --> 00:18:02.856 A:middle
Don't pass it to my content

00:18:02.856 --> 00:18:03.106 A:middle
filter.

00:18:04.296 --> 00:18:06.656 A:middle
I go ahead and call Apply to

00:18:06.656 --> 00:18:07.966 A:middle
apply my filter settings to the

00:18:07.966 --> 00:18:10.086 A:middle
system and then, when that's

00:18:10.086 --> 00:18:11.676 A:middle
complete, I call the

00:18:11.676 --> 00:18:13.306 A:middle
StartFilterCompletionHandler to

00:18:13.306 --> 00:18:14.536 A:middle
indicate to the system that my

00:18:14.536 --> 00:18:16.396 A:middle
filter is now up and running and

00:18:16.396 --> 00:18:17.656 A:middle
is ready to start handling

00:18:18.086 --> 00:18:18.936 A:middle
network flows.

00:18:19.566 --> 00:18:22.506 A:middle
Now let's look at the

00:18:22.506 --> 00:18:24.366 A:middle
HandleNewFlow function.

00:18:24.366 --> 00:18:25.766 A:middle
So this is the function that's

00:18:25.766 --> 00:18:27.496 A:middle
called when a new flow is

00:18:27.496 --> 00:18:29.476 A:middle
created that matches my filter

00:18:29.476 --> 00:18:29.926 A:middle
rules.

00:18:31.976 --> 00:18:34.486 A:middle
The function takes a parameter,

00:18:34.486 --> 00:18:35.936 A:middle
the NEFilterFlowObject that

00:18:35.936 --> 00:18:38.186 A:middle
represents the flow, and it

00:18:38.186 --> 00:18:40.256 A:middle
returns a new flow verdict to

00:18:40.256 --> 00:18:41.406 A:middle
indicate to the system what to

00:18:41.406 --> 00:18:42.386 A:middle
do with the flow.

00:18:43.776 --> 00:18:45.246 A:middle
So what I'm doing here is

00:18:45.246 --> 00:18:47.356 A:middle
packaging up some details about

00:18:47.356 --> 00:18:50.156 A:middle
the flow in a dictionary, and

00:18:50.186 --> 00:18:52.006 A:middle
sending that dictionary off to

00:18:52.386 --> 00:18:55.136 A:middle
my UI app to prompt the user to

00:18:55.136 --> 00:18:56.836 A:middle
allow or deny the flow.

00:18:57.346 --> 00:19:01.616 A:middle
Now, getting the user's decision

00:18:57.346 --> 00:19:01.616 A:middle
Now, getting the user's decision

00:19:01.616 --> 00:19:03.086 A:middle
is obviously a very asynchronous

00:19:03.116 --> 00:19:03.686 A:middle
process.

00:19:04.066 --> 00:19:05.236 A:middle
So while I'm waiting for them to

00:19:05.236 --> 00:19:06.466 A:middle
make a decision and go ahead and

00:19:06.466 --> 00:19:08.456 A:middle
return a verdict of Pause to the

00:19:08.456 --> 00:19:08.936 A:middle
system.

00:19:08.936 --> 00:19:11.356 A:middle
So this tells the OS, just hang

00:19:11.356 --> 00:19:12.076 A:middle
onto this flow.

00:19:12.076 --> 00:19:13.216 A:middle
Don't do anything further with

00:19:13.216 --> 00:19:14.676 A:middle
it until I resume the flow.

00:19:16.756 --> 00:19:17.626 A:middle
Once the user makes their

00:19:17.626 --> 00:19:19.786 A:middle
decision, I create a new flow

00:19:19.786 --> 00:19:21.686 A:middle
verdict of either Allow or Drop,

00:19:22.006 --> 00:19:23.196 A:middle
depending upon what the user's

00:19:23.196 --> 00:19:25.186 A:middle
decision was, and then I call

00:19:25.186 --> 00:19:28.226 A:middle
Resume Flow with the new

00:19:29.346 --> 00:19:29.746 A:middle
verdict.

00:19:30.056 --> 00:19:32.316 A:middle
Alright. So that was an example

00:19:32.566 --> 00:19:35.096 A:middle
of an app that uses the System

00:19:35.096 --> 00:19:37.416 A:middle
Extensions and Content Filter

00:19:37.456 --> 00:19:40.546 A:middle
APIs to implement a simple

00:19:40.546 --> 00:19:40.926 A:middle
firewall.

00:19:46.066 --> 00:19:47.246 A:middle
Next I want to talk about

00:19:47.246 --> 00:19:49.856 A:middle
Transparent Proxy Apps.

00:19:50.186 --> 00:19:51.946 A:middle
So one example of a Transparent

00:19:51.946 --> 00:19:54.886 A:middle
Proxy App is a cloud security

00:19:54.886 --> 00:19:55.096 A:middle
app.

00:19:55.576 --> 00:19:56.816 A:middle
These are apps that divert

00:19:56.816 --> 00:19:58.346 A:middle
traffic destined for specific

00:19:58.346 --> 00:20:00.866 A:middle
websites to a cloud service.

00:19:58.346 --> 00:20:00.866 A:middle
websites to a cloud service.

00:20:01.416 --> 00:20:02.856 A:middle
And that cloud service applies

00:20:02.856 --> 00:20:04.406 A:middle
some additional security checks

00:20:04.406 --> 00:20:05.596 A:middle
to the traffic such as

00:20:05.956 --> 00:20:07.596 A:middle
additional user authentication

00:20:07.596 --> 00:20:08.586 A:middle
or authorization.

00:20:10.326 --> 00:20:12.496 A:middle
Another example of a Transparent

00:20:12.496 --> 00:20:15.056 A:middle
Proxy App is an app that applies

00:20:15.096 --> 00:20:16.376 A:middle
some special transformation to

00:20:16.376 --> 00:20:18.436 A:middle
traffic such as applying an

00:20:18.756 --> 00:20:20.366 A:middle
encryption algorithm to network

00:20:20.366 --> 00:20:23.986 A:middle
traffic or caching resources

00:20:23.986 --> 00:20:25.376 A:middle
downloaded over the Web in some

00:20:25.376 --> 00:20:26.026 A:middle
special way.

00:20:27.236 --> 00:20:29.246 A:middle
Transparent Proxy Apps can also

00:20:29.246 --> 00:20:31.466 A:middle
multiplex multiple flows of

00:20:31.466 --> 00:20:32.716 A:middle
network traffic over a single

00:20:32.716 --> 00:20:33.306 A:middle
connection.

00:20:34.476 --> 00:20:37.106 A:middle
Or they can use some custom

00:20:37.156 --> 00:20:38.746 A:middle
special protocol that reduces

00:20:38.746 --> 00:20:39.646 A:middle
network latency.

00:20:40.166 --> 00:20:41.096 A:middle
There are a lot of really

00:20:41.096 --> 00:20:42.366 A:middle
interesting use cases for

00:20:42.366 --> 00:20:43.686 A:middle
Transparent Proxy Apps.

00:20:44.156 --> 00:20:45.276 A:middle
So I'm really excited to tell

00:20:45.276 --> 00:20:47.376 A:middle
you that in macOS Catalina we've

00:20:47.376 --> 00:20:49.006 A:middle
introduced some new APIs in the

00:20:49.006 --> 00:20:50.386 A:middle
network extension framework that

00:20:50.806 --> 00:20:52.666 A:middle
allow you to create Transparent

00:20:52.666 --> 00:20:55.246 A:middle
Proxy Apps without using Kernel

00:20:55.246 --> 00:20:55.926 A:middle
Extensions.

00:20:57.996 --> 00:20:58.886 A:middle
So let's go ahead and take a

00:20:58.886 --> 00:20:59.986 A:middle
look at these APIs.

00:21:00.296 --> 00:21:01.706 A:middle
They're in the NetworkExtension

00:21:01.706 --> 00:21:02.246 A:middle
Framework.

00:21:02.786 --> 00:21:03.946 A:middle
Let's see how you use them in

00:21:03.946 --> 00:21:04.386 A:middle
your app.

00:21:09.046 --> 00:21:11.916 A:middle
So in your main UI App, you use

00:21:11.916 --> 00:21:14.376 A:middle
any Transparent Proxy Manager to

00:21:14.376 --> 00:21:15.576 A:middle
create Transparent Proxy

00:21:15.576 --> 00:21:17.716 A:middle
configurations and register your

00:21:17.716 --> 00:21:19.216 A:middle
Transparent Proxy with the

00:21:19.216 --> 00:21:19.856 A:middle
system.

00:21:19.856 --> 00:21:21.516 A:middle
So your system knows how to run

00:21:21.976 --> 00:21:25.396 A:middle
your Transparent Proxy.

00:21:25.956 --> 00:21:27.126 A:middle
You also create a system

00:21:27.126 --> 00:21:27.686 A:middle
extension.

00:21:27.686 --> 00:21:28.936 A:middle
This is where your proxy will

00:21:28.936 --> 00:21:29.226 A:middle
run.

00:21:30.896 --> 00:21:33.796 A:middle
So these APIs allow you to proxy

00:21:33.886 --> 00:21:35.516 A:middle
flows of network data at the

00:21:35.516 --> 00:21:36.186 A:middle
flow layer.

00:21:37.456 --> 00:21:38.786 A:middle
To do this, you create a

00:21:38.786 --> 00:21:41.826 A:middle
subclass of NEAppProxyProvider.

00:21:42.306 --> 00:21:44.236 A:middle
Now, unlike content filter, by

00:21:44.236 --> 00:21:45.786 A:middle
default the system does not

00:21:45.786 --> 00:21:48.216 A:middle
divert any flows to your proxy.

00:21:49.036 --> 00:21:51.246 A:middle
So you must create a set of

00:21:51.356 --> 00:21:54.126 A:middle
NENetworkRules that specify what

00:21:54.196 --> 00:21:56.986 A:middle
flows you want to proxy.

00:21:58.036 --> 00:21:59.536 A:middle
So once your Transparent Proxy

00:21:59.536 --> 00:22:00.996 A:middle
is up and running and you've

00:21:59.536 --> 00:22:00.996 A:middle
is up and running and you've

00:22:01.216 --> 00:22:03.416 A:middle
installed your NENetworkRules,

00:22:03.416 --> 00:22:10.246 A:middle
as new TCP and UDP flows are

00:22:10.246 --> 00:22:11.826 A:middle
opened that match your rules,

00:22:12.226 --> 00:22:14.276 A:middle
those flows are diverted to your

00:22:14.316 --> 00:22:15.886 A:middle
NEAppProxyProvider subclass.

00:22:16.386 --> 00:22:18.256 A:middle
From there, it's up to you to

00:22:18.256 --> 00:22:19.786 A:middle
completely handle each

00:22:19.786 --> 00:22:21.326 A:middle
individual flow.

00:22:22.346 --> 00:22:24.866 A:middle
You can multiplex the flow over

00:22:24.866 --> 00:22:26.296 A:middle
another connection, apply your

00:22:26.296 --> 00:22:28.156 A:middle
special transformation, whatever

00:22:28.156 --> 00:22:28.896 A:middle
you need to do.

00:22:28.896 --> 00:22:31.826 A:middle
It's completely up to you.

00:22:31.826 --> 00:22:33.806 A:middle
So there's a brief overview of

00:22:33.806 --> 00:22:35.046 A:middle
how to use these Transparent

00:22:35.046 --> 00:22:37.846 A:middle
Proxy APIs in your app.

00:22:41.096 --> 00:22:43.176 A:middle
Next, let's take a look at DNS

00:22:43.176 --> 00:22:43.996 A:middle
Proxy Apps.

00:22:45.036 --> 00:22:46.656 A:middle
Now the DNS protocol is a great

00:22:46.656 --> 00:22:48.066 A:middle
protocol, very powerful and

00:22:48.066 --> 00:22:48.646 A:middle
useful.

00:22:49.186 --> 00:22:50.586 A:middle
But it's not very secure.

00:22:51.746 --> 00:22:55.556 A:middle
So it's pretty easy to spoof DNS

00:22:55.556 --> 00:22:57.996 A:middle
responses and cause browsers to

00:22:57.996 --> 00:23:01.486 A:middle
go to malicious websites or to

00:22:57.996 --> 00:23:01.486 A:middle
go to malicious websites or to

00:23:01.486 --> 00:23:03.506 A:middle
spy on somebody's Internet

00:23:03.506 --> 00:23:04.826 A:middle
browsing activity simply by

00:23:04.826 --> 00:23:06.446 A:middle
looking at the DNS queries that

00:23:06.446 --> 00:23:07.016 A:middle
they're sending.

00:23:07.666 --> 00:23:09.756 A:middle
So to address these

00:23:09.756 --> 00:23:12.896 A:middle
deficiencies, DNS Proxies apply

00:23:12.896 --> 00:23:14.626 A:middle
additional security to the DNS

00:23:14.736 --> 00:23:15.486 A:middle
Protocol.

00:23:16.836 --> 00:23:20.396 A:middle
For example, the app may apply

00:23:20.396 --> 00:23:22.166 A:middle
some encryption to DNS traffic

00:23:22.426 --> 00:23:24.406 A:middle
or a proxy DNS traffic over some

00:23:24.406 --> 00:23:25.476 A:middle
sort of secure channel.

00:23:27.006 --> 00:23:28.306 A:middle
So I'm pleased to tell you that

00:23:28.306 --> 00:23:29.736 A:middle
in macOS Catalina we've

00:23:29.736 --> 00:23:31.536 A:middle
introduced some great new APIs

00:23:31.536 --> 00:23:34.176 A:middle
that allow you to implement DNS

00:23:34.266 --> 00:23:36.596 A:middle
Proxy Apps without using Network

00:23:36.596 --> 00:23:37.556 A:middle
Kernel Extensions.

00:23:42.326 --> 00:23:44.266 A:middle
So these APIs are in the

00:23:44.266 --> 00:23:45.476 A:middle
NetworkExtension Framework.

00:23:46.076 --> 00:23:47.666 A:middle
They were actually introduced in

00:23:47.796 --> 00:23:50.916 A:middle
iOS 11, so in macOS Catalina we

00:23:50.916 --> 00:23:52.006 A:middle
brought them over and made them

00:23:52.006 --> 00:23:53.046 A:middle
available on the Mac.

00:23:53.906 --> 00:23:55.276 A:middle
Let's take a look at these APIs

00:23:55.276 --> 00:23:57.226 A:middle
and how they work in your app.

00:23:57.976 --> 00:23:59.036 A:middle
So in your main new IA app,

00:23:59.266 --> 00:24:01.546 A:middle
you'll use NEDNSProxyManager to

00:23:59.266 --> 00:24:01.546 A:middle
you'll use NEDNSProxyManager to

00:24:01.546 --> 00:24:02.716 A:middle
create your DNS Proxy

00:24:02.716 --> 00:24:04.856 A:middle
configuration, register your

00:24:04.856 --> 00:24:07.046 A:middle
configuration with the system so

00:24:07.046 --> 00:24:08.426 A:middle
the system knows how to run your

00:24:09.486 --> 00:24:11.756 A:middle
DNS Proxy.

00:24:11.806 --> 00:24:13.356 A:middle
You create a System Extension.

00:24:13.496 --> 00:24:14.846 A:middle
This is where your DNS Proxy

00:24:15.226 --> 00:24:15.736 A:middle
will run.

00:24:16.936 --> 00:24:19.206 A:middle
And you implement your proxy as

00:24:19.206 --> 00:24:20.776 A:middle
a subclass of the

00:24:20.776 --> 00:24:23.456 A:middle
NEDNSProxyProvider Class.

00:24:24.616 --> 00:24:26.246 A:middle
So once your DNS Proxy

00:24:26.246 --> 00:24:27.626 A:middle
configuration is registered with

00:24:27.626 --> 00:24:28.946 A:middle
the system, your system

00:24:28.946 --> 00:24:31.506 A:middle
extension is running, the system

00:24:31.506 --> 00:24:33.386 A:middle
will start diverting all DNS

00:24:33.386 --> 00:24:35.296 A:middle
queries to your

00:24:35.296 --> 00:24:37.136 A:middle
NEDNSProxyProvider Subclass.

00:24:37.646 --> 00:24:40.376 A:middle
From there it's totally up to

00:24:40.376 --> 00:24:42.166 A:middle
you to completely handle each

00:24:42.166 --> 00:24:42.996 A:middle
DNS query.

00:24:43.376 --> 00:24:44.816 A:middle
You can encrypt it.

00:24:44.816 --> 00:24:46.096 A:middle
You can send it over some sort

00:24:46.096 --> 00:24:47.106 A:middle
of secure channel.

00:24:47.436 --> 00:24:51.126 A:middle
It's totally up to you.

00:24:51.126 --> 00:24:53.206 A:middle
Alright. So that's an overview

00:24:53.206 --> 00:24:55.296 A:middle
of the DNX Proxy APIs.

00:24:55.856 --> 00:24:57.486 A:middle
Next I'm going to talk about VPN

00:24:57.486 --> 00:24:57.866 A:middle
Apps.

00:24:58.776 --> 00:25:01.856 A:middle
So the classic use case for VPN

00:24:58.776 --> 00:25:01.856 A:middle
So the classic use case for VPN

00:25:01.856 --> 00:25:04.936 A:middle
Apps is to allow companies to

00:25:04.936 --> 00:25:06.906 A:middle
provide their employees with

00:25:06.906 --> 00:25:10.146 A:middle
secure remote access to their

00:25:10.146 --> 00:25:11.286 A:middle
internal corporate network.

00:25:12.856 --> 00:25:14.386 A:middle
Another use case that has grown

00:25:14.386 --> 00:25:16.096 A:middle
in popularity a lot in recent

00:25:16.096 --> 00:25:18.436 A:middle
years are personal VPN Apps.

00:25:19.316 --> 00:25:20.806 A:middle
So these are apps that are used

00:25:20.806 --> 00:25:22.886 A:middle
to securely and anonymously

00:25:23.086 --> 00:25:23.906 A:middle
browse the Internet.

00:25:24.586 --> 00:25:29.096 A:middle
So we actually introduced VPN

00:25:29.096 --> 00:25:31.636 A:middle
APIs on macOS back in macOS

00:25:31.636 --> 00:25:33.046 A:middle
10.10.

00:25:33.626 --> 00:25:35.326 A:middle
So in this release we've

00:25:35.326 --> 00:25:37.036 A:middle
enhanced those APIs to make them

00:25:37.126 --> 00:25:37.666 A:middle
even better.

00:25:37.666 --> 00:25:39.836 A:middle
Let's take a look at the VPN

00:25:39.836 --> 00:25:41.966 A:middle
APIs and how you use them in

00:25:41.966 --> 00:25:43.026 A:middle
your app.

00:25:44.836 --> 00:25:47.006 A:middle
So in your main UI app, you use

00:25:47.886 --> 00:25:51.196 A:middle
NETunnelProviderManager to

00:25:51.196 --> 00:25:53.696 A:middle
create VPN configurations and

00:25:53.696 --> 00:25:55.836 A:middle
register your VPN client with

00:25:56.616 --> 00:25:57.916 A:middle
the system.

00:25:57.956 --> 00:25:59.016 A:middle
You also create a System

00:25:59.016 --> 00:26:00.176 A:middle
Extension, which is where your

00:25:59.016 --> 00:26:00.176 A:middle
Extension, which is where your

00:26:00.176 --> 00:26:02.096 A:middle
VPN client code will run.

00:26:02.826 --> 00:26:07.646 A:middle
You implement your VPN client as

00:26:07.646 --> 00:26:08.816 A:middle
a subclass of the

00:26:08.816 --> 00:26:10.766 A:middle
NEPacketTunnelProvider class.

00:26:12.076 --> 00:26:13.626 A:middle
The system creates a utun

00:26:13.626 --> 00:26:16.136 A:middle
interface corresponding to your

00:26:16.176 --> 00:26:17.746 A:middle
NEPacketTunnelProvider.

00:26:18.766 --> 00:26:20.986 A:middle
Your NEPacketTunnelProvider is

00:26:20.986 --> 00:26:22.596 A:middle
responsible for telling the

00:26:22.596 --> 00:26:25.936 A:middle
system about which networks you

00:26:25.936 --> 00:26:27.616 A:middle
want to be routed through your

00:26:27.916 --> 00:26:28.000 A:middle
VPN.

00:26:30.526 --> 00:26:32.176 A:middle
So once you've specified your

00:26:32.176 --> 00:26:33.776 A:middle
routing rules for your VPN and

00:26:33.776 --> 00:26:34.556 A:middle
those are installed in the

00:26:34.556 --> 00:26:37.066 A:middle
system, as IP packets get routed

00:26:37.206 --> 00:26:39.556 A:middle
to your utun interface per those

00:26:39.556 --> 00:26:42.046 A:middle
routes, those packets get

00:26:42.046 --> 00:26:43.216 A:middle
diverted to your

00:26:43.256 --> 00:26:45.906 A:middle
NEPacketTunnelProvider where you

00:26:45.906 --> 00:26:49.526 A:middle
can send those packets through

00:26:49.526 --> 00:26:50.986 A:middle
your tunnel connection using

00:26:50.986 --> 00:26:53.846 A:middle
your custom tunneling protocol.

00:26:54.306 --> 00:26:54.416 A:middle
Okay.

00:26:55.196 --> 00:26:56.966 A:middle
So there's a brief overview of

00:26:56.966 --> 00:26:58.686 A:middle
how the VPN APIs work.

00:26:59.436 --> 00:27:00.406 A:middle
Next I want to talk about a

00:26:59.436 --> 00:27:00.406 A:middle
Next I want to talk about a

00:27:00.406 --> 00:27:01.596 A:middle
couple of enhancements we've

00:27:01.596 --> 00:27:03.316 A:middle
made to the VPN APIs.

00:27:04.446 --> 00:27:05.126 A:middle
So the first is

00:27:05.126 --> 00:27:06.406 A:middle
IncludeAllNetworks.

00:27:06.496 --> 00:27:08.326 A:middle
This is a new flag you can set

00:27:08.326 --> 00:27:09.846 A:middle
on your VPN configuration.

00:27:10.236 --> 00:27:12.176 A:middle
This is particularly useful in

00:27:12.206 --> 00:27:12.806 A:middle
personal VPN apps.

00:27:12.806 --> 00:27:15.386 A:middle
In these apps, it's really

00:27:15.386 --> 00:27:17.856 A:middle
important that no traffic leak

00:27:17.856 --> 00:27:19.816 A:middle
outside of the VPN tunnel.

00:27:19.816 --> 00:27:21.386 A:middle
You want all your traffic to be

00:27:21.386 --> 00:27:22.346 A:middle
going through the VPN

00:27:22.346 --> 00:27:23.926 A:middle
[applause].

00:27:23.926 --> 00:27:24.136 A:middle
Yes.

00:27:26.876 --> 00:27:29.256 A:middle
So by enabling

00:27:29.256 --> 00:27:30.416 A:middle
IncludeAllNetworks on your

00:27:30.416 --> 00:27:31.926 A:middle
configuration, you cause this to

00:27:31.926 --> 00:27:32.256 A:middle
happen.

00:27:32.256 --> 00:27:33.736 A:middle
The system will route all

00:27:33.736 --> 00:27:36.586 A:middle
traffic through the VPN and if

00:27:36.586 --> 00:27:38.356 A:middle
the VPN is not available

00:27:38.356 --> 00:27:39.716 A:middle
temporarily for some reason --

00:27:40.156 --> 00:27:42.526 A:middle
for example, if the Mac is

00:27:42.686 --> 00:27:44.086 A:middle
switching between the WiFi

00:27:44.086 --> 00:27:46.396 A:middle
networks it's connected to or if

00:27:46.396 --> 00:27:48.076 A:middle
your VPN is just down for --

00:27:48.076 --> 00:27:49.526 A:middle
temporarily for whatever reason,

00:27:50.706 --> 00:27:52.766 A:middle
in those scenarios, traffic will

00:27:52.766 --> 00:27:54.546 A:middle
actually be dropped instead of

00:27:54.546 --> 00:27:58.066 A:middle
being routed outside of the VPN.

00:27:58.616 --> 00:27:59.606 A:middle
Now, if you've enabled

00:27:59.606 --> 00:28:01.456 A:middle
IncludeAllNetworks, but you

00:27:59.606 --> 00:28:01.456 A:middle
IncludeAllNetworks, but you

00:28:01.796 --> 00:28:03.666 A:middle
still want to allow access to

00:28:03.666 --> 00:28:05.386 A:middle
local network resources such as

00:28:05.386 --> 00:28:07.796 A:middle
printers, you can enable

00:28:07.796 --> 00:28:10.486 A:middle
ExcludeLocalNetworks to allow

00:28:10.486 --> 00:28:11.696 A:middle
that access to still happen.

00:28:12.316 --> 00:28:12.416 A:middle
Okay.

00:28:14.516 --> 00:28:16.756 A:middle
So we've also made some

00:28:16.756 --> 00:28:18.566 A:middle
enhancements to Per-App VPN.

00:28:19.706 --> 00:28:21.556 A:middle
We've added three new lists of

00:28:21.556 --> 00:28:23.226 A:middle
domains that you can use to

00:28:23.226 --> 00:28:26.946 A:middle
route traffic to your Per-App

00:28:27.746 --> 00:28:27.866 A:middle
VPN.

00:28:28.096 --> 00:28:31.246 A:middle
So the way these work is, for

00:28:31.246 --> 00:28:33.576 A:middle
each one of these lists, if the

00:28:33.576 --> 00:28:36.676 A:middle
corresponding app creates a

00:28:36.676 --> 00:28:39.946 A:middle
connection to a host and that

00:28:39.946 --> 00:28:42.146 A:middle
host domain matches one of the

00:28:42.146 --> 00:28:44.746 A:middle
domains in the list, that

00:28:44.746 --> 00:28:45.786 A:middle
connection's traffic will be

00:28:45.786 --> 00:28:47.866 A:middle
routed through the Per-App VPN.

00:28:48.796 --> 00:28:49.826 A:middle
Let's look at an example.

00:28:49.946 --> 00:28:51.236 A:middle
So, if you were using the Mail

00:28:51.406 --> 00:28:52.606 A:middle
App, and you have the Mail App

00:28:52.606 --> 00:28:54.906 A:middle
set up with two accounts -- you

00:28:54.906 --> 00:28:56.796 A:middle
have your personal e-mail

00:28:56.796 --> 00:28:58.526 A:middle
account and you have your

00:28:58.526 --> 00:29:00.486 A:middle
corporate e-mail account.

00:28:58.526 --> 00:29:00.486 A:middle
corporate e-mail account.

00:29:01.116 --> 00:29:04.216 A:middle
By specifying the domain of the

00:29:04.216 --> 00:29:06.736 A:middle
corporate e-mail server in the

00:29:06.736 --> 00:29:12.296 A:middle
mail domain's array, when Mail

00:29:12.296 --> 00:29:13.926 A:middle
opens up a new connection to

00:29:13.926 --> 00:29:15.726 A:middle
your corporate e-mail server,

00:29:15.886 --> 00:29:17.016 A:middle
that connection will be routed

00:29:17.016 --> 00:29:20.116 A:middle
through the Per-App VPN, while

00:29:20.116 --> 00:29:21.756 A:middle
connections to your personal

00:29:21.756 --> 00:29:24.346 A:middle
e-mail server will not be routed

00:29:24.346 --> 00:29:26.000 A:middle
through the Per-App VPN.

00:29:28.326 --> 00:29:29.556 A:middle
So the CalendarDomains and

00:29:29.556 --> 00:29:32.506 A:middle
ContactsDomains lists behave the

00:29:32.506 --> 00:29:34.546 A:middle
same way except for the Calendar

00:29:34.546 --> 00:29:36.146 A:middle
App and the Contacts App.

00:29:36.756 --> 00:29:36.856 A:middle
Okay.

00:29:39.016 --> 00:29:41.696 A:middle
So that was a brief overview of

00:29:41.696 --> 00:29:43.666 A:middle
the VPN APIs that are available

00:29:43.666 --> 00:29:45.236 A:middle
on macOS, and some enhancements

00:29:45.236 --> 00:29:46.676 A:middle
we've made that allow you to

00:29:46.676 --> 00:29:49.816 A:middle
create VPN Apps without the use

00:29:49.816 --> 00:29:51.076 A:middle
of Network Kernel Extensions.

00:29:51.076 --> 00:29:55.106 A:middle
Next, I want to talk about

00:29:55.106 --> 00:29:56.126 A:middle
Virtual Machine Apps.

00:29:56.286 --> 00:29:57.946 A:middle
So these are apps that create

00:29:57.946 --> 00:29:59.746 A:middle
and manage virtual machines.

00:30:00.416 --> 00:30:02.706 A:middle
And, honestly, a virtual machine

00:30:02.706 --> 00:30:04.086 A:middle
probably is not very useful if

00:30:04.086 --> 00:30:05.586 A:middle
it can't connect to the network.

00:30:07.076 --> 00:30:08.846 A:middle
So on macOS we have the

00:30:08.846 --> 00:30:10.476 A:middle
vmnet.framework that allows you

00:30:10.476 --> 00:30:11.976 A:middle
to do just that, connect virtual

00:30:11.976 --> 00:30:13.576 A:middle
machines to the network.

00:30:14.566 --> 00:30:15.956 A:middle
The vmnet.framework was

00:30:15.956 --> 00:30:17.826 A:middle
introduced on macOS back in

00:30:17.826 --> 00:30:19.126 A:middle
macOS 10.10.

00:30:19.626 --> 00:30:21.326 A:middle
But we made a lot of

00:30:21.326 --> 00:30:22.716 A:middle
enhancements in this release to

00:30:22.716 --> 00:30:24.766 A:middle
give you more ways to connect

00:30:24.766 --> 00:30:26.026 A:middle
virtual machines to the network.

00:30:26.616 --> 00:30:28.656 A:middle
The way the framework works is

00:30:28.656 --> 00:30:30.166 A:middle
it gives you several different

00:30:30.166 --> 00:30:31.646 A:middle
modes of connecting virtual

00:30:31.646 --> 00:30:32.636 A:middle
machines to the network.

00:30:33.706 --> 00:30:35.346 A:middle
We've made some enhancements to

00:30:35.516 --> 00:30:36.246 A:middle
Shared Mode.

00:30:36.666 --> 00:30:38.516 A:middle
You can now use IPv6 in Shared

00:30:38.516 --> 00:30:38.786 A:middle
Mode.

00:30:39.536 --> 00:30:41.296 A:middle
You can specify the range of IPs

00:30:41.296 --> 00:30:42.546 A:middle
you want to assign to your

00:30:42.546 --> 00:30:43.426 A:middle
virtual machines.

00:30:44.016 --> 00:30:45.366 A:middle
And you can set up Port

00:30:45.366 --> 00:30:46.896 A:middle
Forwarding Rules between your

00:30:46.896 --> 00:30:48.426 A:middle
virtual machines and the

00:30:49.016 --> 00:30:49.206 A:middle
network.

00:30:50.096 --> 00:30:51.686 A:middle
We've also added a brand new

00:30:51.686 --> 00:30:52.936 A:middle
mode called Bridged Mode.

00:30:53.396 --> 00:30:54.416 A:middle
In this mode your virtual

00:30:54.416 --> 00:30:55.756 A:middle
machines show up on the local

00:30:55.756 --> 00:30:57.016 A:middle
network as if they were

00:30:57.016 --> 00:30:58.076 A:middle
physically connected to the

00:30:58.076 --> 00:30:58.776 A:middle
local network.

00:30:59.396 --> 00:30:59.496 A:middle
Okay.

00:31:00.616 --> 00:31:04.586 A:middle
So that's a brief overview of

00:31:04.706 --> 00:31:06.396 A:middle
the Virtual Machine APIs you can

00:31:06.396 --> 00:31:07.916 A:middle
use to connect virtual machines

00:31:07.916 --> 00:31:08.506 A:middle
to the network.

00:31:11.406 --> 00:31:12.626 A:middle
Next, I want to briefly talk

00:31:12.626 --> 00:31:15.286 A:middle
about apps that use custom

00:31:15.286 --> 00:31:16.896 A:middle
low-layer protocols.

00:31:18.066 --> 00:31:20.316 A:middle
So one example of such an app is

00:31:20.316 --> 00:31:21.596 A:middle
an app that needs to communicate

00:31:21.986 --> 00:31:24.106 A:middle
with a piece of hardware such as

00:31:24.106 --> 00:31:27.286 A:middle
a camera or an audio device, and

00:31:28.096 --> 00:31:31.316 A:middle
that device only understands

00:31:31.366 --> 00:31:33.516 A:middle
some low-layer protocol like a

00:31:33.516 --> 00:31:35.086 A:middle
custom link-layer protocol or a

00:31:35.086 --> 00:31:36.416 A:middle
custom IP protocol.

00:31:37.696 --> 00:31:39.746 A:middle
Another example of an app that

00:31:39.746 --> 00:31:42.106 A:middle
uses a custom IP protocol, for

00:31:42.106 --> 00:31:44.166 A:middle
example, is an app that needs to

00:31:44.166 --> 00:31:45.666 A:middle
communicate with other machines

00:31:45.986 --> 00:31:48.016 A:middle
on a local network using some

00:31:48.366 --> 00:31:49.966 A:middle
highly-optimized protocol.

00:31:52.996 --> 00:31:55.466 A:middle
So I'm pleased to announce that

00:31:55.876 --> 00:31:57.116 A:middle
in macOS Catalina we've

00:31:57.116 --> 00:31:58.616 A:middle
introduced some new APIs that

00:31:58.616 --> 00:32:00.496 A:middle
allow you to communicate over

00:31:58.616 --> 00:32:00.496 A:middle
allow you to communicate over

00:32:00.496 --> 00:32:02.206 A:middle
the network using custom

00:32:02.206 --> 00:32:03.806 A:middle
low-layer protocols without the

00:32:03.806 --> 00:32:05.796 A:middle
use of a Kernel Extension.

00:32:07.756 --> 00:32:10.496 A:middle
First, let's look at the API for

00:32:10.496 --> 00:32:11.866 A:middle
Custom IP Protocols.

00:32:12.516 --> 00:32:15.826 A:middle
This is a new API in a Network

00:32:15.826 --> 00:32:16.286 A:middle
Framework.

00:32:17.836 --> 00:32:20.316 A:middle
The way this works is in your

00:32:20.316 --> 00:32:23.316 A:middle
app you create a new kind of

00:32:23.376 --> 00:32:26.046 A:middle
NWParameters object specifying

00:32:26.046 --> 00:32:28.176 A:middle
the identifier number for your

00:32:28.176 --> 00:32:29.466 A:middle
custom IP protocol.

00:32:30.146 --> 00:32:31.736 A:middle
You then use that NWParameters

00:32:31.736 --> 00:32:33.016 A:middle
object to create an

00:32:33.016 --> 00:32:33.986 A:middle
NWConnection.

00:32:34.836 --> 00:32:35.896 A:middle
And you then use that

00:32:35.896 --> 00:32:38.836 A:middle
NWConnection just as you would a

00:32:38.836 --> 00:32:41.286 A:middle
TCP or UDP NWConnection to

00:32:41.286 --> 00:32:42.426 A:middle
communicate over the network

00:32:42.426 --> 00:32:44.536 A:middle
using your Custom IP Protocol.

00:32:46.486 --> 00:32:47.986 A:middle
For a lot more details about

00:32:47.986 --> 00:32:49.716 A:middle
NWConnection, please see last

00:32:49.716 --> 00:32:50.816 A:middle
year's talk, "Introducing

00:32:50.816 --> 00:32:51.696 A:middle
Network Framework."

00:32:52.356 --> 00:32:56.226 A:middle
Now let's look at a brief code

00:32:56.226 --> 00:32:58.626 A:middle
sample showing how to use this

00:32:58.626 --> 00:33:00.066 A:middle
Custom IP Protocol API.

00:32:58.626 --> 00:33:00.066 A:middle
Custom IP Protocol API.

00:33:01.626 --> 00:33:02.866 A:middle
So, first what I'm doing here is

00:33:02.866 --> 00:33:05.206 A:middle
creating an NWParameters object

00:33:05.206 --> 00:33:08.416 A:middle
using this new constructor that

00:33:08.486 --> 00:33:10.306 A:middle
takes in the identifier number

00:33:10.816 --> 00:33:12.186 A:middle
for a Custom IP Protocol.

00:33:12.186 --> 00:33:14.796 A:middle
Now, it's important to note here

00:33:14.796 --> 00:33:16.306 A:middle
that you must pass the

00:33:16.306 --> 00:33:17.646 A:middle
identifier number for a Custom

00:33:17.646 --> 00:33:18.376 A:middle
Protocol here.

00:33:18.376 --> 00:33:20.296 A:middle
You can't pass the number of a

00:33:20.296 --> 00:33:21.746 A:middle
protocol that the system is

00:33:21.746 --> 00:33:24.166 A:middle
already handling such as TCP,

00:33:24.166 --> 00:33:25.926 A:middle
UDP, or ICMP.

00:33:30.066 --> 00:33:32.146 A:middle
Next, I create the destination

00:33:32.146 --> 00:33:33.196 A:middle
that I want to communicate with

00:33:34.356 --> 00:33:36.036 A:middle
and I create the NWConnection,

00:33:36.036 --> 00:33:37.676 A:middle
passing in the destination and

00:33:38.066 --> 00:33:38.886 A:middle
my parameters.

00:33:40.836 --> 00:33:42.776 A:middle
So, from there I use the

00:33:42.776 --> 00:33:44.446 A:middle
connection just as I would any

00:33:44.446 --> 00:33:46.846 A:middle
other NWConnection, start the

00:33:46.846 --> 00:33:47.886 A:middle
connection, and I can start

00:33:47.886 --> 00:33:50.676 A:middle
sending/receiving packets using

00:33:50.676 --> 00:33:51.966 A:middle
my Custom IP Protocol.

00:33:56.076 --> 00:33:57.896 A:middle
Next, let's look at the Custom

00:33:57.896 --> 00:33:59.556 A:middle
Link Layer Protocol APIs.

00:34:00.316 --> 00:34:01.336 A:middle
These have also been added to

00:34:01.336 --> 00:34:02.136 A:middle
Network Framework.

00:34:03.896 --> 00:34:05.506 A:middle
The way this works is in your

00:34:05.506 --> 00:34:08.176 A:middle
app you create a

00:34:08.176 --> 00:34:10.235 A:middle
NWEthernetChannelObject

00:34:10.916 --> 00:34:13.396 A:middle
specifying the -- your custom

00:34:13.396 --> 00:34:14.295 A:middle
ether type that you're going to

00:34:14.295 --> 00:34:14.926 A:middle
be using.

00:34:15.906 --> 00:34:17.416 A:middle
You then use your Channel Object

00:34:17.505 --> 00:34:19.016 A:middle
to communicate over an Ethernet

00:34:19.016 --> 00:34:20.706 A:middle
Interface using your custom

00:34:20.706 --> 00:34:21.906 A:middle
ether type.

00:34:22.755 --> 00:34:24.206 A:middle
Let's look at some code to see

00:34:24.206 --> 00:34:24.906 A:middle
how this works.

00:34:25.525 --> 00:34:29.045 A:middle
So first I get a reference to

00:34:29.216 --> 00:34:30.786 A:middle
the current wired Ethernet

00:34:30.786 --> 00:34:31.396 A:middle
Interface.

00:34:32.576 --> 00:34:33.985 A:middle
Then I create my

00:34:33.985 --> 00:34:36.036 A:middle
NWEthernetChannel object passing

00:34:36.036 --> 00:34:38.516 A:middle
in the Interface and my custom

00:34:38.516 --> 00:34:38.946 A:middle
etherType.

00:34:40.386 --> 00:34:41.636 A:middle
Now, just like with the custom

00:34:41.636 --> 00:34:45.146 A:middle
IP Protocol API, you must pass a

00:34:45.146 --> 00:34:46.436 A:middle
custom etherType here.

00:34:46.886 --> 00:34:48.406 A:middle
You can't pass an etherType that

00:34:48.406 --> 00:34:49.585 A:middle
the system is already handling

00:34:49.585 --> 00:34:51.416 A:middle
such as IP or IPV6.

00:34:54.376 --> 00:34:56.926 A:middle
After creating the channel, I

00:34:56.926 --> 00:34:59.676 A:middle
set some callback blocks on the

00:34:59.676 --> 00:35:00.046 A:middle
channel.

00:34:59.676 --> 00:35:00.046 A:middle
channel.

00:35:00.506 --> 00:35:03.136 A:middle
The stateUpdateHandler block

00:35:04.026 --> 00:35:06.926 A:middle
gets called as the state of the

00:35:06.926 --> 00:35:07.796 A:middle
channel changes.

00:35:08.476 --> 00:35:09.726 A:middle
When the channel becomes ready,

00:35:10.066 --> 00:35:11.556 A:middle
I can go ahead and start sending

00:35:11.556 --> 00:35:13.286 A:middle
and receiving packets that use

00:35:13.286 --> 00:35:14.926 A:middle
my custom etherType.

00:35:15.836 --> 00:35:17.346 A:middle
The receiveHandler block gets

00:35:17.346 --> 00:35:19.166 A:middle
called when a new packet that

00:35:19.166 --> 00:35:21.136 A:middle
uses my custom etherType is

00:35:21.136 --> 00:35:22.106 A:middle
received from the network.

00:35:23.596 --> 00:35:25.376 A:middle
So after my channel is all set

00:35:25.376 --> 00:35:27.636 A:middle
up, I go ahead and start it so I

00:35:27.636 --> 00:35:29.676 A:middle
can start communicating using my

00:35:29.676 --> 00:35:30.716 A:middle
custom etherType.

00:35:31.316 --> 00:35:31.446 A:middle
Great.

00:35:34.816 --> 00:35:37.266 A:middle
So that was a brief overview of

00:35:37.266 --> 00:35:38.396 A:middle
the new APIs we've added that

00:35:38.396 --> 00:35:40.286 A:middle
allow you to communicate over

00:35:40.286 --> 00:35:41.456 A:middle
the network using custom

00:35:41.456 --> 00:35:43.346 A:middle
low-layer protocols without the

00:35:43.346 --> 00:35:44.716 A:middle
use of a Kernel Extension.

00:35:46.686 --> 00:35:47.076 A:middle
Alright.

00:35:47.076 --> 00:35:48.346 A:middle
So we've covered a lot of ground

00:35:48.346 --> 00:35:49.746 A:middle
here today, a lot of great new

00:35:49.746 --> 00:35:52.276 A:middle
APIs that we've added in macOS

00:35:52.276 --> 00:35:54.086 A:middle
Catalina that allow you to

00:35:54.146 --> 00:35:55.436 A:middle
create apps in all these

00:35:55.436 --> 00:35:58.416 A:middle
categories without the use of

00:35:58.416 --> 00:35:59.666 A:middle
Network Kernel Extensions.

00:36:01.166 --> 00:36:02.246 A:middle
So now I want to talk briefly

00:36:02.246 --> 00:36:03.826 A:middle
about the future of Network

00:36:03.826 --> 00:36:04.826 A:middle
Kernel Extensions.

00:36:06.336 --> 00:36:07.696 A:middle
So Network Kernel Extensions

00:36:07.966 --> 00:36:09.796 A:middle
have several problems.

00:36:11.066 --> 00:36:13.196 A:middle
First, they're hard to develop,

00:36:13.566 --> 00:36:16.936 A:middle
so I mentioned before if you're

00:36:16.936 --> 00:36:18.206 A:middle
testing out new functionality,

00:36:18.206 --> 00:36:19.276 A:middle
you probably have to reboot a

00:36:19.276 --> 00:36:19.936 A:middle
lot.

00:36:19.936 --> 00:36:22.196 A:middle
And also, in the case of Network

00:36:22.196 --> 00:36:24.196 A:middle
Kernel Extensions you frequently

00:36:24.196 --> 00:36:25.326 A:middle
have to work with some very

00:36:25.326 --> 00:36:27.286 A:middle
low-level concepts like doing

00:36:27.286 --> 00:36:29.626 A:middle
manual M-Buff Chain Manipulation

00:36:30.196 --> 00:36:31.256 A:middle
which is very tricky code.

00:36:31.256 --> 00:36:32.776 A:middle
It's very easy to get it wrong.

00:36:34.606 --> 00:36:37.446 A:middle
Also Kernel Extensions are hard

00:36:37.446 --> 00:36:37.916 A:middle
to debug.

00:36:37.916 --> 00:36:39.026 A:middle
You have to have two separate

00:36:39.026 --> 00:36:41.246 A:middle
machines and, as I mentioned

00:36:41.246 --> 00:36:42.906 A:middle
before, single stepping through

00:36:42.906 --> 00:36:44.966 A:middle
your code can be very tricky if

00:36:44.966 --> 00:36:47.346 A:middle
it works at all.

00:36:48.186 --> 00:36:51.466 A:middle
Also Kernel Extensions can -- a

00:36:51.466 --> 00:36:52.876 A:middle
stability problem in a Kernel

00:36:52.876 --> 00:36:53.886 A:middle
Extension can be really

00:36:53.886 --> 00:36:55.246 A:middle
catastrophic for the system.

00:36:56.066 --> 00:36:57.466 A:middle
So if your Kernel Extension

00:36:57.466 --> 00:36:59.516 A:middle
crashes, it just doesn't bring

00:36:59.516 --> 00:37:00.196 A:middle
down your app.

00:36:59.516 --> 00:37:00.196 A:middle
down your app.

00:37:00.756 --> 00:37:02.886 A:middle
The entire system reboots, which

00:37:02.886 --> 00:37:04.186 A:middle
is extremely disruptive to the

00:37:04.186 --> 00:37:06.316 A:middle
user and can lead to serious

00:37:06.316 --> 00:37:06.976 A:middle
data loss.

00:37:07.516 --> 00:37:11.016 A:middle
So because of all these problems

00:37:11.216 --> 00:37:13.396 A:middle
with Kernel Extensions and

00:37:13.396 --> 00:37:14.476 A:middle
because we've reached this major

00:37:14.476 --> 00:37:16.226 A:middle
milestone on macOS where now we

00:37:16.226 --> 00:37:19.836 A:middle
have all these APIs that you can

00:37:19.836 --> 00:37:22.006 A:middle
use to create apps without the

00:37:22.006 --> 00:37:23.126 A:middle
use of Network Kernel

00:37:23.126 --> 00:37:25.946 A:middle
Extensions; in macOS Catalina,

00:37:25.946 --> 00:37:27.436 A:middle
we are officially deprecating

00:37:27.836 --> 00:37:29.236 A:middle
Network Kernel Extensions.

00:37:31.276 --> 00:37:33.796 A:middle
Now, your existing Network

00:37:33.796 --> 00:37:35.326 A:middle
Kernel Extensions should

00:37:35.326 --> 00:37:37.636 A:middle
continue to work just fine in

00:37:37.636 --> 00:37:38.556 A:middle
macOS Catalina.

00:37:39.556 --> 00:37:41.416 A:middle
However, we strongly urge you to

00:37:41.416 --> 00:37:43.326 A:middle
please check out all these great

00:37:43.326 --> 00:37:46.106 A:middle
new APIs that we've added and

00:37:46.106 --> 00:37:47.786 A:middle
start adopting them in your

00:37:47.786 --> 00:37:49.826 A:middle
apps, replacing your use of

00:37:49.826 --> 00:37:51.176 A:middle
Network Kernel Extensions.

00:37:51.796 --> 00:37:53.346 A:middle
It's important that you do this

00:37:53.346 --> 00:37:55.356 A:middle
as soon as you can because

00:37:56.016 --> 00:37:58.236 A:middle
before too much longer, we will

00:37:58.236 --> 00:38:00.036 A:middle
remove support for Network

00:37:58.236 --> 00:38:00.036 A:middle
remove support for Network

00:38:00.036 --> 00:38:01.596 A:middle
Kernel Extensions entirely for

00:38:01.596 --> 00:38:01.976 A:middle
macOS.

00:38:07.046 --> 00:38:07.176 A:middle
Okay.

00:38:07.346 --> 00:38:10.196 A:middle
So today we talked about a bunch

00:38:10.196 --> 00:38:13.006 A:middle
of great new powerful APIs that

00:38:13.006 --> 00:38:15.156 A:middle
we have added in macOS Catalina

00:38:15.436 --> 00:38:17.146 A:middle
that allow you to create adapts

00:38:17.636 --> 00:38:19.136 A:middle
that filter network content,

00:38:19.706 --> 00:38:22.026 A:middle
proxy network content, tunnel

00:38:22.026 --> 00:38:24.226 A:middle
network content, connect virtual

00:38:24.226 --> 00:38:26.596 A:middle
machines to networks, and

00:38:26.596 --> 00:38:27.736 A:middle
communicate over the network

00:38:27.736 --> 00:38:29.256 A:middle
using custom low-layer

00:38:29.256 --> 00:38:31.386 A:middle
protocols, all without the use

00:38:31.496 --> 00:38:33.026 A:middle
of Network Kernel Extensions.

00:38:34.656 --> 00:38:37.806 A:middle
This is great news because we

00:38:37.806 --> 00:38:39.506 A:middle
strongly urge you to please

00:38:39.506 --> 00:38:41.726 A:middle
adopt these new APIs in your

00:38:41.726 --> 00:38:43.646 A:middle
Apps because Network Kernel

00:38:43.646 --> 00:38:45.306 A:middle
Extensions are now deprecated

00:38:45.946 --> 00:38:47.006 A:middle
and support for them will be

00:38:47.006 --> 00:38:49.006 A:middle
removed in a future release.

00:38:51.096 --> 00:38:53.056 A:middle
For more information, please

00:38:53.386 --> 00:38:55.056 A:middle
check out the webpage for this

00:38:55.056 --> 00:38:55.526 A:middle
session.

00:38:55.526 --> 00:38:56.776 A:middle
There you can find a link to the

00:38:56.776 --> 00:38:58.786 A:middle
sample simple tunnel code that I

00:38:58.786 --> 00:39:00.416 A:middle
demoed here today.

00:38:58.786 --> 00:39:00.416 A:middle
demoed here today.

00:39:00.976 --> 00:39:03.056 A:middle
We also have a Networking Lab

00:39:03.056 --> 00:39:04.026 A:middle
that's actually going on right

00:39:04.026 --> 00:39:04.386 A:middle
now.

00:39:04.916 --> 00:39:06.616 A:middle
And so we'd love to see you

00:39:06.616 --> 00:39:08.296 A:middle
there to answer any questions

00:39:08.296 --> 00:39:08.816 A:middle
you may have.

00:39:09.136 --> 00:39:10.296 A:middle
Thank you so much for coming.

00:39:10.296 --> 00:39:10.976 A:middle
Enjoy the rest of your day.

00:39:11.516 --> 00:39:18.840 A:middle
[ Applause ]
