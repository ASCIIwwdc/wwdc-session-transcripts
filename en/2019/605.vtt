WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.016 --> 00:00:10.236 A:middle
[ Applause ]

00:00:10.236 --> 00:00:13.766 A:middle
&gt;&gt; Hello everyone.

00:00:13.766 --> 00:00:14.886 A:middle
I'm Ross. I'm an engineer on the

00:00:14.886 --> 00:00:16.666 A:middle
RealityKit team at Apple and

00:00:16.666 --> 00:00:18.106 A:middle
welcome to Building Apps with

00:00:18.106 --> 00:00:18.686 A:middle
RealityKit.

00:00:19.766 --> 00:00:22.316 A:middle
So this session is intended as a

00:00:22.316 --> 00:00:23.076 A:middle
follow up.

00:00:23.076 --> 00:00:24.786 A:middle
So you might want to check out

00:00:24.786 --> 00:00:26.506 A:middle
Intro to RealityKit and Reality

00:00:26.506 --> 00:00:27.206 A:middle
Composer Session.

00:00:27.686 --> 00:00:28.596 A:middle
Today we're going into the

00:00:28.596 --> 00:00:30.216 A:middle
applied usage of RealityKit.

00:00:30.216 --> 00:00:31.136 A:middle
And we'll walk you through

00:00:31.136 --> 00:00:32.226 A:middle
building an augmented reality

00:00:32.226 --> 00:00:33.686 A:middle
app and how you can leverage

00:00:33.686 --> 00:00:34.646 A:middle
many of the frameworks key

00:00:34.646 --> 00:00:35.156 A:middle
features.

00:00:35.706 --> 00:00:36.856 A:middle
Before we dive in let's do a

00:00:36.856 --> 00:00:38.186 A:middle
quick recap of what RealityKit

00:00:38.186 --> 00:00:38.386 A:middle
is.

00:00:39.056 --> 00:00:40.916 A:middle
So RealityKit is Apple's new

00:00:40.916 --> 00:00:43.986 A:middle
framework for building AR Apps.

00:00:44.076 --> 00:00:46.296 A:middle
Trying to make it as simple and

00:00:46.296 --> 00:00:47.596 A:middle
intuitive as possible for any

00:00:47.596 --> 00:00:48.066 A:middle
developer.

00:00:48.726 --> 00:00:49.566 A:middle
It's been built from the ground

00:00:49.566 --> 00:00:50.636 A:middle
up to work with AR.

00:00:50.636 --> 00:00:52.096 A:middle
And it allows you to seamlessly

00:00:52.096 --> 00:00:53.466 A:middle
blend rendered content with a

00:00:53.466 --> 00:00:54.436 A:middle
real world environment.

00:00:54.436 --> 00:00:57.126 A:middle
Its Swift API is simple yet

00:00:57.126 --> 00:00:58.536 A:middle
powerful and lets you do a lot

00:00:58.536 --> 00:00:59.716 A:middle
with only a few lines of code.

00:01:00.586 --> 00:01:01.696 A:middle
All right, let's build an app.

00:01:02.956 --> 00:01:03.826 A:middle
The app we're going to be

00:01:03.826 --> 00:01:05.066 A:middle
building today is called "Memory

00:01:05.066 --> 00:01:05.556 A:middle
Cards."

00:01:05.816 --> 00:01:06.766 A:middle
And as the name cleverly

00:01:06.766 --> 00:01:08.256 A:middle
implies, it's a card matching

00:01:08.256 --> 00:01:08.476 A:middle
game.

00:01:09.736 --> 00:01:10.806 A:middle
To play you tap on a card to

00:01:10.806 --> 00:01:12.086 A:middle
select it and its image is

00:01:12.086 --> 00:01:12.476 A:middle
revealed.

00:01:12.986 --> 00:01:14.946 A:middle
Select another card to reveal it

00:01:14.946 --> 00:01:16.276 A:middle
and if the pair is a match the

00:01:16.276 --> 00:01:17.006 A:middle
cards are removed.

00:01:17.726 --> 00:01:19.106 A:middle
If they don't match both cards

00:01:19.106 --> 00:01:20.506 A:middle
are hidden and you're free to

00:01:20.506 --> 00:01:21.226 A:middle
select another pair.

00:01:21.926 --> 00:01:23.636 A:middle
This simple game will allow us

00:01:23.636 --> 00:01:24.726 A:middle
to highlight and discuss a lot of

00:01:24.726 --> 00:01:26.016 A:middle
useful RealityKit features.

00:01:26.016 --> 00:01:28.186 A:middle
So we're going to build Memory

00:01:28.186 --> 00:01:29.306 A:middle
Cards in four stages.

00:01:30.156 --> 00:01:30.876 A:middle
First we're going to put

00:01:30.876 --> 00:01:33.226 A:middle
together a prototype that will

00:01:33.226 --> 00:01:34.796 A:middle
place our content in AR and

00:01:34.796 --> 00:01:35.556 A:middle
allow for some simple

00:01:35.556 --> 00:01:35.976 A:middle
interaction.

00:01:37.596 --> 00:01:38.896 A:middle
Next we'll add some polish with

00:01:38.896 --> 00:01:40.306 A:middle
some fancy art assets, improve

00:01:40.306 --> 00:01:41.476 A:middle
performance and AR rendering

00:01:41.476 --> 00:01:41.916 A:middle
tricks.

00:01:43.176 --> 00:01:44.326 A:middle
Then we'll leverage the entity

00:01:44.326 --> 00:01:46.406 A:middle
component system to track custom

00:01:46.406 --> 00:01:47.186 A:middle
state information.

00:01:48.596 --> 00:01:49.706 A:middle
And finally we'll show you how

00:01:49.706 --> 00:01:50.706 A:middle
to use RealityKit's built in

00:01:50.706 --> 00:01:51.736 A:middle
network support by adding

00:01:51.736 --> 00:01:53.576 A:middle
multiplayer to our game.

00:01:55.396 --> 00:01:55.976 A:middle
All right.

00:01:56.166 --> 00:01:56.966 A:middle
Let's get started with our

00:01:56.966 --> 00:01:57.226 A:middle
prototype.

00:01:57.886 --> 00:01:59.856 A:middle
So as mentioned in the intro

00:01:59.856 --> 00:02:01.346 A:middle
session there are four objects

00:01:59.856 --> 00:02:01.346 A:middle
session there are four objects

00:02:01.346 --> 00:02:02.906 A:middle
that you'll need to use in every

00:02:02.996 --> 00:02:07.446 A:middle
RealityKit app -- an ARView, the

00:02:07.446 --> 00:02:11.636 A:middle
Scene, Anchors, and Entities.

00:02:12.206 --> 00:02:15.056 A:middle
ARView is your window into the

00:02:15.056 --> 00:02:15.736 A:middle
world of AR.

00:02:16.146 --> 00:02:17.346 A:middle
And in your entry point for

00:02:17.346 --> 00:02:17.946 A:middle
RealityKit.

00:02:18.606 --> 00:02:19.896 A:middle
It's a view and it goes into

00:02:19.896 --> 00:02:21.136 A:middle
your apps View hierarchy.

00:02:21.696 --> 00:02:24.106 A:middle
The scene holds up with a

00:02:24.106 --> 00:02:25.086 A:middle
virtual content that makes up

00:02:25.086 --> 00:02:26.816 A:middle
your app and is owned by ARView.

00:02:29.506 --> 00:02:31.146 A:middle
In RealityKit, Anchors describe

00:02:31.146 --> 00:02:32.486 A:middle
how objects relate to the real

00:02:32.486 --> 00:02:32.846 A:middle
world.

00:02:33.156 --> 00:02:34.116 A:middle
And you'll need them to be able

00:02:34.316 --> 00:02:35.716 A:middle
to place your virtual content.

00:02:36.326 --> 00:02:37.766 A:middle
To place an anchor you add it to

00:02:37.766 --> 00:02:39.076 A:middle
the scene and when the

00:02:39.076 --> 00:02:40.406 A:middle
appropriate target is found the

00:02:40.406 --> 00:02:41.986 A:middle
anchor is automatically placed

00:02:42.056 --> 00:02:42.546 A:middle
in the world.

00:02:43.436 --> 00:02:44.636 A:middle
For Memory Cards we'll use an

00:02:44.636 --> 00:02:45.656 A:middle
anchor to place our game board

00:02:45.656 --> 00:02:46.886 A:middle
on a horizontal surface.

00:02:47.836 --> 00:02:49.606 A:middle
And entities are used to

00:02:49.606 --> 00:02:50.916 A:middle
represent your virtual content

00:02:51.136 --> 00:02:52.096 A:middle
and are the building blocks that

00:02:52.096 --> 00:02:52.676 A:middle
make up your scene.

00:02:53.196 --> 00:02:54.876 A:middle
In Memory Cards each of the

00:02:54.876 --> 00:02:56.196 A:middle
cards will be represented by an

00:02:56.196 --> 00:02:56.586 A:middle
entity.

00:02:57.186 --> 00:02:58.716 A:middle
Since your game has 16 cards

00:02:58.716 --> 00:03:00.206 A:middle
we'll need 16 entities.

00:02:58.716 --> 00:03:00.206 A:middle
we'll need 16 entities.

00:03:01.656 --> 00:03:02.996 A:middle
So now that we've covered the

00:03:02.996 --> 00:03:03.926 A:middle
important elements that we'll

00:03:03.926 --> 00:03:05.656 A:middle
need in our app let's talk about

00:03:05.656 --> 00:03:07.216 A:middle
how we'll create our anchor so

00:03:07.216 --> 00:03:08.846 A:middle
we can place our virtual game

00:03:08.846 --> 00:03:11.126 A:middle
board in the real world.

00:03:12.216 --> 00:03:13.266 A:middle
RealityKit anchoring is built on

00:03:13.266 --> 00:03:14.466 A:middle
top of and integrated with

00:03:14.496 --> 00:03:14.976 A:middle
ARkit.

00:03:14.976 --> 00:03:16.696 A:middle
But then you leverage it's full

00:03:16.696 --> 00:03:17.246 A:middle
feature set.

00:03:18.516 --> 00:03:20.366 A:middle
To define Anchor content you

00:03:20.366 --> 00:03:21.446 A:middle
create an anchor entity.

00:03:22.146 --> 00:03:23.416 A:middle
To clear the type of anchoring

00:03:23.416 --> 00:03:25.616 A:middle
you'd like to use and then add

00:03:25.616 --> 00:03:27.076 A:middle
the anchor entity to your scene.

00:03:27.556 --> 00:03:30.236 A:middle
Once the appropriate target is

00:03:30.236 --> 00:03:32.256 A:middle
detected by ARkit, the anchor

00:03:32.256 --> 00:03:33.426 A:middle
entity will automatically track

00:03:33.426 --> 00:03:34.986 A:middle
it and making your virtual

00:03:34.986 --> 00:03:35.956 A:middle
content feel like it's been

00:03:35.956 --> 00:03:37.266 A:middle
placed in the real world as your

00:03:37.266 --> 00:03:38.586 A:middle
device moves.

00:03:40.266 --> 00:03:41.276 A:middle
Also as mentioned in the intro

00:03:41.276 --> 00:03:43.016 A:middle
session, RealityKit supports all

00:03:43.016 --> 00:03:44.026 A:middle
of the anchor types available

00:03:44.026 --> 00:03:45.206 A:middle
with ARkit, allowing me to

00:03:45.206 --> 00:03:46.516 A:middle
anchor things like planes,

00:03:46.856 --> 00:03:49.696 A:middle
faces, images, objects, and new

00:03:49.696 --> 00:03:51.836 A:middle
for ARkit 3, body anchors.

00:03:53.376 --> 00:03:54.816 A:middle
For Memory Cards we just need a

00:03:54.816 --> 00:03:56.276 A:middle
single anchor to place our game

00:03:56.276 --> 00:03:56.516 A:middle
board.

00:03:57.686 --> 00:03:58.706 A:middle
We like to place it on a

00:03:58.706 --> 00:04:00.006 A:middle
horizontal surface with enough

00:03:58.706 --> 00:04:00.006 A:middle
horizontal surface with enough

00:04:00.006 --> 00:04:01.236 A:middle
space to fit all the cards,

00:04:01.236 --> 00:04:03.286 A:middle
about 20 centimeters squared.

00:04:04.346 --> 00:04:05.416 A:middle
And that anchor will represent

00:04:05.416 --> 00:04:07.176 A:middle
our game board in the world and

00:04:07.176 --> 00:04:08.506 A:middle
we'll place our content around

00:04:08.506 --> 00:04:08.626 A:middle
it.

00:04:09.416 --> 00:04:10.186 A:middle
Let's write some code to do

00:04:10.186 --> 00:04:10.526 A:middle
this.

00:04:11.706 --> 00:04:12.386 A:middle
So here we have the view

00:04:12.386 --> 00:04:13.586 A:middle
controller for our Memory Cards

00:04:13.586 --> 00:04:14.076 A:middle
prototype.

00:04:14.586 --> 00:04:15.996 A:middle
We have an ARView in place in

00:04:15.996 --> 00:04:17.426 A:middle
the View hierarchy and we're

00:04:17.426 --> 00:04:18.706 A:middle
ready to find our anchor and

00:04:18.706 --> 00:04:19.946 A:middle
create out virtual content,

00:04:20.636 --> 00:04:22.156 A:middle
which we'll be doing in the

00:04:22.156 --> 00:04:23.606 A:middle
viewDidLoad method.

00:04:25.366 --> 00:04:26.946 A:middle
To define our anchor we create

00:04:26.946 --> 00:04:28.856 A:middle
an anchor entity and using this

00:04:28.856 --> 00:04:30.266 A:middle
convenience initializer we can

00:04:30.266 --> 00:04:31.856 A:middle
specify the type of plane we'd

00:04:31.856 --> 00:04:32.526 A:middle
like it to anchor to.

00:04:32.526 --> 00:04:33.946 A:middle
In this case the horizontal

00:04:33.946 --> 00:04:34.216 A:middle
plane.

00:04:35.336 --> 00:04:36.546 A:middle
And we can optionally pass in

00:04:36.546 --> 00:04:38.476 A:middle
the minimum area we require, 20

00:04:38.476 --> 00:04:39.326 A:middle
centimeters squared.

00:04:40.246 --> 00:04:41.496 A:middle
RealityKit's units are in meters

00:04:41.786 --> 00:04:44.166 A:middle
so I get 20 centimeters by 20

00:04:44.166 --> 00:04:46.316 A:middle
centimeters, we pass in 0.2 by

00:04:46.316 --> 00:04:47.626 A:middle
0.2.

00:04:48.086 --> 00:04:48.936 A:middle
Then we just add our anchor to

00:04:48.936 --> 00:04:50.316 A:middle
the scene and as soon as

00:04:50.316 --> 00:04:51.566 A:middle
RealityKit finds a horizontal

00:04:51.566 --> 00:04:52.786 A:middle
plane of at least 20 centimeters

00:04:52.786 --> 00:04:54.656 A:middle
squared, any virtual content we

00:04:54.656 --> 00:04:55.756 A:middle
attach to this anchor will

00:04:55.756 --> 00:04:56.306 A:middle
appear in AR.

00:04:56.946 --> 00:04:59.356 A:middle
Now that we have our anchor set

00:04:59.356 --> 00:05:00.236 A:middle
up let's add some virtual

00:04:59.356 --> 00:05:00.236 A:middle
up let's add some virtual

00:05:00.236 --> 00:05:00.686 A:middle
content.

00:05:01.346 --> 00:05:02.246 A:middle
First we need to load in the

00:05:02.246 --> 00:05:02.576 A:middle
model.

00:05:03.326 --> 00:05:04.586 A:middle
RealityKit natively supports

00:05:04.586 --> 00:05:06.386 A:middle
assets in USDZ in the new

00:05:06.516 --> 00:05:07.696 A:middle
Reality File formats.

00:05:08.766 --> 00:05:09.326 A:middle
Loading can be done

00:05:09.326 --> 00:05:10.866 A:middle
synchronously or asynchronously.

00:05:11.036 --> 00:05:11.856 A:middle
For now we'll start with

00:05:11.856 --> 00:05:13.176 A:middle
synchronous loading but we'll

00:05:13.176 --> 00:05:16.456 A:middle
touch more on this later.

00:05:16.456 --> 00:05:18.236 A:middle
When you load a USDZ or reality

00:05:18.236 --> 00:05:19.586 A:middle
file asset, RealityKit

00:05:19.586 --> 00:05:20.956 A:middle
automatically imports its entity

00:05:20.956 --> 00:05:23.126 A:middle
hierarchy, and meshes used by

00:05:23.126 --> 00:05:25.806 A:middle
the asset, its materials, and

00:05:25.806 --> 00:05:27.536 A:middle
any animations it may have as

00:05:27.536 --> 00:05:27.726 A:middle
well.

00:05:29.886 --> 00:05:30.796 A:middle
Let's load in our basic card

00:05:30.796 --> 00:05:31.396 A:middle
assets.

00:05:31.966 --> 00:05:34.396 A:middle
To load a model you just need to

00:05:34.396 --> 00:05:36.026 A:middle
go entities load model method

00:05:36.216 --> 00:05:37.196 A:middle
with the name of the asset.

00:05:37.866 --> 00:05:38.816 A:middle
There's not need to specify the

00:05:38.816 --> 00:05:40.466 A:middle
file extension if the asset is

00:05:40.466 --> 00:05:41.146 A:middle
in your app bundle.

00:05:42.426 --> 00:05:43.556 A:middle
If RealityKit is able to load

00:05:43.556 --> 00:05:44.766 A:middle
the asset, it will automatically

00:05:44.766 --> 00:05:46.066 A:middle
create a ready to use entity for

00:05:46.066 --> 00:05:47.326 A:middle
you to use however you want.

00:05:47.986 --> 00:05:49.146 A:middle
Here we're loading on the eight

00:05:49.146 --> 00:05:50.666 A:middle
base card models and storing

00:05:50.666 --> 00:05:51.316 A:middle
them in an array.

00:05:51.926 --> 00:05:54.736 A:middle
So Memory Card has 16 total

00:05:54.736 --> 00:05:55.376 A:middle
cards.

00:05:56.366 --> 00:05:57.876 A:middle
There are eight card types, each

00:05:57.876 --> 00:05:58.586 A:middle
with a different image.

00:05:58.916 --> 00:06:00.666 A:middle
And then there are two instances

00:05:58.916 --> 00:06:00.666 A:middle
And then there are two instances

00:06:00.666 --> 00:06:02.476 A:middle
of each type to create our eight

00:06:02.606 --> 00:06:03.536 A:middle
matching pairs.

00:06:04.436 --> 00:06:05.496 A:middle
So we've got our eight type

00:06:05.526 --> 00:06:06.796 A:middle
models loaded, but how do we get

00:06:06.796 --> 00:06:07.346 A:middle
the other eight?

00:06:08.496 --> 00:06:10.466 A:middle
Now we could call entities load

00:06:10.466 --> 00:06:12.196 A:middle
model method again, but any

00:06:12.196 --> 00:06:13.476 A:middle
setup we perform on our cards

00:06:13.476 --> 00:06:14.846 A:middle
will need to be done for each of

00:06:14.846 --> 00:06:15.306 A:middle
these as well.

00:06:16.746 --> 00:06:17.826 A:middle
RealityKit provides and easier

00:06:17.826 --> 00:06:19.616 A:middle
solution with entity cloning.

00:06:20.206 --> 00:06:22.646 A:middle
To create a clone you call

00:06:22.646 --> 00:06:23.616 A:middle
entities clone method.

00:06:24.966 --> 00:06:26.146 A:middle
And cloning creates an identical

00:06:26.146 --> 00:06:27.646 A:middle
copy of the original entity.

00:06:28.996 --> 00:06:29.976 A:middle
It references all the same

00:06:29.976 --> 00:06:32.576 A:middle
assets used by the original, and

00:06:32.576 --> 00:06:33.486 A:middle
cloning can also be done

00:06:33.626 --> 00:06:35.236 A:middle
recursively, which will clone

00:06:35.236 --> 00:06:36.176 A:middle
all of entities children as

00:06:36.176 --> 00:06:37.996 A:middle
well, which really comes in

00:06:37.996 --> 00:06:39.076 A:middle
handy when you're composing

00:06:39.136 --> 00:06:40.686 A:middle
complex scenes with deep

00:06:40.686 --> 00:06:41.366 A:middle
hierarchies.

00:06:41.996 --> 00:06:44.146 A:middle
It's also important to note that

00:06:44.146 --> 00:06:45.876 A:middle
clone entities are copies of the

00:06:45.876 --> 00:06:48.386 A:middle
originals, not instances.

00:06:48.386 --> 00:06:49.906 A:middle
So if you make a change to the

00:06:49.906 --> 00:06:51.246 A:middle
original entity, say by removing

00:06:51.246 --> 00:06:53.106 A:middle
a child, that change will not be

00:06:53.106 --> 00:06:54.226 A:middle
reflective in any of its all

00:06:54.226 --> 00:06:55.366 A:middle
ready existing clones.

00:06:56.466 --> 00:06:57.866 A:middle
Let's use cloning to create our

00:06:57.866 --> 00:06:58.506 A:middle
card pairs.

00:06:59.086 --> 00:07:01.836 A:middle
So here we're cloning the two

00:06:59.086 --> 00:07:01.836 A:middle
So here we're cloning the two

00:07:01.836 --> 00:07:03.236 A:middle
instances of each card type we

00:07:03.236 --> 00:07:04.676 A:middle
need and storing them in a

00:07:04.676 --> 00:07:06.266 A:middle
separate array, which we'll use

00:07:06.266 --> 00:07:07.096 A:middle
to build our game board.

00:07:08.406 --> 00:07:09.696 A:middle
We could use the original card

00:07:09.696 --> 00:07:10.626 A:middle
templates and then just clone

00:07:10.626 --> 00:07:12.206 A:middle
one new instance, but by keeping

00:07:12.206 --> 00:07:13.286 A:middle
the card template separate we

00:07:13.286 --> 00:07:14.456 A:middle
can easily refer back to them to

00:07:14.456 --> 00:07:15.616 A:middle
recreate the game board later

00:07:15.856 --> 00:07:16.746 A:middle
without having to load them all

00:07:16.746 --> 00:07:17.796 A:middle
again from scratch.

00:07:19.916 --> 00:07:21.426 A:middle
Now that you have all 16 cards

00:07:21.426 --> 00:07:22.806 A:middle
ready to go we need to place

00:07:22.806 --> 00:07:23.596 A:middle
them in our game board.

00:07:24.336 --> 00:07:25.396 A:middle
The anchor will be at the center

00:07:25.396 --> 00:07:26.576 A:middle
of the play area and we'll

00:07:26.576 --> 00:07:27.706 A:middle
arrange the cards in a

00:07:27.826 --> 00:07:30.266 A:middle
four-by-four grid around them.

00:07:30.706 --> 00:07:31.916 A:middle
Then all we need to do is add

00:07:31.916 --> 00:07:33.056 A:middle
each card to the anchor and

00:07:33.056 --> 00:07:34.386 A:middle
they'll be displayed in our ARC.

00:07:35.026 --> 00:07:38.036 A:middle
So to do this we calculate the

00:07:38.036 --> 00:07:39.426 A:middle
position of each card using its

00:07:39.426 --> 00:07:41.286 A:middle
index and the array and then set

00:07:41.286 --> 00:07:42.496 A:middle
it on it's position property.

00:07:43.226 --> 00:07:45.336 A:middle
This will position it relative

00:07:45.336 --> 00:07:47.066 A:middle
to its parent, the anchor, when

00:07:47.096 --> 00:07:48.156 A:middle
we add each card to it.

00:07:48.816 --> 00:07:51.376 A:middle
And that's all we need to do to

00:07:51.376 --> 00:07:52.906 A:middle
get our cards laid out and

00:07:52.956 --> 00:07:54.066 A:middle
rendering in AR.

00:07:54.736 --> 00:07:56.366 A:middle
So we got our cards placing in a

00:07:56.366 --> 00:07:58.006 A:middle
surface in AR, but we can't do

00:07:58.006 --> 00:07:59.186 A:middle
anything with them yet, so let's

00:07:59.186 --> 00:07:59.976 A:middle
add some interaction.

00:08:00.656 --> 00:08:02.946 A:middle
We want the cards to flip when

00:08:02.946 --> 00:08:03.636 A:middle
we tap on them.

00:08:03.706 --> 00:08:05.106 A:middle
But to be able to do that we

00:08:05.106 --> 00:08:06.466 A:middle
need to translate that tap on

00:08:06.466 --> 00:08:08.126 A:middle
our devices screen into the

00:08:08.126 --> 00:08:09.836 A:middle
world of AR so we can figure out

00:08:09.876 --> 00:08:11.486 A:middle
what we're actually tapping on.

00:08:12.316 --> 00:08:13.156 A:middle
And RealityKit provides a

00:08:13.156 --> 00:08:14.606 A:middle
solution to this with hit

00:08:14.606 --> 00:08:14.966 A:middle
testing.

00:08:16.386 --> 00:08:18.116 A:middle
Hit testing works by turning a

00:08:18.116 --> 00:08:19.556 A:middle
2D point that was tapped on your

00:08:19.556 --> 00:08:21.526 A:middle
device's screen into a ray in

00:08:21.526 --> 00:08:22.396 A:middle
our virtual scene.

00:08:23.236 --> 00:08:24.826 A:middle
That ray is then cast into the

00:08:24.826 --> 00:08:26.556 A:middle
scene and RealityKit finds all

00:08:26.556 --> 00:08:27.276 A:middle
of the objects that are

00:08:27.276 --> 00:08:28.786 A:middle
intersected by the ray.

00:08:29.286 --> 00:08:31.086 A:middle
Any entities that were

00:08:31.086 --> 00:08:32.385 A:middle
intersected by the ray are

00:08:32.385 --> 00:08:34.256 A:middle
returned and you now know what

00:08:34.256 --> 00:08:35.606 A:middle
objects lie under the tap.

00:08:37.145 --> 00:08:38.405 A:middle
ARView provides the methods for

00:08:38.405 --> 00:08:38.986 A:middle
hit testing.

00:08:39.285 --> 00:08:40.535 A:middle
Entity at point returns the

00:08:40.535 --> 00:08:42.106 A:middle
entity closest to the camera for

00:08:42.106 --> 00:08:44.066 A:middle
the given point and entities at

00:08:44.066 --> 00:08:45.516 A:middle
point returns all the entities

00:08:45.516 --> 00:08:47.006 A:middle
that are intersected by the ray

00:08:47.136 --> 00:08:48.146 A:middle
caster that given point.

00:08:48.616 --> 00:08:51.196 A:middle
And we can easily integrate this

00:08:51.196 --> 00:08:52.216 A:middle
into our Memory Cards app.

00:08:53.076 --> 00:08:54.746 A:middle
Here we have a method responding

00:08:54.786 --> 00:08:56.496 A:middle
to a tap gesture recognizer.

00:08:57.116 --> 00:08:58.556 A:middle
We get the tap location in the

00:08:58.556 --> 00:09:00.206 A:middle
ARView and then pass it into

00:08:58.556 --> 00:09:00.206 A:middle
ARView and then pass it into

00:09:00.206 --> 00:09:01.806 A:middle
entity at, which we're using

00:09:01.806 --> 00:09:03.456 A:middle
because we only want the entity

00:09:03.566 --> 00:09:04.626 A:middle
closest to our device.

00:09:05.596 --> 00:09:06.876 A:middle
If there's an entity under that

00:09:06.876 --> 00:09:09.636 A:middle
tap location, dis call, we'll

00:09:09.636 --> 00:09:10.896 A:middle
return it, and we could then

00:09:10.896 --> 00:09:12.616 A:middle
perform our interaction on it.

00:09:13.436 --> 00:09:14.506 A:middle
However, there's still one more

00:09:14.506 --> 00:09:15.586 A:middle
thing we need to do for hit

00:09:15.586 --> 00:09:16.966 A:middle
testing to work.

00:09:18.646 --> 00:09:20.026 A:middle
For entities to be hit testable

00:09:20.086 --> 00:09:21.086 A:middle
they need a collision type

00:09:21.086 --> 00:09:21.426 A:middle
shape.

00:09:22.926 --> 00:09:24.636 A:middle
Collision shape is simplified

00:09:24.636 --> 00:09:26.356 A:middle
geometry, typically a box.

00:09:27.086 --> 00:09:28.346 A:middle
They're easy to find and they

00:09:28.346 --> 00:09:30.236 A:middle
allow for efficient intersection

00:09:30.236 --> 00:09:31.736 A:middle
and collision calculations.

00:09:32.426 --> 00:09:34.326 A:middle
And importantly without a

00:09:34.326 --> 00:09:36.086 A:middle
collision shape, entities are

00:09:36.086 --> 00:09:37.296 A:middle
not hit testable.

00:09:37.516 --> 00:09:39.086 A:middle
So let's add them to our cards.

00:09:39.826 --> 00:09:42.066 A:middle
So this is the same code we saw

00:09:42.066 --> 00:09:43.426 A:middle
before for leading our models

00:09:43.426 --> 00:09:44.766 A:middle
and creating our card templates.

00:09:45.336 --> 00:09:47.836 A:middle
We'll make a small change here

00:09:47.836 --> 00:09:50.216 A:middle
to add entities generate

00:09:50.276 --> 00:09:51.236 A:middle
collision shapes method.

00:09:52.086 --> 00:09:53.446 A:middle
This will automatically generate

00:09:53.676 --> 00:09:55.346 A:middle
simple box collision shapes for

00:09:55.346 --> 00:09:57.506 A:middle
an entity using the entities

00:09:57.506 --> 00:09:58.476 A:middle
visual bounds.

00:09:59.016 --> 00:10:00.516 A:middle
As you can see, much like with

00:09:59.016 --> 00:10:00.516 A:middle
As you can see, much like with

00:10:00.516 --> 00:10:01.886 A:middle
cloning, this can be performed

00:10:01.966 --> 00:10:03.646 A:middle
recursively creating collision

00:10:03.646 --> 00:10:05.086 A:middle
shapes for all the children of

00:10:05.086 --> 00:10:06.176 A:middle
an entity as well.

00:10:07.206 --> 00:10:08.126 A:middle
And speaking of cloning,

00:10:08.446 --> 00:10:09.686 A:middle
collision shapes are included in

00:10:09.686 --> 00:10:10.986 A:middle
the data that gets copied when

00:10:10.986 --> 00:10:11.886 A:middle
an entity is cloned.

00:10:12.656 --> 00:10:13.806 A:middle
Since we're all ready cloning

00:10:13.806 --> 00:10:14.696 A:middle
the card templates to build our

00:10:14.696 --> 00:10:15.586 A:middle
game board, they'll be

00:10:15.586 --> 00:10:17.496 A:middle
automatically included with

00:10:17.496 --> 00:10:18.446 A:middle
these collision shapes as well.

00:10:18.656 --> 00:10:21.346 A:middle
Now that we can figure out what

00:10:21.346 --> 00:10:22.806 A:middle
entities we're interacting with,

00:10:22.976 --> 00:10:24.196 A:middle
let's add an animation that will

00:10:24.196 --> 00:10:25.266 A:middle
play when we tap on a card.

00:10:26.056 --> 00:10:27.396 A:middle
RealityKit supports two kinds of

00:10:27.396 --> 00:10:27.946 A:middle
animation.

00:10:28.156 --> 00:10:29.926 A:middle
The first is transform

00:10:29.926 --> 00:10:30.356 A:middle
animation.

00:10:30.356 --> 00:10:31.776 A:middle
It let's you animate the

00:10:32.016 --> 00:10:36.446 A:middle
position, rotation, and scale of

00:10:36.446 --> 00:10:37.566 A:middle
entities in code.

00:10:38.186 --> 00:10:40.686 A:middle
And the second is asset

00:10:40.686 --> 00:10:41.966 A:middle
animation, which plays the

00:10:41.966 --> 00:10:43.226 A:middle
animations that are baked into

00:10:43.226 --> 00:10:44.716 A:middle
your assets that are loaded in

00:10:44.716 --> 00:10:46.896 A:middle
from USDZs or reality files.

00:10:47.526 --> 00:10:49.506 A:middle
And RealityKit also provides

00:10:49.506 --> 00:10:50.856 A:middle
completion handlers for use with

00:10:50.856 --> 00:10:52.376 A:middle
both kinds of animation, letting

00:10:52.376 --> 00:10:53.446 A:middle
you know when the animation

00:10:53.446 --> 00:10:54.006 A:middle
finishes.

00:10:55.166 --> 00:10:57.566 A:middle
Once our card assets don't have

00:10:57.566 --> 00:10:59.236 A:middle
a baked in animation, so to flip

00:10:59.236 --> 00:11:00.186 A:middle
them we're going to use a

00:10:59.236 --> 00:11:00.186 A:middle
them we're going to use a

00:11:00.186 --> 00:11:01.786 A:middle
transform animation on our card

00:11:01.786 --> 00:11:02.136 A:middle
entities.

00:11:05.206 --> 00:11:06.506 A:middle
Transform animations can make

00:11:06.506 --> 00:11:07.696 A:middle
use of a variety of timing

00:11:07.696 --> 00:11:09.046 A:middle
functions that can control the

00:11:09.046 --> 00:11:09.986 A:middle
speed of which the animation is

00:11:09.986 --> 00:11:10.316 A:middle
played.

00:11:11.306 --> 00:11:12.536 A:middle
There's linear, which plays the

00:11:12.536 --> 00:11:13.776 A:middle
animation at a constant rate

00:11:13.996 --> 00:11:15.306 A:middle
with instantaneous acceleration

00:11:15.306 --> 00:11:16.386 A:middle
and deceleration.

00:11:16.686 --> 00:11:19.116 A:middle
There's the ease in, which

00:11:19.116 --> 00:11:20.536 A:middle
gradually ramps up the animation

00:11:20.576 --> 00:11:21.626 A:middle
speed over its duration.

00:11:22.296 --> 00:11:24.696 A:middle
Ease out is the opposite of ease

00:11:24.696 --> 00:11:25.816 A:middle
in, which slows the animation

00:11:25.816 --> 00:11:27.126 A:middle
down until its complete.

00:11:27.796 --> 00:11:30.436 A:middle
And the ease in and ease out

00:11:30.686 --> 00:11:32.056 A:middle
combines both, ramping the

00:11:32.056 --> 00:11:33.056 A:middle
animations to be up until the

00:11:33.056 --> 00:11:34.586 A:middle
halfway point and then slowing

00:11:34.586 --> 00:11:35.976 A:middle
it down until its complete.

00:11:36.546 --> 00:11:38.836 A:middle
And there's also a cubic Bezier

00:11:38.836 --> 00:11:40.436 A:middle
option for customization of your

00:11:40.436 --> 00:11:41.126 A:middle
timing function.

00:11:41.636 --> 00:11:43.346 A:middle
Let's create an animation for

00:11:43.346 --> 00:11:43.886 A:middle
our card flip.

00:11:44.556 --> 00:11:46.966 A:middle
So we're going to start by

00:11:47.076 --> 00:11:48.606 A:middle
copying our card's current

00:11:48.606 --> 00:11:49.276 A:middle
transform.

00:11:49.936 --> 00:11:51.376 A:middle
This ensures that we preserve

00:11:51.376 --> 00:11:52.596 A:middle
the current scale and

00:11:52.596 --> 00:11:54.196 A:middle
translation of the entity, which

00:11:54.296 --> 00:11:55.246 A:middle
right here we don't want to

00:11:55.246 --> 00:11:55.636 A:middle
change.

00:11:57.456 --> 00:11:59.346 A:middle
Next we'll set the transform to

00:11:59.346 --> 00:12:01.566 A:middle
a 180-degree rotation around the

00:11:59.346 --> 00:12:01.566 A:middle
a 180-degree rotation around the

00:12:01.566 --> 00:12:03.616 A:middle
x-axis using a quaternion.

00:12:03.966 --> 00:12:05.596 A:middle
This will flip the card so its

00:12:05.596 --> 00:12:06.576 A:middle
image is facing up.

00:12:06.656 --> 00:12:09.506 A:middle
Now we can start the animation

00:12:09.506 --> 00:12:09.976 A:middle
itself.

00:12:10.606 --> 00:12:12.216 A:middle
Transform animation is applied

00:12:12.216 --> 00:12:13.786 A:middle
using entities "move to" method.

00:12:15.136 --> 00:12:16.096 A:middle
RealityKit will smooth the

00:12:16.096 --> 00:12:17.176 A:middle
animated entity between its

00:12:17.176 --> 00:12:18.386 A:middle
current transform and the one

00:12:18.386 --> 00:12:19.466 A:middle
you provide in this method.

00:12:19.986 --> 00:12:20.946 A:middle
Using the requested timing

00:12:20.946 --> 00:12:22.556 A:middle
function, in this case "ease in

00:12:22.556 --> 00:12:24.226 A:middle
and out" over the given length

00:12:24.226 --> 00:12:24.566 A:middle
of time.

00:12:25.626 --> 00:12:27.406 A:middle
This gives us the animation we

00:12:27.406 --> 00:12:28.926 A:middle
need to flip the card face up.

00:12:29.386 --> 00:12:32.646 A:middle
And entities move method return

00:12:32.646 --> 00:12:33.576 A:middle
in animation with playback

00:12:33.576 --> 00:12:34.676 A:middle
controller that allows you to

00:12:34.676 --> 00:12:36.156 A:middle
pause, resume, or stop the

00:12:36.156 --> 00:12:37.886 A:middle
animation, or to receive

00:12:37.886 --> 00:12:39.006 A:middle
notification when the animation

00:12:39.006 --> 00:12:40.426 A:middle
completes like we're doing here.

00:12:41.026 --> 00:12:43.806 A:middle
Then to flip the card back to

00:12:43.806 --> 00:12:45.236 A:middle
being face down, we just need to

00:12:45.236 --> 00:12:46.976 A:middle
make one small tweak setting the

00:12:46.976 --> 00:12:48.666 A:middle
rotation of our transform back

00:12:48.666 --> 00:12:49.096 A:middle
to zero.

00:12:49.296 --> 00:12:50.786 A:middle
When we call move this

00:12:50.786 --> 00:12:51.986 A:middle
transform, the card will flip

00:12:51.986 --> 00:12:53.356 A:middle
back to being face down.

00:12:55.406 --> 00:12:56.756 A:middle
So now we can show the app with

00:12:56.756 --> 00:12:58.056 A:middle
interaction enabled, using hit

00:12:58.056 --> 00:12:59.396 A:middle
testing to detect what objects

00:12:59.396 --> 00:13:01.266 A:middle
the user is selecting and

00:12:59.396 --> 00:13:01.266 A:middle
the user is selecting and

00:13:01.266 --> 00:13:02.696 A:middle
transform animation to hide the

00:13:02.696 --> 00:13:02.976 A:middle
cards.

00:13:06.046 --> 00:13:07.056 A:middle
Now that we've got the basics

00:13:07.056 --> 00:13:08.326 A:middle
working, let's polish things up

00:13:08.326 --> 00:13:10.146 A:middle
a bit with some detail work.

00:13:10.716 --> 00:13:12.976 A:middle
We've got our simple card models

00:13:12.976 --> 00:13:14.966 A:middle
loaded and placed in AR, but 2D

00:13:14.966 --> 00:13:16.596 A:middle
images on cards is not very

00:13:16.596 --> 00:13:17.076 A:middle
exciting.

00:13:18.056 --> 00:13:19.176 A:middle
Thankfully our art team has also

00:13:19.176 --> 00:13:20.366 A:middle
created a bunch of high quality

00:13:20.366 --> 00:13:21.866 A:middle
models, so let's add them into

00:13:21.866 --> 00:13:23.136 A:middle
the mix to help our app be a bit

00:13:23.136 --> 00:13:24.096 A:middle
more three-dimensional.

00:13:24.656 --> 00:13:27.156 A:middle
We could load these new assets

00:13:27.156 --> 00:13:28.696 A:middle
the same way we did before with

00:13:28.696 --> 00:13:30.166 A:middle
the synchronous entity.load

00:13:30.166 --> 00:13:30.556 A:middle
method.

00:13:31.076 --> 00:13:32.436 A:middle
However, these models are a lot

00:13:32.436 --> 00:13:34.396 A:middle
more detailed than the simple

00:13:34.396 --> 00:13:35.226 A:middle
card assets.

00:13:35.226 --> 00:13:36.756 A:middle
And the larger assets will take

00:13:36.756 --> 00:13:37.446 A:middle
longer to load.

00:13:37.926 --> 00:13:40.096 A:middle
Loading them will be quick, but

00:13:40.096 --> 00:13:41.446 A:middle
the app will be blocked while

00:13:41.446 --> 00:13:41.946 A:middle
they're loading.

00:13:42.926 --> 00:13:44.226 A:middle
And if you're loading a lot of

00:13:44.226 --> 00:13:45.186 A:middle
assets that can add up to

00:13:45.186 --> 00:13:46.766 A:middle
noticeable delays where nothing

00:13:46.766 --> 00:13:47.316 A:middle
is happening.

00:13:48.136 --> 00:13:48.876 A:middle
Is there anything we can do to

00:13:48.876 --> 00:13:49.436 A:middle
make this better?

00:13:50.726 --> 00:13:51.806 A:middle
Thankfully as we mentioned it

00:13:51.806 --> 00:13:53.106 A:middle
earlier, RealityKit offers both

00:13:53.106 --> 00:13:54.446 A:middle
synchronous and asynchronous

00:13:54.446 --> 00:13:54.786 A:middle
loading.

00:13:55.576 --> 00:13:56.446 A:middle
We can load models

00:13:56.446 --> 00:13:57.666 A:middle
asynchronously by calling

00:13:57.666 --> 00:13:59.906 A:middle
entities load model async

00:14:00.736 --> 00:14:00.896 A:middle
method.

00:14:01.046 --> 00:14:02.106 A:middle
With asynchronous loading,

00:14:02.556 --> 00:14:03.396 A:middle
assets are loaded in the

00:14:03.396 --> 00:14:05.836 A:middle
background and this unlocks the

00:14:05.836 --> 00:14:07.076 A:middle
app and allows it to continue

00:14:07.116 --> 00:14:08.506 A:middle
uninterrupted, which makes your

00:14:08.506 --> 00:14:10.266 A:middle
app responsive and allows ARkit

00:14:10.266 --> 00:14:14.216 A:middle
to continue observing the world.

00:14:14.536 --> 00:14:16.266 A:middle
When asynchronous loading is

00:14:16.266 --> 00:14:17.676 A:middle
complete you'll receive a call

00:14:17.676 --> 00:14:18.566 A:middle
back and then it can use your

00:14:18.566 --> 00:14:20.436 A:middle
assets just as you would with

00:14:20.436 --> 00:14:21.136 A:middle
synchronous loading.

00:14:21.946 --> 00:14:23.486 A:middle
And additionally you can also

00:14:23.486 --> 00:14:24.636 A:middle
combine load requests and

00:14:24.636 --> 00:14:26.446 A:middle
execute them simultaneously and

00:14:26.726 --> 00:14:28.056 A:middle
receive notification when all

00:14:28.056 --> 00:14:29.136 A:middle
assets have finished loading.

00:14:29.306 --> 00:14:30.186 A:middle
So you don't need to load your

00:14:30.186 --> 00:14:31.326 A:middle
content piecemeal.

00:14:32.136 --> 00:14:33.186 A:middle
Let's write some code to load

00:14:33.186 --> 00:14:34.796 A:middle
our new models asynchronously.

00:14:36.056 --> 00:14:37.426 A:middle
So we'll start by loading a

00:14:37.516 --> 00:14:39.046 A:middle
single model asynchronously.

00:14:39.846 --> 00:14:41.516 A:middle
Entities load model async method

00:14:41.686 --> 00:14:43.176 A:middle
takes on the name of the asset

00:14:43.436 --> 00:14:44.386 A:middle
just like its synchronous

00:14:44.416 --> 00:14:44.966 A:middle
counterpart.

00:14:45.656 --> 00:14:48.276 A:middle
It returns a load request to

00:14:48.276 --> 00:14:49.316 A:middle
receive notification when the

00:14:49.316 --> 00:14:51.396 A:middle
model has finished loading and

00:14:51.396 --> 00:14:52.016 A:middle
can be used.

00:14:52.596 --> 00:14:54.546 A:middle
We call the sync method with a

00:14:54.546 --> 00:14:56.056 A:middle
closure that will be executed

00:14:56.056 --> 00:14:57.266 A:middle
when the asset is ready.

00:14:58.246 --> 00:15:00.456 A:middle
The load request uses API

00:14:58.246 --> 00:15:00.456 A:middle
The load request uses API

00:15:00.456 --> 00:15:01.536 A:middle
introduced with a new Swift

00:15:01.536 --> 00:15:02.416 A:middle
framework Combine.

00:15:02.816 --> 00:15:03.696 A:middle
So I recommend checking out the

00:15:03.696 --> 00:15:05.216 A:middle
session Introducing Combine and

00:15:05.216 --> 00:15:06.346 A:middle
Advances in Foundation.

00:15:06.346 --> 00:15:08.656 A:middle
And that's all you need to do to

00:15:08.656 --> 00:15:09.696 A:middle
be able to load your content

00:15:09.696 --> 00:15:10.356 A:middle
asynchronously.

00:15:10.706 --> 00:15:11.856 A:middle
No you could load all of your

00:15:11.856 --> 00:15:13.416 A:middle
assets individually like this,

00:15:13.856 --> 00:15:14.966 A:middle
but you can also combine

00:15:14.966 --> 00:15:16.716 A:middle
multiple load requests into one.

00:15:19.046 --> 00:15:19.896 A:middle
We can do this by simply

00:15:19.956 --> 00:15:21.146 A:middle
appending another load request

00:15:21.276 --> 00:15:22.126 A:middle
on to the first one.

00:15:22.676 --> 00:15:25.316 A:middle
We then call collect to combine

00:15:25.316 --> 00:15:26.326 A:middle
our to load requests.

00:15:26.876 --> 00:15:28.876 A:middle
And then we call sink.

00:15:29.036 --> 00:15:30.506 A:middle
And our closure will be executed

00:15:30.506 --> 00:15:31.956 A:middle
when both models have finished

00:15:31.956 --> 00:15:33.466 A:middle
loading, packaged into the

00:15:33.466 --> 00:15:34.946 A:middle
models of array parameter for

00:15:34.946 --> 00:15:35.896 A:middle
easy processing.

00:15:38.256 --> 00:15:39.396 A:middle
And we can extend this as far as

00:15:39.396 --> 00:15:39.766 A:middle
we want.

00:15:40.356 --> 00:15:41.676 A:middle
Here we're collecting all eight

00:15:41.676 --> 00:15:43.046 A:middle
of our detailed card models into

00:15:43.046 --> 00:15:44.426 A:middle
a single load request.

00:15:45.916 --> 00:15:46.816 A:middle
Our sink closure will be

00:15:46.816 --> 00:15:48.146 A:middle
executed when all eight have

00:15:48.396 --> 00:15:49.026 A:middle
finished loading.

00:15:49.656 --> 00:15:50.756 A:middle
Combine and load requests makes

00:15:50.756 --> 00:15:51.976 A:middle
managing your content much

00:15:51.976 --> 00:15:52.346 A:middle
easier.

00:15:55.106 --> 00:15:55.866 A:middle
Let's show how synchronous

00:15:55.866 --> 00:15:56.516 A:middle
loading compares with

00:15:56.516 --> 00:15:57.266 A:middle
asynchronous loading.

00:15:57.266 --> 00:15:59.546 A:middle
On the left our app is using

00:15:59.546 --> 00:16:00.466 A:middle
synchronous loading and on the

00:15:59.546 --> 00:16:00.466 A:middle
synchronous loading and on the

00:16:00.466 --> 00:16:01.566 A:middle
right asynchronous.

00:16:01.566 --> 00:16:03.306 A:middle
As soon as the synchronous app

00:16:03.306 --> 00:16:04.836 A:middle
starts loading everything comes

00:16:04.836 --> 00:16:06.596 A:middle
to a stop as the app is blocked

00:16:06.596 --> 00:16:07.556 A:middle
until loading is complete.

00:16:08.216 --> 00:16:09.806 A:middle
By contrast the asynchronous app

00:16:09.806 --> 00:16:11.076 A:middle
continues to be responsive

00:16:11.386 --> 00:16:12.506 A:middle
allowing it to respond to user

00:16:12.506 --> 00:16:14.766 A:middle
input, update the camera, and

00:16:14.766 --> 00:16:15.706 A:middle
you continue to observe the

00:16:15.706 --> 00:16:18.006 A:middle
world in front of the camera.

00:16:18.196 --> 00:16:19.046 A:middle
Loading takes about the same

00:16:19.046 --> 00:16:20.836 A:middle
amount of time for both, however

00:16:20.836 --> 00:16:22.256 A:middle
the device using async loading

00:16:22.256 --> 00:16:23.286 A:middle
is able to place its content

00:16:23.606 --> 00:16:24.746 A:middle
first because its able to

00:16:24.746 --> 00:16:26.076 A:middle
continue observing the world

00:16:26.356 --> 00:16:26.986 A:middle
during loading.

00:16:27.186 --> 00:16:27.956 A:middle
While the device using

00:16:27.956 --> 00:16:29.636 A:middle
asynchronous loading is not

00:16:29.876 --> 00:16:31.706 A:middle
making it a much better fit for

00:16:31.706 --> 00:16:33.256 A:middle
use with AR.

00:16:35.006 --> 00:16:35.626 A:middle
So now we have out detailed

00:16:35.626 --> 00:16:36.396 A:middle
models loading in without

00:16:36.396 --> 00:16:37.506 A:middle
freezing the app.

00:16:37.826 --> 00:16:39.526 A:middle
However an astute observer may

00:16:39.526 --> 00:16:40.446 A:middle
notice that we can see the new

00:16:40.446 --> 00:16:41.756 A:middle
models while the cards are faced

00:16:41.756 --> 00:16:42.076 A:middle
down.

00:16:43.356 --> 00:16:44.366 A:middle
We could simply hide the models

00:16:44.366 --> 00:16:45.436 A:middle
while the cards are face down,

00:16:45.436 --> 00:16:46.356 A:middle
but nothing would stop the user

00:16:46.356 --> 00:16:47.626 A:middle
from bending over and looking at

00:16:47.626 --> 00:16:48.996 A:middle
the underside of the cards and

00:16:48.996 --> 00:16:49.876 A:middle
seeing which ones match up

00:16:50.126 --> 00:16:52.606 A:middle
without having to flip them.

00:16:52.716 --> 00:16:54.386 A:middle
So RealityKit provides a super

00:16:54.386 --> 00:16:55.426 A:middle
useful way to fix this,

00:16:55.616 --> 00:16:56.696 A:middle
occlusion materials.

00:16:57.396 --> 00:16:58.496 A:middle
Occlusion materials are

00:16:58.496 --> 00:17:00.056 A:middle
invisible, but when applied to

00:16:58.496 --> 00:17:00.056 A:middle
invisible, but when applied to

00:17:00.056 --> 00:17:01.516 A:middle
geometry in a scene they hide

00:17:01.516 --> 00:17:03.136 A:middle
virtual content behind them

00:17:03.886 --> 00:17:04.925 A:middle
revealing the video pass

00:17:04.925 --> 00:17:05.146 A:middle
through.

00:17:05.685 --> 00:17:06.836 A:middle
Here you can see we've added

00:17:06.836 --> 00:17:07.896 A:middle
some occlusion geometry to our

00:17:07.896 --> 00:17:09.086 A:middle
scene, along with some

00:17:09.086 --> 00:17:10.256 A:middle
additional highlighting to show

00:17:10.256 --> 00:17:11.705 A:middle
the shape of an otherwise

00:17:11.796 --> 00:17:12.675 A:middle
invisible object.

00:17:13.476 --> 00:17:15.356 A:middle
As in animates up and down parts

00:17:15.356 --> 00:17:16.566 A:middle
of the robot it intersects are

00:17:16.656 --> 00:17:18.175 A:middle
hidden and lets the real world

00:17:18.445 --> 00:17:19.455 A:middle
behind it show through.

00:17:20.616 --> 00:17:21.576 A:middle
Occlusion materials are great

00:17:21.576 --> 00:17:22.796 A:middle
for simulating real world

00:17:22.796 --> 00:17:24.215 A:middle
objects that would block virtual

00:17:24.215 --> 00:17:26.086 A:middle
objects from being seen like a

00:17:26.086 --> 00:17:26.856 A:middle
table or wall.

00:17:27.276 --> 00:17:28.296 A:middle
So let's make use of it in our

00:17:28.996 --> 00:17:29.066 A:middle
app.

00:17:30.076 --> 00:17:31.346 A:middle
Let's start by adding an

00:17:31.346 --> 00:17:32.686 A:middle
occlusion plane under our game

00:17:32.686 --> 00:17:32.956 A:middle
board.

00:17:33.526 --> 00:17:34.756 A:middle
We'll create a plane mesh half a

00:17:34.756 --> 00:17:35.926 A:middle
meter wide and half a meter

00:17:35.926 --> 00:17:36.216 A:middle
deep.

00:17:37.476 --> 00:17:38.436 A:middle
We'll then create our occlusion

00:17:38.436 --> 00:17:41.346 A:middle
material and then create a model

00:17:41.346 --> 00:17:42.786 A:middle
entity using it and our plane

00:17:42.786 --> 00:17:43.176 A:middle
mesh.

00:17:43.876 --> 00:17:45.276 A:middle
We'll position it slightly below

00:17:45.276 --> 00:17:46.206 A:middle
the game board so that it

00:17:46.206 --> 00:17:47.676 A:middle
doesn't intersect the bottom of

00:17:47.676 --> 00:17:48.166 A:middle
our models.

00:17:49.106 --> 00:17:50.196 A:middle
And then we just add it to our

00:17:50.196 --> 00:17:51.736 A:middle
anchor to place the occlusion

00:17:51.786 --> 00:17:52.856 A:middle
plane in our scene.

00:17:54.366 --> 00:17:56.006 A:middle
Here we can see the occlusion

00:17:56.006 --> 00:17:56.876 A:middle
plane in action.

00:17:57.106 --> 00:17:58.306 A:middle
At first glance this seems to do

00:17:58.306 --> 00:17:59.166 A:middle
a great job of solving the

00:17:59.166 --> 00:18:00.456 A:middle
problem, however when we start

00:17:59.166 --> 00:18:00.456 A:middle
problem, however when we start

00:18:00.456 --> 00:18:02.046 A:middle
to move the device down we can

00:18:02.046 --> 00:18:03.676 A:middle
see the edge of the occlusion

00:18:03.676 --> 00:18:04.896 A:middle
plane and see our virtual

00:18:04.896 --> 00:18:06.076 A:middle
content rendering inside the

00:18:06.076 --> 00:18:06.456 A:middle
table.

00:18:06.456 --> 00:18:08.016 A:middle
So this plane works great when

00:18:08.016 --> 00:18:09.396 A:middle
we're above the game board but

00:18:09.396 --> 00:18:10.406 A:middle
we need occlusion that will work

00:18:10.406 --> 00:18:13.476 A:middle
for an angle in this case.

00:18:13.646 --> 00:18:14.976 A:middle
Solution is using occlusion

00:18:14.976 --> 00:18:16.206 A:middle
box instead of an occlusion

00:18:16.206 --> 00:18:16.466 A:middle
plane.

00:18:16.986 --> 00:18:20.016 A:middle
So we'll generate a box, make

00:18:20.016 --> 00:18:20.846 A:middle
use of the same occlusion

00:18:20.846 --> 00:18:23.036 A:middle
material, and then create a

00:18:23.036 --> 00:18:24.566 A:middle
model entity using the box in

00:18:24.566 --> 00:18:25.336 A:middle
place of the plane.

00:18:26.806 --> 00:18:28.256 A:middle
Generated geometric objects have

00:18:28.256 --> 00:18:30.106 A:middle
their origins in the center so

00:18:30.106 --> 00:18:31.176 A:middle
we need to bump it down by

00:18:31.176 --> 00:18:31.716 A:middle
half a size and then just a

00:18:31.716 --> 00:18:32.806 A:middle
little bit more so that the top

00:18:32.806 --> 00:18:34.096 A:middle
of the box will rest just below

00:18:34.096 --> 00:18:35.006 A:middle
the bottom of the game board.

00:18:36.376 --> 00:18:38.246 A:middle
And then once again we just add

00:18:38.246 --> 00:18:39.266 A:middle
it to our anchor to place the

00:18:39.266 --> 00:18:42.496 A:middle
occlusion box in our scene.

00:18:43.136 --> 00:18:44.696 A:middle
Initially it looks the same as

00:18:44.696 --> 00:18:46.656 A:middle
the occlusion plane until we

00:18:46.656 --> 00:18:48.096 A:middle
start to move our device down

00:18:48.736 --> 00:18:50.716 A:middle
and we can see, or rather can't

00:18:50.716 --> 00:18:52.096 A:middle
see our virtual content.

00:18:52.746 --> 00:18:54.026 A:middle
Our occlusion box is preventing

00:18:54.026 --> 00:18:55.396 A:middle
content from rendering inside

00:18:55.396 --> 00:18:57.046 A:middle
the table simulating the real

00:18:57.046 --> 00:18:58.486 A:middle
world object in our virtual

00:18:58.486 --> 00:18:58.856 A:middle
scene.

00:19:00.226 --> 00:19:01.266 A:middle
So now we have an app where we

00:19:01.266 --> 00:19:02.386 A:middle
can place our virtual cards in

00:19:02.386 --> 00:19:03.716 A:middle
the real world and interact with

00:19:03.716 --> 00:19:03.896 A:middle
them.

00:19:03.896 --> 00:19:05.246 A:middle
We're loading assets

00:19:05.246 --> 00:19:06.366 A:middle
asynchronously and we're

00:19:06.366 --> 00:19:07.736 A:middle
simulating our virtual content

00:19:07.736 --> 00:19:08.916 A:middle
being hidden by real world

00:19:08.916 --> 00:19:10.376 A:middle
objects using occlusion

00:19:10.376 --> 00:19:10.906 A:middle
geometry.

00:19:11.566 --> 00:19:13.116 A:middle
Now I'd like to invite my

00:19:13.116 --> 00:19:14.236 A:middle
colleague Courtland up to talk

00:19:14.236 --> 00:19:15.336 A:middle
about tracking game state.

00:19:15.706 --> 00:19:16.036 A:middle
Courtland.

00:19:17.016 --> 00:19:21.500 A:middle
[ Applause ]

00:19:25.236 --> 00:19:25.816 A:middle
&gt;&gt; Thank you Ross.

00:19:26.476 --> 00:19:27.776 A:middle
Hello. I'm Courtland, an

00:19:27.776 --> 00:19:29.296 A:middle
engineer on the RealityKit team

00:19:29.296 --> 00:19:29.666 A:middle
at Apple.

00:19:30.396 --> 00:19:31.766 A:middle
We've just seen how to prototype

00:19:31.766 --> 00:19:33.756 A:middle
a functioning AR game, add

00:19:33.756 --> 00:19:35.616 A:middle
interaction, and integrate final

00:19:35.616 --> 00:19:36.006 A:middle
artwork.

00:19:36.876 --> 00:19:38.056 A:middle
Now I'd like to show you how to

00:19:38.056 --> 00:19:39.396 A:middle
best track your state with

00:19:39.396 --> 00:19:40.796 A:middle
custom components and entities

00:19:41.146 --> 00:19:42.416 A:middle
and finally how to add

00:19:42.416 --> 00:19:42.916 A:middle
mutli-player.

00:19:43.896 --> 00:19:45.446 A:middle
Let's start with tracking state.

00:19:46.606 --> 00:19:48.106 A:middle
As we covered in the intro

00:19:48.106 --> 00:19:49.936 A:middle
session, RealityKit uses the

00:19:49.936 --> 00:19:51.296 A:middle
entity component design pattern

00:19:51.446 --> 00:19:52.666 A:middle
to build objects within the

00:19:52.666 --> 00:19:53.306 A:middle
virtual world.

00:19:53.476 --> 00:19:56.326 A:middle
An entity itself is comprised of

00:19:56.326 --> 00:19:57.676 A:middle
pieces called "components."

00:19:58.616 --> 00:20:00.396 A:middle
These components define specific

00:19:58.616 --> 00:20:00.396 A:middle
These components define specific

00:20:00.396 --> 00:20:02.536 A:middle
behaviors and data that can be

00:20:02.536 --> 00:20:03.856 A:middle
added to individual entities.

00:20:04.846 --> 00:20:06.546 A:middle
Using entities and components

00:20:06.546 --> 00:20:08.286 A:middle
allows for reuse of code and is

00:20:08.286 --> 00:20:09.126 A:middle
flexible to use.

00:20:09.786 --> 00:20:10.956 A:middle
Let's take a look at how we can

00:20:10.956 --> 00:20:11.806 A:middle
apply components.

00:20:12.356 --> 00:20:14.986 A:middle
We're using RealityKit's model

00:20:14.986 --> 00:20:16.646 A:middle
entity to represent our cards.

00:20:17.096 --> 00:20:18.226 A:middle
It provides us with a set of

00:20:18.226 --> 00:20:19.806 A:middle
components, which are useful for

00:20:19.806 --> 00:20:21.626 A:middle
representing most common virtual

00:20:21.626 --> 00:20:22.196 A:middle
objects.

00:20:22.946 --> 00:20:24.306 A:middle
We've made use of the model

00:20:24.306 --> 00:20:25.796 A:middle
component for visual appearance

00:20:25.796 --> 00:20:27.776 A:middle
and the collision component for

00:20:27.776 --> 00:20:28.276 A:middle
hit testing.

00:20:29.436 --> 00:20:30.936 A:middle
Model entity also contains a

00:20:30.936 --> 00:20:32.626 A:middle
physics component, allowing the

00:20:32.626 --> 00:20:34.326 A:middle
entity to move and interact with

00:20:34.326 --> 00:20:35.736 A:middle
other objects in a physically

00:20:35.816 --> 00:20:37.496 A:middle
realistic way, though we haven't

00:20:37.496 --> 00:20:38.246 A:middle
made use of it here.

00:20:39.836 --> 00:20:40.996 A:middle
RealityKit enable you to

00:20:40.996 --> 00:20:42.006 A:middle
customize an entity.

00:20:42.626 --> 00:20:43.866 A:middle
By using an entity component

00:20:43.866 --> 00:20:45.206 A:middle
design you can include the

00:20:45.206 --> 00:20:47.116 A:middle
behaviors you want, exclude the

00:20:47.116 --> 00:20:49.296 A:middle
ones you don't need, and add new

00:20:49.296 --> 00:20:50.166 A:middle
behaviors of your own.

00:20:51.196 --> 00:20:52.926 A:middle
Let's customize this entity for

00:20:53.636 --> 00:20:54.826 A:middle
our cards.

00:20:54.966 --> 00:20:56.486 A:middle
Model entity has most of what we

00:20:56.486 --> 00:20:56.746 A:middle
need.

00:20:57.476 --> 00:20:58.996 A:middle
We'll remove physics since we're

00:20:58.996 --> 00:20:59.506 A:middle
not using it.

00:21:00.746 --> 00:21:01.986 A:middle
We want to store whether the

00:21:01.986 --> 00:21:03.716 A:middle
card is hidden or revealed and

00:21:03.826 --> 00:21:06.076 A:middle
the kind of card which we'll use

00:21:06.116 --> 00:21:07.296 A:middle
to determine if two cards are

00:21:07.296 --> 00:21:07.616 A:middle
matching.

00:21:08.736 --> 00:21:10.286 A:middle
To do this we need to create a

00:21:10.286 --> 00:21:12.226 A:middle
new card component type with

00:21:12.226 --> 00:21:13.296 A:middle
these properties, which we'll

00:21:13.296 --> 00:21:13.956 A:middle
add to the entity.

00:21:15.266 --> 00:21:16.906 A:middle
So what exactly is a component?

00:21:17.626 --> 00:21:20.196 A:middle
A RealityKit component is a

00:21:20.196 --> 00:21:21.656 A:middle
Swift struct that contains your

00:21:21.656 --> 00:21:22.046 A:middle
properties.

00:21:23.046 --> 00:21:24.366 A:middle
It conforms to the component

00:21:24.366 --> 00:21:26.056 A:middle
protocol, which allows us to

00:21:26.056 --> 00:21:27.086 A:middle
attach it to an entity.

00:21:28.466 --> 00:21:30.376 A:middle
It's also a good idea to conform

00:21:30.376 --> 00:21:31.616 A:middle
to Codable, as we'll see in the

00:21:31.616 --> 00:21:32.556 A:middle
multi-player segment.

00:21:33.496 --> 00:21:34.066 A:middle
So let's make one.

00:21:35.076 --> 00:21:37.506 A:middle
We start by declaring our struct

00:21:37.866 --> 00:21:38.936 A:middle
called CardComponent.

00:21:39.966 --> 00:21:41.046 A:middle
We adopt the component in

00:21:41.046 --> 00:21:42.036 A:middle
Codable protocols.

00:21:44.066 --> 00:21:45.086 A:middle
Next we'll add our two

00:21:45.086 --> 00:21:46.626 A:middle
properties -- a boolean called

00:21:46.626 --> 00:21:48.066 A:middle
"revealed" to represent whether

00:21:48.066 --> 00:21:49.226 A:middle
the card's contents are hidden

00:21:49.226 --> 00:21:51.006 A:middle
or revealed and a string "kind,"

00:21:51.496 --> 00:21:52.516 A:middle
which we can use to match the

00:21:52.516 --> 00:21:52.946 A:middle
two cards.

00:21:53.726 --> 00:21:54.476 A:middle
That's all for the type.

00:21:55.396 --> 00:21:56.476 A:middle
We'll start with one of the card

00:21:56.476 --> 00:21:57.826 A:middle
models Ross loaded earlier.

00:21:58.446 --> 00:22:01.106 A:middle
For demonstration purposes I'll

00:21:58.446 --> 00:22:01.106 A:middle
For demonstration purposes I'll

00:22:01.106 --> 00:22:02.226 A:middle
show how to remove a physics

00:22:02.256 --> 00:22:02.936 A:middle
body component.

00:22:03.696 --> 00:22:05.036 A:middle
The model entity provides a

00:22:05.036 --> 00:22:06.346 A:middle
physics body property, which

00:22:06.346 --> 00:22:07.156 A:middle
makes this easy.

00:22:08.016 --> 00:22:10.586 A:middle
We just assign nil and we're

00:22:11.696 --> 00:22:11.806 A:middle
done.

00:22:12.026 --> 00:22:12.666 A:middle
Now we'll load the card

00:22:12.666 --> 00:22:13.986 A:middle
component by assigning to the

00:22:13.986 --> 00:22:16.336 A:middle
components array indexed by the

00:22:16.336 --> 00:22:17.236 A:middle
type of component.

00:22:18.246 --> 00:22:19.376 A:middle
This will add the component, if

00:22:19.376 --> 00:22:21.006 A:middle
it doesn't all ready exist, on

00:22:21.816 --> 00:22:23.046 A:middle
the entity.

00:22:23.246 --> 00:22:24.446 A:middle
Changing the kind property is

00:22:24.446 --> 00:22:24.756 A:middle
similar.

00:22:25.726 --> 00:22:27.016 A:middle
Indexed into the entities

00:22:27.016 --> 00:22:28.666 A:middle
components array, and assigned

00:22:28.666 --> 00:22:29.476 A:middle
to the kind property.

00:22:30.406 --> 00:22:31.766 A:middle
Since not every entity contains

00:22:31.766 --> 00:22:33.506 A:middle
a card component, the accesser

00:22:33.506 --> 00:22:36.216 A:middle
returns an optional value.

00:22:37.266 --> 00:22:38.846 A:middle
For common configuration of

00:22:38.876 --> 00:22:40.056 A:middle
components used throughout your

00:22:40.056 --> 00:22:41.566 A:middle
game, we can take it a step

00:22:41.566 --> 00:22:42.736 A:middle
further and create our own

00:22:42.806 --> 00:22:43.476 A:middle
custom entity.

00:22:44.466 --> 00:22:45.746 A:middle
RealityKit comes with a number

00:22:45.746 --> 00:22:47.346 A:middle
of entity configurations such as

00:22:47.346 --> 00:22:48.946 A:middle
directional light and model

00:22:48.946 --> 00:22:49.306 A:middle
entity.

00:22:49.816 --> 00:22:50.766 A:middle
And you can make your own very

00:22:50.766 --> 00:22:51.166 A:middle
easily.

00:22:51.926 --> 00:22:53.156 A:middle
We're using cards everywhere in

00:22:53.156 --> 00:22:55.336 A:middle
our game, so this makes an ideal

00:22:55.336 --> 00:22:56.546 A:middle
candidate to turn into an

00:22:56.546 --> 00:22:56.866 A:middle
entity.

00:22:58.006 --> 00:22:59.386 A:middle
We'll get compile times, static

00:22:59.386 --> 00:23:00.836 A:middle
typing and code completion for

00:22:59.386 --> 00:23:00.836 A:middle
typing and code completion for

00:23:00.836 --> 00:23:01.496 A:middle
these objects.

00:23:01.996 --> 00:23:03.346 A:middle
This is also where we can add

00:23:03.346 --> 00:23:04.836 A:middle
methods to encapsulate

00:23:04.836 --> 00:23:05.366 A:middle
functionality.

00:23:06.726 --> 00:23:08.126 A:middle
This is especially useful when

00:23:08.126 --> 00:23:08.976 A:middle
you're changing multiple

00:23:08.976 --> 00:23:11.106 A:middle
components at the same time such

00:23:11.106 --> 00:23:12.156 A:middle
as setting the state of the card

00:23:12.156 --> 00:23:14.146 A:middle
to revealed at the same time as

00:23:14.146 --> 00:23:16.326 A:middle
flipping it over.

00:23:16.576 --> 00:23:18.006 A:middle
Creating new entity is just a

00:23:18.006 --> 00:23:18.486 A:middle
few steps.

00:23:19.736 --> 00:23:21.266 A:middle
First we needed a new class to

00:23:21.296 --> 00:23:24.196 A:middle
represent our entity.

00:23:24.406 --> 00:23:25.906 A:middle
Then we added any RealityKit

00:23:25.906 --> 00:23:27.566 A:middle
components we need.

00:23:28.696 --> 00:23:30.416 A:middle
Next we'll add any custom

00:23:30.416 --> 00:23:31.016 A:middle
components.

00:23:31.226 --> 00:23:32.136 A:middle
We solved the physics body

00:23:32.136 --> 00:23:33.316 A:middle
property on model entity

00:23:33.316 --> 00:23:34.816 A:middle
earlier, which provide a

00:23:34.816 --> 00:23:36.356 A:middle
convenient syntax for accessing

00:23:36.356 --> 00:23:37.496 A:middle
the physical body component.

00:23:38.066 --> 00:23:39.966 A:middle
We'll do the same for our card.

00:23:40.976 --> 00:23:42.516 A:middle
Last we extend it with methods

00:23:43.646 --> 00:23:45.366 A:middle
reveal and hide.

00:23:46.466 --> 00:23:49.246 A:middle
So we create our card entity

00:23:49.246 --> 00:23:51.136 A:middle
class derive from entity.

00:23:52.666 --> 00:23:54.086 A:middle
Next include the RealityKit

00:23:54.086 --> 00:23:54.726 A:middle
components.

00:23:55.356 --> 00:23:57.136 A:middle
We're adding the HasModel and

00:23:57.136 --> 00:23:58.386 A:middle
HasCollision protocols.

00:23:59.146 --> 00:24:00.606 A:middle
These protocols give us access

00:23:59.146 --> 00:24:00.606 A:middle
These protocols give us access

00:24:00.646 --> 00:24:01.766 A:middle
to the model and collision

00:24:01.766 --> 00:24:04.056 A:middle
components via properties and

00:24:04.056 --> 00:24:05.186 A:middle
any methods that they provide

00:24:05.466 --> 00:24:06.536 A:middle
such as generate collision

00:24:06.536 --> 00:24:06.996 A:middle
shapes.

00:24:07.496 --> 00:24:10.356 A:middle
Last we add a card property,

00:24:10.816 --> 00:24:11.936 A:middle
which returns a CardComponent.

00:24:12.626 --> 00:24:13.976 A:middle
Since all cards need a card

00:24:13.976 --> 00:24:15.066 A:middle
component we'll make it

00:24:15.066 --> 00:24:15.636 A:middle
non-optional.

00:24:16.276 --> 00:24:19.246 A:middle
The getter will retrieve our

00:24:19.246 --> 00:24:20.096 A:middle
CardComponent from the

00:24:20.096 --> 00:24:20.706 A:middle
components array.

00:24:21.686 --> 00:24:22.736 A:middle
We use the nil coalescing

00:24:22.736 --> 00:24:24.466 A:middle
operator to return a default

00:24:24.466 --> 00:24:25.506 A:middle
value if we didn't all ready

00:24:25.506 --> 00:24:25.996 A:middle
have a card.

00:24:27.236 --> 00:24:28.986 A:middle
The setter copies new value into

00:24:28.986 --> 00:24:29.626 A:middle
the components array.

00:24:29.626 --> 00:24:32.776 A:middle
Now that we have our class we

00:24:32.776 --> 00:24:33.566 A:middle
extend it with methods.

00:24:34.276 --> 00:24:37.926 A:middle
I've included the reveal method

00:24:38.086 --> 00:24:39.466 A:middle
to show us how easy it is to

00:24:39.466 --> 00:24:40.596 A:middle
coordinate multiple updates.

00:24:41.756 --> 00:24:43.366 A:middle
We first update the card's state

00:24:43.456 --> 00:24:44.646 A:middle
to indicate that it's revealed.

00:24:45.596 --> 00:24:46.986 A:middle
We'll do this immediately rather

00:24:46.986 --> 00:24:48.196 A:middle
than at the end of the animation

00:24:48.576 --> 00:24:49.936 A:middle
in case you tap it again while

00:24:49.936 --> 00:24:50.626 A:middle
it's still animating.

00:24:51.886 --> 00:24:53.596 A:middle
Next we use the same code that

00:24:53.596 --> 00:24:55.016 A:middle
Ross showed us earlier to

00:24:55.016 --> 00:24:56.126 A:middle
animate the card flipping over.

00:24:57.006 --> 00:24:58.406 A:middle
And that's it.

00:24:58.506 --> 00:24:59.426 A:middle
Hide method would do the

00:24:59.426 --> 00:24:59.816 A:middle
opposite.

00:25:00.436 --> 00:25:02.016 A:middle
Set reveal to false and turn the

00:25:02.016 --> 00:25:03.066 A:middle
card to be facing down.

00:25:04.106 --> 00:25:05.356 A:middle
Let's see what this is like to

00:25:05.356 --> 00:25:05.756 A:middle
use now.

00:25:07.156 --> 00:25:08.266 A:middle
We'll go back to the onTap

00:25:08.266 --> 00:25:08.676 A:middle
handler.

00:25:09.866 --> 00:25:11.636 A:middle
We call the same ARView entity

00:25:11.636 --> 00:25:13.756 A:middle
at method, but this time cast

00:25:13.756 --> 00:25:15.206 A:middle
its result to a card entity.

00:25:16.136 --> 00:25:17.236 A:middle
Though we only have cards in our

00:25:17.236 --> 00:25:18.896 A:middle
game, your app might have other

00:25:18.896 --> 00:25:19.676 A:middle
types of entities.

00:25:20.926 --> 00:25:22.596 A:middle
Casting to card entity lets us

00:25:22.856 --> 00:25:24.466 A:middle
perform actions specific to the

00:25:24.466 --> 00:25:24.716 A:middle
card.

00:25:26.186 --> 00:25:27.546 A:middle
With a new card entity and

00:25:27.546 --> 00:25:29.106 A:middle
component, we can just ask the

00:25:29.106 --> 00:25:30.346 A:middle
card if it's revealed.

00:25:30.346 --> 00:25:32.366 A:middle
If it is currently revealed

00:25:32.846 --> 00:25:34.136 A:middle
we'll hide it.

00:25:34.256 --> 00:25:35.786 A:middle
Otherwise we'll reveal it.

00:25:36.886 --> 00:25:37.926 A:middle
With hide and reveal

00:25:37.926 --> 00:25:39.226 A:middle
encapsulated as methods on the

00:25:39.226 --> 00:25:40.726 A:middle
entity, we don't need to be

00:25:40.726 --> 00:25:42.076 A:middle
concerned with the specifics of

00:25:42.076 --> 00:25:43.606 A:middle
hiding and revealing cards here.

00:25:44.226 --> 00:25:46.726 A:middle
We've cleaned things up

00:25:46.726 --> 00:25:48.136 A:middle
considerably by adding a custom

00:25:48.136 --> 00:25:50.056 A:middle
component in entity and made one

00:25:50.056 --> 00:25:51.126 A:middle
important functional change

00:25:51.126 --> 00:25:51.336 A:middle
here.

00:25:52.426 --> 00:25:53.686 A:middle
We now know that a card is

00:25:53.686 --> 00:25:55.536 A:middle
revealed and can tap on it again

00:25:55.536 --> 00:25:57.186 A:middle
to hide it in case it wasn't the

00:25:57.186 --> 00:25:57.996 A:middle
card you remembered.

00:25:58.686 --> 00:26:00.906 A:middle
Now that we've modeled our state

00:25:58.686 --> 00:26:00.906 A:middle
Now that we've modeled our state

00:26:00.906 --> 00:26:02.386 A:middle
as components and entities, it's

00:26:02.386 --> 00:26:04.186 A:middle
time to take the game to the

00:26:04.186 --> 00:26:04.786 A:middle
next level.

00:26:05.316 --> 00:26:06.326 A:middle
What's something easy we can

00:26:06.326 --> 00:26:06.506 A:middle
add?

00:26:11.086 --> 00:26:12.436 A:middle
Just add multiplayer right?

00:26:15.636 --> 00:26:17.706 A:middle
AR games are fun and playing

00:26:17.706 --> 00:26:18.896 A:middle
with friends makes them even

00:26:18.896 --> 00:26:19.286 A:middle
more fun.

00:26:20.666 --> 00:26:21.986 A:middle
Multiplayer can turn a simple

00:26:21.986 --> 00:26:23.386 A:middle
card matching game into a real

00:26:23.386 --> 00:26:25.766 A:middle
competition, however making a

00:26:25.766 --> 00:26:27.576 A:middle
multiplayer AR game comes with a

00:26:27.576 --> 00:26:28.986 A:middle
few additional challenges that

00:26:28.986 --> 00:26:30.476 A:middle
we don't encounter with non-AR

00:26:30.476 --> 00:26:30.886 A:middle
games.

00:26:32.076 --> 00:26:33.356 A:middle
When they place virtual objects

00:26:33.356 --> 00:26:35.056 A:middle
in the real world, we want them

00:26:35.056 --> 00:26:36.516 A:middle
to be in the same location for

00:26:36.516 --> 00:26:37.316 A:middle
everyone playing the game.

00:26:37.316 --> 00:26:39.966 A:middle
And because everyone is in the

00:26:39.966 --> 00:26:41.496 A:middle
same place, we want updates

00:26:41.536 --> 00:26:43.286 A:middle
between devices to be fast, to

00:26:43.286 --> 00:26:44.856 A:middle
maintain the shared illusion of

00:26:44.856 --> 00:26:45.236 A:middle
reality.

00:26:46.376 --> 00:26:47.506 A:middle
To enable this we built

00:26:47.506 --> 00:26:49.276 A:middle
RealityKit from the ground up to

00:26:49.276 --> 00:26:50.446 A:middle
support multiplayer AR.

00:26:51.386 --> 00:26:52.226 A:middle
Combined with ARKit's

00:26:52.226 --> 00:26:53.826 A:middle
Collaborative Session, also

00:26:53.826 --> 00:26:55.576 A:middle
introduced this year, this gives

00:26:55.576 --> 00:26:57.146 A:middle
you the tools you need to add

00:26:57.146 --> 00:26:59.036 A:middle
multi users support to your AR

00:26:59.036 --> 00:26:59.506 A:middle
experiences.

00:27:00.916 --> 00:27:02.146 A:middle
So let's take a look at what

00:27:02.146 --> 00:27:04.816 A:middle
multiplayer means for our game.

00:27:04.956 --> 00:27:05.976 A:middle
Both players will play

00:27:05.976 --> 00:27:07.986 A:middle
simultaneously and can turn over

00:27:07.986 --> 00:27:09.156 A:middle
cards at any time.

00:27:10.486 --> 00:27:11.596 A:middle
Everyone can see the reveal of

00:27:11.596 --> 00:27:11.986 A:middle
cards.

00:27:12.146 --> 00:27:13.896 A:middle
So you can gain an advantage if

00:27:13.896 --> 00:27:15.096 A:middle
you're paying attention to what

00:27:15.096 --> 00:27:16.346 A:middle
the other player is doing.

00:27:16.346 --> 00:27:18.726 A:middle
We'll also add a small white

00:27:18.726 --> 00:27:20.366 A:middle
circle to indicate to the player

00:27:20.636 --> 00:27:21.976 A:middle
which card they turned over.

00:27:25.176 --> 00:27:26.616 A:middle
Let's take a look at multiplayer

00:27:26.816 --> 00:27:27.456 A:middle
in RealityKit.

00:27:28.236 --> 00:27:29.786 A:middle
RealityKit provides automatic

00:27:29.916 --> 00:27:30.836 A:middle
scene synchronization.

00:27:31.676 --> 00:27:33.276 A:middle
Changes made automatically

00:27:33.276 --> 00:27:35.206 A:middle
update on all devices.

00:27:36.576 --> 00:27:38.136 A:middle
Leverages, device discovery, and

00:27:38.136 --> 00:27:39.346 A:middle
connection for multi peer

00:27:39.346 --> 00:27:39.836 A:middle
connectivity.

00:27:40.856 --> 00:27:42.316 A:middle
This makes it simple to find and

00:27:42.316 --> 00:27:43.406 A:middle
connect to nearby devices

00:27:44.096 --> 00:27:45.756 A:middle
without maintaining servers or

00:27:45.756 --> 00:27:46.846 A:middle
even connecting to the same

00:27:46.846 --> 00:27:47.476 A:middle
Wi-Fi network.

00:27:48.016 --> 00:27:49.966 A:middle
It provides an easy to use

00:27:49.966 --> 00:27:51.406 A:middle
ownership model allowing you to

00:27:51.406 --> 00:27:52.826 A:middle
control which peers are allowed

00:27:52.826 --> 00:27:54.376 A:middle
to change which entities.

00:27:55.006 --> 00:27:57.986 A:middle
And provides low latency even on

00:27:57.986 --> 00:27:59.466 A:middle
busy Wi-Fi networks, which is

00:27:59.466 --> 00:28:00.956 A:middle
essential for convincing AR

00:27:59.466 --> 00:28:00.956 A:middle
essential for convincing AR

00:28:00.956 --> 00:28:01.496 A:middle
experiences.

00:28:04.256 --> 00:28:05.826 A:middle
Let's go through the steps for

00:28:05.826 --> 00:28:07.246 A:middle
adopting multiplayer for our

00:28:07.246 --> 00:28:07.356 A:middle
game.

00:28:08.386 --> 00:28:09.786 A:middle
First we need to designate a

00:28:09.786 --> 00:28:10.156 A:middle
host.

00:28:10.526 --> 00:28:11.406 A:middle
We'll place the game board.

00:28:12.696 --> 00:28:13.826 A:middle
We'll ask the user to select

00:28:13.826 --> 00:28:15.756 A:middle
this at the game's main menu.

00:28:16.686 --> 00:28:18.486 A:middle
Then we connect the sessions so

00:28:18.486 --> 00:28:20.116 A:middle
that they can communicate with

00:28:20.116 --> 00:28:20.426 A:middle
each other.

00:28:21.686 --> 00:28:23.776 A:middle
We'll also enable ARkit's

00:28:23.776 --> 00:28:25.326 A:middle
Collaborative Session, which

00:28:25.326 --> 00:28:26.386 A:middle
enables our peers to create a

00:28:26.386 --> 00:28:27.726 A:middle
shared map of the environment.

00:28:28.826 --> 00:28:30.136 A:middle
And we'll create a synchronized

00:28:30.136 --> 00:28:31.966 A:middle
anchor, which attaches our game

00:28:31.966 --> 00:28:33.786 A:middle
board to a specific world

00:28:33.786 --> 00:28:35.566 A:middle
location and coordinated between

00:28:35.566 --> 00:28:35.956 A:middle
peers.

00:28:36.786 --> 00:28:38.476 A:middle
And last, we use ownership to

00:28:38.476 --> 00:28:39.676 A:middle
make changes to the game board

00:28:40.076 --> 00:28:41.366 A:middle
such as flipping over the cards

00:28:41.656 --> 00:28:42.316 A:middle
and removing them.

00:28:43.126 --> 00:28:45.166 A:middle
We've asked the user to choose

00:28:45.166 --> 00:28:46.356 A:middle
"host" or "join" from the main

00:28:46.356 --> 00:28:46.676 A:middle
menu.

00:28:47.406 --> 00:28:48.586 A:middle
Now we need to establish a

00:28:48.586 --> 00:28:49.056 A:middle
connection.

00:28:50.286 --> 00:28:51.506 A:middle
We use the multi peer

00:28:51.506 --> 00:28:53.936 A:middle
connectivity framework to get

00:28:53.936 --> 00:28:54.396 A:middle
connected.

00:28:54.396 --> 00:28:56.356 A:middle
We won't go into all of the

00:28:56.356 --> 00:28:57.416 A:middle
detail of multi peer

00:28:57.416 --> 00:28:58.946 A:middle
connectivity here, but if you

00:28:58.946 --> 00:28:59.996 A:middle
want to know more check out the

00:28:59.996 --> 00:29:02.246 A:middle
2014 session, Cross Platform

00:28:59.996 --> 00:29:02.246 A:middle
2014 session, Cross Platform

00:29:02.306 --> 00:29:03.006 A:middle
Nearby Networking.

00:29:04.186 --> 00:29:06.466 A:middle
First create an MCPeerID and

00:29:06.466 --> 00:29:06.876 A:middle
MCSession.

00:29:07.976 --> 00:29:09.426 A:middle
Be sure to enable encryption as

00:29:09.426 --> 00:29:10.556 A:middle
it's required for use with

00:29:10.556 --> 00:29:11.116 A:middle
RealityKit.

00:29:14.036 --> 00:29:14.966 A:middle
We'll check the user's role

00:29:14.966 --> 00:29:15.696 A:middle
before proceeding.

00:29:16.426 --> 00:29:17.586 A:middle
If they choose host we'll

00:29:17.586 --> 00:29:19.266 A:middle
advertise the session using

00:29:19.316 --> 00:29:21.166 A:middle
MCNearbyServiceAdvertiser.

00:29:21.906 --> 00:29:23.046 A:middle
This broadcast that we have an

00:29:23.046 --> 00:29:23.766 A:middle
available session.

00:29:24.416 --> 00:29:26.316 A:middle
The client creates an

00:29:26.396 --> 00:29:28.366 A:middle
MCNearbyServiceBrowser to start

00:29:28.366 --> 00:29:29.066 A:middle
looking for sessions.

00:29:29.936 --> 00:29:30.786 A:middle
And now that we have an

00:29:30.836 --> 00:29:32.796 A:middle
MCSession we need to instruct

00:29:32.796 --> 00:29:33.836 A:middle
RealityKit to use it for

00:29:33.836 --> 00:29:34.586 A:middle
synchronization.

00:29:35.406 --> 00:29:36.766 A:middle
We do this by creating a multi

00:29:36.806 --> 00:29:38.706 A:middle
peer connectivity service, which

00:29:38.706 --> 00:29:40.496 A:middle
is a RealityKit class that wraps

00:29:40.546 --> 00:29:42.126 A:middle
the MCSession and makes it

00:29:42.126 --> 00:29:43.086 A:middle
usable for scene

00:29:43.086 --> 00:29:43.726 A:middle
synchronization.

00:29:44.626 --> 00:29:45.966 A:middle
We'll create this and assign it

00:29:45.966 --> 00:29:47.316 A:middle
to the synchronization service

00:29:47.416 --> 00:29:50.136 A:middle
property on the scene.

00:29:50.316 --> 00:29:51.246 A:middle
Now we have two devices

00:29:51.246 --> 00:29:52.566 A:middle
connected and synching their

00:29:52.566 --> 00:29:52.836 A:middle
scene.

00:29:53.786 --> 00:29:55.246 A:middle
However, they don't yet know

00:29:55.246 --> 00:29:56.426 A:middle
where they are in the physical

00:29:56.426 --> 00:29:57.896 A:middle
world relative to each other.

00:29:59.076 --> 00:30:00.056 A:middle
Let's take advantage of the

00:29:59.076 --> 00:30:00.056 A:middle
Let's take advantage of the

00:30:00.056 --> 00:30:01.466 A:middle
collaborative session introduced

00:30:01.466 --> 00:30:03.226 A:middle
in ARKit 3, which is natively

00:30:03.226 --> 00:30:03.976 A:middle
supported by RealityKit.

00:30:05.486 --> 00:30:06.786 A:middle
Collaborative session lets us

00:30:06.786 --> 00:30:07.966 A:middle
build the world more quickly and

00:30:08.266 --> 00:30:09.776 A:middle
lets multiple users share the

00:30:09.776 --> 00:30:10.956 A:middle
same in world experience.

00:30:10.956 --> 00:30:13.646 A:middle
Since we want collaborative

00:30:13.646 --> 00:30:15.006 A:middle
mapping we need to turn it on.

00:30:15.646 --> 00:30:16.656 A:middle
We'll do this at the end of

00:30:16.656 --> 00:30:17.236 A:middle
viewDidLoad.

00:30:18.226 --> 00:30:19.976 A:middle
We create a new world tracking

00:30:19.976 --> 00:30:20.756 A:middle
configuration.

00:30:21.876 --> 00:30:24.016 A:middle
Set is collaboration enabled to

00:30:25.066 --> 00:30:27.166 A:middle
true, instruct AR Session to run

00:30:27.166 --> 00:30:27.916 A:middle
our configuration.

00:30:29.176 --> 00:30:30.736 A:middle
Now that we have collaborative

00:30:30.736 --> 00:30:32.346 A:middle
session enabled we can create a

00:30:32.346 --> 00:30:33.856 A:middle
synchronized anchor.

00:30:34.616 --> 00:30:36.436 A:middle
Previously we created an anchor

00:30:36.436 --> 00:30:38.266 A:middle
entity requesting any horizontal

00:30:38.266 --> 00:30:39.536 A:middle
plane that's at least 20

00:30:39.536 --> 00:30:40.536 A:middle
centimeters on a side.

00:30:41.386 --> 00:30:42.556 A:middle
With multiple players we want to

00:30:42.556 --> 00:30:43.586 A:middle
make sure the board is in a good

00:30:43.626 --> 00:30:44.876 A:middle
place for two players to walk

00:30:44.876 --> 00:30:45.206 A:middle
around.

00:30:45.676 --> 00:30:46.996 A:middle
To ensure this we'll ask the

00:30:46.996 --> 00:30:47.886 A:middle
host to place the board.

00:30:48.676 --> 00:30:49.926 A:middle
And since we want the same world

00:30:49.926 --> 00:30:51.636 A:middle
position on both peers, we'll

00:30:51.636 --> 00:30:53.086 A:middle
ask ARkit to synchronize this

00:30:53.086 --> 00:30:53.376 A:middle
anchor.

00:30:54.396 --> 00:30:54.976 A:middle
How do we do this?

00:30:58.416 --> 00:31:00.516 A:middle
On the host, we'll use the same

00:30:58.416 --> 00:31:00.516 A:middle
On the host, we'll use the same

00:31:00.516 --> 00:31:02.066 A:middle
onTap handler as before.

00:31:03.106 --> 00:31:04.186 A:middle
We want to pick a spot that's

00:31:04.186 --> 00:31:04.816 A:middle
good for everybody.

00:31:05.076 --> 00:31:06.486 A:middle
So we'll raycast into the real

00:31:06.526 --> 00:31:06.736 A:middle
world.

00:31:07.926 --> 00:31:09.416 A:middle
This is similar to the hit test

00:31:09.416 --> 00:31:11.296 A:middle
Ross showed us earlier, however

00:31:11.496 --> 00:31:12.546 A:middle
this one is run against an

00:31:12.546 --> 00:31:14.006 A:middle
estimation of the real world

00:31:14.456 --> 00:31:15.696 A:middle
rather than virtual objects.

00:31:16.236 --> 00:31:17.926 A:middle
Our game board needs to go on a

00:31:17.926 --> 00:31:19.726 A:middle
flat surface, so we're asking

00:31:19.726 --> 00:31:20.916 A:middle
for a horizontal plane.

00:31:21.576 --> 00:31:24.226 A:middle
If it finds a horizontal plane

00:31:24.696 --> 00:31:25.976 A:middle
we'll take the world transform

00:31:25.976 --> 00:31:27.176 A:middle
and use it to create an AR

00:31:27.176 --> 00:31:27.516 A:middle
anchor.

00:31:28.206 --> 00:31:30.146 A:middle
This is an ARkit anchor, which

00:31:30.146 --> 00:31:31.296 A:middle
we add to the AR session

00:31:31.436 --> 00:31:32.286 A:middle
provided by the view.

00:31:33.126 --> 00:31:34.516 A:middle
And this creates a synchronized

00:31:34.516 --> 00:31:36.796 A:middle
anchor whose real world position

00:31:36.796 --> 00:31:38.266 A:middle
will be coordinated by ARkit.

00:31:39.696 --> 00:31:41.416 A:middle
Using that AR anchor we'll

00:31:41.416 --> 00:31:42.356 A:middle
create a RealityKit anchor

00:31:42.356 --> 00:31:42.736 A:middle
entity.

00:31:43.426 --> 00:31:44.936 A:middle
This is our bridge between ARkit

00:31:45.106 --> 00:31:47.026 A:middle
and RealityKit and allows us to

00:31:47.026 --> 00:31:47.706 A:middle
attach our card.

00:31:47.706 --> 00:31:50.086 A:middle
And then we have the game board,

00:31:50.236 --> 00:31:51.276 A:middle
as Ross showed us earlier.

00:31:52.326 --> 00:31:53.506 A:middle
Only the host needs to build the

00:31:53.506 --> 00:31:54.326 A:middle
randomized board.

00:31:55.146 --> 00:31:56.116 A:middle
Everyone else receives it

00:31:56.116 --> 00:31:57.606 A:middle
automatically via network

00:31:57.606 --> 00:31:58.266 A:middle
synchronization.

00:31:59.526 --> 00:32:00.636 A:middle
The models we loaded aren't

00:31:59.526 --> 00:32:00.636 A:middle
The models we loaded aren't

00:32:00.636 --> 00:32:01.716 A:middle
synchronized as part of the

00:32:01.716 --> 00:32:02.996 A:middle
scene because that would be

00:32:02.996 --> 00:32:03.506 A:middle
loads of data.

00:32:04.446 --> 00:32:05.666 A:middle
Remember when Ross showed us how

00:32:05.666 --> 00:32:07.286 A:middle
to load the card templates?

00:32:07.606 --> 00:32:08.696 A:middle
Make sure we still do this on

00:32:08.696 --> 00:32:09.296 A:middle
all appearance.

00:32:10.046 --> 00:32:11.166 A:middle
And that's enough to get our

00:32:11.166 --> 00:32:12.396 A:middle
game running.

00:32:15.206 --> 00:32:16.676 A:middle
On the left we can see that the

00:32:16.676 --> 00:32:17.766 A:middle
host has placed the board and

00:32:18.056 --> 00:32:18.986 A:middle
the client can see it.

00:32:19.476 --> 00:32:20.676 A:middle
It's in the same real world

00:32:20.676 --> 00:32:21.106 A:middle
location.

00:32:22.076 --> 00:32:23.386 A:middle
Watch as the host flips over one

00:32:23.386 --> 00:32:24.846 A:middle
of the objects and then another.

00:32:25.456 --> 00:32:26.536 A:middle
OK, not a match.

00:32:27.206 --> 00:32:28.226 A:middle
Notice how it's automatically

00:32:28.226 --> 00:32:29.656 A:middle
reflected on the client and how

00:32:29.656 --> 00:32:30.856 A:middle
smooth the animation is.

00:32:31.526 --> 00:32:32.366 A:middle
No network program here

00:32:32.366 --> 00:32:32.796 A:middle
required.

00:32:33.776 --> 00:32:34.766 A:middle
Now watch as the client flips

00:32:34.766 --> 00:32:35.836 A:middle
over one of the cards.

00:32:36.396 --> 00:32:38.626 A:middle
it flips over in their screen

00:32:39.076 --> 00:32:40.266 A:middle
but not on the hosts.

00:32:40.776 --> 00:32:41.926 A:middle
To explain what's happening I

00:32:41.926 --> 00:32:43.066 A:middle
need to introduce you to

00:32:43.066 --> 00:32:43.476 A:middle
ownership.

00:32:44.046 --> 00:32:45.696 A:middle
What is ownership?

00:32:46.596 --> 00:32:47.976 A:middle
It's the right to modify an

00:32:47.976 --> 00:32:48.386 A:middle
entity.

00:32:49.636 --> 00:32:51.496 A:middle
In a shared session an entity

00:32:51.496 --> 00:32:53.536 A:middle
has one owner at a time, which

00:32:53.536 --> 00:32:54.816 A:middle
defaults to whomever created the

00:32:54.816 --> 00:32:55.256 A:middle
entity.

00:32:56.056 --> 00:32:58.246 A:middle
In our case that's the host.

00:33:00.226 --> 00:33:02.276 A:middle
Ownership is transferable, which

00:33:02.276 --> 00:33:03.086 A:middle
is how you can allow other

00:33:03.176 --> 00:33:04.216 A:middle
players to make changes.

00:33:05.006 --> 00:33:06.266 A:middle
And ownership transfer is

00:33:06.266 --> 00:33:08.486 A:middle
configurable so you can decide

00:33:08.486 --> 00:33:09.196 A:middle
which entities can be

00:33:09.196 --> 00:33:10.836 A:middle
transferred and at what times.

00:33:11.926 --> 00:33:13.416 A:middle
To illustrate ownership let's

00:33:13.416 --> 00:33:14.486 A:middle
look at what's happening in our

00:33:14.486 --> 00:33:14.686 A:middle
game.

00:33:17.006 --> 00:33:18.096 A:middle
The host creates the cards,

00:33:18.546 --> 00:33:19.546 A:middle
which means it owns them.

00:33:20.126 --> 00:33:22.106 A:middle
And the cards automatically show

00:33:22.106 --> 00:33:22.866 A:middle
up on the client.

00:33:23.426 --> 00:33:25.506 A:middle
When the owner of an entity

00:33:25.506 --> 00:33:27.146 A:middle
makes the change, such as

00:33:27.146 --> 00:33:29.306 A:middle
flipping it over, this change is

00:33:29.306 --> 00:33:30.786 A:middle
sent to the client and reflected

00:33:30.786 --> 00:33:31.316 A:middle
in their scene.

00:33:32.486 --> 00:33:33.666 A:middle
Since RealityKit has been built

00:33:33.666 --> 00:33:34.696 A:middle
from the ground up for

00:33:34.696 --> 00:33:36.036 A:middle
multiplayer, we're only

00:33:36.106 --> 00:33:37.326 A:middle
synchronizing the instruction to

00:33:37.326 --> 00:33:38.736 A:middle
animate, rather than to

00:33:38.736 --> 00:33:39.906 A:middle
transform every frame.

00:33:40.506 --> 00:33:41.876 A:middle
This is why it looks so smooth

00:33:41.876 --> 00:33:42.406 A:middle
on the client.

00:33:43.126 --> 00:33:45.156 A:middle
Now the client flips over our

00:33:45.156 --> 00:33:45.476 A:middle
card.

00:33:46.506 --> 00:33:47.756 A:middle
Since the client does not own

00:33:47.756 --> 00:33:49.756 A:middle
the entity, the change will not

00:33:49.756 --> 00:33:50.466 A:middle
get sent to peers.

00:33:51.616 --> 00:33:52.596 A:middle
While it's still allowed to make

00:33:52.626 --> 00:33:53.956 A:middle
the changes locally, they're

00:33:53.956 --> 00:33:55.696 A:middle
likely to get overwritten the

00:33:55.696 --> 00:33:56.706 A:middle
next time the owner sends an

00:33:56.706 --> 00:33:57.076 A:middle
update.

00:33:58.096 --> 00:33:59.456 A:middle
This presents a dilemma because

00:33:59.456 --> 00:34:00.586 A:middle
we do want to make changes to

00:33:59.456 --> 00:34:00.586 A:middle
we do want to make changes to

00:34:00.586 --> 00:34:00.956 A:middle
the card.

00:34:01.696 --> 00:34:03.036 A:middle
So let's go back a step before

00:34:03.036 --> 00:34:04.406 A:middle
the client had turned over the

00:34:04.406 --> 00:34:04.746 A:middle
robot.

00:34:05.956 --> 00:34:06.796 A:middle
So I mentioned earlier,

00:34:07.716 --> 00:34:08.766 A:middle
ownership can be transferred.

00:34:09.476 --> 00:34:11.315 A:middle
Any peer can request ownership

00:34:11.315 --> 00:34:11.896 A:middle
of an entity.

00:34:12.726 --> 00:34:13.815 A:middle
Let's have the client request

00:34:13.815 --> 00:34:15.275 A:middle
ownership of a yellow robot

00:34:15.626 --> 00:34:16.806 A:middle
before making its changes.

00:34:18.106 --> 00:34:19.456 A:middle
It sends a request to the host

00:34:19.806 --> 00:34:20.726 A:middle
asking for ownership.

00:34:21.826 --> 00:34:23.036 A:middle
The entities owner decides

00:34:23.036 --> 00:34:24.166 A:middle
whether to allow the transfer.

00:34:24.755 --> 00:34:26.076 A:middle
It may decline if a different

00:34:26.076 --> 00:34:28.186 A:middle
peer requested ownership or if

00:34:28.186 --> 00:34:29.446 A:middle
the object's transfer mode was

00:34:29.446 --> 00:34:29.826 A:middle
changed.

00:34:30.835 --> 00:34:32.565 A:middle
Since from the default state the

00:34:32.565 --> 00:34:34.496 A:middle
host accepts the request and

00:34:34.496 --> 00:34:35.846 A:middle
ownership is transferred to the

00:34:35.846 --> 00:34:36.176 A:middle
client.

00:34:37.286 --> 00:34:38.856 A:middle
The client is now free to make

00:34:38.856 --> 00:34:39.726 A:middle
changes to the card.

00:34:40.505 --> 00:34:42.136 A:middle
We can reveal the card and the

00:34:42.136 --> 00:34:43.766 A:middle
changes will be reflected on the

00:34:43.766 --> 00:34:44.186 A:middle
host.

00:34:45.206 --> 00:34:46.446 A:middle
And we've made this simple to

00:34:46.446 --> 00:34:46.716 A:middle
use.

00:34:47.255 --> 00:34:50.306 A:middle
The client starts by requesting

00:34:50.306 --> 00:34:51.496 A:middle
ownership of the entity.

00:34:52.485 --> 00:34:53.766 A:middle
If we all ready own the object

00:34:54.076 --> 00:34:54.516 A:middle
that's fine.

00:34:55.176 --> 00:34:56.246 A:middle
The request will be granted

00:34:56.246 --> 00:34:57.586 A:middle
without doing any additional

00:34:58.166 --> 00:34:58.266 A:middle
work.

00:34:59.236 --> 00:35:00.106 A:middle
When the ownership request

00:34:59.236 --> 00:35:00.106 A:middle
When the ownership request

00:35:00.106 --> 00:35:01.586 A:middle
returns we'll be informed

00:35:01.586 --> 00:35:02.926 A:middle
whether the ownership was

00:35:02.926 --> 00:35:03.266 A:middle
granted.

00:35:04.046 --> 00:35:05.846 A:middle
If it was, we'll call reveal on

00:35:05.846 --> 00:35:06.966 A:middle
the card to flip it over.

00:35:07.996 --> 00:35:09.156 A:middle
However, if the request was

00:35:09.196 --> 00:35:10.676 A:middle
denied, for example someone else

00:35:10.676 --> 00:35:12.166 A:middle
turned it over, we'll give the

00:35:12.166 --> 00:35:13.646 A:middle
user the opportunity to select a

00:35:13.646 --> 00:35:14.176 A:middle
different card.

00:35:15.246 --> 00:35:16.246 A:middle
And that's all we need to flip

00:35:16.246 --> 00:35:17.746 A:middle
over the card and see it on both

00:35:17.746 --> 00:35:18.096 A:middle
peers.

00:35:18.676 --> 00:35:19.706 A:middle
But we want to go one step

00:35:19.766 --> 00:35:20.006 A:middle
further.

00:35:21.006 --> 00:35:22.466 A:middle
While the card is revealed, we

00:35:22.466 --> 00:35:24.236 A:middle
want to keep ownership of it.

00:35:24.966 --> 00:35:26.666 A:middle
We want to deny any requests to

00:35:26.666 --> 00:35:28.196 A:middle
take ownership while we have it

00:35:28.196 --> 00:35:28.606 A:middle
revealed.

00:35:29.576 --> 00:35:30.776 A:middle
We'll go back to our reveal

00:35:30.776 --> 00:35:30.956 A:middle
method.

00:35:33.066 --> 00:35:34.656 A:middle
Here's where we previously set

00:35:34.826 --> 00:35:36.116 A:middle
the revealed property to true.

00:35:37.166 --> 00:35:38.436 A:middle
Because we adopted the codable

00:35:38.436 --> 00:35:40.856 A:middle
protocol on card component, this

00:35:40.926 --> 00:35:42.286 A:middle
automatically updates on other

00:35:42.286 --> 00:35:42.686 A:middle
peers.

00:35:42.936 --> 00:35:43.896 A:middle
There's nothing else to do.

00:35:44.546 --> 00:35:46.726 A:middle
And after we change the cards

00:35:46.726 --> 00:35:48.916 A:middle
revealed property to true, set

00:35:48.916 --> 00:35:49.996 A:middle
the ownership transfer mode to

00:35:49.996 --> 00:35:50.316 A:middle
manual.

00:35:51.036 --> 00:35:52.936 A:middle
This automatically denies any

00:35:52.936 --> 00:35:56.226 A:middle
requests to transfer the entity.

00:35:56.486 --> 00:35:57.756 A:middle
When we flip the object back to

00:35:57.756 --> 00:35:59.096 A:middle
hidden we'll want to start

00:35:59.096 --> 00:36:00.286 A:middle
accepting requests for

00:35:59.096 --> 00:36:00.286 A:middle
accepting requests for

00:36:00.286 --> 00:36:00.656 A:middle
ownership.

00:36:02.036 --> 00:36:03.046 A:middle
This is what the hide method

00:36:03.046 --> 00:36:03.566 A:middle
might look like.

00:36:04.856 --> 00:36:05.846 A:middle
After changing revealed to

00:36:05.896 --> 00:36:07.776 A:middle
false, we changed the ownership

00:36:07.776 --> 00:36:09.476 A:middle
transfer mode to auto accept.

00:36:10.286 --> 00:36:11.776 A:middle
This will instruct RealityKit to

00:36:11.776 --> 00:36:13.126 A:middle
accept transfer requests for

00:36:13.126 --> 00:36:14.806 A:middle
this entity automatically.

00:36:16.096 --> 00:36:17.056 A:middle
One thing that's worth pointing

00:36:17.056 --> 00:36:19.166 A:middle
out -- the host isn't special

00:36:19.296 --> 00:36:20.196 A:middle
when it comes to ownership

00:36:21.036 --> 00:36:22.786 A:middle
because it placed the board, it

00:36:22.926 --> 00:36:24.506 A:middle
initially owned all the cards,

00:36:25.096 --> 00:36:26.756 A:middle
but otherwise behaves like any

00:36:26.756 --> 00:36:28.086 A:middle
other peer.

00:36:28.406 --> 00:36:29.676 A:middle
Once an object is transferred,

00:36:29.886 --> 00:36:30.946 A:middle
if the host wants to turn it

00:36:30.946 --> 00:36:32.836 A:middle
over it needs to request it too.

00:36:34.006 --> 00:36:34.756 A:middle
You can use the ownership

00:36:34.756 --> 00:36:36.046 A:middle
transfer mode to change this

00:36:36.046 --> 00:36:37.306 A:middle
behavior to suit your app.

00:36:38.336 --> 00:36:39.636 A:middle
And there's one last detail for

00:36:40.336 --> 00:36:41.136 A:middle
our app.

00:36:41.396 --> 00:36:42.326 A:middle
When you play with two or more

00:36:42.326 --> 00:36:43.596 A:middle
players you'll notice that the

00:36:43.596 --> 00:36:44.406 A:middle
board can get a little

00:36:44.406 --> 00:36:44.976 A:middle
confusing.

00:36:45.516 --> 00:36:47.096 A:middle
It could be hard to know what

00:36:47.096 --> 00:36:48.296 A:middle
piece you've selected and which

00:36:48.296 --> 00:36:49.586 A:middle
ones were selected by others.

00:36:50.246 --> 00:36:51.636 A:middle
We'd like to add a transparent

00:36:51.636 --> 00:36:53.026 A:middle
disk to display our selection.

00:36:53.936 --> 00:36:55.946 A:middle
As we've seen, everything gets

00:36:55.946 --> 00:36:56.296 A:middle
shared.

00:36:56.596 --> 00:36:57.846 A:middle
So that will show for everyone

00:36:57.846 --> 00:36:59.076 A:middle
and defeat its purpose.

00:37:00.426 --> 00:37:02.256 A:middle
Fortunately, RealityKit supports

00:37:02.256 --> 00:37:03.366 A:middle
local-only entities.

00:37:04.206 --> 00:37:05.636 A:middle
This is ideal for displaying

00:37:05.636 --> 00:37:07.086 A:middle
selection indicators or hidden

00:37:07.086 --> 00:37:08.576 A:middle
information like your hand in

00:37:08.576 --> 00:37:08.916 A:middle
poker.

00:37:09.876 --> 00:37:11.226 A:middle
And we do this by removing the

00:37:11.226 --> 00:37:12.926 A:middle
synchronization component and

00:37:12.926 --> 00:37:14.566 A:middle
otherwise handling the entity

00:37:14.566 --> 00:37:15.266 A:middle
like any other.

00:37:15.896 --> 00:37:19.166 A:middle
If the entity has children, they

00:37:19.166 --> 00:37:20.286 A:middle
will be unshared as well.

00:37:20.776 --> 00:37:21.866 A:middle
This can be useful to make an

00:37:21.866 --> 00:37:23.716 A:middle
entire tree of entities local

00:37:23.716 --> 00:37:23.996 A:middle
only.

00:37:25.316 --> 00:37:26.936 A:middle
While I'm not showing it here,

00:37:26.936 --> 00:37:28.346 A:middle
I've created a selection entity

00:37:28.346 --> 00:37:29.526 A:middle
class that represents our

00:37:29.526 --> 00:37:30.036 A:middle
selection.

00:37:30.736 --> 00:37:32.186 A:middle
It's initializer adds a white

00:37:32.466 --> 00:37:33.746 A:middle
slightly transparent disk.

00:37:35.046 --> 00:37:35.986 A:middle
Let's take a look at adding it

00:37:35.986 --> 00:37:37.356 A:middle
to our reveal method from

00:37:37.356 --> 00:37:37.536 A:middle
earlier.

00:37:38.176 --> 00:37:40.606 A:middle
We create the entity and

00:37:40.606 --> 00:37:41.996 A:middle
position it slightly above the

00:37:41.996 --> 00:37:42.316 A:middle
card.

00:37:43.516 --> 00:37:45.166 A:middle
Then we assign nil to the

00:37:45.166 --> 00:37:46.196 A:middle
synchronization component.

00:37:46.866 --> 00:37:48.176 A:middle
This instructs RealityKit that

00:37:48.176 --> 00:37:49.046 A:middle
we do not want to share this

00:37:49.046 --> 00:37:49.466 A:middle
entity.

00:37:50.226 --> 00:37:51.756 A:middle
And we add the child normally to

00:37:52.196 --> 00:37:53.106 A:middle
enter the hierarchy.

00:37:54.206 --> 00:37:55.416 A:middle
Now that we've added it in

00:37:55.416 --> 00:37:56.946 A:middle
reveal, we need to remove it

00:37:57.016 --> 00:37:57.806 A:middle
when we hide the card.

00:37:58.336 --> 00:38:00.686 A:middle
Here's the hide method from

00:37:58.336 --> 00:38:00.686 A:middle
Here's the hide method from

00:38:01.356 --> 00:38:01.506 A:middle
earlier.

00:38:02.766 --> 00:38:04.026 A:middle
After changing other properties,

00:38:04.316 --> 00:38:05.486 A:middle
we'll iterate over the children

00:38:05.746 --> 00:38:06.416 A:middle
with the for loop.

00:38:07.256 --> 00:38:08.796 A:middle
We can use the where clause to

00:38:08.796 --> 00:38:10.086 A:middle
look for entities of type

00:38:10.186 --> 00:38:11.026 A:middle
selection entity.

00:38:12.206 --> 00:38:14.016 A:middle
Once we find it we'll remove it

00:38:14.016 --> 00:38:14.556 A:middle
from its parent.

00:38:15.416 --> 00:38:16.336 A:middle
Since we know there can only be

00:38:16.336 --> 00:38:17.896 A:middle
one selection entity, we'll

00:38:17.896 --> 00:38:18.606 A:middle
break out of the loop.

00:38:19.096 --> 00:38:21.126 A:middle
And that's it.

00:38:21.456 --> 00:38:22.266 A:middle
We're handling ownership

00:38:22.266 --> 00:38:23.926 A:middle
correctly and adding or removing

00:38:23.926 --> 00:38:25.656 A:middle
a local entity for selection.

00:38:25.966 --> 00:38:27.886 A:middle
Our game now works correctly

00:38:27.886 --> 00:38:28.816 A:middle
across two devices.

00:38:29.706 --> 00:38:30.966 A:middle
And while we've demonstrated

00:38:30.966 --> 00:38:31.846 A:middle
using two devices for

00:38:31.846 --> 00:38:33.446 A:middle
simplicity, we can actually

00:38:33.446 --> 00:38:35.676 A:middle
support more devices without any

00:38:35.676 --> 00:38:36.906 A:middle
additional code.

00:38:42.906 --> 00:38:43.996 A:middle
Let's look back at what we've

00:38:44.036 --> 00:38:44.316 A:middle
learned.

00:38:44.876 --> 00:38:46.236 A:middle
Today we've shown you how

00:38:46.236 --> 00:38:47.696 A:middle
RealityKit makes building AR

00:38:47.696 --> 00:38:49.236 A:middle
Apps easy and fast.

00:38:50.486 --> 00:38:51.506 A:middle
We've covered how to place

00:38:51.506 --> 00:38:53.656 A:middle
content with anchoring, load

00:38:53.656 --> 00:38:55.246 A:middle
assets both synchronous and

00:38:55.246 --> 00:38:57.446 A:middle
asynchronously, integrate

00:38:57.446 --> 00:38:59.176 A:middle
interaction in hit testing,

00:39:00.266 --> 00:39:01.346 A:middle
create custom components in

00:39:01.346 --> 00:39:03.196 A:middle
entities, and how to add

00:39:03.196 --> 00:39:04.916 A:middle
multiplayer to augmented reality

00:39:04.916 --> 00:39:05.506 A:middle
experiences.

00:39:06.506 --> 00:39:07.506 A:middle
I hope that we've given you a

00:39:07.506 --> 00:39:08.746 A:middle
better understanding of what

00:39:08.746 --> 00:39:10.236 A:middle
RealityKit is and what it

00:39:10.236 --> 00:39:10.626 A:middle
provides.

00:39:11.386 --> 00:39:12.846 A:middle
We can't wait to see what you do

00:39:12.846 --> 00:39:13.806 A:middle
with it.

00:39:14.616 --> 00:39:16.246 A:middle
For more information and access

00:39:16.296 --> 00:39:18.036 A:middle
to this session video check out

00:39:18.036 --> 00:39:18.966 A:middle
this session webpage.

00:39:19.916 --> 00:39:21.076 A:middle
Also check out Introducing

00:39:21.076 --> 00:39:22.686 A:middle
RealityKit and Reality Composer

00:39:22.956 --> 00:39:23.786 A:middle
for more information on

00:39:23.786 --> 00:39:25.526 A:middle
RealityKit and don't miss

00:39:25.526 --> 00:39:27.506 A:middle
Introducing ARkit 3 to learn

00:39:27.506 --> 00:39:28.816 A:middle
more about collaborative session

00:39:29.146 --> 00:39:30.116 A:middle
and other new features.

00:39:31.326 --> 00:39:32.276 A:middle
And be sure to catch us in the

00:39:32.276 --> 00:39:34.886 A:middle
labs today at noon and tomorrow

00:39:34.886 --> 00:39:35.506 A:middle
at 3:00 PM.

00:39:36.966 --> 00:39:38.266 A:middle
Thanks everyone and please enjoy

00:39:38.266 --> 00:39:38.976 A:middle
the rest of the conference.

00:39:39.516 --> 00:39:42.500 A:middle
[ Applause ]
