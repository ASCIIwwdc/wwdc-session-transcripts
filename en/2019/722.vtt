WEBVTT

00:00:01.516 --> 00:00:04.500 A:middle
[ Music ]

00:00:12.516 --> 00:00:14.626 A:middle
[ Applause ]

00:00:15.126 --> 00:00:16.916 A:middle
&gt;&gt; Hello. Thank you.

00:00:17.546 --> 00:00:18.816 A:middle
My name is Tony Parker, I'm the

00:00:18.816 --> 00:00:19.986 A:middle
manager of the Foundation Team

00:00:19.986 --> 00:00:21.866 A:middle
at Apple, and today I'm excited

00:00:21.866 --> 00:00:22.856 A:middle
to have the privilege to

00:00:22.856 --> 00:00:23.926 A:middle
introduce you to our newest

00:00:23.926 --> 00:00:24.436 A:middle
framework.

00:00:24.526 --> 00:00:25.696 A:middle
It's called Combine.

00:00:26.556 --> 00:00:27.816 A:middle
Let's talk about asynchronous

00:00:27.816 --> 00:00:28.246 A:middle
programing.

00:00:29.536 --> 00:00:30.706 A:middle
Here I have an app that I'm

00:00:30.706 --> 00:00:32.256 A:middle
working on that allows students

00:00:32.256 --> 00:00:34.016 A:middle
to sign up for my brand-new

00:00:34.016 --> 00:00:34.866 A:middle
wizarding school.

00:00:35.266 --> 00:00:36.156 A:middle
And as you can see, it's got

00:00:36.156 --> 00:00:37.446 A:middle
some pretty simple requirements.

00:00:38.316 --> 00:00:39.536 A:middle
First, we need to have a valid

00:00:39.536 --> 00:00:40.696 A:middle
username which we're going to

00:00:40.696 --> 00:00:41.816 A:middle
check by making a network

00:00:41.816 --> 00:00:43.016 A:middle
request to our server.

00:00:43.526 --> 00:00:44.526 A:middle
We also need of course to have

00:00:44.526 --> 00:00:45.736 A:middle
matching passwords which is

00:00:45.736 --> 00:00:46.656 A:middle
something that we can check

00:00:46.656 --> 00:00:47.546 A:middle
locally in the app.

00:00:48.396 --> 00:00:49.336 A:middle
And while we do all of these

00:00:49.336 --> 00:00:50.256 A:middle
things, of course we need to

00:00:50.256 --> 00:00:51.896 A:middle
maintain a responsive user

00:00:51.896 --> 00:00:53.446 A:middle
interface, not blocking the main

00:00:53.446 --> 00:00:53.786 A:middle
thread.

00:00:54.346 --> 00:00:56.386 A:middle
So let's try using it and see

00:00:56.386 --> 00:00:57.016 A:middle
how this works.

00:00:57.776 --> 00:00:59.726 A:middle
First, I'm going to start typing

00:00:59.726 --> 00:01:01.506 A:middle
the username like, I don't know.

00:00:59.726 --> 00:01:01.506 A:middle
the username like, I don't know.

00:01:01.506 --> 00:01:02.386 A:middle
How about Merlin.

00:01:02.706 --> 00:01:04.126 A:middle
Seems like a pretty good wizard

00:01:04.126 --> 00:01:04.406 A:middle
name.

00:01:04.896 --> 00:01:06.236 A:middle
And already there's plenty of

00:01:06.236 --> 00:01:08.046 A:middle
asynchronous behaviors going on.

00:01:08.306 --> 00:01:09.996 A:middle
I used Target/Action to listen

00:01:09.996 --> 00:01:11.586 A:middle
for notifications about the user

00:01:11.586 --> 00:01:12.036 A:middle
typing.

00:01:12.726 --> 00:01:14.576 A:middle
I use a timer to wait for the

00:01:14.576 --> 00:01:16.126 A:middle
user to stop typing just for a

00:01:16.126 --> 00:01:18.566 A:middle
little bit so I don't overwhelm

00:01:18.726 --> 00:01:20.286 A:middle
my server with network requests.

00:01:20.776 --> 00:01:21.846 A:middle
And finally, I use something

00:01:21.846 --> 00:01:23.526 A:middle
like KVO to listen for progress

00:01:23.526 --> 00:01:24.996 A:middle
updates about that asynchronous

00:01:24.996 --> 00:01:25.606 A:middle
operation.

00:01:25.956 --> 00:01:28.536 A:middle
Now if we continue, we'll find

00:01:28.536 --> 00:01:29.646 A:middle
out that we get a response from

00:01:29.646 --> 00:01:30.986 A:middle
that request and we have to

00:01:30.986 --> 00:01:31.496 A:middle
update our UI.

00:01:31.496 --> 00:01:33.596 A:middle
So I pick a new username and

00:01:33.596 --> 00:01:35.146 A:middle
then my super-secret secure

00:01:35.146 --> 00:01:37.056 A:middle
password of 12345.

00:01:37.586 --> 00:01:38.506 A:middle
Please don't use that password,

00:01:38.506 --> 00:01:39.556 A:middle
just for demo purposes.

00:01:40.966 --> 00:01:42.716 A:middle
But here now we've done a lot

00:01:42.716 --> 00:01:43.756 A:middle
more asynchronous work.

00:01:43.816 --> 00:01:45.346 A:middle
We had to wait for the response

00:01:45.346 --> 00:01:46.786 A:middle
for our URL session request.

00:01:47.226 --> 00:01:49.306 A:middle
We had to merge that result with

00:01:49.436 --> 00:01:50.566 A:middle
the result of our synchronous

00:01:50.566 --> 00:01:52.236 A:middle
checking and finally I had to do

00:01:52.236 --> 00:01:53.576 A:middle
all of those things -- once all

00:01:53.576 --> 00:01:54.636 A:middle
of those things were completed,

00:01:54.636 --> 00:01:56.396 A:middle
I had to update my UI again

00:01:56.396 --> 00:01:57.706 A:middle
using something like KVC.

00:02:00.446 --> 00:02:02.126 A:middle
So across the Cocoa SDK you'll

00:02:02.126 --> 00:02:04.266 A:middle
find plenty of asynchronous

00:02:04.266 --> 00:02:04.956 A:middle
interfaces.

00:02:05.216 --> 00:02:06.166 A:middle
Some you saw here like

00:02:06.166 --> 00:02:07.596 A:middle
Target/Action, but there's a lot

00:02:07.596 --> 00:02:08.346 A:middle
more, including

00:02:08.346 --> 00:02:10.106 A:middle
NotificationCenter and lots of

00:02:10.106 --> 00:02:11.136 A:middle
ad-hoc callbacks.

00:02:11.136 --> 00:02:12.326 A:middle
These are API's that take a

00:02:12.326 --> 00:02:13.906 A:middle
closure or completion block.

00:02:14.286 --> 00:02:15.076 A:middle
All of these things have

00:02:15.076 --> 00:02:16.566 A:middle
important and different use

00:02:16.566 --> 00:02:17.036 A:middle
cases.

00:02:17.526 --> 00:02:18.546 A:middle
But sometimes when you need to

00:02:18.546 --> 00:02:20.086 A:middle
compose them together, it can be

00:02:20.086 --> 00:02:20.956 A:middle
a little bit challenging.

00:02:21.846 --> 00:02:23.846 A:middle
So with Combine we set out not

00:02:23.846 --> 00:02:25.386 A:middle
to replace all of these but

00:02:25.386 --> 00:02:26.906 A:middle
instead to find what was common

00:02:26.906 --> 00:02:27.486 A:middle
amongst them.

00:02:28.256 --> 00:02:30.056 A:middle
And that's what Combine is, a

00:02:30.056 --> 00:02:31.916 A:middle
unified declarative API for

00:02:32.376 --> 00:02:34.476 A:middle
processing values over time.

00:02:35.036 --> 00:02:37.376 A:middle
Combine is written in and for

00:02:37.376 --> 00:02:37.756 A:middle
Swift.

00:02:38.256 --> 00:02:39.506 A:middle
That means we can take advantage

00:02:39.556 --> 00:02:41.396 A:middle
of Swift features like Generics.

00:02:42.006 --> 00:02:43.166 A:middle
Generics let us reduce the

00:02:43.166 --> 00:02:44.696 A:middle
amount of boilerplate code that

00:02:44.696 --> 00:02:45.276 A:middle
you need to write.

00:02:45.886 --> 00:02:47.056 A:middle
It also means that we can write

00:02:47.266 --> 00:02:48.716 A:middle
generic algorithms about

00:02:48.716 --> 00:02:50.386 A:middle
asynchronous behaviors once and

00:02:50.386 --> 00:02:52.016 A:middle
have them apply to all kinds of

00:02:52.016 --> 00:02:52.856 A:middle
different asynchronous

00:02:52.856 --> 00:02:53.516 A:middle
interfaces.

00:02:54.896 --> 00:02:56.456 A:middle
Combine is also type safe,

00:02:56.596 --> 00:02:58.096 A:middle
allowing us to catch errors at

00:02:58.246 --> 00:02:59.606 A:middle
compile time instead of at

00:02:59.606 --> 00:02:59.886 A:middle
runtime.

00:02:59.886 --> 00:03:02.556 A:middle
Our main design point about

00:02:59.886 --> 00:03:02.556 A:middle
Our main design point about

00:03:02.556 --> 00:03:03.556 A:middle
Combine is that it is

00:03:03.556 --> 00:03:04.656 A:middle
composition first.

00:03:05.056 --> 00:03:06.956 A:middle
What that means is that the core

00:03:06.956 --> 00:03:08.436 A:middle
concepts are simple and easy to

00:03:08.436 --> 00:03:09.936 A:middle
understand, but when you put

00:03:09.936 --> 00:03:11.166 A:middle
them together, you can make

00:03:11.166 --> 00:03:12.246 A:middle
something that's more than the

00:03:12.246 --> 00:03:13.146 A:middle
sum of its parts.

00:03:14.276 --> 00:03:15.366 A:middle
And finally, Combine is

00:03:15.406 --> 00:03:17.716 A:middle
request-driven, allowing you the

00:03:17.716 --> 00:03:19.046 A:middle
opportunity to more carefully

00:03:19.046 --> 00:03:20.456 A:middle
manage the memory usage and

00:03:20.456 --> 00:03:21.506 A:middle
performance of your app.

00:03:22.746 --> 00:03:24.076 A:middle
So let's talk about those key

00:03:24.076 --> 00:03:24.706 A:middle
concepts.

00:03:24.986 --> 00:03:26.596 A:middle
There's only three: Publishers,

00:03:26.636 --> 00:03:28.356 A:middle
Subscribers and Operators.

00:03:28.396 --> 00:03:29.746 A:middle
And we'll go over each in turn.

00:03:30.366 --> 00:03:31.736 A:middle
First, Publishers.

00:03:32.956 --> 00:03:34.586 A:middle
Publishers are the declarative

00:03:34.586 --> 00:03:35.636 A:middle
part of Combine's API.

00:03:36.476 --> 00:03:38.296 A:middle
They describe how values and

00:03:38.296 --> 00:03:39.456 A:middle
errors are produced.

00:03:39.636 --> 00:03:40.656 A:middle
They're not necessarily the

00:03:40.656 --> 00:03:42.006 A:middle
thing that actually produces

00:03:42.006 --> 00:03:42.176 A:middle
them.

00:03:43.026 --> 00:03:44.486 A:middle
That means as descriptions, they

00:03:44.486 --> 00:03:46.666 A:middle
are value types which in Swift

00:03:46.666 --> 00:03:48.036 A:middle
means we use a struct.

00:03:49.256 --> 00:03:51.326 A:middle
Publishers also allow for

00:03:51.326 --> 00:03:53.366 A:middle
registration of a Subscriber;

00:03:53.366 --> 00:03:54.476 A:middle
that will be something that

00:03:54.476 --> 00:03:55.926 A:middle
receives these values over time.

00:03:57.176 --> 00:03:58.246 A:middle
Here's the protocol.

00:03:58.636 --> 00:03:59.576 A:middle
It's called Publisher.

00:03:59.976 --> 00:04:01.796 A:middle
It has two associated types: the

00:03:59.976 --> 00:04:01.796 A:middle
It has two associated types: the

00:04:01.796 --> 00:04:03.266 A:middle
Output, that's the kind of value

00:04:03.266 --> 00:04:05.206 A:middle
that it produces, and the

00:04:05.206 --> 00:04:06.276 A:middle
Failure which is the kind of

00:04:06.276 --> 00:04:07.346 A:middle
errors that it produces.

00:04:07.896 --> 00:04:08.996 A:middle
If it's not possible for a

00:04:08.996 --> 00:04:10.276 A:middle
Publisher to produce an error,

00:04:10.496 --> 00:04:11.876 A:middle
then you can use the type never

00:04:11.936 --> 00:04:13.606 A:middle
for that associated type.

00:04:14.906 --> 00:04:16.786 A:middle
Publisher has one key function.

00:04:16.856 --> 00:04:18.046 A:middle
It's called Subscribe.

00:04:18.676 --> 00:04:19.826 A:middle
As you can tell from the generic

00:04:19.826 --> 00:04:21.226 A:middle
constraints on this function,

00:04:21.676 --> 00:04:22.686 A:middle
Subscribe requires the

00:04:22.686 --> 00:04:24.046 A:middle
Subscriber's Input to match the

00:04:24.046 --> 00:04:25.546 A:middle
Publisher's Output, and the

00:04:25.546 --> 00:04:26.736 A:middle
Subscriber's Failure to match

00:04:26.736 --> 00:04:27.586 A:middle
the Publisher's Failure.

00:04:28.116 --> 00:04:30.526 A:middle
Here's an example of a

00:04:30.526 --> 00:04:31.116 A:middle
Publisher.

00:04:31.356 --> 00:04:32.386 A:middle
This is our new Publisher for

00:04:32.386 --> 00:04:33.196 A:middle
NotificationCenter.

00:04:34.106 --> 00:04:35.756 A:middle
As you can see, it's a struct

00:04:36.076 --> 00:04:38.406 A:middle
and its Output type is

00:04:38.406 --> 00:04:40.336 A:middle
Notifications and its Failure

00:04:40.336 --> 00:04:40.956 A:middle
type is Never.

00:04:41.896 --> 00:04:43.046 A:middle
It is initialized with three

00:04:43.046 --> 00:04:45.186 A:middle
things, which center, which name

00:04:45.186 --> 00:04:46.036 A:middle
and which object.

00:04:46.626 --> 00:04:47.496 A:middle
If you're familiar with our

00:04:47.496 --> 00:04:48.936 A:middle
existing NotificationCenter API,

00:04:49.436 --> 00:04:50.456 A:middle
they should look very familiar.

00:04:50.836 --> 00:04:51.876 A:middle
So again, we're not replacing

00:04:51.876 --> 00:04:52.776 A:middle
NotificationCenter.

00:04:52.936 --> 00:04:55.106 A:middle
We're just adapting it.

00:04:55.376 --> 00:04:56.526 A:middle
Next, Subscribers.

00:04:57.266 --> 00:04:58.826 A:middle
Subscribers are the counterpart

00:04:58.826 --> 00:04:59.586 A:middle
to Publishers.

00:05:00.056 --> 00:05:01.426 A:middle
They are what receive values,

00:05:01.476 --> 00:05:03.086 A:middle
including the completion if the

00:05:03.086 --> 00:05:04.066 A:middle
Publisher is finite.

00:05:05.036 --> 00:05:06.496 A:middle
Because Subscribers usually act

00:05:06.496 --> 00:05:08.426 A:middle
and mutate state upon receipt of

00:05:08.426 --> 00:05:10.326 A:middle
values, we use reference types

00:05:10.386 --> 00:05:11.596 A:middle
in Swift which means they are

00:05:11.596 --> 00:05:12.216 A:middle
classes.

00:05:13.226 --> 00:05:14.036 A:middle
Here's the protocol for

00:05:14.036 --> 00:05:14.606 A:middle
Subscriber.

00:05:15.126 --> 00:05:16.446 A:middle
As you can see, it has the same

00:05:16.446 --> 00:05:18.096 A:middle
two associated types: Input and

00:05:18.096 --> 00:05:18.476 A:middle
Failure.

00:05:18.596 --> 00:05:19.636 A:middle
Again, if the Subscriber is

00:05:19.636 --> 00:05:21.696 A:middle
unable to receive Failures, then

00:05:21.696 --> 00:05:22.776 A:middle
you can use the type Never.

00:05:23.646 --> 00:05:25.036 A:middle
And three key functions.

00:05:25.746 --> 00:05:27.036 A:middle
It can receive a subscription.

00:05:27.536 --> 00:05:28.896 A:middle
A subscription is how a

00:05:28.896 --> 00:05:30.266 A:middle
Subscriber controls the flow of

00:05:30.266 --> 00:05:31.666 A:middle
data from a Publisher to a

00:05:31.666 --> 00:05:32.226 A:middle
Subscriber.

00:05:32.956 --> 00:05:34.076 A:middle
It can also of course receive

00:05:34.076 --> 00:05:34.716 A:middle
Input.

00:05:34.986 --> 00:05:36.156 A:middle
And finally, if the Publisher

00:05:36.156 --> 00:05:37.296 A:middle
that it is connected to is

00:05:37.296 --> 00:05:38.806 A:middle
finite, then it can receive a

00:05:38.806 --> 00:05:40.196 A:middle
Completion which can be either

00:05:40.466 --> 00:05:41.576 A:middle
Finished or Failure.

00:05:41.726 --> 00:05:44.946 A:middle
Here is an example Subscriber.

00:05:45.836 --> 00:05:46.956 A:middle
This one is called Assign.

00:05:47.766 --> 00:05:50.406 A:middle
Assign is a class and it's

00:05:50.406 --> 00:05:51.816 A:middle
initialized with an instance of

00:05:51.816 --> 00:05:53.336 A:middle
a class, an instance of an

00:05:53.336 --> 00:05:55.826 A:middle
object and a type safe key path

00:05:55.906 --> 00:05:56.756 A:middle
into that object.

00:05:57.486 --> 00:05:59.086 A:middle
What it does is when it receives

00:05:59.086 --> 00:06:00.796 A:middle
input, it writes it out to that

00:05:59.086 --> 00:06:00.796 A:middle
input, it writes it out to that

00:06:00.796 --> 00:06:01.986 A:middle
property on that object.

00:06:02.556 --> 00:06:03.856 A:middle
Because in Swift there's no way

00:06:03.856 --> 00:06:04.886 A:middle
to handle an error when you're

00:06:04.886 --> 00:06:06.216 A:middle
just writing a property value,

00:06:06.656 --> 00:06:07.946 A:middle
we set the failure type of

00:06:07.946 --> 00:06:08.786 A:middle
Assign to Never.

00:06:09.406 --> 00:06:11.366 A:middle
Let's talk about how these fit

00:06:11.366 --> 00:06:11.746 A:middle
together.

00:06:13.086 --> 00:06:14.096 A:middle
So you may have some kind of

00:06:14.096 --> 00:06:16.076 A:middle
controller object or other type

00:06:16.386 --> 00:06:18.176 A:middle
which holds your Subscriber, and

00:06:18.176 --> 00:06:19.486 A:middle
that will be responsible for

00:06:19.486 --> 00:06:21.116 A:middle
calling Subscribe with the

00:06:21.116 --> 00:06:23.126 A:middle
Subscriber to the Publisher,

00:06:23.986 --> 00:06:24.586 A:middle
attaching it.

00:06:25.626 --> 00:06:26.806 A:middle
At that point, the Publisher

00:06:26.806 --> 00:06:28.886 A:middle
will send a subscription to the

00:06:28.886 --> 00:06:30.696 A:middle
Subscriber which the Subscriber

00:06:30.696 --> 00:06:33.096 A:middle
will use to make a request from

00:06:33.096 --> 00:06:34.446 A:middle
the Publisher for a certain

00:06:34.446 --> 00:06:36.176 A:middle
number of values or unlimited.

00:06:36.766 --> 00:06:38.536 A:middle
At that point, the Publisher is

00:06:38.536 --> 00:06:39.956 A:middle
free to send that number of

00:06:39.956 --> 00:06:41.566 A:middle
values or less to the

00:06:41.566 --> 00:06:42.156 A:middle
Subscriber.

00:06:42.476 --> 00:06:43.666 A:middle
And again, if the Publisher is

00:06:43.666 --> 00:06:45.416 A:middle
finite, then it will eventually

00:06:45.416 --> 00:06:47.086 A:middle
send a Completion or an Error.

00:06:48.346 --> 00:06:50.916 A:middle
So again, one subscription, zero

00:06:50.916 --> 00:06:52.776 A:middle
or more values and a single

00:06:52.776 --> 00:06:53.286 A:middle
Completion.

00:06:53.866 --> 00:06:56.786 A:middle
So returning to our example,

00:06:57.096 --> 00:06:58.966 A:middle
let's say that I have a model

00:06:58.966 --> 00:07:00.816 A:middle
object called Wizard and all I

00:06:58.966 --> 00:07:00.816 A:middle
object called Wizard and all I

00:07:00.816 --> 00:07:02.466 A:middle
care about today is what grade

00:07:02.466 --> 00:07:03.196 A:middle
that wizard is in.

00:07:03.796 --> 00:07:04.786 A:middle
Let's start with Merlin who is

00:07:04.786 --> 00:07:05.746 A:middle
currently in fifth grade.

00:07:06.266 --> 00:07:09.356 A:middle
What I want to do is listen for

00:07:09.356 --> 00:07:10.906 A:middle
a notification about my students

00:07:10.906 --> 00:07:12.736 A:middle
graduating, and once they've

00:07:12.736 --> 00:07:14.566 A:middle
graduated, I want to update my

00:07:14.666 --> 00:07:15.766 A:middle
model object's value.

00:07:16.526 --> 00:07:17.326 A:middle
So I start with a

00:07:17.326 --> 00:07:19.566 A:middle
NotificationCenter Publisher on

00:07:19.566 --> 00:07:21.636 A:middle
the default center about

00:07:21.636 --> 00:07:22.826 A:middle
graduation of Merlin.

00:07:24.276 --> 00:07:26.086 A:middle
Next, I create an Assign

00:07:26.086 --> 00:07:27.646 A:middle
Subscriber and tell it to write

00:07:27.646 --> 00:07:29.466 A:middle
the new grade to Merlin's grade

00:07:29.466 --> 00:07:30.646 A:middle
property.

00:07:32.656 --> 00:07:34.476 A:middle
Next, I can use Subscribe to

00:07:34.476 --> 00:07:35.016 A:middle
attach them.

00:07:35.286 --> 00:07:36.996 A:middle
However, as you might expect,

00:07:36.996 --> 00:07:37.766 A:middle
this doesn't compile.

00:07:37.766 --> 00:07:39.626 A:middle
And the reason is because the

00:07:39.626 --> 00:07:40.466 A:middle
types don't match.

00:07:41.346 --> 00:07:42.416 A:middle
NotificationCenter makes

00:07:42.416 --> 00:07:44.996 A:middle
notifications but Assign being

00:07:44.996 --> 00:07:46.056 A:middle
configured to write to an

00:07:46.056 --> 00:07:47.686 A:middle
integer property expects an

00:07:47.686 --> 00:07:48.086 A:middle
integer.

00:07:48.876 --> 00:07:50.416 A:middle
So what we need is something in

00:07:50.416 --> 00:07:52.086 A:middle
the middle to convert between

00:07:52.086 --> 00:07:53.586 A:middle
notifications and integers.

00:07:54.286 --> 00:07:56.456 A:middle
What that is, is an Operator.

00:07:57.426 --> 00:07:58.866 A:middle
Operators are Publishers until

00:07:58.866 --> 00:07:59.666 A:middle
they adopt the Publisher

00:07:59.666 --> 00:08:00.406 A:middle
protocol.

00:07:59.666 --> 00:08:00.406 A:middle
protocol.

00:08:00.596 --> 00:08:01.786 A:middle
And they are also declarative

00:08:01.946 --> 00:08:03.106 A:middle
and therefore value types.

00:08:03.756 --> 00:08:04.816 A:middle
What they do is describe a

00:08:04.816 --> 00:08:06.466 A:middle
behavior for changing values,

00:08:06.586 --> 00:08:08.336 A:middle
adding values, removing values

00:08:08.336 --> 00:08:10.006 A:middle
or any number of different kinds

00:08:10.006 --> 00:08:10.856 A:middle
of behaviors.

00:08:11.796 --> 00:08:12.936 A:middle
And subscribe to another

00:08:12.936 --> 00:08:14.386 A:middle
Publisher which we call the

00:08:14.386 --> 00:08:16.996 A:middle
upstream, and send the result to

00:08:16.996 --> 00:08:18.226 A:middle
a Subscriber, which we call the

00:08:18.226 --> 00:08:18.696 A:middle
downstream.

00:08:18.696 --> 00:08:21.196 A:middle
Here is an example of an

00:08:21.196 --> 00:08:21.696 A:middle
Operator.

00:08:22.276 --> 00:08:23.086 A:middle
This one is one that you'll

00:08:23.086 --> 00:08:24.236 A:middle
become very familiar with when

00:08:24.236 --> 00:08:24.856 A:middle
you use Combine.

00:08:25.046 --> 00:08:25.846 A:middle
It's called Map.

00:08:26.666 --> 00:08:28.716 A:middle
Map is a struct that is

00:08:28.716 --> 00:08:30.466 A:middle
initialized with which upstream

00:08:30.466 --> 00:08:31.916 A:middle
it connects to and how to

00:08:31.916 --> 00:08:33.606 A:middle
convert its upstream's output

00:08:33.606 --> 00:08:34.566 A:middle
into its own output.

00:08:35.496 --> 00:08:36.596 A:middle
Because Map doesn't generate

00:08:36.596 --> 00:08:37.905 A:middle
Failures of its own, it simply

00:08:37.905 --> 00:08:39.265 A:middle
mirrors its upstream's Failure

00:08:39.265 --> 00:08:40.566 A:middle
type and it will just pass it

00:08:40.566 --> 00:08:40.796 A:middle
through.

00:08:41.606 --> 00:08:43.116 A:middle
So with Map we have the tool we

00:08:43.116 --> 00:08:44.275 A:middle
need to convert between

00:08:44.275 --> 00:08:45.676 A:middle
notifications and integers.

00:08:46.516 --> 00:08:46.976 A:middle
Let's see how.

00:08:47.826 --> 00:08:49.176 A:middle
So keeping the same Publisher

00:08:49.176 --> 00:08:50.836 A:middle
and Subscriber and before, I'm

00:08:50.836 --> 00:08:52.926 A:middle
adding this converter which as

00:08:52.926 --> 00:08:53.876 A:middle
you can see is configured to

00:08:53.876 --> 00:08:54.496 A:middle
connect to the

00:08:54.496 --> 00:08:56.226 A:middle
graduationPublisher and has a

00:08:56.226 --> 00:08:56.726 A:middle
closure.

00:08:57.106 --> 00:08:58.286 A:middle
That closure receives a

00:08:58.286 --> 00:09:00.286 A:middle
notification and looks for a

00:08:58.286 --> 00:09:00.286 A:middle
notification and looks for a

00:09:00.286 --> 00:09:01.836 A:middle
user info key called NewGrade.

00:09:02.696 --> 00:09:04.256 A:middle
If it's there, and if it's an

00:09:04.256 --> 00:09:05.626 A:middle
integer, then we return it from

00:09:05.626 --> 00:09:06.116 A:middle
this closure.

00:09:06.756 --> 00:09:08.336 A:middle
If it's not there, or if it's

00:09:08.336 --> 00:09:09.666 A:middle
not an integer, the new use a

00:09:09.666 --> 00:09:10.856 A:middle
default value of zero.

00:09:11.506 --> 00:09:12.416 A:middle
What that means is that no

00:09:12.416 --> 00:09:13.616 A:middle
matter what, the result of this

00:09:13.616 --> 00:09:15.366 A:middle
closure is an integer and

00:09:15.366 --> 00:09:17.816 A:middle
therefore I can connect this to

00:09:17.986 --> 00:09:18.586 A:middle
the Subscriber.

00:09:18.586 --> 00:09:20.756 A:middle
And everything connects,

00:09:21.006 --> 00:09:22.146 A:middle
compiles and works.

00:09:23.286 --> 00:09:24.236 A:middle
Now all of this construction

00:09:24.236 --> 00:09:26.486 A:middle
syntax can get a bit verbose, so

00:09:26.486 --> 00:09:27.736 A:middle
we also have a more fluent

00:09:27.736 --> 00:09:28.316 A:middle
syntax.

00:09:28.726 --> 00:09:29.516 A:middle
Here's how it works.

00:09:30.056 --> 00:09:32.856 A:middle
As an extension on the Publisher

00:09:32.856 --> 00:09:34.376 A:middle
protocol, meaning it's available

00:09:34.376 --> 00:09:36.806 A:middle
to all Publishers, we added a

00:09:36.806 --> 00:09:38.726 A:middle
series of functions named after

00:09:39.076 --> 00:09:39.866 A:middle
each Operator.

00:09:40.366 --> 00:09:41.216 A:middle
Here is the one for Map.

00:09:42.056 --> 00:09:44.376 A:middle
As you can see, its arguments

00:09:44.416 --> 00:09:45.526 A:middle
are everything needed to

00:09:45.526 --> 00:09:47.236 A:middle
initialize a Map except for

00:09:47.236 --> 00:09:47.726 A:middle
upstream.

00:09:48.016 --> 00:09:49.616 A:middle
And the reason is because as an

00:09:49.616 --> 00:09:51.166 A:middle
extension on Publisher we can

00:09:51.166 --> 00:09:52.106 A:middle
simply use self.

00:09:53.436 --> 00:09:54.446 A:middle
Now this may seem like a pretty

00:09:54.446 --> 00:09:55.906 A:middle
trivial convenience, but

00:09:55.906 --> 00:09:57.596 A:middle
actually this is what's really

00:09:57.596 --> 00:09:59.156 A:middle
going to transform how you think

00:09:59.156 --> 00:10:00.466 A:middle
about asynchronous programing in

00:09:59.156 --> 00:10:00.466 A:middle
about asynchronous programing in

00:10:00.466 --> 00:10:00.826 A:middle
your app.

00:10:01.556 --> 00:10:03.196 A:middle
Let's return to our example but

00:10:03.196 --> 00:10:04.346 A:middle
use the new syntax.

00:10:04.926 --> 00:10:07.306 A:middle
So here I am starting with the

00:10:07.306 --> 00:10:08.856 A:middle
NotificationCenter Publisher for

00:10:08.856 --> 00:10:09.976 A:middle
graduated on Merlin.

00:10:11.426 --> 00:10:13.066 A:middle
Once I receive a notification, I

00:10:13.126 --> 00:10:15.696 A:middle
then map it using the same

00:10:15.696 --> 00:10:18.236 A:middle
closure as we saw earlier, and

00:10:18.236 --> 00:10:20.276 A:middle
then I assign it to the grade

00:10:20.276 --> 00:10:21.316 A:middle
property on Merlin.

00:10:22.096 --> 00:10:23.286 A:middle
And you can see this syntax

00:10:23.366 --> 00:10:24.526 A:middle
provides a very linear,

00:10:24.526 --> 00:10:26.236 A:middle
easy-to-understand flow of what

00:10:26.236 --> 00:10:27.396 A:middle
happens step-by-step.

00:10:28.436 --> 00:10:30.346 A:middle
Assign returns something called

00:10:30.346 --> 00:10:31.046 A:middle
a cancelable.

00:10:31.476 --> 00:10:33.016 A:middle
Cancelation is also built into

00:10:33.016 --> 00:10:33.466 A:middle
combine.

00:10:34.086 --> 00:10:35.746 A:middle
Cancelation allows you to tear

00:10:35.746 --> 00:10:36.966 A:middle
down the sequence of Publishers

00:10:36.966 --> 00:10:38.346 A:middle
and Subscribers early if you

00:10:38.346 --> 00:10:38.746 A:middle
need to.

00:10:40.466 --> 00:10:42.236 A:middle
So this step-by-step syntax is

00:10:42.286 --> 00:10:43.886 A:middle
really the heart of how you use

00:10:43.886 --> 00:10:44.306 A:middle
Combine.

00:10:45.016 --> 00:10:46.626 A:middle
Each step describes the next set

00:10:46.626 --> 00:10:47.916 A:middle
of instructions in a chain.

00:10:48.416 --> 00:10:50.026 A:middle
Transforming values as they make

00:10:50.026 --> 00:10:51.046 A:middle
their way from the first

00:10:51.046 --> 00:10:52.396 A:middle
Publisher through a series of

00:10:52.396 --> 00:10:54.286 A:middle
Operators and ending in a

00:10:54.286 --> 00:10:54.906 A:middle
Subscriber.

00:10:55.026 --> 00:10:56.626 A:middle
And we have a lot of these

00:10:56.626 --> 00:10:57.216 A:middle
Operators.

00:10:57.756 --> 00:10:58.746 A:middle
We call them our Declarative

00:10:58.746 --> 00:10:59.566 A:middle
Operator API.

00:11:00.456 --> 00:11:01.166 A:middle
They include functional

00:11:01.166 --> 00:11:02.396 A:middle
transformations like Map.

00:11:02.676 --> 00:11:04.096 A:middle
We also have Filter and Reduce,

00:11:04.536 --> 00:11:05.886 A:middle
list operations like taking the

00:11:05.886 --> 00:11:07.906 A:middle
first, second or fifth element

00:11:07.986 --> 00:11:08.716 A:middle
of the Publisher.

00:11:09.456 --> 00:11:11.056 A:middle
Error handling like turning an

00:11:11.056 --> 00:11:12.536 A:middle
error into a default or

00:11:12.536 --> 00:11:13.456 A:middle
placement value.

00:11:14.146 --> 00:11:15.586 A:middle
Thread or Q Movement, for

00:11:15.586 --> 00:11:17.596 A:middle
example moving heavy processing

00:11:17.596 --> 00:11:19.076 A:middle
work to a background thread or

00:11:19.146 --> 00:11:20.486 A:middle
UI work to the main thread.

00:11:21.166 --> 00:11:22.466 A:middle
And scheduling and time,

00:11:22.466 --> 00:11:23.746 A:middle
including integration with from

00:11:23.746 --> 00:11:25.706 A:middle
loop, dispatch queue, support

00:11:25.706 --> 00:11:27.736 A:middle
for timer, timeouts and more.

00:11:28.506 --> 00:11:29.656 A:middle
And with so many of these

00:11:29.656 --> 00:11:31.136 A:middle
operators available, it can be

00:11:31.326 --> 00:11:32.486 A:middle
perhaps a bit overwhelming to

00:11:32.486 --> 00:11:33.936 A:middle
think about how you will

00:11:33.936 --> 00:11:35.426 A:middle
navigate amongst these.

00:11:36.046 --> 00:11:37.536 A:middle
So what I encourage you to do is

00:11:37.536 --> 00:11:39.136 A:middle
return to our core design

00:11:39.136 --> 00:11:40.466 A:middle
principle about Combine, and

00:11:40.466 --> 00:11:42.326 A:middle
that is composition.

00:11:43.756 --> 00:11:45.896 A:middle
Instead of providing a few

00:11:45.896 --> 00:11:47.866 A:middle
operators that do a lot, we

00:11:47.866 --> 00:11:49.246 A:middle
provide a lot of operators that

00:11:49.246 --> 00:11:50.456 A:middle
just do a little bit each,

00:11:50.456 --> 00:11:51.256 A:middle
making them easier to

00:11:51.256 --> 00:11:51.856 A:middle
understand.

00:11:52.926 --> 00:11:54.706 A:middle
So to help you navigate amongst

00:11:54.706 --> 00:11:56.176 A:middle
all these operators, we drew

00:11:56.176 --> 00:11:57.746 A:middle
inspiration for their names from

00:11:57.746 --> 00:11:59.436 A:middle
the existing Swift Collection

00:11:59.536 --> 00:11:59.976 A:middle
APIs.

00:12:01.256 --> 00:12:01.676 A:middle
Here's how.

00:12:02.696 --> 00:12:04.416 A:middle
Let's imagine a quadrant graph.

00:12:04.416 --> 00:12:06.346 A:middle
So on one side I have

00:12:06.416 --> 00:12:08.056 A:middle
synchronous APIs and the other

00:12:08.056 --> 00:12:08.816 A:middle
asynchronous.

00:12:09.346 --> 00:12:10.946 A:middle
On the top I have single values

00:12:11.006 --> 00:12:12.616 A:middle
and on the bottom I have many

00:12:12.616 --> 00:12:13.146 A:middle
values.

00:12:14.456 --> 00:12:15.756 A:middle
So in Swift, if you need to

00:12:15.756 --> 00:12:16.906 A:middle
represent an integer

00:12:17.006 --> 00:12:18.136 A:middle
synchronously, you might use

00:12:18.136 --> 00:12:19.186 A:middle
something like int.

00:12:19.886 --> 00:12:21.016 A:middle
If you need to represent many

00:12:21.016 --> 00:12:22.426 A:middle
integers synchronously, you

00:12:22.426 --> 00:12:23.436 A:middle
would use something like an

00:12:23.516 --> 00:12:24.216 A:middle
array of integers.

00:12:25.036 --> 00:12:26.086 A:middle
In Combine we took these

00:12:26.086 --> 00:12:27.886 A:middle
concepts and mapped them into

00:12:27.886 --> 00:12:28.936 A:middle
the asynchronous world.

00:12:29.496 --> 00:12:30.506 A:middle
So if you need to represent a

00:12:30.506 --> 00:12:32.266 A:middle
single value asynchronously, it

00:12:32.266 --> 00:12:34.046 A:middle
comes later, we have a future.

00:12:34.416 --> 00:12:35.836 A:middle
If you need to represent many

00:12:35.836 --> 00:12:37.616 A:middle
values asynchronously, that's a

00:12:37.616 --> 00:12:38.076 A:middle
Publisher.

00:12:39.046 --> 00:12:40.426 A:middle
So what that means is that if

00:12:40.426 --> 00:12:41.246 A:middle
you're looking for a particular

00:12:41.246 --> 00:12:42.416 A:middle
kind of operation that you

00:12:42.416 --> 00:12:43.976 A:middle
already know how to do with an

00:12:44.076 --> 00:12:46.346 A:middle
array, try using that name on a

00:12:46.346 --> 00:12:46.856 A:middle
Publisher.

00:12:47.616 --> 00:12:48.596 A:middle
Let me show you an example.

00:12:50.176 --> 00:12:53.366 A:middle
So here I chose to use a default

00:12:53.366 --> 00:12:55.346 A:middle
value of zero if the key was not

00:12:55.346 --> 00:12:56.536 A:middle
present or if it was not an

00:12:56.536 --> 00:12:56.896 A:middle
integer.

00:12:57.296 --> 00:12:58.316 A:middle
Maybe instead it would be a

00:12:58.316 --> 00:12:59.896 A:middle
better idea to not allow this

00:12:59.896 --> 00:13:02.216 A:middle
bad value to progress and end up

00:12:59.896 --> 00:13:02.216 A:middle
bad value to progress and end up

00:13:02.216 --> 00:13:03.566 A:middle
written into my model object.

00:13:04.356 --> 00:13:06.526 A:middle
So one thing I could do is allow

00:13:06.526 --> 00:13:08.266 A:middle
this closure to return nil and

00:13:08.266 --> 00:13:09.946 A:middle
then filter out the nil values.

00:13:10.706 --> 00:13:12.536 A:middle
Well, in Swift 4.1, the standard

00:13:12.536 --> 00:13:13.816 A:middle
library introduced a name for

00:13:13.816 --> 00:13:14.626 A:middle
that operation.

00:13:14.716 --> 00:13:15.866 A:middle
It's called compactMap.

00:13:16.236 --> 00:13:17.926 A:middle
And so Publisher has one too.

00:13:18.216 --> 00:13:19.406 A:middle
And it behaves in a very similar

00:13:19.406 --> 00:13:19.686 A:middle
way.

00:13:20.126 --> 00:13:21.126 A:middle
If you return nil from this

00:13:21.126 --> 00:13:22.826 A:middle
closure, then compactMap will

00:13:22.826 --> 00:13:24.336 A:middle
filter it out, keeping it from

00:13:24.336 --> 00:13:25.356 A:middle
progressing further down the

00:13:25.356 --> 00:13:25.776 A:middle
stream.

00:13:27.116 --> 00:13:28.236 A:middle
Let's build up our step-by-step

00:13:28.236 --> 00:13:30.066 A:middle
instructions using a few more

00:13:30.066 --> 00:13:30.966 A:middle
familiar names.

00:13:33.386 --> 00:13:34.956 A:middle
Let's say that only students in

00:13:35.006 --> 00:13:36.286 A:middle
fifth grade or higher are

00:13:36.286 --> 00:13:37.326 A:middle
allowed in my school.

00:13:37.526 --> 00:13:39.486 A:middle
I can do that using Filter.

00:13:40.166 --> 00:13:41.586 A:middle
Filter takes a predicate and

00:13:41.586 --> 00:13:43.246 A:middle
only allows elements that pass

00:13:43.246 --> 00:13:44.406 A:middle
that predicate to proceed.

00:13:44.796 --> 00:13:45.686 A:middle
This is exactly the same

00:13:45.686 --> 00:13:47.306 A:middle
behavior as Filter on Array.

00:13:48.286 --> 00:13:49.476 A:middle
Let's say furthermore that

00:13:49.476 --> 00:13:50.556 A:middle
you're only allowed to graduate

00:13:50.556 --> 00:13:51.906 A:middle
a maximum of three times.

00:13:52.896 --> 00:13:55.046 A:middle
So on Array, if you need to take

00:13:55.046 --> 00:13:56.006 A:middle
the first three elements, you

00:13:56.006 --> 00:13:57.206 A:middle
could use prefix 3.

00:13:57.726 --> 00:13:58.916 A:middle
On a Publisher, if you want to

00:13:58.916 --> 00:14:00.016 A:middle
receive the first three elements

00:13:58.916 --> 00:14:00.016 A:middle
receive the first three elements

00:14:00.016 --> 00:14:02.126 A:middle
only, you can use prefix of 3.

00:14:02.806 --> 00:14:04.116 A:middle
What it does is after it

00:14:04.116 --> 00:14:05.476 A:middle
receives three values, it will

00:14:05.476 --> 00:14:07.116 A:middle
Cancel the upstream and send a

00:14:07.116 --> 00:14:08.316 A:middle
Completion to the downstream.

00:14:08.886 --> 00:14:11.756 A:middle
So stepping back, let's see what

00:14:11.756 --> 00:14:12.346 A:middle
we have here.

00:14:12.826 --> 00:14:13.906 A:middle
We have a NotificationCenter

00:14:13.906 --> 00:14:14.946 A:middle
Publisher that listens for

00:14:14.946 --> 00:14:16.516 A:middle
graduations on Merlin.

00:14:17.746 --> 00:14:19.806 A:middle
Once he graduates, we will fetch

00:14:19.806 --> 00:14:21.136 A:middle
the NewGrade out of that

00:14:21.136 --> 00:14:22.256 A:middle
property, out of that

00:14:22.256 --> 00:14:22.946 A:middle
Notification.

00:14:23.136 --> 00:14:24.736 A:middle
And then we will make sure that

00:14:24.736 --> 00:14:25.986 A:middle
the value is greater than fifth

00:14:25.986 --> 00:14:27.306 A:middle
grade and that it has only

00:14:27.306 --> 00:14:28.506 A:middle
happened a maximum of three

00:14:28.506 --> 00:14:30.476 A:middle
times before finally assigning

00:14:30.476 --> 00:14:32.296 A:middle
it to the grade property on

00:14:32.296 --> 00:14:32.686 A:middle
Merlin.

00:14:35.806 --> 00:14:37.496 A:middle
Now Map and Filter are great

00:14:37.496 --> 00:14:38.716 A:middle
APIs but they're primarily for

00:14:38.716 --> 00:14:39.806 A:middle
synchronous behaviors.

00:14:40.516 --> 00:14:41.826 A:middle
Combine really starts to shine

00:14:41.826 --> 00:14:42.506 A:middle
when you're working in

00:14:42.506 --> 00:14:43.396 A:middle
asynchronous world.

00:14:44.186 --> 00:14:45.546 A:middle
So here are two more operators

00:14:45.546 --> 00:14:46.526 A:middle
that I'm going to talk about

00:14:46.526 --> 00:14:47.536 A:middle
that can be really useful for

00:14:47.536 --> 00:14:47.796 A:middle
that.

00:14:48.216 --> 00:14:48.986 A:middle
First, Zip.

00:14:50.156 --> 00:14:52.216 A:middle
So let's say in my app before

00:14:52.216 --> 00:14:54.026 A:middle
the user is allowed to continue,

00:14:54.276 --> 00:14:55.456 A:middle
they need to wait for their wand

00:14:55.456 --> 00:14:56.766 A:middle
to be created which is three

00:14:56.766 --> 00:14:58.026 A:middle
long-running asynchronous

00:14:58.026 --> 00:14:59.106 A:middle
operations like this.

00:15:00.466 --> 00:15:02.826 A:middle
So the Continue button becomes

00:15:02.826 --> 00:15:04.206 A:middle
enabled once all three things

00:15:04.206 --> 00:15:04.716 A:middle
are finished.

00:15:05.306 --> 00:15:06.546 A:middle
This is a job for Zip.

00:15:07.486 --> 00:15:09.166 A:middle
Zip converts several upstream

00:15:09.166 --> 00:15:11.056 A:middle
inputs into a single tuple.

00:15:12.286 --> 00:15:13.776 A:middle
Because it requires input from

00:15:13.866 --> 00:15:15.266 A:middle
all of its upstreams in order to

00:15:15.266 --> 00:15:17.046 A:middle
proceed, it makes it a kind of

00:15:17.046 --> 00:15:19.586 A:middle
when/and operation as in, when

00:15:19.586 --> 00:15:21.206 A:middle
this and this and this have

00:15:21.236 --> 00:15:22.406 A:middle
finished, do this other thing.

00:15:23.786 --> 00:15:25.226 A:middle
So for example, my first

00:15:25.226 --> 00:15:27.386 A:middle
Publisher produces A, and then

00:15:27.386 --> 00:15:28.346 A:middle
when my second Publisher

00:15:28.346 --> 00:15:30.296 A:middle
produces a 1, I now have enough

00:15:30.296 --> 00:15:31.826 A:middle
information to create a tuple

00:15:32.406 --> 00:15:34.186 A:middle
and send that value downstream

00:15:34.336 --> 00:15:34.976 A:middle
to my Subscriber.

00:15:37.396 --> 00:15:38.736 A:middle
In my app, I use the version of

00:15:38.736 --> 00:15:40.126 A:middle
Zip that takes three upstreams

00:15:40.466 --> 00:15:43.036 A:middle
to await the result of three

00:15:43.306 --> 00:15:44.636 A:middle
asynchronous operations that

00:15:44.636 --> 00:15:45.996 A:middle
each give me a Boolean result.

00:15:46.546 --> 00:15:47.906 A:middle
So I map the tuple into a single

00:15:47.906 --> 00:15:49.626 A:middle
Boolean and here I've written it

00:15:49.626 --> 00:15:51.166 A:middle
into the isEnabled property on

00:15:51.166 --> 00:15:52.516 A:middle
the button to turn it on.

00:15:55.046 --> 00:15:56.646 A:middle
So after you're done waiting for

00:15:56.646 --> 00:15:58.296 A:middle
your wand to be created, like

00:15:58.326 --> 00:15:59.736 A:middle
everybody else, my students have

00:15:59.776 --> 00:16:01.076 A:middle
to agree to a set of terms and

00:15:59.776 --> 00:16:01.076 A:middle
to agree to a set of terms and

00:16:01.076 --> 00:16:02.296 A:middle
conditions before they are

00:16:02.296 --> 00:16:03.736 A:middle
allowed to proceed to playing

00:16:03.736 --> 00:16:04.566 A:middle
with their wands.

00:16:05.206 --> 00:16:06.486 A:middle
What that means is that all

00:16:06.486 --> 00:16:07.896 A:middle
three of these switches have to

00:16:07.896 --> 00:16:09.236 A:middle
be enabled before the Play

00:16:09.236 --> 00:16:09.996 A:middle
button is enabled.

00:16:10.426 --> 00:16:11.946 A:middle
However, if one of them is then

00:16:11.946 --> 00:16:13.866 A:middle
later disabled, we need to

00:16:14.216 --> 00:16:15.316 A:middle
disable the button.

00:16:15.856 --> 00:16:17.336 A:middle
This is a job for Combine

00:16:17.336 --> 00:16:17.706 A:middle
Latest.

00:16:18.576 --> 00:16:19.856 A:middle
Like Zip, it converts several

00:16:19.856 --> 00:16:21.286 A:middle
upstream inputs into a single

00:16:21.286 --> 00:16:21.646 A:middle
value.

00:16:22.276 --> 00:16:23.916 A:middle
However, unlike Zip, it requires

00:16:23.916 --> 00:16:25.136 A:middle
an input from any of its

00:16:25.176 --> 00:16:27.086 A:middle
upstreams to proceed, making it

00:16:27.086 --> 00:16:28.856 A:middle
a kind of when/or operation.

00:16:29.646 --> 00:16:30.826 A:middle
In order to support that, it

00:16:30.826 --> 00:16:32.226 A:middle
stores the last value that it's

00:16:32.226 --> 00:16:33.626 A:middle
received from each upstream.

00:16:34.056 --> 00:16:35.226 A:middle
And it's also configured with a

00:16:35.226 --> 00:16:36.706 A:middle
closure that lets you convert

00:16:36.706 --> 00:16:38.016 A:middle
that into a single downstream

00:16:38.016 --> 00:16:38.386 A:middle
value.

00:16:39.906 --> 00:16:41.066 A:middle
So for example, when my first

00:16:41.066 --> 00:16:43.166 A:middle
Publisher produces A, and my

00:16:43.166 --> 00:16:45.926 A:middle
second Publisher produces A1, I

00:16:45.926 --> 00:16:47.346 A:middle
then run my closure which

00:16:47.346 --> 00:16:48.996 A:middle
stringifies this and sends it

00:16:48.996 --> 00:16:49.586 A:middle
downstream.

00:16:50.246 --> 00:16:51.656 A:middle
Later, when the second Publisher

00:16:51.656 --> 00:16:53.486 A:middle
produces a new value, I can

00:16:53.486 --> 00:16:55.716 A:middle
combine it with the value from

00:16:55.716 --> 00:16:56.686 A:middle
previously from the first

00:16:56.686 --> 00:16:58.186 A:middle
Publisher and send that new

00:16:58.186 --> 00:16:58.816 A:middle
value down.

00:16:59.636 --> 00:17:01.036 A:middle
That means that I get new events

00:16:59.636 --> 00:17:01.036 A:middle
That means that I get new events

00:17:01.316 --> 00:17:02.836 A:middle
as any upstream changes.

00:17:04.146 --> 00:17:06.346 A:middle
So in my example app, I used a

00:17:06.346 --> 00:17:07.626 A:middle
version of CombineLatest which

00:17:07.626 --> 00:17:09.566 A:middle
takes three upstreams, the

00:17:09.566 --> 00:17:11.386 A:middle
Boolean states of all three of

00:17:11.386 --> 00:17:12.886 A:middle
those switches as they change,

00:17:13.296 --> 00:17:14.215 A:middle
convert them into a single

00:17:14.215 --> 00:17:15.965 A:middle
Boolean value again and write

00:17:15.965 --> 00:17:17.356 A:middle
that to the isEnabled property

00:17:17.516 --> 00:17:18.276 A:middle
on my Play button.

00:17:19.185 --> 00:17:20.406 A:middle
That means that if any of them

00:17:20.445 --> 00:17:22.086 A:middle
are false, the result is false.

00:17:22.366 --> 00:17:23.596 A:middle
But if all of them are true,

00:17:23.906 --> 00:17:25.455 A:middle
then the result is true, thus

00:17:25.455 --> 00:17:28.296 A:middle
enabling the button.

00:17:28.465 --> 00:17:30.186 A:middle
So we designed Combine to be

00:17:30.186 --> 00:17:31.766 A:middle
adoptable incrementally in your

00:17:31.766 --> 00:17:31.976 A:middle
app.

00:17:32.036 --> 00:17:32.816 A:middle
You don't have to convert

00:17:32.816 --> 00:17:34.126 A:middle
everything over to use this.

00:17:34.576 --> 00:17:36.086 A:middle
So to get started, I have a few

00:17:36.086 --> 00:17:37.356 A:middle
suggestions on places that you

00:17:37.356 --> 00:17:38.756 A:middle
might find in your app today

00:17:39.196 --> 00:17:40.676 A:middle
that you can use Combine for.

00:17:41.286 --> 00:17:42.766 A:middle
For example, if you use

00:17:42.766 --> 00:17:44.456 A:middle
NotificationCenter, you receive

00:17:44.456 --> 00:17:46.116 A:middle
notifications and then you look

00:17:46.186 --> 00:17:47.536 A:middle
inside them to decide whether to

00:17:47.536 --> 00:17:49.836 A:middle
act or not, try using Filter.

00:17:50.416 --> 00:17:52.716 A:middle
If you weight the result of

00:17:52.716 --> 00:17:54.446 A:middle
several asynchronous operations,

00:17:54.816 --> 00:17:57.576 A:middle
then you can use Zip, including

00:17:57.576 --> 00:17:58.516 A:middle
network operations.

00:17:59.426 --> 00:18:02.096 A:middle
And finally, if you use URL

00:17:59.426 --> 00:18:02.096 A:middle
And finally, if you use URL

00:18:02.096 --> 00:18:03.876 A:middle
Session to receive some data and

00:18:04.096 --> 00:18:05.496 A:middle
then you convert that data into

00:18:05.496 --> 00:18:06.956 A:middle
your own objects using JSON

00:18:06.956 --> 00:18:08.556 A:middle
Decoder, we have an operator

00:18:08.556 --> 00:18:09.416 A:middle
that will help with that as

00:18:09.416 --> 00:18:09.896 A:middle
well.

00:18:09.896 --> 00:18:10.976 A:middle
It's called Decode.

00:18:13.616 --> 00:18:15.066 A:middle
So we went over the basics

00:18:15.096 --> 00:18:15.506 A:middle
today.

00:18:15.646 --> 00:18:17.146 A:middle
Publishers, Subscribers and

00:18:17.146 --> 00:18:17.766 A:middle
Operators.

00:18:18.156 --> 00:18:19.536 A:middle
However, there's a lot more to

00:18:19.536 --> 00:18:19.866 A:middle
Combine.

00:18:20.316 --> 00:18:22.336 A:middle
And that includes error handling

00:18:22.336 --> 00:18:24.746 A:middle
and cancelation, schedulers and

00:18:24.746 --> 00:18:26.856 A:middle
time, and some great design

00:18:26.856 --> 00:18:29.206 A:middle
patterns including using Combine

00:18:29.276 --> 00:18:30.836 A:middle
in different modules or between

00:18:30.836 --> 00:18:31.886 A:middle
different areas of your app.

00:18:31.886 --> 00:18:33.436 A:middle
And of course integration with

00:18:33.436 --> 00:18:33.786 A:middle
SwiftUI.

00:18:33.786 --> 00:18:36.296 A:middle
For more on that, please watch

00:18:36.296 --> 00:18:37.656 A:middle
Combine In Practice.

00:18:39.136 --> 00:18:39.926 A:middle
That's all I have today.

00:18:39.926 --> 00:18:40.876 A:middle
Thank you so much for your time.

00:18:41.516 --> 00:18:45.500 A:middle
[ Applause ]
