WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:08.006 --> 00:00:10.186 A:middle
&gt;&gt; Last year in watchOS 5, we

00:00:10.236 --> 00:00:12.076 A:middle
introduced the ability to play

00:00:12.076 --> 00:00:13.836 A:middle
local, long-form audio in the

00:00:13.836 --> 00:00:14.326 A:middle
background.

00:00:16.265 --> 00:00:18.346 A:middle
This year with watchOS 6, we're

00:00:18.346 --> 00:00:19.806 A:middle
bringing the ability for watch

00:00:19.806 --> 00:00:21.756 A:middle
apps to stream audio directly on

00:00:21.756 --> 00:00:22.356 A:middle
Apple Watch.

00:00:23.486 --> 00:00:24.916 A:middle
This means that your customers

00:00:25.296 --> 00:00:26.626 A:middle
no longer need to bring their

00:00:26.716 --> 00:00:28.086 A:middle
iPhone with them to access your

00:00:28.086 --> 00:00:30.186 A:middle
audio content, they no longer

00:00:30.186 --> 00:00:31.716 A:middle
need to sync audio content to

00:00:31.716 --> 00:00:33.496 A:middle
their watches, and they now have

00:00:33.496 --> 00:00:35.336 A:middle
access to live audio programing

00:00:35.596 --> 00:00:36.526 A:middle
like sports events.

00:00:37.686 --> 00:00:40.696 A:middle
WatchOS 6 supports two main ways

00:00:40.696 --> 00:00:42.836 A:middle
to stream audio to Apple Watch.

00:00:43.286 --> 00:00:47.386 A:middle
HLS and custom audio protocols.

00:00:47.906 --> 00:00:50.426 A:middle
Let's dive into a bit more

00:00:50.426 --> 00:00:50.976 A:middle
detail.

00:00:51.456 --> 00:00:53.346 A:middle
If your content is available as

00:00:53.346 --> 00:00:56.656 A:middle
an HLS audio feed, you can point

00:00:56.656 --> 00:00:58.766 A:middle
AVQueuePlayer to the feed and it

00:00:58.766 --> 00:00:59.926 A:middle
will take care of streaming your

00:00:59.926 --> 00:01:00.456 A:middle
content.

00:00:59.926 --> 00:01:00.456 A:middle
content.

00:01:01.666 --> 00:01:03.776 A:middle
WatchOS is optimized for HLS

00:01:03.776 --> 00:01:05.346 A:middle
audio feeds and makes it simple

00:01:05.346 --> 00:01:06.166 A:middle
to get started with.

00:01:07.796 --> 00:01:09.336 A:middle
Applications that use

00:01:09.336 --> 00:01:11.346 A:middle
proprietary audio formats or use

00:01:11.346 --> 00:01:12.726 A:middle
custom protocols are a bit

00:01:12.726 --> 00:01:13.336 A:middle
different.

00:01:14.536 --> 00:01:17.416 A:middle
They need to use URLSession on

00:01:17.416 --> 00:01:18.736 A:middle
the network framework to

00:01:18.736 --> 00:01:20.146 A:middle
retrieve and interpret their

00:01:20.146 --> 00:01:21.746 A:middle
metadata and audio content.

00:01:23.406 --> 00:01:25.466 A:middle
Once audio content has been

00:01:25.466 --> 00:01:27.096 A:middle
downloaded to the watch, use

00:01:27.096 --> 00:01:28.736 A:middle
AVFoundation for audio route

00:01:28.736 --> 00:01:30.236 A:middle
selection and audio playback.

00:01:33.036 --> 00:01:34.466 A:middle
Audio streaming is made possible

00:01:34.466 --> 00:01:36.596 A:middle
in watchOS 6 by bringing several

00:01:36.596 --> 00:01:39.176 A:middle
iOS APIs into the watchOS SDK.

00:01:39.546 --> 00:01:41.406 A:middle
Our goal has been to bring the

00:01:41.406 --> 00:01:43.576 A:middle
two SDKs closer together so that

00:01:43.576 --> 00:01:45.376 A:middle
your code can run watchOS with

00:01:45.376 --> 00:01:46.816 A:middle
little or no modification.

00:01:48.316 --> 00:01:51.236 A:middle
For networking, watchOS 6 now

00:01:51.236 --> 00:01:53.016 A:middle
has the network framework, first

00:01:53.016 --> 00:01:54.276 A:middle
introducing iOS 12.

00:01:55.066 --> 00:01:56.646 A:middle
This framework provides a modern

00:01:56.646 --> 00:01:58.276 A:middle
alternative to unit sockets.

00:01:58.986 --> 00:02:00.566 A:middle
Network framework is not only

00:01:58.986 --> 00:02:00.566 A:middle
Network framework is not only

00:02:00.566 --> 00:02:02.886 A:middle
more on C API but also provides

00:02:02.886 --> 00:02:06.396 A:middle
a very convenient Swift API.

00:02:06.396 --> 00:02:07.586 A:middle
URLSession brings

00:02:07.586 --> 00:02:09.036 A:middle
URLSessionStreamingTask to

00:02:09.036 --> 00:02:09.786 A:middle
watchOS.

00:02:10.295 --> 00:02:11.806 A:middle
It also brings along

00:02:11.806 --> 00:02:14.166 A:middle
URLSessionWebSocketTask, which

00:02:14.166 --> 00:02:16.636 A:middle
is new in both iOS 13 and in

00:02:16.636 --> 00:02:17.376 A:middle
watchOS 6.

00:02:18.276 --> 00:02:19.766 A:middle
Audio streaming presents special

00:02:19.766 --> 00:02:21.396 A:middle
challenges to the way the data

00:02:21.396 --> 00:02:22.736 A:middle
is retrieved from the network.

00:02:23.346 --> 00:02:25.346 A:middle
To this end, URLSession has

00:02:25.346 --> 00:02:27.146 A:middle
added the new AV streaming

00:02:27.146 --> 00:02:28.306 A:middle
network service type.

00:02:28.906 --> 00:02:29.916 A:middle
You should use it for your

00:02:29.916 --> 00:02:31.026 A:middle
streaming data request.

00:02:32.656 --> 00:02:34.746 A:middle
For audio playback, AVFoundation

00:02:34.746 --> 00:02:35.976 A:middle
is bringing many of their APIs

00:02:35.976 --> 00:02:39.096 A:middle
to watchOS 6 including AVPlayer

00:02:39.096 --> 00:02:40.676 A:middle
and AVQueuePlayer.

00:02:42.186 --> 00:02:43.856 A:middle
Also, for the first time,

00:02:44.106 --> 00:02:45.406 A:middle
CoreMedia is available in

00:02:45.406 --> 00:02:45.846 A:middle
watchOS.

00:02:47.696 --> 00:02:48.916 A:middle
If your application is already

00:02:48.916 --> 00:02:50.236 A:middle
set up for background audio

00:02:50.236 --> 00:02:52.006 A:middle
playback, it is ready for audio

00:02:52.006 --> 00:02:52.446 A:middle
streaming.

00:02:53.096 --> 00:02:54.706 A:middle
No other project configuration

00:02:54.706 --> 00:02:55.156 A:middle
is needed.

00:02:56.116 --> 00:02:57.276 A:middle
If your project is not

00:02:57.276 --> 00:02:58.776 A:middle
configured for background audio,

00:02:58.776 --> 00:03:00.076 A:middle
you will need to add this

00:02:58.776 --> 00:03:00.076 A:middle
you will need to add this

00:03:00.076 --> 00:03:01.716 A:middle
capability to the WatchKit

00:03:01.716 --> 00:03:02.576 A:middle
extension target.

00:03:03.306 --> 00:03:05.116 A:middle
For this, open your Xcode

00:03:05.116 --> 00:03:06.676 A:middle
project and go to your WatchKit

00:03:06.676 --> 00:03:07.916 A:middle
extension target settings.

00:03:09.146 --> 00:03:10.816 A:middle
On the signing and capability

00:03:10.816 --> 00:03:13.416 A:middle
section, click Add Capability

00:03:13.416 --> 00:03:14.826 A:middle
and select Background Modes.

00:03:16.006 --> 00:03:17.746 A:middle
Finally, under Background Modes,

00:03:17.966 --> 00:03:19.806 A:middle
select the Audio Mode.

00:03:20.216 --> 00:03:21.156 A:middle
This is all that needs to be

00:03:21.156 --> 00:03:21.356 A:middle
done.

00:03:21.876 --> 00:03:24.586 A:middle
Now that the project is

00:03:24.586 --> 00:03:26.476 A:middle
configured, let's talk about the

00:03:26.476 --> 00:03:28.126 A:middle
different APIs that need to be

00:03:28.126 --> 00:03:29.596 A:middle
used during audio playback.

00:03:30.426 --> 00:03:32.426 A:middle
After your app launches and

00:03:32.426 --> 00:03:33.906 A:middle
before you activate an audio

00:03:33.906 --> 00:03:35.476 A:middle
session, you may need to

00:03:35.476 --> 00:03:36.886 A:middle
retrieve data from your servers.

00:03:38.396 --> 00:03:40.466 A:middle
This data is needed to present

00:03:40.466 --> 00:03:42.156 A:middle
streaming options and content to

00:03:42.156 --> 00:03:42.686 A:middle
users.

00:03:43.026 --> 00:03:45.366 A:middle
For example, album information,

00:03:45.756 --> 00:03:47.456 A:middle
playlist information, all

00:03:47.456 --> 00:03:48.736 A:middle
metadata about the content of

00:03:48.736 --> 00:03:49.486 A:middle
your applicant stream.

00:03:50.766 --> 00:03:52.056 A:middle
You may have already cached this

00:03:52.056 --> 00:03:54.076 A:middle
data when your app activated or

00:03:54.076 --> 00:03:55.236 A:middle
during the background refresh

00:03:55.236 --> 00:03:55.946 A:middle
opportunity.

00:03:56.486 --> 00:03:58.466 A:middle
If not, use URLSession to

00:03:58.466 --> 00:03:59.216 A:middle
retrieve your data.

00:03:59.816 --> 00:04:02.566 A:middle
At this time, socket, streaming

00:03:59.816 --> 00:04:02.566 A:middle
At this time, socket, streaming

00:04:02.566 --> 00:04:04.196 A:middle
task, and the network framework

00:04:04.196 --> 00:04:05.516 A:middle
will not be available for use.

00:04:07.686 --> 00:04:08.536 A:middle
Once you have all the

00:04:08.536 --> 00:04:09.936 A:middle
information you need to begin

00:04:09.936 --> 00:04:11.906 A:middle
streaming, activate an audio

00:04:11.906 --> 00:04:12.276 A:middle
session.

00:04:12.576 --> 00:04:14.626 A:middle
The audio session should not be

00:04:14.626 --> 00:04:16.505 A:middle
activated before this point,

00:04:16.776 --> 00:04:18.146 A:middle
because activating one can

00:04:18.146 --> 00:04:19.446 A:middle
disrupt the user experience.

00:04:20.305 --> 00:04:21.346 A:middle
This is a very important

00:04:21.346 --> 00:04:23.686 A:middle
difference between watchOS and

00:04:23.686 --> 00:04:23.886 A:middle
iOS.

00:04:23.886 --> 00:04:25.916 A:middle
On iOS, there's always a default

00:04:25.916 --> 00:04:26.956 A:middle
audio route available.

00:04:27.116 --> 00:04:27.866 A:middle
Let's figure out.

00:04:28.366 --> 00:04:29.326 A:middle
This is not the case for

00:04:29.326 --> 00:04:29.936 A:middle
watchOS.

00:04:31.376 --> 00:04:32.796 A:middle
When you activate an audio

00:04:32.796 --> 00:04:34.406 A:middle
session, watchOS will

00:04:34.436 --> 00:04:35.956 A:middle
automatically present an audio

00:04:35.956 --> 00:04:37.716 A:middle
route picker on behalf of your

00:04:37.716 --> 00:04:39.476 A:middle
application if no route is

00:04:39.476 --> 00:04:40.296 A:middle
currently active.

00:04:41.296 --> 00:04:42.606 A:middle
There are two cases where

00:04:42.606 --> 00:04:44.436 A:middle
watchOS may be able to skip

00:04:44.436 --> 00:04:45.906 A:middle
presenting the audio route

00:04:45.906 --> 00:04:46.286 A:middle
picker.

00:04:47.156 --> 00:04:48.936 A:middle
For any Bluetooth device, if the

00:04:48.936 --> 00:04:50.136 A:middle
device is already connected to

00:04:50.136 --> 00:04:52.486 A:middle
the watch, or for Bluetooth

00:04:52.486 --> 00:04:54.336 A:middle
devices based on the Apple

00:04:54.336 --> 00:04:56.456 A:middle
wireless chip set, if the device

00:04:56.456 --> 00:04:58.206 A:middle
is connected to the iPhone, the

00:04:58.206 --> 00:04:59.936 A:middle
watch may temporarily borrow it.

00:05:00.336 --> 00:05:01.986 A:middle
There are cases where this is

00:05:01.986 --> 00:05:03.626 A:middle
not possible though, for

00:05:03.656 --> 00:05:05.066 A:middle
instance, if you are on a phone

00:05:05.066 --> 00:05:06.256 A:middle
call while connected to your

00:05:06.256 --> 00:05:06.506 A:middle
iPhone.

00:05:07.086 --> 00:05:09.456 A:middle
Once your application has an

00:05:09.456 --> 00:05:11.516 A:middle
active audio session, all of the

00:05:11.516 --> 00:05:13.816 A:middle
networking APIs are available to

00:05:13.816 --> 00:05:15.316 A:middle
retrieve audio content.

00:05:15.316 --> 00:05:16.306 A:middle
This includes

00:05:16.306 --> 00:05:18.356 A:middle
URLSessionStreamingTask,

00:05:18.356 --> 00:05:20.706 A:middle
URLSessionWebSocketTask, and the

00:05:20.706 --> 00:05:21.486 A:middle
network framework.

00:05:22.376 --> 00:05:24.446 A:middle
If you attempt to use these APIs

00:05:24.446 --> 00:05:26.106 A:middle
without an active audio session,

00:05:26.386 --> 00:05:27.366 A:middle
your calls will fail.

00:05:29.466 --> 00:05:31.216 A:middle
Finally, your application has

00:05:31.216 --> 00:05:32.356 A:middle
reached the point where it has

00:05:32.356 --> 00:05:33.636 A:middle
enough audio data to start

00:05:33.636 --> 00:05:34.256 A:middle
playback.

00:05:34.686 --> 00:05:36.256 A:middle
You can now use AVFoundation to

00:05:36.256 --> 00:05:40.036 A:middle
play your audio content.

00:05:40.036 --> 00:05:40.936 A:middle
If you need to request new

00:05:40.936 --> 00:05:42.386 A:middle
information from your servers to

00:05:42.386 --> 00:05:43.716 A:middle
do your streaming, you can use

00:05:43.776 --> 00:05:45.816 A:middle
all available networking APIs to

00:05:46.516 --> 00:05:48.366 A:middle
do this.

00:05:48.366 --> 00:05:49.896 A:middle
Now, let's talk about some audio

00:05:49.896 --> 00:05:51.376 A:middle
streaming best practices for

00:05:51.376 --> 00:05:51.946 A:middle
Apple Watch.

00:05:54.076 --> 00:05:55.546 A:middle
Audio streaming on Apple Watch

00:05:55.666 --> 00:05:57.346 A:middle
is available in Series 3 and

00:05:57.346 --> 00:05:57.696 A:middle
later.

00:05:58.606 --> 00:06:00.076 A:middle
This means that your application

00:05:58.606 --> 00:06:00.076 A:middle
This means that your application

00:06:00.076 --> 00:06:01.296 A:middle
needs to check if audio

00:06:01.296 --> 00:06:02.546 A:middle
streaming is available on the

00:06:02.546 --> 00:06:03.536 A:middle
watch it is running on.

00:06:04.326 --> 00:06:05.916 A:middle
In watchOS 6, use

00:06:05.916 --> 00:06:08.106 A:middle
WKInterphaseDevices

00:06:08.106 --> 00:06:10.286 A:middle
supportsAudioStreaming to make

00:06:10.286 --> 00:06:10.816 A:middle
this check.

00:06:12.516 --> 00:06:13.956 A:middle
The additional audio and

00:06:13.956 --> 00:06:16.066 A:middle
networking APIs in watchOS 6

00:06:16.396 --> 00:06:18.156 A:middle
mean that applications no longer

00:06:18.156 --> 00:06:21.276 A:middle
need to use WatchKit's WK audio

00:06:21.276 --> 00:06:22.106 A:middle
file APIs.

00:06:22.106 --> 00:06:23.976 A:middle
For this reason, these APIs have

00:06:23.976 --> 00:06:25.326 A:middle
been deprecated starting with

00:06:25.326 --> 00:06:26.116 A:middle
watchOS 6.

00:06:27.226 --> 00:06:28.476 A:middle
Now, let's discuss some

00:06:28.476 --> 00:06:29.956 A:middle
networking best practices.

00:06:32.116 --> 00:06:33.896 A:middle
Caching is very important.

00:06:34.496 --> 00:06:35.906 A:middle
The right amount of audio data

00:06:35.906 --> 00:06:37.496 A:middle
should be locally available at

00:06:37.496 --> 00:06:39.116 A:middle
all times to cope with changing

00:06:39.116 --> 00:06:40.106 A:middle
network conditions.

00:06:41.976 --> 00:06:44.146 A:middle
The number of network requests

00:06:44.146 --> 00:06:45.416 A:middle
and their sizes should be

00:06:45.416 --> 00:06:46.926 A:middle
reduced to the absolute minimum.

00:06:47.246 --> 00:06:49.246 A:middle
Extra requests that did not post

00:06:49.246 --> 00:06:51.156 A:middle
a problem on other devices may

00:06:51.156 --> 00:06:52.426 A:middle
delay or stall playback.

00:06:53.246 --> 00:06:54.686 A:middle
The same is true for downloading

00:06:54.686 --> 00:06:55.746 A:middle
unnecessary data in those

00:06:55.746 --> 00:06:56.416 A:middle
requests.

00:06:56.906 --> 00:06:58.536 A:middle
All of these can result in poor

00:06:58.536 --> 00:06:59.506 A:middle
user experiences.

00:07:01.836 --> 00:07:03.836 A:middle
To be safe, start streaming

00:07:03.836 --> 00:07:06.376 A:middle
using 64 kbps encoded audio

00:07:06.376 --> 00:07:06.866 A:middle
data.

00:07:07.536 --> 00:07:09.346 A:middle
Monitor the speed at which data

00:07:09.346 --> 00:07:11.006 A:middle
arrives to your application and

00:07:11.006 --> 00:07:13.146 A:middle
only upgrade to higher bit rates

00:07:13.146 --> 00:07:14.516 A:middle
if the network conditions allow

00:07:14.516 --> 00:07:15.006 A:middle
for them.

00:07:15.256 --> 00:07:17.476 A:middle
AVFoundation automatically does

00:07:17.476 --> 00:07:19.106 A:middle
this for HLS audio streaming.

00:07:21.096 --> 00:07:22.706 A:middle
Do not rely on network

00:07:22.706 --> 00:07:23.356 A:middle
reachability.

00:07:23.956 --> 00:07:25.496 A:middle
Due to the nature of networks,

00:07:25.866 --> 00:07:27.796 A:middle
the information returned by this

00:07:27.796 --> 00:07:29.666 A:middle
API may no longer be valid by

00:07:29.666 --> 00:07:31.166 A:middle
the time your application uses

00:07:31.166 --> 00:07:31.356 A:middle
it.

00:07:31.746 --> 00:07:33.676 A:middle
For the best user experience,

00:07:34.006 --> 00:07:35.456 A:middle
always assume that you have a

00:07:35.456 --> 00:07:36.686 A:middle
network connection and

00:07:36.686 --> 00:07:38.526 A:middle
gracefully handle stalls and

00:07:38.526 --> 00:07:41.296 A:middle
failures, and always adjust in

00:07:41.296 --> 00:07:43.246 A:middle
real-time the audio quality and

00:07:43.246 --> 00:07:44.626 A:middle
the amount of caching that your

00:07:44.626 --> 00:07:47.546 A:middle
application does.

00:07:47.546 --> 00:07:49.066 A:middle
Finally, your application is

00:07:49.066 --> 00:07:50.356 A:middle
likely to experience more

00:07:50.356 --> 00:07:51.786 A:middle
network transitions when running

00:07:51.786 --> 00:07:52.506 A:middle
an Apple Watch.

00:07:52.636 --> 00:07:54.656 A:middle
As the watch moves away from the

00:07:54.656 --> 00:07:56.126 A:middle
iPhone, a good transition from

00:07:56.126 --> 00:07:58.176 A:middle
Bluetooth to Wi-Fi or cellular.

00:07:58.546 --> 00:08:00.266 A:middle
It is not uncommon for the watch

00:07:58.546 --> 00:08:00.266 A:middle
It is not uncommon for the watch

00:08:00.266 --> 00:08:01.556 A:middle
to go between these three

00:08:01.556 --> 00:08:02.916 A:middle
network types while your app is

00:08:02.916 --> 00:08:03.226 A:middle
running.

00:08:03.226 --> 00:08:04.926 A:middle
Your application should be

00:08:04.926 --> 00:08:06.586 A:middle
prepared for such transitions,

00:08:06.916 --> 00:08:08.166 A:middle
which can take several seconds

00:08:08.166 --> 00:08:08.656 A:middle
to complete.

00:08:09.066 --> 00:08:11.156 A:middle
As you can see, when bringing

00:08:11.156 --> 00:08:12.676 A:middle
audio streaming applications to

00:08:12.676 --> 00:08:13.696 A:middle
Apple Watch from other

00:08:13.696 --> 00:08:15.656 A:middle
platforms, Apple or otherwise,

00:08:16.066 --> 00:08:17.156 A:middle
you should be prepared for the

00:08:17.156 --> 00:08:18.416 A:middle
possibility that you will need

00:08:18.416 --> 00:08:20.106 A:middle
to optimize your networking code

00:08:20.106 --> 00:08:20.876 A:middle
and protocols.

00:08:21.416 --> 00:08:23.916 A:middle
If you need more information to

00:08:23.916 --> 00:08:25.326 A:middle
get started writing audio

00:08:25.326 --> 00:08:26.756 A:middle
applications for Apple Watch,

00:08:27.216 --> 00:08:29.656 A:middle
Creating Audio Apps for watchOS

00:08:29.656 --> 00:08:30.436 A:middle
is a great start.

00:08:30.836 --> 00:08:32.645 A:middle
The information in the network

00:08:32.645 --> 00:08:34.405 A:middle
framework introduction talk is

00:08:34.405 --> 00:08:36.346 A:middle
100% applicable to watchOS.

00:08:37.066 --> 00:08:38.956 A:middle
Finally, check out these other

00:08:38.956 --> 00:08:40.866 A:middle
sessions to help create a great

00:08:40.866 --> 00:08:41.966 A:middle
audio streaming experience.
