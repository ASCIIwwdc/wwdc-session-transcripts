WEBVTT

00:00:01.176 --> 00:00:04.500 A:middle
[ Music ]

00:00:07.296 --> 00:00:08.966 A:middle
&gt;&gt; Hello, I'm Jonathan Davis,

00:00:08.966 --> 00:00:10.626 A:middle
Web Technologies Evangelist for

00:00:10.626 --> 00:00:12.196 A:middle
the Safari and WebKit Teams.

00:00:12.686 --> 00:00:14.376 A:middle
Welcome to "Understanding CPU

00:00:14.376 --> 00:00:15.976 A:middle
Usage with Web Inspector."

00:00:17.666 --> 00:00:19.176 A:middle
We all know that battery life is

00:00:19.176 --> 00:00:20.676 A:middle
important to users, and you

00:00:20.676 --> 00:00:22.516 A:middle
probably instinctively know the

00:00:22.516 --> 00:00:23.646 A:middle
web browser is one of the

00:00:23.646 --> 00:00:25.726 A:middle
most-used apps on our devices.

00:00:26.236 --> 00:00:28.686 A:middle
But beyond that, web content is

00:00:28.686 --> 00:00:30.366 A:middle
also incorporated into many

00:00:30.366 --> 00:00:32.616 A:middle
popular iOS and macOS apps.

00:00:33.226 --> 00:00:34.626 A:middle
That means web content

00:00:34.626 --> 00:00:36.276 A:middle
significantly affects battery

00:00:36.276 --> 00:00:38.376 A:middle
life for users, so making it

00:00:38.376 --> 00:00:39.736 A:middle
power-efficient has a big

00:00:39.736 --> 00:00:40.246 A:middle
impact.

00:00:41.346 --> 00:00:42.736 A:middle
Safari and WebKit already

00:00:42.736 --> 00:00:43.706 A:middle
provide features to

00:00:43.706 --> 00:00:45.226 A:middle
automatically save power for

00:00:45.226 --> 00:00:47.096 A:middle
users when possible, such as

00:00:47.096 --> 00:00:48.746 A:middle
throttling timers when a webpage

00:00:48.746 --> 00:00:49.556 A:middle
is in the background.

00:00:50.456 --> 00:00:51.896 A:middle
And with support for content

00:00:51.896 --> 00:00:53.716 A:middle
blocker extensions, users can

00:00:53.716 --> 00:00:55.156 A:middle
automatically block loading

00:00:55.156 --> 00:00:56.646 A:middle
unwanted content that's often

00:00:56.646 --> 00:00:58.006 A:middle
just junk slowing down their

00:00:58.006 --> 00:00:59.886 A:middle
browser, or worse, tracking

00:00:59.886 --> 00:00:59.976 A:middle
them.

00:01:01.896 --> 00:01:03.316 A:middle
But even with the built-in

00:01:03.316 --> 00:01:05.025 A:middle
power-saving features in Safari,

00:01:05.275 --> 00:01:06.766 A:middle
there's a lot left in the hands

00:01:06.766 --> 00:01:08.616 A:middle
of web developers, so it's an

00:01:08.616 --> 00:01:10.126 A:middle
opportunity for all of us to

00:01:10.126 --> 00:01:11.646 A:middle
improve performance and build a

00:01:11.646 --> 00:01:13.566 A:middle
power-efficient web for users.

00:01:14.786 --> 00:01:16.746 A:middle
The good news is that everything

00:01:16.746 --> 00:01:18.376 A:middle
you know about good performance

00:01:18.376 --> 00:01:20.796 A:middle
practices on the web also apply

00:01:20.796 --> 00:01:22.466 A:middle
as best practices for saving

00:01:22.466 --> 00:01:22.896 A:middle
power.

00:01:23.486 --> 00:01:24.946 A:middle
So all of the things we've heard

00:01:24.946 --> 00:01:26.716 A:middle
about improving page load time,

00:01:27.166 --> 00:01:29.346 A:middle
optimizing JavaScript, and using

00:01:29.346 --> 00:01:31.476 A:middle
CSS animations and transitions

00:01:31.886 --> 00:01:33.496 A:middle
really help with battery life.

00:01:34.606 --> 00:01:35.756 A:middle
Whether you're experienced with

00:01:35.756 --> 00:01:36.976 A:middle
all of the best practices for

00:01:36.976 --> 00:01:38.606 A:middle
performance on the web, or just

00:01:38.606 --> 00:01:40.306 A:middle
starting out, I'm going to show

00:01:40.306 --> 00:01:42.056 A:middle
you a powerful new tool in Web

00:01:42.056 --> 00:01:43.546 A:middle
Inspector that's going to give

00:01:43.546 --> 00:01:45.006 A:middle
you super powers for finding

00:01:45.006 --> 00:01:45.996 A:middle
where performance can be

00:01:45.996 --> 00:01:47.586 A:middle
improved to save battery life.

00:01:48.426 --> 00:01:50.406 A:middle
It's called the CPU Usage

00:01:50.406 --> 00:01:52.676 A:middle
Timeline, and it's new in Web

00:01:52.676 --> 00:01:54.656 A:middle
Inspector in Safari 13 for

00:01:54.656 --> 00:01:55.316 A:middle
macOS.

00:01:55.826 --> 00:01:57.336 A:middle
It provides a window into power

00:01:57.336 --> 00:01:58.906 A:middle
use that makes it easy to see

00:01:58.906 --> 00:02:00.036 A:middle
the impact of behaviors that

00:01:58.906 --> 00:02:00.036 A:middle
the impact of behaviors that

00:02:00.036 --> 00:02:01.926 A:middle
contribute to high CPU usage.

00:02:03.996 --> 00:02:05.556 A:middle
Today, I'm going to show you how

00:02:05.556 --> 00:02:07.206 A:middle
to work with the new CPU Usage

00:02:07.206 --> 00:02:09.526 A:middle
Timeline, discover power issues

00:02:09.526 --> 00:02:11.846 A:middle
through CPU Usage, and then I'll

00:02:11.846 --> 00:02:13.386 A:middle
briefly go over some strategies

00:02:13.386 --> 00:02:14.906 A:middle
for improving power savings in

00:02:14.906 --> 00:02:16.276 A:middle
your web-based projects.

00:02:17.276 --> 00:02:18.536 A:middle
Now, before you can use the new

00:02:18.536 --> 00:02:20.066 A:middle
timeline, you'll need to enable

00:02:20.066 --> 00:02:21.616 A:middle
the Develop menu to access Web

00:02:21.616 --> 00:02:22.156 A:middle
Inspector.

00:02:23.946 --> 00:02:25.616 A:middle
Just load up Safari Preferences,

00:02:25.936 --> 00:02:28.496 A:middle
and click on Advanced, and click

00:02:28.496 --> 00:02:30.316 A:middle
to enable to Show Develop menu

00:02:30.316 --> 00:02:31.506 A:middle
in menu bar option.

00:02:33.256 --> 00:02:35.356 A:middle
Now, just load up a webpage, and

00:02:35.356 --> 00:02:36.546 A:middle
open Web Inspector from the

00:02:36.546 --> 00:02:39.136 A:middle
Develop menu, or use the

00:02:39.136 --> 00:02:40.116 A:middle
keyboard shortcut

00:02:40.116 --> 00:02:41.016 A:middle
Command-Option-I.

00:02:41.256 --> 00:02:44.056 A:middle
I'm going to use the new CPU

00:02:44.056 --> 00:02:45.936 A:middle
Usage Timeline to look for where

00:02:45.936 --> 00:02:47.386 A:middle
we can improve power on

00:02:47.386 --> 00:02:48.196 A:middle
webkit.org.

00:02:48.326 --> 00:02:50.356 A:middle
The homepage is pretty simple,

00:02:50.676 --> 00:02:51.826 A:middle
but it should be interesting,

00:02:51.906 --> 00:02:52.806 A:middle
because it still has some

00:02:52.806 --> 00:02:54.186 A:middle
dynamic things happening, like

00:02:54.186 --> 00:02:55.676 A:middle
this subtle logo animation in

00:02:55.676 --> 00:02:56.256 A:middle
the background.

00:02:58.776 --> 00:03:00.646 A:middle
With Web Inspector open, click

00:02:58.776 --> 00:03:00.646 A:middle
With Web Inspector open, click

00:03:00.646 --> 00:03:02.036 A:middle
over to the Timelines tab.

00:03:05.206 --> 00:03:06.676 A:middle
In the upper left is a list of

00:03:06.676 --> 00:03:07.716 A:middle
different timelines.

00:03:08.056 --> 00:03:08.786 A:middle
There's a bunch of other

00:03:08.786 --> 00:03:10.246 A:middle
timelines you can use, but the

00:03:10.246 --> 00:03:11.886 A:middle
defaults will work great to look

00:03:11.886 --> 00:03:13.826 A:middle
for ways to improve CPU usage.

00:03:16.236 --> 00:03:17.656 A:middle
To start a recording, you can

00:03:17.656 --> 00:03:19.276 A:middle
click the red Record button, or

00:03:19.276 --> 00:03:20.606 A:middle
press the Space bar, but I'm

00:03:20.606 --> 00:03:21.876 A:middle
going to click the Reload

00:03:21.876 --> 00:03:23.336 A:middle
button, which will automatically

00:03:23.336 --> 00:03:25.106 A:middle
start a recording and capture

00:03:25.106 --> 00:03:25.986 A:middle
page load, too.

00:03:27.536 --> 00:03:29.736 A:middle
When looking at CPU usage, it's

00:03:29.736 --> 00:03:31.076 A:middle
important to remember you'll

00:03:31.076 --> 00:03:32.766 A:middle
want to record at least 15

00:03:32.766 --> 00:03:34.546 A:middle
seconds in order to get useful

00:03:34.546 --> 00:03:35.186 A:middle
measurements.

00:03:36.116 --> 00:03:37.616 A:middle
So I'll let this recording go a

00:03:37.616 --> 00:03:38.886 A:middle
bit beyond that to capture

00:03:38.886 --> 00:03:39.396 A:middle
enough data.

00:03:41.326 --> 00:03:42.306 A:middle
Now I'll scroll over the

00:03:42.306 --> 00:03:43.796 A:middle
timeline to zoom out a bit so I

00:03:43.796 --> 00:03:44.536 A:middle
can see everything.

00:03:47.106 --> 00:03:48.786 A:middle
Clicking on the CPU timeline,

00:03:48.786 --> 00:03:50.356 A:middle
you can see details about CPU

00:03:50.356 --> 00:03:51.466 A:middle
usage of the page.

00:03:52.416 --> 00:03:54.136 A:middle
At a glance, I can tell the page

00:03:54.136 --> 00:03:55.176 A:middle
does a pretty good job of

00:03:55.176 --> 00:03:56.576 A:middle
keeping energy use low.

00:03:57.326 --> 00:03:58.896 A:middle
The quick load time helps a lot,

00:03:59.256 --> 00:04:01.346 A:middle
and when the page becomes idle,

00:03:59.256 --> 00:04:01.346 A:middle
and when the page becomes idle,

00:04:01.676 --> 00:04:03.096 A:middle
the timeline shows the page is

00:04:03.096 --> 00:04:04.386 A:middle
basically doing nothing.

00:04:05.016 --> 00:04:06.236 A:middle
This is great, because it means

00:04:06.236 --> 00:04:07.976 A:middle
users can stay on the page all

00:04:07.976 --> 00:04:10.006 A:middle
day, and the CPU drops to a very

00:04:10.006 --> 00:04:11.856 A:middle
low power state, with negligible

00:04:11.856 --> 00:04:13.416 A:middle
battery drain caused by the web

00:04:13.416 --> 00:04:14.086 A:middle
content.

00:04:16.416 --> 00:04:17.875 A:middle
The main thread is where a lot

00:04:17.875 --> 00:04:19.196 A:middle
of interesting work happens for

00:04:19.196 --> 00:04:20.005 A:middle
web content.

00:04:20.596 --> 00:04:22.055 A:middle
The main thread chart shows

00:04:22.055 --> 00:04:23.336 A:middle
different categories of work

00:04:23.496 --> 00:04:24.486 A:middle
done on the main thread,

00:04:24.486 --> 00:04:26.056 A:middle
including JavaScript processing,

00:04:26.466 --> 00:04:28.796 A:middle
painting, layout, and things in

00:04:28.796 --> 00:04:30.076 A:middle
service of layout, like style

00:04:30.076 --> 00:04:30.846 A:middle
recalculation.

00:04:31.806 --> 00:04:32.896 A:middle
Based on this, we can see that

00:04:32.896 --> 00:04:34.336 A:middle
most of the time working was

00:04:34.336 --> 00:04:35.286 A:middle
spent on painting.

00:04:35.756 --> 00:04:37.556 A:middle
In the middle of the indicator

00:04:37.556 --> 00:04:38.826 A:middle
is the time it took for the main

00:04:38.826 --> 00:04:40.046 A:middle
thread to complete its work.

00:04:40.326 --> 00:04:42.286 A:middle
The entire recording was about

00:04:42.286 --> 00:04:43.696 A:middle
20 seconds, but the main thread

00:04:43.696 --> 00:04:45.456 A:middle
only took about 100 milliseconds

00:04:45.456 --> 00:04:46.306 A:middle
to complete its work.

00:04:48.586 --> 00:04:50.146 A:middle
Below the main thread chart is a

00:04:50.146 --> 00:04:51.906 A:middle
detailed breakdown of the CPU

00:04:51.906 --> 00:04:53.596 A:middle
usage across all of the threads

00:04:53.596 --> 00:04:54.886 A:middle
involved in doing work for the

00:04:54.886 --> 00:04:55.616 A:middle
web content.

00:04:55.816 --> 00:04:58.036 A:middle
I can take a closer look at this

00:04:58.036 --> 00:04:59.516 A:middle
by clicking and dragging in the

00:04:59.516 --> 00:05:01.556 A:middle
timeline to select just the time

00:04:59.516 --> 00:05:01.556 A:middle
timeline to select just the time

00:05:01.556 --> 00:05:02.686 A:middle
range where the work is being

00:05:02.686 --> 00:05:02.986 A:middle
done.

00:05:04.396 --> 00:05:06.306 A:middle
And just under the CPU usage

00:05:06.306 --> 00:05:09.176 A:middle
graph, in this strip is the main

00:05:09.176 --> 00:05:10.616 A:middle
thread indicator, which shows

00:05:10.616 --> 00:05:11.826 A:middle
categories of work that were

00:05:11.826 --> 00:05:13.106 A:middle
happening on the main thread at

00:05:13.106 --> 00:05:14.166 A:middle
different points in time.

00:05:14.636 --> 00:05:16.866 A:middle
In this area of growing

00:05:16.866 --> 00:05:18.406 A:middle
activity, there were some layout

00:05:18.406 --> 00:05:19.716 A:middle
events in red, followed by

00:05:19.716 --> 00:05:21.446 A:middle
significant painting work, just

00:05:21.446 --> 00:05:22.636 A:middle
like in the chart above, but

00:05:22.636 --> 00:05:23.706 A:middle
showing when it happened.

00:05:26.216 --> 00:05:28.306 A:middle
The energy impact gauge really

00:05:28.306 --> 00:05:29.446 A:middle
brings it all together, though.

00:05:29.736 --> 00:05:31.386 A:middle
It provides a score based on the

00:05:31.386 --> 00:05:33.426 A:middle
total average usage across all

00:05:33.426 --> 00:05:35.366 A:middle
CPU cores for the selected time

00:05:35.366 --> 00:05:35.806 A:middle
range.

00:05:38.016 --> 00:05:39.536 A:middle
The energy impact gauge is

00:05:39.536 --> 00:05:41.256 A:middle
interactive, and as a total

00:05:41.256 --> 00:05:42.786 A:middle
average, will change depending

00:05:42.786 --> 00:05:44.086 A:middle
on the time range selected.

00:05:44.446 --> 00:05:46.366 A:middle
For the page load period, the

00:05:46.366 --> 00:05:47.886 A:middle
gauge shows medium energy

00:05:47.886 --> 00:05:49.866 A:middle
impact, but loading is expensive

00:05:49.866 --> 00:05:51.076 A:middle
in terms of power, so that's

00:05:51.076 --> 00:05:51.706 A:middle
expected.

00:05:52.156 --> 00:05:53.606 A:middle
At least this stayed out of the

00:05:53.606 --> 00:05:54.236 A:middle
high range.

00:05:54.236 --> 00:05:55.176 A:middle
That would've indicated a

00:05:55.176 --> 00:05:57.086 A:middle
problem but double-clicking the

00:05:57.086 --> 00:05:58.666 A:middle
timeline area to select the

00:05:58.666 --> 00:06:00.396 A:middle
entire recording shows the

00:05:58.666 --> 00:06:00.396 A:middle
entire recording shows the

00:06:00.396 --> 00:06:02.276 A:middle
overall average CPU is low.

00:06:02.906 --> 00:06:04.536 A:middle
I can click and drag the

00:06:04.536 --> 00:06:06.386 A:middle
timeline to select a slice of

00:06:06.386 --> 00:06:08.126 A:middle
time out of the recording and

00:06:08.126 --> 00:06:09.566 A:middle
watch the average change.

00:06:11.286 --> 00:06:13.416 A:middle
Now, when I click to grab the

00:06:13.416 --> 00:06:14.876 A:middle
selection, and slide it to a

00:06:14.876 --> 00:06:16.246 A:middle
period where the page goes idle,

00:06:16.666 --> 00:06:18.166 A:middle
the energy impact drops to low.

00:06:18.816 --> 00:06:19.836 A:middle
That's really great.

00:06:20.316 --> 00:06:21.856 A:middle
When the page is idle, we don't

00:06:21.856 --> 00:06:23.316 A:middle
want to be costing the user lots

00:06:23.316 --> 00:06:24.676 A:middle
of power for content they're not

00:06:24.676 --> 00:06:25.496 A:middle
actively using.

00:06:27.266 --> 00:06:29.116 A:middle
The CPU use was in the low range

00:06:29.116 --> 00:06:30.456 A:middle
while idle, even with the

00:06:30.456 --> 00:06:31.866 A:middle
rotating logo animation

00:06:31.866 --> 00:06:32.966 A:middle
happening in the background.

00:06:33.316 --> 00:06:34.376 A:middle
That's because it's using a

00:06:34.376 --> 00:06:36.556 A:middle
simple CSS animation that makes

00:06:36.556 --> 00:06:38.396 A:middle
it really cheap to animate, but

00:06:38.396 --> 00:06:40.036 A:middle
it still gives the page a nice

00:06:40.036 --> 00:06:40.976 A:middle
visual impact.

00:06:42.156 --> 00:06:43.606 A:middle
Webkit.org is doing great so

00:06:43.606 --> 00:06:45.056 A:middle
far, but when you're looking for

00:06:45.056 --> 00:06:47.076 A:middle
power issues, looking at loading

00:06:47.076 --> 00:06:48.406 A:middle
and idle are good starts.

00:06:49.016 --> 00:06:50.926 A:middle
To cover all of the bases, we

00:06:50.926 --> 00:06:51.716 A:middle
need to capture some

00:06:51.716 --> 00:06:52.726 A:middle
interactivity, too.

00:06:54.406 --> 00:06:56.396 A:middle
The WebKit Feature Status page

00:06:56.396 --> 00:06:57.756 A:middle
is a great way to stay up to

00:06:57.756 --> 00:06:59.256 A:middle
date on WebKit support for your

00:06:59.256 --> 00:07:00.506 A:middle
favorite web features.

00:06:59.256 --> 00:07:00.506 A:middle
favorite web features.

00:07:00.926 --> 00:07:02.266 A:middle
It allows you to filter and

00:07:02.266 --> 00:07:03.676 A:middle
search, and that's perfect for

00:07:03.676 --> 00:07:04.646 A:middle
capturing interaction.

00:07:04.936 --> 00:07:07.296 A:middle
I'm going to record a timeline

00:07:07.296 --> 00:07:08.476 A:middle
and interact with the page in

00:07:08.476 --> 00:07:09.036 A:middle
some ways.

00:07:09.036 --> 00:07:10.456 A:middle
I'll just scroll down to the

00:07:10.456 --> 00:07:11.636 A:middle
bottom, and then all the way

00:07:11.636 --> 00:07:15.766 A:middle
back up to the top, and then

00:07:15.766 --> 00:07:17.976 A:middle
I'll do a quick search, and

00:07:17.976 --> 00:07:19.086 A:middle
click on some things here and

00:07:19.086 --> 00:07:19.346 A:middle
there.

00:07:19.986 --> 00:07:22.796 A:middle
And again, we should at least

00:07:22.796 --> 00:07:24.236 A:middle
capture 15 seconds.

00:07:24.736 --> 00:07:26.256 A:middle
Since we're on a new page, we

00:07:26.256 --> 00:07:27.436 A:middle
should capture some period of

00:07:27.436 --> 00:07:28.086 A:middle
idle, too.

00:07:29.066 --> 00:07:30.466 A:middle
I'm going to let this continue

00:07:30.466 --> 00:07:32.186 A:middle
recording to get enough idle

00:07:32.186 --> 00:07:32.976 A:middle
time captured.

00:07:37.346 --> 00:07:38.556 A:middle
Okay, that looks pretty good.

00:07:39.436 --> 00:07:40.476 A:middle
Now I'm going to select the

00:07:40.476 --> 00:07:42.636 A:middle
entire recording and scroll to

00:07:42.636 --> 00:07:43.966 A:middle
zoom out of the timeline a bit

00:07:43.966 --> 00:07:45.676 A:middle
so we can see everything and

00:07:46.556 --> 00:07:48.576 A:middle
click to look at the CPU usage

00:07:48.576 --> 00:07:49.186 A:middle
details.

00:07:53.756 --> 00:07:55.186 A:middle
Let's start digging into these

00:07:55.186 --> 00:07:56.956 A:middle
areas, starting with loading.

00:07:58.836 --> 00:08:00.526 A:middle
The page managed to stay out of

00:07:58.836 --> 00:08:00.526 A:middle
The page managed to stay out of

00:08:00.526 --> 00:08:01.876 A:middle
the high range during the quick

00:08:01.876 --> 00:08:03.596 A:middle
load time, so we're okay there.

00:08:05.206 --> 00:08:06.526 A:middle
Now let's look at this range of

00:08:06.526 --> 00:08:07.326 A:middle
interactivity.

00:08:08.236 --> 00:08:09.796 A:middle
The energy impact stays in the

00:08:09.796 --> 00:08:11.406 A:middle
medium range, even with all of

00:08:11.406 --> 00:08:12.976 A:middle
these things happening, but you

00:08:12.976 --> 00:08:14.346 A:middle
can tell from the JavaScript in

00:08:14.346 --> 00:08:15.986 A:middle
events timeline there's a lot of

00:08:15.986 --> 00:08:17.446 A:middle
script firing while scrolling

00:08:17.446 --> 00:08:18.186 A:middle
and interacting.

00:08:18.866 --> 00:08:19.976 A:middle
We definitely want to avoid

00:08:19.976 --> 00:08:21.646 A:middle
doing any extra CPU work while

00:08:21.646 --> 00:08:22.996 A:middle
scrolling, since it's very

00:08:22.996 --> 00:08:23.996 A:middle
expensive to scroll.

00:08:24.956 --> 00:08:26.076 A:middle
Let's see if we need to be doing

00:08:26.076 --> 00:08:27.366 A:middle
that work or not.

00:08:28.156 --> 00:08:29.796 A:middle
The Statistics and Sources

00:08:29.796 --> 00:08:31.086 A:middle
sections tell the story.

00:08:31.936 --> 00:08:33.376 A:middle
There were over 1200 entries

00:08:33.376 --> 00:08:34.895 A:middle
into JavaScript for the selected

00:08:34.895 --> 00:08:37.405 A:middle
time in the recording, 594

00:08:37.405 --> 00:08:38.916 A:middle
request animation frame timers

00:08:38.916 --> 00:08:41.456 A:middle
fired, and there are 647 scroll

00:08:41.456 --> 00:08:41.836 A:middle
events.

00:08:42.716 --> 00:08:44.226 A:middle
Now, I know that reducing timers

00:08:44.226 --> 00:08:45.516 A:middle
and staying off of scrolling is

00:08:45.516 --> 00:08:46.786 A:middle
better for performance, but we

00:08:46.786 --> 00:08:47.946 A:middle
need to look at the code to know

00:08:47.946 --> 00:08:49.486 A:middle
if it's necessary or can be

00:08:49.486 --> 00:08:49.946 A:middle
improved.

00:08:50.876 --> 00:08:52.666 A:middle
In the Statistics area, you can

00:08:52.666 --> 00:08:54.236 A:middle
click on the timers or events to

00:08:54.236 --> 00:08:55.616 A:middle
filter the sources on the right

00:08:55.666 --> 00:08:57.556 A:middle
to the code that triggered it,

00:08:57.556 --> 00:08:59.106 A:middle
and clicking the source takes

00:08:59.106 --> 00:09:00.276 A:middle
you right to the code in the

00:08:59.106 --> 00:09:00.276 A:middle
you right to the code in the

00:09:00.276 --> 00:09:01.286 A:middle
JavaScript Debugger.

00:09:04.316 --> 00:09:06.236 A:middle
Ah, OK, it looks like the

00:09:06.236 --> 00:09:07.936 A:middle
request animation frame timer is

00:09:07.936 --> 00:09:09.776 A:middle
calling updateImages, which

00:09:09.806 --> 00:09:11.406 A:middle
iterates over all of the images,

00:09:11.466 --> 00:09:12.706 A:middle
and checks if they are in view,

00:09:12.806 --> 00:09:14.076 A:middle
and if so, it loads them.

00:09:14.676 --> 00:09:16.286 A:middle
It's a pretty basic, lazy-loaded

00:09:16.286 --> 00:09:18.426 A:middle
images pattern, but this

00:09:18.426 --> 00:09:19.916 A:middle
dimmed-out code in the debugger

00:09:20.256 --> 00:09:22.076 A:middle
tells us inView and loadImage

00:09:22.076 --> 00:09:22.966 A:middle
are never called.

00:09:24.506 --> 00:09:25.496 A:middle
Even though we scrolled the

00:09:25.496 --> 00:09:27.616 A:middle
entire page to the bottom, and

00:09:27.616 --> 00:09:29.446 A:middle
back up to the top, it makes

00:09:29.446 --> 00:09:30.666 A:middle
sense, though, because there's

00:09:30.666 --> 00:09:32.236 A:middle
basically no images on the page.

00:09:32.736 --> 00:09:34.386 A:middle
So the lazy-loading image code

00:09:34.386 --> 00:09:35.636 A:middle
shouldn't be firing at all on

00:09:35.636 --> 00:09:36.186 A:middle
this page.

00:09:36.996 --> 00:09:38.446 A:middle
Let's switch back to the code.

00:09:38.656 --> 00:09:40.816 A:middle
The images and the event

00:09:40.816 --> 00:09:42.046 A:middle
handlers are set up here.

00:09:43.346 --> 00:09:44.996 A:middle
So looking at the code, it's

00:09:44.996 --> 00:09:46.306 A:middle
just always setting up the event

00:09:46.306 --> 00:09:47.916 A:middle
handlers for scroll and resize

00:09:47.916 --> 00:09:48.586 A:middle
all of the time.

00:09:49.246 --> 00:09:50.746 A:middle
To keep that from happening, we

00:09:50.746 --> 00:09:51.986 A:middle
just need to add a conditional

00:09:51.986 --> 00:09:52.366 A:middle
guard.

00:09:53.666 --> 00:09:55.206 A:middle
There, let's try that.

00:09:58.656 --> 00:10:00.406 A:middle
OK, so let's capture a timeline

00:09:58.656 --> 00:10:00.406 A:middle
OK, so let's capture a timeline

00:10:00.406 --> 00:10:01.526 A:middle
with the fix in place.

00:10:02.236 --> 00:10:03.586 A:middle
I'll click back over to the

00:10:03.586 --> 00:10:06.246 A:middle
Timelines tab, start a new

00:10:06.246 --> 00:10:10.336 A:middle
recording, and I'll do some

00:10:10.336 --> 00:10:11.086 A:middle
quick scrolling.

00:10:13.996 --> 00:10:15.216 A:middle
You can already see there are no

00:10:15.216 --> 00:10:16.636 A:middle
JavaScript entries showing up in

00:10:16.636 --> 00:10:17.306 A:middle
the timeline.

00:10:17.496 --> 00:10:19.296 A:middle
It's all just paint, so our

00:10:19.296 --> 00:10:20.566 A:middle
guard is working to prevent

00:10:20.566 --> 00:10:21.986 A:middle
extra JavaScript work while

00:10:21.986 --> 00:10:23.676 A:middle
scrolling on a page without any

00:10:23.676 --> 00:10:24.726 A:middle
lazy-loaded images.

00:10:26.316 --> 00:10:27.866 A:middle
The energy impact has been

00:10:27.866 --> 00:10:29.356 A:middle
reduced, and all of the main

00:10:29.356 --> 00:10:30.566 A:middle
thread work is paints for

00:10:30.566 --> 00:10:32.276 A:middle
scrolling, but we need to make

00:10:32.276 --> 00:10:33.586 A:middle
sure that the pages that should

00:10:33.586 --> 00:10:35.256 A:middle
be using lazy-loaded images are

00:10:35.256 --> 00:10:35.846 A:middle
still working.

00:10:37.636 --> 00:10:39.036 A:middle
Again, with the fix in place,

00:10:39.306 --> 00:10:41.156 A:middle
I'll record a new timeline on a

00:10:41.156 --> 00:10:42.756 A:middle
page with a MotionMark logo

00:10:42.756 --> 00:10:44.176 A:middle
image at the bottom that should

00:10:44.176 --> 00:10:45.236 A:middle
use the lazy loader.

00:10:47.016 --> 00:10:48.856 A:middle
Perfect. The MotionMark image

00:10:48.856 --> 00:10:49.446 A:middle
loaded in.

00:10:49.736 --> 00:10:51.126 A:middle
I'm going to scroll to get some

00:10:51.126 --> 00:10:52.416 A:middle
CPU measurements of the new

00:10:52.416 --> 00:10:54.076 A:middle
behavior and click the CPU

00:10:54.076 --> 00:10:57.866 A:middle
Timelines to see where we're at.

00:10:58.136 --> 00:11:00.936 A:middle
So we've reduced the timer and

00:10:58.136 --> 00:11:00.936 A:middle
So we've reduced the timer and

00:11:00.936 --> 00:11:02.406 A:middle
events to just the pages where

00:11:02.406 --> 00:11:03.146 A:middle
it's necessary.

00:11:03.476 --> 00:11:06.466 A:middle
That's great, but there's still

00:11:06.466 --> 00:11:07.916 A:middle
a lot of entries into Script

00:11:07.916 --> 00:11:09.276 A:middle
when scrolling on pages with a

00:11:09.276 --> 00:11:10.436 A:middle
lazy-loaded image.

00:11:11.286 --> 00:11:12.756 A:middle
There's an API available in

00:11:12.756 --> 00:11:14.276 A:middle
Safari that we can use to take

00:11:14.276 --> 00:11:15.636 A:middle
this solution a step further.

00:11:16.176 --> 00:11:17.406 A:middle
We can replace the request

00:11:17.406 --> 00:11:18.956 A:middle
animation frame implementation

00:11:19.076 --> 00:11:20.486 A:middle
to use Intersection Observer

00:11:20.486 --> 00:11:21.126 A:middle
instead.

00:11:22.526 --> 00:11:24.016 A:middle
Intersection Observer can tell

00:11:24.016 --> 00:11:25.446 A:middle
when an element comes into view,

00:11:25.686 --> 00:11:27.046 A:middle
so you can limit your work to

00:11:27.046 --> 00:11:28.196 A:middle
just when it's visible.

00:11:28.436 --> 00:11:29.766 A:middle
And as soon as it goes out of

00:11:29.766 --> 00:11:31.466 A:middle
view, you can stop the work to

00:11:31.466 --> 00:11:33.026 A:middle
get back to a low CPU power

00:11:33.026 --> 00:11:34.306 A:middle
state and save power.

00:11:36.256 --> 00:11:37.176 A:middle
So with the Intersection

00:11:37.176 --> 00:11:38.816 A:middle
Observer implementation, let's

00:11:38.816 --> 00:11:40.536 A:middle
record another timeline, and do

00:11:40.536 --> 00:11:41.776 A:middle
some scrolling to see how this

00:11:41.776 --> 00:11:42.856 A:middle
solution performs.

00:11:44.016 --> 00:11:45.196 A:middle
And as I begin scrolling,

00:11:45.456 --> 00:11:46.736 A:middle
there's just a single entry into

00:11:46.736 --> 00:11:48.526 A:middle
JavaScript, and for the rest of

00:11:48.526 --> 00:11:49.856 A:middle
the time, it's just painting

00:11:49.856 --> 00:11:50.516 A:middle
while I scroll.

00:11:57.516 --> 00:11:58.686 A:middle
So in the end, we went from

00:11:58.686 --> 00:12:02.666 A:middle
16.3% down to 9-1/2% average CPU

00:11:58.686 --> 00:12:02.666 A:middle
16.3% down to 9-1/2% average CPU

00:12:02.666 --> 00:12:03.956 A:middle
usage with the Intersection

00:12:03.956 --> 00:12:04.796 A:middle
Observer solution.

00:12:05.276 --> 00:12:06.596 A:middle
Every little bit helps, and

00:12:06.596 --> 00:12:07.526 A:middle
that's a really nice

00:12:07.526 --> 00:12:08.086 A:middle
improvement.

00:12:08.516 --> 00:12:10.816 A:middle
So there are lots of ways to

00:12:10.816 --> 00:12:12.246 A:middle
save power in web content.

00:12:13.586 --> 00:12:15.436 A:middle
Use the CPU usage timeline to

00:12:15.436 --> 00:12:17.076 A:middle
investigate web content for ways

00:12:17.076 --> 00:12:18.676 A:middle
to improve during interactivity

00:12:18.676 --> 00:12:19.966 A:middle
and when the page is idle.

00:12:21.096 --> 00:12:23.176 A:middle
Remember that reducing CPU usage

00:12:23.176 --> 00:12:24.906 A:middle
saves energy and reduces battery

00:12:24.906 --> 00:12:25.906 A:middle
drain for users.

00:12:27.586 --> 00:12:29.586 A:middle
CSS animations and transitions

00:12:29.586 --> 00:12:31.146 A:middle
can provide dynamic visuals

00:12:31.146 --> 00:12:34.176 A:middle
without the power cost and try

00:12:34.176 --> 00:12:35.496 A:middle
to avoid doing work while

00:12:35.496 --> 00:12:36.026 A:middle
scrolling.

00:12:36.196 --> 00:12:37.546 A:middle
Using the Intersection Observer

00:12:37.546 --> 00:12:38.426 A:middle
API instead.

00:12:39.506 --> 00:12:41.306 A:middle
Users want an engaging, dynamic

00:12:41.306 --> 00:12:43.056 A:middle
experience with web content, but

00:12:43.056 --> 00:12:44.086 A:middle
the best version of those

00:12:44.086 --> 00:12:45.916 A:middle
experiences use the least amount

00:12:45.916 --> 00:12:47.086 A:middle
of CPU possible.

00:12:48.386 --> 00:12:49.106 A:middle
There are a lot more

00:12:49.106 --> 00:12:50.476 A:middle
power-saving tips for web

00:12:50.476 --> 00:12:52.006 A:middle
development on the WebKit Blog.

00:12:52.516 --> 00:12:53.416 A:middle
Check out the links in the

00:12:53.416 --> 00:12:55.316 A:middle
resources section associated

00:12:55.316 --> 00:12:56.016 A:middle
with this video.

00:12:57.866 --> 00:12:59.196 A:middle
We hope you'll try using these

00:12:59.196 --> 00:13:00.776 A:middle
tools on your web content, and

00:12:59.196 --> 00:13:00.776 A:middle
tools on your web content, and

00:13:00.776 --> 00:13:02.476 A:middle
use the advice in this video as

00:13:02.476 --> 00:13:03.816 A:middle
some starting places for your

00:13:03.816 --> 00:13:05.526 A:middle
investigations on how to make

00:13:05.526 --> 00:13:06.646 A:middle
your web content power

00:13:06.646 --> 00:13:08.496 A:middle
efficient, and join us in

00:13:08.496 --> 00:13:10.016 A:middle
helping the web become more

00:13:10.016 --> 00:13:11.976 A:middle
powerful by using less power.
