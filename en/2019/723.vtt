WEBVTT

00:00:00.506 --> 00:00:05.500 A:middle
[ Music ]

00:00:10.426 --> 00:00:12.426 A:middle
[Applause]

00:00:12.836 --> 00:00:13.626 A:middle
&gt;&gt; Hello, everyone.

00:00:13.626 --> 00:00:15.306 A:middle
My name's Tina.

00:00:16.276 --> 00:00:17.456 A:middle
I'm an engineer on the

00:00:17.456 --> 00:00:18.386 A:middle
Foundation team.

00:00:18.616 --> 00:00:20.196 A:middle
I'm going over the highlights of

00:00:20.196 --> 00:00:21.756 A:middle
the new APIs we added to

00:00:21.756 --> 00:00:22.486 A:middle
Foundation.

00:00:22.796 --> 00:00:24.176 A:middle
Now, let's get started with the

00:00:24.176 --> 00:00:25.126 A:middle
API highlights.

00:00:25.846 --> 00:00:27.386 A:middle
These are a variety of things

00:00:27.386 --> 00:00:28.796 A:middle
we're going to talk about today.

00:00:31.356 --> 00:00:32.956 A:middle
Let's get started with Ordered

00:00:32.956 --> 00:00:33.856 A:middle
Collection Diffing.

00:00:34.506 --> 00:00:36.346 A:middle
It's an API that allows you to

00:00:36.346 --> 00:00:38.896 A:middle
compute and code and apply the

00:00:38.896 --> 00:00:40.666 A:middle
diff between collections.

00:00:41.646 --> 00:00:43.326 A:middle
To illustrate this, I'm going to

00:00:43.326 --> 00:00:44.236 A:middle
tell a story.

00:00:44.916 --> 00:00:46.886 A:middle
There is a bear string that

00:00:46.886 --> 00:00:48.446 A:middle
really wants to become a bird.

00:00:49.156 --> 00:00:52.166 A:middle
Let's figure out how to do this.

00:00:52.376 --> 00:00:54.356 A:middle
We notice that the bear has an E

00:00:54.356 --> 00:00:56.186 A:middle
and A that the bird doesn't

00:00:56.186 --> 00:00:56.466 A:middle
have.

00:00:57.556 --> 00:00:59.876 A:middle
And it also needs an I and a D

00:00:59.876 --> 00:01:00.536 A:middle
from the bird.

00:00:59.876 --> 00:01:00.536 A:middle
from the bird.

00:01:01.966 --> 00:01:04.016 A:middle
So let's go ahead and remove the

00:01:04.016 --> 00:01:07.016 A:middle
E and A and insert an I in the

00:01:07.016 --> 00:01:09.306 A:middle
middle and a D in the end.

00:01:10.766 --> 00:01:12.666 A:middle
So that took two removals and

00:01:12.666 --> 00:01:15.036 A:middle
two insertions to transform a

00:01:15.216 --> 00:01:16.226 A:middle
bear to the bird.

00:01:18.556 --> 00:01:20.386 A:middle
You can do this very easily with

00:01:20.436 --> 00:01:22.796 A:middle
Ordered Collection Diffing API.

00:01:24.116 --> 00:01:26.346 A:middle
The diff here is a collection

00:01:26.346 --> 00:01:27.066 A:middle
difference type.

00:01:27.866 --> 00:01:29.626 A:middle
It's a collection of insertions

00:01:29.626 --> 00:01:31.826 A:middle
and removals that describe the

00:01:31.826 --> 00:01:34.006 A:middle
element that is inserted or

00:01:34.006 --> 00:01:36.346 A:middle
removed and the offset of the

00:01:36.346 --> 00:01:37.766 A:middle
element in the collection.

00:01:38.726 --> 00:01:40.636 A:middle
Here it contains two insertions

00:01:40.636 --> 00:01:44.876 A:middle
and two removals as we just saw.

00:01:45.106 --> 00:01:46.456 A:middle
We can apply the diff on the

00:01:46.456 --> 00:01:48.546 A:middle
bear to get a new bird string.

00:01:49.486 --> 00:01:51.376 A:middle
This is a very powerful API and

00:01:51.646 --> 00:01:53.926 A:middle
not only works with strings, but

00:01:53.926 --> 00:01:55.076 A:middle
any collection types.

00:01:55.256 --> 00:01:56.536 A:middle
That was Ordered Collection

00:01:56.536 --> 00:01:56.946 A:middle
Diffing.

00:01:57.446 --> 00:01:58.986 A:middle
Now, let's talk about data and

00:01:58.986 --> 00:01:59.816 A:middle
contiguity.

00:02:01.156 --> 00:02:02.306 A:middle
Your app may be building

00:02:02.306 --> 00:02:04.386 A:middle
pictures or other types of files

00:02:04.416 --> 00:02:05.096 A:middle
from the disk.

00:02:05.886 --> 00:02:07.966 A:middle
Usually, these forms of data can

00:02:07.966 --> 00:02:10.295 A:middle
easily be represented by a

00:02:10.295 --> 00:02:12.326 A:middle
contiguous area in memory.

00:02:13.676 --> 00:02:15.986 A:middle
On the other hand, your app may

00:02:15.986 --> 00:02:17.556 A:middle
be downloading data from the

00:02:17.556 --> 00:02:19.796 A:middle
internet using dispatch data or

00:02:19.796 --> 00:02:21.426 A:middle
URL session, for example.

00:02:22.316 --> 00:02:24.286 A:middle
This produces bytes that arrive

00:02:24.316 --> 00:02:26.026 A:middle
in multiple chunks in different

00:02:26.026 --> 00:02:27.836 A:middle
time, and occupy these

00:02:27.836 --> 00:02:29.766 A:middle
contiguous areas in memory.

00:02:31.896 --> 00:02:34.666 A:middle
Prior to Swift 5, struct Data

00:02:34.666 --> 00:02:36.726 A:middle
represented both contiguous and

00:02:36.726 --> 00:02:37.996 A:middle
discontiguous regions.

00:02:38.806 --> 00:02:40.776 A:middle
This unified interface was very

00:02:40.776 --> 00:02:43.516 A:middle
simple to use, but it also meant

00:02:43.516 --> 00:02:44.986 A:middle
that to provide whole buffer

00:02:44.986 --> 00:02:46.656 A:middle
access to the underlying raw

00:02:46.656 --> 00:02:48.846 A:middle
bytes, we needed to copy the

00:02:48.846 --> 00:02:52.956 A:middle
regions into a contiguous area.

00:02:53.116 --> 00:02:54.616 A:middle
This meant that the performance

00:02:54.706 --> 00:02:56.496 A:middle
may sometimes be unpredictable.

00:02:57.276 --> 00:02:58.776 A:middle
In fact, we have look at

00:02:58.966 --> 00:03:02.206 A:middle
real-world usage of data, and

00:02:58.966 --> 00:03:02.206 A:middle
real-world usage of data, and

00:03:02.206 --> 00:03:04.226 A:middle
every discontiguous data gets

00:03:04.226 --> 00:03:04.666 A:middle
flattened [assumed spelling]

00:03:04.776 --> 00:03:06.476 A:middle
sometime during its lifecycle.

00:03:08.716 --> 00:03:11.816 A:middle
So from Swift 5 and onwards, we

00:03:11.816 --> 00:03:14.056 A:middle
promise that struct Data is a

00:03:14.056 --> 00:03:15.326 A:middle
contiguous buffer type.

00:03:16.256 --> 00:03:17.886 A:middle
And to present this promise in

00:03:17.886 --> 00:03:20.086 A:middle
syntax, we introduce the

00:03:20.086 --> 00:03:21.746 A:middle
ContiguousBytes protocol.

00:03:23.176 --> 00:03:25.026 A:middle
Conforming to this protocol in

00:03:25.026 --> 00:03:26.606 A:middle
the case that the type offers

00:03:26.666 --> 00:03:28.566 A:middle
direct access to the underlying

00:03:28.566 --> 00:03:30.476 A:middle
raw bytes in a contiguous

00:03:30.476 --> 00:03:30.936 A:middle
manner.

00:03:31.546 --> 00:03:33.256 A:middle
So you don't need to worry about

00:03:33.256 --> 00:03:34.646 A:middle
accidentally flattening your

00:03:34.646 --> 00:03:35.546 A:middle
data anymore.

00:03:36.166 --> 00:03:39.036 A:middle
Now, how are we going to work

00:03:39.036 --> 00:03:40.616 A:middle
with other buffer types that

00:03:40.616 --> 00:03:42.736 A:middle
don't promise contiguity?

00:03:44.426 --> 00:03:46.536 A:middle
We introduce two new protocols

00:03:46.756 --> 00:03:48.236 A:middle
by taking struct Data's

00:03:48.236 --> 00:03:50.726 A:middle
interface that's independent to

00:03:50.726 --> 00:03:53.146 A:middle
contiguity and generalize it

00:03:53.146 --> 00:03:55.656 A:middle
across various buffer types, and

00:03:55.656 --> 00:03:57.806 A:middle
we arrive at DataProtocol.

00:03:58.686 --> 00:04:00.246 A:middle
That is a collection of bytes

00:03:58.686 --> 00:04:00.246 A:middle
That is a collection of bytes

00:04:00.916 --> 00:04:03.676 A:middle
and MutableDataProtocol to offer

00:04:03.676 --> 00:04:04.976 A:middle
additional mutability

00:04:04.976 --> 00:04:05.766 A:middle
guarantees.

00:04:08.556 --> 00:04:10.076 A:middle
Buffer types offered by

00:04:10.076 --> 00:04:12.116 A:middle
Foundation the Swift Standard

00:04:12.116 --> 00:04:13.786 A:middle
Library and the dispatch

00:04:13.826 --> 00:04:15.926 A:middle
framework have adopted these

00:04:15.926 --> 00:04:16.536 A:middle
protocols.

00:04:17.505 --> 00:04:18.625 A:middle
You probably have worked with

00:04:18.625 --> 00:04:20.305 A:middle
some of the types, including

00:04:20.416 --> 00:04:23.156 A:middle
Data, array of UInt8 and

00:04:23.156 --> 00:04:24.056 A:middle
DispatchData.

00:04:25.466 --> 00:04:26.986 A:middle
We encourage you to adopt them

00:04:26.986 --> 00:04:29.226 A:middle
on your types or methods too as

00:04:29.226 --> 00:04:30.466 A:middle
a generic constraint.

00:04:33.676 --> 00:04:34.876 A:middle
Now, let's talk about

00:04:34.876 --> 00:04:35.516 A:middle
compression.

00:04:36.716 --> 00:04:38.306 A:middle
Oftentimes, you want to make

00:04:38.306 --> 00:04:40.216 A:middle
your data as small as possible.

00:04:41.026 --> 00:04:41.796 A:middle
It could be that your

00:04:41.796 --> 00:04:43.096 A:middle
application is running on

00:04:43.096 --> 00:04:45.406 A:middle
devices with limited disk space

00:04:46.026 --> 00:04:47.226 A:middle
or you need to transmit

00:04:47.226 --> 00:04:48.846 A:middle
resources from or to the

00:04:48.846 --> 00:04:49.436 A:middle
internet.

00:04:51.316 --> 00:04:52.906 A:middle
This is a very common task.

00:04:53.456 --> 00:04:55.126 A:middle
So we added the compression API

00:04:55.126 --> 00:04:56.456 A:middle
to data in Swift.

00:04:57.096 --> 00:04:58.776 A:middle
It is now as simple.

00:04:59.576 --> 00:04:59.936 A:middle
Thank you.

00:05:00.516 --> 00:05:02.676 A:middle
[ Applause ]

00:05:03.176 --> 00:05:04.856 A:middle
It's as simple as this one line

00:05:05.066 --> 00:05:06.046 A:middle
of code.

00:05:07.216 --> 00:05:09.196 A:middle
The API also supports four

00:05:09.196 --> 00:05:11.936 A:middle
compression algorithms to offer

00:05:11.936 --> 00:05:13.816 A:middle
you different balances between

00:05:13.816 --> 00:05:16.116 A:middle
speed, memory and compression

00:05:16.116 --> 00:05:16.676 A:middle
ratio.

00:05:17.476 --> 00:05:19.296 A:middle
I believe you can find one that

00:05:19.356 --> 00:05:20.486 A:middle
best suits your needs.

00:05:23.036 --> 00:05:24.806 A:middle
Now, let's move on to units.

00:05:25.756 --> 00:05:27.856 A:middle
Foundation already supports 21

00:05:27.856 --> 00:05:29.496 A:middle
classes to represent common

00:05:29.496 --> 00:05:31.746 A:middle
physical units such as length,

00:05:32.086 --> 00:05:33.726 A:middle
speed and duration.

00:05:35.106 --> 00:05:36.756 A:middle
We extended the unit duration

00:05:36.756 --> 00:05:39.116 A:middle
class with subsecond precision

00:05:39.116 --> 00:05:41.316 A:middle
units up until picoseconds.

00:05:41.926 --> 00:05:43.626 A:middle
That is a trillionth of a

00:05:43.686 --> 00:05:44.136 A:middle
second.

00:05:45.446 --> 00:05:47.426 A:middle
The unit frequency class uses

00:05:47.426 --> 00:05:49.506 A:middle
hertz as a base unit currently,

00:05:50.086 --> 00:05:51.516 A:middle
and this year it gained

00:05:51.626 --> 00:05:52.656 A:middle
framesPerSecond.

00:05:53.686 --> 00:05:55.316 A:middle
It's functionally equivalent to

00:05:55.386 --> 00:05:57.686 A:middle
hertz but its cemented meaning

00:05:57.686 --> 00:05:59.346 A:middle
makes it ideal to represent

00:05:59.416 --> 00:06:02.046 A:middle
on-device FPS measurement.

00:05:59.416 --> 00:06:02.046 A:middle
on-device FPS measurement.

00:06:04.076 --> 00:06:06.326 A:middle
The UnitInformationStorage class

00:06:06.326 --> 00:06:06.666 A:middle
is new.

00:06:06.666 --> 00:06:09.496 A:middle
It can be used to represent the

00:06:09.496 --> 00:06:11.466 A:middle
amount of digital information.

00:06:12.616 --> 00:06:14.876 A:middle
The basic units are bits, bytes

00:06:15.096 --> 00:06:15.666 A:middle
and nibbles.

00:06:16.526 --> 00:06:19.006 A:middle
And the commonly used SI prefix

00:06:19.176 --> 00:06:21.596 A:middle
and base-2 prefix units from

00:06:21.596 --> 00:06:24.716 A:middle
kilo and kibi up until yotta and

00:06:24.716 --> 00:06:26.276 A:middle
yobi are also supported.

00:06:27.746 --> 00:06:29.056 A:middle
You can use it along with

00:06:29.706 --> 00:06:31.626 A:middle
MeasurementFormatter to format,

00:06:31.886 --> 00:06:34.496 A:middle
say, data size, or you can use

00:06:34.496 --> 00:06:36.416 A:middle
it with ByteCountFormatter if

00:06:36.416 --> 00:06:37.986 A:middle
you want more exact control.

00:06:38.526 --> 00:06:41.746 A:middle
And we have more formatters for

00:06:41.746 --> 00:06:42.076 A:middle
you.

00:06:42.626 --> 00:06:44.686 A:middle
You probably have seen strings

00:06:44.686 --> 00:06:46.256 A:middle
like these somewhere every day.

00:06:47.066 --> 00:06:48.706 A:middle
Like, the status of a message

00:06:48.706 --> 00:06:51.456 A:middle
you sent is read 1 hour ago, or

00:06:51.456 --> 00:06:53.936 A:middle
there is a payment due tomorrow.

00:06:54.516 --> 00:06:56.836 A:middle
That is a date or time displayed

00:06:56.836 --> 00:06:58.216 A:middle
as a relative point to the

00:06:58.216 --> 00:06:58.706 A:middle
present.

00:07:00.016 --> 00:07:02.516 A:middle
It's not very trivial to make it

00:07:02.516 --> 00:07:05.356 A:middle
correct for all locales, so we

00:07:05.426 --> 00:07:05.796 A:middle
added the

00:07:05.796 --> 00:07:07.576 A:middle
RelativeDateTimeFormatter to

00:07:07.576 --> 00:07:08.306 A:middle
help you with this.

00:07:09.516 --> 00:07:14.196 A:middle
[ Cheering ]

00:07:14.696 --> 00:07:14.916 A:middle
Thank you.

00:07:15.826 --> 00:07:17.396 A:middle
And just like other formatters,

00:07:17.726 --> 00:07:19.426 A:middle
the return string is locale

00:07:19.496 --> 00:07:21.336 A:middle
friendly, and there are multiple

00:07:21.336 --> 00:07:22.616 A:middle
styles you can use.

00:07:24.576 --> 00:07:26.186 A:middle
Another thing you probably want

00:07:26.186 --> 00:07:29.216 A:middle
to format is a list, and we also

00:07:29.376 --> 00:07:31.026 A:middle
added ListFormatter to make this

00:07:31.026 --> 00:07:32.366 A:middle
super easy for you [laughs].

00:07:33.516 --> 00:07:36.896 A:middle
[ Applause ]

00:07:37.396 --> 00:07:39.396 A:middle
It formats a list into a string

00:07:39.426 --> 00:07:41.326 A:middle
that uses the correct separator

00:07:41.326 --> 00:07:42.846 A:middle
and conjunctions for all

00:07:42.846 --> 00:07:43.286 A:middle
locales.

00:07:44.816 --> 00:07:46.256 A:middle
Here is another example.

00:07:46.936 --> 00:07:48.066 A:middle
Say there is an event that's

00:07:48.106 --> 00:07:49.216 A:middle
going to occur at three

00:07:49.666 --> 00:07:50.956 A:middle
different dates.

00:07:51.636 --> 00:07:53.286 A:middle
So you probably want to show a

00:07:53.286 --> 00:07:56.336 A:middle
string like the top or the one

00:07:56.336 --> 00:07:57.976 A:middle
on the bottom that you spell out

00:07:57.976 --> 00:07:59.616 A:middle
the name of the month on your

00:07:59.616 --> 00:08:01.086 A:middle
Event page.

00:07:59.616 --> 00:08:01.086 A:middle
Event page.

00:08:02.286 --> 00:08:03.576 A:middle
And, of course, you want to

00:08:03.576 --> 00:08:05.136 A:middle
display those using the correct

00:08:05.136 --> 00:08:06.876 A:middle
format and localized name for

00:08:06.876 --> 00:08:07.836 A:middle
different locales.

00:08:08.676 --> 00:08:10.436 A:middle
This is important, because, for

00:08:10.436 --> 00:08:13.206 A:middle
example, in Europe, they usually

00:08:13.206 --> 00:08:14.766 A:middle
counting before month in

00:08:14.766 --> 00:08:15.246 A:middle
writing.

00:08:16.656 --> 00:08:18.496 A:middle
You can also do this very easily

00:08:18.496 --> 00:08:19.586 A:middle
with ListFormatter.

00:08:21.776 --> 00:08:23.956 A:middle
It comes with a property called

00:08:23.956 --> 00:08:26.286 A:middle
itemFormatter whose role is to

00:08:26.286 --> 00:08:28.036 A:middle
format each item in a list.

00:08:28.916 --> 00:08:30.776 A:middle
In this case, we want to format

00:08:30.776 --> 00:08:33.395 A:middle
a list of dates, and we know

00:08:33.395 --> 00:08:35.025 A:middle
that Foundation supports date

00:08:35.025 --> 00:08:36.905 A:middle
formatting using DateFormatter.

00:08:37.756 --> 00:08:39.626 A:middle
So let's use it as our date

00:08:39.626 --> 00:08:40.566 A:middle
itemFormatter.

00:08:41.946 --> 00:08:43.216 A:middle
And this is all we need.

00:08:43.836 --> 00:08:44.356 A:middle
We're all set.

00:08:45.826 --> 00:08:47.086 A:middle
This gives your localized

00:08:47.086 --> 00:08:49.106 A:middle
strings as the examples on the

00:08:49.106 --> 00:08:49.636 A:middle
bottom.

00:08:52.836 --> 00:08:54.636 A:middle
You can easily change the date

00:08:54.636 --> 00:08:56.446 A:middle
style by setting the property on

00:08:56.446 --> 00:08:57.206 A:middle
DateFormatter.

00:08:58.226 --> 00:08:59.776 A:middle
ListFormatter works with all

00:08:59.776 --> 00:09:01.676 A:middle
formatters, so please take

00:08:59.776 --> 00:09:01.676 A:middle
formatters, so please take

00:09:01.676 --> 00:09:04.226 A:middle
advantage of it and make string

00:09:04.226 --> 00:09:05.866 A:middle
localized greatly in your

00:09:05.866 --> 00:09:06.756 A:middle
application.

00:09:09.836 --> 00:09:11.446 A:middle
So that was Formatter.

00:09:12.186 --> 00:09:13.666 A:middle
Now let's move on to Operation

00:09:13.666 --> 00:09:14.056 A:middle
Queue.

00:09:15.456 --> 00:09:17.376 A:middle
Imagine in your app there are a

00:09:17.376 --> 00:09:18.836 A:middle
bunch of background tasks

00:09:18.836 --> 00:09:19.986 A:middle
running concurrently.

00:09:20.536 --> 00:09:23.806 A:middle
At this moment, the user wants

00:09:23.806 --> 00:09:25.136 A:middle
to save the state of this

00:09:25.136 --> 00:09:27.416 A:middle
running app, so how would you do

00:09:27.416 --> 00:09:27.856 A:middle
this?

00:09:28.956 --> 00:09:30.466 A:middle
Well, you want to make sure all

00:09:30.466 --> 00:09:32.066 A:middle
the running tasks are finished

00:09:32.176 --> 00:09:33.356 A:middle
before you can save.

00:09:34.346 --> 00:09:36.346 A:middle
So it might be tempting to do

00:09:36.346 --> 00:09:37.926 A:middle
something like this.

00:09:39.156 --> 00:09:41.166 A:middle
That is you check the number of

00:09:41.166 --> 00:09:42.746 A:middle
running operations in the

00:09:42.746 --> 00:09:45.056 A:middle
concurrent queue, and if there

00:09:45.056 --> 00:09:46.956 A:middle
isn't any, it must mean that

00:09:46.956 --> 00:09:48.406 A:middle
everything we scheduled must

00:09:48.406 --> 00:09:49.016 A:middle
have finished.

00:09:49.616 --> 00:09:51.086 A:middle
So we're ready to save, right?

00:09:52.256 --> 00:09:53.786 A:middle
Nope, this is wrong.

00:09:54.176 --> 00:09:55.976 A:middle
Please don't do this.

00:09:58.226 --> 00:09:59.976 A:middle
It's possible that some other

00:09:59.976 --> 00:10:01.746 A:middle
tasks are being scheduled at the

00:09:59.976 --> 00:10:01.746 A:middle
tasks are being scheduled at the

00:10:01.746 --> 00:10:03.376 A:middle
same time in all their threads,

00:10:03.936 --> 00:10:05.606 A:middle
like right after the check

00:10:05.606 --> 00:10:07.506 A:middle
passes and before the save

00:10:07.506 --> 00:10:08.096 A:middle
happens.

00:10:08.726 --> 00:10:11.726 A:middle
What you actually want here is a

00:10:11.726 --> 00:10:13.516 A:middle
barrier to guard the safe

00:10:13.516 --> 00:10:15.726 A:middle
operation and to make sure that

00:10:15.726 --> 00:10:18.196 A:middle
no other tasks can run while the

00:10:18.196 --> 00:10:19.376 A:middle
app is being saved.

00:10:20.606 --> 00:10:23.936 A:middle
Something like this.

00:10:24.156 --> 00:10:26.006 A:middle
So we're very excited to let you

00:10:26.006 --> 00:10:27.656 A:middle
know that Operation Queue now

00:10:27.656 --> 00:10:28.716 A:middle
supports barrier.

00:10:29.566 --> 00:10:31.026 A:middle
You should add the BarrierBlock

00:10:31.466 --> 00:10:33.096 A:middle
and put your saving operation

00:10:33.096 --> 00:10:34.216 A:middle
inside the barrier.

00:10:35.086 --> 00:10:36.726 A:middle
This guarantees that the save

00:10:36.726 --> 00:10:38.846 A:middle
operation is the only task

00:10:38.976 --> 00:10:40.306 A:middle
running at that particular

00:10:40.306 --> 00:10:42.846 A:middle
period of time, and it only

00:10:42.846 --> 00:10:44.566 A:middle
executes when everything

00:10:44.566 --> 00:10:46.086 A:middle
previously scheduled is finished

00:10:46.756 --> 00:10:48.866 A:middle
and that no other new jobs will

00:10:48.866 --> 00:10:51.406 A:middle
run before it's finished.

00:10:52.516 --> 00:10:57.496 A:middle
[ Applause ]

00:10:57.996 --> 00:10:59.346 A:middle
Another update we have for

00:10:59.346 --> 00:11:00.776 A:middle
Operation Queue is progress

00:10:59.346 --> 00:11:00.776 A:middle
Operation Queue is progress

00:11:00.776 --> 00:11:01.416 A:middle
reporting.

00:11:02.366 --> 00:11:03.816 A:middle
Sometimes you may want to track

00:11:03.866 --> 00:11:05.356 A:middle
the overall progress of your

00:11:05.356 --> 00:11:07.336 A:middle
concurrent jobs and maybe

00:11:07.336 --> 00:11:09.436 A:middle
display a progress bar in your

00:11:09.866 --> 00:11:09.956 A:middle
UI.

00:11:10.356 --> 00:11:12.186 A:middle
You can now do this by setting

00:11:12.186 --> 00:11:14.176 A:middle
the totalUnitCount on the

00:11:14.176 --> 00:11:15.986 A:middle
progress property of the

00:11:15.986 --> 00:11:16.986 A:middle
Operation Queue.

00:11:18.376 --> 00:11:20.166 A:middle
Each operation you added to the

00:11:20.166 --> 00:11:22.126 A:middle
Operation Queue counterbuilds

00:11:22.126 --> 00:11:23.036 A:middle
[assumed spelling] one unit of

00:11:23.036 --> 00:11:24.706 A:middle
completion to the overall

00:11:24.706 --> 00:11:26.566 A:middle
progress once operation is

00:11:26.596 --> 00:11:26.976 A:middle
finished.

00:11:32.626 --> 00:11:34.036 A:middle
Next up. Filesystem.

00:11:35.116 --> 00:11:37.546 A:middle
iOS now supports USB and SMB

00:11:37.546 --> 00:11:39.386 A:middle
volumes, which is a network

00:11:39.386 --> 00:11:40.196 A:middle
filesystem.

00:11:41.126 --> 00:11:42.426 A:middle
This means that you should be

00:11:42.426 --> 00:11:44.086 A:middle
prepared to handle files that

00:11:44.086 --> 00:11:45.866 A:middle
may exist on other volumes.

00:11:46.956 --> 00:11:48.016 A:middle
So make sure you use

00:11:48.106 --> 00:11:48.956 A:middle
FileManager's

00:11:48.956 --> 00:11:51.306 A:middle
itemReplacementDirectory when

00:11:51.306 --> 00:11:53.016 A:middle
choosing locations to write new

00:11:53.016 --> 00:11:55.166 A:middle
file contents to when doing an

00:11:55.166 --> 00:11:57.916 A:middle
Atomic Safe-Save operation.

00:11:59.336 --> 00:12:01.766 A:middle
Next, be prepared that volumes

00:11:59.336 --> 00:12:01.766 A:middle
Next, be prepared that volumes

00:12:01.766 --> 00:12:03.786 A:middle
may disappear completely if the

00:12:03.786 --> 00:12:06.306 A:middle
user pulls out the USB drive or

00:12:06.306 --> 00:12:08.186 A:middle
you lose network connectivity to

00:12:08.186 --> 00:12:09.306 A:middle
an SMB server.

00:12:10.626 --> 00:12:11.946 A:middle
So if you choose the memory

00:12:11.946 --> 00:12:13.536 A:middle
mapped files when reading data

00:12:13.536 --> 00:12:15.946 A:middle
objects, make sure you use

00:12:16.316 --> 00:12:18.136 A:middle
mappedIfSafe as your reading

00:12:18.136 --> 00:12:18.666 A:middle
option.

00:12:19.696 --> 00:12:21.306 A:middle
This will allow the system to

00:12:21.306 --> 00:12:23.446 A:middle
map the file into virtual memory

00:12:23.446 --> 00:12:26.286 A:middle
but only if the file is located

00:12:26.396 --> 00:12:28.016 A:middle
on nonremovable volumes.

00:12:28.806 --> 00:12:31.176 A:middle
Accessing files from USB or SMB

00:12:31.176 --> 00:12:33.206 A:middle
drive may be tangibly slower

00:12:33.206 --> 00:12:34.746 A:middle
than when you access files on

00:12:34.746 --> 00:12:35.636 A:middle
the internal drive.

00:12:36.886 --> 00:12:38.016 A:middle
So if you're not doing this

00:12:38.016 --> 00:12:40.116 A:middle
already, please defer file

00:12:40.116 --> 00:12:42.296 A:middle
system access to non-main thread

00:12:42.696 --> 00:12:44.366 A:middle
to make sure your app remains

00:12:44.366 --> 00:12:45.016 A:middle
responsive.

00:12:45.596 --> 00:12:48.426 A:middle
You may need to test file system

00:12:48.426 --> 00:12:50.136 A:middle
capabilities before you use

00:12:50.136 --> 00:12:50.446 A:middle
them.

00:12:51.376 --> 00:12:53.976 A:middle
For instance, the APFS features

00:12:53.976 --> 00:12:55.536 A:middle
that you're familiar with like

00:12:55.606 --> 00:12:58.536 A:middle
cloning may not be available

00:12:58.536 --> 00:13:00.486 A:middle
when you access external volumes

00:12:58.536 --> 00:13:00.486 A:middle
when you access external volumes

00:13:00.586 --> 00:13:02.386 A:middle
via USB or SMB.

00:13:03.786 --> 00:13:05.006 A:middle
You can test for these

00:13:05.146 --> 00:13:06.986 A:middle
capabilities in events with

00:13:07.036 --> 00:13:10.156 A:middle
various URL resource keys, or

00:13:10.156 --> 00:13:11.846 A:middle
you can make sure you're

00:13:11.846 --> 00:13:13.976 A:middle
prepared to handle and receive

00:13:13.976 --> 00:13:14.436 A:middle
errors.

00:13:15.706 --> 00:13:17.286 A:middle
You can find more information

00:13:17.286 --> 00:13:19.756 A:middle
about this in the What's New in

00:13:19.756 --> 00:13:21.816 A:middle
File Management and QuickLook

00:13:22.426 --> 00:13:22.526 A:middle
talk.

00:13:25.676 --> 00:13:27.016 A:middle
Next up. Swift update.

00:13:28.716 --> 00:13:30.806 A:middle
Some Swift APIs were designed

00:13:30.806 --> 00:13:32.676 A:middle
originally with Objective-C in

00:13:32.676 --> 00:13:35.936 A:middle
mind, and we continued to

00:13:35.936 --> 00:13:37.536 A:middle
improve them over the years.

00:13:38.456 --> 00:13:39.546 A:middle
First is scanner.

00:13:40.146 --> 00:13:43.536 A:middle
This is the API in Swift 4.

00:13:44.466 --> 00:13:47.716 A:middle
It used to use NSString and

00:13:47.716 --> 00:13:49.266 A:middle
return objects by reference.

00:13:51.266 --> 00:13:54.596 A:middle
In Swift 5.1, we simplify this

00:13:54.596 --> 00:13:56.336 A:middle
interface to this one line of

00:13:56.466 --> 00:13:56.716 A:middle
code.

00:13:58.636 --> 00:14:01.466 A:middle
What's more, the new API uses

00:13:58.636 --> 00:14:01.466 A:middle
What's more, the new API uses

00:14:01.616 --> 00:14:04.436 A:middle
the string type of Swift so that

00:14:04.516 --> 00:14:06.086 A:middle
strings are collections of

00:14:06.176 --> 00:14:08.396 A:middle
graphing instead of code points.

00:14:09.356 --> 00:14:11.126 A:middle
This means that you can now work

00:14:11.126 --> 00:14:12.906 A:middle
on complex sequences with the

00:14:12.906 --> 00:14:15.556 A:middle
new scanner API perfectly, such

00:14:15.556 --> 00:14:16.426 A:middle
as emojis.

00:14:19.656 --> 00:14:21.116 A:middle
Another improvement is

00:14:21.116 --> 00:14:21.916 A:middle
FileHandle.

00:14:22.996 --> 00:14:24.756 A:middle
It used to throw exceptions when

00:14:24.756 --> 00:14:27.176 A:middle
errors occur on the underlying

00:14:27.216 --> 00:14:28.136 A:middle
file descriptor.

00:14:29.256 --> 00:14:30.736 A:middle
This year, we introduced

00:14:30.736 --> 00:14:33.526 A:middle
error-based API, so you can now

00:14:33.526 --> 00:14:35.626 A:middle
handle the error right away at

00:14:35.626 --> 00:14:36.256 A:middle
call sites.

00:14:36.256 --> 00:14:39.466 A:middle
The API for writing data now

00:14:39.536 --> 00:14:41.526 A:middle
also works with data protocol.

00:14:42.306 --> 00:14:44.116 A:middle
It's also optimized to work with

00:14:44.256 --> 00:14:46.206 A:middle
noncontiguous data.

00:14:48.476 --> 00:14:49.946 A:middle
So these were the highlights of

00:14:49.946 --> 00:14:50.646 A:middle
the new APIs.

00:14:51.706 --> 00:14:53.306 A:middle
We encourage you to grab the new

00:14:53.306 --> 00:14:55.296 A:middle
Xcode and try these exciting

00:14:55.336 --> 00:14:56.026 A:middle
features out.

00:14:57.266 --> 00:14:58.916 A:middle
When writing new methods to work

00:14:58.916 --> 00:15:01.486 A:middle
with binary data, consider

00:14:58.916 --> 00:15:01.486 A:middle
with binary data, consider

00:15:01.486 --> 00:15:03.016 A:middle
making them bound on the data

00:15:03.016 --> 00:15:04.886 A:middle
protocol type instead of

00:15:04.886 --> 00:15:06.776 A:middle
requiring particular collection,

00:15:07.236 --> 00:15:09.096 A:middle
like array of UInt8.

00:15:10.466 --> 00:15:12.386 A:middle
If you're displaying dates or

00:15:12.386 --> 00:15:15.146 A:middle
lists in your UI with strings,

00:15:16.506 --> 00:15:19.586 A:middle
use RelativeDateTimeFormatter or

00:15:19.586 --> 00:15:21.526 A:middle
a ListFormatter to makes sure

00:15:21.526 --> 00:15:23.356 A:middle
the string work in every locale.

00:15:23.956 --> 00:15:26.956 A:middle
We urge you to use Operation

00:15:26.956 --> 00:15:29.316 A:middle
Queue's barrier to avoid race

00:15:29.316 --> 00:15:30.056 A:middle
condition.

00:15:31.106 --> 00:15:32.666 A:middle
And if you're using some sort of

00:15:32.776 --> 00:15:34.436 A:middle
progress-reporting mechanism,

00:15:35.146 --> 00:15:36.896 A:middle
switch to use the one provided

00:15:36.896 --> 00:15:37.996 A:middle
by Operation Queue.

00:15:38.776 --> 00:15:39.506 A:middle
Thank you.

00:15:40.516 --> 00:15:45.500 A:middle
[ Applause ]
