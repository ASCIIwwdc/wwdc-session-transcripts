WEBVTT

00:00:00.506 --> 00:00:04.516 A:middle
[ Music ]

00:00:11.516 --> 00:00:14.936 A:middle
[ Applause ]

00:00:15.436 --> 00:00:16.556 A:middle
&gt;&gt; Hi everybody.

00:00:16.886 --> 00:00:18.086 A:middle
It's so great to be with you all

00:00:18.086 --> 00:00:19.396 A:middle
again at WWDC.

00:00:20.556 --> 00:00:23.526 A:middle
I'm Dave. If you've seen the

00:00:23.526 --> 00:00:25.756 A:middle
other sessions on SwiftUI, you

00:00:25.756 --> 00:00:28.366 A:middle
know how easy it is to assemble

00:00:28.366 --> 00:00:29.806 A:middle
all the parts of an application

00:00:29.806 --> 00:00:30.816 A:middle
and get it working.

00:00:31.776 --> 00:00:34.196 A:middle
Today, John and I are going to

00:00:34.196 --> 00:00:36.526 A:middle
show you how to go from creating

00:00:36.526 --> 00:00:39.056 A:middle
a functional app to one with

00:00:40.226 --> 00:00:42.486 A:middle
fine-tuned layout, beautiful

00:00:42.486 --> 00:00:44.906 A:middle
graphics, and some really cool

00:00:44.906 --> 00:00:45.566 A:middle
animations.

00:00:47.336 --> 00:00:49.346 A:middle
We're going to present two

00:00:49.346 --> 00:00:52.396 A:middle
SwiftUI subsystems and then

00:00:52.396 --> 00:00:53.206 A:middle
John's going to use them

00:00:53.206 --> 00:00:54.576 A:middle
together to build a custom

00:00:54.576 --> 00:00:55.016 A:middle
control.

00:00:55.726 --> 00:00:57.016 A:middle
So let's get started.

00:00:57.706 --> 00:01:00.346 A:middle
Now from the moment you get

00:00:57.706 --> 00:01:00.346 A:middle
Now from the moment you get

00:01:00.346 --> 00:01:02.426 A:middle
started with SwiftUI you're

00:01:02.426 --> 00:01:04.206 A:middle
already experiencing the layout

00:01:04.206 --> 00:01:04.546 A:middle
system.

00:01:05.275 --> 00:01:06.986 A:middle
So that blue box you see around

00:01:06.986 --> 00:01:08.536 A:middle
the text in your preview editor,

00:01:09.176 --> 00:01:11.426 A:middle
that's its bounds and layout's

00:01:11.426 --> 00:01:12.936 A:middle
all about deciding the bounds of

00:01:12.936 --> 00:01:13.756 A:middle
things on the screen.

00:01:15.006 --> 00:01:16.436 A:middle
But let's take a look under the

00:01:16.486 --> 00:01:18.146 A:middle
hood and see what's happening

00:01:18.456 --> 00:01:19.226 A:middle
with this example.

00:01:21.576 --> 00:01:23.626 A:middle
Technically, there are three

00:01:23.626 --> 00:01:24.446 A:middle
views at work here.

00:01:25.006 --> 00:01:26.976 A:middle
There's the text at the bottom

00:01:26.976 --> 00:01:27.916 A:middle
of the view hierarchy.

00:01:28.466 --> 00:01:31.876 A:middle
Your content view which always

00:01:31.876 --> 00:01:33.986 A:middle
has the same bounds as its body,

00:01:34.096 --> 00:01:34.696 A:middle
the text.

00:01:36.026 --> 00:01:39.136 A:middle
And finally, the root view which

00:01:39.136 --> 00:01:40.986 A:middle
in this case has the dimensions

00:01:40.986 --> 00:01:43.066 A:middle
of the device minus the safe

00:01:43.066 --> 00:01:43.986 A:middle
area insets.

00:01:44.566 --> 00:01:45.956 A:middle
So if you see something like

00:01:46.016 --> 00:01:47.456 A:middle
this at the top of your phone,

00:01:47.846 --> 00:01:49.166 A:middle
for example, it's not included.

00:01:49.786 --> 00:01:54.306 A:middle
Pro tip, you can still lay stuff

00:01:54.306 --> 00:01:56.046 A:middle
out in that area by using this

00:01:56.046 --> 00:01:57.616 A:middle
modifier, okay?

00:01:57.956 --> 00:01:59.506 A:middle
But by default you're in the

00:01:59.506 --> 00:02:00.126 A:middle
safety zone.

00:01:59.506 --> 00:02:00.126 A:middle
safety zone.

00:02:01.396 --> 00:02:04.396 A:middle
Now, the top layer of any view

00:02:04.476 --> 00:02:06.216 A:middle
with a body is always what we

00:02:06.216 --> 00:02:07.536 A:middle
call layout neutral.

00:02:08.235 --> 00:02:10.856 A:middle
So its bounds are defined by the

00:02:10.856 --> 00:02:11.906 A:middle
bounds of its body.

00:02:11.966 --> 00:02:13.346 A:middle
They act the same.

00:02:13.776 --> 00:02:15.306 A:middle
So you can really treat them as

00:02:15.356 --> 00:02:17.036 A:middle
the same view for the purposes

00:02:17.036 --> 00:02:17.726 A:middle
of layout.

00:02:18.536 --> 00:02:20.076 A:middle
So there are really only two

00:02:20.076 --> 00:02:22.546 A:middle
views of interest here and the

00:02:22.546 --> 00:02:24.946 A:middle
layout process has three steps.

00:02:25.956 --> 00:02:28.646 A:middle
First, the root view offers the

00:02:28.646 --> 00:02:31.606 A:middle
text a proposed size and that's

00:02:31.606 --> 00:02:32.816 A:middle
represented by those two big

00:02:32.816 --> 00:02:33.556 A:middle
wide arrows.

00:02:34.276 --> 00:02:36.276 A:middle
And because it's at the root, it

00:02:36.276 --> 00:02:37.566 A:middle
offers the size of the whole

00:02:37.566 --> 00:02:38.266 A:middle
safe area.

00:02:40.446 --> 00:02:42.496 A:middle
Next, the text replies, well

00:02:42.496 --> 00:02:43.706 A:middle
that's mighty generous of you

00:02:43.706 --> 00:02:46.286 A:middle
but I'm really, I'm only this

00:02:46.286 --> 00:02:46.466 A:middle
big.

00:02:47.126 --> 00:02:50.046 A:middle
And in SwiftUI there's no way to

00:02:50.046 --> 00:02:52.356 A:middle
force a size on your child, the

00:02:52.356 --> 00:02:54.726 A:middle
parent has to respect that

00:02:55.816 --> 00:02:55.946 A:middle
choice.

00:02:56.206 --> 00:02:57.786 A:middle
And now the root view says

00:02:58.306 --> 00:02:59.646 A:middle
alrighty, I need to put you

00:02:59.646 --> 00:03:01.546 A:middle
somewhere so I'm putting you in

00:02:59.646 --> 00:03:01.546 A:middle
somewhere so I'm putting you in

00:03:01.546 --> 00:03:01.866 A:middle
the middle.

00:03:02.686 --> 00:03:04.346 A:middle
So that's it.

00:03:04.346 --> 00:03:07.566 A:middle
This was a simple example but

00:03:07.716 --> 00:03:09.416 A:middle
every layout interaction plays

00:03:09.416 --> 00:03:11.136 A:middle
out in the same way between

00:03:11.536 --> 00:03:12.636 A:middle
parents and children.

00:03:13.366 --> 00:03:14.976 A:middle
And the behavior of your whole

00:03:14.976 --> 00:03:17.446 A:middle
layout emerges from these parent

00:03:17.446 --> 00:03:18.526 A:middle
child interactions.

00:03:20.576 --> 00:03:22.466 A:middle
But I want to highlight the

00:03:22.466 --> 00:03:24.766 A:middle
second step because it's

00:03:24.806 --> 00:03:26.036 A:middle
different from what you might be

00:03:26.036 --> 00:03:28.116 A:middle
used to, and it has an important

00:03:28.116 --> 00:03:29.446 A:middle
consequence for you.

00:03:30.626 --> 00:03:32.636 A:middle
It means that your views have

00:03:32.636 --> 00:03:33.586 A:middle
sizing behavior.

00:03:35.356 --> 00:03:37.416 A:middle
Since every view controls its

00:03:37.416 --> 00:03:39.536 A:middle
own size, it means when you

00:03:39.536 --> 00:03:41.746 A:middle
build a view, you get to decide

00:03:41.786 --> 00:03:43.566 A:middle
how and when it resizes.

00:03:44.396 --> 00:03:46.636 A:middle
For example, this view is a

00:03:46.636 --> 00:03:49.716 A:middle
non-negotiable 50 by 10 points

00:03:50.086 --> 00:03:51.666 A:middle
by virtue of the fixed size

00:03:51.666 --> 00:03:53.046 A:middle
frame at its root.

00:03:54.496 --> 00:03:58.446 A:middle
And this one is flexible but the

00:03:58.446 --> 00:03:59.386 A:middle
height and width are always the

00:03:59.386 --> 00:03:59.806 A:middle
same.

00:04:00.586 --> 00:04:02.056 A:middle
So it's always got a one to one

00:04:02.056 --> 00:04:02.906 A:middle
aspect ratio.

00:04:03.526 --> 00:04:05.836 A:middle
So sizing is encapsulated in the

00:04:05.836 --> 00:04:06.616 A:middle
view definition.

00:04:08.436 --> 00:04:09.926 A:middle
We also saw this in action with

00:04:09.966 --> 00:04:10.396 A:middle
text.

00:04:11.486 --> 00:04:13.716 A:middle
So in SwiftUI, the bounds of

00:04:13.786 --> 00:04:15.936 A:middle
text never stretch beyond the

00:04:16.166 --> 00:04:17.196 A:middle
height and width of its

00:04:17.196 --> 00:04:19.375 A:middle
displayed lines, and we'll see

00:04:19.375 --> 00:04:20.586 A:middle
why that's important when we

00:04:20.586 --> 00:04:23.416 A:middle
talk about stacks in a minute.

00:04:23.566 --> 00:04:27.086 A:middle
Now, there's one final step in

00:04:27.086 --> 00:04:29.106 A:middle
layout that's crucial for

00:04:29.106 --> 00:04:32.516 A:middle
getting UIs to look good and you

00:04:32.516 --> 00:04:34.256 A:middle
don't really have to think about

00:04:34.256 --> 00:04:36.026 A:middle
it in SwiftUI because we take

00:04:36.026 --> 00:04:38.026 A:middle
care of it, but it's worth

00:04:38.026 --> 00:04:40.536 A:middle
knowing that SwiftUI rounds the

00:04:40.536 --> 00:04:42.026 A:middle
corners of your view to the

00:04:42.026 --> 00:04:42.746 A:middle
nearest pixel.

00:04:43.486 --> 00:04:45.586 A:middle
So instead of anti-aliasing like

00:04:45.656 --> 00:04:48.626 A:middle
this, you always get crisp,

00:04:49.166 --> 00:04:49.936 A:middle
clear edges.

00:04:50.796 --> 00:04:52.956 A:middle
So this is just one of many

00:04:52.956 --> 00:04:55.036 A:middle
details every great app needs to

00:04:55.036 --> 00:04:55.536 A:middle
get right.

00:04:56.206 --> 00:04:57.846 A:middle
But SwiftUI takes care of--

00:04:58.946 --> 00:04:59.496 A:middle
[applause] just takes out of

00:04:59.546 --> 00:04:59.836 A:middle
your way.

00:04:59.876 --> 00:04:59.976 A:middle
Yeah.

00:05:00.516 --> 00:05:03.056 A:middle
[ Applause ]

00:05:03.556 --> 00:05:05.096 A:middle
So you can focus on the things

00:05:05.096 --> 00:05:07.936 A:middle
that make your app special.

00:05:08.066 --> 00:05:10.186 A:middle
Okay, now that we have the

00:05:10.226 --> 00:05:12.456 A:middle
basics in hand, let's see if we

00:05:12.456 --> 00:05:14.576 A:middle
can't make things a little more

00:05:14.576 --> 00:05:15.236 A:middle
appetizing.

00:05:17.156 --> 00:05:18.826 A:middle
I'll change the text in our

00:05:18.826 --> 00:05:21.316 A:middle
example to something random

00:05:21.316 --> 00:05:24.816 A:middle
like, I don't know, avocado

00:05:24.816 --> 00:05:25.196 A:middle
toast.

00:05:26.756 --> 00:05:27.416 A:middle
Are you hungry yet?

00:05:28.956 --> 00:05:31.246 A:middle
No? Okay. Let me try to make it

00:05:31.246 --> 00:05:32.596 A:middle
a little bit more appealing.

00:05:33.016 --> 00:05:34.866 A:middle
I'll add a nice green background

00:05:34.896 --> 00:05:35.076 A:middle
here.

00:05:35.946 --> 00:05:38.526 A:middle
Now, this background modifier

00:05:39.056 --> 00:05:41.276 A:middle
wraps the text view in a

00:05:41.276 --> 00:05:43.296 A:middle
background view with the color

00:05:43.296 --> 00:05:44.816 A:middle
view as a secondary child.

00:05:47.156 --> 00:05:49.306 A:middle
So now the green background

00:05:49.356 --> 00:05:51.086 A:middle
exactly matches the bounds of

00:05:51.116 --> 00:05:51.706 A:middle
the text.

00:05:52.886 --> 00:05:55.266 A:middle
So pro tip number two, throwing

00:05:55.596 --> 00:05:57.856 A:middle
a background or border color on

00:05:57.856 --> 00:06:00.286 A:middle
a view is a really useful trick

00:05:57.856 --> 00:06:00.286 A:middle
a view is a really useful trick

00:06:00.286 --> 00:06:01.416 A:middle
if you want to observe the

00:06:01.416 --> 00:06:03.576 A:middle
view's bounds and you don't have

00:06:03.576 --> 00:06:04.896 A:middle
a preview canvas handy.

00:06:06.306 --> 00:06:09.036 A:middle
Okay, now I want a little bit

00:06:09.036 --> 00:06:10.676 A:middle
more space around the text in

00:06:10.766 --> 00:06:13.356 A:middle
the edge of the green box so I'm

00:06:13.356 --> 00:06:14.996 A:middle
going to insert some padding

00:06:15.726 --> 00:06:15.816 A:middle
there.

00:06:17.436 --> 00:06:20.106 A:middle
Now, SwiftUI chooses an amount

00:06:20.106 --> 00:06:21.866 A:middle
of padding that's appropriate to

00:06:21.866 --> 00:06:24.416 A:middle
our platform, dynamic type size,

00:06:24.606 --> 00:06:25.316 A:middle
and environment.

00:06:26.456 --> 00:06:27.786 A:middle
And when you don't pass any

00:06:27.826 --> 00:06:29.576 A:middle
parameters, you get adaptive

00:06:29.706 --> 00:06:31.926 A:middle
padding in exactly the same way

00:06:31.926 --> 00:06:34.916 A:middle
that SwiftUI adaptively styles a

00:06:35.036 --> 00:06:37.146 A:middle
picker or a button depending on

00:06:37.146 --> 00:06:37.946 A:middle
the context it's in.

00:06:39.226 --> 00:06:41.116 A:middle
And if we want to adaptively pad

00:06:41.116 --> 00:06:42.276 A:middle
just the leading and trailing

00:06:42.276 --> 00:06:46.376 A:middle
edges, well we can do that too.

00:06:46.616 --> 00:06:48.656 A:middle
Adaptive modifiers are the best

00:06:48.936 --> 00:06:50.326 A:middle
way to adjust your layout

00:06:50.746 --> 00:06:52.236 A:middle
because you avoid complicating

00:06:52.236 --> 00:06:54.276 A:middle
the code, wasting time on

00:06:54.276 --> 00:06:55.976 A:middle
details early in your process,

00:06:56.386 --> 00:06:57.776 A:middle
and hard coding constants that

00:06:57.776 --> 00:06:58.696 A:middle
might be inappropriate

00:06:58.696 --> 00:06:59.126 A:middle
elsewhere.

00:06:59.666 --> 00:07:02.066 A:middle
But since we're here to get

00:06:59.666 --> 00:07:02.066 A:middle
But since we're here to get

00:07:02.066 --> 00:07:05.106 A:middle
control over details, let's say

00:07:05.106 --> 00:07:06.466 A:middle
we have a specification that

00:07:06.466 --> 00:07:08.926 A:middle
calls for exactly 10 points of

00:07:08.996 --> 00:07:10.236 A:middle
padding on all sides.

00:07:11.746 --> 00:07:12.556 A:middle
Okay you can write that

00:07:12.556 --> 00:07:13.156 A:middle
explicitly.

00:07:14.626 --> 00:07:16.866 A:middle
Now this example's a little more

00:07:16.866 --> 00:07:18.636 A:middle
interesting than hello world.

00:07:19.376 --> 00:07:20.846 A:middle
So let's see how the layout

00:07:20.876 --> 00:07:22.686 A:middle
process works in this case.

00:07:23.536 --> 00:07:26.736 A:middle
First, the root view proposes

00:07:27.016 --> 00:07:28.206 A:middle
its entire size to the

00:07:28.206 --> 00:07:28.876 A:middle
background view.

00:07:29.716 --> 00:07:31.856 A:middle
And much like our toast view

00:07:31.856 --> 00:07:34.276 A:middle
itself, the background view is

00:07:34.276 --> 00:07:36.236 A:middle
layout neutral so it's just

00:07:36.236 --> 00:07:38.056 A:middle
going to pass that size proposal

00:07:38.296 --> 00:07:41.136 A:middle
along to the padding view.

00:07:42.696 --> 00:07:45.176 A:middle
Now, the padding view knows it's

00:07:45.176 --> 00:07:47.306 A:middle
going to add 10 points on a side

00:07:47.306 --> 00:07:50.806 A:middle
to its child so it offers that

00:07:50.806 --> 00:07:52.576 A:middle
much less to its child-- the

00:07:52.576 --> 00:07:56.656 A:middle
text-- and the text takes the

00:07:56.656 --> 00:07:58.476 A:middle
width it needs and returns that

00:07:58.476 --> 00:08:01.136 A:middle
to the padding view which knows

00:07:58.476 --> 00:08:01.136 A:middle
to the padding view which knows

00:08:01.136 --> 00:08:02.856 A:middle
it should be bigger than its

00:08:02.856 --> 00:08:04.626 A:middle
child by 10 points on each side

00:08:04.916 --> 00:08:06.296 A:middle
and it situates the text

00:08:06.296 --> 00:08:08.186 A:middle
appropriately in its coordinate

00:08:08.186 --> 00:08:08.586 A:middle
space.

00:08:11.156 --> 00:08:13.086 A:middle
Now, we said the background view

00:08:13.086 --> 00:08:14.616 A:middle
was layout neutral so it's just

00:08:14.616 --> 00:08:15.676 A:middle
going to report that size

00:08:15.676 --> 00:08:16.156 A:middle
upwards.

00:08:16.556 --> 00:08:19.686 A:middle
But before it does, it offers

00:08:19.686 --> 00:08:21.426 A:middle
that size to its secondary

00:08:21.426 --> 00:08:24.436 A:middle
child, the color.

00:08:24.606 --> 00:08:27.366 A:middle
Now, colors are very compliant

00:08:27.516 --> 00:08:28.516 A:middle
when it comes to layout.

00:08:29.166 --> 00:08:31.006 A:middle
The accept the size offered to

00:08:31.536 --> 00:08:31.886 A:middle
them.

00:08:31.886 --> 00:08:33.836 A:middle
So the color of the size is just

00:08:33.836 --> 00:08:35.236 A:middle
the same as that of the padding

00:08:35.236 --> 00:08:35.426 A:middle
view.

00:08:36.635 --> 00:08:38.726 A:middle
Finally, the background reports

00:08:38.726 --> 00:08:41.046 A:middle
its size to the root view and

00:08:41.796 --> 00:08:44.116 A:middle
the root view centers it as

00:08:44.116 --> 00:08:44.526 A:middle
before.

00:08:44.526 --> 00:08:46.296 A:middle
And that's the whole process.

00:08:47.746 --> 00:08:48.776 A:middle
Ready for another example?

00:08:49.296 --> 00:08:51.736 A:middle
This one's even simpler but it's

00:08:51.736 --> 00:08:52.116 A:middle
important.

00:08:53.746 --> 00:08:56.456 A:middle
So in this case the view's body

00:08:56.536 --> 00:08:59.496 A:middle
is just a fixed size 20 by 20

00:08:59.496 --> 00:08:59.886 A:middle
image.

00:09:01.286 --> 00:09:03.936 A:middle
In SwiftUI, unless you mark an

00:09:03.936 --> 00:09:06.086 A:middle
image as resizable, either in

00:09:06.086 --> 00:09:08.256 A:middle
the asset catalog or in code,

00:09:08.776 --> 00:09:09.706 A:middle
it's fixed sized.

00:09:10.936 --> 00:09:13.236 A:middle
Now, I'd like our view, our

00:09:13.236 --> 00:09:14.566 A:middle
whole view to be about half

00:09:14.566 --> 00:09:17.126 A:middle
again as big so let's add a 30

00:09:17.126 --> 00:09:20.166 A:middle
by 30 frame modifier like this.

00:09:21.496 --> 00:09:24.986 A:middle
Now, you might have noticed that

00:09:25.076 --> 00:09:27.946 A:middle
the image, though undeniably

00:09:27.946 --> 00:09:29.836 A:middle
appetizing, has not changed its

00:09:29.836 --> 00:09:30.226 A:middle
size.

00:09:30.836 --> 00:09:33.866 A:middle
But that shouldn't be surprising

00:09:33.866 --> 00:09:34.536 A:middle
should it?

00:09:34.536 --> 00:09:37.116 A:middle
We said it was fixed sized.

00:09:37.286 --> 00:09:39.946 A:middle
Around it you'll find a 30 by 30

00:09:39.946 --> 00:09:42.616 A:middle
frame and that's the size of the

00:09:42.616 --> 00:09:43.686 A:middle
body of our view.

00:09:44.016 --> 00:09:45.666 A:middle
So the view we've defined is in

00:09:45.666 --> 00:09:48.016 A:middle
fact 50 percent bigger than it

00:09:48.016 --> 00:09:49.016 A:middle
was before we added the

00:09:49.016 --> 00:09:49.576 A:middle
modifier.

00:09:51.416 --> 00:09:54.326 A:middle
So, is it a contradiction that

00:09:54.326 --> 00:09:55.826 A:middle
the size of the frame doesn't

00:09:55.826 --> 00:09:59.016 A:middle
match the size of our image?

00:09:59.146 --> 00:09:59.976 A:middle
Actually, no.

00:10:00.956 --> 00:10:02.676 A:middle
This is the layout system doing

00:10:02.676 --> 00:10:03.586 A:middle
what it's supposed to do.

00:10:04.796 --> 00:10:06.526 A:middle
See it's important to recognize

00:10:06.876 --> 00:10:08.926 A:middle
that the frame is not a

00:10:08.926 --> 00:10:11.746 A:middle
constraint in SwiftUI, it's just

00:10:11.746 --> 00:10:13.486 A:middle
a view which you can think of

00:10:13.796 --> 00:10:14.906 A:middle
like a picture frame.

00:10:16.436 --> 00:10:18.816 A:middle
It proposes fixed dimensions for

00:10:18.816 --> 00:10:21.436 A:middle
its child, but like every other

00:10:21.436 --> 00:10:23.326 A:middle
view, the child ultimately

00:10:23.356 --> 00:10:24.776 A:middle
chooses its own size.

00:10:26.116 --> 00:10:29.606 A:middle
So in that sense, SwiftUI layout

00:10:29.706 --> 00:10:31.526 A:middle
uses a lighter touch than you

00:10:31.526 --> 00:10:32.216 A:middle
might be used to.

00:10:33.596 --> 00:10:35.616 A:middle
The payoff, though, is that

00:10:35.616 --> 00:10:37.716 A:middle
there are no underconstrained or

00:10:37.716 --> 00:10:39.046 A:middle
overconstrained systems in

00:10:39.046 --> 00:10:41.606 A:middle
SwiftUI which means everything

00:10:41.606 --> 00:10:42.596 A:middle
you can express has a

00:10:42.596 --> 00:10:43.696 A:middle
well-defined effect.

00:10:45.066 --> 00:10:46.976 A:middle
So there's no such thing as an

00:10:46.976 --> 00:10:49.116 A:middle
incorrect layout unless you

00:10:49.116 --> 00:10:49.956 A:middle
don't like the result you're

00:10:49.956 --> 00:10:50.256 A:middle
getting.

00:10:52.486 --> 00:10:54.066 A:middle
Okay, now that we have the

00:10:54.066 --> 00:10:56.346 A:middle
basics under our belts, let's

00:10:56.346 --> 00:10:58.126 A:middle
discuss the power tools-- the

00:10:58.126 --> 00:10:58.856 A:middle
stacks.

00:11:00.496 --> 00:11:04.306 A:middle
Now, HStack and VStack arrange

00:11:04.346 --> 00:11:06.566 A:middle
their children in a row or

00:11:06.566 --> 00:11:07.616 A:middle
column respectively.

00:11:08.626 --> 00:11:10.306 A:middle
I threw this list cell together

00:11:10.626 --> 00:11:12.446 A:middle
with four stacks and just a few

00:11:12.446 --> 00:11:13.056 A:middle
lines of code.

00:11:13.676 --> 00:11:15.586 A:middle
And here's the code for that

00:11:15.586 --> 00:11:15.946 A:middle
layout.

00:11:17.096 --> 00:11:18.566 A:middle
At the top level you got an

00:11:18.566 --> 00:11:22.376 A:middle
HStack with two children, the

00:11:22.376 --> 00:11:24.886 A:middle
first of which is a VStack

00:11:24.886 --> 00:11:26.066 A:middle
containing the star rating.

00:11:26.696 --> 00:11:30.676 A:middle
And the other child is also a

00:11:30.676 --> 00:11:34.066 A:middle
VStack that leading aligns its

00:11:34.066 --> 00:11:37.316 A:middle
two children, the first of which

00:11:37.876 --> 00:11:40.676 A:middle
is yet another HStack containing

00:11:40.826 --> 00:11:43.756 A:middle
the title, a stretchy spacer,

00:11:44.956 --> 00:11:46.816 A:middle
and our avocado image.

00:11:47.876 --> 00:11:49.496 A:middle
So there you go.

00:11:50.286 --> 00:11:51.196 A:middle
Four stacks.

00:11:51.896 --> 00:11:53.786 A:middle
Let's put it back together.

00:11:54.766 --> 00:11:54.956 A:middle
Now--

00:11:55.516 --> 00:12:01.056 A:middle
[ Applause ]

00:11:55.516 --> 00:12:01.056 A:middle
[ Applause ]

00:12:01.556 --> 00:12:02.926 A:middle
So I want you to notice that

00:12:02.926 --> 00:12:05.066 A:middle
SwiftUI didn't slam all of the

00:12:05.066 --> 00:12:06.526 A:middle
stacks children against each

00:12:06.526 --> 00:12:06.776 A:middle
other.

00:12:07.346 --> 00:12:09.006 A:middle
It left some space between these

00:12:09.006 --> 00:12:11.806 A:middle
two because adaptive spacing is

00:12:11.806 --> 00:12:12.296 A:middle
in effect.

00:12:13.826 --> 00:12:15.336 A:middle
You'll also find that the

00:12:15.336 --> 00:12:18.176 A:middle
baseline to baseline spacing for

00:12:18.176 --> 00:12:20.486 A:middle
adjacent text exactly matches

00:12:20.556 --> 00:12:22.146 A:middle
Apple's human interface

00:12:22.146 --> 00:12:25.446 A:middle
guidelines, as does the baseline

00:12:25.446 --> 00:12:26.356 A:middle
to edge spacing.

00:12:26.956 --> 00:12:28.316 A:middle
Because we've encoded these

00:12:28.396 --> 00:12:30.336 A:middle
rules into SwiftUI's layout

00:12:30.336 --> 00:12:33.526 A:middle
system, the general principle

00:12:33.526 --> 00:12:35.866 A:middle
here is that the simplest,

00:12:36.376 --> 00:12:38.756 A:middle
easiest code is also well on its

00:12:38.756 --> 00:12:40.476 A:middle
way to producing a beautiful

00:12:40.476 --> 00:12:40.806 A:middle
result.

00:12:42.506 --> 00:12:45.316 A:middle
But, if you need control, as

00:12:45.316 --> 00:12:48.906 A:middle
always, SwiftUI has your back

00:12:49.166 --> 00:12:50.806 A:middle
with knobs you can turn to get

00:12:50.806 --> 00:12:51.976 A:middle
exactly the result you want.

00:12:54.696 --> 00:12:56.826 A:middle
Oh, I almost forgot another

00:12:56.946 --> 00:12:58.846 A:middle
thing that SwiftUI handles for

00:12:58.846 --> 00:12:59.056 A:middle
you.

00:12:59.776 --> 00:13:02.716 A:middle
If your app is localized for a

00:12:59.776 --> 00:13:02.716 A:middle
If your app is localized for a

00:13:02.716 --> 00:13:04.166 A:middle
right to left writing system

00:13:04.166 --> 00:13:06.076 A:middle
like Arabic and you change the

00:13:06.076 --> 00:13:08.926 A:middle
system language, well SwiftUI

00:13:08.926 --> 00:13:10.046 A:middle
flips your horizontal

00:13:10.046 --> 00:13:12.106 A:middle
coordinates for you so you don't

00:13:12.106 --> 00:13:12.976 A:middle
have to recode the layout.

00:13:13.516 --> 00:13:19.016 A:middle
[ Applause ]

00:13:19.516 --> 00:13:21.676 A:middle
So if you've been wondering why

00:13:21.676 --> 00:13:23.006 A:middle
we talk about leading and

00:13:23.006 --> 00:13:24.836 A:middle
trailing alignments instead of

00:13:24.926 --> 00:13:26.676 A:middle
left and right, now you know.

00:13:27.336 --> 00:13:28.626 A:middle
It's so that your layouts are

00:13:28.696 --> 00:13:29.846 A:middle
automatically ready for

00:13:29.846 --> 00:13:30.976 A:middle
internationalization.

00:13:32.746 --> 00:13:35.246 A:middle
Okay, so let's get an inside

00:13:35.246 --> 00:13:36.356 A:middle
look at stack layouts.

00:13:37.616 --> 00:13:40.156 A:middle
Now, most views we've looked at

00:13:40.156 --> 00:13:42.406 A:middle
so far have effectively been a

00:13:42.406 --> 00:13:44.096 A:middle
linear chain of children.

00:13:44.686 --> 00:13:46.276 A:middle
But stacks are interesting

00:13:46.696 --> 00:13:48.336 A:middle
because the children have to

00:13:48.576 --> 00:13:50.446 A:middle
compete for space on an equal

00:13:50.446 --> 00:13:50.786 A:middle
footing.

00:13:52.186 --> 00:13:55.876 A:middle
In this stack we've said the

00:13:55.876 --> 00:13:58.076 A:middle
text shouldn't wrap to more than

00:13:58.076 --> 00:14:02.236 A:middle
one line, which means that if

00:13:58.076 --> 00:14:02.236 A:middle
one line, which means that if

00:14:02.236 --> 00:14:04.546 A:middle
the stack is asked to fit in

00:14:04.546 --> 00:14:08.436 A:middle
less space, well the text will

00:14:08.436 --> 00:14:09.896 A:middle
just be truncated to fit.

00:14:11.186 --> 00:14:12.926 A:middle
But let's start with the case

00:14:13.006 --> 00:14:14.736 A:middle
where there's plenty of space

00:14:14.736 --> 00:14:16.776 A:middle
offered by the parent, okay?

00:14:18.166 --> 00:14:20.296 A:middle
So first the stack figures out

00:14:20.346 --> 00:14:21.566 A:middle
the internal spacing

00:14:21.566 --> 00:14:24.856 A:middle
requirements and subtracts that

00:14:24.856 --> 00:14:27.706 A:middle
from the proposed width to give

00:14:27.706 --> 00:14:29.536 A:middle
us an amount of unallocated

00:14:29.606 --> 00:14:30.086 A:middle
space.

00:14:30.426 --> 00:14:32.656 A:middle
And now we have three children

00:14:32.926 --> 00:14:34.296 A:middle
whose size we don't know.

00:14:36.206 --> 00:14:38.536 A:middle
So we divide the remaining space

00:14:38.856 --> 00:14:42.576 A:middle
in three equal parts and then we

00:14:42.576 --> 00:14:44.546 A:middle
propose one of those as the size

00:14:44.546 --> 00:14:45.876 A:middle
for the least flexible child.

00:14:47.206 --> 00:14:49.496 A:middle
Now, we said the image was fixed

00:14:49.496 --> 00:14:50.216 A:middle
sized right?

00:14:50.586 --> 00:14:52.896 A:middle
So that's the least flexible.

00:14:54.586 --> 00:14:57.906 A:middle
So this-- the image takes this

00:14:57.906 --> 00:15:00.596 A:middle
much, and whatever size it

00:14:57.906 --> 00:15:00.596 A:middle
much, and whatever size it

00:15:00.746 --> 00:15:03.986 A:middle
claimed, we deduct that from the

00:15:03.986 --> 00:15:05.216 A:middle
unallocated space.

00:15:05.736 --> 00:15:07.876 A:middle
And repeat.

00:15:08.716 --> 00:15:10.626 A:middle
Okay? We now have two unsized

00:15:10.626 --> 00:15:13.186 A:middle
children so we divide the

00:15:13.186 --> 00:15:14.906 A:middle
remaining proposed size in two

00:15:15.146 --> 00:15:17.526 A:middle
and offer one half to the least

00:15:17.526 --> 00:15:18.806 A:middle
flexible child that doesn't have

00:15:18.806 --> 00:15:20.876 A:middle
a size which is delicious.

00:15:22.486 --> 00:15:24.336 A:middle
So delicious claims this much,

00:15:24.686 --> 00:15:26.546 A:middle
which you can see is less than

00:15:26.546 --> 00:15:27.036 A:middle
the offer.

00:15:27.716 --> 00:15:28.766 A:middle
Remember that.

00:15:29.146 --> 00:15:32.926 A:middle
And again, that is deducted from

00:15:33.086 --> 00:15:36.116 A:middle
the unallocated space and that

00:15:36.116 --> 00:15:38.636 A:middle
leave this much room for avocado

00:15:38.636 --> 00:15:40.516 A:middle
toast which, as you can see, is

00:15:40.566 --> 00:15:40.826 A:middle
plenty.

00:15:42.586 --> 00:15:44.976 A:middle
Okay, last steps.

00:15:46.396 --> 00:15:48.006 A:middle
Now that all of the children

00:15:48.006 --> 00:15:51.706 A:middle
have sizes, the stack lines them

00:15:51.706 --> 00:15:53.276 A:middle
up with the spacing from

00:15:53.276 --> 00:15:53.686 A:middle
earlier.

00:15:54.936 --> 00:15:56.146 A:middle
And since the code didn't

00:15:56.146 --> 00:15:58.246 A:middle
specify an alignment, the

00:15:58.246 --> 00:15:59.676 A:middle
default of centering is in

00:15:59.676 --> 00:16:00.016 A:middle
effect.

00:15:59.676 --> 00:16:00.016 A:middle
effect.

00:16:00.846 --> 00:16:02.956 A:middle
So the stack uses center

00:16:02.956 --> 00:16:04.466 A:middle
alignment to arrange the centers

00:16:04.466 --> 00:16:05.266 A:middle
of all of the children

00:16:05.266 --> 00:16:05.706 A:middle
vertically.

00:16:07.416 --> 00:16:09.866 A:middle
Finally, the stack chooses its

00:16:09.866 --> 00:16:11.986 A:middle
own size so that it exactly

00:16:11.986 --> 00:16:14.976 A:middle
encloses the children.

00:16:15.086 --> 00:16:17.406 A:middle
Now, if you think about it, you

00:16:17.406 --> 00:16:19.316 A:middle
might be able to visualize why

00:16:19.316 --> 00:16:20.956 A:middle
the bounds of text don't stretch

00:16:20.956 --> 00:16:22.216 A:middle
beyond their displayed width.

00:16:23.586 --> 00:16:26.146 A:middle
See if delicious had accepted

00:16:26.266 --> 00:16:27.956 A:middle
all of its offer, that would

00:16:27.956 --> 00:16:29.786 A:middle
leave less for avocado toast

00:16:30.096 --> 00:16:31.126 A:middle
which would have forced it to

00:16:31.126 --> 00:16:33.416 A:middle
truncate despite the fact that

00:16:33.416 --> 00:16:35.486 A:middle
everything could have fit, there

00:16:35.876 --> 00:16:38.586 A:middle
was plenty of room.

00:16:38.796 --> 00:16:40.436 A:middle
Actually, of the two pieces of

00:16:40.476 --> 00:16:42.706 A:middle
text here, avocado toast is

00:16:42.786 --> 00:16:44.336 A:middle
clearly the more important,

00:16:44.476 --> 00:16:44.736 A:middle
right?

00:16:45.216 --> 00:16:45.976 A:middle
It's the subject.

00:16:46.936 --> 00:16:48.736 A:middle
Delicious is just an adjective.

00:16:48.736 --> 00:16:49.696 A:middle
It'd kind of expendable.

00:16:50.546 --> 00:16:52.986 A:middle
So this wouldn't be a good

00:16:52.986 --> 00:16:53.366 A:middle
result.

00:16:54.496 --> 00:16:56.696 A:middle
But, now that I think about it,

00:16:57.196 --> 00:16:59.286 A:middle
that means the amount of space-

00:16:59.346 --> 00:17:01.226 A:middle
when the amount of space offered

00:16:59.346 --> 00:17:01.226 A:middle
when the amount of space offered

00:17:01.226 --> 00:17:03.706 A:middle
is less than the ideal, the

00:17:03.706 --> 00:17:05.226 A:middle
truncation behavior we saw

00:17:05.226 --> 00:17:07.006 A:middle
earlier probably isn't quite

00:17:07.006 --> 00:17:07.935 A:middle
what we want either.

00:17:09.546 --> 00:17:11.356 A:middle
With a narrow offer like this,

00:17:11.356 --> 00:17:12.435 A:middle
we'd rather keep all of the

00:17:12.435 --> 00:17:15.665 A:middle
subject intact and let the

00:17:15.665 --> 00:17:16.766 A:middle
adjective truncate.

00:17:17.336 --> 00:17:19.976 A:middle
Okay, to achieve that we have

00:17:19.976 --> 00:17:20.915 A:middle
another power tool.

00:17:21.496 --> 00:17:24.185 A:middle
We can raise the layout priority

00:17:24.185 --> 00:17:26.016 A:middle
of avocado toast from the

00:17:26.016 --> 00:17:27.976 A:middle
default of zero, to one.

00:17:28.516 --> 00:17:34.366 A:middle
[ Applause ]

00:17:34.866 --> 00:17:36.626 A:middle
So when children in a stack have

00:17:36.706 --> 00:17:38.706 A:middle
different layout priorities, the

00:17:38.706 --> 00:17:40.316 A:middle
stack takes the unallocated

00:17:40.316 --> 00:17:43.886 A:middle
space, it sets aside the minimum

00:17:43.886 --> 00:17:45.486 A:middle
widths of all of the lower

00:17:45.516 --> 00:17:47.486 A:middle
priority children, and then it

00:17:47.486 --> 00:17:49.856 A:middle
divides the rest among children

00:17:49.856 --> 00:17:51.276 A:middle
with the highest priority value.

00:17:52.986 --> 00:17:54.216 A:middle
So in this case there's just one

00:17:54.216 --> 00:17:55.686 A:middle
of those, it's avocado toast.

00:17:56.286 --> 00:17:59.786 A:middle
And so that'll be offered all of

00:17:59.836 --> 00:18:01.966 A:middle
the available space minus the

00:17:59.836 --> 00:18:01.966 A:middle
the available space minus the

00:18:01.966 --> 00:18:05.216 A:middle
widths of the image and the

00:18:05.336 --> 00:18:06.886 A:middle
three dots that remain after

00:18:06.886 --> 00:18:08.706 A:middle
shrinking delicious to its

00:18:08.706 --> 00:18:08.976 A:middle
minimum.

00:18:11.086 --> 00:18:13.886 A:middle
Okay, after sizing all of the

00:18:13.886 --> 00:18:15.186 A:middle
children with the highest layout

00:18:15.186 --> 00:18:17.196 A:middle
priority, the stack moves on to

00:18:17.196 --> 00:18:19.716 A:middle
divide the remaining space among

00:18:19.716 --> 00:18:21.266 A:middle
children with the next highest

00:18:21.266 --> 00:18:23.756 A:middle
layout priority, and so on.

00:18:24.686 --> 00:18:27.256 A:middle
Okay, there's one last power

00:18:27.256 --> 00:18:29.006 A:middle
tool I want to show you.

00:18:30.046 --> 00:18:30.606 A:middle
Alignments.

00:18:31.836 --> 00:18:34.036 A:middle
Now, I know you won't be

00:18:34.036 --> 00:18:36.026 A:middle
surprised that we can bottom

00:18:36.026 --> 00:18:39.846 A:middle
align this stack.

00:18:40.056 --> 00:18:41.186 A:middle
Looks pretty good that way

00:18:41.186 --> 00:18:41.446 A:middle
right?

00:18:43.016 --> 00:18:45.956 A:middle
But, consider what happens when

00:18:45.956 --> 00:18:48.746 A:middle
we change the font of delicious

00:18:48.746 --> 00:18:49.716 A:middle
to something smaller.

00:18:50.266 --> 00:18:54.446 A:middle
Well, it looks okay to me, but

00:18:54.446 --> 00:18:54.976 A:middle
what do I know?

00:18:55.796 --> 00:18:56.906 A:middle
I'm just an app developer.

00:18:57.766 --> 00:18:59.726 A:middle
I'm pretty sure Crusty, my UI

00:18:59.726 --> 00:19:01.046 A:middle
designer is going to have a

00:18:59.726 --> 00:19:01.046 A:middle
designer is going to have a

00:19:01.046 --> 00:19:01.976 A:middle
problem with it though.

00:19:02.516 --> 00:19:06.546 A:middle
[ Applause ]

00:19:07.046 --> 00:19:08.456 A:middle
Yeah he's going to zoom all the

00:19:08.456 --> 00:19:09.796 A:middle
way in and start picking at the

00:19:09.796 --> 00:19:10.956 A:middle
details like this.

00:19:12.276 --> 00:19:14.606 A:middle
Bucky, he'll say, first you got

00:19:14.606 --> 00:19:16.136 A:middle
the baseline of delicious which

00:19:16.136 --> 00:19:18.096 A:middle
is here and then you got the

00:19:18.096 --> 00:19:20.346 A:middle
bottom of the image down here.

00:19:20.566 --> 00:19:22.726 A:middle
And then there's the baseline of

00:19:22.726 --> 00:19:25.546 A:middle
avocado toast way up here, and

00:19:25.546 --> 00:19:27.076 A:middle
none of them line up.

00:19:27.416 --> 00:19:28.216 A:middle
What have I taught you?

00:19:29.516 --> 00:19:33.096 A:middle
[Laughter]

00:19:33.596 --> 00:19:35.336 A:middle
Fortunately we have an answer

00:19:35.336 --> 00:19:36.446 A:middle
for that in SwiftUI.

00:19:37.906 --> 00:19:39.716 A:middle
The first and last text-based

00:19:39.716 --> 00:19:41.616 A:middle
line positions are alignments

00:19:41.646 --> 00:19:45.406 A:middle
just like top and bottom.

00:19:45.536 --> 00:19:47.536 A:middle
So if we align the text on its

00:19:47.616 --> 00:19:51.006 A:middle
baseline, it solves the problem

00:19:51.566 --> 00:19:51.736 A:middle
neatly.

00:19:52.516 --> 00:19:56.736 A:middle
[ Applause ]

00:19:57.236 --> 00:19:58.766 A:middle
But what about the image?

00:19:59.516 --> 00:20:01.346 A:middle
See the image has no text in it

00:19:59.516 --> 00:20:01.346 A:middle
See the image has no text in it

00:20:01.826 --> 00:20:03.516 A:middle
but every alignment has a

00:20:03.516 --> 00:20:05.696 A:middle
default value and the default

00:20:05.746 --> 00:20:08.036 A:middle
value for last text baseline is

00:20:08.036 --> 00:20:09.916 A:middle
just the bottom edge of the

00:20:09.916 --> 00:20:11.986 A:middle
view, so that gets me exactly

00:20:11.986 --> 00:20:13.196 A:middle
what I'm thinking Crusty will

00:20:13.196 --> 00:20:13.746 A:middle
ask me for.

00:20:15.566 --> 00:20:19.716 A:middle
Oh. Oh. Looking again, I'm

00:20:19.716 --> 00:20:21.806 A:middle
pretty sure-- I got a bad

00:20:21.806 --> 00:20:22.856 A:middle
feeling about this-- I'm pretty

00:20:22.856 --> 00:20:23.896 A:middle
sure he's going to tell me

00:20:24.176 --> 00:20:26.136 A:middle
there's a visual baseline that's

00:20:26.136 --> 00:20:29.076 A:middle
up here, 87.4% of the way to the

00:20:29.076 --> 00:20:29.376 A:middle
bottom.

00:20:30.016 --> 00:20:31.366 A:middle
[Laughter]

00:20:31.366 --> 00:20:33.346 A:middle
We can handle that by telling

00:20:33.346 --> 00:20:36.796 A:middle
SwiftUI how to compute a last

00:20:36.796 --> 00:20:40.196 A:middle
text baseline for the image in

00:20:40.196 --> 00:20:41.766 A:middle
terms of its other alignments.

00:20:41.906 --> 00:20:42.936 A:middle
Pretty cool, right?

00:20:43.516 --> 00:20:48.306 A:middle
[ Applause ]

00:20:48.806 --> 00:20:49.906 A:middle
But we're not done with the

00:20:49.906 --> 00:20:51.456 A:middle
power of alignments yet.

00:20:52.106 --> 00:20:53.336 A:middle
Let's go back to our nested

00:20:53.336 --> 00:20:54.216 A:middle
stack example.

00:20:55.766 --> 00:20:57.806 A:middle
Suppose we wanted to align the

00:20:57.806 --> 00:21:00.136 A:middle
center of these stars and the

00:20:57.806 --> 00:21:00.136 A:middle
center of these stars and the

00:21:00.136 --> 00:21:01.566 A:middle
title, like this.

00:21:05.416 --> 00:21:07.506 A:middle
Now remember the text in

00:21:07.506 --> 00:21:09.786 A:middle
question is nested in two

00:21:09.926 --> 00:21:11.936 A:middle
different branches of the view

00:21:11.936 --> 00:21:12.496 A:middle
hierarchy.

00:21:14.516 --> 00:21:17.266 A:middle
So, well center aligning the

00:21:17.666 --> 00:21:19.046 A:middle
children of that top level

00:21:19.046 --> 00:21:20.166 A:middle
HStack isn't going to cut it

00:21:20.686 --> 00:21:23.396 A:middle
because that's the default,

00:21:23.806 --> 00:21:24.046 A:middle
right?

00:21:24.046 --> 00:21:25.716 A:middle
And so we're already there.

00:21:25.716 --> 00:21:26.736 A:middle
You can see those children are

00:21:26.736 --> 00:21:27.506 A:middle
already aligned.

00:21:28.236 --> 00:21:30.706 A:middle
Now what we need is an alignment

00:21:31.216 --> 00:21:33.626 A:middle
other than center that marks the

00:21:33.626 --> 00:21:36.396 A:middle
middle of these stars and of the

00:21:36.396 --> 00:21:36.776 A:middle
title.

00:21:38.336 --> 00:21:39.806 A:middle
We need to define our own

00:21:39.806 --> 00:21:42.506 A:middle
alignment which is actually this

00:21:42.506 --> 00:21:42.836 A:middle
easy.

00:21:43.526 --> 00:21:45.466 A:middle
It's just six lines that we put

00:21:45.466 --> 00:21:47.086 A:middle
in an extension on vertical

00:21:47.086 --> 00:21:47.706 A:middle
alignment.

00:21:49.606 --> 00:21:52.256 A:middle
So first we define an enum

00:21:52.896 --> 00:21:55.366 A:middle
conforming to alignment ID which

00:21:55.366 --> 00:21:58.076 A:middle
has one requirement, tell

00:21:58.076 --> 00:22:00.076 A:middle
SwiftUI how to compute the

00:21:58.076 --> 00:22:00.076 A:middle
SwiftUI how to compute the

00:22:00.076 --> 00:22:00.846 A:middle
default value.

00:22:03.746 --> 00:22:06.046 A:middle
Now, it doesn't really matter

00:22:06.046 --> 00:22:07.976 A:middle
what we choose here in this case

00:22:08.046 --> 00:22:09.936 A:middle
because defaults aren't going to

00:22:09.936 --> 00:22:10.976 A:middle
project out of those inner

00:22:10.976 --> 00:22:11.576 A:middle
stacks.

00:22:12.126 --> 00:22:14.436 A:middle
But I defined this default to be

00:22:14.496 --> 00:22:16.116 A:middle
bottom just so that you could

00:22:16.116 --> 00:22:18.836 A:middle
see that it's just like defining

00:22:18.926 --> 00:22:23.176 A:middle
an alignment guide modifier.

00:22:24.016 --> 00:22:26.356 A:middle
And last of all, we define a

00:22:26.356 --> 00:22:28.196 A:middle
static instance of vertical

00:22:28.196 --> 00:22:31.096 A:middle
alignment that takes the enum

00:22:31.096 --> 00:22:32.626 A:middle
type as its argument.

00:22:35.156 --> 00:22:37.426 A:middle
And now we can use it to align

00:22:37.576 --> 00:22:41.546 A:middle
the stack, explicitly setting it

00:22:41.676 --> 00:22:43.256 A:middle
to the center of the stars and

00:22:43.766 --> 00:22:45.496 A:middle
of the title.

00:22:48.776 --> 00:22:50.266 A:middle
Now the explicit alignment

00:22:50.266 --> 00:22:52.366 A:middle
values we've set, they project

00:22:52.366 --> 00:22:53.726 A:middle
all the way out through two

00:22:53.726 --> 00:22:56.196 A:middle
layers of nested stack allowing

00:22:56.386 --> 00:22:58.056 A:middle
the outer HStack to align those

00:22:58.056 --> 00:22:58.756 A:middle
inner parts.

00:23:00.016 --> 00:23:00.976 A:middle
So that's custom alignments.

00:23:01.516 --> 00:23:07.296 A:middle
[ Applause ]

00:23:07.796 --> 00:23:09.626 A:middle
A power tool that will help you

00:23:09.626 --> 00:23:11.066 A:middle
satisfy even the most

00:23:11.116 --> 00:23:12.466 A:middle
persnickety UI designer.

00:23:13.496 --> 00:23:15.506 A:middle
Now, I'd like to invite John

00:23:15.506 --> 00:23:17.226 A:middle
Harper to the stage to tell you

00:23:17.446 --> 00:23:18.826 A:middle
about graphical effects in

00:23:18.826 --> 00:23:19.286 A:middle
SwiftUI.

00:23:19.286 --> 00:23:19.536 A:middle
John.

00:23:20.516 --> 00:23:25.556 A:middle
[ Applause ]

00:23:26.056 --> 00:23:27.536 A:middle
&gt;&gt; Thanks Dave.

00:23:27.596 --> 00:23:28.856 A:middle
So yeah I'm going to talk about,

00:23:28.856 --> 00:23:30.566 A:middle
describe some of the graphics

00:23:30.566 --> 00:23:32.196 A:middle
features of SwiftUI and how you

00:23:32.196 --> 00:23:33.156 A:middle
can use them to create

00:23:33.156 --> 00:23:35.786 A:middle
interactive controls in your

00:23:35.786 --> 00:23:36.306 A:middle
applications.

00:23:36.866 --> 00:23:39.396 A:middle
So here's an example of the kind

00:23:39.396 --> 00:23:40.646 A:middle
of thing we'd like to create

00:23:40.646 --> 00:23:41.046 A:middle
potentially.

00:23:41.046 --> 00:23:42.616 A:middle
You know you've seen this before

00:23:42.616 --> 00:23:45.126 A:middle
but, you know, it's several

00:23:45.126 --> 00:23:46.346 A:middle
normal controls but then in the

00:23:46.346 --> 00:23:48.526 A:middle
center there's this big kind of

00:23:48.526 --> 00:23:50.386 A:middle
graphical ring with a gradient

00:23:50.386 --> 00:23:51.656 A:middle
around it and at the bottom

00:23:51.656 --> 00:23:52.366 A:middle
there's a bar chart.

00:23:52.486 --> 00:23:53.836 A:middle
And so you know if you wanted to

00:23:53.836 --> 00:23:56.156 A:middle
do this in your apps you'd have

00:23:56.186 --> 00:23:57.506 A:middle
to dive into the graphics system

00:23:57.506 --> 00:23:58.036 A:middle
to some degree.

00:23:58.036 --> 00:23:59.556 A:middle
You know core animation or core

00:23:59.556 --> 00:24:00.096 A:middle
graphics.

00:23:59.556 --> 00:24:00.096 A:middle
graphics.

00:24:00.556 --> 00:24:03.246 A:middle
And so we think we've got a good

00:24:03.246 --> 00:24:04.356 A:middle
way to do things like this in

00:24:04.866 --> 00:24:07.876 A:middle
SwiftUI and so we're going to

00:24:07.876 --> 00:24:09.176 A:middle
look at a little example.

00:24:09.366 --> 00:24:10.246 A:middle
But before we can do anything

00:24:10.246 --> 00:24:11.636 A:middle
complex we need to cover the

00:24:11.636 --> 00:24:12.186 A:middle
basics.

00:24:12.576 --> 00:24:14.016 A:middle
So if we wanted to draw a red

00:24:14.016 --> 00:24:15.476 A:middle
circle, how would we do that?

00:24:15.476 --> 00:24:16.776 A:middle
Well we'd first of all we'd

00:24:16.776 --> 00:24:17.786 A:middle
create a custom view type

00:24:18.066 --> 00:24:19.176 A:middle
because you know everything is a

00:24:19.176 --> 00:24:19.486 A:middle
view.

00:24:20.296 --> 00:24:21.646 A:middle
And then we'd put something like

00:24:21.646 --> 00:24:22.106 A:middle
this in there.

00:24:22.106 --> 00:24:23.906 A:middle
And here we're saying if you

00:24:23.906 --> 00:24:25.696 A:middle
give me a shape and the color we

00:24:25.696 --> 00:24:27.206 A:middle
can fill it with-- fill those

00:24:27.336 --> 00:24:28.886 A:middle
two things together and get, you

00:24:28.916 --> 00:24:29.796 A:middle
know, a red circle on the

00:24:29.796 --> 00:24:30.146 A:middle
screen.

00:24:30.706 --> 00:24:32.386 A:middle
But there's something really

00:24:32.386 --> 00:24:33.566 A:middle
interesting here which is that

00:24:33.606 --> 00:24:34.856 A:middle
we didn't give it a positional

00:24:34.856 --> 00:24:37.206 A:middle
size and that's because we're

00:24:37.206 --> 00:24:38.426 A:middle
relying on the layout system,

00:24:38.426 --> 00:24:39.626 A:middle
all that stuff Dave described,

00:24:39.946 --> 00:24:41.276 A:middle
to kind of position our views

00:24:41.276 --> 00:24:42.476 A:middle
for us even though we're in this

00:24:42.526 --> 00:24:43.816 A:middle
drawing model.

00:24:44.506 --> 00:24:47.896 A:middle
And so, you know, shapes will

00:24:47.896 --> 00:24:49.146 A:middle
just kind of react to the layout

00:24:49.146 --> 00:24:51.226 A:middle
system and produce views.

00:24:51.226 --> 00:24:52.436 A:middle
And in fact, you know now that

00:24:52.436 --> 00:24:54.096 A:middle
our draw views, if you think of

00:24:54.096 --> 00:24:55.006 A:middle
them that way are really just

00:24:55.036 --> 00:24:56.646 A:middle
views, then that really means

00:24:56.676 --> 00:24:57.716 A:middle
that everything in SwiftUI

00:24:57.716 --> 00:24:59.556 A:middle
applies to drawing because

00:24:59.556 --> 00:25:01.016 A:middle
everything in SwiftUI is views.

00:24:59.556 --> 00:25:01.016 A:middle
everything in SwiftUI is views.

00:25:01.366 --> 00:25:02.546 A:middle
And so all the modifiers you've

00:25:02.546 --> 00:25:04.296 A:middle
seen about layout and animation,

00:25:04.796 --> 00:25:06.406 A:middle
filter effects-- you know, just

00:25:06.406 --> 00:25:07.846 A:middle
everything-- it all applies to

00:25:07.846 --> 00:25:08.706 A:middle
drawing in the same way it

00:25:08.706 --> 00:25:09.606 A:middle
applies to views.

00:25:10.006 --> 00:25:11.196 A:middle
But similarly we've added a lot

00:25:11.196 --> 00:25:13.886 A:middle
of kind of new custom modifiers

00:25:14.156 --> 00:25:15.086 A:middle
purely for graphics.

00:25:15.296 --> 00:25:16.766 A:middle
Things like blurs and shadows.

00:25:17.536 --> 00:25:18.776 A:middle
But because drawing is just

00:25:18.776 --> 00:25:21.026 A:middle
views, they all apply to regular

00:25:21.026 --> 00:25:22.196 A:middle
views as well as the graphics

00:25:22.196 --> 00:25:22.526 A:middle
views.

00:25:23.286 --> 00:25:24.816 A:middle
And so we think this unification

00:25:24.816 --> 00:25:26.486 A:middle
of kind of normal control like

00:25:26.486 --> 00:25:27.856 A:middle
views and graphics is going to

00:25:27.856 --> 00:25:29.566 A:middle
be incredibly powerful as we go

00:25:29.566 --> 00:25:30.006 A:middle
forwards.

00:25:30.596 --> 00:25:32.526 A:middle
Okay but let's look at this a

00:25:32.526 --> 00:25:33.686 A:middle
little more.

00:25:34.296 --> 00:25:35.916 A:middle
So the basic pattern is that we

00:25:35.916 --> 00:25:38.426 A:middle
have a shape and a style-- kind

00:25:38.476 --> 00:25:40.126 A:middle
of a color or something-- and

00:25:40.126 --> 00:25:41.076 A:middle
the combination of those two

00:25:41.076 --> 00:25:42.216 A:middle
things produces a view.

00:25:42.976 --> 00:25:44.176 A:middle
As we have a few shapes here and

00:25:44.286 --> 00:25:47.536 A:middle
as we saw I can fill with red

00:25:47.536 --> 00:25:48.426 A:middle
and get a red circle.

00:25:49.426 --> 00:25:50.316 A:middle
But also we could use a

00:25:50.316 --> 00:25:51.936 A:middle
different operation and say a

00:25:51.936 --> 00:25:52.686 A:middle
different shape-- you know a

00:25:52.686 --> 00:25:54.606 A:middle
capsule-- and say stroke it with

00:25:54.606 --> 00:25:54.906 A:middle
red.

00:25:55.586 --> 00:25:56.776 A:middle
And in that case we won't get a

00:25:56.776 --> 00:25:58.186 A:middle
filled shape, we'll get a filled

00:25:58.186 --> 00:25:59.036 A:middle
outline of the shape.

00:25:59.576 --> 00:26:02.226 A:middle
And that's often what we want,

00:25:59.576 --> 00:26:02.226 A:middle
And that's often what we want,

00:26:02.336 --> 00:26:03.776 A:middle
but you know sometimes we find

00:26:03.776 --> 00:26:04.756 A:middle
we might want a slightly

00:26:04.756 --> 00:26:06.526 A:middle
different kind of stroke, so we

00:26:06.526 --> 00:26:08.086 A:middle
could also say stroke the border

00:26:08.086 --> 00:26:09.316 A:middle
of the shape rather than the

00:26:09.316 --> 00:26:10.236 A:middle
kind of on the shape.

00:26:10.306 --> 00:26:11.676 A:middle
And that's just a variant.

00:26:11.676 --> 00:26:14.266 A:middle
And this is also showing that,

00:26:14.266 --> 00:26:15.566 A:middle
you know, all of these stroke

00:26:15.566 --> 00:26:17.156 A:middle
operations all can either just

00:26:17.156 --> 00:26:18.076 A:middle
take a line width as in the

00:26:18.076 --> 00:26:20.836 A:middle
first example, or effectively

00:26:20.836 --> 00:26:21.706 A:middle
all of the standard stroking

00:26:21.706 --> 00:26:23.286 A:middle
parameters like dashes and end

00:26:23.286 --> 00:26:24.636 A:middle
caps and the line joints, that

00:26:25.016 --> 00:26:25.856 A:middle
you've probably seen in other

00:26:25.856 --> 00:26:26.766 A:middle
graphs APIs.

00:26:28.556 --> 00:26:29.736 A:middle
Okay so we've seen the shapes

00:26:29.736 --> 00:26:30.926 A:middle
and we've seen filling them.

00:26:31.626 --> 00:26:32.586 A:middle
But to this point we've only

00:26:32.586 --> 00:26:33.396 A:middle
been using colors.

00:26:34.156 --> 00:26:34.876 A:middle
But there are actually other

00:26:34.876 --> 00:26:36.556 A:middle
things we can use to fill shapes

00:26:36.556 --> 00:26:36.756 A:middle
with.

00:26:37.286 --> 00:26:37.976 A:middle
You know we can use tiled images

00:26:37.976 --> 00:26:40.066 A:middle
images and we can use various

00:26:40.066 --> 00:26:41.766 A:middle
kinds of gradients to kind of

00:26:42.136 --> 00:26:43.626 A:middle
fill the shape with.

00:26:44.636 --> 00:26:46.236 A:middle
So here's an example of using a

00:26:46.236 --> 00:26:48.686 A:middle
gradient and all of the gradient

00:26:48.686 --> 00:26:50.616 A:middle
styles all use this base kind of

00:26:50.886 --> 00:26:52.886 A:middle
type which is just providing the

00:26:52.886 --> 00:26:53.966 A:middle
one dimensional color ramp.

00:26:54.446 --> 00:26:56.076 A:middle
And in this case we've given it

00:26:56.076 --> 00:26:56.776 A:middle
seven colors.

00:26:56.776 --> 00:26:58.106 A:middle
It'll equally space them along

00:26:58.106 --> 00:26:59.726 A:middle
the continuum and that just

00:26:59.726 --> 00:27:00.616 A:middle
gives us our ramp.

00:26:59.726 --> 00:27:00.616 A:middle
gives us our ramp.

00:27:01.286 --> 00:27:03.046 A:middle
Once we have that, we can pick

00:27:03.046 --> 00:27:04.256 A:middle
one of those gradient styles.

00:27:04.316 --> 00:27:05.336 A:middle
You know, in this case we're

00:27:05.336 --> 00:27:06.076 A:middle
going to use an angular

00:27:06.076 --> 00:27:06.536 A:middle
gradient.

00:27:07.276 --> 00:27:08.786 A:middle
We give it the color ramp and

00:27:08.786 --> 00:27:09.956 A:middle
then we, in this case, for the

00:27:09.956 --> 00:27:11.176 A:middle
angular gradient we give it the

00:27:11.176 --> 00:27:12.936 A:middle
center point and a starting

00:27:12.936 --> 00:27:13.306 A:middle
angle.

00:27:13.346 --> 00:27:14.716 A:middle
And then it can just fill the

00:27:14.716 --> 00:27:15.826 A:middle
colors around that circle

00:27:16.176 --> 00:27:18.216 A:middle
effectively pushing them to

00:27:18.216 --> 00:27:21.626 A:middle
infinity to give us our kind of

00:27:21.936 --> 00:27:22.626 A:middle
color fill.

00:27:22.926 --> 00:27:24.276 A:middle
But obviously then we can take

00:27:24.346 --> 00:27:26.496 A:middle
the style we just made and apply

00:27:26.496 --> 00:27:28.176 A:middle
it to a circle, in this case

00:27:28.176 --> 00:27:29.636 A:middle
doing a fill as we saw before.

00:27:29.636 --> 00:27:30.526 A:middle
And now we've got, instead of a

00:27:30.526 --> 00:27:31.746 A:middle
red circle we've got this nice

00:27:31.746 --> 00:27:32.386 A:middle
kind of color wheel.

00:27:33.406 --> 00:27:34.816 A:middle
But of course filling is just

00:27:34.816 --> 00:27:36.546 A:middle
one of our operations so we

00:27:36.546 --> 00:27:37.876 A:middle
could equally have just said

00:27:37.876 --> 00:27:39.036 A:middle
stroke border and got a filled

00:27:39.036 --> 00:27:39.356 A:middle
ring.

00:27:40.516 --> 00:27:47.236 A:middle
[ Applause ]

00:27:47.736 --> 00:27:49.646 A:middle
Okay so that's the basics and

00:27:49.646 --> 00:27:50.936 A:middle
we've seen drawing individual

00:27:50.936 --> 00:27:52.816 A:middle
things, but now we want to go on

00:27:52.816 --> 00:27:53.656 A:middle
and build something a little

00:27:53.656 --> 00:27:54.926 A:middle
more complex out of multiple

00:27:55.046 --> 00:27:56.106 A:middle
drawing operations, multiple

00:27:56.106 --> 00:27:56.316 A:middle
views.

00:27:56.316 --> 00:27:58.036 A:middle
And so this is the example we're

00:27:58.036 --> 00:27:59.346 A:middle
going to use for the rest of the

00:27:59.346 --> 00:27:59.816 A:middle
session.

00:27:59.816 --> 00:28:01.346 A:middle
It's actually a sample code you

00:27:59.816 --> 00:28:01.346 A:middle
It's actually a sample code you

00:28:01.346 --> 00:28:03.246 A:middle
can download and it's just kind

00:28:03.246 --> 00:28:04.986 A:middle
of an interactive pie chart kind

00:28:04.986 --> 00:28:06.826 A:middle
of thing and it's made up of a

00:28:06.826 --> 00:28:08.276 A:middle
bunch of color wedges where you

00:28:08.276 --> 00:28:09.406 A:middle
can add them and remove them.

00:28:09.406 --> 00:28:10.656 A:middle
They can animate in and out.

00:28:12.276 --> 00:28:15.266 A:middle
Okay, so before we can figure

00:28:15.266 --> 00:28:16.276 A:middle
out how to draw it, we need to

00:28:16.276 --> 00:28:16.956 A:middle
look at the data.

00:28:17.566 --> 00:28:18.726 A:middle
And so our sample app is

00:28:18.726 --> 00:28:21.116 A:middle
providing us a data model and

00:28:21.286 --> 00:28:22.676 A:middle
it's very simple.

00:28:22.676 --> 00:28:24.076 A:middle
It's just a clasp representing

00:28:24.076 --> 00:28:25.106 A:middle
one of these kind of wedge--

00:28:25.206 --> 00:28:26.106 A:middle
ring of wedge things.

00:28:26.736 --> 00:28:27.976 A:middle
And each wedge is a few

00:28:28.326 --> 00:28:29.666 A:middle
properties representing the

00:28:29.706 --> 00:28:31.006 A:middle
geometry and the color of the

00:28:31.456 --> 00:28:32.046 A:middle
view.

00:28:32.356 --> 00:28:33.406 A:middle
And then we've got a dictionary

00:28:33.406 --> 00:28:35.876 A:middle
of the wedges tracked by ID and

00:28:35.876 --> 00:28:38.166 A:middle
then finally an array of the IDs

00:28:38.166 --> 00:28:39.096 A:middle
just so we know which order to

00:28:39.096 --> 00:28:39.566 A:middle
draw them in.

00:28:40.376 --> 00:28:41.406 A:middle
And so we can go on and think

00:28:41.406 --> 00:28:42.156 A:middle
about how we're going to draw

00:28:42.156 --> 00:28:42.506 A:middle
this now.

00:28:44.676 --> 00:28:46.726 A:middle
Just as we saw before, we really

00:28:46.726 --> 00:28:47.596 A:middle
want this to interact with the

00:28:47.596 --> 00:28:49.566 A:middle
layout system so we're going to

00:28:49.566 --> 00:28:50.956 A:middle
assume that there's a layout

00:28:50.956 --> 00:28:52.706 A:middle
bounds for the entire control.

00:28:53.386 --> 00:28:54.706 A:middle
You know because we want it to

00:28:54.706 --> 00:28:56.146 A:middle
resize and move around as

00:28:56.146 --> 00:28:56.656 A:middle
expected.

00:28:57.336 --> 00:28:59.056 A:middle
And if you think about how this

00:28:59.056 --> 00:29:00.576 A:middle
will work, you know, we can draw

00:28:59.056 --> 00:29:00.576 A:middle
will work, you know, we can draw

00:29:00.576 --> 00:29:01.986 A:middle
each of these colored things

00:29:01.986 --> 00:29:02.586 A:middle
separately.

00:29:02.926 --> 00:29:03.996 A:middle
And as long as they all fit

00:29:03.996 --> 00:29:05.416 A:middle
within that same layout bounds,

00:29:05.416 --> 00:29:06.296 A:middle
we can then composite them

00:29:06.296 --> 00:29:08.436 A:middle
together and they'll all align

00:29:08.436 --> 00:29:08.956 A:middle
seamlessly.

00:29:09.826 --> 00:29:11.336 A:middle
So that really means we can just

00:29:11.336 --> 00:29:12.236 A:middle
think about one of these.

00:29:13.556 --> 00:29:14.856 A:middle
And so, you know, we've seen

00:29:14.856 --> 00:29:15.726 A:middle
things like this before.

00:29:15.726 --> 00:29:17.266 A:middle
It's really some shape filled

00:29:17.266 --> 00:29:17.966 A:middle
with some gradient.

00:29:18.886 --> 00:29:20.076 A:middle
In this case, a shape kind of

00:29:20.076 --> 00:29:20.596 A:middle
like this.

00:29:21.386 --> 00:29:22.626 A:middle
But we don't actually have this

00:29:22.626 --> 00:29:24.436 A:middle
shape in the toolkit of the

00:29:24.636 --> 00:29:25.876 A:middle
built in shapes in SwiftUI, but

00:29:26.456 --> 00:29:27.586 A:middle
that's not a problem.

00:29:27.586 --> 00:29:28.966 A:middle
We can go on and define a custom

00:29:28.966 --> 00:29:29.546 A:middle
shape for this.

00:29:31.046 --> 00:29:33.216 A:middle
So custom shapes are really like

00:29:33.216 --> 00:29:35.146 A:middle
custom views in that they're,

00:29:35.246 --> 00:29:36.446 A:middle
you know, types conforming to a

00:29:36.446 --> 00:29:36.886 A:middle
protocol.

00:29:37.396 --> 00:29:38.346 A:middle
Except in this case we're not

00:29:38.346 --> 00:29:39.706 A:middle
conforming to a view protocol,

00:29:39.706 --> 00:29:41.066 A:middle
we're using the shape protocol.

00:29:41.586 --> 00:29:43.086 A:middle
And the shape protocol has a

00:29:43.086 --> 00:29:44.696 A:middle
single requirement which is this

00:29:44.736 --> 00:29:45.836 A:middle
path and rect function.

00:29:46.396 --> 00:29:47.916 A:middle
And the rect you see here is the

00:29:47.916 --> 00:29:49.586 A:middle
layout bounds or the frame of

00:29:49.586 --> 00:29:50.246 A:middle
reference I guess.

00:29:50.246 --> 00:29:51.876 A:middle
And then it's returning

00:29:51.876 --> 00:29:52.236 A:middle
bézier path.

00:29:53.116 --> 00:29:55.976 A:middle
So for our custom shape we'll

00:29:56.036 --> 00:29:57.146 A:middle
give it a single property which

00:29:57.146 --> 00:29:58.306 A:middle
is the wedge description, the

00:29:58.306 --> 00:29:59.416 A:middle
thing containing the geometry.

00:30:00.116 --> 00:30:01.156 A:middle
And then additionally we'll just

00:30:01.156 --> 00:30:02.326 A:middle
create an empty path because

00:30:02.326 --> 00:30:03.236 A:middle
we're going to put some things

00:30:03.236 --> 00:30:04.116 A:middle
in that and then return it

00:30:04.116 --> 00:30:04.366 A:middle
later.

00:30:05.526 --> 00:30:07.256 A:middle
Just to kind of simplify this a

00:30:07.256 --> 00:30:09.756 A:middle
little bit, I would also use a

00:30:09.756 --> 00:30:10.596 A:middle
helper tiles which

00:30:10.676 --> 00:30:11.916 A:middle
effectively abstracts some of

00:30:11.916 --> 00:30:14.016 A:middle
the geometry of the shape we're

00:30:14.016 --> 00:30:15.326 A:middle
drawing just to kind of hide the

00:30:15.326 --> 00:30:16.656 A:middle
sines and cosines because, you

00:30:16.656 --> 00:30:18.976 A:middle
know, this is circles and things

00:30:18.976 --> 00:30:19.316 A:middle
like that.

00:30:19.316 --> 00:30:20.776 A:middle
But this is really just defining

00:30:20.776 --> 00:30:22.926 A:middle
some variables, you know, that

00:30:22.926 --> 00:30:24.266 A:middle
we can then use in the rest of

00:30:24.266 --> 00:30:25.096 A:middle
this function.

00:30:25.706 --> 00:30:28.216 A:middle
So first of all we'll add the--

00:30:28.216 --> 00:30:29.226 A:middle
one of the inner arcs.

00:30:30.276 --> 00:30:31.846 A:middle
Then we can add a line to the

00:30:31.846 --> 00:30:33.716 A:middle
path joining the inner and outer

00:30:33.716 --> 00:30:33.976 A:middle
rings.

00:30:35.046 --> 00:30:36.176 A:middle
And then another arc to kind of

00:30:36.176 --> 00:30:37.466 A:middle
wind back around the circle.

00:30:38.306 --> 00:30:39.426 A:middle
And finally we can just tell the

00:30:39.426 --> 00:30:40.806 A:middle
path, hey close this current sub

00:30:40.806 --> 00:30:43.306 A:middle
path which will join the last

00:30:43.306 --> 00:30:44.586 A:middle
point to the start point, and

00:30:44.776 --> 00:30:45.486 A:middle
we've got our shape.

00:30:45.486 --> 00:30:46.506 A:middle
Excuse me.

00:30:47.476 --> 00:30:48.816 A:middle
So now we can go on and actually

00:30:48.816 --> 00:30:49.516 A:middle
draw this shape.

00:30:50.046 --> 00:30:50.626 A:middle
We could fill it with our

00:30:50.626 --> 00:30:53.536 A:middle
gradient and that's most of the

00:30:53.536 --> 00:30:53.996 A:middle
way there.

00:30:54.786 --> 00:30:55.786 A:middle
There is one thing we still need

00:30:55.786 --> 00:30:56.176 A:middle
to do though.

00:30:56.756 --> 00:30:58.046 A:middle
We saw in the movie that we'd

00:30:58.046 --> 00:30:59.256 A:middle
like the shapes to animate.

00:30:59.256 --> 00:31:01.576 A:middle
And if we just use this shape as

00:30:59.256 --> 00:31:01.576 A:middle
And if we just use this shape as

00:31:01.576 --> 00:31:03.376 A:middle
it is, there is no way that

00:31:03.406 --> 00:31:04.936 A:middle
SwiftUI can animate this because

00:31:05.016 --> 00:31:06.256 A:middle
it doesn't know enough about the

00:31:06.336 --> 00:31:06.736 A:middle
types.

00:31:07.396 --> 00:31:08.616 A:middle
And so we can go on and add one

00:31:08.616 --> 00:31:10.666 A:middle
extra property to our custom

00:31:10.666 --> 00:31:12.836 A:middle
shape called animatable data and

00:31:12.836 --> 00:31:14.526 A:middle
this is really providing a

00:31:14.526 --> 00:31:16.146 A:middle
vector of floating point numbers

00:31:16.806 --> 00:31:18.996 A:middle
that the system is able to

00:31:19.846 --> 00:31:20.226 A:middle
interpolate.

00:31:20.226 --> 00:31:22.116 A:middle
In this case we're going to

00:31:22.116 --> 00:31:23.386 A:middle
delegate the responsibility for

00:31:23.386 --> 00:31:24.946 A:middle
this to data model because it's

00:31:24.946 --> 00:31:27.056 A:middle
implemented this property for

00:31:27.056 --> 00:31:27.246 A:middle
us.

00:31:27.726 --> 00:31:28.946 A:middle
But really it's very simple.

00:31:28.946 --> 00:31:31.336 A:middle
It's taking the three properties

00:31:31.336 --> 00:31:32.966 A:middle
and the wedge description and

00:31:32.966 --> 00:31:34.066 A:middle
then combining them into one

00:31:34.066 --> 00:31:35.346 A:middle
value that can be interpolated.

00:31:36.956 --> 00:31:38.926 A:middle
Okay so now our shape really is

00:31:38.926 --> 00:31:40.166 A:middle
complete, we can go up and draw

00:31:40.166 --> 00:31:40.266 A:middle
it.

00:31:41.206 --> 00:31:42.036 A:middle
And so we can get back to

00:31:42.036 --> 00:31:43.376 A:middle
thinking about how we layer

00:31:43.376 --> 00:31:44.386 A:middle
together our diagram.

00:31:45.986 --> 00:31:47.576 A:middle
So as we saw we can get a

00:31:47.576 --> 00:31:48.946 A:middle
gradient, an angular

00:31:48.946 --> 00:31:50.646 A:middle
gradient again and just fill our

00:31:50.646 --> 00:31:50.916 A:middle
shape.

00:31:50.946 --> 00:31:52.936 A:middle
But that's one of them.

00:31:52.936 --> 00:31:53.976 A:middle
We really want, you know, eight

00:31:53.976 --> 00:31:54.526 A:middle
of these things.

00:31:55.696 --> 00:31:57.036 A:middle
And composite them together.

00:31:57.286 --> 00:31:58.246 A:middle
And so we can do that with

00:31:58.316 --> 00:32:01.506 A:middle
something called a Zstack which

00:31:58.316 --> 00:32:01.506 A:middle
something called a Zstack which

00:32:01.506 --> 00:32:02.706 A:middle
is very similar to the H and

00:32:02.706 --> 00:32:03.896 A:middle
Vstacks Dave was talking about

00:32:03.896 --> 00:32:05.146 A:middle
but it layers things together

00:32:05.146 --> 00:32:06.756 A:middle
kind of depth-wise versus

00:32:07.116 --> 00:32:07.756 A:middle
spatially.

00:32:08.656 --> 00:32:09.846 A:middle
So we'll create another custom

00:32:09.846 --> 00:32:12.486 A:middle
view and this time our view will

00:32:12.596 --> 00:32:13.776 A:middle
grab the data model via the

00:32:13.806 --> 00:32:14.366 A:middle
environment.

00:32:14.366 --> 00:32:15.356 A:middle
We've set that up somewhere

00:32:15.356 --> 00:32:15.606 A:middle
else.

00:32:16.326 --> 00:32:17.516 A:middle
And we'll start off by creating

00:32:17.516 --> 00:32:17.966 A:middle
the Zstack.

00:32:18.966 --> 00:32:20.266 A:middle
Now we saw on our data model

00:32:20.266 --> 00:32:22.586 A:middle
that the, you know, it's giving

00:32:22.586 --> 00:32:23.656 A:middle
this array of wedge IDs.

00:32:23.656 --> 00:32:26.976 A:middle
And so we can use that with the

00:32:27.046 --> 00:32:28.986 A:middle
ForEach view in SwiftUI.

00:32:28.986 --> 00:32:31.186 A:middle
And really what that's doing is

00:32:31.776 --> 00:32:33.926 A:middle
mapping over that array of IDs

00:32:34.326 --> 00:32:35.626 A:middle
and effectively creating one

00:32:35.626 --> 00:32:37.166 A:middle
view for each wedge we want to

00:32:37.166 --> 00:32:37.456 A:middle
create.

00:32:38.296 --> 00:32:39.416 A:middle
And so this wedge view thing is

00:32:39.416 --> 00:32:40.216 A:middle
very simple.

00:32:40.216 --> 00:32:42.506 A:middle
It's really just a single

00:32:43.396 --> 00:32:44.846 A:middle
statement view that, you know,

00:32:44.846 --> 00:32:46.096 A:middle
creates the custom shape, fills

00:32:46.096 --> 00:32:46.756 A:middle
it with a gradient.

00:32:47.436 --> 00:32:49.976 A:middle
Okay so this is fairly complete

00:32:50.586 --> 00:32:50.866 A:middle
now.

00:32:50.866 --> 00:32:52.146 A:middle
You know, because of how SwiftUI

00:32:52.146 --> 00:32:53.776 A:middle
tracks dependencies, when our

00:32:53.776 --> 00:32:55.176 A:middle
data model updates the view will

00:32:55.176 --> 00:32:56.716 A:middle
update, you know, because Zstack

00:32:57.186 --> 00:32:58.436 A:middle
handles insertion and removal

00:32:58.436 --> 00:32:59.126 A:middle
transitions.

00:32:59.366 --> 00:33:01.166 A:middle
They will fade in and out

00:32:59.366 --> 00:33:01.166 A:middle
They will fade in and out

00:33:01.166 --> 00:33:02.856 A:middle
cleanly and that's pretty good

00:33:02.856 --> 00:33:04.616 A:middle
for an application like this.

00:33:04.616 --> 00:33:05.766 A:middle
But there are a few more things

00:33:05.766 --> 00:33:06.636 A:middle
we can go on and do now.

00:33:07.086 --> 00:33:08.396 A:middle
You know we saw in the movie

00:33:08.396 --> 00:33:10.286 A:middle
that we'd like the wedges to be

00:33:10.286 --> 00:33:11.676 A:middle
deleted when you tap on them.

00:33:12.486 --> 00:33:14.056 A:middle
So we can add something called a

00:33:14.056 --> 00:33:15.646 A:middle
tap action and this is kind of

00:33:15.646 --> 00:33:16.686 A:middle
like an event handler for the

00:33:16.686 --> 00:33:18.306 A:middle
view and it's really saying if

00:33:18.306 --> 00:33:20.106 A:middle
you tap inside this view's

00:33:20.106 --> 00:33:21.696 A:middle
shape, then run the closure.

00:33:21.696 --> 00:33:23.256 A:middle
And in our case the closure

00:33:23.256 --> 00:33:25.946 A:middle
we're going to use is enable

00:33:25.946 --> 00:33:27.236 A:middle
animations and then ask the data

00:33:27.236 --> 00:33:28.996 A:middle
model, hey remove this wedge ID.

00:33:29.746 --> 00:33:30.756 A:middle
So once we've done that we can

00:33:30.756 --> 00:33:31.436 A:middle
tap on the wedges.

00:33:32.066 --> 00:33:33.926 A:middle
Now there's one other final

00:33:33.926 --> 00:33:34.796 A:middle
thing we'd like to do here.

00:33:35.206 --> 00:33:36.466 A:middle
I said that the default

00:33:36.466 --> 00:33:37.806 A:middle
transition is a fade in fade out

00:33:37.806 --> 00:33:39.316 A:middle
effect and that's great for a

00:33:39.316 --> 00:33:40.576 A:middle
lot of things but in our case we

00:33:40.576 --> 00:33:42.026 A:middle
want something a little more fun

00:33:42.226 --> 00:33:43.456 A:middle
so we're going to scale the

00:33:43.636 --> 00:33:44.856 A:middle
wedges down towards the center

00:33:44.856 --> 00:33:45.726 A:middle
as well as fading them.

00:33:46.536 --> 00:33:47.896 A:middle
And we can do that by adding a

00:33:47.896 --> 00:33:49.416 A:middle
custom transition called scale

00:33:49.416 --> 00:33:49.776 A:middle
and fade.

00:33:49.776 --> 00:33:51.096 A:middle
And this is something we're

00:33:51.096 --> 00:33:51.906 A:middle
going to have to create for

00:33:51.906 --> 00:33:52.316 A:middle
ourselves.

00:33:53.656 --> 00:33:55.586 A:middle
Okay, so we think about what

00:33:55.586 --> 00:33:56.926 A:middle
this transition's going to do.

00:33:57.326 --> 00:33:58.476 A:middle
You know we want the-- when the

00:33:58.476 --> 00:33:59.806 A:middle
views are added, we want them to

00:33:59.806 --> 00:34:01.476 A:middle
start off scaled down and faded

00:33:59.806 --> 00:34:01.476 A:middle
start off scaled down and faded

00:34:01.476 --> 00:34:03.496 A:middle
out, and as they, you know, kind

00:34:03.496 --> 00:34:04.746 A:middle
of animate in, they'll come in,

00:34:05.296 --> 00:34:06.566 A:middle
scale up to the normal state.

00:34:07.246 --> 00:34:07.956 A:middle
While they're sitting in the

00:34:07.956 --> 00:34:08.916 A:middle
view hierarchy they'll just kind

00:34:08.916 --> 00:34:10.926 A:middle
of sit there and then finally

00:34:10.926 --> 00:34:11.786 A:middle
they'll reverse that transition

00:34:11.786 --> 00:34:13.255 A:middle
to kind of get removed.

00:34:14.216 --> 00:34:15.616 A:middle
And so if you think about that,

00:34:15.786 --> 00:34:16.666 A:middle
you know we don't need to define

00:34:16.666 --> 00:34:17.735 A:middle
all those frames obviously

00:34:17.735 --> 00:34:19.096 A:middle
because we have an animation

00:34:19.096 --> 00:34:19.505 A:middle
system.

00:34:20.036 --> 00:34:21.636 A:middle
And so we defined the end states

00:34:21.636 --> 00:34:23.416 A:middle
the animation system will take

00:34:23.416 --> 00:34:24.096 A:middle
care of the rest.

00:34:24.976 --> 00:34:26.815 A:middle
But of course in this case

00:34:26.815 --> 00:34:28.646 A:middle
there's actually a symmetric

00:34:28.646 --> 00:34:30.386 A:middle
transition here so we only

00:34:30.386 --> 00:34:31.466 A:middle
actually have two end states.

00:34:31.686 --> 00:34:33.616 A:middle
We have the transition kind of

00:34:33.616 --> 00:34:36.746 A:middle
set up and remove state and we

00:34:36.746 --> 00:34:37.596 A:middle
have the normal state where

00:34:37.596 --> 00:34:39.516 A:middle
nothing is really going on.

00:34:40.235 --> 00:34:41.926 A:middle
So now we know what states to

00:34:41.926 --> 00:34:43.376 A:middle
define we can define them in

00:34:43.376 --> 00:34:43.646 A:middle
code.

00:34:43.646 --> 00:34:45.576 A:middle
And the way we do that in

00:34:45.576 --> 00:34:46.866 A:middle
SwiftUI is with something called

00:34:46.866 --> 00:34:47.606 A:middle
a view modifier.

00:34:48.176 --> 00:34:49.985 A:middle
Now a view modifier is a little

00:34:49.985 --> 00:34:51.076 A:middle
bit like a view in that it's

00:34:51.076 --> 00:34:52.235 A:middle
defining some piece of the view

00:34:52.235 --> 00:34:54.315 A:middle
hierarchy but it's defining it

00:34:54.315 --> 00:34:55.835 A:middle
in, as a function of some other

00:34:55.835 --> 00:34:56.196 A:middle
view.

00:34:56.896 --> 00:34:59.456 A:middle
And that's what this thing is

00:34:59.456 --> 00:34:59.886 A:middle
representing.

00:34:59.886 --> 00:35:01.756 A:middle
You know it has a body method

00:34:59.886 --> 00:35:01.756 A:middle
You know it has a body method

00:35:01.866 --> 00:35:02.876 A:middle
just like the view has a body

00:35:02.916 --> 00:35:03.416 A:middle
property.

00:35:03.956 --> 00:35:05.156 A:middle
But in this case the body method

00:35:05.156 --> 00:35:06.926 A:middle
is a function of another view.

00:35:06.926 --> 00:35:07.846 A:middle
That's what the content

00:35:07.846 --> 00:35:08.516 A:middle
parameter is.

00:35:09.176 --> 00:35:10.406 A:middle
And so what we can do here is

00:35:10.406 --> 00:35:12.526 A:middle
apply this to any other view and

00:35:12.526 --> 00:35:13.276 A:middle
apply some changes.

00:35:13.756 --> 00:35:15.476 A:middle
And so in our case we want the

00:35:15.476 --> 00:35:17.706 A:middle
transition-- we have the two

00:35:17.706 --> 00:35:18.656 A:middle
transition states.

00:35:18.656 --> 00:35:19.926 A:middle
We'll give it a single Boolean

00:35:19.926 --> 00:35:20.706 A:middle
property saying is the

00:35:20.706 --> 00:35:21.586 A:middle
transition active.

00:35:22.196 --> 00:35:23.546 A:middle
And when the transition's active

00:35:23.546 --> 00:35:25.126 A:middle
we'll, you know, apply two

00:35:25.346 --> 00:35:27.696 A:middle
existing modifiers to kind of

00:35:27.696 --> 00:35:29.816 A:middle
change the incoming view to take

00:35:29.856 --> 00:35:31.186 A:middle
the effect of the transition.

00:35:31.186 --> 00:35:32.816 A:middle
That is, we'll, you know, we'll

00:35:32.816 --> 00:35:34.476 A:middle
scale it down and we'll fade it

00:35:34.476 --> 00:35:37.226 A:middle
out when the thing is set.

00:35:38.066 --> 00:35:40.726 A:middle
Okay so that's our transition

00:35:40.726 --> 00:35:41.526 A:middle
mostly defined.

00:35:41.526 --> 00:35:43.806 A:middle
We have one final step though.

00:35:44.446 --> 00:35:46.256 A:middle
We have the view modifier now

00:35:46.256 --> 00:35:47.236 A:middle
but we need to give the system

00:35:47.236 --> 00:35:48.676 A:middle
two values of the view modifier,

00:35:48.676 --> 00:35:50.266 A:middle
both the active and the inactive

00:35:50.646 --> 00:35:53.526 A:middle
values, so that SwiftUI can kind

00:35:53.526 --> 00:35:54.996 A:middle
of package that up as a single

00:35:54.996 --> 00:35:56.866 A:middle
transition and then as things

00:35:56.866 --> 00:35:57.896 A:middle
are added or removed, pick the

00:35:57.896 --> 00:35:59.006 A:middle
right value to apply at the

00:35:59.006 --> 00:36:00.756 A:middle
right time and then interpolate

00:35:59.006 --> 00:36:00.756 A:middle
right time and then interpolate

00:36:01.156 --> 00:36:02.466 A:middle
between them during animations.

00:36:03.686 --> 00:36:05.436 A:middle
So that's the thing we can go on

00:36:05.436 --> 00:36:05.916 A:middle
and use.

00:36:06.636 --> 00:36:07.726 A:middle
So having done all that we can

00:36:07.726 --> 00:36:09.256 A:middle
now see what we've built as a

00:36:09.256 --> 00:36:09.696 A:middle
demo.

00:36:11.536 --> 00:36:13.866 A:middle
Okay, so here's the app you can

00:36:13.866 --> 00:36:15.926 A:middle
download, and I'll run it.

00:36:16.206 --> 00:36:17.486 A:middle
And hopefully-- yeah so we've

00:36:17.486 --> 00:36:19.576 A:middle
got our window here.

00:36:20.096 --> 00:36:21.106 A:middle
It's empty right now because the

00:36:21.106 --> 00:36:22.906 A:middle
data model is empty but I can

00:36:22.906 --> 00:36:23.746 A:middle
add things.

00:36:24.176 --> 00:36:25.356 A:middle
You can see they take on the

00:36:25.356 --> 00:36:26.436 A:middle
transition we just created.

00:36:26.436 --> 00:36:27.446 A:middle
They're kind of scaling up and

00:36:27.936 --> 00:36:28.396 A:middle
filling in.

00:36:28.396 --> 00:36:31.176 A:middle
The nice thing is, you know, we

00:36:31.176 --> 00:36:32.736 A:middle
can tap on them and remove the

00:36:32.736 --> 00:36:33.106 A:middle
items.

00:36:33.636 --> 00:36:34.906 A:middle
As you see as I remove something

00:36:34.906 --> 00:36:35.836 A:middle
from the middle it'll kind of

00:36:35.936 --> 00:36:37.376 A:middle
rotate around nicely because of

00:36:37.376 --> 00:36:38.846 A:middle
the way we defined the shapes.

00:36:38.846 --> 00:36:40.566 A:middle
And then I can turn on the kind

00:36:40.566 --> 00:36:41.726 A:middle
of background animation here.

00:36:42.886 --> 00:36:44.466 A:middle
And then, you know, we have kind

00:36:44.466 --> 00:36:45.796 A:middle
of a physics simulation running

00:36:45.796 --> 00:36:46.116 A:middle
on this.

00:36:46.496 --> 00:36:47.686 A:middle
And it's just effectively kind

00:36:47.686 --> 00:36:49.066 A:middle
of random walking through the

00:36:49.066 --> 00:36:49.776 A:middle
parameter space.

00:36:50.296 --> 00:36:52.066 A:middle
And this is, you know, it's a

00:36:52.066 --> 00:36:52.676 A:middle
nice little app.

00:36:52.676 --> 00:36:54.216 A:middle
And even while it's animating

00:36:54.216 --> 00:36:55.376 A:middle
it's obviously still all

00:36:55.426 --> 00:36:57.436 A:middle
interactive and, you know,

00:36:57.516 --> 00:36:58.206 A:middle
testing, it is working

00:36:58.206 --> 00:36:58.556 A:middle
correctly.

00:36:59.216 --> 00:37:00.046 A:middle
The interesting thing here

00:36:59.216 --> 00:37:00.046 A:middle
The interesting thing here

00:37:00.046 --> 00:37:02.516 A:middle
though is when you think about

00:37:02.516 --> 00:37:03.466 A:middle
how we're rendering this,

00:37:03.986 --> 00:37:05.886 A:middle
SwiftUI effectively creates a

00:37:06.306 --> 00:37:07.766 A:middle
native platform view such as a

00:37:07.766 --> 00:37:08.996 A:middle
UI viewer NSView for

00:37:08.996 --> 00:37:10.716 A:middle
every element that appears on

00:37:10.716 --> 00:37:11.146 A:middle
the screen.

00:37:11.826 --> 00:37:13.046 A:middle
And so that's the things like

00:37:13.046 --> 00:37:13.606 A:middle
the buttons.

00:37:14.396 --> 00:37:15.486 A:middle
And so typically that's exactly

00:37:15.486 --> 00:37:17.076 A:middle
what we want because, you know,

00:37:17.076 --> 00:37:18.376 A:middle
we are mostly dealing with

00:37:18.376 --> 00:37:19.586 A:middle
normal controls and things like

00:37:19.586 --> 00:37:19.856 A:middle
that.

00:37:20.936 --> 00:37:22.806 A:middle
But for things like this kind of

00:37:22.806 --> 00:37:26.006 A:middle
graphic display, you know this

00:37:26.006 --> 00:37:27.386 A:middle
is, if you were drawing this in

00:37:27.646 --> 00:37:29.486 A:middle
UIkit or AppKit this is probably

00:37:29.486 --> 00:37:30.116 A:middle
not what you would do.

00:37:30.116 --> 00:37:31.816 A:middle
You probably would not create a

00:37:31.816 --> 00:37:33.326 A:middle
single NSView for every one of

00:37:33.326 --> 00:37:33.686 A:middle
these things.

00:37:33.686 --> 00:37:35.786 A:middle
And the reason being that once

00:37:35.786 --> 00:37:36.876 A:middle
you start creating lots of them,

00:37:37.496 --> 00:37:38.436 A:middle
you know, the performance isn't

00:37:38.546 --> 00:37:39.296 A:middle
quite what you'd like.

00:37:39.296 --> 00:37:40.806 A:middle
And that's really not a problem

00:37:40.806 --> 00:37:41.646 A:middle
because, you know, we're not

00:37:41.646 --> 00:37:42.806 A:middle
supposed to use NSView in this

00:37:42.806 --> 00:37:42.976 A:middle
way.

00:37:44.126 --> 00:37:45.506 A:middle
So we have a solution for that

00:37:45.506 --> 00:37:47.976 A:middle
in SwiftUI and that is we can

00:37:47.976 --> 00:37:49.016 A:middle
effectively put everything in

00:37:49.016 --> 00:37:51.326 A:middle
the ZStack here-- whoops--

00:37:51.946 --> 00:37:52.746 A:middle
inside something called a

00:37:52.746 --> 00:37:53.286 A:middle
drawing group.

00:37:54.256 --> 00:37:55.516 A:middle
And a drawing group is a special

00:37:55.516 --> 00:37:57.366 A:middle
way of rendering but only for

00:37:57.366 --> 00:37:58.246 A:middle
things like graphics.

00:37:58.536 --> 00:37:59.766 A:middle
So you know shapes and text and

00:37:59.766 --> 00:38:00.816 A:middle
images, things like that.

00:37:59.766 --> 00:38:00.816 A:middle
images, things like that.

00:38:00.966 --> 00:38:02.246 A:middle
And when we do that we'll

00:38:02.246 --> 00:38:04.216 A:middle
actually flatten all of the

00:38:04.216 --> 00:38:05.946 A:middle
SwiftUI views into a single

00:38:05.946 --> 00:38:08.366 A:middle
NSViewer UI view ad render them

00:38:08.366 --> 00:38:08.826 A:middle
with metal.

00:38:09.516 --> 00:38:10.846 A:middle
And so when I start doing this,

00:38:10.846 --> 00:38:11.916 A:middle
you can see it acts exactly the

00:38:11.916 --> 00:38:12.936 A:middle
same because, you know, it's not

00:38:12.936 --> 00:38:14.686 A:middle
a behavioral change.

00:38:14.996 --> 00:38:16.666 A:middle
But once I start ramping up the

00:38:16.666 --> 00:38:18.156 A:middle
numbers of elements, hopefully

00:38:18.156 --> 00:38:19.346 A:middle
you can see that the performance

00:38:19.346 --> 00:38:19.976 A:middle
was a lot better because--

00:38:20.516 --> 00:38:27.736 A:middle
[ Applause ]

00:38:28.236 --> 00:38:29.366 A:middle
And that's simply because you

00:38:29.366 --> 00:38:31.056 A:middle
know now there is one view which

00:38:31.056 --> 00:38:32.486 A:middle
is kind of what the view system

00:38:32.486 --> 00:38:35.626 A:middle
wants but you know the drawing's

00:38:36.066 --> 00:38:36.796 A:middle
happening using hardware

00:38:36.796 --> 00:38:38.716 A:middle
acceleration once only.

00:38:38.716 --> 00:38:41.736 A:middle
So I think that's about it.

00:38:41.866 --> 00:38:43.366 A:middle
Cool. Okay.

00:38:49.516 --> 00:38:55.126 A:middle
[ Applause ]

00:38:55.626 --> 00:38:57.016 A:middle
Okay so we've seen a few of the

00:38:57.016 --> 00:38:59.036 A:middle
graphic modifiers in this talk

00:38:59.606 --> 00:39:00.956 A:middle
but I want to point out that

00:38:59.606 --> 00:39:00.956 A:middle
but I want to point out that

00:39:00.956 --> 00:39:02.266 A:middle
there really are many more.

00:39:02.266 --> 00:39:04.566 A:middle
We've done a lot of work to

00:39:04.566 --> 00:39:05.656 A:middle
basically implement everything

00:39:05.656 --> 00:39:06.826 A:middle
you'd find in a normal 2D

00:39:06.826 --> 00:39:07.506 A:middle
drawing system.

00:39:08.046 --> 00:39:09.586 A:middle
And as we said, they all apply

00:39:09.586 --> 00:39:10.306 A:middle
to views as well.

00:39:10.746 --> 00:39:12.416 A:middle
So, you know, if this is, if you

00:39:12.416 --> 00:39:13.266 A:middle
need something from here, just

00:39:13.346 --> 00:39:14.356 A:middle
go look in the documentation.

00:39:14.766 --> 00:39:17.606 A:middle
And I think this really kind of

00:39:17.766 --> 00:39:18.956 A:middle
brings home the power of the

00:39:18.956 --> 00:39:19.666 A:middle
model we've built.

00:39:19.666 --> 00:39:23.796 A:middle
And the-- you know we want, we

00:39:23.796 --> 00:39:24.946 A:middle
want to kind of use these

00:39:24.946 --> 00:39:26.116 A:middle
graphic things but in

00:39:26.216 --> 00:39:28.166 A:middle
cooperation with all the rest of

00:39:28.166 --> 00:39:29.866 A:middle
the APIs like layout and

00:39:29.866 --> 00:39:31.646 A:middle
animations and interaction.

00:39:31.646 --> 00:39:32.816 A:middle
And the whole point of SwiftUI

00:39:32.816 --> 00:39:34.916 A:middle
is that we've unified all of

00:39:34.916 --> 00:39:36.696 A:middle
these areas around the one view

00:39:36.696 --> 00:39:38.346 A:middle
protocol to kind of give you

00:39:38.346 --> 00:39:39.676 A:middle
everything in the same package.

00:39:39.676 --> 00:39:41.656 A:middle
We think this is going to be

00:39:41.706 --> 00:39:43.756 A:middle
incredibly powerful and we

00:39:43.756 --> 00:39:44.886 A:middle
really can't wait to see where

00:39:44.886 --> 00:39:45.696 A:middle
you take it in the future.

00:39:45.696 --> 00:39:46.976 A:middle
So thank you very much.

00:39:47.516 --> 00:39:54.166 A:middle
[ Applause ]

00:39:54.666 --> 00:39:55.946 A:middle
We do have one more lab today.

00:39:56.116 --> 00:39:57.886 A:middle
It's, I think in an hour, so if

00:39:57.886 --> 00:39:58.796 A:middle
you have any questions about

00:39:58.796 --> 00:40:00.006 A:middle
this or anything else, please

00:39:58.796 --> 00:40:00.006 A:middle
this or anything else, please

00:40:00.006 --> 00:40:01.256 A:middle
come along and find us.

00:40:01.776 --> 00:40:01.976 A:middle
Thanks.

00:40:02.508 --> 00:40:04.508 A:middle
[ Applause ]
