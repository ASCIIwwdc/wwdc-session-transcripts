WEBVTT

00:00:00.506 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:13.766 A:middle
[ Applause ]

00:00:14.266 --> 00:00:16.026 A:middle
&gt;&gt; Good morning, and welcome to

00:00:16.026 --> 00:00:16.726 A:middle
Getting Started with

00:00:16.726 --> 00:00:17.326 A:middle
Instruments.

00:00:17.936 --> 00:00:19.356 A:middle
My name is Tibet Rooney-Rabdau

00:00:19.356 --> 00:00:20.296 A:middle
and with me today are my

00:00:20.436 --> 00:00:21.116 A:middle
teammates, Ben Mitchell and

00:00:21.116 --> 00:00:21.976 A:middle
Anand Subramanian.

00:00:25.926 --> 00:00:27.376 A:middle
When I think about delivering a

00:00:27.376 --> 00:00:29.266 A:middle
great user experience, I

00:00:29.266 --> 00:00:30.316 A:middle
immediately think about

00:00:30.316 --> 00:00:30.966 A:middle
performance.

00:00:32.106 --> 00:00:33.786 A:middle
Responsiveness builds trust

00:00:34.436 --> 00:00:37.466 A:middle
between the user and your app.

00:00:37.656 --> 00:00:39.056 A:middle
No matter how much I love the UI

00:00:39.056 --> 00:00:40.616 A:middle
of an app, when I encounter a

00:00:40.616 --> 00:00:43.126 A:middle
spinning gear, or a poor battery

00:00:43.126 --> 00:00:45.476 A:middle
life, my overall experience with

00:00:45.476 --> 00:00:46.616 A:middle
the app is diminished.

00:00:47.526 --> 00:00:49.156 A:middle
It is important to remember

00:00:49.156 --> 00:00:50.566 A:middle
these areas when trying to

00:00:50.566 --> 00:00:52.166 A:middle
create a great user experience

00:00:52.166 --> 00:00:54.206 A:middle
in your app.

00:00:54.206 --> 00:00:55.256 A:middle
In today's session, we will

00:00:55.256 --> 00:00:56.886 A:middle
share with you our favorite tool

00:00:56.886 --> 00:00:58.016 A:middle
to measure performance -

00:00:58.746 --> 00:00:59.366 A:middle
Instruments.

00:00:59.996 --> 00:01:01.956 A:middle
This is a great session for

00:00:59.996 --> 00:01:01.956 A:middle
This is a great session for

00:01:01.956 --> 00:01:03.226 A:middle
those who are new to Instruments

00:01:03.226 --> 00:01:04.096 A:middle
and are looking to better

00:01:04.096 --> 00:01:05.406 A:middle
integrate Instruments into their

00:01:05.446 --> 00:01:06.456 A:middle
engineering workflow.

00:01:07.786 --> 00:01:08.916 A:middle
It is important to measure

00:01:08.916 --> 00:01:10.836 A:middle
performance early and often,

00:01:11.046 --> 00:01:12.226 A:middle
because regressions can be

00:01:12.226 --> 00:01:13.166 A:middle
introduced anywhere in the

00:01:13.166 --> 00:01:14.486 A:middle
development cycle and can have a

00:01:14.486 --> 00:01:17.036 A:middle
compounded effect.

00:01:17.036 --> 00:01:18.046 A:middle
In fact, I like to think of

00:01:18.046 --> 00:01:19.616 A:middle
Xcoded Instruments as best

00:01:19.616 --> 00:01:21.396 A:middle
friends, so I keep instruments

00:01:21.396 --> 00:01:23.386 A:middle
in the dock beside Xcode as a

00:01:23.386 --> 00:01:25.076 A:middle
reminder to proof that early and

00:01:25.076 --> 00:01:26.666 A:middle
often throughout the engineering

00:01:27.576 --> 00:01:27.786 A:middle
process.

00:01:28.516 --> 00:01:30.336 A:middle
Today we'll start out with an

00:01:30.336 --> 00:01:32.216 A:middle
orientation of Instruments, its

00:01:32.216 --> 00:01:33.946 A:middle
features, and a tour of its user

00:01:33.946 --> 00:01:34.366 A:middle
interface.

00:01:35.286 --> 00:01:36.176 A:middle
Then we'll show you how to

00:01:36.176 --> 00:01:37.816 A:middle
profile your app to measure the

00:01:37.816 --> 00:01:39.016 A:middle
time taken by various

00:01:39.016 --> 00:01:39.836 A:middle
operations.

00:01:40.546 --> 00:01:41.786 A:middle
We'll figure out what kind of

00:01:41.786 --> 00:01:43.586 A:middle
work and how much work your app

00:01:43.586 --> 00:01:45.586 A:middle
is doing by using a tool called

00:01:45.586 --> 00:01:46.506 A:middle
Time Profiler.

00:01:46.506 --> 00:01:49.126 A:middle
In the last section, we'll talk

00:01:49.126 --> 00:01:50.576 A:middle
about adding Signposts to your

00:01:50.576 --> 00:01:52.546 A:middle
application to gain insight into

00:01:52.546 --> 00:01:53.486 A:middle
your app's behavior.

00:01:54.136 --> 00:01:55.556 A:middle
Let's get started with a

00:01:55.556 --> 00:01:57.146 A:middle
walkthrough of Instruments.

00:01:57.686 --> 00:02:00.596 A:middle
Instruments is a powerful

00:01:57.686 --> 00:02:00.596 A:middle
Instruments is a powerful

00:02:00.596 --> 00:02:02.336 A:middle
performance analysis and testing

00:02:02.336 --> 00:02:04.026 A:middle
tool that's part of Xcode

00:02:04.026 --> 00:02:04.596 A:middle
toolset.

00:02:05.306 --> 00:02:06.616 A:middle
Instruments can help you profile

00:02:06.616 --> 00:02:08.166 A:middle
your apps on all platforms -

00:02:08.566 --> 00:02:10.866 A:middle
iOS, macOS, watchOS, tvOS - in

00:02:11.516 --> 00:02:13.326 A:middle
order to better understand and

00:02:13.326 --> 00:02:14.586 A:middle
optimize their behavior and

00:02:14.586 --> 00:02:15.006 A:middle
performance.

00:02:16.156 --> 00:02:17.356 A:middle
You can use Instruments during

00:02:17.356 --> 00:02:18.806 A:middle
development, testing, and

00:02:18.806 --> 00:02:19.216 A:middle
debugging.

00:02:19.966 --> 00:02:21.176 A:middle
Also, I have good news.

00:02:21.646 --> 00:02:23.366 A:middle
If you have Xcode already, you

00:02:23.416 --> 00:02:24.816 A:middle
already have Instruments.

00:02:25.426 --> 00:02:27.296 A:middle
From Xcode's product menu,

00:02:27.296 --> 00:02:28.096 A:middle
choose Profile.

00:02:28.096 --> 00:02:30.406 A:middle
Although Instruments is embedded

00:02:30.436 --> 00:02:32.306 A:middle
within and is often used with

00:02:32.546 --> 00:02:33.856 A:middle
Xcode, Instruments is a separate

00:02:34.046 --> 00:02:34.756 A:middle
app which may be used

00:02:34.756 --> 00:02:35.956 A:middle
independently as needed.

00:02:36.496 --> 00:02:37.716 A:middle
You are free to choose how you

00:02:37.776 --> 00:02:39.096 A:middle
start your performance analysis

00:02:40.236 --> 00:02:40.586 A:middle
quest.

00:02:40.896 --> 00:02:43.196 A:middle
Now, I'll start using the word

00:02:43.376 --> 00:02:44.646 A:middle
Instruments in two different

00:02:44.646 --> 00:02:45.026 A:middle
ways.

00:02:45.886 --> 00:02:46.906 A:middle
We've already talked about the

00:02:46.936 --> 00:02:48.226 A:middle
Instruments app.

00:02:48.226 --> 00:02:49.706 A:middle
Why is it named that?

00:02:49.986 --> 00:02:51.576 A:middle
Because it provides tools called

00:02:51.576 --> 00:02:52.856 A:middle
Instruments that are used to

00:02:52.856 --> 00:02:54.016 A:middle
profile errors in your

00:02:54.016 --> 00:02:54.726 A:middle
application.

00:02:55.546 --> 00:02:56.826 A:middle
In areas where it might be hard

00:02:56.826 --> 00:02:58.046 A:middle
to understand what I'm referring

00:02:58.046 --> 00:02:59.516 A:middle
to, I'll refer to the

00:02:59.516 --> 00:03:01.156 A:middle
application as the Instruments

00:02:59.516 --> 00:03:01.156 A:middle
application as the Instruments

00:03:01.496 --> 00:03:01.563 A:middle
app.

00:03:02.486 --> 00:03:03.846 A:middle
An Instrument collects time

00:03:03.846 --> 00:03:05.356 A:middle
series trace data from

00:03:05.356 --> 00:03:06.656 A:middle
infrastructure that is inserted

00:03:06.656 --> 00:03:08.686 A:middle
into important parts of apps,

00:03:08.686 --> 00:03:10.206 A:middle
processes, and the operating

00:03:10.206 --> 00:03:10.596 A:middle
system.

00:03:11.466 --> 00:03:12.766 A:middle
We sometimes refer to the data

00:03:12.766 --> 00:03:14.166 A:middle
an Instrument collects as a

00:03:14.166 --> 00:03:14.606 A:middle
treat.

00:03:15.766 --> 00:03:16.936 A:middle
Here we have a couple of my

00:03:17.006 --> 00:03:17.836 A:middle
favorite Instruments.

00:03:18.436 --> 00:03:19.746 A:middle
The Time Profiler Instrument on

00:03:19.746 --> 00:03:21.506 A:middle
the left uses infrastructure

00:03:21.506 --> 00:03:23.156 A:middle
provided by the operating system

00:03:23.156 --> 00:03:24.656 A:middle
to collect call stacks of

00:03:24.656 --> 00:03:25.826 A:middle
relevant threads at a fixed

00:03:25.936 --> 00:03:26.406 A:middle
interval.

00:03:27.276 --> 00:03:28.186 A:middle
The Points of Interest

00:03:28.186 --> 00:03:29.656 A:middle
instrument on the right collects

00:03:29.686 --> 00:03:30.886 A:middle
data from important areas of

00:03:30.886 --> 00:03:32.406 A:middle
your app that you can highlight

00:03:32.766 --> 00:03:34.866 A:middle
using various APIs such as

00:03:34.866 --> 00:03:37.056 A:middle
Signpost API.

00:03:37.376 --> 00:03:38.986 A:middle
When you first open Instruments,

00:03:38.986 --> 00:03:40.196 A:middle
you're presented with a list of

00:03:40.196 --> 00:03:41.896 A:middle
templates similar to the

00:03:41.896 --> 00:03:43.726 A:middle
templates in a pages or numbers

00:03:43.726 --> 00:03:44.246 A:middle
document.

00:03:44.646 --> 00:03:46.086 A:middle
A template provides a

00:03:46.156 --> 00:03:47.526 A:middle
preconfigured collection of

00:03:47.526 --> 00:03:49.186 A:middle
Instruments to help you answer a

00:03:49.186 --> 00:03:51.536 A:middle
performance question, similar to

00:03:51.536 --> 00:03:52.826 A:middle
how the page's birthday card

00:03:52.826 --> 00:03:54.166 A:middle
template provides a document

00:03:54.166 --> 00:03:55.156 A:middle
structure to help you create a

00:03:55.156 --> 00:03:55.786 A:middle
birthday card.

00:03:56.106 --> 00:03:57.846 A:middle
There are too many templates to

00:03:57.846 --> 00:03:59.336 A:middle
cover in this short session, so

00:03:59.336 --> 00:04:00.446 A:middle
we will focus on the Time

00:03:59.336 --> 00:04:00.446 A:middle
we will focus on the Time

00:04:00.446 --> 00:04:01.986 A:middle
Profiler template which contains

00:04:01.986 --> 00:04:03.066 A:middle
the two Instruments I just

00:04:03.066 --> 00:04:04.666 A:middle
mentioned - Time Profiler and

00:04:04.666 --> 00:04:05.996 A:middle
Points of Interest, as well as

00:04:05.996 --> 00:04:06.216 A:middle
others.

00:04:07.296 --> 00:04:08.546 A:middle
These Instruments are great

00:04:08.546 --> 00:04:09.466 A:middle
tools for understanding

00:04:09.466 --> 00:04:11.626 A:middle
responsiveness and your app's

00:04:11.626 --> 00:04:12.476 A:middle
utilization.

00:04:12.476 --> 00:04:15.106 A:middle
When you first open the Time

00:04:15.106 --> 00:04:16.586 A:middle
Profiler template, you're

00:04:16.586 --> 00:04:17.916 A:middle
presented with this blank

00:04:17.916 --> 00:04:19.586 A:middle
document ready for Profiling.

00:04:19.646 --> 00:04:22.136 A:middle
So, the top right, you can add

00:04:22.136 --> 00:04:23.336 A:middle
additional Instruments to this

00:04:23.336 --> 00:04:24.846 A:middle
document by clicking the Add

00:04:25.016 --> 00:04:26.106 A:middle
Instruments button.

00:04:27.186 --> 00:04:28.286 A:middle
Then, the Instrument's app shows

00:04:28.286 --> 00:04:29.236 A:middle
the Instrument's library

00:04:29.236 --> 00:04:30.446 A:middle
palette, which contains a

00:04:30.446 --> 00:04:31.826 A:middle
complete list of available

00:04:31.826 --> 00:04:32.436 A:middle
Instruments.

00:04:33.706 --> 00:04:35.216 A:middle
From here, you can find new

00:04:35.216 --> 00:04:36.506 A:middle
Instruments and drag them into

00:04:36.506 --> 00:04:37.706 A:middle
the document to gather more

00:04:37.706 --> 00:04:37.976 A:middle
data.

00:04:39.356 --> 00:04:40.916 A:middle
So, the top left, we have the

00:04:40.916 --> 00:04:42.036 A:middle
Profiling Controls.

00:04:42.496 --> 00:04:43.816 A:middle
This allows you to record,

00:04:43.816 --> 00:04:45.746 A:middle
pause, and stop data collection.

00:04:46.516 --> 00:04:48.006 A:middle
Beside the Profiling Controls is

00:04:48.006 --> 00:04:48.746 A:middle
the Target Area.

00:04:49.416 --> 00:04:50.506 A:middle
The Target Device List on the

00:04:50.506 --> 00:04:52.166 A:middle
left allows you to select the

00:04:52.166 --> 00:04:53.196 A:middle
device on which you wish to

00:04:53.196 --> 00:04:53.716 A:middle
profile.

00:04:54.446 --> 00:04:56.216 A:middle
This is similar to the Xcode

00:04:56.216 --> 00:04:57.426 A:middle
Target Area where you choose the

00:04:57.426 --> 00:04:59.326 A:middle
device and the process to

00:04:59.326 --> 00:05:00.226 A:middle
Profile on the device.

00:04:59.326 --> 00:05:00.226 A:middle
Profile on the device.

00:05:01.316 --> 00:05:02.666 A:middle
Typically you will choose your

00:05:02.666 --> 00:05:04.046 A:middle
app's process as your Target

00:05:04.046 --> 00:05:05.846 A:middle
Process, but for instance, if

00:05:05.846 --> 00:05:06.836 A:middle
you're Profiling a shared

00:05:06.836 --> 00:05:08.236 A:middle
extension, you would choose your

00:05:08.236 --> 00:05:09.846 A:middle
extension Process, which will be

00:05:09.846 --> 00:05:12.146 A:middle
separate from your app.

00:05:12.406 --> 00:05:13.786 A:middle
When I start recording in the

00:05:13.786 --> 00:05:15.306 A:middle
Time Profiler template, the

00:05:15.306 --> 00:05:16.226 A:middle
document will start being

00:05:16.226 --> 00:05:18.326 A:middle
populated with trace data.

00:05:18.326 --> 00:05:20.036 A:middle
As an aside, recording with

00:05:20.036 --> 00:05:21.136 A:middle
Instruments uses System

00:05:21.136 --> 00:05:22.926 A:middle
Resources, just like your app

00:05:22.926 --> 00:05:23.086 A:middle
does.

00:05:23.826 --> 00:05:25.386 A:middle
To minimize its impact on your

00:05:25.696 --> 00:05:26.956 A:middle
app, Instruments also offers a

00:05:26.956 --> 00:05:28.346 A:middle
feature called Last Few Seconds

00:05:28.406 --> 00:05:30.286 A:middle
Mode, sometimes called Windowed

00:05:30.286 --> 00:05:30.586 A:middle
Mode.

00:05:31.836 --> 00:05:33.436 A:middle
Windowed Mode keeps Instruments

00:05:33.436 --> 00:05:34.886 A:middle
from analyzing or displaying

00:05:34.886 --> 00:05:36.566 A:middle
results until recording ends and

00:05:36.916 --> 00:05:38.326 A:middle
ignores events prior to the last

00:05:38.366 --> 00:05:39.466 A:middle
few seconds of recording.

00:05:40.256 --> 00:05:41.176 A:middle
This is helpful when you just

00:05:41.176 --> 00:05:42.416 A:middle
want to start recording and

00:05:42.466 --> 00:05:43.376 A:middle
select stop when you see a

00:05:43.376 --> 00:05:43.966 A:middle
problem.

00:05:44.676 --> 00:05:45.956 A:middle
Some templates use this mode by

00:05:45.956 --> 00:05:47.286 A:middle
default because they gather a

00:05:47.286 --> 00:05:49.296 A:middle
lot of data over a short period

00:05:49.296 --> 00:05:49.866 A:middle
of time.

00:05:51.426 --> 00:05:52.406 A:middle
Now that I've just finished

00:05:52.406 --> 00:05:53.576 A:middle
recording in the Time Profiler

00:05:53.676 --> 00:05:55.336 A:middle
template, a lot of trace data

00:05:55.336 --> 00:05:56.686 A:middle
has been populated into various

00:05:56.686 --> 00:05:57.416 A:middle
parts of this window.

00:05:58.096 --> 00:05:59.656 A:middle
This may look like a lot, so

00:05:59.656 --> 00:06:00.736 A:middle
let's go on a side quest to

00:05:59.656 --> 00:06:00.736 A:middle
let's go on a side quest to

00:06:00.736 --> 00:06:01.866 A:middle
learn what each part does.

00:06:03.226 --> 00:06:04.786 A:middle
The top portion of the window

00:06:04.786 --> 00:06:06.266 A:middle
contains the Track Viewer.

00:06:06.836 --> 00:06:08.516 A:middle
A Track shows time series trace

00:06:08.516 --> 00:06:10.166 A:middle
data corresponding to one source

00:06:10.166 --> 00:06:12.266 A:middle
of events, such as the process,

00:06:12.266 --> 00:06:13.496 A:middle
thread, or CPU core.

00:06:14.126 --> 00:06:15.696 A:middle
A single Instrument may

00:06:15.696 --> 00:06:16.716 A:middle
contribute trace data to

00:06:16.816 --> 00:06:17.896 A:middle
multiple Tracks.

00:06:18.396 --> 00:06:20.246 A:middle
In this example, three Tracks

00:06:20.246 --> 00:06:20.806 A:middle
are visible.

00:06:21.476 --> 00:06:22.846 A:middle
The top Track is a summary of

00:06:22.846 --> 00:06:23.846 A:middle
our application's CPU

00:06:23.846 --> 00:06:25.916 A:middle
utilization provided by the Time

00:06:25.916 --> 00:06:26.796 A:middle
Profiler Instrument.

00:06:27.626 --> 00:06:29.166 A:middle
The next Track shows data

00:06:29.166 --> 00:06:30.376 A:middle
collected from the Points of

00:06:30.456 --> 00:06:31.996 A:middle
Interest Instrument, which Anand

00:06:31.996 --> 00:06:32.956 A:middle
will show you later.

00:06:33.266 --> 00:06:34.406 A:middle
Additional Tracks follow

00:06:34.406 --> 00:06:35.726 A:middle
breaking things down in finer

00:06:35.726 --> 00:06:36.006 A:middle
detail.

00:06:36.726 --> 00:06:39.236 A:middle
A given Instrument's trace may

00:06:39.236 --> 00:06:40.466 A:middle
have dozens of Tracks.

00:06:41.326 --> 00:06:42.876 A:middle
You can use the Track Filter to

00:06:42.876 --> 00:06:44.296 A:middle
just show the Instruments or

00:06:44.296 --> 00:06:46.236 A:middle
break it up by thread, or by CPU

00:06:46.286 --> 00:06:46.576 A:middle
core.

00:06:47.356 --> 00:06:48.636 A:middle
You can also get more specific

00:06:48.636 --> 00:06:51.646 A:middle
and search for Tracks by name.

00:06:51.646 --> 00:06:52.886 A:middle
Lower down in the window, the

00:06:52.886 --> 00:06:54.186 A:middle
detail view allows you to

00:06:54.286 --> 00:06:55.736 A:middle
explore the trace data for the

00:06:55.736 --> 00:06:56.376 A:middle
selected Track.

00:06:56.896 --> 00:06:58.546 A:middle
In this example, with the Time

00:06:58.546 --> 00:07:00.436 A:middle
Profiler Track selected, we can

00:06:58.546 --> 00:07:00.436 A:middle
Profiler Track selected, we can

00:07:00.436 --> 00:07:01.826 A:middle
explore the functions called on

00:07:01.826 --> 00:07:02.986 A:middle
each thread during the trace.

00:07:03.726 --> 00:07:06.026 A:middle
To the right side of the Detail

00:07:06.026 --> 00:07:07.526 A:middle
View, you'll find the Extended

00:07:07.526 --> 00:07:08.456 A:middle
Detail View within the

00:07:08.456 --> 00:07:09.016 A:middle
Inspector.

00:07:09.836 --> 00:07:11.506 A:middle
This is a view that may provide

00:07:11.506 --> 00:07:12.586 A:middle
richer information from the

00:07:12.586 --> 00:07:14.186 A:middle
Instruments in use, depending on

00:07:14.186 --> 00:07:15.716 A:middle
current context and selection.

00:07:16.416 --> 00:07:17.886 A:middle
In this example, because I'm

00:07:17.886 --> 00:07:19.386 A:middle
using Time Profiler, I have a

00:07:19.386 --> 00:07:20.496 A:middle
summary showing the heaviest

00:07:20.496 --> 00:07:22.266 A:middle
call stack.

00:07:22.746 --> 00:07:24.046 A:middle
Another way to see what is

00:07:24.046 --> 00:07:25.806 A:middle
happening at a moment in time is

00:07:25.806 --> 00:07:26.886 A:middle
through the Inspection Head.

00:07:27.686 --> 00:07:28.586 A:middle
The Inspection Head is a

00:07:28.586 --> 00:07:30.416 A:middle
selector which can be placed at

00:07:30.556 --> 00:07:32.616 A:middle
a specific time in the trace in

00:07:32.616 --> 00:07:33.646 A:middle
order to select all traced

00:07:33.646 --> 00:07:35.466 A:middle
events or intervals occurring at

00:07:35.466 --> 00:07:36.916 A:middle
that time.

00:07:37.256 --> 00:07:38.486 A:middle
Additional details about the

00:07:38.486 --> 00:07:39.846 A:middle
selected events are displayed in

00:07:39.846 --> 00:07:40.686 A:middle
Hovering Labels.

00:07:41.116 --> 00:07:42.976 A:middle
The Detail and Extended Detail

00:07:42.976 --> 00:07:44.856 A:middle
views are updated to focus on

00:07:44.856 --> 00:07:46.156 A:middle
information about the selected

00:07:46.156 --> 00:07:47.406 A:middle
events where applicable.

00:07:48.566 --> 00:07:49.976 A:middle
We've finished our side quest

00:07:49.976 --> 00:07:51.296 A:middle
and now better understand the

00:07:51.296 --> 00:07:53.286 A:middle
Instruments' User Interface.

00:07:53.336 --> 00:07:54.866 A:middle
Everything shown in the window

00:07:55.116 --> 00:07:56.566 A:middle
is part of a trace document.

00:07:57.286 --> 00:07:59.046 A:middle
The trace document contains any

00:07:59.046 --> 00:08:00.196 A:middle
Instruments configured for

00:07:59.046 --> 00:08:00.196 A:middle
Instruments configured for

00:08:00.196 --> 00:08:01.786 A:middle
Profiling along with collected

00:08:01.786 --> 00:08:03.696 A:middle
data and views you're using to

00:08:03.696 --> 00:08:04.656 A:middle
analyze the results.

00:08:05.616 --> 00:08:07.746 A:middle
The Instruments app can save and

00:08:07.746 --> 00:08:08.976 A:middle
reopen these trace documents,

00:08:09.226 --> 00:08:10.536 A:middle
allowing you to explore old

00:08:10.536 --> 00:08:12.216 A:middle
results or share them with a

00:08:12.216 --> 00:08:13.446 A:middle
teammate for investigation.

00:08:13.446 --> 00:08:15.926 A:middle
With that, I would like to

00:08:15.926 --> 00:08:16.896 A:middle
welcome my teammate, Ben

00:08:16.896 --> 00:08:18.056 A:middle
Mitchell, to the stage, so he

00:08:18.056 --> 00:08:19.096 A:middle
can show some of these things in

00:08:19.096 --> 00:08:19.616 A:middle
action.

00:08:19.966 --> 00:08:20.506 A:middle
Thank you!

00:08:21.516 --> 00:08:25.416 A:middle
[ Applause ]

00:08:25.916 --> 00:08:26.446 A:middle
&gt;&gt; Thanks, Tibet.

00:08:26.946 --> 00:08:27.536 A:middle
Hello, World.

00:08:27.536 --> 00:08:29.036 A:middle
My name is Ben Mitchell and as

00:08:29.036 --> 00:08:29.926 A:middle
Tibet mentioned, I'm going to

00:08:29.926 --> 00:08:31.006 A:middle
show you how to Profile your

00:08:31.006 --> 00:08:32.405 A:middle
application using Instruments.

00:08:33.015 --> 00:08:33.686 A:middle
Let's get started.

00:08:37.275 --> 00:08:38.506 A:middle
For those of you who saw some

00:08:38.506 --> 00:08:39.666 A:middle
sessions at last year's

00:08:39.666 --> 00:08:42.176 A:middle
conference, WWDC2018, you might

00:08:42.176 --> 00:08:43.496 A:middle
recognize the Solar System app.

00:08:44.145 --> 00:08:45.286 A:middle
We shipped it about a year ago,

00:08:45.286 --> 00:08:46.036 A:middle
and we've gotten some good

00:08:46.036 --> 00:08:47.096 A:middle
feedback from our customers.

00:08:47.636 --> 00:08:49.356 A:middle
But, also some less-than-awesome

00:08:49.356 --> 00:08:50.676 A:middle
feedback; in particular, in

00:08:50.676 --> 00:08:51.606 A:middle
areas of performance.

00:08:51.916 --> 00:08:53.676 A:middle
Our customers have reported some

00:08:53.676 --> 00:08:54.716 A:middle
responsiveness issues,

00:08:55.436 --> 00:08:57.086 A:middle
particularly on older devices.

00:08:57.406 --> 00:08:59.036 A:middle
I was able to reproduce one of

00:08:59.036 --> 00:09:00.376 A:middle
these before the session and I'd

00:08:59.036 --> 00:09:00.376 A:middle
these before the session and I'd

00:09:00.376 --> 00:09:01.606 A:middle
like to demo it to you know with

00:09:01.606 --> 00:09:02.716 A:middle
Instruments attached so we can

00:09:02.756 --> 00:09:03.466 A:middle
see if we can fix it.

00:09:04.096 --> 00:09:04.846 A:middle
Let's dive right in.

00:09:06.266 --> 00:09:07.166 A:middle
With the application already

00:09:07.166 --> 00:09:08.126 A:middle
running, I'll just open

00:09:08.126 --> 00:09:08.676 A:middle
Instruments.

00:09:10.616 --> 00:09:11.756 A:middle
The Instruments Template

00:09:11.756 --> 00:09:13.056 A:middle
Selector already has Time

00:09:13.056 --> 00:09:14.606 A:middle
Profiler chosen, because I've

00:09:14.606 --> 00:09:15.406 A:middle
used it previously.

00:09:15.776 --> 00:09:17.006 A:middle
Time Profiler is a great tool

00:09:17.076 --> 00:09:18.336 A:middle
for looking at issues that occur

00:09:18.336 --> 00:09:19.666 A:middle
over a particular window of

00:09:20.026 --> 00:09:20.166 A:middle
time.

00:09:20.596 --> 00:09:22.476 A:middle
I'll select Time Profiler and

00:09:22.476 --> 00:09:23.916 A:middle
using the Choose button, will

00:09:23.916 --> 00:09:24.876 A:middle
open a new trace document.

00:09:25.406 --> 00:09:27.366 A:middle
Because I didn't launch this

00:09:27.366 --> 00:09:28.326 A:middle
from Xcode, the first thing I

00:09:28.326 --> 00:09:29.466 A:middle
need to do is select which

00:09:29.506 --> 00:09:30.826 A:middle
process I'm going to trace.

00:09:31.656 --> 00:09:32.906 A:middle
Using the target selection area,

00:09:33.436 --> 00:09:36.046 A:middle
I'll click All Processes and

00:09:36.046 --> 00:09:37.146 A:middle
select the Solar System Mac

00:09:37.146 --> 00:09:38.046 A:middle
application that's already

00:09:38.046 --> 00:09:38.286 A:middle
running.

00:09:39.076 --> 00:09:40.466 A:middle
To the right, you can see a

00:09:40.466 --> 00:09:40.796 A:middle
number.

00:09:40.796 --> 00:09:42.136 A:middle
That's the process identifier

00:09:42.136 --> 00:09:43.656 A:middle
and it appears in Activity

00:09:43.656 --> 00:09:44.006 A:middle
Monitoring.

00:09:44.176 --> 00:09:47.426 A:middle
We've selected the application,

00:09:47.426 --> 00:09:49.356 A:middle
and now we'll click Record in

00:09:49.356 --> 00:09:50.246 A:middle
the top left of the window.

00:09:52.336 --> 00:09:52.726 A:middle
There we go.

00:09:52.726 --> 00:09:53.586 A:middle
Instruments is recording.

00:09:54.606 --> 00:09:55.646 A:middle
I'll switch over to the app.

00:09:56.796 --> 00:09:58.566 A:middle
The Solar System app supports a

00:09:58.566 --> 00:10:00.266 A:middle
number of gestures on the Track

00:09:58.566 --> 00:10:00.266 A:middle
number of gestures on the Track

00:10:00.266 --> 00:10:00.516 A:middle
Pad.

00:10:00.606 --> 00:10:01.986 A:middle
It supports clicks and drags,

00:10:02.346 --> 00:10:04.076 A:middle
but also pans, pinch to zoom,

00:10:04.146 --> 00:10:04.676 A:middle
and so on.

00:10:04.676 --> 00:10:06.696 A:middle
And our customers have reported

00:10:06.696 --> 00:10:07.406 A:middle
that when they're performing

00:10:07.406 --> 00:10:09.156 A:middle
these operations and they press

00:10:09.156 --> 00:10:11.086 A:middle
command + R to reload data, the

00:10:11.286 --> 00:10:12.666 A:middle
user interface freezes and the

00:10:12.666 --> 00:10:13.946 A:middle
dreaded Spinning Wait Cursor

00:10:13.946 --> 00:10:14.436 A:middle
appears.

00:10:15.036 --> 00:10:15.936 A:middle
You may know it by some other

00:10:15.936 --> 00:10:16.316 A:middle
names.

00:10:16.646 --> 00:10:17.616 A:middle
That's not awesome.

00:10:18.126 --> 00:10:20.576 A:middle
We were able to reproduce it, so

00:10:20.576 --> 00:10:21.666 A:middle
let's switch back to Instruments

00:10:21.726 --> 00:10:22.566 A:middle
and see what we can find.

00:10:23.416 --> 00:10:24.686 A:middle
I'll quit the application and

00:10:24.686 --> 00:10:26.026 A:middle
Instruments automatically stops

00:10:26.026 --> 00:10:26.426 A:middle
recording.

00:10:26.656 --> 00:10:29.666 A:middle
So, we can see the populated

00:10:29.666 --> 00:10:30.416 A:middle
trace data here.

00:10:30.416 --> 00:10:31.576 A:middle
And the first thing I'm going to

00:10:31.576 --> 00:10:33.046 A:middle
do is make it a little larger so

00:10:33.046 --> 00:10:33.946 A:middle
we can see it in more detail.

00:10:35.236 --> 00:10:36.296 A:middle
With the mouse cursor over the

00:10:36.296 --> 00:10:37.816 A:middle
track area, a pinch to zoom

00:10:37.816 --> 00:10:39.736 A:middle
gesture makes it larger and

00:10:39.736 --> 00:10:40.926 A:middle
allows us to see things closer.

00:10:42.376 --> 00:10:43.786 A:middle
On the left-hand side in the

00:10:43.786 --> 00:10:45.386 A:middle
track area, we can see several

00:10:45.386 --> 00:10:47.106 A:middle
instruments have provided tracks

00:10:47.106 --> 00:10:47.546 A:middle
for us.

00:10:47.956 --> 00:10:49.046 A:middle
Time Profiler is showing us a

00:10:49.046 --> 00:10:50.626 A:middle
summary of the CPU utilization.

00:10:50.986 --> 00:10:51.716 A:middle
The Points of Interest

00:10:51.716 --> 00:10:53.076 A:middle
Instrument is currently empty.

00:10:53.246 --> 00:10:54.256 A:middle
Anand will show you that later.

00:10:54.366 --> 00:10:55.566 A:middle
And there are a number of

00:10:55.566 --> 00:10:56.796 A:middle
others, including thermal state,

00:10:56.796 --> 00:10:58.436 A:middle
and then breakdowns further on

00:10:58.436 --> 00:10:59.066 A:middle
down the scroll view.

00:11:00.426 --> 00:11:01.986 A:middle
If we move our mouse cursor over

00:11:01.986 --> 00:11:04.146 A:middle
the CPU Usage summary track, we

00:11:04.146 --> 00:11:05.566 A:middle
can see a hovering label that

00:11:05.566 --> 00:11:06.806 A:middle
shows what the utilization level

00:11:06.806 --> 00:11:07.126 A:middle
is.

00:11:08.196 --> 00:11:09.716 A:middle
And when I hit this large area

00:11:09.746 --> 00:11:11.836 A:middle
here, the utilization is above

00:11:11.836 --> 00:11:12.526 A:middle
100%.

00:11:13.206 --> 00:11:13.956 A:middle
So, this appears to be

00:11:13.956 --> 00:11:15.956 A:middle
suspicious and I suspect this is

00:11:15.956 --> 00:11:17.016 A:middle
around the time of that reload

00:11:17.016 --> 00:11:17.516 A:middle
operation.

00:11:18.076 --> 00:11:19.946 A:middle
I'd like to compare this to some

00:11:19.946 --> 00:11:20.806 A:middle
of the other tracks.

00:11:21.026 --> 00:11:21.976 A:middle
So, we're going to use a feature

00:11:21.976 --> 00:11:22.786 A:middle
called Track Pinning.

00:11:23.336 --> 00:11:25.956 A:middle
In the left-hand side of the

00:11:25.956 --> 00:11:27.436 A:middle
window, when I move my mouse

00:11:27.436 --> 00:11:29.516 A:middle
over one of the track entries, a

00:11:29.516 --> 00:11:30.666 A:middle
plus button appears.

00:11:31.956 --> 00:11:34.586 A:middle
Clicking it, pins that track to

00:11:34.586 --> 00:11:35.866 A:middle
the bottom of the track area.

00:11:36.646 --> 00:11:37.956 A:middle
And now we can scroll through

00:11:37.956 --> 00:11:39.536 A:middle
the other tracks and see the one

00:11:39.536 --> 00:11:40.696 A:middle
that was of interest side by

00:11:40.696 --> 00:11:41.016 A:middle
side.

00:11:41.496 --> 00:11:42.846 A:middle
You can pin multiple tracks.

00:11:44.246 --> 00:11:45.706 A:middle
As we scroll down, we can see

00:11:45.706 --> 00:11:46.956 A:middle
things broken out by each CPU

00:11:46.956 --> 00:11:47.746 A:middle
core on the system.

00:11:48.236 --> 00:11:50.716 A:middle
And now we have a track entry

00:11:51.046 --> 00:11:52.566 A:middle
for the process itself, Solar

00:11:52.566 --> 00:11:54.006 A:middle
System Mac.

00:11:54.006 --> 00:11:55.236 A:middle
In addition to a CPU usage

00:11:55.236 --> 00:11:56.576 A:middle
summary, this also shows us app

00:11:56.576 --> 00:11:57.486 A:middle
lifecycle events.

00:11:57.816 --> 00:11:58.616 A:middle
We can see here where the

00:11:58.616 --> 00:11:59.486 A:middle
application came into the

00:11:59.486 --> 00:12:00.766 A:middle
foreground when I clicked it on

00:11:59.486 --> 00:12:00.766 A:middle
foreground when I clicked it on

00:12:00.766 --> 00:12:01.646 A:middle
the dock.

00:12:02.516 --> 00:12:04.266 A:middle
There's also a suspicious red

00:12:04.266 --> 00:12:06.076 A:middle
area over here during the CPU

00:12:06.076 --> 00:12:06.926 A:middle
usage spike.

00:12:07.836 --> 00:12:09.026 A:middle
Moving the mouse over it, I can

00:12:09.026 --> 00:12:10.416 A:middle
see that the label is spinning.

00:12:11.756 --> 00:12:12.876 A:middle
Spinning is how Instruments

00:12:12.876 --> 00:12:14.506 A:middle
refers to your main thread being

00:12:14.506 --> 00:12:14.946 A:middle
blocked.

00:12:15.246 --> 00:12:16.266 A:middle
And on the Mac, that's what

00:12:16.266 --> 00:12:17.406 A:middle
causes the Spinning Wait Cursor.

00:12:17.726 --> 00:12:19.496 A:middle
The main thread has just a few

00:12:19.496 --> 00:12:20.626 A:middle
very specific uses.

00:12:20.886 --> 00:12:21.806 A:middle
It should be used for handling

00:12:21.806 --> 00:12:23.576 A:middle
user input or for updating the

00:12:23.576 --> 00:12:24.316 A:middle
user interface.

00:12:24.766 --> 00:12:25.736 A:middle
Clearly, something else is going

00:12:25.736 --> 00:12:25.946 A:middle
on here.

00:12:29.186 --> 00:12:30.626 A:middle
I'd like to look at the main

00:12:30.626 --> 00:12:30.896 A:middle
thread.

00:12:32.286 --> 00:12:33.806 A:middle
So, I will expand the Solar

00:12:33.806 --> 00:12:35.026 A:middle
System Mac process.

00:12:35.866 --> 00:12:37.036 A:middle
And now there are a number of

00:12:37.036 --> 00:12:38.846 A:middle
other tracks corresponding to

00:12:38.846 --> 00:12:40.346 A:middle
each thread in the application.

00:12:40.816 --> 00:12:42.776 A:middle
Scrolling all the way down,

00:12:43.406 --> 00:12:44.196 A:middle
here's the main thread.

00:12:44.196 --> 00:12:46.456 A:middle
And the main thread is showing a

00:12:46.456 --> 00:12:46.856 A:middle
spike.

00:12:47.466 --> 00:12:49.576 A:middle
So, this looks like the event

00:12:49.576 --> 00:12:51.746 A:middle
that I want to take a look at.

00:12:51.746 --> 00:12:52.886 A:middle
The next feature of Instruments

00:12:52.886 --> 00:12:54.296 A:middle
that we're going to use allows

00:12:54.296 --> 00:12:56.166 A:middle
us to filter events by clicking

00:12:56.166 --> 00:12:57.616 A:middle
and dragging in the track area.

00:12:58.726 --> 00:12:59.576 A:middle
Now, the Detail view at the

00:12:59.576 --> 00:13:00.826 A:middle
bottom is only showing events

00:12:59.576 --> 00:13:00.826 A:middle
bottom is only showing events

00:13:00.866 --> 00:13:01.796 A:middle
from the selected window of

00:13:01.796 --> 00:13:02.016 A:middle
time.

00:13:02.896 --> 00:13:03.936 A:middle
Let's look in the Detail view

00:13:04.066 --> 00:13:05.286 A:middle
and learn more.

00:13:05.856 --> 00:13:08.566 A:middle
The Detail view shows us a call

00:13:08.566 --> 00:13:09.186 A:middle
graph.

00:13:09.186 --> 00:13:10.266 A:middle
These are all the functions that

00:13:10.266 --> 00:13:11.926 A:middle
were invoked during the time of

00:13:11.926 --> 00:13:12.476 A:middle
our profile.

00:13:12.636 --> 00:13:13.586 A:middle
Or, in this case, during the

00:13:13.586 --> 00:13:14.806 A:middle
time we have selected in the

00:13:14.806 --> 00:13:15.106 A:middle
filter.

00:13:15.796 --> 00:13:17.766 A:middle
It's important to understand

00:13:17.766 --> 00:13:18.316 A:middle
what this is doing.

00:13:18.316 --> 00:13:21.326 A:middle
We're not actually tracking

00:13:21.326 --> 00:13:22.776 A:middle
every function entry and exit.

00:13:23.366 --> 00:13:24.946 A:middle
Instead, Time Profiler takes a

00:13:24.946 --> 00:13:26.526 A:middle
snapshot many times per second

00:13:26.706 --> 00:13:28.336 A:middle
and notes all of the functions

00:13:28.336 --> 00:13:29.156 A:middle
that are running in your

00:13:29.156 --> 00:13:29.726 A:middle
process.

00:13:30.886 --> 00:13:32.536 A:middle
So, on the left-hand side, we

00:13:32.536 --> 00:13:33.216 A:middle
have a wait column.

00:13:34.476 --> 00:13:36.716 A:middle
Solar System Mac appears 100% of

00:13:36.716 --> 00:13:37.126 A:middle
the time.

00:13:37.406 --> 00:13:38.726 A:middle
This means that in every sample,

00:13:38.726 --> 00:13:40.016 A:middle
Solar System Mac was present.

00:13:40.356 --> 00:13:41.276 A:middle
That's good, because that's the

00:13:41.276 --> 00:13:41.966 A:middle
application that we're

00:13:41.966 --> 00:13:42.406 A:middle
profiling.

00:13:43.266 --> 00:13:44.336 A:middle
As we move on down, the main

00:13:44.336 --> 00:13:47.006 A:middle
thread is present in 96.7% and

00:13:47.006 --> 00:13:47.376 A:middle
so on.

00:13:47.826 --> 00:13:49.126 A:middle
And we can begin disclosing

00:13:49.126 --> 00:13:50.476 A:middle
these threads to the deeper end

00:13:50.476 --> 00:13:51.176 A:middle
of the functions that were

00:13:51.176 --> 00:13:51.436 A:middle
called.

00:13:52.376 --> 00:13:53.356 A:middle
But there are a lot of them here

00:13:53.596 --> 00:13:54.966 A:middle
and I'd have to click a number

00:13:54.966 --> 00:13:55.816 A:middle
of times to find something

00:13:55.816 --> 00:13:56.186 A:middle
interesting.

00:13:56.726 --> 00:13:58.006 A:middle
So, Instruments provides another

00:13:58.006 --> 00:13:58.736 A:middle
useful trick.

00:13:58.736 --> 00:14:00.606 A:middle
If you hold down the Option key

00:13:58.736 --> 00:14:00.606 A:middle
If you hold down the Option key

00:14:00.846 --> 00:14:01.646 A:middle
and click the Disclosure

00:14:01.646 --> 00:14:03.096 A:middle
Triangle, Instruments

00:14:03.096 --> 00:14:04.696 A:middle
automatically expands the track

00:14:04.696 --> 00:14:06.166 A:middle
list until there is a control

00:14:06.236 --> 00:14:07.966 A:middle
flow branch, which might be an

00:14:07.966 --> 00:14:08.506 A:middle
interesting event.

00:14:08.506 --> 00:14:10.956 A:middle
As you can see, there's a lot

00:14:10.956 --> 00:14:12.696 A:middle
here, and it can be hard to dig

00:14:12.696 --> 00:14:14.056 A:middle
in and find exactly what your

00:14:14.056 --> 00:14:14.706 A:middle
problem is.

00:14:15.016 --> 00:14:16.866 A:middle
So, Instruments also provides

00:14:17.216 --> 00:14:18.676 A:middle
the heaviest stack trace in the

00:14:18.676 --> 00:14:20.036 A:middle
Extended Detail View for Time

00:14:20.036 --> 00:14:20.466 A:middle
Profiler.

00:14:21.746 --> 00:14:23.266 A:middle
The heaviest stack trace is the

00:14:23.676 --> 00:14:24.496 A:middle
set of functions that were

00:14:24.496 --> 00:14:26.276 A:middle
called most often during the

00:14:26.446 --> 00:14:26.836 A:middle
Profile.

00:14:27.706 --> 00:14:28.756 A:middle
So, up at the top, we can see

00:14:28.756 --> 00:14:30.396 A:middle
Solar System Mac appears, and

00:14:30.396 --> 00:14:31.536 A:middle
some of these frames are

00:14:31.536 --> 00:14:32.506 A:middle
highlighted in white.

00:14:33.466 --> 00:14:34.426 A:middle
These are the frames that are

00:14:34.476 --> 00:14:35.606 A:middle
from your own process.

00:14:37.636 --> 00:14:38.616 A:middle
Frames that come from System

00:14:38.616 --> 00:14:40.086 A:middle
Frameworks or Libraries are

00:14:40.086 --> 00:14:40.656 A:middle
shown in grey.

00:14:41.686 --> 00:14:43.186 A:middle
So, the main thread executes the

00:14:43.186 --> 00:14:44.506 A:middle
main function, and then there's

00:14:44.506 --> 00:14:45.816 A:middle
a block of System Framework

00:14:45.816 --> 00:14:46.706 A:middle
provided functions.

00:14:47.276 --> 00:14:50.356 A:middle
It's only further down that we

00:14:50.356 --> 00:14:52.166 A:middle
find another area of highlighted

00:14:52.166 --> 00:14:52.636 A:middle
functions.

00:14:53.656 --> 00:14:54.856 A:middle
The first one here is labeled as

00:14:54.856 --> 00:14:55.416 A:middle
a thunk.

00:14:56.526 --> 00:14:57.206 A:middle
What is a thunk?

00:14:58.136 --> 00:14:59.256 A:middle
This is a piece of helper code

00:14:59.256 --> 00:15:00.396 A:middle
generated by the compiler.

00:14:59.256 --> 00:15:00.396 A:middle
generated by the compiler.

00:15:00.706 --> 00:15:01.876 A:middle
It doesn't correspond directly

00:15:01.876 --> 00:15:02.726 A:middle
to any source code in your

00:15:02.726 --> 00:15:03.206 A:middle
application.

00:15:03.656 --> 00:15:05.266 A:middle
So in this case we'll ignore the

00:15:05.266 --> 00:15:05.536 A:middle
thunk.

00:15:06.036 --> 00:15:07.666 A:middle
What we want to focus in on is

00:15:07.666 --> 00:15:09.466 A:middle
this one, the first closure in a

00:15:09.466 --> 00:15:10.526 A:middle
method in the network request

00:15:10.526 --> 00:15:10.906 A:middle
scheduler.

00:15:12.346 --> 00:15:13.996 A:middle
If I click on this line, it is

00:15:13.996 --> 00:15:15.046 A:middle
selected in the Detail view.

00:15:15.966 --> 00:15:17.576 A:middle
Double clicking it displays the

00:15:17.576 --> 00:15:18.486 A:middle
source code right in line.

00:15:19.836 --> 00:15:20.586 A:middle
So, I can see that we have a

00:15:20.586 --> 00:15:21.826 A:middle
method called Schedule Parsing

00:15:21.826 --> 00:15:22.226 A:middle
Task.

00:15:22.766 --> 00:15:24.056 A:middle
And it's doing some work on the

00:15:24.056 --> 00:15:26.506 A:middle
main dispatch queue including

00:15:26.506 --> 00:15:27.976 A:middle
doing some data parsing, and

00:15:27.976 --> 00:15:29.506 A:middle
that seems problematic.

00:15:29.506 --> 00:15:30.576 A:middle
As mentioned earlier, the main

00:15:30.576 --> 00:15:31.516 A:middle
thread should really only be

00:15:31.516 --> 00:15:33.126 A:middle
used for user input and for user

00:15:33.126 --> 00:15:33.936 A:middle
interface updates.

00:15:34.366 --> 00:15:35.476 A:middle
So, I'd like to fix this.

00:15:36.006 --> 00:15:37.586 A:middle
In the top right of the detail

00:15:37.586 --> 00:15:39.136 A:middle
view, there's an Open File in

00:15:39.136 --> 00:15:39.636 A:middle
Xcode button.

00:15:40.286 --> 00:15:40.926 A:middle
I'll click it now.

00:15:45.576 --> 00:15:47.096 A:middle
And Xcode has come to the front.

00:15:48.126 --> 00:15:49.976 A:middle
So, I want to move this on to

00:15:49.976 --> 00:15:51.226 A:middle
its own dispatch queue so that

00:15:51.226 --> 00:15:52.026 A:middle
it's not blocking the main

00:15:52.026 --> 00:15:52.276 A:middle
thread.

00:15:53.276 --> 00:15:54.056 A:middle
The first thing we'll do is

00:15:54.056 --> 00:15:55.026 A:middle
we'll create this dispatch

00:15:55.056 --> 00:15:55.226 A:middle
queue.

00:15:55.766 --> 00:15:58.406 A:middle
We'll call it Parsing Queue.

00:15:58.616 --> 00:16:00.766 A:middle
Now, let's move the work onto

00:15:58.616 --> 00:16:00.766 A:middle
Now, let's move the work onto

00:16:00.766 --> 00:16:02.696 A:middle
Parsing Queue by using an

00:16:02.696 --> 00:16:04.106 A:middle
asynchronous closure.

00:16:05.226 --> 00:16:06.186 A:middle
We'll just move this work item

00:16:06.186 --> 00:16:06.646 A:middle
up there.

00:16:07.486 --> 00:16:08.536 A:middle
And we still want to notify the

00:16:08.536 --> 00:16:10.046 A:middle
user interface that parsing

00:16:10.046 --> 00:16:11.406 A:middle
completed after that is done.

00:16:11.886 --> 00:16:13.256 A:middle
So, we'll take this call onto

00:16:13.256 --> 00:16:15.376 A:middle
the dispatch main queue after

00:16:16.186 --> 00:16:16.286 A:middle
that.

00:16:16.836 --> 00:16:18.486 A:middle
We'll save, and now we're ready

00:16:18.486 --> 00:16:19.526 A:middle
to try to reproduce our bug

00:16:19.526 --> 00:16:19.766 A:middle
again.

00:16:20.606 --> 00:16:22.256 A:middle
This time, I'll use the Product

00:16:22.256 --> 00:16:23.706 A:middle
Menu and select Profile, as

00:16:23.706 --> 00:16:24.576 A:middle
Tibet showed you earlier.

00:16:25.136 --> 00:16:28.726 A:middle
Xcode builds the application and

00:16:28.726 --> 00:16:29.776 A:middle
brings Instruments to the front.

00:16:30.706 --> 00:16:31.466 A:middle
The Template Chooser has

00:16:31.466 --> 00:16:33.036 A:middle
appeared again because this time

00:16:33.066 --> 00:16:34.196 A:middle
we're not testing a downloaded

00:16:34.196 --> 00:16:35.636 A:middle
copy of this application - we're

00:16:35.636 --> 00:16:36.796 A:middle
testing the one that Xcode has

00:16:36.846 --> 00:16:38.226 A:middle
put in its Drive Data directory.

00:16:39.526 --> 00:16:41.176 A:middle
Time Profiler is selected and

00:16:41.326 --> 00:16:42.076 A:middle
we'll click Choose.

00:16:42.586 --> 00:16:45.956 A:middle
This time, we don't need to

00:16:45.956 --> 00:16:47.536 A:middle
select a target because Xcode

00:16:47.536 --> 00:16:48.696 A:middle
has already informed Instruments

00:16:48.696 --> 00:16:49.696 A:middle
of the application we want to

00:16:49.696 --> 00:16:50.116 A:middle
test.

00:16:51.306 --> 00:16:52.976 A:middle
And furthermore, clicking Record

00:16:52.976 --> 00:16:54.856 A:middle
at the top left launches it for

00:16:55.816 --> 00:16:58.756 A:middle
us automatically.

00:16:58.786 --> 00:17:00.426 A:middle
Switching to the app, let's try

00:16:58.786 --> 00:17:00.426 A:middle
Switching to the app, let's try

00:17:00.426 --> 00:17:02.266 A:middle
the problematic series of user

00:17:02.266 --> 00:17:02.856 A:middle
inputs again.

00:17:03.716 --> 00:17:05.476 A:middle
A bunch of clicking and dragging

00:17:05.616 --> 00:17:07.036 A:middle
and command + R.

00:17:07.386 --> 00:17:09.776 A:middle
And we can see no more Spinning

00:17:09.776 --> 00:17:10.226 A:middle
Wait Cursor.

00:17:10.945 --> 00:17:12.016 A:middle
Let's do that one more time just

00:17:12.016 --> 00:17:12.366 A:middle
to be sure.

00:17:13.356 --> 00:17:15.425 A:middle
Click, drag, command + R.

00:17:16.106 --> 00:17:17.996 A:middle
No Spinning Wait Cursor.

00:17:18.476 --> 00:17:19.486 A:middle
So, we've addressed our

00:17:19.486 --> 00:17:20.266 A:middle
responsiveness issue.

00:17:21.205 --> 00:17:23.986 A:middle
I'll stop recording and we'll

00:17:23.986 --> 00:17:25.126 A:middle
pinch to zoom again to expand

00:17:25.126 --> 00:17:25.626 A:middle
the track view.

00:17:26.376 --> 00:17:27.746 A:middle
I want to make sure that this

00:17:27.786 --> 00:17:28.766 A:middle
work has been moved off of the

00:17:28.766 --> 00:17:30.456 A:middle
main thread, so I'm going to use

00:17:30.456 --> 00:17:32.646 A:middle
the track filter area, top left.

00:17:33.306 --> 00:17:35.186 A:middle
And we'll search for the main

00:17:35.186 --> 00:17:35.436 A:middle
thread.

00:17:36.956 --> 00:17:37.896 A:middle
The only track that appears is

00:17:37.896 --> 00:17:39.346 A:middle
the Solar System Mac's track

00:17:39.346 --> 00:17:39.706 A:middle
entry.

00:17:39.706 --> 00:17:41.516 A:middle
And when I expand it, I can see

00:17:41.516 --> 00:17:42.366 A:middle
the main thread is visible.

00:17:43.836 --> 00:17:45.716 A:middle
Over here, where we have a spike

00:17:45.716 --> 00:17:47.486 A:middle
of CPU usage, the main thread is

00:17:47.486 --> 00:17:48.826 A:middle
doing relatively little work,

00:17:49.316 --> 00:17:51.466 A:middle
and the second time period is

00:17:51.466 --> 00:17:51.966 A:middle
showing the same.

00:17:52.806 --> 00:17:54.076 A:middle
So, it appears we have addressed

00:17:54.076 --> 00:17:55.206 A:middle
the responsiveness issue and

00:17:55.206 --> 00:17:56.236 A:middle
moved this work off of the main

00:17:56.236 --> 00:17:56.496 A:middle
thread.

00:17:57.516 --> 00:18:02.026 A:middle
[ Applause ]

00:17:57.516 --> 00:18:02.026 A:middle
[ Applause ]

00:18:02.526 --> 00:18:03.406 A:middle
I'd like to discuss a few

00:18:03.406 --> 00:18:04.956 A:middle
Profiling tips.

00:18:05.616 --> 00:18:07.086 A:middle
First off, Time Profiler is a

00:18:07.086 --> 00:18:08.376 A:middle
great tool for understanding how

00:18:08.376 --> 00:18:09.406 A:middle
your app is spending time.

00:18:10.456 --> 00:18:11.846 A:middle
This may be a responsiveness

00:18:11.846 --> 00:18:12.866 A:middle
issue, like Spinning Wait

00:18:12.866 --> 00:18:13.216 A:middle
Cursor.

00:18:13.486 --> 00:18:14.566 A:middle
This could also be when your

00:18:14.566 --> 00:18:15.756 A:middle
application launches, you want

00:18:15.806 --> 00:18:16.836 A:middle
to speed up its launch so that

00:18:16.836 --> 00:18:17.826 A:middle
it displays to your users

00:18:17.826 --> 00:18:18.156 A:middle
quickly.

00:18:18.756 --> 00:18:19.786 A:middle
Use Time Profiler for these

00:18:19.786 --> 00:18:20.266 A:middle
cases.

00:18:22.296 --> 00:18:23.386 A:middle
Next, if you have a

00:18:23.386 --> 00:18:24.536 A:middle
responsiveness issue, check the

00:18:24.536 --> 00:18:25.086 A:middle
main thread.

00:18:25.646 --> 00:18:26.636 A:middle
It should really only be used

00:18:26.636 --> 00:18:27.936 A:middle
for updating user interface or

00:18:27.936 --> 00:18:29.366 A:middle
for handling user input events,

00:18:29.616 --> 00:18:31.656 A:middle
like a mouse click on the Mac or

00:18:31.656 --> 00:18:32.996 A:middle
a touch on an iOS device.

00:18:34.516 --> 00:18:35.846 A:middle
Third, something I didn't

00:18:35.846 --> 00:18:36.566 A:middle
discuss before.

00:18:37.286 --> 00:18:38.516 A:middle
You should Profile in Release

00:18:38.516 --> 00:18:38.766 A:middle
Mode.

00:18:39.676 --> 00:18:40.846 A:middle
The Compiler supports a number

00:18:40.846 --> 00:18:42.156 A:middle
of different optimization levels

00:18:42.286 --> 00:18:43.116 A:middle
and when you're doing the

00:18:43.116 --> 00:18:45.436 A:middle
Build-Run cycle in Xcode, we use

00:18:45.436 --> 00:18:46.766 A:middle
a low-level of optimization to

00:18:46.766 --> 00:18:47.866 A:middle
allow that to occur quickly.

00:18:48.446 --> 00:18:49.666 A:middle
But this isn't the optimization

00:18:49.666 --> 00:18:50.686 A:middle
level that's used when you ship

00:18:50.686 --> 00:18:52.526 A:middle
code to your customers using the

00:18:52.526 --> 00:18:54.006 A:middle
App Store or Xcode's Archive

00:18:54.056 --> 00:18:54.316 A:middle
feature.

00:18:54.766 --> 00:18:57.736 A:middle
If you're using Xcode's default

00:18:57.736 --> 00:18:59.756 A:middle
configuration, the Profile

00:18:59.756 --> 00:19:01.046 A:middle
action in your scheme is set to

00:18:59.756 --> 00:19:01.046 A:middle
action in your scheme is set to

00:19:01.046 --> 00:19:02.646 A:middle
use Release configuration.

00:19:03.286 --> 00:19:04.316 A:middle
However, if you're using custom

00:19:04.316 --> 00:19:05.936 A:middle
Compiler flags, be sure that the

00:19:05.936 --> 00:19:07.476 A:middle
app you profile is using your

00:19:07.476 --> 00:19:08.916 A:middle
Release set of Compiler flags.

00:19:10.596 --> 00:19:12.116 A:middle
Finally, it's important to

00:19:12.116 --> 00:19:13.426 A:middle
Profile with difficult workloads

00:19:13.426 --> 00:19:14.416 A:middle
or on older devices.

00:19:14.876 --> 00:19:16.236 A:middle
In this case, we had a bug that

00:19:16.236 --> 00:19:18.566 A:middle
we didn't see at our desk, but

00:19:18.566 --> 00:19:19.766 A:middle
customers in the field who had

00:19:19.766 --> 00:19:20.526 A:middle
devices with different

00:19:20.526 --> 00:19:21.736 A:middle
performance characteristics did

00:19:21.736 --> 00:19:22.226 A:middle
encounter it.

00:19:22.866 --> 00:19:24.216 A:middle
So, if you have access to those

00:19:24.216 --> 00:19:26.026 A:middle
devices, be sure to test on

00:19:27.036 --> 00:19:27.226 A:middle
them.

00:19:27.916 --> 00:19:29.696 A:middle
As Tibet mentioned earlier,

00:19:29.816 --> 00:19:30.776 A:middle
Instruments supports all

00:19:30.776 --> 00:19:31.456 A:middle
platforms.

00:19:31.776 --> 00:19:33.396 A:middle
We demoed this on the Mac, but

00:19:33.396 --> 00:19:35.496 A:middle
it works equally well on iOS,

00:19:35.626 --> 00:19:37.016 A:middle
watchOS and tvOS.

00:19:37.766 --> 00:19:39.496 A:middle
It also supports the Simulator.

00:19:39.686 --> 00:19:41.116 A:middle
But there's an important caveat

00:19:41.116 --> 00:19:41.766 A:middle
to understand with the

00:19:41.766 --> 00:19:42.256 A:middle
Simulator.

00:19:43.266 --> 00:19:45.596 A:middle
It's running on your Mac.

00:19:45.596 --> 00:19:46.786 A:middle
That means that it has your

00:19:46.786 --> 00:19:47.906 A:middle
Mac's resource contention.

00:19:48.856 --> 00:19:50.346 A:middle
It has your Mac's CPU and memory

00:19:50.346 --> 00:19:51.636 A:middle
performance characteristics.

00:19:51.926 --> 00:19:53.536 A:middle
It has your Mac's file system

00:19:53.536 --> 00:19:54.876 A:middle
behavior and disc behavior.

00:19:55.216 --> 00:19:56.776 A:middle
And it has your Mac's thermal

00:19:57.046 --> 00:19:58.186 A:middle
limitations, which are

00:19:58.186 --> 00:19:59.326 A:middle
significantly different than

00:19:59.326 --> 00:20:00.536 A:middle
that of a smaller embedded

00:19:59.326 --> 00:20:00.536 A:middle
that of a smaller embedded

00:20:00.536 --> 00:20:00.996 A:middle
device.

00:20:01.956 --> 00:20:03.066 A:middle
Instruments in this case is

00:20:03.066 --> 00:20:04.276 A:middle
great for looking at trends.

00:20:04.366 --> 00:20:05.656 A:middle
Did something get faster or did

00:20:05.656 --> 00:20:06.256 A:middle
it get slower?

00:20:06.876 --> 00:20:08.306 A:middle
But it's not going to give you

00:20:08.306 --> 00:20:10.106 A:middle
second-by-second accurate

00:20:10.106 --> 00:20:10.996 A:middle
simulation of how the

00:20:10.996 --> 00:20:11.836 A:middle
application would run.

00:20:12.366 --> 00:20:13.626 A:middle
Be sure to test on real hardware

00:20:13.626 --> 00:20:14.376 A:middle
before shipping to your

00:20:14.376 --> 00:20:15.406 A:middle
customers.

00:20:16.516 --> 00:20:17.866 A:middle
So, we took care of a

00:20:17.866 --> 00:20:19.396 A:middle
responsiveness issue, but that's

00:20:19.396 --> 00:20:20.206 A:middle
not the whole story.

00:20:20.526 --> 00:20:21.646 A:middle
We still have a large spike of

00:20:21.686 --> 00:20:23.346 A:middle
CPU usage and it seems like we

00:20:23.346 --> 00:20:24.326 A:middle
should be able to reduce that.

00:20:25.536 --> 00:20:27.186 A:middle
CPU usage can drain the battery.

00:20:27.526 --> 00:20:29.106 A:middle
It can increase the temperature

00:20:29.106 --> 00:20:30.766 A:middle
of a device or on many Macs

00:20:30.766 --> 00:20:31.786 A:middle
it'll spin up fans and annoy

00:20:31.786 --> 00:20:32.406 A:middle
your users.

00:20:33.206 --> 00:20:34.856 A:middle
So, now I'd like to introduce

00:20:34.956 --> 00:20:36.836 A:middle
Anand to use the Signpost

00:20:36.836 --> 00:20:38.206 A:middle
feature to help dig into the

00:20:38.206 --> 00:20:39.136 A:middle
work that our application is

00:20:39.136 --> 00:20:39.326 A:middle
doing.

00:20:41.516 --> 00:20:44.376 A:middle
[ Applause ]

00:20:44.876 --> 00:20:45.376 A:middle
&gt;&gt; Thank you, Ben.

00:20:46.446 --> 00:20:47.186 A:middle
Good morning, everyone.

00:20:48.236 --> 00:20:49.786 A:middle
I'd like to show you how to use

00:20:49.786 --> 00:20:52.496 A:middle
Signpost in your code today to

00:20:52.496 --> 00:20:53.786 A:middle
augment the Instruments' traces

00:20:53.786 --> 00:20:55.706 A:middle
you collect from it and get a

00:20:55.816 --> 00:20:57.176 A:middle
finer understanding of how your

00:20:57.176 --> 00:20:58.626 A:middle
code uses system resources.

00:21:01.016 --> 00:21:03.206 A:middle
So, let's begin understanding

00:21:03.206 --> 00:21:05.776 A:middle
Signposts by contrasting with

00:21:05.806 --> 00:21:07.026 A:middle
what we've been doing so far

00:21:07.026 --> 00:21:07.916 A:middle
with Time Profiler.

00:21:08.836 --> 00:21:10.176 A:middle
Time Profiler builds a

00:21:10.506 --> 00:21:12.686 A:middle
statistical profile of your code

00:21:12.686 --> 00:21:15.396 A:middle
and it does so by observing all

00:21:15.396 --> 00:21:16.786 A:middle
the threads in your application

00:21:16.786 --> 00:21:18.756 A:middle
at a fixed interval and building

00:21:18.756 --> 00:21:19.986 A:middle
the correlation between call

00:21:19.986 --> 00:21:21.526 A:middle
stacks and time.

00:21:22.336 --> 00:21:23.796 A:middle
But a correlation is no

00:21:23.796 --> 00:21:25.636 A:middle
substitute for aa precise

00:21:25.746 --> 00:21:26.876 A:middle
measurement which can tell you

00:21:26.986 --> 00:21:28.436 A:middle
how or why your code is

00:21:28.436 --> 00:21:28.946 A:middle
executing.

00:21:30.116 --> 00:21:31.326 A:middle
There may be a block of code

00:21:31.636 --> 00:21:33.086 A:middle
that executes in several short

00:21:33.146 --> 00:21:33.746 A:middle
bursts.

00:21:34.456 --> 00:21:37.066 A:middle
Or, it might execute in a few

00:21:37.066 --> 00:21:37.916 A:middle
longer stretches.

00:21:38.736 --> 00:21:39.986 A:middle
There could be a function which

00:21:39.986 --> 00:21:41.636 A:middle
when called on certain arguments

00:21:42.056 --> 00:21:43.696 A:middle
can keep the CPU continuously

00:21:43.696 --> 00:21:44.096 A:middle
busy.

00:21:45.136 --> 00:21:46.386 A:middle
In order to distinguish these

00:21:46.386 --> 00:21:48.326 A:middle
kinds of execution patterns, you

00:21:48.326 --> 00:21:50.686 A:middle
need to log precise measurements

00:21:50.896 --> 00:21:52.836 A:middle
from your code and that begs the

00:21:52.836 --> 00:21:53.316 A:middle
question.

00:21:53.856 --> 00:21:55.276 A:middle
What is the best way to log

00:21:55.276 --> 00:21:56.466 A:middle
performance measurements from

00:21:56.466 --> 00:21:57.156 A:middle
your operations?

00:21:58.236 --> 00:21:59.946 A:middle
I'm pleased to tell you that you

00:21:59.946 --> 00:22:00.906 A:middle
don't have to worry about

00:21:59.946 --> 00:22:00.906 A:middle
don't have to worry about

00:22:00.906 --> 00:22:02.496 A:middle
printing from your code and

00:22:02.496 --> 00:22:03.456 A:middle
teaching Instruments how to read

00:22:03.456 --> 00:22:04.506 A:middle
your print statements.

00:22:05.096 --> 00:22:06.736 A:middle
Just use Signposts.

00:22:08.236 --> 00:22:10.036 A:middle
Signposts have numerous features

00:22:10.036 --> 00:22:11.666 A:middle
that make them ideal for this

00:22:11.666 --> 00:22:12.166 A:middle
use case.

00:22:12.646 --> 00:22:16.076 A:middle
It is purpose built for logging

00:22:16.076 --> 00:22:17.346 A:middle
structured performance data.

00:22:17.766 --> 00:22:19.286 A:middle
So, it is simpler and more

00:22:19.286 --> 00:22:20.656 A:middle
efficient for this purpose than

00:22:20.656 --> 00:22:21.136 A:middle
even printing.

00:22:21.716 --> 00:22:24.946 A:middle
It has built-in support for

00:22:24.946 --> 00:22:25.706 A:middle
measuring time.

00:22:26.036 --> 00:22:26.966 A:middle
So, you don't have to worry

00:22:26.966 --> 00:22:28.516 A:middle
about what clock source you're

00:22:28.516 --> 00:22:30.016 A:middle
reading from or what time base

00:22:30.016 --> 00:22:30.596 A:middle
you're measuring in.

00:22:31.546 --> 00:22:33.666 A:middle
My favorite part is that

00:22:33.776 --> 00:22:35.416 A:middle
Instruments already knows how to

00:22:35.416 --> 00:22:36.656 A:middle
trace Signposts.

00:22:37.056 --> 00:22:38.186 A:middle
In fact, let me give you a sneak

00:22:38.186 --> 00:22:39.706 A:middle
preview of an Instruments trace

00:22:39.706 --> 00:22:41.666 A:middle
that I collected after adding a

00:22:41.666 --> 00:22:44.756 A:middle
Signpost interval to my code.

00:22:44.946 --> 00:22:46.236 A:middle
Highlighted is the points of

00:22:46.236 --> 00:22:47.836 A:middle
interest track which shows a

00:22:47.836 --> 00:22:49.516 A:middle
region of interest that

00:22:49.516 --> 00:22:52.076 A:middle
corresponds to a Signpost

00:22:52.076 --> 00:22:52.986 A:middle
interval that I added to my

00:22:52.986 --> 00:22:53.226 A:middle
code.

00:22:54.226 --> 00:22:55.736 A:middle
So, let me take you to a demo

00:22:55.736 --> 00:22:57.996 A:middle
now where I'll resume Ben's

00:22:57.996 --> 00:22:59.196 A:middle
investigation of the Solar

00:22:59.196 --> 00:23:03.686 A:middle
System application.

00:22:59.196 --> 00:23:03.686 A:middle
System application.

00:23:04.056 --> 00:23:06.996 A:middle
So, we have the last Instruments

00:23:06.996 --> 00:23:11.036 A:middle
trace we were looking at, and we

00:23:14.176 --> 00:23:16.056 A:middle
see the familiar region of high

00:23:16.056 --> 00:23:17.086 A:middle
CPU utilization.

00:23:17.656 --> 00:23:20.536 A:middle
And we'd like to find out why

00:23:20.596 --> 00:23:22.566 A:middle
we're using so much CPU time and

00:23:22.566 --> 00:23:23.976 A:middle
we'd like to add some Signposts

00:23:24.056 --> 00:23:25.386 A:middle
to the code that is using most

00:23:25.386 --> 00:23:26.066 A:middle
of the CPU time.

00:23:26.856 --> 00:23:28.066 A:middle
Let me take a look at the heavy

00:23:28.066 --> 00:23:28.726 A:middle
stack trace.

00:23:32.576 --> 00:23:34.676 A:middle
Last time, Ben started looking

00:23:34.676 --> 00:23:36.676 A:middle
from the top of this heavy stack

00:23:36.676 --> 00:23:39.746 A:middle
so that we could find out how

00:23:39.746 --> 00:23:41.436 A:middle
the code began executing on the

00:23:41.436 --> 00:23:41.896 A:middle
main thread.

00:23:42.826 --> 00:23:44.276 A:middle
But this time, I'd like to start

00:23:44.276 --> 00:23:45.716 A:middle
looking from the Leaf Level

00:23:45.716 --> 00:23:48.536 A:middle
functions to get an idea of what

00:23:48.536 --> 00:23:51.046 A:middle
are the most expensive or

00:23:51.046 --> 00:23:52.856 A:middle
commonly called functions in

00:23:52.856 --> 00:23:53.416 A:middle
this workload.

00:23:54.366 --> 00:23:55.366 A:middle
There's something called Setup

00:23:55.366 --> 00:23:56.686 A:middle
Scene over here which appears to

00:23:56.686 --> 00:23:58.416 A:middle
be manipulating lots of arrays

00:23:58.736 --> 00:23:59.736 A:middle
as a part of this reload

00:23:59.736 --> 00:24:00.236 A:middle
operation.

00:23:59.736 --> 00:24:00.236 A:middle
operation.

00:24:00.566 --> 00:24:02.636 A:middle
And I'd like to find out how

00:24:02.636 --> 00:24:04.916 A:middle
much time precisely it is

00:24:04.916 --> 00:24:05.246 A:middle
taking.

00:24:05.926 --> 00:24:09.196 A:middle
So, let's go to Xcode and take a

00:24:09.196 --> 00:24:11.906 A:middle
look at this code.

00:24:12.086 --> 00:24:13.306 A:middle
Here's the Setup Scene function,

00:24:13.956 --> 00:24:15.466 A:middle
and you can see some vestiges of

00:24:15.466 --> 00:24:17.326 A:middle
my previous attempts to log some

00:24:17.326 --> 00:24:18.306 A:middle
performance measurements from

00:24:18.306 --> 00:24:18.456 A:middle
here.

00:24:18.786 --> 00:24:19.806 A:middle
There's a print statement

00:24:20.056 --> 00:24:21.606 A:middle
emitting the mock absolute time

00:24:21.606 --> 00:24:22.376 A:middle
right at the beginning of the

00:24:22.416 --> 00:24:22.816 A:middle
function.

00:24:23.376 --> 00:24:24.806 A:middle
And if we scroll all the way to

00:24:24.806 --> 00:24:25.796 A:middle
the bottom of the function,

00:24:26.546 --> 00:24:28.086 A:middle
there is another Print Statement

00:24:28.086 --> 00:24:29.776 A:middle
showing the mock absolute time

00:24:29.956 --> 00:24:30.836 A:middle
of when I ended this.

00:24:31.526 --> 00:24:32.726 A:middle
But as I previously mentioned,

00:24:33.416 --> 00:24:35.366 A:middle
Instruments doesn't know how to

00:24:35.366 --> 00:24:36.156 A:middle
read Print Statements.

00:24:36.346 --> 00:24:40.136 A:middle
So, we first need to create a

00:24:40.136 --> 00:24:41.226 A:middle
log handle that lets us

00:24:41.226 --> 00:24:42.386 A:middle
communicate what Instruments.

00:24:43.106 --> 00:24:45.046 A:middle
Let's do that.

00:24:46.316 --> 00:24:48.026 A:middle
I created this log handle with a

00:24:48.026 --> 00:24:49.326 A:middle
category called Points of

00:24:49.326 --> 00:24:49.726 A:middle
Interest.

00:24:50.186 --> 00:24:51.826 A:middle
That corresponds to the name of

00:24:51.826 --> 00:24:53.076 A:middle
the Points of Interest

00:24:53.076 --> 00:24:53.546 A:middle
Instrument.

00:24:55.166 --> 00:24:58.306 A:middle
We'll replace our first Print

00:24:58.306 --> 00:25:00.046 A:middle
Statement with a call to an OS

00:24:58.306 --> 00:25:00.046 A:middle
Statement with a call to an OS

00:25:00.046 --> 00:25:03.106 A:middle
Signpost API that begins an

00:25:03.106 --> 00:25:03.536 A:middle
interval.

00:25:04.556 --> 00:25:05.616 A:middle
Now, every time you begin an

00:25:05.616 --> 00:25:06.976 A:middle
interval you should also end

00:25:07.086 --> 00:25:07.686 A:middle
that interval.

00:25:08.876 --> 00:25:10.196 A:middle
Instead of scrolling all the way

00:25:10.196 --> 00:25:11.706 A:middle
to the bottom of the function,

00:25:11.986 --> 00:25:13.376 A:middle
I'm going to take advantage of

00:25:13.486 --> 00:25:15.806 A:middle
Swift Defer Blocks to end the

00:25:15.806 --> 00:25:16.166 A:middle
interval.

00:25:16.756 --> 00:25:17.876 A:middle
The contents of the Defer Block

00:25:17.876 --> 00:25:19.786 A:middle
will be executed at the end of

00:25:19.846 --> 00:25:23.026 A:middle
the current scope.

00:25:23.226 --> 00:25:24.716 A:middle
Let's build our application with

00:25:24.716 --> 00:25:26.196 A:middle
these changes and Profiler in

00:25:26.196 --> 00:25:27.606 A:middle
Instruments using the Profile

00:25:27.606 --> 00:25:28.466 A:middle
action in the menu.

00:25:33.056 --> 00:25:34.666 A:middle
Let's select the Time Profiler

00:25:34.666 --> 00:25:37.736 A:middle
template once again and the

00:25:37.896 --> 00:25:39.096 A:middle
target selection area has

00:25:39.096 --> 00:25:40.726 A:middle
already been populated by Xcode

00:25:40.726 --> 00:25:41.486 A:middle
with a currently built

00:25:41.486 --> 00:25:42.626 A:middle
conversion of the Solar System

00:25:42.626 --> 00:25:42.826 A:middle
app.

00:25:43.106 --> 00:25:43.966 A:middle
Let's start recording.

00:25:48.856 --> 00:25:51.256 A:middle
I'll interact with the app and

00:25:51.476 --> 00:25:52.716 A:middle
perform the troublesome sequence

00:25:52.716 --> 00:25:54.236 A:middle
of operations again, reload

00:25:54.236 --> 00:25:54.826 A:middle
operation.

00:25:57.766 --> 00:25:59.646 A:middle
And we've got some data.

00:25:59.686 --> 00:26:00.746 A:middle
So, I'll stop the recording.

00:25:59.686 --> 00:26:00.746 A:middle
So, I'll stop the recording.

00:26:01.266 --> 00:26:04.676 A:middle
Let's pinch to zoom into the

00:26:04.676 --> 00:26:06.856 A:middle
region of high CPU utilization.

00:26:10.186 --> 00:26:11.756 A:middle
Below the Time Profiler frack,

00:26:12.136 --> 00:26:13.656 A:middle
the Points of Interest track now

00:26:13.956 --> 00:26:16.156 A:middle
has been populated with the

00:26:16.156 --> 00:26:17.546 A:middle
regions of interest that we

00:26:17.546 --> 00:26:18.346 A:middle
added in our code.

00:26:18.856 --> 00:26:20.096 A:middle
There's a row called Setup Scene

00:26:20.096 --> 00:26:21.836 A:middle
corresponding to the name of our

00:26:21.836 --> 00:26:23.596 A:middle
Signpost interval, and there are

00:26:23.596 --> 00:26:25.976 A:middle
several adjacent regions of

00:26:25.976 --> 00:26:28.286 A:middle
interest recorded in the track.

00:26:29.486 --> 00:26:30.896 A:middle
I wasn't expecting many; I was

00:26:30.896 --> 00:26:32.016 A:middle
only expecting a few.

00:26:32.886 --> 00:26:34.926 A:middle
I could mouse over each of these

00:26:34.926 --> 00:26:36.556 A:middle
and count the number of regions

00:26:36.556 --> 00:26:37.086 A:middle
of interest.

00:26:37.456 --> 00:26:38.686 A:middle
Or, I could take advantage of

00:26:38.686 --> 00:26:39.486 A:middle
the detail view.

00:26:40.876 --> 00:26:41.966 A:middle
So, let me click and drag to

00:26:41.966 --> 00:26:43.836 A:middle
select this particular region

00:26:44.656 --> 00:26:45.906 A:middle
and then click in the Points of

00:26:45.906 --> 00:26:47.766 A:middle
Interest track to repopulate the

00:26:47.766 --> 00:26:50.646 A:middle
Detail view with a summary of

00:26:50.646 --> 00:26:54.186 A:middle
the Points of Interest track.

00:26:54.376 --> 00:26:55.966 A:middle
Taking a closer look, I see that

00:26:55.966 --> 00:26:57.406 A:middle
Setup Scene has occurred a total

00:26:57.406 --> 00:26:59.596 A:middle
of eight times in this region,

00:27:00.156 --> 00:27:02.276 A:middle
and it's averaging about 200

00:27:02.276 --> 00:27:04.846 A:middle
milliseconds for each time it

00:27:05.476 --> 00:27:05.606 A:middle
occurs.

00:27:05.806 --> 00:27:07.186 A:middle
There are more Detail views

00:27:07.186 --> 00:27:07.726 A:middle
available.

00:27:08.006 --> 00:27:09.956 A:middle
Let's click on the Jump Bar and

00:27:09.956 --> 00:27:12.226 A:middle
select a list of the regions of

00:27:12.226 --> 00:27:13.946 A:middle
interest to see a full-time

00:27:13.946 --> 00:27:15.706 A:middle
series list of every region of

00:27:15.706 --> 00:27:16.946 A:middle
interest that was recorded in

00:27:16.946 --> 00:27:17.466 A:middle
this trace.

00:27:18.016 --> 00:27:21.446 A:middle
The duration column shows the

00:27:21.446 --> 00:27:24.216 A:middle
duration of each of these and I

00:27:24.216 --> 00:27:27.776 A:middle
can see that all of these

00:27:27.776 --> 00:27:28.986 A:middle
intervals are taking a very

00:27:28.986 --> 00:27:30.626 A:middle
similar amount of time to

00:27:30.626 --> 00:27:34.086 A:middle
complete, about 210 to 220

00:27:34.086 --> 00:27:34.756 A:middle
milliseconds.

00:27:35.576 --> 00:27:37.046 A:middle
So that's a real headscratcher.

00:27:37.196 --> 00:27:39.306 A:middle
Why are we doing a similar

00:27:39.306 --> 00:27:41.086 A:middle
amount of work over and over

00:27:43.216 --> 00:27:43.336 A:middle
again?

00:27:43.526 --> 00:27:45.306 A:middle
Let's look at the caller of

00:27:45.306 --> 00:27:46.596 A:middle
Setup Scene to find out if it's

00:27:46.596 --> 00:27:47.796 A:middle
being called redundantly for

00:27:47.796 --> 00:27:48.296 A:middle
some reason.

00:27:48.436 --> 00:27:50.726 A:middle
And the best way to do that is

00:27:50.726 --> 00:27:51.926 A:middle
to look at the call graph

00:27:51.926 --> 00:27:53.216 A:middle
information recorded by Time

00:27:53.216 --> 00:27:53.716 A:middle
Profiler.

00:27:54.266 --> 00:27:57.216 A:middle
Let's take advantage of the

00:27:57.216 --> 00:27:58.386 A:middle
heavy stack view again at the

00:27:58.386 --> 00:27:59.476 A:middle
bottom right-hand corner of the

00:27:59.476 --> 00:28:01.446 A:middle
window, and this time I'll look

00:27:59.476 --> 00:28:01.446 A:middle
window, and this time I'll look

00:28:01.446 --> 00:28:03.156 A:middle
at the caller of Setup Scene, a

00:28:03.156 --> 00:28:04.476 A:middle
function called Prepare Scene.

00:28:05.486 --> 00:28:06.766 A:middle
We can double click it to bring

00:28:06.766 --> 00:28:07.536 A:middle
up the sources.

00:28:08.946 --> 00:28:10.946 A:middle
And it appears that Prepare

00:28:10.946 --> 00:28:12.776 A:middle
Scene called Setup Scene only

00:28:12.776 --> 00:28:13.276 A:middle
once.

00:28:13.476 --> 00:28:15.116 A:middle
So, this isn't the root cause of

00:28:15.116 --> 00:28:15.786 A:middle
our repetition.

00:28:16.626 --> 00:28:17.996 A:middle
To bring back the entire call

00:28:17.996 --> 00:28:20.746 A:middle
graph, I'll click on Root in the

00:28:20.746 --> 00:28:21.676 A:middle
Jump part and take us to the

00:28:21.676 --> 00:28:22.956 A:middle
root of the call graph.

00:28:24.326 --> 00:28:27.576 A:middle
Let's go further up on our quest

00:28:27.576 --> 00:28:28.506 A:middle
in the heavy stack.

00:28:29.096 --> 00:28:34.086 A:middle
I'll select the next caller and

00:28:34.266 --> 00:28:35.766 A:middle
here we see a four loop, which

00:28:35.766 --> 00:28:37.136 A:middle
is very plausible cause of the

00:28:37.136 --> 00:28:38.336 A:middle
repetition that we're seeing.

00:28:39.176 --> 00:28:40.296 A:middle
Let me bring up this code in

00:28:40.326 --> 00:28:42.606 A:middle
Xcode so that we can take a

00:28:42.606 --> 00:28:43.176 A:middle
closer look.

00:28:43.526 --> 00:28:46.426 A:middle
And I'll use the Jump to File in

00:28:46.426 --> 00:28:47.006 A:middle
Xcode button.

00:28:51.716 --> 00:28:54.596 A:middle
Xcode comes up with the four

00:28:54.596 --> 00:28:55.366 A:middle
loop displayed.

00:28:56.486 --> 00:28:57.526 A:middle
I remember this function.

00:28:58.116 --> 00:28:59.306 A:middle
The purpose of update with

00:28:59.366 --> 00:29:01.946 A:middle
planets is to receive the data

00:28:59.366 --> 00:29:01.946 A:middle
planets is to receive the data

00:29:01.986 --> 00:29:03.166 A:middle
sent to us by the server, the

00:29:03.166 --> 00:29:04.516 A:middle
part of the Reload operation.

00:29:05.156 --> 00:29:07.516 A:middle
And then for each planet for

00:29:07.516 --> 00:29:09.466 A:middle
which we have new data, update

00:29:09.466 --> 00:29:10.726 A:middle
the internal model in the

00:29:10.726 --> 00:29:12.246 A:middle
application of each of the

00:29:12.246 --> 00:29:13.556 A:middle
planets wherever an update is

00:29:13.556 --> 00:29:14.026 A:middle
required.

00:29:15.486 --> 00:29:17.816 A:middle
However, we can receive a blob

00:29:17.816 --> 00:29:19.246 A:middle
of data containing updated

00:29:19.246 --> 00:29:20.526 A:middle
information for multiple

00:29:20.526 --> 00:29:22.596 A:middle
planets, and we appear to be

00:29:22.596 --> 00:29:24.266 A:middle
calling Prepare Scene and

00:29:24.266 --> 00:29:26.156 A:middle
redrawing the entire view for

00:29:26.156 --> 00:29:27.596 A:middle
every single planet that we need

00:29:27.596 --> 00:29:28.726 A:middle
to update.

00:29:30.256 --> 00:29:32.586 A:middle
The trace shows us that the cost

00:29:32.776 --> 00:29:35.316 A:middle
of redrawing the scene vastly

00:29:35.316 --> 00:29:39.326 A:middle
dwarfs the cost of just updating

00:29:39.326 --> 00:29:40.196 A:middle
our internal model of the

00:29:40.196 --> 00:29:40.576 A:middle
planet.

00:29:40.986 --> 00:29:42.606 A:middle
So, the right thing to do here

00:29:42.866 --> 00:29:44.316 A:middle
would be to batch up all of our

00:29:44.316 --> 00:29:46.806 A:middle
updates to our internal model

00:29:47.136 --> 00:29:49.016 A:middle
and just redraw the scene once

00:29:49.206 --> 00:29:50.456 A:middle
after we've made all of our

00:29:50.456 --> 00:29:50.846 A:middle
updates.

00:29:51.976 --> 00:29:53.266 A:middle
This may seem like a very simple

00:29:53.266 --> 00:29:56.076 A:middle
fix but in our experience, we've

00:29:56.076 --> 00:29:57.616 A:middle
seen that numerous performance

00:29:57.616 --> 00:29:59.166 A:middle
issues of this type can creep

00:29:59.376 --> 00:30:01.166 A:middle
into our code as we add new

00:29:59.376 --> 00:30:01.166 A:middle
into our code as we add new

00:30:01.166 --> 00:30:03.146 A:middle
features or fix unrelated bugs.

00:30:03.606 --> 00:30:05.536 A:middle
And a great way to prevent such

00:30:05.536 --> 00:30:07.016 A:middle
bugs from getting out to our

00:30:07.016 --> 00:30:09.156 A:middle
customers is to write tests that

00:30:09.156 --> 00:30:10.186 A:middle
routinely exercise their

00:30:10.186 --> 00:30:10.856 A:middle
functionality.

00:30:11.846 --> 00:30:12.836 A:middle
To save us some time, I've

00:30:12.836 --> 00:30:15.406 A:middle
already written an XC test which

00:30:15.406 --> 00:30:16.586 A:middle
exercises the Reload

00:30:16.586 --> 00:30:17.206 A:middle
functionality.

00:30:18.666 --> 00:30:19.926 A:middle
If we click on this button to

00:30:19.926 --> 00:30:21.386 A:middle
the left of the test, normally

00:30:21.386 --> 00:30:23.296 A:middle
it would just run the test.

00:30:23.416 --> 00:30:24.886 A:middle
But I will secondary click to

00:30:24.886 --> 00:30:26.526 A:middle
reveal the Profile action.

00:30:27.266 --> 00:30:29.106 A:middle
This instructs Xcode to build

00:30:29.106 --> 00:30:30.756 A:middle
and launch the test under

00:30:30.756 --> 00:30:31.326 A:middle
Instruments.

00:30:36.256 --> 00:30:37.746 A:middle
Let's select the Time Profiler

00:30:37.746 --> 00:30:39.936 A:middle
template and start recording a

00:30:39.936 --> 00:30:40.456 A:middle
trace.

00:30:41.016 --> 00:30:45.706 A:middle
In this test, I've placed the

00:30:45.706 --> 00:30:48.006 A:middle
Reload operation inside a call

00:30:48.006 --> 00:30:48.946 A:middle
to the Measure API.

00:30:49.706 --> 00:30:51.566 A:middle
The Measure API runs the

00:30:51.566 --> 00:30:53.586 A:middle
workload several times in order

00:30:53.586 --> 00:30:54.786 A:middle
to collect several repeated

00:30:54.786 --> 00:30:55.376 A:middle
measurements.

00:30:56.186 --> 00:30:57.356 A:middle
That can be really helpful for

00:30:57.356 --> 00:30:58.866 A:middle
you to learn whether your

00:30:58.866 --> 00:31:00.296 A:middle
measurements are repeatable and

00:30:58.866 --> 00:31:00.296 A:middle
measurements are repeatable and

00:31:00.296 --> 00:31:01.546 A:middle
consistent, or whether there's a

00:31:01.546 --> 00:31:02.996 A:middle
lot of run-to-run variation.

00:31:04.466 --> 00:31:05.496 A:middle
It looks like all the

00:31:05.496 --> 00:31:07.166 A:middle
repetitions have ended, so I can

00:31:07.166 --> 00:31:08.396 A:middle
stop this trace.

00:31:08.936 --> 00:31:11.926 A:middle
I'll pinch to zoom into the

00:31:11.926 --> 00:31:12.936 A:middle
contents of the points of

00:31:12.936 --> 00:31:13.616 A:middle
interest track.

00:31:14.256 --> 00:31:16.836 A:middle
And we can see there's an extra

00:31:16.836 --> 00:31:17.446 A:middle
row here.

00:31:21.046 --> 00:31:21.976 A:middle
At the very bottom is a Setup

00:31:21.976 --> 00:31:22.826 A:middle
Scene interval which I

00:31:22.826 --> 00:31:24.056 A:middle
previously added to our code.

00:31:24.106 --> 00:31:27.386 A:middle
And above it is another point of

00:31:27.386 --> 00:31:28.516 A:middle
interest that is now being

00:31:28.516 --> 00:31:29.756 A:middle
contributed to by the Measure

00:31:29.756 --> 00:31:30.056 A:middle
API.

00:31:30.676 --> 00:31:32.976 A:middle
That tells us the interval

00:31:32.976 --> 00:31:34.526 A:middle
corresponding to each iteration

00:31:34.906 --> 00:31:36.106 A:middle
that it ran your workload.

00:31:38.146 --> 00:31:39.246 A:middle
Scrolling over this and just

00:31:39.246 --> 00:31:41.606 A:middle
eyeballing it, I feel like the

00:31:41.606 --> 00:31:42.976 A:middle
workload is behaving pretty

00:31:42.976 --> 00:31:44.226 A:middle
consistently from run to run.

00:31:44.626 --> 00:31:45.806 A:middle
So, I'd just like to find out

00:31:45.806 --> 00:31:46.816 A:middle
what is happening within a

00:31:46.816 --> 00:31:49.136 A:middle
single iteration of the test.

00:31:50.146 --> 00:31:51.186 A:middle
Instead of clicking and

00:31:51.186 --> 00:31:52.616 A:middle
dragging, there is a nice

00:31:52.616 --> 00:31:53.746 A:middle
shortcut for you to select

00:31:53.746 --> 00:31:55.606 A:middle
exactly the region corresponding

00:31:55.606 --> 00:31:57.986 A:middle
to one event or interval in a

00:31:57.986 --> 00:31:58.246 A:middle
track.

00:31:58.716 --> 00:31:59.546 A:middle
I'll triple click.

00:32:00.106 --> 00:32:02.456 A:middle
This populates the Detail view

00:32:02.456 --> 00:32:03.846 A:middle
with information specific to

00:32:03.846 --> 00:32:04.396 A:middle
that selection.

00:32:06.156 --> 00:32:09.336 A:middle
And taking a closer look, there

00:32:09.936 --> 00:32:11.756 A:middle
appears to be only one call to

00:32:11.756 --> 00:32:13.566 A:middle
Setup Scene right now.

00:32:13.566 --> 00:32:14.256 A:middle
Let that sink in.

00:32:14.726 --> 00:32:16.206 A:middle
We used the information that we

00:32:16.206 --> 00:32:19.276 A:middle
gained from Signposts to reduce

00:32:19.276 --> 00:32:20.316 A:middle
the amount of CPU time we were

00:32:20.316 --> 00:32:21.876 A:middle
using by an order of magnitude.

00:32:23.516 --> 00:32:27.500 A:middle
[ Applause ]

00:32:31.796 --> 00:32:32.926 A:middle
So, let's review some of the

00:32:32.926 --> 00:32:34.176 A:middle
concepts we just encountered.

00:32:34.766 --> 00:32:38.496 A:middle
A statistical profile such as

00:32:38.496 --> 00:32:40.266 A:middle
that collected by Time Profiler

00:32:40.266 --> 00:32:41.556 A:middle
can be really useful to show

00:32:41.556 --> 00:32:43.336 A:middle
what code is most commonly

00:32:43.336 --> 00:32:43.936 A:middle
executed.

00:32:44.496 --> 00:32:46.286 A:middle
But that is not a substitute for

00:32:46.286 --> 00:32:48.756 A:middle
a measurement such as that which

00:32:48.756 --> 00:32:49.726 A:middle
can be recorded using the

00:32:49.726 --> 00:32:51.746 A:middle
Signpost APIs that can show you

00:32:51.746 --> 00:32:53.186 A:middle
how and why your code is

00:32:53.186 --> 00:32:53.756 A:middle
executed.

00:32:54.946 --> 00:32:56.546 A:middle
We've also seen how it can be

00:32:56.546 --> 00:32:59.456 A:middle
really useful to run tests to

00:32:59.456 --> 00:33:00.906 A:middle
reliably and repeatedly

00:32:59.456 --> 00:33:00.906 A:middle
reliably and repeatedly

00:33:00.906 --> 00:33:03.156 A:middle
reproduce our workloads and

00:33:03.446 --> 00:33:04.646 A:middle
profile them early and often in

00:33:04.646 --> 00:33:05.456 A:middle
our development cycle.

00:33:07.256 --> 00:33:09.076 A:middle
Today, we've largely

00:33:09.076 --> 00:33:10.656 A:middle
investigated the kinds of

00:33:10.656 --> 00:33:12.036 A:middle
performance issues that arise

00:33:12.036 --> 00:33:13.706 A:middle
from high or inappropriately

00:33:13.706 --> 00:33:15.276 A:middle
placed CPU utilization.

00:33:16.016 --> 00:33:17.506 A:middle
But Instruments has numerous

00:33:17.506 --> 00:33:19.276 A:middle
templates which can help answer

00:33:19.276 --> 00:33:20.516 A:middle
performance questions about

00:33:20.516 --> 00:33:21.446 A:middle
other kinds of resource

00:33:21.446 --> 00:33:22.016 A:middle
utilization.

00:33:22.746 --> 00:33:24.466 A:middle
We've got a template for file

00:33:24.496 --> 00:33:25.456 A:middle
and disc usage.

00:33:26.286 --> 00:33:27.836 A:middle
We've got another template for

00:33:27.836 --> 00:33:29.106 A:middle
network utilization.

00:33:29.306 --> 00:33:30.336 A:middle
And there's another template

00:33:30.826 --> 00:33:32.036 A:middle
that'll help you understand the

00:33:32.036 --> 00:33:33.006 A:middle
interaction between your

00:33:33.006 --> 00:33:34.506 A:middle
application and the operating

00:33:34.506 --> 00:33:35.956 A:middle
system or other processes

00:33:36.276 --> 00:33:37.136 A:middle
running on the OS.

00:33:37.796 --> 00:33:38.876 A:middle
But that's not all.

00:33:39.806 --> 00:33:40.776 A:middle
Instruments has some really

00:33:40.776 --> 00:33:42.726 A:middle
advanced features such as Custom

00:33:42.726 --> 00:33:43.176 A:middle
Instruments.

00:33:43.426 --> 00:33:45.076 A:middle
If you're a framework author,

00:33:45.076 --> 00:33:46.386 A:middle
for instance, and would like

00:33:46.956 --> 00:33:49.006 A:middle
your clients of your APIs to be

00:33:49.006 --> 00:33:50.116 A:middle
able to answer performance

00:33:50.116 --> 00:33:51.126 A:middle
questions about how they're

00:33:51.126 --> 00:33:53.946 A:middle
using your framework, then you

00:33:53.946 --> 00:33:56.236 A:middle
can provide them with a Custom

00:33:56.236 --> 00:33:57.176 A:middle
Instruments package.

00:33:57.716 --> 00:34:00.566 A:middle
You could also create Custom

00:33:57.716 --> 00:34:00.566 A:middle
You could also create Custom

00:34:00.606 --> 00:34:02.226 A:middle
Instruments templates, which

00:34:02.226 --> 00:34:03.806 A:middle
assemble together a different

00:34:03.806 --> 00:34:06.396 A:middle
collection of the Instruments in

00:34:06.396 --> 00:34:08.436 A:middle
the Instruments app to help

00:34:08.436 --> 00:34:09.996 A:middle
answer a particular performance

00:34:09.996 --> 00:34:10.326 A:middle
question.

00:34:12.456 --> 00:34:13.966 A:middle
Coming out of this presentation,

00:34:14.326 --> 00:34:15.556 A:middle
I'd really love for you all to

00:34:15.556 --> 00:34:17.676 A:middle
start Profiling your code early

00:34:17.676 --> 00:34:18.856 A:middle
and often in your development

00:34:18.856 --> 00:34:19.176 A:middle
cycle.

00:34:19.716 --> 00:34:21.466 A:middle
And please try to out

00:34:21.466 --> 00:34:22.476 A:middle
Instruments 11 today.

00:34:22.835 --> 00:34:24.235 A:middle
It's packed with some great new

00:34:24.235 --> 00:34:26.496 A:middle
features such as Track Pinning

00:34:26.775 --> 00:34:28.255 A:middle
and Hierarchical Views which I

00:34:28.255 --> 00:34:29.525 A:middle
think will make it really fun to

00:34:29.525 --> 00:34:29.835 A:middle
use.

00:34:30.416 --> 00:34:33.306 A:middle
We've got comprehensive

00:34:33.306 --> 00:34:34.516 A:middle
documentation of the advanced

00:34:34.516 --> 00:34:36.025 A:middle
features and certain events

00:34:36.025 --> 00:34:38.116 A:middle
workflows of Instruments in our

00:34:38.116 --> 00:34:39.706 A:middle
session notes, and there's some

00:34:39.706 --> 00:34:40.835 A:middle
great talks from the previous

00:34:40.835 --> 00:34:41.496 A:middle
year's conference.

00:34:42.056 --> 00:34:42.735 A:middle
Thank you very much.

00:34:43.516 --> 00:34:49.505 A:middle
[ Applause ]
