WEBVTT

00:00:01.516 --> 00:00:05.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:15.076 A:middle
[ Applause ]

00:00:15.576 --> 00:00:16.136 A:middle
&gt;&gt; Hi, everyone.

00:00:17.146 --> 00:00:18.806 A:middle
I'm Jacob Xiao and I'll be

00:00:18.806 --> 00:00:20.366 A:middle
joined later by Kyle Macomber.

00:00:20.956 --> 00:00:22.256 A:middle
We're so excited to show you

00:00:22.256 --> 00:00:24.766 A:middle
SwiftUI, a revolutionary new way

00:00:24.766 --> 00:00:26.306 A:middle
to build better apps faster.

00:00:26.916 --> 00:00:29.516 A:middle
We think the best way to learn

00:00:29.516 --> 00:00:31.326 A:middle
about Swift UI is to see it in

00:00:31.326 --> 00:00:33.986 A:middle
action by building an app.

00:00:33.986 --> 00:00:35.756 A:middle
Using SwiftUI feels like magic,

00:00:36.286 --> 00:00:37.386 A:middle
but to make it clear that I

00:00:37.386 --> 00:00:38.176 A:middle
don't have anything up my

00:00:38.176 --> 00:00:39.906 A:middle
sleeves, I want to go through

00:00:39.906 --> 00:00:41.556 A:middle
the entire process of creating

00:00:41.556 --> 00:00:43.436 A:middle
an app in SwiftUI starting from

00:00:43.436 --> 00:00:43.956 A:middle
scratch.

00:00:45.356 --> 00:00:46.236 A:middle
So what kind of an app are we

00:00:46.236 --> 00:00:46.706 A:middle
going to make?

00:00:47.356 --> 00:00:48.506 A:middle
Well, let me set the stage for

00:00:48.506 --> 00:00:48.636 A:middle
you.

00:00:49.436 --> 00:00:52.166 A:middle
Anybody here hate meetings?

00:00:52.166 --> 00:00:53.926 A:middle
Yeah? Well, so do we.

00:00:54.846 --> 00:00:55.726 A:middle
But Kyle and I have found

00:00:55.726 --> 00:00:56.816 A:middle
something that makes meetings

00:00:56.816 --> 00:00:58.486 A:middle
more bearable, and that's having

00:00:58.486 --> 00:00:59.736 A:middle
them in amazing, fancy

00:00:59.736 --> 00:01:00.396 A:middle
conference rooms.

00:00:59.736 --> 00:01:00.396 A:middle
conference rooms.

00:01:01.566 --> 00:01:02.756 A:middle
So we've been making a list of

00:01:02.756 --> 00:01:03.936 A:middle
all of the best conference rooms

00:01:03.936 --> 00:01:05.546 A:middle
we can find and we want to make

00:01:05.546 --> 00:01:06.886 A:middle
an app for it.

00:01:07.716 --> 00:01:10.396 A:middle
So let's dive in.

00:01:10.606 --> 00:01:12.926 A:middle
Okay. I'll start by creating a

00:01:12.926 --> 00:01:13.336 A:middle
new project.

00:01:17.076 --> 00:01:18.906 A:middle
And we'll call it Rooms.

00:01:22.046 --> 00:01:22.756 A:middle
And I'll make sure that Use

00:01:22.756 --> 00:01:23.546 A:middle
SwiftUI is checked.

00:01:30.046 --> 00:01:32.086 A:middle
Now Xcode has started us off

00:01:32.706 --> 00:01:34.776 A:middle
with a view, with the view that

00:01:34.776 --> 00:01:36.006 A:middle
we can use to start building our

00:01:36.006 --> 00:01:36.296 A:middle
UI.

00:01:40.576 --> 00:01:42.046 A:middle
Our code is over here on the

00:01:42.046 --> 00:01:42.316 A:middle
left.

00:01:43.096 --> 00:01:45.476 A:middle
And on the right is the Canvas.

00:01:46.556 --> 00:01:47.816 A:middle
And if you're familiar with

00:01:47.816 --> 00:01:48.666 A:middle
Interface Builder or

00:01:48.666 --> 00:01:50.566 A:middle
Storyboards, you may think that

00:01:50.566 --> 00:01:51.396 A:middle
there's nothing new here.

00:01:51.956 --> 00:01:53.566 A:middle
Some code on one side and a

00:01:53.566 --> 00:01:54.646 A:middle
visual Canvas on the other,

00:01:54.806 --> 00:01:55.026 A:middle
right?

00:01:56.206 --> 00:01:57.156 A:middle
Well, there's a very important

00:01:57.156 --> 00:01:57.476 A:middle
difference.

00:01:58.576 --> 00:02:01.216 A:middle
With Storyboards, you need to

00:01:58.576 --> 00:02:01.216 A:middle
With Storyboards, you need to

00:02:01.216 --> 00:02:02.726 A:middle
choose between the benefits of

00:02:02.726 --> 00:02:04.476 A:middle
using a visual editor, or the

00:02:04.476 --> 00:02:06.126 A:middle
benefits of creating your UI in

00:02:06.126 --> 00:02:06.436 A:middle
code.

00:02:07.236 --> 00:02:08.895 A:middle
And if you choose one and change

00:02:08.895 --> 00:02:10.455 A:middle
your mind later, then you have

00:02:10.455 --> 00:02:11.406 A:middle
to start all over again.

00:02:11.406 --> 00:02:14.046 A:middle
But with SwiftUI, that problem

00:02:14.046 --> 00:02:14.546 A:middle
is gone.

00:02:15.416 --> 00:02:17.136 A:middle
Now your view definition is

00:02:17.136 --> 00:02:18.946 A:middle
always Swift's code and you can

00:02:18.946 --> 00:02:20.666 A:middle
always choose to edit the code

00:02:20.846 --> 00:02:22.726 A:middle
directly or to use the visual

00:02:22.726 --> 00:02:23.106 A:middle
editor.

00:02:23.106 --> 00:02:24.376 A:middle
And you can always go back and

00:02:24.376 --> 00:02:24.756 A:middle
forth.

00:02:25.946 --> 00:02:27.326 A:middle
So if we select something in the

00:02:27.326 --> 00:02:29.986 A:middle
Canvas, then that selection is

00:02:29.986 --> 00:02:31.136 A:middle
reflected in the code as well.

00:02:32.126 --> 00:02:33.306 A:middle
And if you change something in

00:02:33.306 --> 00:02:35.756 A:middle
the code, then that change is

00:02:35.756 --> 00:02:36.986 A:middle
reflected in the Canvas as well.

00:02:37.486 --> 00:02:38.696 A:middle
They work together seamlessly.

00:02:38.696 --> 00:02:41.856 A:middle
So let me tell you a little more

00:02:41.856 --> 00:02:42.586 A:middle
about how it works.

00:02:43.666 --> 00:02:45.546 A:middle
The Canvas shows us previews of

00:02:45.546 --> 00:02:46.166 A:middle
our view code.

00:02:46.766 --> 00:02:48.296 A:middle
And it even helps us edit and

00:02:48.296 --> 00:02:49.136 A:middle
learn about that code.

00:02:50.336 --> 00:02:52.036 A:middle
Xcode shows these previews by

00:02:52.036 --> 00:02:53.856 A:middle
compiling our real code and

00:02:53.856 --> 00:02:55.106 A:middle
running it to generate a result.

00:02:56.226 --> 00:02:57.226 A:middle
But one of my favorite things

00:02:57.226 --> 00:02:58.556 A:middle
about previews is that they're

00:02:58.556 --> 00:03:00.406 A:middle
also created using SwiftUI code.

00:02:58.556 --> 00:03:00.406 A:middle
also created using SwiftUI code.

00:03:00.936 --> 00:03:02.296 A:middle
In this case, the code right

00:03:02.296 --> 00:03:02.506 A:middle
here.

00:03:03.166 --> 00:03:06.036 A:middle
And later on, we'll see how that

00:03:06.036 --> 00:03:07.196 A:middle
gives us a lot of power to

00:03:07.196 --> 00:03:08.436 A:middle
customize our previews.

00:03:08.436 --> 00:03:11.516 A:middle
Now our app is going to show a

00:03:11.516 --> 00:03:13.216 A:middle
list of conference rooms, so

00:03:13.216 --> 00:03:14.056 A:middle
let's make the cell for our

00:03:14.056 --> 00:03:14.396 A:middle
list.

00:03:15.016 --> 00:03:17.296 A:middle
I'm going to add another piece

00:03:17.296 --> 00:03:19.046 A:middle
of text under this one to show

00:03:19.046 --> 00:03:20.416 A:middle
more detail about each room.

00:03:21.496 --> 00:03:23.396 A:middle
And I'm going to add it by just

00:03:23.396 --> 00:03:24.756 A:middle
dragging it out onto my Canvas.

00:03:25.456 --> 00:03:28.336 A:middle
And Xcode even shows me what

00:03:28.336 --> 00:03:29.626 A:middle
will happen when I place it at

00:03:29.626 --> 00:03:30.396 A:middle
different locations.

00:03:31.106 --> 00:03:33.406 A:middle
Now when I drop it in, the

00:03:33.406 --> 00:03:35.336 A:middle
preview updates to show my new

00:03:35.336 --> 00:03:38.166 A:middle
text, but even better, Xcode has

00:03:38.166 --> 00:03:39.666 A:middle
actually edited my code to add

00:03:39.666 --> 00:03:40.246 A:middle
that text.

00:03:41.396 --> 00:03:42.816 A:middle
Xcode has embedded these views

00:03:43.386 --> 00:03:44.876 A:middle
into a Vstack to get the layout

00:03:44.876 --> 00:03:45.336 A:middle
that I want.

00:03:46.456 --> 00:03:48.196 A:middle
Now a Vstack or vertical stack

00:03:48.526 --> 00:03:49.646 A:middle
is one of the common layout

00:03:49.686 --> 00:03:50.776 A:middle
elements in SwiftUI.

00:03:51.696 --> 00:03:52.786 A:middle
It lets you stack views

00:03:52.786 --> 00:03:53.196 A:middle
vertically.

00:03:53.196 --> 00:03:55.396 A:middle
And there's also an Hstack that

00:03:55.396 --> 00:03:56.546 A:middle
stacks views horizontally.

00:03:57.616 --> 00:03:58.816 A:middle
And these stacks are containers.

00:03:58.936 --> 00:04:00.566 A:middle
I can place any views that I

00:03:58.936 --> 00:04:00.566 A:middle
I can place any views that I

00:04:00.566 --> 00:04:03.646 A:middle
want inside of them.

00:04:03.856 --> 00:04:05.046 A:middle
Now I'm going to replace this

00:04:05.046 --> 00:04:06.426 A:middle
placeholder that Xcode has given

00:04:06.426 --> 00:04:07.636 A:middle
me with some more information

00:04:07.676 --> 00:04:08.486 A:middle
about the room.

00:04:09.496 --> 00:04:10.516 A:middle
We'll show the number of people

00:04:10.516 --> 00:04:10.996 A:middle
that it can hold.

00:04:11.566 --> 00:04:12.756 A:middle
And for now, let's just use a

00:04:12.756 --> 00:04:13.536 A:middle
hard-coded value.

00:04:14.086 --> 00:04:17.055 A:middle
Next, let's add an image next to

00:04:17.055 --> 00:04:17.606 A:middle
our text.

00:04:18.206 --> 00:04:20.606 A:middle
I can make edits in the code

00:04:20.906 --> 00:04:22.146 A:middle
just as easily as in the editor.

00:04:22.776 --> 00:04:24.366 A:middle
So let's embed our view in an

00:04:24.366 --> 00:04:24.656 A:middle
Hstack.

00:04:25.566 --> 00:04:27.246 A:middle
I can Command-click on my view

00:04:28.016 --> 00:04:29.456 A:middle
and choose Embed an H Stack.

00:04:31.036 --> 00:04:32.336 A:middle
And Xcode has updated the code

00:04:32.336 --> 00:04:33.006 A:middle
to do just that.

00:04:34.176 --> 00:04:35.806 A:middle
Now I can add an image next to

00:04:35.806 --> 00:04:36.416 A:middle
my Vstack.

00:04:37.346 --> 00:04:38.886 A:middle
We'll add some assets in a bit,

00:04:39.086 --> 00:04:40.816 A:middle
but for now I'll just use an SF

00:04:40.816 --> 00:04:42.316 A:middle
symbol image to get something up

00:04:42.316 --> 00:04:43.000 A:middle
and running.

00:04:47.236 --> 00:04:49.546 A:middle
SF symbols are new in iOS 13.

00:04:49.966 --> 00:04:50.696 A:middle
They're a rich set of

00:04:50.696 --> 00:04:52.066 A:middle
Apple-provided images that you

00:04:52.066 --> 00:04:53.526 A:middle
can use in your app.

00:04:54.286 --> 00:04:55.836 A:middle
And already we have a basic

00:04:55.836 --> 00:04:56.536 A:middle
version of our cell.

00:04:57.656 --> 00:04:59.376 A:middle
Now, I'll use the Canvas to

00:04:59.376 --> 00:05:00.576 A:middle
style the cell the way I want.

00:04:59.376 --> 00:05:00.576 A:middle
style the cell the way I want.

00:05:02.026 --> 00:05:03.496 A:middle
I can Command-click on my stack

00:05:04.406 --> 00:05:06.416 A:middle
and choose Inspect to see some

00:05:06.416 --> 00:05:07.296 A:middle
of the properties that I can

00:05:07.296 --> 00:05:08.116 A:middle
change for this stack.

00:05:09.376 --> 00:05:10.676 A:middle
I'm going to set its alignment

00:05:10.736 --> 00:05:11.296 A:middle
to be leading.

00:05:11.836 --> 00:05:14.746 A:middle
And, once again, Xcode has

00:05:14.746 --> 00:05:16.236 A:middle
updated my code to make that

00:05:16.236 --> 00:05:16.626 A:middle
change.

00:05:17.266 --> 00:05:19.886 A:middle
Now, I can also Command-click on

00:05:19.886 --> 00:05:23.876 A:middle
my text to inspect that as well.

00:05:24.016 --> 00:05:24.986 A:middle
And let's change this to be a

00:05:25.036 --> 00:05:25.636 A:middle
smaller font.

00:05:25.736 --> 00:05:27.936 A:middle
I'm going to use sub-headline.

00:05:28.606 --> 00:05:30.936 A:middle
And one of the great things

00:05:31.006 --> 00:05:33.046 A:middle
about Xcode modifying my code is

00:05:33.046 --> 00:05:34.156 A:middle
it helps me to learn about

00:05:34.216 --> 00:05:34.546 A:middle
SwiftUI.

00:05:34.546 --> 00:05:37.776 A:middle
For example, here it's added

00:05:37.776 --> 00:05:39.136 A:middle
this code to change the font.

00:05:40.006 --> 00:05:41.156 A:middle
We call these kinds of methods

00:05:41.356 --> 00:05:43.056 A:middle
modifiers and they're used in

00:05:43.056 --> 00:05:44.766 A:middle
SwiftUI to customize the way

00:05:44.766 --> 00:05:46.046 A:middle
your views look or behave.

00:05:47.546 --> 00:05:48.506 A:middle
I'm going to add another

00:05:48.506 --> 00:05:50.826 A:middle
modifier in code to set the

00:05:50.826 --> 00:05:53.216 A:middle
foreground color to be a

00:05:53.216 --> 00:05:54.000 A:middle
secondary color.

00:05:58.046 --> 00:06:00.366 A:middle
Okay. Now that I have my cell,

00:05:58.046 --> 00:06:00.366 A:middle
Okay. Now that I have my cell,

00:06:00.716 --> 00:06:01.596 A:middle
let's put it into a list.

00:06:02.806 --> 00:06:03.946 A:middle
To do that, I'm going to

00:06:03.946 --> 00:06:06.366 A:middle
Command-click on our cell and

00:06:06.366 --> 00:06:07.656 A:middle
just choose Convert To List.

00:06:08.796 --> 00:06:11.086 A:middle
This wraps my cell in a list and

00:06:11.086 --> 00:06:12.896 A:middle
shows five iterations of it.

00:06:13.516 --> 00:06:18.566 A:middle
[ Applause ]

00:06:19.066 --> 00:06:21.156 A:middle
It's great to be able to do this

00:06:21.156 --> 00:06:21.566 A:middle
so easily.

00:06:21.566 --> 00:06:22.566 A:middle
And this code is all that I need

00:06:22.706 --> 00:06:23.626 A:middle
to show a list in my app.

00:06:23.976 --> 00:06:24.946 A:middle
There's no delegates or data

00:06:24.946 --> 00:06:26.686 A:middle
sources necessary, just views

00:06:26.686 --> 00:06:28.786 A:middle
inside of a list.

00:06:29.056 --> 00:06:30.416 A:middle
Next, let's hook this up to some

00:06:30.416 --> 00:06:30.676 A:middle
data.

00:06:31.396 --> 00:06:35.256 A:middle
I'm going to drag in some assets

00:06:35.446 --> 00:06:36.666 A:middle
and a model file that I created

00:06:36.666 --> 00:06:36.986 A:middle
earlier.

00:06:43.076 --> 00:06:44.556 A:middle
Now my model has a few fields of

00:06:44.556 --> 00:06:45.666 A:middle
information that we'll use.

00:06:46.736 --> 00:06:48.156 A:middle
And to use this in a list in

00:06:48.156 --> 00:06:49.846 A:middle
SwiftUI, I just need to make

00:06:49.846 --> 00:06:51.106 A:middle
this type identifiable.

00:06:56.046 --> 00:06:57.526 A:middle
This lets Lists know which items

00:06:57.526 --> 00:06:58.226 A:middle
are coming and going.

00:06:59.036 --> 00:07:00.796 A:middle
And all I need is an ID property

00:06:59.036 --> 00:07:00.796 A:middle
And all I need is an ID property

00:07:00.926 --> 00:07:01.576 A:middle
which we already have.

00:07:02.286 --> 00:07:04.486 A:middle
Now this model file also

00:07:04.486 --> 00:07:05.866 A:middle
includes some test data that I

00:07:05.866 --> 00:07:08.906 A:middle
can use for debugging my app.

00:07:09.166 --> 00:07:10.296 A:middle
Now let's go back to our view

00:07:10.986 --> 00:07:13.256 A:middle
and let's pass in our data.

00:07:14.646 --> 00:07:17.526 A:middle
I'll add a property for my

00:07:18.236 --> 00:07:18.406 A:middle
rooms.

00:07:21.146 --> 00:07:22.246 A:middle
And one of the great things

00:07:22.246 --> 00:07:23.596 A:middle
about previews is that they can

00:07:23.596 --> 00:07:24.556 A:middle
use their own test data.

00:07:25.286 --> 00:07:26.536 A:middle
So I'll just pass in my test

00:07:26.536 --> 00:07:27.256 A:middle
data right here.

00:07:31.066 --> 00:07:31.756 A:middle
Now you may have noticed that

00:07:31.756 --> 00:07:33.246 A:middle
this banner appeared above my

00:07:33.246 --> 00:07:33.626 A:middle
preview.

00:07:34.886 --> 00:07:36.096 A:middle
When I make larger changes to my

00:07:36.096 --> 00:07:37.776 A:middle
types like adding this rooms

00:07:37.776 --> 00:07:39.716 A:middle
property to our view, Xcode

00:07:39.716 --> 00:07:41.126 A:middle
pauses the previews until I'm

00:07:41.126 --> 00:07:42.296 A:middle
ready to have them resume

00:07:42.296 --> 00:07:42.716 A:middle
updating.

00:07:43.216 --> 00:07:44.736 A:middle
And I can just click button to

00:07:44.736 --> 00:07:45.186 A:middle
resume.

00:07:45.656 --> 00:07:48.086 A:middle
Next, let's use our data to

00:07:48.086 --> 00:07:48.766 A:middle
drive the list.

00:07:49.506 --> 00:07:50.986 A:middle
We'll pass in our rooms to the

00:07:50.986 --> 00:07:54.116 A:middle
list and then I'll update our

00:07:54.116 --> 00:07:55.736 A:middle
text to show the room's name.

00:07:56.596 --> 00:07:58.326 A:middle
And we'll also use the real

00:07:58.326 --> 00:08:01.206 A:middle
capacity right here in our text.

00:07:58.326 --> 00:08:01.206 A:middle
capacity right here in our text.

00:08:07.056 --> 00:08:07.856 A:middle
And now that we have real

00:08:07.856 --> 00:08:09.566 A:middle
images, let's also use our Rooms

00:08:09.646 --> 00:08:10.676 A:middle
thumbnail for the image.

00:08:17.056 --> 00:08:17.176 A:middle
Great.

00:08:18.516 --> 00:08:25.546 A:middle
[ Applause ]

00:08:26.046 --> 00:08:26.626 A:middle
And you may have noticed the

00:08:26.626 --> 00:08:27.576 A:middle
subtle change that happened to

00:08:27.576 --> 00:08:28.446 A:middle
our list when we did this.

00:08:28.546 --> 00:08:30.826 A:middle
When we started, our cells were

00:08:30.826 --> 00:08:32.265 A:middle
the standard 44 points tall.

00:08:32.265 --> 00:08:34.015 A:middle
But when we changed to these

00:08:34.015 --> 00:08:35.706 A:middle
larger images, the cells

00:08:35.706 --> 00:08:37.176 A:middle
automatically expanded to make

00:08:37.176 --> 00:08:38.596 A:middle
sure those images fit without

00:08:38.596 --> 00:08:39.976 A:middle
any extra work.

00:08:40.081 --> 00:08:42.081 A:middle
[ Applause ]

00:08:42.145 --> 00:08:42.655 A:middle
It's pretty cool.

00:08:44.030 --> 00:08:46.031 A:middle
[ Applause ]

00:08:46.046 --> 00:08:47.066 A:middle
And now that I have these images

00:08:47.066 --> 00:08:48.456 A:middle
in context, they look a little

00:08:48.456 --> 00:08:48.916 A:middle
bit sharp.

00:08:49.746 --> 00:08:50.956 A:middle
So let's add a corner radius to

00:08:50.956 --> 00:08:52.066 A:middle
our image using another

00:08:52.066 --> 00:08:52.636 A:middle
modifier.

00:08:53.656 --> 00:08:54.846 A:middle
And if you're not sure about

00:08:54.846 --> 00:08:56.096 A:middle
what modifiers are available,

00:08:56.806 --> 00:08:58.466 A:middle
you can view and filter a list

00:08:58.466 --> 00:08:59.296 A:middle
of them right here in the

00:08:59.296 --> 00:08:59.716 A:middle
library.

00:09:00.806 --> 00:09:02.596 A:middle
Let's find Corner Radius and

00:09:02.596 --> 00:09:03.686 A:middle
we'll just drag it onto our

00:09:04.566 --> 00:09:04.696 A:middle
image.

00:09:05.516 --> 00:09:12.606 A:middle
[ Applause ]

00:09:13.106 --> 00:09:15.056 A:middle
Then we can tweak the values.

00:09:15.056 --> 00:09:17.296 A:middle
That looks a little bit too big.

00:09:17.296 --> 00:09:17.526 A:middle
Great.

00:09:18.206 --> 00:09:19.626 A:middle
And now that our cells and our

00:09:19.626 --> 00:09:21.486 A:middle
lists are looking good, the next

00:09:21.486 --> 00:09:22.706 A:middle
thing that we need is to be able

00:09:22.706 --> 00:09:23.996 A:middle
to tap on a cell to see more

00:09:23.996 --> 00:09:24.426 A:middle
details.

00:09:25.606 --> 00:09:27.406 A:middle
To support this, let's wrap our

00:09:27.406 --> 00:09:28.676 A:middle
list in a navigation view.

00:09:30.406 --> 00:09:31.566 A:middle
A navigation view shows a

00:09:31.566 --> 00:09:33.706 A:middle
navigation bar and also has a

00:09:33.776 --> 00:09:34.986 A:middle
stack to push views onto.

00:09:36.306 --> 00:09:37.736 A:middle
Let's also set a navigation bar

00:09:37.736 --> 00:09:39.826 A:middle
title and we'll just use some

00:09:39.826 --> 00:09:42.436 A:middle
text that says Rooms to show

00:09:42.436 --> 00:09:43.616 A:middle
Rooms in our navigation bar.

00:09:44.306 --> 00:09:47.896 A:middle
Now let's set up our cell to

00:09:47.896 --> 00:09:48.796 A:middle
push onto this stack.

00:09:50.076 --> 00:09:51.986 A:middle
To do that, I'll wrap our cells

00:09:51.986 --> 00:09:53.326 A:middle
content in a Navigation button.

00:09:53.966 --> 00:09:56.816 A:middle
A Navigation button takes a

00:09:56.816 --> 00:09:58.796 A:middle
destination which is a view that

00:09:58.796 --> 00:09:59.826 A:middle
will push onto the stack.

00:10:00.716 --> 00:10:02.066 A:middle
And to start with, we'll just

00:10:02.066 --> 00:10:03.436 A:middle
use some text that shows the

00:10:03.436 --> 00:10:04.056 A:middle
room's name.

00:10:05.126 --> 00:10:06.916 A:middle
Then we'll put all of our cell's

00:10:06.916 --> 00:10:08.406 A:middle
content inside of that

00:10:08.406 --> 00:10:10.636 A:middle
navigation button and we're

00:10:10.836 --> 00:10:11.456 A:middle
ready to go.

00:10:12.466 --> 00:10:13.796 A:middle
And notice that our UI has

00:10:13.796 --> 00:10:15.206 A:middle
updated to automatically show

00:10:15.206 --> 00:10:16.206 A:middle
these UI indicators.

00:10:17.156 --> 00:10:18.516 A:middle
SwiftUI handles details like

00:10:18.516 --> 00:10:19.936 A:middle
this for me automatically so

00:10:19.936 --> 00:10:21.256 A:middle
that my UI automatically looks

00:10:21.256 --> 00:10:21.866 A:middle
right by default.

00:10:22.546 --> 00:10:25.026 A:middle
Now let's also check that the

00:10:25.076 --> 00:10:25.986 A:middle
cell behaves correctly.

00:10:26.796 --> 00:10:27.906 A:middle
I can just click on this play

00:10:27.906 --> 00:10:29.676 A:middle
button in my preview, which

00:10:29.676 --> 00:10:30.556 A:middle
takes me into Live Mode.

00:10:31.486 --> 00:10:33.066 A:middle
And when I do this, Xcode is

00:10:33.066 --> 00:10:34.856 A:middle
compiling my code, sending it

00:10:34.856 --> 00:10:36.276 A:middle
over to the Simulator, running

00:10:36.276 --> 00:10:37.876 A:middle
it for me and showing the result

00:10:37.956 --> 00:10:39.016 A:middle
of all of that right here in the

00:10:39.016 --> 00:10:40.596 A:middle
Canvas, which means I can

00:10:40.596 --> 00:10:41.456 A:middle
interact with my view.

00:10:42.446 --> 00:10:44.146 A:middle
So I can tap on a cell to make

00:10:44.146 --> 00:10:45.696 A:middle
sure that everything pushes and

00:10:45.696 --> 00:10:47.266 A:middle
pops as I expect.

00:10:48.256 --> 00:10:50.256 A:middle
And if I swipe to pop, you'll

00:10:50.256 --> 00:10:51.776 A:middle
notice an advanced behavior that

00:10:51.776 --> 00:10:52.656 A:middle
SwiftUI has given me

00:10:52.656 --> 00:10:53.286 A:middle
automatically.

00:10:53.896 --> 00:10:56.016 A:middle
Our cells stay highlighted, and

00:10:56.016 --> 00:10:57.056 A:middle
as I swipe, they are

00:10:57.056 --> 00:10:58.316 A:middle
interactively un-highlight it

00:10:58.586 --> 00:10:59.886 A:middle
without us doing any extra work.

00:11:00.516 --> 00:11:08.206 A:middle
[ Applause ]

00:11:08.706 --> 00:11:10.396 A:middle
Okay, so we've got our list and

00:11:10.396 --> 00:11:11.496 A:middle
it's working with its cells.

00:11:12.256 --> 00:11:13.406 A:middle
But this view code is a little

00:11:13.406 --> 00:11:14.086 A:middle
bit large now.

00:11:14.856 --> 00:11:15.826 A:middle
And I'd really like to factor

00:11:15.826 --> 00:11:17.346 A:middle
the cell out to be its own view.

00:11:17.976 --> 00:11:19.346 A:middle
And Xcode helps me do this with

00:11:19.346 --> 00:11:20.416 A:middle
one simple operation.

00:11:21.206 --> 00:11:22.796 A:middle
I can just command click on the

00:11:22.796 --> 00:11:24.206 A:middle
view that I want and choose

00:11:24.206 --> 00:11:26.716 A:middle
Extract Subview.

00:11:27.016 --> 00:11:28.396 A:middle
[ Applause ]

00:11:28.396 --> 00:11:28.976 A:middle
It's fantastic.

00:11:29.516 --> 00:11:32.756 A:middle
[ Applause ]

00:11:33.256 --> 00:11:34.486 A:middle
All of my view code gets

00:11:34.486 --> 00:11:36.246 A:middle
extracted out down here and I

00:11:36.246 --> 00:11:37.426 A:middle
even get to choose the name for

00:11:37.426 --> 00:11:37.936 A:middle
my new view.

00:11:38.366 --> 00:11:40.796 A:middle
Let's call it Room Cell.

00:11:41.516 --> 00:11:44.036 A:middle
[ Applause ]

00:11:44.536 --> 00:11:45.706 A:middle
Thank you.

00:11:45.736 --> 00:11:46.986 A:middle
Now, let's also add a property

00:11:47.266 --> 00:11:49.326 A:middle
for our room.

00:11:49.406 --> 00:11:50.656 A:middle
And we'll pass it in right here.

00:11:54.136 --> 00:11:55.626 A:middle
This is a fantastic workflow

00:11:55.626 --> 00:11:56.056 A:middle
improvement.

00:11:56.426 --> 00:11:58.056 A:middle
And with SwiftUI, views are

00:11:58.056 --> 00:11:59.316 A:middle
really lightweight so you don't

00:11:59.316 --> 00:12:00.496 A:middle
have to worry about creating

00:11:59.316 --> 00:12:00.496 A:middle
have to worry about creating

00:12:00.496 --> 00:12:01.686 A:middle
extra views to better

00:12:01.686 --> 00:12:02.896 A:middle
encapsulate or separate your

00:12:02.896 --> 00:12:03.186 A:middle
logic.

00:12:03.856 --> 00:12:06.676 A:middle
Okay, next let's build our

00:12:06.676 --> 00:12:07.246 A:middle
detail view.

00:12:07.906 --> 00:12:09.716 A:middle
I'm going to create a new view

00:12:10.736 --> 00:12:11.896 A:middle
and make sure to use the SwiftUI

00:12:11.896 --> 00:12:12.266 A:middle
Template.

00:12:12.886 --> 00:12:15.336 A:middle
And let's call this new view

00:12:15.486 --> 00:12:15.976 A:middle
Room Detail.

00:12:20.216 --> 00:12:21.946 A:middle
Xcode has automatically given me

00:12:21.946 --> 00:12:24.006 A:middle
a new ViewStruct and also the

00:12:24.006 --> 00:12:25.406 A:middle
preview code to create it.

00:12:26.386 --> 00:12:27.456 A:middle
Now since I want this detail

00:12:27.456 --> 00:12:28.626 A:middle
view to show more information

00:12:28.626 --> 00:12:30.186 A:middle
about my room, I'll add a

00:12:30.186 --> 00:12:30.976 A:middle
property for the room.

00:12:33.466 --> 00:12:34.876 A:middle
And just like I did before, I'll

00:12:34.876 --> 00:12:36.686 A:middle
update my preview code to pass

00:12:36.686 --> 00:12:38.496 A:middle
in one of our rooms from their

00:12:38.496 --> 00:12:39.686 A:middle
test data.

00:12:43.206 --> 00:12:44.946 A:middle
Then let's build our UI.

00:12:46.186 --> 00:12:48.396 A:middle
We use an image and we'll show

00:12:48.686 --> 00:12:49.516 A:middle
the room's image name.

00:12:53.396 --> 00:12:54.526 A:middle
Okay, now we're showing our

00:12:54.526 --> 00:12:55.856 A:middle
image but it's a little bit too

00:12:55.856 --> 00:12:56.576 A:middle
large for our view.

00:12:57.616 --> 00:12:59.496 A:middle
By default, SwiftUI shows all

00:12:59.496 --> 00:13:00.606 A:middle
images at the size of their

00:12:59.496 --> 00:13:00.606 A:middle
images at the size of their

00:13:00.606 --> 00:13:02.336 A:middle
contents to prevent visual

00:13:02.336 --> 00:13:03.836 A:middle
artifacts from scaling the image

00:13:03.836 --> 00:13:04.496 A:middle
up or down.

00:13:05.416 --> 00:13:06.896 A:middle
But for photos like this one, we

00:13:07.366 --> 00:13:08.546 A:middle
want to be able to resize them

00:13:08.546 --> 00:13:08.896 A:middle
down.

00:13:09.276 --> 00:13:10.676 A:middle
And we can use an image-specific

00:13:11.046 --> 00:13:13.336 A:middle
modifier called Resizable to do

00:13:13.336 --> 00:13:13.546 A:middle
that.

00:13:15.126 --> 00:13:16.266 A:middle
So I'll just drag this onto our

00:13:16.266 --> 00:13:19.866 A:middle
view and all right, now it's

00:13:19.866 --> 00:13:21.846 A:middle
resizing to fill the size that

00:13:21.846 --> 00:13:22.156 A:middle
we have.

00:13:22.556 --> 00:13:23.986 A:middle
But really we want it to

00:13:24.186 --> 00:13:25.456 A:middle
maintain this original aspect

00:13:25.456 --> 00:13:25.866 A:middle
ratio.

00:13:26.396 --> 00:13:27.516 A:middle
And we can do that with another

00:13:27.516 --> 00:13:29.766 A:middle
modifier, this time aspect

00:13:29.766 --> 00:13:29.976 A:middle
ratio.

00:13:33.066 --> 00:13:34.346 A:middle
And the aspect ratio modifier

00:13:34.386 --> 00:13:36.126 A:middle
lets me choose between .fill,

00:13:36.976 --> 00:13:38.536 A:middle
which expands the image to take

00:13:38.536 --> 00:13:41.346 A:middle
up its entire frame, or .fit,

00:13:42.616 --> 00:13:43.846 A:middle
which makes sure the image fits

00:13:43.846 --> 00:13:44.506 A:middle
within the frame.

00:13:47.066 --> 00:13:48.106 A:middle
And previews let me really

00:13:48.106 --> 00:13:49.316 A:middle
easily see and understand the

00:13:49.316 --> 00:13:50.076 A:middle
difference between these

00:13:50.076 --> 00:13:50.576 A:middle
different modes.

00:13:51.456 --> 00:13:53.276 A:middle
For now, let's use Fit so we can

00:13:53.276 --> 00:13:54.056 A:middle
see the full image.

00:13:55.526 --> 00:13:56.736 A:middle
Now let's go back to our list

00:13:57.396 --> 00:13:58.706 A:middle
and update our cell to push our

00:13:58.706 --> 00:13:59.376 A:middle
new detail view.

00:14:02.056 --> 00:14:03.086 A:middle
We'll create our Room Detail

00:14:03.086 --> 00:14:05.226 A:middle
view and we'll just pass in the

00:14:05.226 --> 00:14:05.716 A:middle
current room.

00:14:08.346 --> 00:14:10.076 A:middle
Now I'll switch my preview back

00:14:10.076 --> 00:14:10.666 A:middle
into live mode.

00:14:12.096 --> 00:14:13.786 A:middle
And I can tap on my cell to see

00:14:13.786 --> 00:14:14.246 A:middle
our image.

00:14:15.416 --> 00:14:16.326 A:middle
But now that I'm previewing it

00:14:16.326 --> 00:14:18.076 A:middle
here, I can see that I forgot to

00:14:18.076 --> 00:14:19.346 A:middle
set the title in the navigation

00:14:19.346 --> 00:14:19.536 A:middle
bar.

00:14:20.256 --> 00:14:21.276 A:middle
So let's go back to our detail

00:14:21.276 --> 00:14:21.956 A:middle
view and fix that.

00:14:25.286 --> 00:14:27.246 A:middle
Just like before, I can use the

00:14:27.246 --> 00:14:29.336 A:middle
navigation bar title to set our

00:14:29.336 --> 00:14:32.356 A:middle
title and we'll pass in our

00:14:32.356 --> 00:14:33.706 A:middle
room's name as the title.

00:14:34.446 --> 00:14:36.196 A:middle
But in the preview that I have

00:14:36.196 --> 00:14:37.476 A:middle
here, we're only seeing the view

00:14:37.476 --> 00:14:39.076 A:middle
itself and I'd really like to be

00:14:39.076 --> 00:14:40.146 A:middle
able to quickly verify my

00:14:40.146 --> 00:14:40.606 A:middle
change.

00:14:41.646 --> 00:14:42.886 A:middle
Well, since previews have all

00:14:42.886 --> 00:14:44.206 A:middle
the power of SwiftUI's views

00:14:44.206 --> 00:14:45.666 A:middle
available, we can do just that.

00:14:46.856 --> 00:14:49.156 A:middle
I can set up my preview to be

00:14:49.156 --> 00:14:50.426 A:middle
inside of a navigation view

00:14:51.226 --> 00:14:52.506 A:middle
using the same code that I would

00:14:52.506 --> 00:14:53.036 A:middle
anywhere else.

00:14:53.806 --> 00:14:55.706 A:middle
And now my view's preview is

00:14:55.706 --> 00:14:58.446 A:middle
inside of a navigation bar.

00:14:59.516 --> 00:15:03.776 A:middle
[ Applause ]

00:14:59.516 --> 00:15:03.776 A:middle
[ Applause ]

00:15:04.276 --> 00:15:05.376 A:middle
And now that I'm seeing it here,

00:15:05.536 --> 00:15:06.996 A:middle
this large title looks like a

00:15:06.996 --> 00:15:07.826 A:middle
little bit too much for our

00:15:07.826 --> 00:15:08.366 A:middle
detail view.

00:15:09.156 --> 00:15:10.346 A:middle
So let's update our navigation

00:15:10.346 --> 00:15:12.346 A:middle
bar title to set the display

00:15:12.346 --> 00:15:13.236 A:middle
mode to be inline.

00:15:13.896 --> 00:15:15.576 A:middle
Much better.

00:15:17.056 --> 00:15:18.216 A:middle
Now when I'm picking a good

00:15:18.216 --> 00:15:19.446 A:middle
conference room, there's one

00:15:19.446 --> 00:15:20.346 A:middle
thing that's very important to

00:15:20.346 --> 00:15:20.476 A:middle
me.

00:15:21.526 --> 00:15:22.376 A:middle
The room has to have a good

00:15:22.376 --> 00:15:22.726 A:middle
table.

00:15:23.406 --> 00:15:24.356 A:middle
I just can't focus on what

00:15:24.356 --> 00:15:25.576 A:middle
anyone is saying if the table

00:15:25.576 --> 00:15:26.596 A:middle
isn't of the highest quality.

00:15:28.016 --> 00:15:29.086 A:middle
[ Laughter ]

00:15:29.086 --> 00:15:30.156 A:middle
And I can see that there's some

00:15:30.156 --> 00:15:31.946 A:middle
kind of table in this room, but

00:15:31.946 --> 00:15:33.046 A:middle
I really can't see its details

00:15:33.046 --> 00:15:33.426 A:middle
well enough.

00:15:34.576 --> 00:15:35.896 A:middle
But when the image was in Fill,

00:15:36.636 --> 00:15:38.246 A:middle
I could see it nice and close.

00:15:38.856 --> 00:15:39.696 A:middle
Look at that wood grain.

00:15:39.696 --> 00:15:43.196 A:middle
So I'd like to be able to change

00:15:43.196 --> 00:15:44.906 A:middle
back and forth between Fill to

00:15:44.906 --> 00:15:46.756 A:middle
see the details of the room and

00:15:46.756 --> 00:15:48.426 A:middle
Fit to see everything at once.

00:15:49.106 --> 00:15:51.276 A:middle
But how do I actually change

00:15:51.276 --> 00:15:53.056 A:middle
this aspect ratio's content mode

00:15:53.296 --> 00:15:54.176 A:middle
from within my view?

00:15:55.146 --> 00:15:56.256 A:middle
Well, to understand how to do

00:15:56.256 --> 00:15:57.436 A:middle
this, we really need to know

00:15:57.436 --> 00:15:59.006 A:middle
more about how views work in

00:15:59.006 --> 00:16:00.036 A:middle
SwiftUI and why.

00:15:59.006 --> 00:16:00.036 A:middle
SwiftUI and why.

00:16:00.696 --> 00:16:01.986 A:middle
And so I'm going to invite Kyle

00:16:01.986 --> 00:16:03.456 A:middle
to the stage to talk about that.

00:16:04.126 --> 00:16:04.376 A:middle
Kyle?

00:16:05.236 --> 00:16:07.176 A:middle
&gt;&gt; Well, hello, WWDC.

00:16:08.516 --> 00:16:12.576 A:middle
[ Applause ]

00:16:13.076 --> 00:16:14.516 A:middle
What does everyone think of

00:16:14.596 --> 00:16:14.976 A:middle
SwiftUI so far?

00:16:15.101 --> 00:16:17.101 A:middle
[ Applause ]

00:16:17.186 --> 00:16:18.426 A:middle
Yeah, I'm pretty excited too.

00:16:18.426 --> 00:16:20.946 A:middle
It's a little magical though.

00:16:21.076 --> 00:16:23.446 A:middle
And so before we go any further,

00:16:23.446 --> 00:16:24.626 A:middle
we're going to take a step back

00:16:25.106 --> 00:16:27.016 A:middle
and talk about the way views

00:16:27.016 --> 00:16:28.476 A:middle
work and why in SwiftUI.

00:16:29.996 --> 00:16:32.016 A:middle
So we left off here implementing

00:16:32.066 --> 00:16:32.806 A:middle
Room Detail view.

00:16:34.026 --> 00:16:36.396 A:middle
In SwiftUI, a view is a struct

00:16:36.526 --> 00:16:37.636 A:middle
that conforms to the view

00:16:37.636 --> 00:16:39.736 A:middle
protocol, rather than a class

00:16:39.866 --> 00:16:41.186 A:middle
that inherits from a base class

00:16:41.256 --> 00:16:41.986 A:middle
like UI view.

00:16:43.386 --> 00:16:44.516 A:middle
This means your view doesn't

00:16:44.516 --> 00:16:45.916 A:middle
inherit any stored properties.

00:16:46.626 --> 00:16:48.276 A:middle
It's allocated on the stack and

00:16:48.276 --> 00:16:49.096 A:middle
it's passed by value.

00:16:50.556 --> 00:16:52.216 A:middle
Room Detail just stores a room,

00:16:52.706 --> 00:16:54.416 A:middle
so it's the size and weight of a

00:16:54.416 --> 00:16:54.726 A:middle
room.

00:16:55.196 --> 00:16:56.846 A:middle
No additional allocation or

00:16:56.846 --> 00:16:57.946 A:middle
reference counting overhead.

00:17:00.046 --> 00:17:01.826 A:middle
Behind the scenes, SwiftUI

00:17:01.866 --> 00:17:03.336 A:middle
aggressively collapses your view

00:17:03.336 --> 00:17:05.286 A:middle
hierarchy into an efficient data

00:17:05.286 --> 00:17:06.326 A:middle
structure for rendering.

00:17:07.016 --> 00:17:08.636 A:middle
Because of this, we make liberal

00:17:08.636 --> 00:17:11.136 A:middle
use of small single-purpose

00:17:11.136 --> 00:17:13.046 A:middle
views in SwiftUI, and you should

00:17:13.046 --> 00:17:13.506 A:middle
too.

00:17:14.626 --> 00:17:15.965 A:middle
What I want you to take away

00:17:15.965 --> 00:17:18.236 A:middle
from the last couple slides is

00:17:18.536 --> 00:17:20.586 A:middle
that views in SwiftUI are

00:17:20.586 --> 00:17:21.856 A:middle
incredibly lightweight.

00:17:22.726 --> 00:17:24.586 A:middle
As Jacob said, you should never

00:17:24.586 --> 00:17:26.445 A:middle
hesitate to refactor your

00:17:26.445 --> 00:17:29.176 A:middle
SwiftUI code because extracting

00:17:29.176 --> 00:17:30.676 A:middle
a subview has virtually no

00:17:30.676 --> 00:17:31.486 A:middle
runtime overhead.

00:17:34.046 --> 00:17:34.636 A:middle
Yeah, you can clap for that,

00:17:34.636 --> 00:17:35.256 A:middle
it's pretty great.

00:17:36.516 --> 00:17:38.696 A:middle
[ Applause ]

00:17:39.196 --> 00:17:41.916 A:middle
So a view in SwifthUI and a view

00:17:41.916 --> 00:17:43.286 A:middle
in a traditional UI framework

00:17:43.436 --> 00:17:44.936 A:middle
fulfill the same primary role.

00:17:45.556 --> 00:17:47.426 A:middle
They define a piece of UI.

00:17:48.136 --> 00:17:51.076 A:middle
The view protocol only has a

00:17:51.076 --> 00:17:52.766 A:middle
single requirement: a body

00:17:52.766 --> 00:17:54.626 A:middle
property, which is, itself, a

00:17:54.626 --> 00:17:54.886 A:middle
view.

00:17:55.436 --> 00:17:57.896 A:middle
You build bigger views in

00:17:57.896 --> 00:17:59.416 A:middle
SwiftUI by composing together

00:17:59.416 --> 00:18:00.226 A:middle
smaller views.

00:17:59.416 --> 00:18:00.226 A:middle
smaller views.

00:18:00.616 --> 00:18:02.116 A:middle
We built Room Detail by

00:18:02.116 --> 00:18:04.596 A:middle
composing together image, a view

00:18:04.596 --> 00:18:05.616 A:middle
of an image at its native

00:18:05.616 --> 00:18:08.736 A:middle
resolution, resizable which

00:18:08.736 --> 00:18:10.916 A:middle
opted it into stretch in either

00:18:10.946 --> 00:18:14.156 A:middle
dimension; and aspect ratio, a

00:18:14.156 --> 00:18:16.106 A:middle
view that proportionally scales

00:18:16.716 --> 00:18:17.826 A:middle
its child.

00:18:17.976 --> 00:18:19.306 A:middle
The rendering of any view you

00:18:19.306 --> 00:18:21.366 A:middle
build is just the rendering of

00:18:21.996 --> 00:18:23.476 A:middle
its body.

00:18:23.666 --> 00:18:25.586 A:middle
So if you set a break point and

00:18:25.586 --> 00:18:27.426 A:middle
the debugger stops there, it

00:18:28.516 --> 00:18:30.256 A:middle
means the framework has decided

00:18:30.256 --> 00:18:31.736 A:middle
it needs a fresh rendering of

00:18:31.736 --> 00:18:31.976 A:middle
your view.

00:18:35.046 --> 00:18:35.366 A:middle
Tada.

00:18:38.046 --> 00:18:38.226 A:middle
All right.

00:18:38.426 --> 00:18:41.566 A:middle
So the framework knows when to

00:18:41.566 --> 00:18:43.256 A:middle
fetch a new rendering of a view

00:18:43.626 --> 00:18:45.386 A:middle
because in addition to defining

00:18:45.386 --> 00:18:47.796 A:middle
a piece of UI, in SwiftUI, a

00:18:47.796 --> 00:18:49.586 A:middle
view defines its dependencies.

00:18:51.266 --> 00:18:53.016 A:middle
Let's extend Room Detail to

00:18:53.016 --> 00:18:55.676 A:middle
allow the user to toggle between

00:18:55.856 --> 00:18:58.756 A:middle
fitting into and filling up the

00:18:58.756 --> 00:19:01.386 A:middle
available space so Jacob can get

00:18:58.756 --> 00:19:01.386 A:middle
available space so Jacob can get

00:19:01.386 --> 00:19:02.546 A:middle
a good look at that wood grain.

00:19:03.146 --> 00:19:05.616 A:middle
So, the first thing we'll need

00:19:06.056 --> 00:19:07.616 A:middle
is a property, but it's a

00:19:07.616 --> 00:19:08.486 A:middle
special property.

00:19:08.996 --> 00:19:10.526 A:middle
It's a state property and it

00:19:10.526 --> 00:19:11.976 A:middle
says whether or not the image is

00:19:11.976 --> 00:19:12.286 A:middle
zoomed.

00:19:13.536 --> 00:19:15.356 A:middle
When SwiftUI sees a view with a

00:19:15.356 --> 00:19:17.116 A:middle
state variable, it allocates

00:19:17.116 --> 00:19:18.596 A:middle
storage for that variable on the

00:19:18.596 --> 00:19:19.396 A:middle
view's behalf.

00:19:19.856 --> 00:19:21.586 A:middle
In this Memory diagram, the

00:19:21.586 --> 00:19:23.706 A:middle
green is your app's memory, and

00:19:23.706 --> 00:19:25.456 A:middle
purple is memory SwiftUI is

00:19:25.456 --> 00:19:25.936 A:middle
managing.

00:19:26.186 --> 00:19:27.766 A:middle
And so this value of the zoom

00:19:27.766 --> 00:19:29.716 A:middle
variable, we got you covered.

00:19:33.086 --> 00:19:35.486 A:middle
So if you decide to fill or fit

00:19:35.606 --> 00:19:38.576 A:middle
based on that variable, then

00:19:38.756 --> 00:19:39.666 A:middle
we've got a view that renders

00:19:39.666 --> 00:19:41.766 A:middle
like this when it's zoomed and

00:19:42.626 --> 00:19:44.126 A:middle
like this when it isn't.

00:19:45.396 --> 00:19:46.956 A:middle
So, now, all we need is a

00:19:46.956 --> 00:19:51.186 A:middle
tapAction to toggle back and

00:19:51.186 --> 00:19:52.436 A:middle
forth between the two states.

00:19:52.866 --> 00:19:54.876 A:middle
And then on tap, the image will

00:19:54.876 --> 00:19:58.806 A:middle
zoom to Fill and shrink to Fit.

00:20:00.516 --> 00:20:09.126 A:middle
[ Applause ]

00:20:09.626 --> 00:20:12.056 A:middle
So what actually is happening

00:20:12.746 --> 00:20:15.036 A:middle
when we tap here?

00:20:15.256 --> 00:20:16.506 A:middle
Well, one of the special

00:20:16.506 --> 00:20:18.686 A:middle
properties of state variables is

00:20:18.686 --> 00:20:20.246 A:middle
that SwiftUI can observe when

00:20:20.246 --> 00:20:21.216 A:middle
they're read and written.

00:20:21.756 --> 00:20:23.586 A:middle
Because SwiftUI knows that Zoom

00:20:23.586 --> 00:20:26.456 A:middle
here was read in body, it knows

00:20:26.456 --> 00:20:27.406 A:middle
that the view's rendering

00:20:27.406 --> 00:20:30.976 A:middle
depends on it, which means when

00:20:30.976 --> 00:20:32.646 A:middle
the variable changes, the

00:20:32.646 --> 00:20:34.066 A:middle
framework is going to ask for

00:20:34.066 --> 00:20:36.356 A:middle
body again using the new state

00:20:36.356 --> 00:20:36.686 A:middle
value.

00:20:36.686 --> 00:20:40.046 A:middle
So it can refresh the rendering

00:20:40.046 --> 00:20:41.806 A:middle
this time with a different

00:20:41.806 --> 00:20:42.426 A:middle
content mode.

00:20:46.046 --> 00:20:47.716 A:middle
So, traditional UI frameworks

00:20:47.756 --> 00:20:49.616 A:middle
don't distinguish between state

00:20:49.616 --> 00:20:50.806 A:middle
variables and plain old

00:20:50.806 --> 00:20:51.406 A:middle
properties.

00:20:51.726 --> 00:20:53.616 A:middle
But I've found this distinction

00:20:53.616 --> 00:20:55.116 A:middle
to be incredibly clarifying.

00:20:55.796 --> 00:21:00.196 A:middle
In SwiftUI, every possible state

00:20:55.796 --> 00:21:00.196 A:middle
In SwiftUI, every possible state

00:21:00.196 --> 00:21:01.796 A:middle
your UI might find itself in,

00:21:02.516 --> 00:21:04.926 A:middle
the offset of a scroll view, the

00:21:04.926 --> 00:21:07.496 A:middle
highlightedness of a button, the

00:21:07.496 --> 00:21:09.256 A:middle
contents of a navigation stack.

00:21:10.126 --> 00:21:11.056 A:middle
It's derived from an

00:21:11.056 --> 00:21:12.526 A:middle
authoritative piece of data,

00:21:13.066 --> 00:21:15.216 A:middle
often called a Source of Truth.

00:21:16.256 --> 00:21:17.596 A:middle
Collectively, your state

00:21:17.596 --> 00:21:19.056 A:middle
variables and your model

00:21:19.276 --> 00:21:20.996 A:middle
constitute your Source of Truth

00:21:21.266 --> 00:21:23.256 A:middle
for your entire application.

00:21:24.316 --> 00:21:25.436 A:middle
Earlier, I mentioned that this

00:21:25.436 --> 00:21:27.006 A:middle
call to aspect ratio makes a

00:21:27.006 --> 00:21:27.326 A:middle
view.

00:21:28.736 --> 00:21:29.926 A:middle
Its definition looks something

00:21:29.926 --> 00:21:32.956 A:middle
like this, where content mode is

00:21:32.956 --> 00:21:34.726 A:middle
a plain old Swift property.

00:21:35.296 --> 00:21:38.136 A:middle
You can neatly classify every

00:21:38.136 --> 00:21:40.116 A:middle
property as either a source of

00:21:40.116 --> 00:21:42.236 A:middle
truth or a derived value.

00:21:43.436 --> 00:21:45.236 A:middle
The Zoom state variable is a

00:21:45.236 --> 00:21:46.786 A:middle
Source of Truth.

00:21:47.416 --> 00:21:49.526 A:middle
The Content Mode property is

00:21:49.526 --> 00:21:50.826 A:middle
derived from it.

00:21:51.696 --> 00:21:54.276 A:middle
Recall SwiftUI can observe when

00:21:54.276 --> 00:21:55.776 A:middle
state variables are read and

00:21:55.776 --> 00:21:56.176 A:middle
written.

00:21:56.466 --> 00:21:58.266 A:middle
So when one changes, it knows

00:21:58.266 --> 00:21:59.586 A:middle
which renderings to refresh.

00:22:00.826 --> 00:22:01.936 A:middle
The framework refreshes the

00:22:01.936 --> 00:22:03.676 A:middle
rendering by asking for a new

00:22:03.676 --> 00:22:06.696 A:middle
body, making a new aspect ratio

00:22:06.696 --> 00:22:08.656 A:middle
view from scratch, thereby

00:22:08.756 --> 00:22:10.376 A:middle
overriding the Content Mode and

00:22:10.376 --> 00:22:11.526 A:middle
any other stored properties.

00:22:12.196 --> 00:22:14.846 A:middle
This is the mechanism by which

00:22:14.976 --> 00:22:17.126 A:middle
all derived values in SwiftUI

00:22:17.256 --> 00:22:19.856 A:middle
are kept up-to-date.

00:22:19.976 --> 00:22:22.266 A:middle
So we've seen how we can declare

00:22:22.566 --> 00:22:24.536 A:middle
a Source of Truth using a state

00:22:24.536 --> 00:22:27.346 A:middle
variable, and that every plain

00:22:27.346 --> 00:22:29.346 A:middle
old property is a derived value.

00:22:30.376 --> 00:22:31.066 A:middle
We're not going to see an

00:22:31.066 --> 00:22:33.356 A:middle
example in this talk, but Swift

00:22:33.356 --> 00:22:34.756 A:middle
gives you a tool called Binding,

00:22:35.766 --> 00:22:37.036 A:middle
which is great for passing

00:22:37.036 --> 00:22:38.546 A:middle
read/write derived values.

00:22:39.236 --> 00:22:41.166 A:middle
And technically any constant can

00:22:41.166 --> 00:22:42.506 A:middle
serve as a perfectly good

00:22:42.506 --> 00:22:44.446 A:middle
read-only Source of Truth as we

00:22:44.446 --> 00:22:45.986 A:middle
saw with the test data driving

00:22:45.986 --> 00:22:46.656 A:middle
our previews.

00:22:47.296 --> 00:22:48.596 A:middle
Now there's one more I want to

00:22:48.596 --> 00:22:49.896 A:middle
call out, and I mentioned a

00:22:49.896 --> 00:22:51.726 A:middle
second ago that collectively

00:22:51.816 --> 00:22:53.216 A:middle
your state variables and your

00:22:53.216 --> 00:22:54.746 A:middle
model constitute the Source of

00:22:54.746 --> 00:22:56.606 A:middle
Truth for your entire app.

00:22:56.606 --> 00:22:57.646 A:middle
And so we have this bindable

00:22:57.646 --> 00:22:59.656 A:middle
object protocol Jacob used

00:22:59.656 --> 00:23:01.956 A:middle
earlier to teach SwiftUI about

00:22:59.656 --> 00:23:01.956 A:middle
earlier to teach SwiftUI about

00:23:02.036 --> 00:23:03.596 A:middle
how to observe changes from our

00:23:03.596 --> 00:23:03.966 A:middle
model.

00:23:06.306 --> 00:23:07.816 A:middle
This might be a lot really

00:23:07.816 --> 00:23:08.836 A:middle
quickly, and so we have an

00:23:08.836 --> 00:23:11.676 A:middle
entire talk later this week

00:23:11.676 --> 00:23:13.336 A:middle
dedicated to developing your

00:23:13.336 --> 00:23:14.996 A:middle
intuition about these different

00:23:14.996 --> 00:23:15.706 A:middle
flow primitives.

00:23:18.056 --> 00:23:19.896 A:middle
All right, let's step back and

00:23:19.896 --> 00:23:20.466 A:middle
take stock.

00:23:22.286 --> 00:23:24.286 A:middle
This is really different from

00:23:24.376 --> 00:23:25.806 A:middle
what you do in a traditional

00:23:25.806 --> 00:23:27.306 A:middle
life framework where the views

00:23:27.306 --> 00:23:28.886 A:middle
themselves persist and you try

00:23:28.886 --> 00:23:30.096 A:middle
your hardest to keep them all up

00:23:30.096 --> 00:23:31.006 A:middle
to date.

00:23:32.396 --> 00:23:34.396 A:middle
You may not think about it this

00:23:34.396 --> 00:23:35.676 A:middle
way when you use a traditional

00:23:35.676 --> 00:23:38.156 A:middle
UI framework, but every time a

00:23:38.156 --> 00:23:40.216 A:middle
view reads a piece of data, it's

00:23:40.216 --> 00:23:41.986 A:middle
creating an implicit dependency.

00:23:42.756 --> 00:23:44.106 A:middle
It's a dependency because when

00:23:44.106 --> 00:23:45.976 A:middle
that data changes, the view

00:23:45.976 --> 00:23:47.936 A:middle
needs to update to reflect the

00:23:47.936 --> 00:23:48.566 A:middle
new value.

00:23:49.036 --> 00:23:51.466 A:middle
And when it fails to, that's a

00:23:51.466 --> 00:23:51.766 A:middle
bug.

00:23:53.156 --> 00:23:55.006 A:middle
SwiftUI automatically manages

00:23:55.006 --> 00:23:57.396 A:middle
dependencies on your behalf by

00:23:57.396 --> 00:23:58.896 A:middle
recomputing the appropriate

00:23:58.896 --> 00:24:00.526 A:middle
derived values so this never

00:23:58.896 --> 00:24:00.526 A:middle
derived values so this never

00:24:00.526 --> 00:24:00.976 A:middle
happens again.

00:24:01.516 --> 00:24:07.936 A:middle
[ Applause ]

00:24:08.436 --> 00:24:10.266 A:middle
Of course, we don't just manage

00:24:10.336 --> 00:24:13.086 A:middle
a single dependency at a time in

00:24:13.086 --> 00:24:14.146 A:middle
our apps.

00:24:14.146 --> 00:24:15.636 A:middle
Our apps are big.

00:24:15.886 --> 00:24:17.096 A:middle
They're complicated.

00:24:18.196 --> 00:24:19.326 A:middle
When it comes to how much you

00:24:19.326 --> 00:24:20.866 A:middle
have to hold in your head and

00:24:20.866 --> 00:24:22.156 A:middle
how easy it is to make a

00:24:22.156 --> 00:24:24.246 A:middle
mistake, the way we manually

00:24:24.246 --> 00:24:26.206 A:middle
manage dependencies today, it's

00:24:26.206 --> 00:24:26.736 A:middle
really hard.

00:24:27.686 --> 00:24:29.706 A:middle
Despite my best efforts, every

00:24:29.706 --> 00:24:31.866 A:middle
update to every app I've ever

00:24:31.866 --> 00:24:33.276 A:middle
shipped has had UI bugs.

00:24:34.096 --> 00:24:36.216 A:middle
Every one of these lines is a

00:24:36.216 --> 00:24:36.866 A:middle
dependency.

00:24:37.436 --> 00:24:39.516 A:middle
And it's just the start.

00:24:42.086 --> 00:24:43.446 A:middle
The thing I find the hardest

00:24:43.576 --> 00:24:45.316 A:middle
about managing the complexity of

00:24:45.316 --> 00:24:47.666 A:middle
my views is dealing with all the

00:24:47.666 --> 00:24:48.916 A:middle
possible orders the different

00:24:48.916 --> 00:24:50.206 A:middle
callbacks can get called in.

00:24:50.596 --> 00:24:53.526 A:middle
So here's an old version of the

00:24:53.526 --> 00:24:54.906 A:middle
room detail view that was

00:24:54.906 --> 00:24:56.536 A:middle
implemented in UIKit.

00:24:57.096 --> 00:25:00.016 A:middle
It had the same features as the

00:24:57.096 --> 00:25:00.016 A:middle
It had the same features as the

00:25:00.016 --> 00:25:01.596 A:middle
one we've seen so far has, but

00:25:01.596 --> 00:25:03.006 A:middle
it had one more.

00:25:04.536 --> 00:25:06.486 A:middle
Every once in a while, when we

00:25:06.486 --> 00:25:08.056 A:middle
zoom in on a conference room

00:25:08.056 --> 00:25:09.996 A:middle
image, it was too blurry to make

00:25:09.996 --> 00:25:11.246 A:middle
out the wood grain on the table.

00:25:12.426 --> 00:25:14.476 A:middle
And so we decided to add a

00:25:14.476 --> 00:25:16.326 A:middle
special feature using neural

00:25:16.326 --> 00:25:18.316 A:middle
networks and machine learning so

00:25:18.316 --> 00:25:20.906 A:middle
we could tap to enhance the

00:25:20.906 --> 00:25:23.946 A:middle
image on a background thread and

00:25:23.946 --> 00:25:26.586 A:middle
thus choose the right conference

00:25:26.586 --> 00:25:26.826 A:middle
room.

00:25:30.076 --> 00:25:30.496 A:middle
All right, yeah.

00:25:31.346 --> 00:25:32.236 A:middle
Over-engineering, right?

00:25:33.606 --> 00:25:34.786 A:middle
So there's only one problem with

00:25:34.786 --> 00:25:36.886 A:middle
this feature and that's it had a

00:25:36.886 --> 00:25:37.146 A:middle
bug.

00:25:37.526 --> 00:25:38.876 A:middle
We got a report of a stray

00:25:38.876 --> 00:25:40.356 A:middle
activity indicator that never

00:25:40.356 --> 00:25:41.066 A:middle
stops spinning.

00:25:42.276 --> 00:25:43.266 A:middle
How'd this happen?

00:25:44.076 --> 00:25:45.926 A:middle
Well, it turns out if the events

00:25:45.956 --> 00:25:48.456 A:middle
fired in a specific order, we

00:25:49.156 --> 00:25:51.956 A:middle
forgot to clean up that activity

00:25:51.956 --> 00:25:52.446 A:middle
indicator.

00:25:52.976 --> 00:25:54.806 A:middle
In this case, if the user zoomed

00:25:54.806 --> 00:25:56.326 A:middle
out and tapped the enhance

00:25:56.326 --> 00:25:59.056 A:middle
button as it was animating away,

00:25:59.336 --> 00:26:00.776 A:middle
the activity indicator would get

00:25:59.336 --> 00:26:00.776 A:middle
the activity indicator would get

00:26:00.776 --> 00:26:01.066 A:middle
stuck.

00:26:02.046 --> 00:26:03.716 A:middle
These kinds of mistakes are easy

00:26:03.716 --> 00:26:05.066 A:middle
to make when you mutate your

00:26:05.066 --> 00:26:06.976 A:middle
subviews directly from event

00:26:06.976 --> 00:26:10.146 A:middle
handler callbacks rather than

00:26:10.246 --> 00:26:12.016 A:middle
updating your Source of Truth

00:26:12.306 --> 00:26:15.866 A:middle
and deriving your UI from that.

00:26:17.636 --> 00:26:19.606 A:middle
Now we make this mistake because

00:26:19.606 --> 00:26:20.676 A:middle
when we're coding this code,

00:26:20.726 --> 00:26:22.076 A:middle
it's really easy to only think

00:26:22.076 --> 00:26:22.806 A:middle
about the happy path.

00:26:23.616 --> 00:26:25.106 A:middle
Those are the ones that come

00:26:25.596 --> 00:26:26.906 A:middle
easily to mind.

00:26:26.906 --> 00:26:28.106 A:middle
And it's really easy to overlook

00:26:28.106 --> 00:26:29.436 A:middle
the unhappy ones that don't.

00:26:30.056 --> 00:26:31.466 A:middle
The problem is that as the

00:26:31.466 --> 00:26:33.966 A:middle
number of possible events our

00:26:33.966 --> 00:26:37.086 A:middle
view can respond to grows, the

00:26:37.086 --> 00:26:38.416 A:middle
number of unhappy paths

00:26:38.536 --> 00:26:39.426 A:middle
explodes.

00:26:40.866 --> 00:26:42.456 A:middle
Assume you get all four of these

00:26:42.456 --> 00:26:44.346 A:middle
events, how many different

00:26:44.346 --> 00:26:45.646 A:middle
possible orders are there that

00:26:45.646 --> 00:26:46.216 A:middle
they could come in?

00:26:46.746 --> 00:26:49.726 A:middle
Well, there's actually 24

00:26:49.726 --> 00:26:51.746 A:middle
different orders for any four

00:26:51.746 --> 00:26:52.246 A:middle
events.

00:26:52.806 --> 00:26:54.406 A:middle
And in practice, it's even worse

00:26:54.456 --> 00:26:56.556 A:middle
than that because every event

00:26:56.556 --> 00:26:57.846 A:middle
can come in more than one time.

00:26:58.356 --> 00:26:59.836 A:middle
Say for example a user is

00:26:59.836 --> 00:27:01.156 A:middle
mashing the enhance button.

00:26:59.836 --> 00:27:01.156 A:middle
mashing the enhance button.

00:27:02.366 --> 00:27:03.526 A:middle
The challenge of managing this

00:27:03.526 --> 00:27:05.376 A:middle
should be familiar to anyone

00:27:05.376 --> 00:27:06.536 A:middle
who's ever implemented an

00:27:06.536 --> 00:27:08.156 A:middle
interruptable animation where

00:27:08.156 --> 00:27:09.476 A:middle
the completion handler can come

00:27:09.476 --> 00:27:11.006 A:middle
in at a really unexpected time.

00:27:12.296 --> 00:27:13.856 A:middle
If I could tell myself from five

00:27:13.856 --> 00:27:16.906 A:middle
years ago anything about my job,

00:27:16.906 --> 00:27:18.666 A:middle
it would be that UI programming

00:27:19.116 --> 00:27:20.506 A:middle
is really hard.

00:27:20.946 --> 00:27:22.976 A:middle
Like log-free concurrency hard.

00:27:25.046 --> 00:27:26.296 A:middle
How many of you have written

00:27:26.296 --> 00:27:27.266 A:middle
multi-threaded code?

00:27:28.436 --> 00:27:30.226 A:middle
Probably all 2,000 of you, yeah.

00:27:30.826 --> 00:27:32.646 A:middle
So no one pretends that's easy.

00:27:33.216 --> 00:27:34.606 A:middle
It's taken me months to shake

00:27:34.606 --> 00:27:36.776 A:middle
out all the bugs in some of my

00:27:36.776 --> 00:27:38.026 A:middle
multi-threaded code, and even

00:27:38.026 --> 00:27:39.796 A:middle
then I wasn't 100% confident in

00:27:39.796 --> 00:27:40.546 A:middle
its correctness.

00:27:41.086 --> 00:27:44.096 A:middle
A lot of UI code is actually

00:27:44.096 --> 00:27:46.706 A:middle
just like that, only instead of

00:27:46.706 --> 00:27:48.616 A:middle
a crash, your view ends up in

00:27:48.616 --> 00:27:49.906 A:middle
the wrong place, or it's

00:27:49.906 --> 00:27:50.246 A:middle
missing.

00:27:51.296 --> 00:27:52.916 A:middle
This is because race conditions

00:27:52.916 --> 00:27:55.056 A:middle
and UI inconsistencies share the

00:27:55.056 --> 00:27:56.426 A:middle
same underlying source of

00:27:56.466 --> 00:27:57.096 A:middle
complexity.

00:27:57.626 --> 00:27:59.676 A:middle
These easy-to-overlook

00:27:59.846 --> 00:28:00.446 A:middle
orderings.

00:27:59.846 --> 00:28:00.446 A:middle
orderings.

00:28:00.506 --> 00:28:03.676 A:middle
Many of the views we all work on

00:28:04.176 --> 00:28:07.396 A:middle
have way more than four events.

00:28:07.956 --> 00:28:09.976 A:middle
You know, like model

00:28:09.976 --> 00:28:12.016 A:middle
notifications, delegate methods,

00:28:12.106 --> 00:28:13.876 A:middle
target actions, completion

00:28:13.876 --> 00:28:14.256 A:middle
handlers.

00:28:14.416 --> 00:28:15.376 A:middle
They're all events.

00:28:16.246 --> 00:28:18.396 A:middle
A view with 12 would roughly

00:28:18.426 --> 00:28:20.546 A:middle
equate to 12 factorial possible

00:28:20.546 --> 00:28:20.976 A:middle
orderings.

00:28:21.596 --> 00:28:22.976 A:middle
That's almost half a billion.

00:28:24.336 --> 00:28:26.786 A:middle
We've all worked on views with

00:28:26.836 --> 00:28:27.876 A:middle
12 event handlers.

00:28:29.136 --> 00:28:30.956 A:middle
So you can only fit so much in

00:28:30.956 --> 00:28:32.696 A:middle
your head at a time.

00:28:35.056 --> 00:28:37.896 A:middle
Yeah. This dotted line is one of

00:28:37.896 --> 00:28:40.406 A:middle
the views in your app.

00:28:40.686 --> 00:28:41.966 A:middle
What do people think the

00:28:41.966 --> 00:28:42.756 A:middle
difference between those two

00:28:42.756 --> 00:28:43.396 A:middle
dots is?

00:28:45.486 --> 00:28:48.886 A:middle
Anyone? Those are the bugs, yes.

00:28:49.876 --> 00:28:51.946 A:middle
So as we add features, the

00:28:51.946 --> 00:28:53.696 A:middle
number of possible orderings we

00:28:53.696 --> 00:28:56.436 A:middle
have to think of increases

00:28:56.546 --> 00:28:57.386 A:middle
exponentially.

00:28:57.386 --> 00:28:58.686 A:middle
And the chance we overlook one

00:29:00.176 --> 00:29:01.056 A:middle
-- it's the same.

00:29:01.316 --> 00:29:01.936 A:middle
It's inevitable.

00:29:04.246 --> 00:29:06.246 A:middle
So I imagine many of you

00:29:06.246 --> 00:29:08.416 A:middle
instinctively have reached for a

00:29:08.416 --> 00:29:10.346 A:middle
way to handle this complexity in

00:29:10.346 --> 00:29:11.956 A:middle
UIKit or AppKit when you program

00:29:11.956 --> 00:29:14.486 A:middle
today, which is to collect all

00:29:14.486 --> 00:29:15.766 A:middle
your view update code in a

00:29:15.766 --> 00:29:16.516 A:middle
single method.

00:29:17.226 --> 00:29:18.246 A:middle
And then from these event

00:29:18.246 --> 00:29:20.006 A:middle
handler callbacks, you call that

00:29:20.006 --> 00:29:20.576 A:middle
one method.

00:29:21.366 --> 00:29:22.956 A:middle
It's a really great way for the

00:29:22.956 --> 00:29:24.396 A:middle
complexity to not explode on

00:29:24.396 --> 00:29:24.463 A:middle
you.

00:29:25.336 --> 00:29:26.846 A:middle
Well, SwiftUI was heavily

00:29:26.846 --> 00:29:28.586 A:middle
inspired by this best practice.

00:29:29.806 --> 00:29:31.486 A:middle
When you are trying to implement

00:29:31.486 --> 00:29:33.636 A:middle
a view this way in UI today,

00:29:33.846 --> 00:29:34.956 A:middle
there's all these tricky cases

00:29:34.956 --> 00:29:36.136 A:middle
you need to think about like

00:29:36.216 --> 00:29:37.456 A:middle
adding or removing a subview

00:29:37.456 --> 00:29:38.726 A:middle
from the view hierarchy, or

00:29:38.726 --> 00:29:39.696 A:middle
pushing and popping off the

00:29:39.696 --> 00:29:40.506 A:middle
navigation stack.

00:29:40.736 --> 00:29:42.126 A:middle
Or performing updates to a table

00:29:42.126 --> 00:29:42.336 A:middle
view.

00:29:42.866 --> 00:29:44.246 A:middle
I was never able to figure out

00:29:44.366 --> 00:29:45.886 A:middle
all of those cases all on my

00:29:45.886 --> 00:29:46.186 A:middle
own.

00:29:47.236 --> 00:29:49.886 A:middle
Well, we've spent all the time

00:29:49.886 --> 00:29:51.186 A:middle
and done all the work and we've

00:29:51.186 --> 00:29:53.356 A:middle
codified this best practice into

00:29:53.356 --> 00:29:54.296 A:middle
SwiftUI on your behalf.

00:29:55.186 --> 00:29:56.716 A:middle
The view protocol only has a

00:29:56.876 --> 00:29:58.506 A:middle
single requirement: body.

00:29:58.796 --> 00:30:00.816 A:middle
A single entry point that the

00:29:58.796 --> 00:30:00.816 A:middle
A single entry point that the

00:30:00.816 --> 00:30:01.696 A:middle
framework calls.

00:30:02.226 --> 00:30:04.826 A:middle
That means there's only one

00:30:04.886 --> 00:30:06.716 A:middle
possible order it can ever get

00:30:06.716 --> 00:30:07.906 A:middle
called in.

00:30:08.516 --> 00:30:17.026 A:middle
[ Applause ]

00:30:17.526 --> 00:30:19.066 A:middle
Because of this pattern of

00:30:19.106 --> 00:30:20.656 A:middle
simply fetching new views for

00:30:20.656 --> 00:30:21.586 A:middle
the parts of the UI that

00:30:21.616 --> 00:30:25.156 A:middle
changed, SwiftUI scales with

00:30:25.156 --> 00:30:26.956 A:middle
your brain, virtually

00:30:26.956 --> 00:30:28.986 A:middle
eliminating UI inconsistencies.

00:30:30.546 --> 00:30:30.976 A:middle
All right.

00:30:31.016 --> 00:30:32.126 A:middle
[ Applause ]

00:30:32.126 --> 00:30:33.306 A:middle
Let's get back to the demo and

00:30:33.306 --> 00:30:34.406 A:middle
finish the Room Detail view.

00:30:35.006 --> 00:30:35.346 A:middle
Jacob?

00:30:42.066 --> 00:30:42.976 A:middle
&gt;&gt; Okay, let's finish this app.

00:30:44.346 --> 00:30:45.636 A:middle
Now, we know how to set up our

00:30:45.636 --> 00:30:46.646 A:middle
view to zoom in.

00:30:47.886 --> 00:30:48.956 A:middle
We'll add a state property.

00:30:52.166 --> 00:30:53.426 A:middle
And we'll call it Zoomed and

00:30:53.876 --> 00:30:54.956 A:middle
we'll default it to false.

00:30:56.456 --> 00:30:59.136 A:middle
Then in our aspect ratio we'll

00:30:59.136 --> 00:31:00.836 A:middle
use the Zoomed property to

00:30:59.136 --> 00:31:00.836 A:middle
use the Zoomed property to

00:31:00.836 --> 00:31:02.146 A:middle
change between Fill when we're

00:31:02.146 --> 00:31:03.756 A:middle
zoomed and Fit otherwise.

00:31:05.206 --> 00:31:06.526 A:middle
And finally, we'll add our

00:31:06.526 --> 00:31:08.936 A:middle
tapAction to toggle that Zoomed

00:31:08.936 --> 00:31:09.296 A:middle
property.

00:31:13.276 --> 00:31:14.406 A:middle
Now let's try it out in Live

00:31:14.406 --> 00:31:14.596 A:middle
Mode.

00:31:19.316 --> 00:31:20.726 A:middle
Great, we can switch between

00:31:20.726 --> 00:31:21.556 A:middle
these two different modes.

00:31:22.966 --> 00:31:24.096 A:middle
But there's something missing

00:31:24.096 --> 00:31:24.346 A:middle
here.

00:31:24.846 --> 00:31:25.876 A:middle
Does anybody see it?

00:31:28.046 --> 00:31:28.676 A:middle
That's right, it needs an

00:31:28.676 --> 00:31:29.186 A:middle
animation.

00:31:29.186 --> 00:31:32.216 A:middle
And with SwiftUI, animation's

00:31:32.216 --> 00:31:33.236 A:middle
really easy to add.

00:31:34.486 --> 00:31:36.046 A:middle
I can just wrap my change in a

00:31:36.046 --> 00:31:36.976 A:middle
call to WithAnimation.

00:31:42.066 --> 00:31:43.826 A:middle
And now my change is animated.

00:31:44.516 --> 00:31:50.546 A:middle
[ Applause ]

00:31:51.046 --> 00:31:52.746 A:middle
And not only that, the animation

00:31:52.746 --> 00:31:53.706 A:middle
is fully interactive and

00:31:53.706 --> 00:31:55.186 A:middle
interruptible so I can always

00:31:55.186 --> 00:31:56.086 A:middle
change between the different

00:31:56.086 --> 00:31:57.966 A:middle
states and it always ends up in

00:31:57.966 --> 00:31:59.306 A:middle
the right place.

00:32:00.101 --> 00:32:02.101 A:middle
[ Applause ]

00:32:02.186 --> 00:32:02.556 A:middle
Yeah, it's great.

00:32:03.516 --> 00:32:05.646 A:middle
[ Applause ]

00:32:06.146 --> 00:32:07.526 A:middle
Now I would add the Enhance

00:32:07.526 --> 00:32:09.346 A:middle
button next, but it turns out

00:32:09.476 --> 00:32:10.426 A:middle
that the way Kyle trained the

00:32:10.426 --> 00:32:12.156 A:middle
model, it only ever worked on

00:32:12.156 --> 00:32:13.226 A:middle
that one image that he showed.

00:32:13.676 --> 00:32:16.096 A:middle
So I'm going to add something

00:32:16.096 --> 00:32:16.556 A:middle
more useful.

00:32:17.926 --> 00:32:19.166 A:middle
One of our coworkers is in

00:32:19.166 --> 00:32:20.736 A:middle
London so we often want to know

00:32:20.736 --> 00:32:21.576 A:middle
which rooms have video

00:32:21.576 --> 00:32:22.066 A:middle
conferencing.

00:32:23.196 --> 00:32:24.416 A:middle
So let's show an icon for that

00:32:24.476 --> 00:32:25.726 A:middle
on top of our detail view.

00:32:27.186 --> 00:32:29.546 A:middle
I can use a Zstack to show views

00:32:29.606 --> 00:32:30.556 A:middle
stacked on top of each other.

00:32:34.496 --> 00:32:35.856 A:middle
So I'll put our existing image

00:32:35.856 --> 00:32:38.486 A:middle
inside of that Zstack and then

00:32:38.616 --> 00:32:40.616 A:middle
I'll add another image to show

00:32:40.616 --> 00:32:42.086 A:middle
an icon for whether the room has

00:32:42.086 --> 00:32:43.366 A:middle
video or not.

00:32:44.236 --> 00:32:46.426 A:middle
I'll just use a symbol image and

00:32:47.536 --> 00:32:49.416 A:middle
we'll use Video.fill.

00:32:51.496 --> 00:32:52.816 A:middle
Okay, we have our icon here, but

00:32:52.886 --> 00:32:54.016 A:middle
it's a little bit small.

00:32:55.166 --> 00:32:56.436 A:middle
But symbol images automatically

00:32:56.436 --> 00:32:57.826 A:middle
use the current font to size

00:32:57.826 --> 00:32:59.306 A:middle
themselves, so I can easily

00:32:59.306 --> 00:33:01.106 A:middle
change to a larger font with a

00:32:59.306 --> 00:33:01.106 A:middle
change to a larger font with a

00:33:01.106 --> 00:33:01.576 A:middle
modifier.

00:33:02.196 --> 00:33:04.316 A:middle
We'll just drag this into our

00:33:04.316 --> 00:33:06.246 A:middle
code and apply it to the image.

00:33:07.096 --> 00:33:07.886 A:middle
And Title sounds good.

00:33:07.886 --> 00:33:10.316 A:middle
Now we've got our larger image.

00:33:11.366 --> 00:33:12.606 A:middle
Next, I want this image to be in

00:33:12.606 --> 00:33:13.186 A:middle
the top-left.

00:33:13.986 --> 00:33:15.036 A:middle
So let's set our Zstack's

00:33:15.036 --> 00:33:18.386 A:middle
alignment to be topLeading.

00:33:19.076 --> 00:33:21.916 A:middle
Okay. Next let's add some

00:33:21.916 --> 00:33:23.416 A:middle
padding so that this is not up

00:33:23.416 --> 00:33:24.116 A:middle
against the edge here.

00:33:25.166 --> 00:33:26.676 A:middle
Again, we can use a modifier to

00:33:26.676 --> 00:33:26.966 A:middle
do this.

00:33:28.376 --> 00:33:29.596 A:middle
And we'll just drag it in onto

00:33:29.596 --> 00:33:30.316 A:middle
our system image.

00:33:30.846 --> 00:33:33.946 A:middle
And All Edges seems like a good

00:33:33.946 --> 00:33:34.336 A:middle
choice here.

00:33:35.606 --> 00:33:37.326 A:middle
Okay, this is close, but I

00:33:37.326 --> 00:33:38.506 A:middle
really want to have this icon

00:33:38.946 --> 00:33:40.166 A:middle
all the way at the top of our

00:33:40.166 --> 00:33:40.586 A:middle
view area.

00:33:40.586 --> 00:33:43.116 A:middle
And we can get our video icon

00:33:43.116 --> 00:33:44.736 A:middle
there by putting our room image

00:33:44.866 --> 00:33:46.156 A:middle
inside of a flexible frame.

00:33:47.096 --> 00:33:48.546 A:middle
The frame will stretch to fill

00:33:48.546 --> 00:33:49.096 A:middle
the whole screen.

00:33:49.096 --> 00:33:51.306 A:middle
And when it has extra space, it

00:33:51.306 --> 00:33:53.516 A:middle
will center its contents inside

00:33:53.516 --> 00:33:54.686 A:middle
of it.

00:33:54.686 --> 00:33:56.026 A:middle
This means that our room image

00:33:56.026 --> 00:33:56.836 A:middle
will still be at the right

00:33:56.836 --> 00:33:57.066 A:middle
place.

00:33:58.166 --> 00:34:00.016 A:middle
So I'll add our flexible frame

00:33:58.166 --> 00:34:00.016 A:middle
So I'll add our flexible frame

00:34:00.076 --> 00:34:00.646 A:middle
to our image.

00:34:03.066 --> 00:34:04.796 A:middle
And we'll use a minimum width of

00:34:04.796 --> 00:34:06.736 A:middle
zero and a max width of

00:34:06.736 --> 00:34:07.176 A:middle
infinity.

00:34:07.776 --> 00:34:10.096 A:middle
And we'll do the same thing for

00:34:10.096 --> 00:34:10.396 A:middle
our height.

00:34:16.186 --> 00:34:16.545 A:middle
There we go.

00:34:17.856 --> 00:34:18.856 A:middle
And if you're curious to learn

00:34:18.856 --> 00:34:20.226 A:middle
more about how layout works in

00:34:20.226 --> 00:34:21.786 A:middle
SwiftUI, check out the Building

00:34:21.826 --> 00:34:23.356 A:middle
Custom Views in SwiftUI session.

00:34:23.985 --> 00:34:26.136 A:middle
Now we have our icon.

00:34:26.766 --> 00:34:27.906 A:middle
But we only want it to appear

00:34:28.036 --> 00:34:29.056 A:middle
when a room has video

00:34:29.056 --> 00:34:29.636 A:middle
conferencing.

00:34:30.116 --> 00:34:30.815 A:middle
So how do we do that?

00:34:32.076 --> 00:34:33.156 A:middle
Well, the declarative syntax

00:34:33.156 --> 00:34:34.356 A:middle
that we're using makes that

00:34:34.356 --> 00:34:34.886 A:middle
really easy.

00:34:35.536 --> 00:34:36.926 A:middle
We can just use an if.

00:34:37.576 --> 00:34:39.065 A:middle
So I'll add an if and we'll

00:34:39.065 --> 00:34:40.835 A:middle
check whether our room has

00:34:40.835 --> 00:34:41.156 A:middle
video.

00:34:42.016 --> 00:34:43.476 A:middle
And we'll only show our image

00:34:43.545 --> 00:34:46.416 A:middle
when that's true.

00:34:46.626 --> 00:34:48.136 A:middle
Now we can check if this is

00:34:48.136 --> 00:34:49.505 A:middle
working by changing our preview

00:34:49.505 --> 00:34:51.356 A:middle
data to a room that doesn't have

00:34:51.545 --> 00:34:53.056 A:middle
video, which is nice.

00:34:54.076 --> 00:34:55.406 A:middle
But even better, we can actually

00:34:55.406 --> 00:34:56.516 A:middle
set up our previews to show

00:34:56.516 --> 00:34:58.176 A:middle
multiple versions of our views

00:34:58.176 --> 00:34:58.626 A:middle
at once.

00:34:59.966 --> 00:35:01.556 A:middle
To do that, I'm just going to

00:34:59.966 --> 00:35:01.556 A:middle
To do that, I'm just going to

00:35:01.556 --> 00:35:04.106 A:middle
embed this view inside of a

00:35:04.876 --> 00:35:05.006 A:middle
group.

00:35:05.126 --> 00:35:06.566 A:middle
And now I can have multiple

00:35:06.566 --> 00:35:07.736 A:middle
views here.

00:35:08.856 --> 00:35:10.706 A:middle
So let's create a second version

00:35:11.946 --> 00:35:12.846 A:middle
using different test data.

00:35:13.936 --> 00:35:15.266 A:middle
Now we have one version of our

00:35:15.266 --> 00:35:16.976 A:middle
view with video conferencing,

00:35:17.636 --> 00:35:18.606 A:middle
and another version without.

00:35:19.516 --> 00:35:26.816 A:middle
[ Applause ]

00:35:27.316 --> 00:35:29.266 A:middle
Now let's go back to live mode.

00:35:30.836 --> 00:35:32.386 A:middle
Now when I'm in the Zoom state,

00:35:32.666 --> 00:35:34.086 A:middle
having that icon on top of my

00:35:34.086 --> 00:35:35.366 A:middle
image is a little distracting.

00:35:36.196 --> 00:35:37.406 A:middle
So let's update it to also

00:35:37.406 --> 00:35:38.466 A:middle
disappear when we're zoomed.

00:35:39.286 --> 00:35:40.656 A:middle
We can do that just by updating

00:35:40.656 --> 00:35:40.976 A:middle
our condition.

00:35:47.446 --> 00:35:49.696 A:middle
Now the icon automatically shows

00:35:49.696 --> 00:35:51.156 A:middle
and hides as we zoom in and out.

00:35:51.646 --> 00:35:52.976 A:middle
But even better, it animates,

00:35:53.316 --> 00:35:54.006 A:middle
fading in and out.

00:35:55.326 --> 00:35:56.676 A:middle
And we can also customize that

00:35:56.676 --> 00:35:58.556 A:middle
animation behavior by setting it

00:35:58.556 --> 00:35:59.536 A:middle
to a different transition.

00:36:00.186 --> 00:36:04.796 A:middle
So let's try .move and we'll use

00:36:04.796 --> 00:36:06.066 A:middle
the leading edge.

00:36:07.526 --> 00:36:09.306 A:middle
Now our icon slides out and

00:36:09.306 --> 00:36:09.976 A:middle
slides back in.

00:36:10.516 --> 00:36:17.036 A:middle
[ Applause ]

00:36:17.536 --> 00:36:18.416 A:middle
And let me also make this a

00:36:18.416 --> 00:36:20.626 A:middle
longer animation by specifying a

00:36:20.626 --> 00:36:22.696 A:middle
custom animation with a duration

00:36:22.816 --> 00:36:23.426 A:middle
of two seconds.

00:36:24.106 --> 00:36:27.006 A:middle
Now we can see our animation in

00:36:27.006 --> 00:36:29.706 A:middle
more detail and we can also see

00:36:29.706 --> 00:36:31.016 A:middle
what happens if we tap on it

00:36:31.046 --> 00:36:31.946 A:middle
while the animation is still

00:36:31.946 --> 00:36:32.266 A:middle
going.

00:36:32.986 --> 00:36:34.036 A:middle
It turns around and comes right

00:36:35.256 --> 00:36:35.556 A:middle
back.

00:36:35.556 --> 00:36:37.226 A:middle
Again, our animation is always

00:36:37.226 --> 00:36:39.156 A:middle
interactive and we can always

00:36:39.206 --> 00:36:40.376 A:middle
tap on it and it will end up in

00:36:40.376 --> 00:36:40.886 A:middle
the right state.

00:36:41.546 --> 00:36:43.466 A:middle
So that's our detail view.

00:36:44.256 --> 00:36:45.186 A:middle
Now let's review what we just

00:36:45.216 --> 00:36:45.466 A:middle
built.

00:36:46.306 --> 00:36:48.616 A:middle
Our detail view is configured

00:36:48.616 --> 00:36:50.806 A:middle
with a room to show and remember

00:36:50.806 --> 00:36:51.926 A:middle
that that's a derived value

00:36:52.106 --> 00:36:53.186 A:middle
passed in by the parent of the

00:36:53.186 --> 00:36:53.396 A:middle
view.

00:36:53.396 --> 00:36:55.726 A:middle
And we also have our state

00:36:55.726 --> 00:36:57.706 A:middle
property which controls whether

00:36:57.876 --> 00:36:58.986 A:middle
this view is zoomed in or not.

00:36:58.986 --> 00:37:01.406 A:middle
And this is persisted by the

00:36:58.986 --> 00:37:01.406 A:middle
And this is persisted by the

00:37:01.406 --> 00:37:02.996 A:middle
framework and controls the

00:37:02.996 --> 00:37:03.756 A:middle
aspect ratio.

00:37:06.226 --> 00:37:08.046 A:middle
Then we also have our video icon

00:37:09.146 --> 00:37:10.616 A:middle
and that's only shown for views

00:37:10.706 --> 00:37:12.216 A:middle
that have video conferencing and

00:37:12.216 --> 00:37:13.186 A:middle
only when they're not zoomed.

00:37:14.146 --> 00:37:15.596 A:middle
And we're also specifying this

00:37:15.596 --> 00:37:17.176 A:middle
transition to make the icon

00:37:17.236 --> 00:37:17.916 A:middle
slide in and out.

00:37:18.496 --> 00:37:20.196 A:middle
But what's actually happening

00:37:20.196 --> 00:37:21.146 A:middle
during that transition?

00:37:22.076 --> 00:37:23.516 A:middle
Well, when this icon is removed,

00:37:24.416 --> 00:37:25.616 A:middle
the view gets animated to a new

00:37:25.616 --> 00:37:28.316 A:middle
position and SwiftUI waits until

00:37:28.316 --> 00:37:29.526 A:middle
it finishes that animation to

00:37:29.676 --> 00:37:30.906 A:middle
actually remove the view from

00:37:30.906 --> 00:37:31.446 A:middle
the hierarchy.

00:37:32.496 --> 00:37:33.666 A:middle
And the when it's coming back,

00:37:35.026 --> 00:37:36.496 A:middle
SwiftUI inserts it off-screen

00:37:36.496 --> 00:37:38.046 A:middle
and the moves it back in with an

00:37:38.046 --> 00:37:38.566 A:middle
animation.

00:37:39.816 --> 00:37:40.896 A:middle
I've wanted to be able to do

00:37:40.896 --> 00:37:42.306 A:middle
AddSubview and RemoveSubview

00:37:42.306 --> 00:37:43.476 A:middle
with an animation for a really

00:37:43.476 --> 00:37:45.136 A:middle
long time, so I'm really excited

00:37:45.136 --> 00:37:46.386 A:middle
to finally have it.

00:37:47.516 --> 00:37:52.606 A:middle
[ Applause ]

00:37:53.106 --> 00:37:54.346 A:middle
And recall that this animation

00:37:54.396 --> 00:37:55.736 A:middle
is always interactive right out

00:37:55.736 --> 00:37:56.146 A:middle
of the box.

00:37:57.116 --> 00:37:58.306 A:middle
This is where being data-driven

00:37:58.306 --> 00:37:59.566 A:middle
instead of event-driven really

00:37:59.566 --> 00:38:00.006 A:middle
shines.

00:37:59.566 --> 00:38:00.006 A:middle
shines.

00:38:00.566 --> 00:38:01.646 A:middle
All those events that Kyle

00:38:01.646 --> 00:38:02.986 A:middle
talked about can happen while

00:38:02.986 --> 00:38:03.766 A:middle
this is animating.

00:38:04.476 --> 00:38:05.846 A:middle
And animations beginning and

00:38:05.846 --> 00:38:07.076 A:middle
ending are even more events.

00:38:07.806 --> 00:38:09.146 A:middle
It's incredibly difficult to

00:38:09.146 --> 00:38:10.506 A:middle
build something like this in an

00:38:10.506 --> 00:38:11.476 A:middle
event driven world.

00:38:11.926 --> 00:38:13.356 A:middle
But in SwiftUI it's just one

00:38:13.356 --> 00:38:14.526 A:middle
line of code.

00:38:17.066 --> 00:38:18.566 A:middle
Now let's go back to our list of

00:38:18.566 --> 00:38:19.916 A:middle
rooms and finish up this app.

00:38:24.046 --> 00:38:25.446 A:middle
Over time, we need to be able to

00:38:25.446 --> 00:38:26.646 A:middle
change our list of conference

00:38:26.646 --> 00:38:28.156 A:middle
rooms, so let's add some editing

00:38:28.156 --> 00:38:28.526 A:middle
support.

00:38:29.566 --> 00:38:30.546 A:middle
And while we're at it, let's

00:38:30.546 --> 00:38:31.596 A:middle
also make our data model a

00:38:31.636 --> 00:38:32.436 A:middle
little more real.

00:38:33.526 --> 00:38:35.426 A:middle
Right now, the data in our app

00:38:35.626 --> 00:38:36.476 A:middle
is completely static.

00:38:37.096 --> 00:38:39.746 A:middle
We have this array of rooms and

00:38:39.746 --> 00:38:41.096 A:middle
whatever we start with is what

00:38:41.096 --> 00:38:41.736 A:middle
we'll always have.

00:38:42.326 --> 00:38:44.136 A:middle
So let's update our model to

00:38:44.136 --> 00:38:45.596 A:middle
have a root store object that

00:38:45.596 --> 00:38:46.966 A:middle
will contain our rooms and will

00:38:46.966 --> 00:38:48.266 A:middle
be able to change over time.

00:38:48.856 --> 00:38:51.476 A:middle
I'm going to drag in a prebuilt

00:38:51.476 --> 00:38:52.836 A:middle
model file with our room store.

00:39:01.596 --> 00:39:03.346 A:middle
Notice that our store is a

00:39:03.346 --> 00:39:04.906 A:middle
mutable object which contains

00:39:04.906 --> 00:39:05.586 A:middle
the rooms that we need.

00:39:06.616 --> 00:39:08.106 A:middle
And all we need to do is tell

00:39:08.106 --> 00:39:09.856 A:middle
SwiftUI when it changes.

00:39:10.926 --> 00:39:12.306 A:middle
To do that, I'm going to conform

00:39:12.306 --> 00:39:13.226 A:middle
it to the bindable object

00:39:13.256 --> 00:39:15.436 A:middle
protocol which requires me to

00:39:15.436 --> 00:39:16.706 A:middle
have a DidChange property.

00:39:23.066 --> 00:39:24.416 A:middle
Now new this year is the Combine

00:39:24.416 --> 00:39:25.956 A:middle
framework which includes a large

00:39:25.956 --> 00:39:27.206 A:middle
number of components you can use

00:39:27.206 --> 00:39:28.306 A:middle
to connect your data together.

00:39:29.186 --> 00:39:30.586 A:middle
Here we use the pass-through

00:39:30.586 --> 00:39:31.986 A:middle
publisher, a pass-through

00:39:31.986 --> 00:39:34.106 A:middle
subject from Combine which gives

00:39:34.106 --> 00:39:35.726 A:middle
us a local object that we can

00:39:35.726 --> 00:39:37.126 A:middle
subscribe to and send updates

00:39:37.126 --> 00:39:38.696 A:middle
to, similar to a notification

00:39:38.696 --> 00:39:38.976 A:middle
center.

00:39:42.856 --> 00:39:44.556 A:middle
Then we'll just update our rooms

00:39:46.076 --> 00:39:48.586 A:middle
to have a DidSet so that we can

00:39:48.586 --> 00:39:49.626 A:middle
notify our subject when our

00:39:49.626 --> 00:39:49.976 A:middle
rooms change.

00:39:55.166 --> 00:39:56.056 A:middle
And if you're interested to

00:39:56.056 --> 00:39:57.186 A:middle
learn more about Combine, there

00:39:57.186 --> 00:39:58.476 A:middle
are two sessions this week to

00:39:58.476 --> 00:40:00.286 A:middle
take you through all of the

00:39:58.476 --> 00:40:00.286 A:middle
take you through all of the

00:40:00.956 --> 00:40:01.156 A:middle
details.

00:40:01.276 --> 00:40:02.736 A:middle
Now let's go back to our view

00:40:03.436 --> 00:40:05.676 A:middle
and update it to use our store.

00:40:07.026 --> 00:40:08.106 A:middle
We'll change from this Rooms

00:40:08.106 --> 00:40:09.786 A:middle
property to a Store property.

00:40:10.476 --> 00:40:13.316 A:middle
And we'll make it an object

00:40:13.316 --> 00:40:15.356 A:middle
binding to tell SwiftUI to

00:40:15.396 --> 00:40:16.536 A:middle
listen to changes for this

00:40:16.536 --> 00:40:16.866 A:middle
property.

00:40:17.876 --> 00:40:19.566 A:middle
And again, the Data Flow Through

00:40:19.566 --> 00:40:20.626 A:middle
SwiftUI session that Kyle

00:40:20.626 --> 00:40:22.076 A:middle
mentioned earlier has a lot more

00:40:22.076 --> 00:40:23.296 A:middle
information about how object

00:40:23.296 --> 00:40:24.376 A:middle
binding and these other pieces

00:40:24.376 --> 00:40:24.636 A:middle
work.

00:40:25.126 --> 00:40:27.716 A:middle
Let's also update our preview to

00:40:27.716 --> 00:40:28.666 A:middle
create our new store type.

00:40:32.216 --> 00:40:34.356 A:middle
Using our test data.

00:40:34.526 --> 00:40:35.806 A:middle
And we'll also update our list

00:40:36.026 --> 00:40:37.436 A:middle
to pull the rooms from out of

00:40:37.976 --> 00:40:39.686 A:middle
the store.

00:40:39.906 --> 00:40:40.126 A:middle
Great.

00:40:40.826 --> 00:40:41.866 A:middle
Now we're using our new model

00:40:41.946 --> 00:40:43.176 A:middle
and whenever it updates, our

00:40:43.176 --> 00:40:44.156 A:middle
view will create a fresh

00:40:44.156 --> 00:40:44.486 A:middle
rendering.

00:40:45.996 --> 00:40:46.996 A:middle
This means we're ready to add

00:40:46.996 --> 00:40:47.796 A:middle
our editing support.

00:40:48.746 --> 00:40:50.006 A:middle
Let's start by adding a button

00:40:50.316 --> 00:40:51.896 A:middle
to our list to add new rooms.

00:40:53.156 --> 00:40:54.376 A:middle
Right now, we're using a single

00:40:54.376 --> 00:40:55.766 A:middle
collection to drive the list

00:40:56.386 --> 00:40:57.336 A:middle
which is great for lists that

00:40:57.336 --> 00:40:58.496 A:middle
are entirely data-driven.

00:40:59.096 --> 00:41:00.626 A:middle
But when I need more, SwiftUI

00:40:59.096 --> 00:41:00.626 A:middle
But when I need more, SwiftUI

00:41:00.626 --> 00:41:02.536 A:middle
also lets me mix static and

00:41:02.536 --> 00:41:04.106 A:middle
dynamic content in lists and

00:41:04.106 --> 00:41:04.956 A:middle
other containers.

00:41:05.546 --> 00:41:08.826 A:middle
So I can replace this list using

00:41:08.826 --> 00:41:10.556 A:middle
the collection with a ForEach.

00:41:11.166 --> 00:41:14.236 A:middle
A ForEach creates a view for

00:41:14.236 --> 00:41:15.426 A:middle
each item in its collection.

00:41:16.046 --> 00:41:19.336 A:middle
So now I can add a static

00:41:19.336 --> 00:41:20.716 A:middle
element right alongside this

00:41:20.716 --> 00:41:21.176 A:middle
ForEach.

00:41:22.416 --> 00:41:23.796 A:middle
I'll just go to the library and

00:41:23.796 --> 00:41:24.976 A:middle
find a button.

00:41:27.286 --> 00:41:28.826 A:middle
And then I can just drag it into

00:41:28.826 --> 00:41:31.266 A:middle
my code to add it to our list.

00:41:33.296 --> 00:41:35.116 A:middle
Let's update its text to show

00:41:35.116 --> 00:41:35.676 A:middle
Add Room.

00:41:36.846 --> 00:41:38.136 A:middle
And let's add a method to add

00:41:38.136 --> 00:41:38.756 A:middle
that new room.

00:41:43.436 --> 00:41:45.616 A:middle
Okay, we'll tell our Store to

00:41:45.616 --> 00:41:46.596 A:middle
append a new room.

00:41:47.266 --> 00:41:51.246 A:middle
And let's just use the room that

00:41:52.096 --> 00:41:52.436 A:middle
we're in.

00:41:52.436 --> 00:41:53.446 A:middle
It's called Hall 2 and I think

00:41:53.886 --> 00:41:54.816 A:middle
there's what, about 2,000 of

00:41:54.906 --> 00:41:54.976 A:middle
you.

00:41:59.046 --> 00:42:00.336 A:middle
And finally, let's update our

00:41:59.046 --> 00:42:00.336 A:middle
And finally, let's update our

00:42:00.336 --> 00:42:01.686 A:middle
button to use our new Add Room

00:42:01.686 --> 00:42:01.976 A:middle
method.

00:42:04.126 --> 00:42:05.746 A:middle
Okay, now let's go to Live Mode

00:42:05.746 --> 00:42:06.646 A:middle
and try out our new button.

00:42:07.406 --> 00:42:09.626 A:middle
There it is, right next to all

00:42:09.626 --> 00:42:10.026 A:middle
of our data.

00:42:10.166 --> 00:42:12.126 A:middle
And when I tap it, we get our

00:42:12.126 --> 00:42:12.566 A:middle
new room.

00:42:13.476 --> 00:42:13.716 A:middle
Great.

00:42:14.516 --> 00:42:21.816 A:middle
[ Applause ]

00:42:22.316 --> 00:42:23.456 A:middle
So just like that, we were able

00:42:23.456 --> 00:42:24.626 A:middle
to add this single static

00:42:24.626 --> 00:42:25.976 A:middle
element alongside our

00:42:25.976 --> 00:42:26.956 A:middle
data-driven collection.

00:42:27.936 --> 00:42:29.466 A:middle
SwiftUI lets us easily describe

00:42:29.466 --> 00:42:30.656 A:middle
these powerful combinations

00:42:31.256 --> 00:42:32.486 A:middle
which makes it so much easier to

00:42:32.486 --> 00:42:33.716 A:middle
build complex list UI's.

00:42:34.126 --> 00:42:35.466 A:middle
No more off by one index path

00:42:35.466 --> 00:42:35.876 A:middle
errors.

00:42:38.366 --> 00:42:39.896 A:middle
But I want to style this to look

00:42:39.896 --> 00:42:40.406 A:middle
even better.

00:42:41.386 --> 00:42:42.986 A:middle
Let's put the Add button and all

00:42:42.986 --> 00:42:44.356 A:middle
of our content into separate

00:42:44.356 --> 00:42:44.776 A:middle
sections.

00:42:45.986 --> 00:42:48.296 A:middle
We can change our list style to

00:42:49.356 --> 00:42:54.006 A:middle
be grouped, which gives us this

00:42:54.006 --> 00:42:54.786 A:middle
nice grouped appearance.

00:42:55.956 --> 00:42:57.296 A:middle
Then we'll add a section

00:42:57.296 --> 00:42:58.786 A:middle
container around our button.

00:43:02.166 --> 00:43:03.506 A:middle
And another one around our

00:43:03.576 --> 00:43:04.016 A:middle
ForEach.

00:43:07.336 --> 00:43:08.466 A:middle
Great, now we have our separate

00:43:08.466 --> 00:43:08.796 A:middle
sections.

00:43:09.386 --> 00:43:12.126 A:middle
Next, let's hook up deletion for

00:43:12.126 --> 00:43:12.536 A:middle
our list.

00:43:13.676 --> 00:43:17.406 A:middle
We'll add a method to delete a

00:43:17.406 --> 00:43:19.686 A:middle
set of rooms and we'll pass in

00:43:20.156 --> 00:43:22.486 A:middle
some offsets for where to remove

00:43:23.816 --> 00:43:23.916 A:middle
them.

00:43:24.146 --> 00:43:25.526 A:middle
Then we'll just tell our store

00:43:26.506 --> 00:43:28.026 A:middle
to remove the rooms that those

00:43:28.026 --> 00:43:28.386 A:middle
offsets.

00:43:32.296 --> 00:43:34.586 A:middle
Then we can add a modifier onto

00:43:34.586 --> 00:43:36.146 A:middle
our ForEach called OnDelete.

00:43:36.796 --> 00:43:39.056 A:middle
And we can pass in our delete

00:43:39.056 --> 00:43:41.396 A:middle
method to that modifier.

00:43:42.046 --> 00:43:44.526 A:middle
Now if we go back into Live

00:43:44.526 --> 00:43:47.886 A:middle
Mode, we can swipe on one of our

00:43:47.886 --> 00:43:49.646 A:middle
rows and delete it, just like

00:43:50.756 --> 00:43:50.846 A:middle
that.

00:43:51.516 --> 00:43:57.156 A:middle
[ Applause ]

00:43:57.656 --> 00:43:59.206 A:middle
This ForEach is now configured

00:43:59.206 --> 00:44:00.516 A:middle
to call into our callback

00:43:59.206 --> 00:44:00.516 A:middle
to call into our callback

00:44:01.596 --> 00:44:03.386 A:middle
whenever items get removed from

00:44:03.386 --> 00:44:03.486 A:middle
it.

00:44:04.406 --> 00:44:05.696 A:middle
And then our callback calls into

00:44:05.696 --> 00:44:07.056 A:middle
the Store to remove those items.

00:44:07.756 --> 00:44:08.656 A:middle
And then our view updates.

00:44:09.416 --> 00:44:09.516 A:middle
Okay.

00:44:10.536 --> 00:44:12.636 A:middle
Now we want to be able to take

00:44:12.636 --> 00:44:13.816 A:middle
our list into Edit Mode in

00:44:13.816 --> 00:44:14.936 A:middle
addition to just allowing swipe

00:44:14.976 --> 00:44:15.406 A:middle
to delete.

00:44:16.456 --> 00:44:18.786 A:middle
So let's set a navigation bar

00:44:18.786 --> 00:44:20.206 A:middle
item, and we can do that the

00:44:20.206 --> 00:44:21.606 A:middle
same way we set this navigation

00:44:21.606 --> 00:44:22.606 A:middle
bar title-- with another

00:44:22.606 --> 00:44:23.096 A:middle
modifier.

00:44:26.206 --> 00:44:27.886 A:middle
And to create an Edit button, we

00:44:27.886 --> 00:44:28.826 A:middle
just create an Edit button.

00:44:28.826 --> 00:44:31.186 A:middle
And there it is in our UI.

00:44:31.186 --> 00:44:34.016 A:middle
And while we're at it, let's

00:44:34.016 --> 00:44:35.236 A:middle
also add reordering support.

00:44:36.536 --> 00:44:37.996 A:middle
Again, I'll just add a simple

00:44:37.996 --> 00:44:39.756 A:middle
method to move items.

00:44:41.126 --> 00:44:42.436 A:middle
And we'll move it from a source

00:44:43.196 --> 00:44:45.976 A:middle
to a destination.

00:44:49.056 --> 00:44:50.306 A:middle
And again, we'll just call into

00:44:50.306 --> 00:44:52.676 A:middle
our Store's Rooms and tell it to

00:44:52.676 --> 00:44:52.906 A:middle
move.

00:44:57.276 --> 00:44:57.556 A:middle
Okay.

00:44:58.326 --> 00:45:00.556 A:middle
Then just like before, we'll add

00:44:58.326 --> 00:45:00.556 A:middle
Then just like before, we'll add

00:45:00.556 --> 00:45:02.116 A:middle
another modifier, this time on

00:45:02.116 --> 00:45:05.126 A:middle
Move, and tell it to call into

00:45:05.126 --> 00:45:07.676 A:middle
the method that we just added.

00:45:07.886 --> 00:45:09.386 A:middle
Now let's try our app again.

00:45:10.946 --> 00:45:12.116 A:middle
We can toggle Edit Mode for our

00:45:12.116 --> 00:45:12.566 A:middle
list.

00:45:13.476 --> 00:45:14.736 A:middle
And notice that all of our data

00:45:14.736 --> 00:45:16.516 A:middle
rows have editing controls but

00:45:16.516 --> 00:45:17.236 A:middle
the button does not.

00:45:18.146 --> 00:45:19.776 A:middle
SwiftUI automatically shows the

00:45:19.776 --> 00:45:21.516 A:middle
right editing controls in the

00:45:21.516 --> 00:45:23.216 A:middle
places that need it, without us

00:45:23.216 --> 00:45:24.976 A:middle
having to do any extra work.

00:45:25.516 --> 00:45:27.566 A:middle
[ Applause ]

00:45:28.066 --> 00:45:28.526 A:middle
Yeah, it's cool.

00:45:29.031 --> 00:45:31.031 A:middle
[ Applause ]

00:45:31.046 --> 00:45:32.356 A:middle
And of course now we can drag to

00:45:32.356 --> 00:45:34.496 A:middle
reorder and tap on items to

00:45:34.496 --> 00:45:34.976 A:middle
remove them.

00:45:37.016 --> 00:45:38.286 A:middle
[ Applause ]

00:45:38.286 --> 00:45:38.546 A:middle
Thank you.

00:45:39.516 --> 00:45:42.586 A:middle
[ Applause ]

00:45:43.086 --> 00:45:44.326 A:middle
So let's quickly review what we

00:45:44.326 --> 00:45:44.796 A:middle
just added.

00:45:45.956 --> 00:45:47.676 A:middle
We customized our list to show

00:45:47.676 --> 00:45:50.016 A:middle
multiple sections, and by

00:45:50.016 --> 00:45:50.956 A:middle
setting its list style to

00:45:50.956 --> 00:45:51.266 A:middle
grouped.

00:45:52.286 --> 00:45:53.586 A:middle
And we mixed this static button

00:45:54.186 --> 00:45:55.306 A:middle
together with our data-driven

00:45:55.306 --> 00:45:56.896 A:middle
collection from our Rooms.

00:45:58.006 --> 00:45:59.046 A:middle
And we also saw how we can

00:45:59.046 --> 00:46:00.476 A:middle
quickly add editing operations

00:45:59.046 --> 00:46:00.476 A:middle
quickly add editing operations

00:46:00.476 --> 00:46:01.696 A:middle
to our list with just these

00:46:01.696 --> 00:46:03.836 A:middle
modifiers and a few functions to

00:46:03.836 --> 00:46:04.556 A:middle
modify our data.

00:46:05.276 --> 00:46:07.376 A:middle
And remember how we made our

00:46:07.376 --> 00:46:08.936 A:middle
room type identifiable earlier?

00:46:09.846 --> 00:46:11.726 A:middle
Well, ForEach automatically

00:46:11.726 --> 00:46:12.896 A:middle
watches for changes to its

00:46:12.896 --> 00:46:14.726 A:middle
collection and synthesizes the

00:46:14.726 --> 00:46:16.536 A:middle
correct insertions, deletions,

00:46:16.696 --> 00:46:18.436 A:middle
and changes for us, so we no

00:46:18.436 --> 00:46:19.766 A:middle
longer need to tell the list to

00:46:19.766 --> 00:46:21.456 A:middle
add and remove rows, which means

00:46:21.456 --> 00:46:22.656 A:middle
we no longer have to worry about

00:46:22.656 --> 00:46:23.306 A:middle
getting data source

00:46:23.416 --> 00:46:24.606 A:middle
inconsistency exceptions.

00:46:26.016 --> 00:46:27.096 A:middle
[ Applause ]

00:46:27.096 --> 00:46:27.536 A:middle
Yep, that's right.

00:46:28.516 --> 00:46:30.686 A:middle
[ Applause ]

00:46:31.186 --> 00:46:31.926 A:middle
So that's our list.

00:46:32.256 --> 00:46:32.956 A:middle
And we made this whole

00:46:32.956 --> 00:46:34.856 A:middle
sophisticated list UI with just

00:46:34.946 --> 00:46:36.636 A:middle
this really minimal view code.

00:46:39.256 --> 00:46:40.876 A:middle
Okay, now we were able to build

00:46:40.876 --> 00:46:42.306 A:middle
this app up really quickly.

00:46:43.206 --> 00:46:44.126 A:middle
But you might be thinking that

00:46:44.126 --> 00:46:45.176 A:middle
there's still a lot more work we

00:46:45.176 --> 00:46:46.356 A:middle
need to do to get it ready for

00:46:46.356 --> 00:46:46.856 A:middle
customers.

00:46:47.676 --> 00:46:49.326 A:middle
These days, support for dynamic

00:46:49.406 --> 00:46:51.296 A:middle
type, dark mode, accessibility,

00:46:51.296 --> 00:46:52.786 A:middle
localization -- these are all

00:46:52.786 --> 00:46:53.806 A:middle
just expected for an app.

00:46:55.046 --> 00:46:56.356 A:middle
But with SwiftUI you get a lot

00:46:56.356 --> 00:46:57.636 A:middle
more support for these behaviors

00:46:57.686 --> 00:46:58.266 A:middle
automatically.

00:46:59.066 --> 00:47:00.226 A:middle
And we can use previews to

00:46:59.066 --> 00:47:00.226 A:middle
And we can use previews to

00:47:00.226 --> 00:47:01.366 A:middle
really quickly test all of

00:47:01.366 --> 00:47:01.586 A:middle
these.

00:47:02.916 --> 00:47:04.156 A:middle
So let's go to our preview and

00:47:04.956 --> 00:47:05.726 A:middle
add some more views.

00:47:05.786 --> 00:47:08.446 A:middle
Again, I'll add a group to let

00:47:09.036 --> 00:47:10.226 A:middle
us have multiple children.

00:47:10.826 --> 00:47:13.476 A:middle
And then I'll add another

00:47:13.476 --> 00:47:14.576 A:middle
version of our view.

00:47:15.256 --> 00:47:17.676 A:middle
And this time we'll change the

00:47:17.676 --> 00:47:21.716 A:middle
environment to use a size

00:47:21.716 --> 00:47:23.726 A:middle
category that's a much larger

00:47:24.406 --> 00:47:24.526 A:middle
size.

00:47:27.066 --> 00:47:28.166 A:middle
Let's go see how it looks.

00:47:28.266 --> 00:47:29.666 A:middle
And everything automatically

00:47:30.326 --> 00:47:31.596 A:middle
works great.

00:47:31.786 --> 00:47:31.856 A:middle
Now --

00:47:32.201 --> 00:47:34.201 A:middle
[ Applause ]

00:47:34.386 --> 00:47:35.356 A:middle
Yeah. It's great to get this for

00:47:36.886 --> 00:47:37.006 A:middle
free.

00:47:37.266 --> 00:47:38.666 A:middle
Now the environment is a way

00:47:38.666 --> 00:47:39.796 A:middle
that you can set contextual

00:47:39.796 --> 00:47:41.356 A:middle
information about your views

00:47:41.726 --> 00:47:42.516 A:middle
that flows down the view

00:47:42.516 --> 00:47:43.916 A:middle
hierarchy and changes different

00:47:43.916 --> 00:47:45.456 A:middle
aspects of any contained views

00:47:45.456 --> 00:47:46.126 A:middle
all at once.

00:47:46.866 --> 00:47:48.136 A:middle
It's great for making changes to

00:47:48.136 --> 00:47:49.566 A:middle
a large set of views and it's

00:47:49.566 --> 00:47:50.876 A:middle
also great for customizing your

00:47:50.876 --> 00:47:52.286 A:middle
previews to see your view in

00:47:52.286 --> 00:47:52.956 A:middle
different contexts.

00:47:53.086 --> 00:47:55.976 A:middle
So let's add another version of

00:47:55.976 --> 00:47:58.926 A:middle
our view and update the

00:47:58.926 --> 00:48:00.976 A:middle
environment to set its color

00:47:58.926 --> 00:48:00.976 A:middle
environment to set its color

00:48:00.976 --> 00:48:02.286 A:middle
scheme to be dark.

00:48:05.076 --> 00:48:06.116 A:middle
And once again it all just

00:48:06.116 --> 00:48:06.536 A:middle
works.

00:48:07.516 --> 00:48:12.546 A:middle
[ Applause ]

00:48:13.046 --> 00:48:14.516 A:middle
And finally, let's also see how

00:48:14.516 --> 00:48:15.536 A:middle
our app works with other

00:48:15.536 --> 00:48:16.036 A:middle
languages.

00:48:17.046 --> 00:48:18.986 A:middle
I have some English string files

00:48:19.126 --> 00:48:20.906 A:middle
that I'll drag into my app.

00:48:27.186 --> 00:48:28.786 A:middle
And I'll tell Xcode to localize

00:48:28.786 --> 00:48:28.976 A:middle
them.

00:48:34.106 --> 00:48:35.996 A:middle
Then I'll go to my project file

00:48:36.996 --> 00:48:39.376 A:middle
and I'll import a localization

00:48:39.506 --> 00:48:40.726 A:middle
that I have for Arabic.

00:48:47.046 --> 00:48:48.206 A:middle
Now let's go back to our view

00:48:48.566 --> 00:48:49.466 A:middle
and add one more preview.

00:48:55.766 --> 00:48:57.396 A:middle
Now, if we first set the layout

00:48:57.396 --> 00:49:00.906 A:middle
direction to be right-to-left,

00:48:57.396 --> 00:49:00.906 A:middle
direction to be right-to-left,

00:49:01.796 --> 00:49:03.326 A:middle
we can see that this

00:49:03.326 --> 00:49:04.706 A:middle
automatically works without any

00:49:04.706 --> 00:49:05.136 A:middle
extra work.

00:49:05.136 --> 00:49:09.116 A:middle
But if I also set the locale to

00:49:11.536 --> 00:49:16.876 A:middle
be an Arabic locale, you can see

00:49:16.876 --> 00:49:17.976 A:middle
that everything gets localized.

00:49:20.516 --> 00:49:25.736 A:middle
[ Applause ]

00:49:26.236 --> 00:49:27.776 A:middle
And even better, if we look back

00:49:27.776 --> 00:49:29.026 A:middle
at our code, we didn't do

00:49:29.026 --> 00:49:30.346 A:middle
anything extra to support these

00:49:30.346 --> 00:49:30.846 A:middle
features.

00:49:31.516 --> 00:49:33.006 A:middle
To get our text localizable, we

00:49:33.006 --> 00:49:34.246 A:middle
didn't have to mark up which

00:49:34.246 --> 00:49:35.486 A:middle
strings should be localizable or

00:49:35.486 --> 00:49:35.716 A:middle
not.

00:49:36.136 --> 00:49:37.506 A:middle
SwiftUI automatically infers

00:49:37.506 --> 00:49:37.746 A:middle
that.

00:49:38.676 --> 00:49:40.286 A:middle
For text using string literals,

00:49:40.676 --> 00:49:41.846 A:middle
it's localizable by default.

00:49:43.276 --> 00:49:44.506 A:middle
And for text that's created by

00:49:44.506 --> 00:49:46.066 A:middle
getting passed a string, it

00:49:46.066 --> 00:49:47.286 A:middle
defaults to getting used as-is.

00:49:48.216 --> 00:49:49.286 A:middle
This means that all of our app

00:49:49.326 --> 00:49:51.396 A:middle
text like Rooms and Add Room

00:49:51.686 --> 00:49:52.516 A:middle
gets localized.

00:49:53.046 --> 00:49:54.946 A:middle
But all of our content like

00:49:55.086 --> 00:49:56.906 A:middle
these room names still gets

00:49:56.906 --> 00:49:57.566 A:middle
passed right through.

00:49:58.296 --> 00:49:59.936 A:middle
But even better, you can finally

00:49:59.936 --> 00:50:01.306 A:middle
use string interpolations and

00:49:59.936 --> 00:50:01.306 A:middle
use string interpolations and

00:50:01.306 --> 00:50:02.446 A:middle
have them localized correctly.

00:50:03.516 --> 00:50:08.866 A:middle
[ Applause ]

00:50:09.366 --> 00:50:10.466 A:middle
I love string interpolations.

00:50:10.466 --> 00:50:11.366 A:middle
They're great.

00:50:12.356 --> 00:50:13.606 A:middle
We're really excited for you to

00:50:13.606 --> 00:50:14.526 A:middle
start building apps with

00:50:14.526 --> 00:50:14.916 A:middle
SwiftUI.

00:50:15.566 --> 00:50:16.276 A:middle
When you get all of these

00:50:16.276 --> 00:50:17.646 A:middle
behaviors for free, you can

00:50:17.646 --> 00:50:19.086 A:middle
concentrate on the unique parts

00:50:19.086 --> 00:50:20.436 A:middle
of your app and build better

00:50:20.436 --> 00:50:21.616 A:middle
apps for your customers even

00:50:21.616 --> 00:50:22.046 A:middle
faster.

00:50:23.126 --> 00:50:24.536 A:middle
Now we built an iPhone app here,

00:50:25.206 --> 00:50:26.596 A:middle
but you can use these same APIs

00:50:26.596 --> 00:50:27.936 A:middle
and techniques across all of

00:50:27.936 --> 00:50:28.686 A:middle
Apple's platforms.

00:50:29.556 --> 00:50:30.486 A:middle
And you'll get these kinds of

00:50:30.486 --> 00:50:31.806 A:middle
automatic behaviors across all

00:50:31.806 --> 00:50:31.976 A:middle
of them.

00:50:34.046 --> 00:50:35.316 A:middle
Okay, let's take one last pass

00:50:35.366 --> 00:50:36.486 A:middle
through our app to review what

00:50:36.486 --> 00:50:37.516 A:middle
we built and make sure

00:50:37.516 --> 00:50:38.456 A:middle
everything is working right.

00:50:39.836 --> 00:50:41.486 A:middle
I'm a big fan of dark mode, so

00:50:41.486 --> 00:50:41.976 A:middle
let's use that version.

00:50:45.166 --> 00:50:46.476 A:middle
Okay, we have our list of rooms

00:50:46.826 --> 00:50:48.486 A:middle
and we can tap on one of them to

00:50:48.486 --> 00:50:49.296 A:middle
see more information.

00:50:49.346 --> 00:50:51.556 A:middle
And in our detail view we can

00:50:51.556 --> 00:50:53.356 A:middle
tap to zoom to full screen which

00:50:53.356 --> 00:50:54.416 A:middle
hides our video icon with a

00:50:54.416 --> 00:50:56.676 A:middle
transition, and that animation

00:50:56.796 --> 00:50:57.586 A:middle
is always interactive.

00:51:00.106 --> 00:51:02.156 A:middle
And we can also edit our list to

00:51:02.156 --> 00:51:02.706 A:middle
make changes.

00:51:03.346 --> 00:51:07.566 A:middle
Let's move this one down, and I

00:51:07.566 --> 00:51:08.496 A:middle
don't think anyone really wants

00:51:08.496 --> 00:51:09.836 A:middle
to use the dungeon conference

00:51:10.346 --> 00:51:10.436 A:middle
room.

00:51:13.616 --> 00:51:14.736 A:middle
Actually, I'm also not sure why

00:51:14.846 --> 00:51:15.866 A:middle
Kyle added this room that has an

00:51:15.866 --> 00:51:16.266 A:middle
elephant.

00:51:16.266 --> 00:51:17.526 A:middle
Let's get rid of that one too.

00:51:18.756 --> 00:51:20.226 A:middle
And finally, let's add our

00:51:20.226 --> 00:51:20.756 A:middle
conference room.

00:51:21.676 --> 00:51:21.926 A:middle
Great.

00:51:22.266 --> 00:51:22.706 A:middle
That's our app.

00:51:23.516 --> 00:51:29.666 A:middle
[ Applause ]

00:51:30.166 --> 00:51:31.026 A:middle
But there's one last thing that

00:51:31.026 --> 00:51:32.116 A:middle
I want to point out and it's

00:51:32.116 --> 00:51:33.096 A:middle
something that we didn't see.

00:51:33.926 --> 00:51:35.046 A:middle
We just built up this entire

00:51:35.046 --> 00:51:36.796 A:middle
application and tested all these

00:51:36.796 --> 00:51:38.746 A:middle
rich behaviors without ever once

00:51:38.826 --> 00:51:40.626 A:middle
building and running our app.

00:51:40.626 --> 00:51:42.056 A:middle
Xcode previews let us view,

00:51:42.086 --> 00:51:43.496 A:middle
edit, and debug our application

00:51:43.706 --> 00:51:44.656 A:middle
way faster than was ever

00:51:44.656 --> 00:51:45.466 A:middle
possible before.

00:51:46.556 --> 00:51:47.536 A:middle
So thank you very much.

00:51:47.716 --> 00:51:48.926 A:middle
I hope you enjoy using SwiftUI

00:51:48.926 --> 00:51:49.646 A:middle
as much as I do.

00:51:49.936 --> 00:51:50.516 A:middle
It's a lot of fun.

00:51:51.516 --> 00:51:54.776 A:middle
[ Applause ]

00:51:55.276 --> 00:51:57.006 A:middle
&gt;&gt; So our goal with this SwiftUI

00:51:57.356 --> 00:51:59.426 A:middle
is to give you the shortest path

00:51:59.556 --> 00:52:00.796 A:middle
to a great app that's going to

00:51:59.556 --> 00:52:00.796 A:middle
to a great app that's going to

00:52:00.796 --> 00:52:02.106 A:middle
reach the widest audience.

00:52:03.216 --> 00:52:06.066 A:middle
We saw four of SwiftUI's key

00:52:06.066 --> 00:52:07.596 A:middle
design principles at play today.

00:52:07.796 --> 00:52:09.836 A:middle
We saw its declarative syntax,

00:52:10.226 --> 00:52:12.176 A:middle
which will evoke the actual UI

00:52:12.176 --> 00:52:13.776 A:middle
you're building and take care of

00:52:13.776 --> 00:52:15.286 A:middle
those imperative details like

00:52:15.286 --> 00:52:17.076 A:middle
adding and removing subviews on

00:52:17.076 --> 00:52:17.716 A:middle
your behalf.

00:52:18.436 --> 00:52:20.296 A:middle
We saw the compositional pieces

00:52:20.586 --> 00:52:22.046 A:middle
and how you can combine together

00:52:22.296 --> 00:52:24.256 A:middle
pieces of content, modifiers and

00:52:24.256 --> 00:52:26.396 A:middle
containers to build exactly the

00:52:26.396 --> 00:52:27.506 A:middle
UI you're looking for.

00:52:28.316 --> 00:52:29.636 A:middle
We saw all the automatic

00:52:29.676 --> 00:52:31.886 A:middle
behaviors you get by saying less

00:52:32.236 --> 00:52:33.536 A:middle
and letting the framework take

00:52:33.536 --> 00:52:34.576 A:middle
care of more.

00:52:35.206 --> 00:52:37.046 A:middle
We talked about how SwiftUI

00:52:37.266 --> 00:52:39.196 A:middle
keeps your views in a consistent

00:52:39.246 --> 00:52:40.866 A:middle
state so you never end up with a

00:52:40.866 --> 00:52:42.096 A:middle
view missing or in the wrong

00:52:42.096 --> 00:52:42.506 A:middle
place.

00:52:43.156 --> 00:52:44.486 A:middle
And of course we played with

00:52:44.486 --> 00:52:46.376 A:middle
SwiftUI's awesome interruptal

00:52:46.376 --> 00:52:48.496 A:middle
animations, which is one of my

00:52:48.496 --> 00:52:49.196 A:middle
favorites.

00:52:49.366 --> 00:52:51.256 A:middle
I always felt like before I had

00:52:51.256 --> 00:52:52.806 A:middle
to trade between having flashy

00:52:52.806 --> 00:52:54.686 A:middle
animations and the crushing

00:52:54.686 --> 00:52:55.876 A:middle
complexity that could come with

00:52:55.876 --> 00:52:56.016 A:middle
it.

00:52:56.236 --> 00:52:57.356 A:middle
But no longer.

00:52:57.916 --> 00:53:00.316 A:middle
The goal with SwiftUI -- wait,

00:52:57.916 --> 00:53:00.316 A:middle
The goal with SwiftUI -- wait,

00:53:00.316 --> 00:53:01.916 A:middle
we didn't look at it again.

00:53:01.916 --> 00:53:02.726 A:middle
It's so cool, right?

00:53:03.286 --> 00:53:05.046 A:middle
All right, the goal with SwiftUI

00:53:05.396 --> 00:53:07.976 A:middle
is for us to take care of these

00:53:07.976 --> 00:53:09.686 A:middle
basic features that every app

00:53:09.686 --> 00:53:11.016 A:middle
needs on your behalf.

00:53:11.476 --> 00:53:12.786 A:middle
Because when you're building an

00:53:12.786 --> 00:53:14.166 A:middle
app, it's not just the basic

00:53:14.166 --> 00:53:15.096 A:middle
features you add.

00:53:15.376 --> 00:53:17.256 A:middle
You've got all your special,

00:53:17.256 --> 00:53:19.036 A:middle
unique features that make your

00:53:19.036 --> 00:53:20.186 A:middle
app yours.

00:53:21.016 --> 00:53:22.686 A:middle
And the goal is for us to bear

00:53:22.686 --> 00:53:24.656 A:middle
more of this burden, the burden

00:53:24.656 --> 00:53:26.256 A:middle
for all those things that you

00:53:26.256 --> 00:53:28.526 A:middle
need to have to have a great app

00:53:29.036 --> 00:53:30.416 A:middle
and let you spend more of your

00:53:30.416 --> 00:53:31.686 A:middle
time focusing on things that

00:53:31.686 --> 00:53:32.676 A:middle
make your app special.

00:53:33.676 --> 00:53:35.986 A:middle
So I hope you all enjoyed your

00:53:35.986 --> 00:53:37.826 A:middle
introduction to SwiftUI.

00:53:37.826 --> 00:53:39.516 A:middle
Come find us in the labs.

00:53:39.696 --> 00:53:41.086 A:middle
We'll be there this afternoon

00:53:41.086 --> 00:53:41.876 A:middle
and throughout the week.

00:53:42.466 --> 00:53:44.086 A:middle
And we called out to a couple

00:53:44.086 --> 00:53:45.496 A:middle
sessions, Data Flow Through UI,

00:53:45.496 --> 00:53:46.836 A:middle
and Building Custom Views.

00:53:47.076 --> 00:53:49.346 A:middle
Your next stop in learning

00:53:49.346 --> 00:53:51.046 A:middle
SwiftUI should be the SwiftUI

00:53:51.086 --> 00:53:52.296 A:middle
Essentials talk where we're

00:53:52.296 --> 00:53:53.516 A:middle
going to go into every piece of

00:53:53.516 --> 00:53:55.606 A:middle
syntax and all the pieces that

00:53:55.606 --> 00:53:57.406 A:middle
you can compose together to make

00:53:57.406 --> 00:53:58.416 A:middle
views what they are.

00:53:58.416 --> 00:54:00.166 A:middle
So I hope to see you there.

00:53:58.416 --> 00:54:00.166 A:middle
So I hope to see you there.

00:54:00.396 --> 00:54:03.056 A:middle
Have a great WWDC and I hope you

00:54:03.056 --> 00:54:03.746 A:middle
enjoy SwiftUI.

00:54:04.516 --> 00:54:08.500 A:middle
[ Applause ]
