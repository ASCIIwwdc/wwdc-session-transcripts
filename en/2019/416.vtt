WEBVTT

00:00:01.176 --> 00:00:06.516 A:middle
[ Music ]

00:00:07.516 --> 00:00:11.906 A:middle
[ Applause and Cheering ]

00:00:12.406 --> 00:00:13.346 A:middle
&gt;&gt; Good afternoon, everyone.

00:00:14.286 --> 00:00:15.266 A:middle
My name is Harlan.

00:00:15.266 --> 00:00:16.966 A:middle
And I am super excited to talk

00:00:16.966 --> 00:00:19.296 A:middle
to you about how Xcode 11 allows

00:00:19.296 --> 00:00:20.886 A:middle
you to create and distribute

00:00:21.156 --> 00:00:22.896 A:middle
Binary Frameworks in Swift.

00:00:24.126 --> 00:00:25.376 A:middle
Now, before I talk about binary

00:00:25.376 --> 00:00:26.856 A:middle
frameworks, I actually want to

00:00:26.856 --> 00:00:28.006 A:middle
take a moment to talk about

00:00:28.006 --> 00:00:29.106 A:middle
Swift Packages.

00:00:30.196 --> 00:00:31.386 A:middle
With the new support for Swift

00:00:31.386 --> 00:00:33.926 A:middle
Packages in Xcode 11, it's easy

00:00:33.926 --> 00:00:35.616 A:middle
to create and use them in your

00:00:35.616 --> 00:00:37.706 A:middle
projects and distribute them to

00:00:37.706 --> 00:00:38.136 A:middle
others.

00:00:38.586 --> 00:00:41.196 A:middle
And Swift Packages are a great

00:00:41.196 --> 00:00:42.416 A:middle
way to distribute your code,

00:00:42.756 --> 00:00:43.956 A:middle
because Xcode knows how to

00:00:43.956 --> 00:00:45.746 A:middle
manage their dependencies, and

00:00:45.746 --> 00:00:47.696 A:middle
it will figure out which version

00:00:47.696 --> 00:00:48.866 A:middle
of your Packages to use

00:00:48.866 --> 00:00:49.626 A:middle
automatically.

00:00:50.236 --> 00:00:52.346 A:middle
And because they are distributed

00:00:52.346 --> 00:00:54.716 A:middle
in Source form, there is no

00:00:54.716 --> 00:00:56.396 A:middle
requirement to maintain binary

00:00:56.396 --> 00:00:57.946 A:middle
compatibility with your clients.

00:00:58.676 --> 00:01:00.536 A:middle
If you have the ability to ship

00:00:58.676 --> 00:01:00.536 A:middle
If you have the ability to ship

00:01:00.716 --> 00:01:02.146 A:middle
the source code of your project,

00:01:02.746 --> 00:01:04.775 A:middle
then Swift Packages are really,

00:01:04.936 --> 00:01:06.266 A:middle
really great.

00:01:07.496 --> 00:01:09.166 A:middle
But not everyone has the ability

00:01:09.166 --> 00:01:10.226 A:middle
to ship the source of their

00:01:10.226 --> 00:01:12.366 A:middle
libraries, and if you don't,

00:01:13.376 --> 00:01:14.646 A:middle
then Xcode 11 supports

00:01:14.646 --> 00:01:16.386 A:middle
distributing binary libraries

00:01:16.456 --> 00:01:18.186 A:middle
using the new XCFrameworks

00:01:18.186 --> 00:01:18.616 A:middle
format.

00:01:19.516 --> 00:01:24.186 A:middle
[ Applause ]

00:01:24.686 --> 00:01:25.766 A:middle
So, in this talk, I'm going to

00:01:25.766 --> 00:01:27.766 A:middle
introduce you to XCFrameworks,

00:01:28.106 --> 00:01:29.486 A:middle
the new supported way to

00:01:29.486 --> 00:01:31.116 A:middle
distribute binary frameworks.

00:01:31.856 --> 00:01:33.156 A:middle
And I will also talk about some

00:01:33.156 --> 00:01:34.566 A:middle
things that clients should

00:01:34.566 --> 00:01:36.096 A:middle
consider when they're choosing

00:01:36.096 --> 00:01:38.956 A:middle
to use third-party code.

00:01:39.166 --> 00:01:40.756 A:middle
Next, I'll talk about what's

00:01:40.816 --> 00:01:43.026 A:middle
inside an XCFramework, and how

00:01:43.026 --> 00:01:44.346 A:middle
you can go about creating one

00:01:44.346 --> 00:01:45.116 A:middle
for your project.

00:01:46.476 --> 00:01:48.466 A:middle
And then finally, my colleague,

00:01:48.466 --> 00:01:50.126 A:middle
Jordan, will come up and talk to

00:01:50.126 --> 00:01:51.106 A:middle
you about some things that

00:01:51.106 --> 00:01:52.176 A:middle
framework authors should

00:01:52.176 --> 00:01:53.996 A:middle
consider to make using their

00:01:53.996 --> 00:01:55.926 A:middle
framework as smooth as possible.

00:01:58.476 --> 00:02:02.056 A:middle
So XCFrameworks are a new way to

00:01:58.476 --> 00:02:02.056 A:middle
So XCFrameworks are a new way to

00:02:02.056 --> 00:02:04.186 A:middle
bundle up multiple variants of

00:02:04.186 --> 00:02:06.876 A:middle
your framework in a way that

00:02:06.876 --> 00:02:08.786 A:middle
will work across Xcode versions

00:02:08.786 --> 00:02:09.526 A:middle
going forward.

00:02:10.166 --> 00:02:13.836 A:middle
A single XCFramework can contain

00:02:13.836 --> 00:02:16.116 A:middle
a variant for the simulator, and

00:02:16.116 --> 00:02:16.776 A:middle
for the device.

00:02:17.516 --> 00:02:21.606 A:middle
[ Applause ]

00:02:22.106 --> 00:02:22.666 A:middle
Not done yet.

00:02:22.976 --> 00:02:24.856 A:middle
Because a single XCFramework can

00:02:24.856 --> 00:02:26.866 A:middle
also contain a variant for any

00:02:26.866 --> 00:02:28.366 A:middle
of the platforms that Xcode

00:02:28.366 --> 00:02:28.926 A:middle
supports.

00:02:29.516 --> 00:02:33.546 A:middle
[ Applause ]

00:02:34.046 --> 00:02:35.376 A:middle
You can also have a variant for

00:02:35.376 --> 00:02:37.676 A:middle
Mac apps that use AppKit, and a

00:02:37.676 --> 00:02:38.866 A:middle
variant for Mac apps that use

00:02:38.866 --> 00:02:39.406 A:middle
UIKit.

00:02:39.806 --> 00:02:41.136 A:middle
So, no matter which API your

00:02:41.136 --> 00:02:42.986 A:middle
clients want to use, they will

00:02:42.986 --> 00:02:44.256 A:middle
be able to use your framework

00:02:44.256 --> 00:02:44.876 A:middle
effectively.

00:02:45.406 --> 00:02:48.396 A:middle
And not only can you bundle up

00:02:48.396 --> 00:02:50.556 A:middle
frameworks, but you can also use

00:02:50.556 --> 00:02:52.846 A:middle
XCFrameworks to bundle up static

00:02:52.846 --> 00:02:53.656 A:middle
libraries, and their

00:02:53.656 --> 00:02:54.746 A:middle
corresponding headers.

00:02:54.956 --> 00:02:56.096 A:middle
And Xcode will set up your

00:02:56.096 --> 00:02:57.056 A:middle
client's search pads

00:02:57.056 --> 00:02:57.806 A:middle
automatically.

00:02:59.046 --> 00:02:59.936 A:middle
And of course--

00:03:00.516 --> 00:03:03.576 A:middle
[ Applause ]

00:03:04.076 --> 00:03:05.636 A:middle
XCFrameworks support binary

00:03:05.636 --> 00:03:07.356 A:middle
distribution of Swift and

00:03:07.426 --> 00:03:10.306 A:middle
C-based code.

00:03:10.516 --> 00:03:11.706 A:middle
So, now I'd actually like to

00:03:11.706 --> 00:03:13.126 A:middle
just show you how easy it is to

00:03:13.126 --> 00:03:14.286 A:middle
get started using an

00:03:14.346 --> 00:03:14.926 A:middle
XCFramework.

00:03:17.936 --> 00:03:19.576 A:middle
So here, I've got a pretty

00:03:19.606 --> 00:03:20.646 A:middle
simple iOS app.

00:03:20.646 --> 00:03:22.906 A:middle
And I will go ahead and click

00:03:22.906 --> 00:03:24.916 A:middle
Run to run it on the iPad

00:03:24.916 --> 00:03:25.436 A:middle
Simulator.

00:03:25.616 --> 00:03:27.096 A:middle
You can see, it has got a big,

00:03:27.096 --> 00:03:28.266 A:middle
blue Launch button, and when you

00:03:28.296 --> 00:03:30.336 A:middle
click it, it does nothing.

00:03:30.336 --> 00:03:32.516 A:middle
Well, that is because it's

00:03:32.516 --> 00:03:33.956 A:middle
hooked up to this launch method

00:03:33.956 --> 00:03:35.566 A:middle
right here, and its body is

00:03:35.566 --> 00:03:36.246 A:middle
totally empty.

00:03:37.466 --> 00:03:39.046 A:middle
Well, I've actually got this

00:03:39.166 --> 00:03:40.766 A:middle
awesome XCFramework I'd like to

00:03:40.766 --> 00:03:42.666 A:middle
use, called FlightKit.

00:03:44.646 --> 00:03:46.106 A:middle
And FlightKit gives me some UI

00:03:46.306 --> 00:03:47.416 A:middle
that I'd to present in my

00:03:47.416 --> 00:03:48.156 A:middle
application.

00:03:49.136 --> 00:03:50.706 A:middle
So, to actually be able to use

00:03:50.736 --> 00:03:52.976 A:middle
the FlightKit XCFramework, all I

00:03:52.976 --> 00:03:54.496 A:middle
need to do is click on the

00:03:54.496 --> 00:03:55.566 A:middle
Project in the Project

00:03:55.566 --> 00:03:58.396 A:middle
Navigator, select my target, and

00:03:58.396 --> 00:03:59.456 A:middle
make sure the General tab is

00:03:59.456 --> 00:04:00.006 A:middle
selected.

00:03:59.456 --> 00:04:00.006 A:middle
selected.

00:04:01.286 --> 00:04:02.576 A:middle
Then, I'll scroll down to

00:04:02.576 --> 00:04:04.106 A:middle
Frameworks, Libraries, and

00:04:04.106 --> 00:04:04.996 A:middle
Embedded Content.

00:04:07.176 --> 00:04:08.646 A:middle
Then, I'll just drag in my

00:04:08.646 --> 00:04:10.916 A:middle
XCFramework, and that has been

00:04:10.916 --> 00:04:12.276 A:middle
wired up automatically as a

00:04:12.276 --> 00:04:13.766 A:middle
dependency of my target.

00:04:15.076 --> 00:04:16.226 A:middle
So let's go back to the code and

00:04:16.226 --> 00:04:17.486 A:middle
start using it.

00:04:18.516 --> 00:04:20.576 A:middle
Well, just like any framework

00:04:20.576 --> 00:04:21.696 A:middle
you're used to using already,

00:04:21.875 --> 00:04:23.306 A:middle
the first thing you'll do is

00:04:23.306 --> 00:04:23.766 A:middle
Import it.

00:04:25.196 --> 00:04:26.356 A:middle
And now, I'd like to go ahead

00:04:26.356 --> 00:04:27.556 A:middle
and get started using some of

00:04:27.556 --> 00:04:28.816 A:middle
the APIs from FlightKit.

00:04:29.366 --> 00:04:30.456 A:middle
So, either I could go look at

00:04:30.456 --> 00:04:33.446 A:middle
the documentation, or I can

00:04:33.446 --> 00:04:34.376 A:middle
Command click the name

00:04:34.376 --> 00:04:35.546 A:middle
FlightKit, and click Jump to

00:04:35.546 --> 00:04:36.166 A:middle
Definition.

00:04:37.146 --> 00:04:38.106 A:middle
What this will do is it will

00:04:38.106 --> 00:04:39.946 A:middle
take me to the generated

00:04:39.946 --> 00:04:41.156 A:middle
interface for FlightKit.

00:04:42.136 --> 00:04:43.826 A:middle
And this shows all the public

00:04:43.826 --> 00:04:44.146 A:middle
APIs.

00:04:44.146 --> 00:04:45.636 A:middle
Every public type, public

00:04:45.636 --> 00:04:47.626 A:middle
method, everything that I can

00:04:47.626 --> 00:04:49.116 A:middle
use when I import FlightKit.

00:04:49.856 --> 00:04:52.006 A:middle
So I can see that there is this

00:04:52.126 --> 00:04:53.606 A:middle
LaunchViewController, which is a

00:04:53.606 --> 00:04:55.116 A:middle
subclass of UIViewController.

00:04:55.976 --> 00:04:57.226 A:middle
That seems to be some little

00:04:57.226 --> 00:04:58.486 A:middle
piece of UI that I might want to

00:04:58.486 --> 00:04:58.786 A:middle
show.

00:05:00.026 --> 00:05:02.386 A:middle
Great. So, now I need to know

00:05:02.386 --> 00:05:03.406 A:middle
actually how to create one of

00:05:03.406 --> 00:05:05.026 A:middle
these, and I can see in the

00:05:05.026 --> 00:05:06.176 A:middle
interface that there is an

00:05:06.176 --> 00:05:07.606 A:middle
Initializer that takes a

00:05:07.606 --> 00:05:08.256 A:middle
Spaceship.

00:05:08.846 --> 00:05:10.216 A:middle
And that Spaceship is also part

00:05:10.216 --> 00:05:10.766 A:middle
of FlightKit.

00:05:12.196 --> 00:05:13.666 A:middle
So, if I jump to its definition,

00:05:13.776 --> 00:05:15.106 A:middle
it will take me further down in

00:05:15.106 --> 00:05:16.816 A:middle
this generated interface and

00:05:16.816 --> 00:05:17.946 A:middle
show me everything that is in

00:05:17.946 --> 00:05:19.276 A:middle
Spaceship that I can make use

00:05:19.276 --> 00:05:19.456 A:middle
of.

00:05:20.006 --> 00:05:23.746 A:middle
I can see that there is a public

00:05:23.746 --> 00:05:25.586 A:middle
stored property called Name, and

00:05:25.996 --> 00:05:26.926 A:middle
there is also a public

00:05:26.926 --> 00:05:28.396 A:middle
initializer that takes a name.

00:05:29.836 --> 00:05:31.246 A:middle
Okay, so I can create a

00:05:31.246 --> 00:05:32.766 A:middle
Spaceship, and I can create a

00:05:32.766 --> 00:05:34.166 A:middle
LaunchViewController, and then I

00:05:34.166 --> 00:05:34.796 A:middle
can present it.

00:05:36.186 --> 00:05:37.396 A:middle
So, let's go back to the code

00:05:37.396 --> 00:05:38.346 A:middle
and do exactly that.

00:05:39.376 --> 00:05:40.576 A:middle
So, first I'll create a ship,

00:05:41.576 --> 00:05:42.566 A:middle
and I can see that auto

00:05:42.566 --> 00:05:43.886 A:middle
completion is already suggesting

00:05:43.886 --> 00:05:45.446 A:middle
to me all the things that were

00:05:45.446 --> 00:05:47.326 A:middle
in FlightKit, again, just like

00:05:47.326 --> 00:05:48.306 A:middle
any framework that you are

00:05:48.306 --> 00:05:49.336 A:middle
already used to using.

00:05:50.276 --> 00:05:51.186 A:middle
I can accept this auto

00:05:51.186 --> 00:05:53.086 A:middle
completion, then I'll pick a

00:05:53.086 --> 00:05:53.866 A:middle
name for my ship.

00:05:54.506 --> 00:05:55.456 A:middle
Well, I've got this array of

00:05:55.456 --> 00:05:57.066 A:middle
ship names already, and any one

00:05:57.066 --> 00:05:58.186 A:middle
of them would be a great name

00:05:58.186 --> 00:05:58.696 A:middle
for this ship.

00:05:59.646 --> 00:06:01.006 A:middle
So I will actually go ahead and

00:05:59.646 --> 00:06:01.006 A:middle
So I will actually go ahead and

00:06:01.006 --> 00:06:02.896 A:middle
pick a random element out of the

00:06:02.896 --> 00:06:03.716 A:middle
ship names array.

00:06:04.306 --> 00:06:07.206 A:middle
Now, I will create a

00:06:07.206 --> 00:06:10.506 A:middle
LaunchViewController, and I'll

00:06:10.676 --> 00:06:12.016 A:middle
pass it the ship that I just

00:06:12.016 --> 00:06:12.416 A:middle
created.

00:06:12.956 --> 00:06:15.776 A:middle
And finally, I'll show the

00:06:15.776 --> 00:06:17.696 A:middle
controller passing myself as the

00:06:17.696 --> 00:06:18.136 A:middle
sender.

00:06:18.706 --> 00:06:21.866 A:middle
So, created a ship, created some

00:06:21.866 --> 00:06:23.666 A:middle
UI, and now I'll go to show it.

00:06:24.706 --> 00:06:26.266 A:middle
I'll build and run my program in

00:06:26.266 --> 00:06:26.866 A:middle
the Simulator.

00:06:26.866 --> 00:06:28.776 A:middle
And when I click the Launch

00:06:28.776 --> 00:06:30.416 A:middle
button, it picks a random name,

00:06:30.416 --> 00:06:31.466 A:middle
and launches the UI.

00:06:31.466 --> 00:06:34.586 A:middle
If I click it again, it will

00:06:34.586 --> 00:06:36.946 A:middle
pick another name, and another.

00:06:37.336 --> 00:06:37.896 A:middle
You get it.

00:06:39.186 --> 00:06:41.636 A:middle
So, that's how to use an

00:06:41.636 --> 00:06:43.136 A:middle
XCFramework for just one

00:06:43.136 --> 00:06:44.436 A:middle
platform, but one of the great

00:06:44.546 --> 00:06:46.536 A:middle
things about XCFrameworks is

00:06:46.536 --> 00:06:47.526 A:middle
that you can put multiple

00:06:47.526 --> 00:06:48.916 A:middle
variants in the same bundle.

00:06:49.606 --> 00:06:50.996 A:middle
So just by dragging the one

00:06:50.996 --> 00:06:52.956 A:middle
XCFramework in, not only am I

00:06:52.956 --> 00:06:54.036 A:middle
able to build and run for the

00:06:54.036 --> 00:06:57.196 A:middle
simulator, but if I select

00:06:57.196 --> 00:07:00.356 A:middle
Generic iOS Device, then I can

00:06:57.196 --> 00:07:00.356 A:middle
Generic iOS Device, then I can

00:07:00.356 --> 00:07:02.326 A:middle
go to Product Archive, and build

00:07:02.326 --> 00:07:03.686 A:middle
an archive for the App Store as

00:07:03.686 --> 00:07:04.006 A:middle
well.

00:07:04.676 --> 00:07:10.036 A:middle
So that is how easy it is to use

00:07:10.036 --> 00:07:11.456 A:middle
an XCFramework from your code.

00:07:12.516 --> 00:07:18.546 A:middle
[ Applause ]

00:07:19.046 --> 00:07:20.206 A:middle
So when you are making the

00:07:20.206 --> 00:07:23.346 A:middle
choice to use a framework, it's

00:07:23.386 --> 00:07:24.766 A:middle
really important to be aware of

00:07:24.766 --> 00:07:26.116 A:middle
what you're making available to

00:07:26.116 --> 00:07:27.046 A:middle
third party code.

00:07:28.426 --> 00:07:30.196 A:middle
Importantly, you want to make

00:07:30.196 --> 00:07:32.556 A:middle
sure that you trust the source

00:07:32.556 --> 00:07:33.156 A:middle
of the framework.

00:07:34.156 --> 00:07:35.226 A:middle
You trust that they're not going

00:07:35.226 --> 00:07:36.986 A:middle
to introduce bugs or instability

00:07:36.986 --> 00:07:38.946 A:middle
to your app, and you trust that

00:07:38.946 --> 00:07:40.276 A:middle
they'll respect your user's

00:07:40.316 --> 00:07:40.806 A:middle
privacy.

00:07:41.346 --> 00:07:44.366 A:middle
For example, if you've been

00:07:44.366 --> 00:07:46.006 A:middle
granted Entitlements for your

00:07:46.006 --> 00:07:47.546 A:middle
application, and you use a

00:07:47.546 --> 00:07:49.626 A:middle
framework, that framework is

00:07:49.696 --> 00:07:51.276 A:middle
also granted those entitlements.

00:07:51.806 --> 00:07:53.416 A:middle
And those permissions, if your

00:07:53.416 --> 00:07:54.256 A:middle
users have granted them

00:07:54.256 --> 00:07:54.766 A:middle
permissions.

00:07:56.736 --> 00:07:58.716 A:middle
Additionally, if you're adopting

00:07:58.716 --> 00:08:00.256 A:middle
a framework that expects a

00:07:58.716 --> 00:08:00.256 A:middle
a framework that expects a

00:08:00.256 --> 00:08:01.246 A:middle
certain entitlement to be

00:08:01.246 --> 00:08:02.916 A:middle
available, it's your

00:08:02.916 --> 00:08:04.266 A:middle
responsibility to add that

00:08:04.266 --> 00:08:06.186 A:middle
entitlement to your app.

00:08:07.836 --> 00:08:09.786 A:middle
Another thing to consider about

00:08:09.786 --> 00:08:11.036 A:middle
using frameworks is that

00:08:11.586 --> 00:08:12.436 A:middle
sometimes you will use a

00:08:12.436 --> 00:08:14.066 A:middle
framework that brings its own

00:08:14.066 --> 00:08:16.466 A:middle
dependencies along, and those

00:08:16.466 --> 00:08:18.076 A:middle
dependencies might have their

00:08:18.076 --> 00:08:20.396 A:middle
own dependencies, and it's your

00:08:20.396 --> 00:08:21.966 A:middle
responsibility not only to add

00:08:21.966 --> 00:08:23.276 A:middle
all of these to your project,

00:08:23.966 --> 00:08:25.836 A:middle
but also to extend the same

00:08:25.836 --> 00:08:27.966 A:middle
trust to each of them as well.

00:08:27.966 --> 00:08:30.896 A:middle
Now, it is worth noting that

00:08:30.966 --> 00:08:34.086 A:middle
this trust extends to using

00:08:34.086 --> 00:08:35.186 A:middle
Swift Packages as well.

00:08:36.126 --> 00:08:37.346 A:middle
One advantage of packages over

00:08:37.346 --> 00:08:38.525 A:middle
binary frameworks is that you

00:08:38.525 --> 00:08:40.116 A:middle
can inspect the code, and you

00:08:40.116 --> 00:08:41.285 A:middle
can step into it while you're

00:08:41.285 --> 00:08:41.676 A:middle
debugging.

00:08:42.285 --> 00:08:43.716 A:middle
If you want more information

00:08:43.716 --> 00:08:45.006 A:middle
about using Swift Packages in

00:08:45.046 --> 00:08:47.066 A:middle
Xcode, I'd recommend these talks

00:08:47.066 --> 00:08:48.066 A:middle
from earlier this week.

00:08:48.666 --> 00:08:52.126 A:middle
But whether you're using a

00:08:52.126 --> 00:08:54.096 A:middle
package or a binary framework,

00:08:54.516 --> 00:08:56.606 A:middle
Xcode 11 makes it easy to use

00:08:56.606 --> 00:09:00.686 A:middle
third party code that you trust.

00:08:56.606 --> 00:09:00.686 A:middle
third party code that you trust.

00:09:02.206 --> 00:09:03.846 A:middle
So now, I'd like to talk about

00:09:03.846 --> 00:09:05.706 A:middle
how to create an XCFramework.

00:09:06.846 --> 00:09:08.226 A:middle
Well, the first thing you'll

00:09:08.226 --> 00:09:10.086 A:middle
want to do is have some source

00:09:10.086 --> 00:09:10.886 A:middle
code that you'd like to

00:09:10.886 --> 00:09:11.386 A:middle
distribute.

00:09:11.386 --> 00:09:14.196 A:middle
So let's actually take a look at

00:09:14.196 --> 00:09:15.456 A:middle
some of the source code from

00:09:15.456 --> 00:09:16.826 A:middle
FlightKit, from earlier.

00:09:18.056 --> 00:09:19.296 A:middle
This is just a subset of the

00:09:19.296 --> 00:09:21.086 A:middle
objects in FlightKit, just for

00:09:21.086 --> 00:09:21.666 A:middle
an example.

00:09:22.346 --> 00:09:24.886 A:middle
But you can see that Spaceship

00:09:24.916 --> 00:09:26.686 A:middle
type that we looked at earlier.

00:09:28.136 --> 00:09:29.806 A:middle
You can also see an enum called

00:09:29.806 --> 00:09:31.606 A:middle
Speed, that describes how fast

00:09:31.606 --> 00:09:32.716 A:middle
something can move in space.

00:09:34.066 --> 00:09:35.296 A:middle
You also see a struct called

00:09:35.296 --> 00:09:36.926 A:middle
Location, that describes the

00:09:36.926 --> 00:09:38.676 A:middle
location of an object in space.

00:09:40.156 --> 00:09:42.566 A:middle
Great. So we have this code.

00:09:43.196 --> 00:09:44.336 A:middle
Now, how do we make sure that we

00:09:44.336 --> 00:09:45.736 A:middle
build this library for

00:09:45.736 --> 00:09:46.496 A:middle
distribution?

00:09:47.446 --> 00:09:49.436 A:middle
Well, in Xcode 11, there's a new

00:09:49.436 --> 00:09:51.046 A:middle
Build setting called Build

00:09:51.046 --> 00:09:52.576 A:middle
Libraries for Distribution.

00:09:53.556 --> 00:09:54.786 A:middle
And it does exactly that.

00:09:54.966 --> 00:09:56.256 A:middle
It turns on all the features

00:09:56.256 --> 00:09:58.116 A:middle
that are necessary to build your

00:09:58.116 --> 00:09:59.636 A:middle
library in such a way that it

00:09:59.636 --> 00:10:00.496 A:middle
can be distributed.

00:09:59.636 --> 00:10:00.496 A:middle
can be distributed.

00:10:02.046 --> 00:10:04.166 A:middle
Now, let's talk about one of

00:10:04.166 --> 00:10:05.386 A:middle
those features right now.

00:10:06.906 --> 00:10:08.536 A:middle
If you've tried sending somebody

00:10:08.756 --> 00:10:10.586 A:middle
a built Swift Framework before,

00:10:11.286 --> 00:10:12.716 A:middle
you may have seen a variant of

00:10:12.716 --> 00:10:13.536 A:middle
this error.

00:10:14.956 --> 00:10:17.126 A:middle
Compiled module was created by a

00:10:17.126 --> 00:10:18.446 A:middle
newer version of the compiler.

00:10:18.986 --> 00:10:21.846 A:middle
What does this error actually

00:10:21.846 --> 00:10:21.976 A:middle
mean?

00:10:23.506 --> 00:10:24.626 A:middle
Well, when the Swift compiler

00:10:24.626 --> 00:10:26.656 A:middle
goes to import a module, it

00:10:26.656 --> 00:10:27.956 A:middle
looks for a file called the

00:10:27.956 --> 00:10:29.596 A:middle
Compiled Module for that

00:10:29.596 --> 00:10:30.156 A:middle
library.

00:10:31.676 --> 00:10:33.286 A:middle
If it finds one of these files,

00:10:33.646 --> 00:10:35.206 A:middle
it reads off the manifest of

00:10:35.246 --> 00:10:36.946 A:middle
public APIs that you can call

00:10:36.946 --> 00:10:39.996 A:middle
into, and lets you use them.

00:10:40.326 --> 00:10:42.206 A:middle
Now, this Compiled Module Format

00:10:42.746 --> 00:10:45.746 A:middle
is a binary format that

00:10:45.746 --> 00:10:47.876 A:middle
basically contains internal

00:10:47.876 --> 00:10:49.236 A:middle
compiler data structures.

00:10:50.096 --> 00:10:51.376 A:middle
And since they're just internal

00:10:51.376 --> 00:10:52.996 A:middle
data structures, they're subject

00:10:52.996 --> 00:10:55.116 A:middle
to change with every version of

00:10:55.116 --> 00:10:55.966 A:middle
the Swift Compiler.

00:10:57.096 --> 00:10:58.986 A:middle
So what this means is that if

00:10:59.216 --> 00:11:00.756 A:middle
one person tries to import a

00:10:59.216 --> 00:11:00.756 A:middle
one person tries to import a

00:11:00.756 --> 00:11:02.566 A:middle
module using one version of

00:11:02.566 --> 00:11:04.436 A:middle
Swift, and that module was

00:11:04.496 --> 00:11:05.596 A:middle
created by another version of

00:11:05.596 --> 00:11:07.666 A:middle
Swift, their compiler can't

00:11:07.666 --> 00:11:08.806 A:middle
understand it, and they won't be

00:11:08.806 --> 00:11:10.126 A:middle
able to use it.

00:11:11.176 --> 00:11:13.516 A:middle
Well, in order to solve this

00:11:13.516 --> 00:11:16.406 A:middle
version lock, Xcode 11

00:11:16.406 --> 00:11:17.916 A:middle
introduces a new format for

00:11:17.916 --> 00:11:19.586 A:middle
Swift Modules, called Swift

00:11:19.586 --> 00:11:20.746 A:middle
Module Interfaces.

00:11:21.886 --> 00:11:23.186 A:middle
And just like the Compiled

00:11:23.186 --> 00:11:25.376 A:middle
Module Format, they list out all

00:11:25.376 --> 00:11:27.756 A:middle
the public APIs of a module, but

00:11:27.756 --> 00:11:29.956 A:middle
in a textual form that behaves

00:11:29.956 --> 00:11:30.966 A:middle
more like source code.

00:11:32.086 --> 00:11:33.356 A:middle
And since they behave like

00:11:33.356 --> 00:11:35.546 A:middle
source code, then future

00:11:35.546 --> 00:11:37.006 A:middle
versions of the Swift Compiler

00:11:37.436 --> 00:11:39.026 A:middle
will be able to import module

00:11:39.026 --> 00:11:40.676 A:middle
interfaces created with older

00:11:40.676 --> 00:11:41.066 A:middle
versions.

00:11:41.716 --> 00:11:45.396 A:middle
And when you enable Build

00:11:45.396 --> 00:11:46.696 A:middle
Libraries for Distribution,

00:11:47.416 --> 00:11:48.606 A:middle
you're telling the compiler to

00:11:48.606 --> 00:11:50.076 A:middle
generate one of these stable

00:11:50.076 --> 00:11:52.316 A:middle
interfaces whenever it builds

00:11:52.316 --> 00:11:52.926 A:middle
your framework.

00:11:53.606 --> 00:11:57.406 A:middle
So, what does one of these

00:11:57.406 --> 00:11:58.836 A:middle
interfaces actually look like?

00:11:59.586 --> 00:12:01.176 A:middle
Let's take a look again at the

00:11:59.586 --> 00:12:01.176 A:middle
Let's take a look again at the

00:12:01.176 --> 00:12:02.566 A:middle
source of FlightKit.

00:12:03.716 --> 00:12:04.856 A:middle
So that is the source from

00:12:04.856 --> 00:12:05.326 A:middle
FlightKit.

00:12:05.326 --> 00:12:08.116 A:middle
And on the right, you'll see the

00:12:08.116 --> 00:12:09.606 A:middle
Module Interface for FlightKit.

00:12:10.286 --> 00:12:11.546 A:middle
Now, this is a lot, and it goes

00:12:11.546 --> 00:12:12.816 A:middle
off the screen, so we are going

00:12:12.816 --> 00:12:15.206 A:middle
to look at it piece by piece.

00:12:15.416 --> 00:12:17.146 A:middle
So first you'll see this section

00:12:17.146 --> 00:12:17.916 A:middle
of meta data.

00:12:18.826 --> 00:12:20.916 A:middle
So this includes the version of

00:12:20.916 --> 00:12:22.116 A:middle
the compiler that produced this

00:12:22.116 --> 00:12:24.276 A:middle
interface, but it also contains

00:12:24.306 --> 00:12:26.026 A:middle
the subset of command line flags

00:12:26.316 --> 00:12:27.696 A:middle
that the Swift Compiler needs to

00:12:27.696 --> 00:12:29.256 A:middle
import this as a module.

00:12:32.156 --> 00:12:34.636 A:middle
Next, you'll see all the modules

00:12:34.636 --> 00:12:36.986 A:middle
that this framework imports, and

00:12:37.836 --> 00:12:39.306 A:middle
then we'll start seeing the

00:12:39.306 --> 00:12:40.586 A:middle
types that are part of the

00:12:40.586 --> 00:12:41.096 A:middle
interface.

00:12:42.356 --> 00:12:43.976 A:middle
So, here's the public API of the

00:12:43.976 --> 00:12:44.846 A:middle
Spaceship class.

00:12:44.976 --> 00:12:46.926 A:middle
Now, I want you to notice three

00:12:46.926 --> 00:12:48.126 A:middle
things here.

00:12:48.766 --> 00:12:50.516 A:middle
Number one is that the public

00:12:50.516 --> 00:12:52.706 A:middle
name property is included in the

00:12:52.706 --> 00:12:54.806 A:middle
interface, but the private

00:12:54.806 --> 00:12:56.266 A:middle
current location property is

00:12:56.266 --> 00:12:56.706 A:middle
not.

00:12:57.896 --> 00:13:00.686 A:middle
It's not part of the public API.

00:12:57.896 --> 00:13:00.686 A:middle
It's not part of the public API.

00:13:01.426 --> 00:13:04.176 A:middle
Next, notice that the public

00:13:04.216 --> 00:13:06.356 A:middle
initializer and the fly method

00:13:06.496 --> 00:13:07.876 A:middle
are included in the interface.

00:13:09.006 --> 00:13:10.796 A:middle
But their bodies are not

00:13:10.796 --> 00:13:11.986 A:middle
included, again, because they're

00:13:11.986 --> 00:13:14.116 A:middle
not part of the public API.

00:13:15.276 --> 00:13:16.656 A:middle
And finally, notice that the

00:13:16.656 --> 00:13:18.596 A:middle
class has a de-initializer in

00:13:18.596 --> 00:13:20.286 A:middle
the interface, but there wasn't

00:13:20.286 --> 00:13:21.416 A:middle
one written in the original

00:13:21.416 --> 00:13:22.626 A:middle
source code.

00:13:23.186 --> 00:13:26.036 A:middle
Now, when you write a class in

00:13:26.036 --> 00:13:27.676 A:middle
Swift, and you don't provide an

00:13:27.676 --> 00:13:29.456 A:middle
explicit de-initializer, the

00:13:29.456 --> 00:13:31.086 A:middle
compiler generates one for you.

00:13:31.616 --> 00:13:34.296 A:middle
And this sort of highlights one

00:13:34.296 --> 00:13:35.666 A:middle
of the underlying principles of

00:13:35.666 --> 00:13:36.606 A:middle
Module Interfaces.

00:13:37.146 --> 00:13:38.416 A:middle
If this format is supposed to be

00:13:38.416 --> 00:13:39.936 A:middle
stable across versions of the

00:13:39.936 --> 00:13:42.156 A:middle
compiler, then the compiler

00:13:42.156 --> 00:13:43.976 A:middle
should not make any assumptions

00:13:44.196 --> 00:13:45.626 A:middle
about the underlying source

00:13:45.626 --> 00:13:45.886 A:middle
code.

00:13:46.786 --> 00:13:48.466 A:middle
So we include it in the Module

00:13:48.466 --> 00:13:48.926 A:middle
Interface.

00:13:49.506 --> 00:13:53.316 A:middle
Next, let's look at that Speed

00:13:53.316 --> 00:13:53.516 A:middle
enum.

00:13:54.466 --> 00:13:55.666 A:middle
Well, the first thing to see is

00:13:55.666 --> 00:13:57.796 A:middle
that both cases of the enum are

00:13:57.796 --> 00:13:58.316 A:middle
included.

00:13:58.506 --> 00:14:01.996 A:middle
Those are part of the public

00:13:58.506 --> 00:14:01.996 A:middle
Those are part of the public

00:14:01.996 --> 00:14:02.086 A:middle
API.

00:14:02.086 --> 00:14:03.956 A:middle
However, in the interface,

00:14:03.956 --> 00:14:05.626 A:middle
there's an explicit conformance

00:14:05.626 --> 00:14:06.316 A:middle
to Hashable.

00:14:07.116 --> 00:14:08.876 A:middle
And we list off the methods that

00:14:08.876 --> 00:14:11.476 A:middle
are required to conform to both

00:14:11.476 --> 00:14:12.566 A:middle
Hashable and Equitable.

00:14:13.396 --> 00:14:14.846 A:middle
Well, this is because in Swift,

00:14:15.146 --> 00:14:16.666 A:middle
if you make an enum without any

00:14:16.666 --> 00:14:19.496 A:middle
associated values, then the

00:14:19.496 --> 00:14:21.026 A:middle
compiler implicitly makes that

00:14:21.026 --> 00:14:22.626 A:middle
conform to an Equitable and

00:14:22.626 --> 00:14:24.546 A:middle
Hashable, and automatically

00:14:24.546 --> 00:14:25.756 A:middle
derives the methods that are

00:14:25.756 --> 00:14:26.276 A:middle
required.

00:14:26.916 --> 00:14:28.166 A:middle
So, in the spirit of being

00:14:28.166 --> 00:14:29.306 A:middle
explicit, and not making

00:14:29.306 --> 00:14:31.696 A:middle
assumptions, it's included in

00:14:31.696 --> 00:14:32.576 A:middle
the Module Interface.

00:14:33.956 --> 00:14:36.476 A:middle
And finally, the Location struct

00:14:36.656 --> 00:14:38.746 A:middle
is included as is, because it

00:14:38.746 --> 00:14:39.876 A:middle
only has public stored

00:14:39.876 --> 00:14:41.626 A:middle
properties, and does not declare

00:14:41.626 --> 00:14:42.696 A:middle
any conformances.

00:14:43.326 --> 00:14:45.686 A:middle
So that's a quick look at the

00:14:45.686 --> 00:14:46.976 A:middle
Module Interface for FlightKit.

00:14:51.496 --> 00:14:52.676 A:middle
Now that you've taken a look at

00:14:52.676 --> 00:14:54.966 A:middle
what's inside a framework, let's

00:14:54.966 --> 00:14:56.296 A:middle
talk about how to build a

00:14:56.336 --> 00:14:58.766 A:middle
distributable binary XCFramework

00:14:58.766 --> 00:14:59.156 A:middle
yourself.

00:14:59.746 --> 00:15:02.246 A:middle
Well, the first step to building

00:14:59.746 --> 00:15:02.246 A:middle
Well, the first step to building

00:15:02.246 --> 00:15:03.936 A:middle
your framework is by building an

00:15:03.936 --> 00:15:04.406 A:middle
archive.

00:15:05.326 --> 00:15:06.626 A:middle
Archiving Your Framework will

00:15:06.626 --> 00:15:08.656 A:middle
build it in Release Mode, and it

00:15:08.656 --> 00:15:09.576 A:middle
will package it up for

00:15:09.576 --> 00:15:11.186 A:middle
distribution and you can see

00:15:11.186 --> 00:15:12.716 A:middle
that in the Organizer window.

00:15:13.746 --> 00:15:15.636 A:middle
And as an added benefit, this

00:15:15.686 --> 00:15:17.376 A:middle
archive will also contain the

00:15:17.376 --> 00:15:18.776 A:middle
debug information that

00:15:18.776 --> 00:15:20.196 A:middle
corresponds to that build of

00:15:20.196 --> 00:15:21.906 A:middle
your framework, which means if

00:15:21.906 --> 00:15:23.776 A:middle
your clients have any crashes or

00:15:23.776 --> 00:15:25.116 A:middle
any instability that originate

00:15:25.116 --> 00:15:26.526 A:middle
in your framework, they'll be

00:15:26.526 --> 00:15:27.936 A:middle
able to send it to you, and you

00:15:27.936 --> 00:15:29.056 A:middle
will be able to look at the

00:15:29.146 --> 00:15:31.606 A:middle
symbols and debug it.

00:15:32.336 --> 00:15:34.626 A:middle
To Archive your framework, you

00:15:34.626 --> 00:15:36.336 A:middle
can use the xcodebuild archive

00:15:36.336 --> 00:15:36.776 A:middle
command.

00:15:37.836 --> 00:15:39.166 A:middle
You'll pass in the scheme of

00:15:39.166 --> 00:15:40.596 A:middle
your framework in your project,

00:15:41.606 --> 00:15:43.166 A:middle
and list out the destinations

00:15:43.166 --> 00:15:44.146 A:middle
that you'd like to compile it

00:15:44.146 --> 00:15:44.406 A:middle
for.

00:15:45.186 --> 00:15:46.606 A:middle
So if you're building for iOS,

00:15:46.976 --> 00:15:47.836 A:middle
this can be one for the

00:15:47.836 --> 00:15:49.676 A:middle
simulator, one for the device,

00:15:50.266 --> 00:15:51.456 A:middle
and one for the Mac that's

00:15:51.456 --> 00:15:52.216 A:middle
running UIKit.

00:15:52.836 --> 00:15:55.486 A:middle
You will also need to pass the

00:15:55.486 --> 00:15:57.416 A:middle
Skip Install build setting, and

00:15:57.416 --> 00:15:58.276 A:middle
set it to No.

00:15:59.096 --> 00:16:01.316 A:middle
This tells xcodebuild archive to

00:15:59.096 --> 00:16:01.316 A:middle
This tells xcodebuild archive to

00:16:01.316 --> 00:16:03.256 A:middle
install your framework in the

00:16:03.256 --> 00:16:04.286 A:middle
resulting archive.

00:16:04.926 --> 00:16:09.276 A:middle
So, by doing this, you will be

00:16:09.276 --> 00:16:11.636 A:middle
building archives of each

00:16:11.636 --> 00:16:13.666 A:middle
variant of your framework, and

00:16:13.666 --> 00:16:15.056 A:middle
those will be available in the

00:16:15.056 --> 00:16:17.186 A:middle
Archives directory in the Xcode

00:16:17.186 --> 00:16:19.226 A:middle
Locations tab, in the

00:16:19.226 --> 00:16:20.096 A:middle
Preferences window.

00:16:20.606 --> 00:16:24.186 A:middle
Once you've built these

00:16:24.186 --> 00:16:25.966 A:middle
archives, you can extract the

00:16:25.966 --> 00:16:27.456 A:middle
frameworks, and bundle them up

00:16:27.456 --> 00:16:29.546 A:middle
together in one XCFramework.

00:16:30.056 --> 00:16:32.486 A:middle
And to do this, you'll run the

00:16:32.486 --> 00:16:34.716 A:middle
xcodebuild -create-xcframework

00:16:34.926 --> 00:16:35.366 A:middle
command.

00:16:36.456 --> 00:16:38.106 A:middle
You'll pass in the path to each

00:16:38.106 --> 00:16:40.186 A:middle
framework on disk, and then

00:16:40.186 --> 00:16:41.956 A:middle
provide a path that you'd like

00:16:42.006 --> 00:16:43.836 A:middle
the output XCFramework to be

00:16:43.836 --> 00:16:46.456 A:middle
output to.

00:16:46.696 --> 00:16:48.906 A:middle
So, that's how to build an

00:16:48.906 --> 00:16:49.526 A:middle
XCFramework.

00:16:49.526 --> 00:16:51.946 A:middle
And in summary, remember, you'll

00:16:51.946 --> 00:16:53.916 A:middle
want to enable Build Libraries

00:16:53.916 --> 00:16:55.626 A:middle
for Distribution, to make sure

00:16:55.626 --> 00:16:56.826 A:middle
that your library is built to be

00:16:56.826 --> 00:16:57.356 A:middle
distributed.

00:16:57.436 --> 00:17:00.996 A:middle
You'll run xcodebuild archive,

00:16:57.436 --> 00:17:00.996 A:middle
You'll run xcodebuild archive,

00:17:01.536 --> 00:17:02.536 A:middle
to build archives of your

00:17:02.536 --> 00:17:05.576 A:middle
framework, and finally you'll

00:17:05.576 --> 00:17:06.536 A:middle
run xcodebuild

00:17:06.566 --> 00:17:09.185 A:middle
-create-xcframework, to package

00:17:09.185 --> 00:17:10.705 A:middle
it up for distribution.

00:17:11.146 --> 00:17:12.165 A:middle
And then you can start sending

00:17:12.165 --> 00:17:13.205 A:middle
it to your clients, and they can

00:17:13.205 --> 00:17:14.586 A:middle
start adopting it.

00:17:15.195 --> 00:17:16.925 A:middle
So that was XCFrameworks.

00:17:18.326 --> 00:17:19.846 A:middle
Now, my teammate, Jordan, will

00:17:19.846 --> 00:17:21.026 A:middle
come up to talk to you about

00:17:21.026 --> 00:17:22.656 A:middle
what you should consider as a

00:17:22.656 --> 00:17:24.646 A:middle
framework author to make using

00:17:24.646 --> 00:17:26.185 A:middle
your framework as smooth as

00:17:26.185 --> 00:17:26.685 A:middle
possible.

00:17:28.516 --> 00:17:34.546 A:middle
[ Applause and Cheering ]

00:17:35.046 --> 00:17:35.736 A:middle
&gt;&gt; Thanks Harlan.

00:17:36.006 --> 00:17:36.466 A:middle
All right.

00:17:36.836 --> 00:17:38.086 A:middle
So we saw how easy it was to

00:17:38.376 --> 00:17:39.876 A:middle
bring one of these XCFrameworks

00:17:40.066 --> 00:17:42.256 A:middle
into an app that is a client of

00:17:42.256 --> 00:17:43.906 A:middle
the framework, and we saw the

00:17:43.906 --> 00:17:45.556 A:middle
steps required to produce an

00:17:45.586 --> 00:17:46.276 A:middle
XCFramework.

00:17:47.016 --> 00:17:48.316 A:middle
But that's just the first step,

00:17:48.576 --> 00:17:49.476 A:middle
because you're framework

00:17:49.476 --> 00:17:51.096 A:middle
authors, and you're developing

00:17:51.096 --> 00:17:53.326 A:middle
new capabilities every year, and

00:17:53.326 --> 00:17:54.606 A:middle
making things better and better

00:17:54.606 --> 00:17:55.446 A:middle
for your clients.

00:17:56.236 --> 00:17:57.296 A:middle
So, in this section, I'm going

00:17:57.296 --> 00:17:58.926 A:middle
to talk about three major

00:17:58.926 --> 00:17:59.456 A:middle
things.

00:18:00.386 --> 00:18:01.556 A:middle
Evolving your framework from

00:18:01.556 --> 00:18:02.556 A:middle
release to release.

00:18:03.366 --> 00:18:04.726 A:middle
Trading some flexibility that

00:18:04.726 --> 00:18:05.936 A:middle
Swift gives you for

00:18:05.936 --> 00:18:07.546 A:middle
optimizability of your clients,

00:18:08.296 --> 00:18:09.536 A:middle
and helping your clients have

00:18:09.536 --> 00:18:10.606 A:middle
the smoothest experience

00:18:10.606 --> 00:18:11.196 A:middle
possible.

00:18:11.736 --> 00:18:14.096 A:middle
So, start with evolving your

00:18:14.096 --> 00:18:14.596 A:middle
framework.

00:18:15.196 --> 00:18:17.186 A:middle
And what do I mean when I say

00:18:17.186 --> 00:18:18.456 A:middle
evolving your framework?

00:18:19.496 --> 00:18:22.966 A:middle
Well, like I said, every time

00:18:22.966 --> 00:18:24.366 A:middle
you release a new version of

00:18:24.366 --> 00:18:25.736 A:middle
your framework, it will have new

00:18:25.736 --> 00:18:27.746 A:middle
capabilities, new APIs, maybe

00:18:27.746 --> 00:18:29.936 A:middle
some bug fixes, and we want to

00:18:29.936 --> 00:18:31.866 A:middle
be able to do that without

00:18:31.866 --> 00:18:33.736 A:middle
breaking source or binary

00:18:33.736 --> 00:18:34.726 A:middle
compatibility.

00:18:35.586 --> 00:18:37.776 A:middle
Now, why is binary compatibility

00:18:37.776 --> 00:18:38.686 A:middle
important here?

00:18:39.876 --> 00:18:41.156 A:middle
It's because you don't

00:18:41.156 --> 00:18:42.766 A:middle
necessarily know who your

00:18:42.766 --> 00:18:44.256 A:middle
clients are going to be.

00:18:44.746 --> 00:18:46.486 A:middle
A lot of times it will just be

00:18:46.486 --> 00:18:47.266 A:middle
an app target.

00:18:47.576 --> 00:18:48.526 A:middle
They'll take your framework,

00:18:48.766 --> 00:18:50.466 A:middle
bundle it up, and send it off to

00:18:50.466 --> 00:18:50.956 A:middle
the store.

00:18:52.246 --> 00:18:53.806 A:middle
But other times, you'll have

00:18:53.836 --> 00:18:55.396 A:middle
clients that are themselves

00:18:55.476 --> 00:18:57.246 A:middle
binary frameworks, either from

00:18:57.246 --> 00:18:59.206 A:middle
your company or another company

00:18:59.206 --> 00:18:59.846 A:middle
entirely.

00:18:59.896 --> 00:19:02.756 A:middle
And in that case, the two of you

00:18:59.896 --> 00:19:02.756 A:middle
And in that case, the two of you

00:19:02.836 --> 00:19:04.396 A:middle
probably have separate release

00:19:04.396 --> 00:19:04.926 A:middle
schedules.

00:19:05.576 --> 00:19:06.596 A:middle
They might get all the way up to

00:19:06.596 --> 00:19:08.896 A:middle
version 2.1, while you're still

00:19:08.896 --> 00:19:10.816 A:middle
working on your newest version.

00:19:10.816 --> 00:19:13.156 A:middle
And when you finally do release

00:19:13.156 --> 00:19:16.246 A:middle
that version 1.1, well, they

00:19:16.246 --> 00:19:17.566 A:middle
shouldn't have to do any extra

00:19:17.566 --> 00:19:18.636 A:middle
effort to adopt it.

00:19:19.116 --> 00:19:19.906 A:middle
You don't want to get in a

00:19:19.906 --> 00:19:21.946 A:middle
situation where two binary

00:19:21.946 --> 00:19:23.436 A:middle
frameworks are version locked

00:19:23.436 --> 00:19:25.066 A:middle
with one another, because then

00:19:25.066 --> 00:19:26.506 A:middle
the application who is using

00:19:26.506 --> 00:19:30.766 A:middle
them might decide not to update.

00:19:30.976 --> 00:19:32.266 A:middle
So, I'm saying here that the

00:19:32.266 --> 00:19:33.426 A:middle
version of your framework is

00:19:33.426 --> 00:19:35.366 A:middle
important, and not only do you

00:19:35.366 --> 00:19:36.756 A:middle
want to put that on your

00:19:36.756 --> 00:19:38.556 A:middle
website, and your documentation,

00:19:38.806 --> 00:19:40.066 A:middle
but you should also put it in

00:19:40.066 --> 00:19:41.686 A:middle
the framework itself, and the

00:19:41.686 --> 00:19:43.736 A:middle
place to do that is the Bundle

00:19:43.736 --> 00:19:45.426 A:middle
version string setting in the

00:19:45.426 --> 00:19:46.636 A:middle
framework's Info.plist.

00:19:47.486 --> 00:19:49.326 A:middle
This is the place for a human

00:19:49.326 --> 00:19:50.906 A:middle
readable version number to

00:19:50.906 --> 00:19:52.886 A:middle
communicate to your clients what

00:19:52.886 --> 00:19:54.586 A:middle
changes you've made since the

00:19:54.586 --> 00:19:55.396 A:middle
last release.

00:19:55.986 --> 00:19:58.576 A:middle
And the way that we recommend to

00:19:58.576 --> 00:20:00.356 A:middle
do that is with Semantic

00:19:58.576 --> 00:20:00.356 A:middle
do that is with Semantic

00:20:00.396 --> 00:20:00.966 A:middle
Versioning.

00:20:01.616 --> 00:20:02.416 A:middle
Now, if you weren't in the

00:20:02.416 --> 00:20:04.156 A:middle
Packages talk, I'll do a quick

00:20:04.246 --> 00:20:05.446 A:middle
review of what Semantic

00:20:05.446 --> 00:20:06.866 A:middle
Versioning is.

00:20:07.676 --> 00:20:09.326 A:middle
The smallest component is the

00:20:09.326 --> 00:20:11.306 A:middle
Patch Version, and represents

00:20:11.456 --> 00:20:12.856 A:middle
when you make bug fixes, or

00:20:12.856 --> 00:20:14.156 A:middle
implementation changes to your

00:20:14.156 --> 00:20:15.886 A:middle
framework that shouldn't affect

00:20:15.886 --> 00:20:17.266 A:middle
your clients.

00:20:18.076 --> 00:20:20.216 A:middle
The middle component is for

00:20:20.416 --> 00:20:22.106 A:middle
backwards compatible editions,

00:20:22.466 --> 00:20:24.746 A:middle
new APIs, or new capabilities.

00:20:25.386 --> 00:20:28.796 A:middle
And the Major component is for

00:20:28.796 --> 00:20:30.416 A:middle
any breaking changes that you

00:20:30.416 --> 00:20:32.356 A:middle
have to make, whether that's

00:20:32.436 --> 00:20:34.486 A:middle
source breaking, binary

00:20:34.486 --> 00:20:37.016 A:middle
breaking, or semantics breaking

00:20:37.506 --> 00:20:38.986 A:middle
in a way where clients will have

00:20:39.046 --> 00:20:41.916 A:middle
to rebuild, and possibly redo

00:20:41.916 --> 00:20:43.606 A:middle
some of their client code, in

00:20:43.606 --> 00:20:45.216 A:middle
order to adopt the new version

00:20:45.216 --> 00:20:46.156 A:middle
of the framework.

00:20:46.586 --> 00:20:49.036 A:middle
Let's see what this looks like

00:20:49.036 --> 00:20:50.746 A:middle
in practice, with the FlightKit

00:20:50.746 --> 00:20:51.676 A:middle
model objects.

00:20:52.586 --> 00:20:53.826 A:middle
So here is the same thing on the

00:20:53.826 --> 00:20:56.096 A:middle
left that we had from before.

00:20:57.366 --> 00:20:59.136 A:middle
And now, on the right, I've made

00:20:59.136 --> 00:21:00.466 A:middle
a bunch of changes to this

00:20:59.136 --> 00:21:00.466 A:middle
a bunch of changes to this

00:21:00.466 --> 00:21:00.946 A:middle
framework.

00:21:02.096 --> 00:21:03.406 A:middle
Let's go through them piece by

00:21:03.476 --> 00:21:05.316 A:middle
piece and see how each change

00:21:05.406 --> 00:21:06.526 A:middle
can affect the framework's

00:21:06.526 --> 00:21:07.246 A:middle
version number.

00:21:08.506 --> 00:21:09.446 A:middle
We'll start at the top.

00:21:10.466 --> 00:21:12.286 A:middle
I've added a new private

00:21:12.286 --> 00:21:13.896 A:middle
property to the Spaceship class.

00:21:14.396 --> 00:21:15.966 A:middle
And I'm using it in the

00:21:15.966 --> 00:21:17.226 A:middle
Spaceship's initializer.

00:21:18.556 --> 00:21:20.996 A:middle
Now, neither of these things are

00:21:20.996 --> 00:21:22.506 A:middle
going to appear in the module

00:21:22.506 --> 00:21:23.156 A:middle
interface.

00:21:23.466 --> 00:21:24.446 A:middle
They're not part of your

00:21:24.446 --> 00:21:25.696 A:middle
framework's public API.

00:21:26.976 --> 00:21:28.796 A:middle
So this sort of change only

00:21:28.796 --> 00:21:30.556 A:middle
requires updating the minor, or

00:21:30.556 --> 00:21:32.116 A:middle
the Patch Version component.

00:21:33.916 --> 00:21:36.086 A:middle
Keep in mind though that I did

00:21:36.146 --> 00:21:37.786 A:middle
change the behavior of the

00:21:37.786 --> 00:21:39.776 A:middle
initializer, and so if this was

00:21:39.776 --> 00:21:42.536 A:middle
documented behavior before, then

00:21:42.536 --> 00:21:43.806 A:middle
this would be a semantics

00:21:43.856 --> 00:21:45.826 A:middle
breaking change, and clients

00:21:45.826 --> 00:21:46.786 A:middle
would have to consider whether

00:21:46.786 --> 00:21:48.866 A:middle
to update, and therefore, I

00:21:48.866 --> 00:21:50.386 A:middle
should change the major version

00:21:50.386 --> 00:21:51.356 A:middle
number instead.

00:21:51.986 --> 00:21:55.206 A:middle
Now, the next change I've made

00:21:55.206 --> 00:21:57.376 A:middle
here is to add a new method to

00:21:57.376 --> 00:21:58.496 A:middle
the Spaceship class.

00:21:58.796 --> 00:22:00.616 A:middle
It's a new public method, which

00:21:58.796 --> 00:22:00.616 A:middle
It's a new public method, which

00:22:00.616 --> 00:22:01.926 A:middle
means clients will start using

00:22:01.926 --> 00:22:02.886 A:middle
it and depending on it.

00:22:03.846 --> 00:22:05.566 A:middle
So, the right thing to do is to

00:22:05.566 --> 00:22:07.256 A:middle
increment the Minor Version

00:22:07.256 --> 00:22:07.636 A:middle
number.

00:22:08.146 --> 00:22:09.676 A:middle
And you'll notice, I also reset

00:22:09.676 --> 00:22:13.846 A:middle
the Patch Version to zero.

00:22:13.966 --> 00:22:16.516 A:middle
Finally, I've also added a new

00:22:16.516 --> 00:22:18.406 A:middle
parameter to the fly method.

00:22:19.356 --> 00:22:21.486 A:middle
I've given it a default, so that

00:22:21.486 --> 00:22:23.536 A:middle
most of the use sites won't have

00:22:23.586 --> 00:22:24.206 A:middle
to change.

00:22:24.986 --> 00:22:27.126 A:middle
But in Swift, a function is

00:22:27.126 --> 00:22:29.686 A:middle
uniquely identified by its name,

00:22:30.216 --> 00:22:31.466 A:middle
and its parameters.

00:22:31.466 --> 00:22:32.996 A:middle
Both the argument labels, and

00:22:32.996 --> 00:22:33.616 A:middle
the types.

00:22:34.286 --> 00:22:36.626 A:middle
So, here I've broken both source

00:22:36.966 --> 00:22:39.726 A:middle
and binary compatibility, so

00:22:39.726 --> 00:22:41.706 A:middle
this requires updating the Major

00:22:41.706 --> 00:22:43.636 A:middle
Version number, and asking any

00:22:43.636 --> 00:22:44.926 A:middle
clients to re-compile.

00:22:45.616 --> 00:22:46.696 A:middle
Maybe I should have made a new

00:22:46.696 --> 00:22:47.686 A:middle
overload instead?

00:22:48.286 --> 00:22:51.426 A:middle
Now, these are all changes to

00:22:51.426 --> 00:22:52.856 A:middle
the Spaceship class, but I've

00:22:52.856 --> 00:22:54.266 A:middle
also changed some of the value

00:22:54.266 --> 00:22:55.796 A:middle
types in FlightKit as well.

00:22:55.796 --> 00:22:58.046 A:middle
I've added a new case to the

00:22:58.046 --> 00:22:58.786 A:middle
Speed edum.

00:23:00.256 --> 00:23:02.516 A:middle
I've made locations Hashable, so

00:23:02.516 --> 00:23:03.836 A:middle
that clients can have sets of

00:23:03.836 --> 00:23:06.436 A:middle
them, and this is my favorite

00:23:06.436 --> 00:23:08.726 A:middle
change, I've added a new stored

00:23:08.726 --> 00:23:10.626 A:middle
property to the Location struct,

00:23:10.896 --> 00:23:12.516 A:middle
without breaking source or

00:23:12.516 --> 00:23:13.816 A:middle
binary compatibility.

00:23:14.516 --> 00:23:19.546 A:middle
[ Applause ]

00:23:20.046 --> 00:23:21.706 A:middle
Now, in Swift, all of these

00:23:21.706 --> 00:23:23.126 A:middle
changes are backwards

00:23:23.166 --> 00:23:24.866 A:middle
compatible, so I only need to

00:23:24.866 --> 00:23:26.606 A:middle
bump the Minor Version number.

00:23:27.186 --> 00:23:30.266 A:middle
Now, this flexibility here has

00:23:30.266 --> 00:23:31.866 A:middle
some implications for how you

00:23:31.866 --> 00:23:33.186 A:middle
design the API of your

00:23:33.186 --> 00:23:33.906 A:middle
frameworks.

00:23:34.616 --> 00:23:36.426 A:middle
The most important one is to

00:23:36.426 --> 00:23:37.536 A:middle
start small.

00:23:38.086 --> 00:23:39.436 A:middle
It's easy to add new

00:23:39.436 --> 00:23:41.026 A:middle
capabilities if you find out

00:23:41.026 --> 00:23:42.736 A:middle
that you need them, or if your

00:23:42.736 --> 00:23:44.896 A:middle
clients file feedback saying

00:23:44.896 --> 00:23:46.016 A:middle
that more capabilities are

00:23:46.016 --> 00:23:46.526 A:middle
needed.

00:23:47.086 --> 00:23:48.576 A:middle
But it's really hard to remove

00:23:48.626 --> 00:23:50.296 A:middle
something, because it will most

00:23:50.296 --> 00:23:51.946 A:middle
likely break source or binary

00:23:51.946 --> 00:23:53.816 A:middle
compatibility for at least one

00:23:53.816 --> 00:23:55.326 A:middle
of your clients.

00:23:56.316 --> 00:23:57.866 A:middle
For the things that you won't be

00:23:57.866 --> 00:23:59.016 A:middle
able to change after the fact,

00:23:59.526 --> 00:24:00.906 A:middle
like the names of your types,

00:23:59.526 --> 00:24:00.906 A:middle
like the names of your types,

00:24:01.276 --> 00:24:02.366 A:middle
make sure you consider them

00:24:02.366 --> 00:24:04.136 A:middle
carefully up front, that those

00:24:04.136 --> 00:24:05.286 A:middle
names are not just going to make

00:24:05.286 --> 00:24:07.666 A:middle
sense in this release, but also

00:24:07.666 --> 00:24:09.076 A:middle
in all future releases.

00:24:09.616 --> 00:24:13.386 A:middle
And finally, don't add

00:24:13.386 --> 00:24:15.026 A:middle
extensibility too early.

00:24:15.606 --> 00:24:16.556 A:middle
You don't need to make your

00:24:16.556 --> 00:24:18.406 A:middle
classes open, or to provide

00:24:18.406 --> 00:24:20.476 A:middle
arbitrary callbacks in the first

00:24:20.476 --> 00:24:21.756 A:middle
version of your framework.

00:24:22.666 --> 00:24:23.706 A:middle
Why is this important?

00:24:24.386 --> 00:24:25.806 A:middle
Because it makes reasoning about

00:24:25.876 --> 00:24:27.926 A:middle
your framework's behavior much

00:24:27.996 --> 00:24:29.986 A:middle
harder when you have to consider

00:24:29.986 --> 00:24:31.526 A:middle
what your clients might be doing

00:24:31.526 --> 00:24:32.516 A:middle
at the same time.

00:24:33.666 --> 00:24:35.776 A:middle
So, you can always make your

00:24:35.776 --> 00:24:37.226 A:middle
classes open in the future.

00:24:37.826 --> 00:24:39.196 A:middle
You can always add properties

00:24:39.196 --> 00:24:40.146 A:middle
that represent additional

00:24:40.146 --> 00:24:42.696 A:middle
callbacks, but you can't remove

00:24:42.696 --> 00:24:44.396 A:middle
the flexibility that you put in

00:24:44.396 --> 00:24:45.036 A:middle
by default.

00:24:45.706 --> 00:24:49.336 A:middle
So, how does this all work?

00:24:50.546 --> 00:24:51.356 A:middle
Indirection.

00:24:52.546 --> 00:24:53.906 A:middle
That's just a word, so let's

00:24:53.906 --> 00:24:55.226 A:middle
step through an example.

00:24:55.356 --> 00:24:58.166 A:middle
On the left, here again, I have

00:24:58.446 --> 00:24:59.796 A:middle
the Spaceship class, stripped

00:24:59.796 --> 00:25:01.066 A:middle
down to its module interface

00:24:59.796 --> 00:25:01.066 A:middle
down to its module interface

00:25:01.116 --> 00:25:03.206 A:middle
this time, and on the right, I

00:25:03.206 --> 00:25:04.806 A:middle
have a use of the fly method.

00:25:06.106 --> 00:25:07.396 A:middle
This is from a client code

00:25:07.516 --> 00:25:09.016 A:middle
that's outside of the FlightKit

00:25:09.016 --> 00:25:09.456 A:middle
framework.

00:25:10.536 --> 00:25:11.936 A:middle
And what's going to happen here

00:25:11.936 --> 00:25:13.616 A:middle
at runtime is that the client is

00:25:13.616 --> 00:25:15.526 A:middle
going to have to ask which

00:25:15.526 --> 00:25:17.266 A:middle
method is the fly method?

00:25:17.786 --> 00:25:20.176 A:middle
And the framework will respond,

00:25:20.756 --> 00:25:22.326 A:middle
it's the second one.

00:25:23.076 --> 00:25:25.556 A:middle
This is how Swift ensures binary

00:25:25.556 --> 00:25:27.766 A:middle
compatibility even when you add

00:25:27.766 --> 00:25:28.866 A:middle
new methods to a class.

00:25:30.156 --> 00:25:31.826 A:middle
And it's basically the same way

00:25:32.026 --> 00:25:33.526 A:middle
that Objective-C does message

00:25:33.566 --> 00:25:35.776 A:middle
dispatch, doing it in a call

00:25:36.046 --> 00:25:38.426 A:middle
from one Library to another, but

00:25:38.426 --> 00:25:40.156 A:middle
Swift only does it when you're

00:25:40.196 --> 00:25:42.986 A:middle
crossing this client framework

00:25:43.196 --> 00:25:43.766 A:middle
boundary.

00:25:45.716 --> 00:25:46.876 A:middle
There's another form of

00:25:46.876 --> 00:25:48.396 A:middle
indirection as well.

00:25:48.796 --> 00:25:50.016 A:middle
And that's when clients are

00:25:50.016 --> 00:25:51.786 A:middle
using the structs or enums

00:25:52.086 --> 00:25:53.466 A:middle
defined in the framework.

00:25:54.536 --> 00:25:55.826 A:middle
So in this case, one of the

00:25:55.826 --> 00:25:57.906 A:middle
arguments to the fly method is

00:25:57.906 --> 00:25:59.696 A:middle
that fast case from the Speed

00:26:00.416 --> 00:26:00.546 A:middle
edum.

00:26:01.176 --> 00:26:03.506 A:middle
And I said before that enums

00:26:03.506 --> 00:26:05.046 A:middle
could have new cases added

00:26:05.326 --> 00:26:06.316 A:middle
without breaking binary

00:26:06.316 --> 00:26:07.106 A:middle
compatibility.

00:26:08.576 --> 00:26:10.296 A:middle
That means that the client can't

00:26:10.296 --> 00:26:12.906 A:middle
assume that it knows how big the

00:26:12.906 --> 00:26:14.936 A:middle
enum is going to be in memory.

00:26:16.026 --> 00:26:18.286 A:middle
So this use of the enum requires

00:26:18.286 --> 00:26:19.836 A:middle
the client to ask the framework

00:26:20.586 --> 00:26:21.396 A:middle
how big is it?

00:26:22.236 --> 00:26:24.096 A:middle
And the framework responds, it's

00:26:24.096 --> 00:26:25.546 A:middle
just one byte.

00:26:26.976 --> 00:26:29.386 A:middle
The other possibility here is

00:26:29.386 --> 00:26:30.876 A:middle
that one of the new cases added

00:26:30.876 --> 00:26:32.236 A:middle
in the future might have

00:26:32.236 --> 00:26:33.316 A:middle
associated values.

00:26:34.156 --> 00:26:35.636 A:middle
And those associated values

00:26:35.636 --> 00:26:36.936 A:middle
might require some kind of

00:26:36.936 --> 00:26:37.396 A:middle
cleanup.

00:26:38.606 --> 00:26:40.376 A:middle
And so the client will also ask

00:26:40.376 --> 00:26:41.906 A:middle
the framework to cleanup the

00:26:41.906 --> 00:26:43.606 A:middle
enum value when it's done with

00:26:43.606 --> 00:26:45.216 A:middle
it, and the framework will do

00:26:45.216 --> 00:26:45.526 A:middle
so.

00:26:46.106 --> 00:26:48.986 A:middle
Now, a couple of you in the

00:26:48.986 --> 00:26:50.596 A:middle
audience at this point are

00:26:50.596 --> 00:26:52.206 A:middle
probably getting a little antsy

00:26:52.766 --> 00:26:54.446 A:middle
because we're talking about all

00:26:54.446 --> 00:26:56.436 A:middle
this extra communication between

00:26:56.436 --> 00:26:57.716 A:middle
the client and the framework,

00:26:58.766 --> 00:26:59.796 A:middle
and that's because you have

00:26:59.986 --> 00:27:01.076 A:middle
performance sensitive

00:26:59.986 --> 00:27:01.076 A:middle
performance sensitive

00:27:01.076 --> 00:27:02.636 A:middle
frameworks, and that's why the

00:27:02.636 --> 00:27:04.086 A:middle
next section is about trading

00:27:04.086 --> 00:27:05.506 A:middle
the flexibility that Swift is

00:27:05.506 --> 00:27:07.206 A:middle
giving you for the

00:27:07.206 --> 00:27:12.966 A:middle
optimizability of your clients.

00:27:14.416 --> 00:27:16.696 A:middle
Now, this really is a tradeoff.

00:27:17.386 --> 00:27:19.156 A:middle
As framework authors, we want

00:27:19.156 --> 00:27:20.586 A:middle
the flexibility to change

00:27:20.586 --> 00:27:22.046 A:middle
things, to add things, to

00:27:22.046 --> 00:27:24.626 A:middle
improve things, without breaking

00:27:24.626 --> 00:27:26.556 A:middle
source or binary compatibility.

00:27:27.976 --> 00:27:29.616 A:middle
But in order for the compiler to

00:27:29.616 --> 00:27:31.356 A:middle
make the client code as fast as

00:27:31.356 --> 00:27:33.356 A:middle
possible, it needs to make

00:27:33.356 --> 00:27:34.966 A:middle
assumptions about what's in the

00:27:34.966 --> 00:27:35.556 A:middle
framework.

00:27:35.996 --> 00:27:40.146 A:middle
And so Swift needs to be able to

00:27:40.146 --> 00:27:41.926 A:middle
handle both sides of the

00:27:41.926 --> 00:27:42.656 A:middle
spectrum.

00:27:43.066 --> 00:27:45.646 A:middle
And the way that this works is

00:27:45.676 --> 00:27:46.866 A:middle
through the Build Libraries for

00:27:46.866 --> 00:27:48.186 A:middle
Distribution build setting.

00:27:48.826 --> 00:27:50.046 A:middle
Harlan said before that this has

00:27:50.046 --> 00:27:52.046 A:middle
multiple effects in addition to

00:27:52.046 --> 00:27:53.426 A:middle
generating the Module Interface

00:27:53.426 --> 00:27:55.576 A:middle
file, and one of those effects

00:27:55.886 --> 00:27:57.446 A:middle
is to set the default to the

00:27:57.446 --> 00:27:59.426 A:middle
Flexibility side.

00:28:00.736 --> 00:28:02.736 A:middle
But again, Swift needs to be

00:28:02.736 --> 00:28:04.576 A:middle
able to handle all of these use

00:28:04.576 --> 00:28:06.646 A:middle
cases, and so in this section,

00:28:06.816 --> 00:28:07.966 A:middle
I'm going to talk about what you

00:28:07.966 --> 00:28:10.306 A:middle
can do once you've profiled the

00:28:10.506 --> 00:28:11.906 A:middle
behavior of your framework from

00:28:11.906 --> 00:28:13.466 A:middle
the outside, and seen that you

00:28:13.466 --> 00:28:14.956 A:middle
need additional performance.

00:28:15.046 --> 00:28:16.346 A:middle
And there's three ways to do

00:28:16.346 --> 00:28:18.206 A:middle
that: inlinable functions,

00:28:18.876 --> 00:28:20.756 A:middle
frozen enums, and frozen

00:28:20.756 --> 00:28:21.326 A:middle
structs.

00:28:21.926 --> 00:28:24.836 A:middle
So, we'll start with inlinable

00:28:24.836 --> 00:28:26.576 A:middle
functions, a feature introduced

00:28:26.576 --> 00:28:28.536 A:middle
last year in Swift 4.2.

00:28:29.426 --> 00:28:31.526 A:middle
In this case, I have a CargoShip

00:28:31.526 --> 00:28:33.326 A:middle
subclass of the Spaceship class

00:28:33.326 --> 00:28:35.286 A:middle
we saw earlier, and it has a

00:28:35.286 --> 00:28:37.376 A:middle
method canCarry that just

00:28:37.376 --> 00:28:39.466 A:middle
determines whether the CargoShip

00:28:39.826 --> 00:28:41.606 A:middle
is able to carry some piece of

00:28:41.606 --> 00:28:42.076 A:middle
cargo.

00:28:43.376 --> 00:28:45.046 A:middle
And I've made this inlinable,

00:28:45.416 --> 00:28:46.426 A:middle
because I think that this is

00:28:46.426 --> 00:28:47.726 A:middle
important for the performance of

00:28:47.726 --> 00:28:48.576 A:middle
my clients.

00:28:49.736 --> 00:28:51.986 A:middle
What this will do is make this

00:28:51.986 --> 00:28:54.056 A:middle
method part of my public

00:28:54.056 --> 00:28:55.906 A:middle
interface, not just its

00:28:55.906 --> 00:28:57.806 A:middle
declaration, but also its body.

00:28:58.916 --> 00:29:00.486 A:middle
And the effect of that is to

00:28:58.916 --> 00:29:00.486 A:middle
And the effect of that is to

00:29:00.486 --> 00:29:02.636 A:middle
copy that body into the Module

00:29:02.636 --> 00:29:03.646 A:middle
Interface file.

00:29:04.236 --> 00:29:07.076 A:middle
If you're reading very quickly,

00:29:07.366 --> 00:29:08.876 A:middle
you'll also see that this method

00:29:08.946 --> 00:29:10.836 A:middle
references an internal property

00:29:11.026 --> 00:29:12.356 A:middle
of the CargoShip class.

00:29:13.766 --> 00:29:15.326 A:middle
And that's possible, because

00:29:15.326 --> 00:29:16.936 A:middle
I've marked that property as

00:29:16.936 --> 00:29:18.296 A:middle
usable from inline.

00:29:19.386 --> 00:29:20.786 A:middle
This lets you get the best of

00:29:20.786 --> 00:29:21.516 A:middle
both worlds.

00:29:22.246 --> 00:29:24.046 A:middle
The property is available as

00:29:24.096 --> 00:29:25.446 A:middle
part of your framework's public

00:29:25.446 --> 00:29:27.526 A:middle
interface, but it's only

00:29:27.526 --> 00:29:29.656 A:middle
available to the inlinable code.

00:29:29.956 --> 00:29:31.476 A:middle
It's still protected from being

00:29:31.476 --> 00:29:33.736 A:middle
arbitrarily read or written by

00:29:33.736 --> 00:29:34.866 A:middle
outside clients.

00:29:35.426 --> 00:29:37.556 A:middle
So it's still internal, but

00:29:37.556 --> 00:29:38.556 A:middle
usable from inline.

00:29:39.876 --> 00:29:41.866 A:middle
And it's important to note that

00:29:41.866 --> 00:29:43.286 A:middle
this is a per declaration

00:29:43.286 --> 00:29:43.906 A:middle
decision.

00:29:44.486 --> 00:29:46.016 A:middle
The current cargo property here

00:29:46.016 --> 00:29:47.986 A:middle
that's also internal is not

00:29:47.986 --> 00:29:48.996 A:middle
included in the Module

00:29:48.996 --> 00:29:49.476 A:middle
Interface.

00:29:51.936 --> 00:29:54.336 A:middle
So, okay, we have the body of

00:29:54.336 --> 00:29:55.726 A:middle
the canCarry method in the

00:29:55.726 --> 00:29:56.676 A:middle
Module Interface.

00:29:57.366 --> 00:29:59.046 A:middle
And when a client is compiling

00:29:59.046 --> 00:30:00.746 A:middle
against that interface, they'll

00:29:59.046 --> 00:30:00.746 A:middle
against that interface, they'll

00:30:00.746 --> 00:30:02.146 A:middle
be able to copy that body

00:30:02.296 --> 00:30:03.916 A:middle
directly into their own code,

00:30:04.326 --> 00:30:05.896 A:middle
and possibly optimize it even

00:30:05.966 --> 00:30:07.486 A:middle
further if they know something

00:30:07.486 --> 00:30:08.676 A:middle
about the cargo that's being

00:30:09.706 --> 00:30:09.826 A:middle
checked.

00:30:10.376 --> 00:30:12.046 A:middle
But what happens if the

00:30:12.046 --> 00:30:14.126 A:middle
framework owner changes the body

00:30:14.126 --> 00:30:15.926 A:middle
of the method, and the clients

00:30:15.986 --> 00:30:17.136 A:middle
aren't recompiled?

00:30:17.826 --> 00:30:21.466 A:middle
For example, what if there's a

00:30:21.466 --> 00:30:22.756 A:middle
new rule that says that

00:30:22.756 --> 00:30:24.116 A:middle
CargoShips are not allowed to

00:30:24.116 --> 00:30:25.686 A:middle
carry Radioactive cargo?

00:30:26.936 --> 00:30:28.556 A:middle
Well, in this case, we're going

00:30:28.556 --> 00:30:29.476 A:middle
to run into trouble.

00:30:29.906 --> 00:30:31.266 A:middle
Because now two different parts

00:30:31.266 --> 00:30:32.516 A:middle
of the program have different

00:30:32.516 --> 00:30:34.216 A:middle
ideas about what this method is

00:30:34.216 --> 00:30:34.976 A:middle
supposed to do.

00:30:35.946 --> 00:30:37.296 A:middle
And on some inputs, they're

00:30:37.296 --> 00:30:39.766 A:middle
still going to agree, for some

00:30:39.766 --> 00:30:42.196 A:middle
regular cargo, both the client

00:30:42.976 --> 00:30:46.166 A:middle
and the framework will say that

00:30:46.706 --> 00:30:47.076 A:middle
it's okay.

00:30:47.076 --> 00:30:48.196 A:middle
But if we try to test

00:30:48.196 --> 00:30:50.616 A:middle
Radioactive cargo, then the

00:30:50.616 --> 00:30:52.426 A:middle
client code will say that it's

00:30:52.426 --> 00:30:54.336 A:middle
okay, because that's what it saw

00:30:54.336 --> 00:30:55.566 A:middle
in the Module Interface when it

00:30:55.566 --> 00:30:56.326 A:middle
was compiled.

00:30:57.376 --> 00:30:58.846 A:middle
While the framework has the new

00:30:58.846 --> 00:31:00.706 A:middle
version of the method, and will

00:30:58.846 --> 00:31:00.706 A:middle
version of the method, and will

00:31:00.706 --> 00:31:01.556 A:middle
disallow it.

00:31:02.216 --> 00:31:03.946 A:middle
This could indicate a serious

00:31:03.946 --> 00:31:05.456 A:middle
logic error in the program.

00:31:06.526 --> 00:31:08.566 A:middle
So, as a rule of thumb, if

00:31:08.566 --> 00:31:09.646 A:middle
you're a framework author who

00:31:09.646 --> 00:31:11.116 A:middle
has made a function inlinable,

00:31:11.666 --> 00:31:13.236 A:middle
make sure not to change the

00:31:13.236 --> 00:31:14.976 A:middle
output or observable behavior.

00:31:16.176 --> 00:31:17.606 A:middle
It's okay to add a better

00:31:17.606 --> 00:31:19.966 A:middle
algorithm, or some additional

00:31:20.036 --> 00:31:21.866 A:middle
fast pads, but if you change the

00:31:21.866 --> 00:31:23.166 A:middle
observable behavior of the

00:31:23.166 --> 00:31:25.286 A:middle
function, then you could end up

00:31:25.286 --> 00:31:26.256 A:middle
with these really subtle

00:31:26.256 --> 00:31:27.836 A:middle
problems that are only visible

00:31:27.836 --> 00:31:29.776 A:middle
at runtime, and possibly only

00:31:29.776 --> 00:31:30.796 A:middle
under certain inputs.

00:31:31.096 --> 00:31:32.556 A:middle
If you need to do this, all your

00:31:32.556 --> 00:31:34.096 A:middle
clients need to recompile.

00:31:34.686 --> 00:31:39.046 A:middle
So next I want to talk about

00:31:39.046 --> 00:31:39.836 A:middle
enums.

00:31:40.946 --> 00:31:42.756 A:middle
Swift enums are great.

00:31:43.006 --> 00:31:43.756 A:middle
I love them.

00:31:44.556 --> 00:31:45.496 A:middle
And one thing that we talked

00:31:45.496 --> 00:31:47.036 A:middle
about here is that you can add

00:31:47.036 --> 00:31:48.946 A:middle
new cases to an enum without

00:31:48.976 --> 00:31:50.236 A:middle
breaking source or binary

00:31:50.236 --> 00:31:51.096 A:middle
compatibility.

00:31:51.946 --> 00:31:53.796 A:middle
What this means for clients is

00:31:53.796 --> 00:31:54.996 A:middle
that they always have to have a

00:31:54.996 --> 00:31:56.816 A:middle
default case when they switch

00:31:56.816 --> 00:31:57.566 A:middle
over the enum.

00:31:58.346 --> 00:31:59.976 A:middle
And in this client, they've

00:31:59.976 --> 00:32:01.536 A:middle
decided to use the unknown

00:31:59.976 --> 00:32:01.536 A:middle
decided to use the unknown

00:32:01.536 --> 00:32:03.276 A:middle
default syntax that was also

00:32:03.276 --> 00:32:06.276 A:middle
introduced in Swift 4.2.

00:32:06.516 --> 00:32:08.466 A:middle
What this means is that they've

00:32:08.466 --> 00:32:10.766 A:middle
handled all the known cases in

00:32:10.766 --> 00:32:13.506 A:middle
the enum but will still handle

00:32:13.506 --> 00:32:15.146 A:middle
any future cases that are added,

00:32:15.616 --> 00:32:16.906 A:middle
and this is necessary when

00:32:16.906 --> 00:32:19.896 A:middle
switching over C enums, and also

00:32:19.896 --> 00:32:22.166 A:middle
enums built in binary

00:32:22.166 --> 00:32:22.906 A:middle
frameworks.

00:32:23.456 --> 00:32:26.346 A:middle
The other effect that this has

00:32:26.576 --> 00:32:28.026 A:middle
is what I talked about earlier,

00:32:28.376 --> 00:32:30.026 A:middle
this sort of handshake between

00:32:30.026 --> 00:32:31.286 A:middle
the client and the framework,

00:32:31.586 --> 00:32:33.446 A:middle
about how big the enum is, and

00:32:33.446 --> 00:32:34.866 A:middle
whether it needs any cleanup.

00:32:35.306 --> 00:32:37.826 A:middle
But the example I've picked here

00:32:37.826 --> 00:32:38.946 A:middle
is a Flight Plan.

00:32:39.746 --> 00:32:41.666 A:middle
You can really only have one-way

00:32:41.666 --> 00:32:43.446 A:middle
flights, or round-trip flights.

00:32:44.826 --> 00:32:46.666 A:middle
So by marking this enum with the

00:32:46.666 --> 00:32:49.336 A:middle
frozen attribute, then I as the

00:32:49.336 --> 00:32:50.786 A:middle
framework author can promise

00:32:51.906 --> 00:32:53.286 A:middle
that there are no new cases

00:32:53.286 --> 00:32:55.146 A:middle
added in future releases of the

00:32:55.146 --> 00:32:55.526 A:middle
framework.

00:32:56.956 --> 00:32:58.796 A:middle
The first effect of this is that

00:32:58.796 --> 00:33:00.436 A:middle
clients no longer have to write

00:32:58.796 --> 00:33:00.436 A:middle
clients no longer have to write

00:33:00.436 --> 00:33:01.406 A:middle
that default case.

00:33:01.596 --> 00:33:02.686 A:middle
It can just go away.

00:33:04.276 --> 00:33:07.316 A:middle
And next, the compiler is able

00:33:07.316 --> 00:33:09.226 A:middle
to compile it more efficiently.

00:33:09.946 --> 00:33:12.476 A:middle
The clients are able to assume

00:33:12.976 --> 00:33:14.266 A:middle
that this enum won't have any

00:33:14.266 --> 00:33:16.236 A:middle
additional cases and won't

00:33:16.236 --> 00:33:17.436 A:middle
require any cleanup.

00:33:18.756 --> 00:33:19.486 A:middle
So that's great.

00:33:21.096 --> 00:33:22.346 A:middle
Except I forgot something.

00:33:22.996 --> 00:33:24.416 A:middle
There is another kind of Flight

00:33:24.486 --> 00:33:24.786 A:middle
Plan.

00:33:24.786 --> 00:33:26.026 A:middle
A multiHop flight.

00:33:27.186 --> 00:33:28.246 A:middle
And now we're in trouble,

00:33:28.746 --> 00:33:30.546 A:middle
because that client code no

00:33:30.546 --> 00:33:32.956 A:middle
longer has a default case, so

00:33:32.956 --> 00:33:35.206 A:middle
adding a new case to a frozen

00:33:35.206 --> 00:33:37.946 A:middle
enum is both source and binary

00:33:37.946 --> 00:33:39.476 A:middle
breaking and requires

00:33:39.476 --> 00:33:41.006 A:middle
incrementing the Major Version

00:33:41.326 --> 00:33:42.706 A:middle
and asking all clients to

00:33:42.706 --> 00:33:43.366 A:middle
recompile.

00:33:43.986 --> 00:33:48.296 A:middle
Now, after frozen enums, frozen

00:33:48.296 --> 00:33:49.946 A:middle
structs are much the same.

00:33:50.516 --> 00:33:52.886 A:middle
By default, a Struct in a binary

00:33:52.886 --> 00:33:54.646 A:middle
framework can have new stored

00:33:54.646 --> 00:33:55.756 A:middle
properties added, or the

00:33:55.756 --> 00:33:57.686 A:middle
existing ones reordered without

00:33:57.686 --> 00:33:59.856 A:middle
any trouble, but that does

00:33:59.916 --> 00:34:01.716 A:middle
result in that same sort of

00:33:59.916 --> 00:34:01.716 A:middle
result in that same sort of

00:34:02.096 --> 00:34:03.066 A:middle
handshake and extra

00:34:03.066 --> 00:34:04.856 A:middle
communication between the client

00:34:05.136 --> 00:34:06.036 A:middle
and the framework.

00:34:06.746 --> 00:34:10.485 A:middle
So, in order to avoid this, for

00:34:10.485 --> 00:34:12.386 A:middle
structs that are known to have a

00:34:12.386 --> 00:34:14.956 A:middle
frozen layout, the frozen

00:34:14.956 --> 00:34:16.926 A:middle
attribute can be used to promise

00:34:17.216 --> 00:34:18.525 A:middle
that the stored properties will

00:34:18.525 --> 00:34:19.306 A:middle
not change.

00:34:19.616 --> 00:34:20.936 A:middle
They will not be added, or

00:34:20.936 --> 00:34:22.166 A:middle
reordered, or removed.

00:34:22.835 --> 00:34:25.596 A:middle
And the other thing that this

00:34:25.656 --> 00:34:27.726 A:middle
does is require that the stored

00:34:27.726 --> 00:34:30.126 A:middle
properties all have types that

00:34:30.126 --> 00:34:31.866 A:middle
are public, or usable from

00:34:31.866 --> 00:34:32.315 A:middle
inline.

00:34:32.876 --> 00:34:34.255 A:middle
Because remember what the goal

00:34:34.255 --> 00:34:34.775 A:middle
is here.

00:34:35.156 --> 00:34:37.146 A:middle
We want the compiler when it's

00:34:37.146 --> 00:34:39.505 A:middle
working with client code, to be

00:34:39.505 --> 00:34:40.846 A:middle
able to manipulate the stored

00:34:40.846 --> 00:34:42.045 A:middle
properties of this struct

00:34:42.045 --> 00:34:43.616 A:middle
directly, so that it can

00:34:43.616 --> 00:34:45.396 A:middle
generate more efficient code on

00:34:45.396 --> 00:34:46.926 A:middle
the client side.

00:34:47.815 --> 00:34:49.966 A:middle
This also has a semantic effect,

00:34:50.386 --> 00:34:51.416 A:middle
which is that the framework

00:34:51.416 --> 00:34:53.156 A:middle
author can now write inlinable

00:34:53.156 --> 00:34:53.936 A:middle
initializers.

00:34:54.525 --> 00:34:55.996 A:middle
An initializer is already

00:34:55.996 --> 00:34:57.836 A:middle
required to set up all of the

00:34:57.836 --> 00:34:59.256 A:middle
stored properties in the struct,

00:34:59.826 --> 00:35:01.866 A:middle
but now the compiler can be sure

00:34:59.826 --> 00:35:01.866 A:middle
but now the compiler can be sure

00:35:02.066 --> 00:35:03.726 A:middle
that it will also do so in

00:35:03.726 --> 00:35:04.816 A:middle
future versions of the

00:35:04.816 --> 00:35:05.236 A:middle
framework.

00:35:05.326 --> 00:35:09.196 A:middle
Now, I want to close up this

00:35:09.196 --> 00:35:11.156 A:middle
section by reminding you that

00:35:11.156 --> 00:35:13.036 A:middle
flexibility is the default for

00:35:13.036 --> 00:35:13.736 A:middle
reasons.

00:35:14.536 --> 00:35:15.896 A:middle
And the main one of these is

00:35:15.896 --> 00:35:17.656 A:middle
that breaking changes are really

00:35:17.656 --> 00:35:19.226 A:middle
inconvenient for their clients.

00:35:20.136 --> 00:35:21.926 A:middle
A client is going to have-- make

00:35:21.926 --> 00:35:23.516 A:middle
a second guess over whether or

00:35:23.516 --> 00:35:25.026 A:middle
not to take the new version of

00:35:25.026 --> 00:35:26.606 A:middle
your framework, because it might

00:35:26.606 --> 00:35:27.686 A:middle
break them in some way.

00:35:28.366 --> 00:35:29.446 A:middle
And you could also get into

00:35:29.446 --> 00:35:31.316 A:middle
trouble when you have one binary

00:35:31.316 --> 00:35:32.706 A:middle
framework depending on another.

00:35:34.136 --> 00:35:35.666 A:middle
It's also worth the reminder

00:35:36.836 --> 00:35:38.076 A:middle
that these attributes only

00:35:38.106 --> 00:35:39.286 A:middle
affect client code.

00:35:39.696 --> 00:35:41.196 A:middle
Within your framework, you still

00:35:41.196 --> 00:35:42.686 A:middle
get the full power of the

00:35:42.686 --> 00:35:44.186 A:middle
compiler optimizations.

00:35:45.586 --> 00:35:47.856 A:middle
So, before reaching for frozen

00:35:47.856 --> 00:35:49.716 A:middle
or inlinable, make sure that you

00:35:49.716 --> 00:35:51.156 A:middle
have profiled the behavior of

00:35:51.156 --> 00:35:52.826 A:middle
your framework form the outside,

00:35:53.256 --> 00:35:54.636 A:middle
and demonstrated that you have a

00:35:54.636 --> 00:35:56.216 A:middle
need for additional performance.

00:35:56.796 --> 00:35:58.936 A:middle
Otherwise, keep that flexibility

00:35:58.936 --> 00:36:00.546 A:middle
because you may need it.

00:35:58.936 --> 00:36:00.546 A:middle
because you may need it.

00:36:02.696 --> 00:36:04.106 A:middle
Now, the last section I want to

00:36:04.106 --> 00:36:05.836 A:middle
talk about is making sure that

00:36:05.836 --> 00:36:07.606 A:middle
your client's experience is the

00:36:07.606 --> 00:36:08.516 A:middle
best it can be.

00:36:09.266 --> 00:36:11.086 A:middle
And this is going to mirror

00:36:11.086 --> 00:36:12.826 A:middle
Harlan's section a lot from the

00:36:12.826 --> 00:36:13.916 A:middle
first half of the talk.

00:36:14.496 --> 00:36:15.976 A:middle
And so we'll start off with

00:36:15.976 --> 00:36:16.726 A:middle
Entitlements.

00:36:17.636 --> 00:36:19.036 A:middle
If your framework has certain

00:36:19.036 --> 00:36:20.276 A:middle
Entitlements that it needs to

00:36:20.276 --> 00:36:22.316 A:middle
get its job done, well, let's

00:36:22.316 --> 00:36:23.216 A:middle
start with the basics.

00:36:23.456 --> 00:36:24.636 A:middle
Make sure that you document

00:36:24.636 --> 00:36:26.226 A:middle
them, so that any potential

00:36:26.226 --> 00:36:28.146 A:middle
client knows what it needs to do

00:36:28.456 --> 00:36:29.676 A:middle
to successfully adopt your

00:36:29.676 --> 00:36:30.096 A:middle
framework.

00:36:30.606 --> 00:36:34.536 A:middle
And furthermore, try to minimize

00:36:34.536 --> 00:36:36.246 A:middle
the entitlement requests of your

00:36:36.246 --> 00:36:38.486 A:middle
particular framework, because

00:36:38.486 --> 00:36:39.676 A:middle
that means that it will be

00:36:39.676 --> 00:36:41.676 A:middle
applicable in more contexts.

00:36:42.126 --> 00:36:43.816 A:middle
And you can get more clients

00:36:44.086 --> 00:36:45.056 A:middle
using your framework.

00:36:45.516 --> 00:36:49.636 A:middle
And finally, keep in mind that

00:36:49.636 --> 00:36:51.486 A:middle
while both the framework and the

00:36:51.486 --> 00:36:53.036 A:middle
application can request

00:36:53.096 --> 00:36:54.656 A:middle
permissions from the user, it's

00:36:54.726 --> 00:36:56.686 A:middle
ultimately the user's choice

00:36:57.286 --> 00:36:58.446 A:middle
whether or not to grant them.

00:36:59.606 --> 00:37:00.976 A:middle
So if you get denied a

00:36:59.606 --> 00:37:00.976 A:middle
So if you get denied a

00:37:00.976 --> 00:37:02.746 A:middle
particular permission, make sure

00:37:02.746 --> 00:37:04.016 A:middle
your framework handles that

00:37:04.016 --> 00:37:05.026 A:middle
denial gracefully.

00:37:05.316 --> 00:37:07.026 A:middle
It should not crash the app, it

00:37:07.026 --> 00:37:08.156 A:middle
should not stop working.

00:37:08.646 --> 00:37:09.716 A:middle
Make sure it still does

00:37:09.756 --> 00:37:11.456 A:middle
something useful so that your

00:37:11.456 --> 00:37:12.916 A:middle
clients can use the framework

00:37:13.236 --> 00:37:15.166 A:middle
without having to give up.

00:37:16.996 --> 00:37:19.186 A:middle
Now, Dependencies have a lot of

00:37:19.186 --> 00:37:20.416 A:middle
the same concerns as

00:37:20.416 --> 00:37:21.176 A:middle
Entitlements.

00:37:21.926 --> 00:37:23.506 A:middle
Because like Entitlements, your

00:37:23.506 --> 00:37:25.416 A:middle
framework's Dependencies become

00:37:25.416 --> 00:37:26.986 A:middle
the application's Dependencies.

00:37:27.986 --> 00:37:30.136 A:middle
And so again, you should start

00:37:30.136 --> 00:37:31.906 A:middle
off by documenting them, so that

00:37:31.906 --> 00:37:33.816 A:middle
a potential client knows what

00:37:33.816 --> 00:37:34.826 A:middle
they are signing up for.

00:37:35.486 --> 00:37:36.776 A:middle
And you should minimize your

00:37:36.776 --> 00:37:38.156 A:middle
Dependencies, so that you're

00:37:38.156 --> 00:37:39.796 A:middle
asking less of your clients.

00:37:40.106 --> 00:37:42.036 A:middle
Less in extending trust, and

00:37:42.036 --> 00:37:43.986 A:middle
even practical matters like the

00:37:43.986 --> 00:37:45.696 A:middle
code size taken up by your

00:37:45.696 --> 00:37:46.346 A:middle
Dependencies.

00:37:48.006 --> 00:37:50.046 A:middle
And finally, all of your

00:37:50.046 --> 00:37:51.876 A:middle
Dependencies do have to be built

00:37:52.106 --> 00:37:53.216 A:middle
with the Build Libraries for

00:37:53.216 --> 00:37:55.096 A:middle
Distribution build setting in

00:37:55.096 --> 00:37:56.416 A:middle
order to get that binary

00:37:56.416 --> 00:37:58.516 A:middle
compatibility guarantee that we

00:37:58.516 --> 00:37:59.926 A:middle
talked about.

00:38:00.476 --> 00:38:02.096 A:middle
This does have a particular

00:38:02.096 --> 00:38:04.156 A:middle
implication that binary

00:38:04.156 --> 00:38:05.806 A:middle
frameworks cannot depend on

00:38:05.806 --> 00:38:06.436 A:middle
Packages.

00:38:07.446 --> 00:38:08.456 A:middle
Let's look at a Dependency

00:38:08.456 --> 00:38:08.936 A:middle
graph.

00:38:10.366 --> 00:38:11.946 A:middle
I said just a few minutes ago

00:38:12.276 --> 00:38:13.396 A:middle
that the Dependencies of the

00:38:13.396 --> 00:38:14.706 A:middle
framework become the

00:38:14.706 --> 00:38:15.746 A:middle
Dependencies of the app.

00:38:15.976 --> 00:38:18.326 A:middle
But when an app builds a

00:38:18.326 --> 00:38:19.926 A:middle
package, it has to pick a

00:38:19.926 --> 00:38:21.586 A:middle
particular tag to do so.

00:38:22.416 --> 00:38:23.496 A:middle
And that may not match the

00:38:23.496 --> 00:38:25.096 A:middle
version that your framework was

00:38:25.096 --> 00:38:25.746 A:middle
built against.

00:38:26.076 --> 00:38:27.686 A:middle
It may not be compatible at all.

00:38:28.596 --> 00:38:30.806 A:middle
And beyond that, not all

00:38:30.806 --> 00:38:32.666 A:middle
frameworks can necessarily be

00:38:32.666 --> 00:38:34.036 A:middle
built in a mode that is

00:38:34.036 --> 00:38:35.526 A:middle
compatible with Build Libraries

00:38:35.526 --> 00:38:36.406 A:middle
for Distribution.

00:38:37.246 --> 00:38:39.136 A:middle
So this configuration is not

00:38:39.136 --> 00:38:39.626 A:middle
supported.

00:38:39.626 --> 00:38:42.776 A:middle
Now, the last thing I want to

00:38:42.776 --> 00:38:44.636 A:middle
talk about is your Objective-C

00:38:44.636 --> 00:38:45.216 A:middle
Interface.

00:38:45.986 --> 00:38:47.546 A:middle
Yes, you, Swift framework

00:38:47.546 --> 00:38:49.416 A:middle
authors, you have an Objective-C

00:38:49.416 --> 00:38:51.546 A:middle
Interface, most likely, because

00:38:51.546 --> 00:38:53.216 A:middle
Xcode's default template is set

00:38:53.216 --> 00:38:54.906 A:middle
up for a mixed source framework

00:38:55.096 --> 00:38:56.346 A:middle
that has both an Objective-C

00:38:56.346 --> 00:38:58.616 A:middle
Umbrella Header, and a generated

00:38:58.616 --> 00:38:59.486 A:middle
header containing the

00:38:59.486 --> 00:39:01.206 A:middle
Objective-C parts of the Swift

00:38:59.486 --> 00:39:01.206 A:middle
Objective-C parts of the Swift

00:39:01.206 --> 00:39:01.926 A:middle
in your framework.

00:39:02.566 --> 00:39:05.456 A:middle
But if your Swift code doesn't

00:39:05.456 --> 00:39:07.326 A:middle
have any Objective-C API that

00:39:07.566 --> 00:39:09.716 A:middle
it's trying to publish, well,

00:39:09.916 --> 00:39:11.216 A:middle
you don't need to install that

00:39:11.216 --> 00:39:12.116 A:middle
second header at all.

00:39:12.476 --> 00:39:14.066 A:middle
There's an Install Objective-C

00:39:14.066 --> 00:39:15.376 A:middle
Compatibility Header build

00:39:15.376 --> 00:39:17.156 A:middle
setting that you can just turn

00:39:17.156 --> 00:39:17.546 A:middle
off.

00:39:18.096 --> 00:39:20.686 A:middle
And if your framework doesn't

00:39:20.686 --> 00:39:23.386 A:middle
vend any Objective-C API, well

00:39:23.386 --> 00:39:24.216 A:middle
then there's no reason to

00:39:24.216 --> 00:39:25.866 A:middle
support this Objective-C Import

00:39:25.866 --> 00:39:27.596 A:middle
Syntax, and you can turn that

00:39:27.596 --> 00:39:29.186 A:middle
off as well, with the Defines

00:39:29.186 --> 00:39:30.186 A:middle
Module Build setting.

00:39:30.846 --> 00:39:32.666 A:middle
Set it to No, and that will no

00:39:32.666 --> 00:39:33.976 A:middle
longer be valid Objective-C

00:39:33.976 --> 00:39:34.306 A:middle
code.

00:39:35.386 --> 00:39:36.856 A:middle
Once you've done that, you can

00:39:36.856 --> 00:39:38.886 A:middle
delete the Umbrella Header that

00:39:38.886 --> 00:39:40.716 A:middle
Xcode generated for you.

00:39:42.376 --> 00:39:43.966 A:middle
So, let's wrap things up.

00:39:44.576 --> 00:39:45.756 A:middle
We talked about a lot of things

00:39:45.756 --> 00:39:48.116 A:middle
today, but the most important is

00:39:48.116 --> 00:39:49.046 A:middle
XCFrameworks.

00:39:49.376 --> 00:39:50.516 A:middle
They're the new Bundle format

00:39:50.516 --> 00:39:51.606 A:middle
for distributing multiple

00:39:51.606 --> 00:39:53.496 A:middle
framework variants in a way that

00:39:53.496 --> 00:39:54.906 A:middle
is super easy for your users to

00:39:54.906 --> 00:39:55.376 A:middle
use.

00:39:56.606 --> 00:39:57.506 A:middle
In order to build an

00:39:57.506 --> 00:39:58.996 A:middle
XCFramework, you'll need to turn

00:39:58.996 --> 00:40:00.076 A:middle
on the Build Libraries for

00:39:58.996 --> 00:40:00.076 A:middle
on the Build Libraries for

00:40:00.076 --> 00:40:01.176 A:middle
Distribution build setting,

00:40:01.476 --> 00:40:02.656 A:middle
which activates everything that

00:40:02.656 --> 00:40:04.896 A:middle
you need to get a proper binary

00:40:04.896 --> 00:40:05.886 A:middle
compatible framework.

00:40:06.426 --> 00:40:08.876 A:middle
And as framework owners, make

00:40:08.876 --> 00:40:09.676 A:middle
sure that you know the

00:40:09.676 --> 00:40:11.186 A:middle
responsibilities that you have

00:40:11.186 --> 00:40:12.676 A:middle
to your clients, so that you can

00:40:12.676 --> 00:40:14.826 A:middle
serve them the best.

00:40:14.996 --> 00:40:16.096 A:middle
Harlan and I will be down in the

00:40:16.096 --> 00:40:17.536 A:middle
Lab immediately after this

00:40:17.536 --> 00:40:19.376 A:middle
session, but for everyone who

00:40:19.376 --> 00:40:20.656 A:middle
came here, thank you very much,

00:40:20.716 --> 00:40:21.506 A:middle
and let's see some great

00:40:21.506 --> 00:40:21.966 A:middle
frameworks.

00:40:22.516 --> 00:40:25.500 A:middle
[ Applause and Cheering ]
