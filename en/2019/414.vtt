WEBVTT

00:00:01.516 --> 00:00:05.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:14.546 A:middle
[ Applause ]

00:00:15.046 --> 00:00:16.276 A:middle
&gt;&gt; Good afternoon and welcome to

00:00:16.276 --> 00:00:17.536 A:middle
our session on Developing a

00:00:17.536 --> 00:00:18.886 A:middle
Great Profiling Experience.

00:00:19.316 --> 00:00:20.406 A:middle
I'm Daniel Delwood and I'll be

00:00:20.406 --> 00:00:21.656 A:middle
joined by Kasper Harasim

00:00:21.656 --> 00:00:22.116 A:middle
[phonetic].

00:00:22.116 --> 00:00:23.036 A:middle
And today we're here to talk

00:00:23.036 --> 00:00:24.286 A:middle
about making great Custom

00:00:24.286 --> 00:00:25.186 A:middle
Instruments packages.

00:00:26.546 --> 00:00:28.256 A:middle
Now as developers, we all strive

00:00:28.256 --> 00:00:29.366 A:middle
to create excellent,

00:00:29.536 --> 00:00:31.026 A:middle
maintainable, modular and

00:00:31.026 --> 00:00:31.666 A:middle
reusable code.

00:00:32.156 --> 00:00:33.106 A:middle
And we've all used frameworks

00:00:33.166 --> 00:00:34.766 A:middle
designed by others and created

00:00:34.766 --> 00:00:35.786 A:middle
code that we want others to be

00:00:35.786 --> 00:00:36.786 A:middle
able to use well.

00:00:38.016 --> 00:00:39.436 A:middle
And good API design and

00:00:39.436 --> 00:00:40.966 A:middle
documentation are critical to

00:00:40.966 --> 00:00:42.646 A:middle
the user's experience with your

00:00:42.646 --> 00:00:43.136 A:middle
framework.

00:00:43.596 --> 00:00:45.066 A:middle
But my hope is today that you

00:00:45.066 --> 00:00:46.036 A:middle
consider developing an

00:00:46.036 --> 00:00:47.196 A:middle
Instruments package as well.

00:00:48.226 --> 00:00:50.276 A:middle
To see why, take Metal as an

00:00:50.276 --> 00:00:50.996 A:middle
example.

00:00:51.376 --> 00:00:53.106 A:middle
API design is central and the

00:00:53.106 --> 00:00:54.446 A:middle
calls are organized around a set

00:00:54.446 --> 00:00:56.426 A:middle
of core concepts, devices,

00:00:56.476 --> 00:00:57.876 A:middle
command buffers, textures and

00:00:57.876 --> 00:00:58.116 A:middle
more.

00:00:58.136 --> 00:01:00.326 A:middle
But that's not the whole story.

00:00:58.136 --> 00:01:00.326 A:middle
But that's not the whole story.

00:01:00.906 --> 00:01:02.356 A:middle
An API surface expresses what's

00:01:02.426 --> 00:01:04.385 A:middle
possible, but documentation and

00:01:04.385 --> 00:01:06.436 A:middle
example code are how others

00:01:06.436 --> 00:01:08.116 A:middle
learn to compose these concepts

00:01:08.176 --> 00:01:08.906 A:middle
into a great app.

00:01:09.516 --> 00:01:10.946 A:middle
But that's not the whole story

00:01:10.946 --> 00:01:11.256 A:middle
either.

00:01:12.046 --> 00:01:13.006 A:middle
Both of the first two help

00:01:13.006 --> 00:01:14.836 A:middle
developers write code using your

00:01:14.916 --> 00:01:15.876 A:middle
classes or framework.

00:01:15.976 --> 00:01:17.546 A:middle
But what happens when something

00:01:17.546 --> 00:01:17.996 A:middle
goes wrong?

00:01:18.726 --> 00:01:20.326 A:middle
Well, custom Instruments are a

00:01:20.326 --> 00:01:22.246 A:middle
way for you as the author to

00:01:22.246 --> 00:01:23.316 A:middle
teach others how to debug,

00:01:23.766 --> 00:01:25.426 A:middle
optimize and really get the most

00:01:25.426 --> 00:01:26.346 A:middle
out of your APIs.

00:01:26.856 --> 00:01:28.096 A:middle
If you've used the Metal System

00:01:28.096 --> 00:01:29.266 A:middle
Trace template in Instruments,

00:01:29.686 --> 00:01:30.536 A:middle
then you've seen some of what's

00:01:30.606 --> 00:01:31.126 A:middle
possible.

00:01:31.406 --> 00:01:33.186 A:middle
Creating visual tools designed

00:01:33.216 --> 00:01:34.836 A:middle
specifically for the concepts

00:01:34.836 --> 00:01:36.396 A:middle
and APIs that you define.

00:01:36.646 --> 00:01:39.216 A:middle
An Instruments package is a way

00:01:39.216 --> 00:01:40.786 A:middle
for you to build transparency

00:01:41.196 --> 00:01:42.416 A:middle
that under the hood your

00:01:42.416 --> 00:01:43.496 A:middle
framework is tested,

00:01:43.626 --> 00:01:44.446 A:middle
understandable and

00:01:44.446 --> 00:01:45.066 A:middle
well-supported.

00:01:45.516 --> 00:01:46.626 A:middle
And investing that time to

00:01:46.706 --> 00:01:48.156 A:middle
create a custom instrument helps

00:01:48.256 --> 00:01:50.216 A:middle
create confidence and trust that

00:01:50.216 --> 00:01:51.676 A:middle
the code's doing exactly what

00:01:51.676 --> 00:01:52.216 A:middle
you expect.

00:01:53.396 --> 00:01:54.886 A:middle
Tools are also a great way to

00:01:54.886 --> 00:01:56.596 A:middle
develop a cost model to know

00:01:56.596 --> 00:01:58.006 A:middle
which calls are expensive and

00:01:58.006 --> 00:01:58.896 A:middle
which are inexpensive.

00:01:59.466 --> 00:02:00.426 A:middle
And when there's a performance

00:01:59.466 --> 00:02:00.426 A:middle
And when there's a performance

00:02:00.426 --> 00:02:01.866 A:middle
problem, they're the best way to

00:02:01.866 --> 00:02:02.996 A:middle
differentiate between a

00:02:02.996 --> 00:02:04.496 A:middle
framework bug or a bug in the

00:02:04.496 --> 00:02:06.386 A:middle
client code.

00:02:06.686 --> 00:02:08.506 A:middle
Most importantly though, an

00:02:08.506 --> 00:02:10.265 A:middle
instrument is an opportunity for

00:02:10.265 --> 00:02:11.596 A:middle
you to tell your story.

00:02:11.596 --> 00:02:14.106 A:middle
An Instruments package is your

00:02:14.106 --> 00:02:15.246 A:middle
chance to explain what's going

00:02:15.246 --> 00:02:17.206 A:middle
on to help visualize important

00:02:17.206 --> 00:02:18.786 A:middle
metrics and help users quickly

00:02:18.786 --> 00:02:20.086 A:middle
find problems when they arise.

00:02:20.966 --> 00:02:23.026 A:middle
So today, we're going to cover

00:02:23.026 --> 00:02:23.696 A:middle
how to build great

00:02:23.696 --> 00:02:24.946 A:middle
instrumentation from the inside

00:02:24.946 --> 00:02:26.266 A:middle
out, starting from the inside

00:02:26.266 --> 00:02:27.946 A:middle
out of developing great trace

00:02:27.996 --> 00:02:29.066 A:middle
points in your framework, and

00:02:29.376 --> 00:02:30.396 A:middle
then building on them with

00:02:30.396 --> 00:02:32.446 A:middle
schemas, modeling and structure

00:02:32.746 --> 00:02:34.356 A:middle
inside Instruments before

00:02:34.356 --> 00:02:35.426 A:middle
finally moving on to talking

00:02:35.426 --> 00:02:36.846 A:middle
about visualization and the

00:02:36.846 --> 00:02:37.466 A:middle
instrument's UI.

00:02:38.266 --> 00:02:40.486 A:middle
So with tracing, modeling and

00:02:40.486 --> 00:02:41.896 A:middle
visualization as our roadmap for

00:02:41.896 --> 00:02:44.426 A:middle
today, let's dive right in and

00:02:44.426 --> 00:02:46.266 A:middle
talk about OSSignpost.

00:02:47.896 --> 00:02:49.746 A:middle
Now OSSignpost is a low-cost

00:02:49.746 --> 00:02:51.076 A:middle
tracing primitive introduced in

00:02:51.076 --> 00:02:52.086 A:middle
2018.

00:02:52.486 --> 00:02:53.856 A:middle
And signposts come in two

00:02:53.856 --> 00:02:55.466 A:middle
different kinds: .events and

00:02:55.466 --> 00:02:56.016 A:middle
intervals.

00:02:56.786 --> 00:02:58.176 A:middle
Now they support recording any

00:02:58.176 --> 00:02:59.356 A:middle
kind of data through their

00:02:59.416 --> 00:03:01.326 A:middle
printf like formatString in

00:02:59.416 --> 00:03:01.326 A:middle
printf like formatString in

00:03:01.326 --> 00:03:01.896 A:middle
arguments.

00:03:02.356 --> 00:03:03.646 A:middle
And different from printf, all

00:03:03.646 --> 00:03:05.496 A:middle
signposts are named with a

00:03:05.496 --> 00:03:06.106 A:middle
static string.

00:03:07.926 --> 00:03:09.816 A:middle
Now in Swift, OSSignpost is just

00:03:09.816 --> 00:03:11.036 A:middle
one core API with three

00:03:11.036 --> 00:03:13.256 A:middle
different types: begin, end and

00:03:13.256 --> 00:03:13.446 A:middle
event.

00:03:13.446 --> 00:03:15.936 A:middle
And in C, their interface is

00:03:15.936 --> 00:03:17.416 A:middle
exposed through three helpful

00:03:17.416 --> 00:03:17.956 A:middle
macros.

00:03:19.076 --> 00:03:20.646 A:middle
Now it's important to note that

00:03:20.646 --> 00:03:22.826 A:middle
OSSignpost is built on OSLog

00:03:23.386 --> 00:03:24.206 A:middle
which means that much of the

00:03:24.206 --> 00:03:25.106 A:middle
tracing behavior and

00:03:25.106 --> 00:03:27.356 A:middle
configurability is determined by

00:03:27.356 --> 00:03:28.406 A:middle
the provided log handle.

00:03:29.436 --> 00:03:30.816 A:middle
Now log handles are effectively

00:03:30.816 --> 00:03:32.136 A:middle
named spaces for your tracing.

00:03:32.676 --> 00:03:34.196 A:middle
They allow you to specify

00:03:34.296 --> 00:03:36.566 A:middle
subsystem and category and

00:03:36.566 --> 00:03:39.136 A:middle
together with that static name

00:03:39.136 --> 00:03:41.006 A:middle
for each signpost, this provides

00:03:41.046 --> 00:03:42.296 A:middle
the logical structure and

00:03:42.296 --> 00:03:43.836 A:middle
hierarchy for your trace points.

00:03:46.046 --> 00:03:47.036 A:middle
Now custom Instruments are built

00:03:47.036 --> 00:03:48.546 A:middle
on OSSignpost for two main

00:03:48.546 --> 00:03:48.946 A:middle
reasons.

00:03:49.656 --> 00:03:51.026 A:middle
First, they're temporal.

00:03:52.076 --> 00:03:54.016 A:middle
All signposts, whether .events

00:03:54.016 --> 00:03:56.206 A:middle
or intervals, implicitly record

00:03:56.206 --> 00:03:57.756 A:middle
a high-accuracy timestamp.

00:03:59.816 --> 00:04:00.776 A:middle
It's also important to have

00:03:59.816 --> 00:04:00.776 A:middle
It's also important to have

00:04:00.856 --> 00:04:02.056 A:middle
first class support for

00:04:02.056 --> 00:04:03.396 A:middle
overlapping intervals in our

00:04:03.466 --> 00:04:04.556 A:middle
highly-concurrent world.

00:04:04.786 --> 00:04:06.636 A:middle
And OSSignpost does this with

00:04:06.636 --> 00:04:07.526 A:middle
Signpost IDs.

00:04:08.266 --> 00:04:10.816 A:middle
These record enough context for

00:04:10.816 --> 00:04:12.186 A:middle
matching up the related events,

00:04:12.476 --> 00:04:14.016 A:middle
even when the begin or end event

00:04:14.076 --> 00:04:15.836 A:middle
happen on different threads or

00:04:15.836 --> 00:04:16.745 A:middle
different dispatch queues.

00:04:17.366 --> 00:04:19.406 A:middle
Now the second reason for

00:04:19.406 --> 00:04:20.906 A:middle
OSSignpost is that they're

00:04:20.906 --> 00:04:21.606 A:middle
low-cost.

00:04:22.236 --> 00:04:23.726 A:middle
The logging mechanism is

00:04:23.726 --> 00:04:25.096 A:middle
designed with efficiency in mind

00:04:25.576 --> 00:04:27.446 A:middle
and it records a minimal amount

00:04:27.446 --> 00:04:28.636 A:middle
of data whenever you admit an

00:04:28.636 --> 00:04:29.516 A:middle
OSSignpost.

00:04:30.236 --> 00:04:31.586 A:middle
Now there are optimizations

00:04:31.586 --> 00:04:33.766 A:middle
around static strings, so things

00:04:33.766 --> 00:04:35.016 A:middle
like your format string and your

00:04:35.016 --> 00:04:37.076 A:middle
signpost name are actually

00:04:37.076 --> 00:04:38.906 A:middle
emitted as just an offset into

00:04:38.906 --> 00:04:40.066 A:middle
your binary text segment.

00:04:40.776 --> 00:04:41.826 A:middle
Now in fact the overhead of

00:04:41.826 --> 00:04:44.716 A:middle
OSSignpost is low enough that in

00:04:44.716 --> 00:04:46.486 A:middle
most cases you can leave them in

00:04:46.486 --> 00:04:47.406 A:middle
production code.

00:04:47.886 --> 00:04:49.056 A:middle
So this is what makes them

00:04:49.056 --> 00:04:50.966 A:middle
useful for building tools that

00:04:50.966 --> 00:04:52.726 A:middle
debug optimized code in addition

00:04:52.726 --> 00:04:54.146 A:middle
to helping you solve problems at

00:04:54.146 --> 00:04:55.546 A:middle
your desk.

00:04:56.136 --> 00:04:57.136 A:middle
Now when Instruments record

00:04:57.136 --> 00:04:58.666 A:middle
signpost data, you'll get access

00:04:58.696 --> 00:05:00.766 A:middle
to all the explicitly specified

00:04:58.696 --> 00:05:00.766 A:middle
to all the explicitly specified

00:05:00.866 --> 00:05:02.756 A:middle
fields including that format

00:05:02.756 --> 00:05:03.796 A:middle
string and then the arguments

00:05:03.796 --> 00:05:04.306 A:middle
you provide.

00:05:05.226 --> 00:05:06.546 A:middle
But in Instruments you'll also

00:05:06.546 --> 00:05:07.786 A:middle
get access to all of the

00:05:07.786 --> 00:05:09.306 A:middle
implicitly specified fields.

00:05:09.786 --> 00:05:11.766 A:middle
Things like the timestamp or the

00:05:11.766 --> 00:05:12.926 A:middle
calling thread which comes in

00:05:12.926 --> 00:05:13.496 A:middle
really useful.

00:05:13.906 --> 00:05:15.746 A:middle
If you're using a log handle

00:05:15.746 --> 00:05:17.566 A:middle
that has backtraces enabled,

00:05:18.056 --> 00:05:20.136 A:middle
then the call stack will also be

00:05:20.136 --> 00:05:21.746 A:middle
recorded and made available to

00:05:21.746 --> 00:05:22.426 A:middle
you in Instruments.

00:05:23.796 --> 00:05:25.186 A:middle
So when adding tracing to your

00:05:25.186 --> 00:05:26.346 A:middle
code, it's important to note

00:05:26.346 --> 00:05:28.596 A:middle
that OSLog and OSSignpost

00:05:28.596 --> 00:05:30.286 A:middle
behaves in three different

00:05:30.806 --> 00:05:30.926 A:middle
modes.

00:05:31.366 --> 00:05:34.686 A:middle
By default, OSLog is -- each

00:05:34.686 --> 00:05:36.436 A:middle
OSLog handle has signposts

00:05:36.436 --> 00:05:36.866 A:middle
enabled.

00:05:37.416 --> 00:05:39.096 A:middle
And so they're still low-cost

00:05:39.096 --> 00:05:40.296 A:middle
and only logged to a ring

00:05:40.296 --> 00:05:40.666 A:middle
buffer.

00:05:41.936 --> 00:05:43.146 A:middle
Now when Instruments or another

00:05:43.196 --> 00:05:45.606 A:middle
client requests to display this

00:05:45.606 --> 00:05:48.506 A:middle
data immediately, the OSLog

00:05:48.506 --> 00:05:49.736 A:middle
system goes into a streaming

00:05:49.736 --> 00:05:51.546 A:middle
mode which is a bit higher-cost.

00:05:53.106 --> 00:05:54.266 A:middle
This year though there are two

00:05:54.266 --> 00:05:56.776 A:middle
new dynamic categories that are

00:05:56.776 --> 00:05:57.886 A:middle
only enabled when Instruments is

00:05:57.886 --> 00:05:58.386 A:middle
recording.

00:05:59.126 --> 00:06:01.876 A:middle
Now these dynamic categories are

00:05:59.126 --> 00:06:01.876 A:middle
Now these dynamic categories are

00:06:01.876 --> 00:06:04.096 A:middle
configured to record stack

00:06:04.096 --> 00:06:05.696 A:middle
traces for the second one which

00:06:05.966 --> 00:06:07.056 A:middle
adds a little bit of additional

00:06:07.056 --> 00:06:07.466 A:middle
overhead.

00:06:08.006 --> 00:06:09.226 A:middle
So with this in mind, what is

00:06:09.256 --> 00:06:11.376 A:middle
the actual cost of OSSignpost?

00:06:13.056 --> 00:06:15.166 A:middle
Well, many factors impact the

00:06:15.166 --> 00:06:16.336 A:middle
real-world performance.

00:06:16.636 --> 00:06:17.946 A:middle
Things like device type,

00:06:17.946 --> 00:06:20.246 A:middle
hardware model, OS version,

00:06:20.246 --> 00:06:22.166 A:middle
system load, thermals and more.

00:06:22.776 --> 00:06:23.936 A:middle
So it's hard to give an exact

00:06:23.936 --> 00:06:24.306 A:middle
number.

00:06:24.906 --> 00:06:26.116 A:middle
But I'd like to give some order

00:06:26.116 --> 00:06:27.436 A:middle
of magnitude approximations on a

00:06:27.436 --> 00:06:29.066 A:middle
logarithmic scale, because I

00:06:29.066 --> 00:06:29.696 A:middle
think it's useful for

00:06:29.696 --> 00:06:30.866 A:middle
understanding the relative

00:06:30.866 --> 00:06:31.406 A:middle
costs.

00:06:32.036 --> 00:06:33.636 A:middle
If we look at Signposts in a

00:06:33.636 --> 00:06:35.836 A:middle
release build, all of them clock

00:06:35.836 --> 00:06:37.136 A:middle
in at under a microsecond.

00:06:37.476 --> 00:06:39.186 A:middle
The new off-by-default dynamic

00:06:39.186 --> 00:06:40.926 A:middle
categories are actually in the

00:06:40.926 --> 00:06:42.136 A:middle
low nanosecond range.

00:06:43.256 --> 00:06:45.536 A:middle
Now when Instruments is

00:06:45.536 --> 00:06:46.946 A:middle
recording in deferred or last

00:06:46.946 --> 00:06:49.336 A:middle
few second mode, these dynamic

00:06:49.336 --> 00:06:50.836 A:middle
categories turn on to match the

00:06:50.836 --> 00:06:52.226 A:middle
behavior of the on-by-default

00:06:52.226 --> 00:06:52.866 A:middle
categories.

00:06:53.166 --> 00:06:55.336 A:middle
And they are the same expense

00:06:55.336 --> 00:06:57.536 A:middle
except for that dynamic stacks

00:06:57.536 --> 00:06:58.886 A:middle
category which is a little bit

00:06:58.886 --> 00:07:00.076 A:middle
more expensive in the low

00:06:58.886 --> 00:07:00.076 A:middle
more expensive in the low

00:07:00.076 --> 00:07:01.866 A:middle
microsecond range due to the

00:07:01.866 --> 00:07:02.806 A:middle
recording a call stack.

00:07:03.446 --> 00:07:05.436 A:middle
Now when streaming mode is

00:07:05.436 --> 00:07:07.186 A:middle
required though, all of these

00:07:07.186 --> 00:07:08.426 A:middle
become significantly more

00:07:08.426 --> 00:07:10.496 A:middle
expensive, moving into the tens

00:07:10.496 --> 00:07:11.426 A:middle
of microseconds range.

00:07:12.086 --> 00:07:16.936 A:middle
So with this in mind, what can

00:07:16.936 --> 00:07:18.126 A:middle
you do to minimize the

00:07:18.126 --> 00:07:19.276 A:middle
OSSignpost overhead while

00:07:19.276 --> 00:07:20.706 A:middle
recording if you're concerned

00:07:20.706 --> 00:07:22.666 A:middle
about that runtime cost or they

00:07:22.666 --> 00:07:23.506 A:middle
start showing up in your

00:07:23.506 --> 00:07:23.986 A:middle
profiles?

00:07:25.136 --> 00:07:26.446 A:middle
Well, there's two easy things

00:07:26.506 --> 00:07:26.926 A:middle
you can do.

00:07:27.446 --> 00:07:28.956 A:middle
First of all, you can use

00:07:28.956 --> 00:07:30.386 A:middle
Instruments' deferred or last few

00:07:30.386 --> 00:07:31.496 A:middle
seconds mode instead of

00:07:31.496 --> 00:07:32.096 A:middle
immediate mode.

00:07:32.586 --> 00:07:34.046 A:middle
This keeps OSSignpost out of

00:07:34.046 --> 00:07:35.826 A:middle
that streaming mode and reduces

00:07:35.826 --> 00:07:36.386 A:middle
the overhead.

00:07:36.566 --> 00:07:37.796 A:middle
And it's easy to configure a

00:07:37.796 --> 00:07:39.386 A:middle
template to record in one of

00:07:39.386 --> 00:07:40.796 A:middle
these modes when you open it.

00:07:43.506 --> 00:07:45.736 A:middle
Also, if you use the new dynamic

00:07:45.736 --> 00:07:47.196 A:middle
tracing categories, that's a

00:07:47.196 --> 00:07:48.686 A:middle
great way to minimize overhead

00:07:48.686 --> 00:07:49.726 A:middle
while not recording.

00:07:49.726 --> 00:07:51.926 A:middle
Because the signposts will be

00:07:52.246 --> 00:07:53.966 A:middle
off by default.

00:07:54.746 --> 00:07:55.776 A:middle
They can only be enabled by

00:07:55.776 --> 00:07:57.396 A:middle
custom instruments, so this data

00:07:57.396 --> 00:07:58.786 A:middle
also won't crowd the tracks in

00:07:58.786 --> 00:08:01.596 A:middle
the built-in OSSignpost tool.

00:07:58.786 --> 00:08:01.596 A:middle
the built-in OSSignpost tool.

00:08:02.476 --> 00:08:04.406 A:middle
So as the author of a framework

00:08:04.406 --> 00:08:05.806 A:middle
or a subsystem, just how many

00:08:05.806 --> 00:08:07.376 A:middle
signposts is it reasonable to

00:08:07.376 --> 00:08:08.486 A:middle
emit while you're profiling?

00:08:09.086 --> 00:08:10.086 A:middle
Well, you can emit a lot.

00:08:10.086 --> 00:08:11.176 A:middle
But let's assume a very

00:08:11.176 --> 00:08:12.486 A:middle
conservative goal of staying

00:08:12.486 --> 00:08:15.226 A:middle
under 1% CPU of even a single

00:08:15.226 --> 00:08:16.726 A:middle
core while you're profiling.

00:08:17.136 --> 00:08:20.576 A:middle
And then let's assume that the

00:08:20.896 --> 00:08:22.256 A:middle
signposts have a rough cost,

00:08:22.256 --> 00:08:24.456 A:middle
about half a microsecond per

00:08:24.456 --> 00:08:25.336 A:middle
signpost enabled.

00:08:26.486 --> 00:08:28.016 A:middle
Well, that math works out to

00:08:28.016 --> 00:08:29.456 A:middle
20,000 signposts per second.

00:08:30.306 --> 00:08:31.956 A:middle
And even in a display-link

00:08:31.956 --> 00:08:33.876 A:middle
context on an iPad Pro running

00:08:33.876 --> 00:08:36.155 A:middle
at 120 frames per second, that's

00:08:36.155 --> 00:08:38.076 A:middle
still enough for 83 intervals

00:08:38.405 --> 00:08:39.035 A:middle
per frame.

00:08:40.676 --> 00:08:43.066 A:middle
Now again, the real-world

00:08:43.066 --> 00:08:45.626 A:middle
performance will change and

00:08:45.626 --> 00:08:46.696 A:middle
these are just estimates.

00:08:47.096 --> 00:08:48.836 A:middle
So it's important to remember

00:08:48.836 --> 00:08:49.916 A:middle
that signposts are a shared

00:08:49.916 --> 00:08:50.556 A:middle
resource.

00:08:51.226 --> 00:08:53.046 A:middle
The more you use, the more it

00:08:53.046 --> 00:08:54.246 A:middle
will impact the logging system.

00:08:54.686 --> 00:08:56.706 A:middle
That said, they're designed to

00:08:56.706 --> 00:08:58.146 A:middle
allow for this high-rate tracing

00:08:58.146 --> 00:08:59.806 A:middle
and it can come in really useful

00:08:59.806 --> 00:09:00.406 A:middle
sometimes.

00:08:59.806 --> 00:09:00.406 A:middle
sometimes.

00:09:00.996 --> 00:09:02.216 A:middle
Sometimes it's the key to

00:09:02.216 --> 00:09:04.016 A:middle
figuring out a pipeline install

00:09:04.316 --> 00:09:05.746 A:middle
or an ordering issue in your

00:09:05.746 --> 00:09:06.086 A:middle
code.

00:09:06.956 --> 00:09:08.446 A:middle
Keep in mind though that you may

00:09:08.446 --> 00:09:10.066 A:middle
want to separate signposts out

00:09:10.496 --> 00:09:12.176 A:middle
into different categories per

00:09:12.176 --> 00:09:12.766 A:middle
audience.

00:09:13.406 --> 00:09:15.336 A:middle
It's likely that your clients of

00:09:15.336 --> 00:09:16.496 A:middle
your framework will need less

00:09:16.566 --> 00:09:18.046 A:middle
detail than contributors of your

00:09:18.046 --> 00:09:19.686 A:middle
framework who might need tracing

00:09:19.686 --> 00:09:21.016 A:middle
of more implementation details.

00:09:21.336 --> 00:09:23.236 A:middle
And if you split your trace

00:09:23.236 --> 00:09:24.816 A:middle
points across multiple log

00:09:24.816 --> 00:09:26.796 A:middle
handles, this allows your tools

00:09:26.796 --> 00:09:28.096 A:middle
to only enable the necessary

00:09:28.096 --> 00:09:28.456 A:middle
subset.

00:09:29.866 --> 00:09:31.636 A:middle
Now as tracing is the basis for

00:09:31.636 --> 00:09:32.586 A:middle
instrumentation, I want to

00:09:32.586 --> 00:09:33.656 A:middle
quickly cover four best

00:09:33.656 --> 00:09:34.256 A:middle
practices.

00:09:36.286 --> 00:09:37.526 A:middle
First and most importantly,

00:09:38.186 --> 00:09:40.256 A:middle
always end any intervals you

00:09:40.256 --> 00:09:40.636 A:middle
begin.

00:09:41.326 --> 00:09:42.626 A:middle
It's critical for correctness

00:09:43.536 --> 00:09:45.326 A:middle
and permanently open intervals

00:09:45.326 --> 00:09:46.116 A:middle
can really slow down

00:09:46.116 --> 00:09:47.406 A:middle
Instruments' analysis as well.

00:09:48.426 --> 00:09:50.116 A:middle
In this example, we have

00:09:50.266 --> 00:09:52.336 A:middle
OSSignpost calls wrapping an

00:09:52.576 --> 00:09:53.956 A:middle
expensive and potentially

00:09:53.956 --> 00:09:55.586 A:middle
error-throwing piece of code.

00:09:56.456 --> 00:09:58.176 A:middle
The problem is that if an error

00:09:58.176 --> 00:09:59.956 A:middle
is thrown, then control flow

00:09:59.956 --> 00:10:01.926 A:middle
jumps to the catch scope and

00:09:59.956 --> 00:10:01.926 A:middle
jumps to the catch scope and

00:10:01.926 --> 00:10:03.526 A:middle
skips our end signpost entirely.

00:10:05.036 --> 00:10:06.466 A:middle
Now Swift's defer statement is

00:10:06.466 --> 00:10:07.696 A:middle
really a great way to handle

00:10:07.696 --> 00:10:08.546 A:middle
this, making sure that

00:10:08.546 --> 00:10:10.866 A:middle
regardless of early returns or

00:10:10.866 --> 00:10:14.016 A:middle
errors being thrown, that

00:10:14.016 --> 00:10:15.696 A:middle
OSSignpost end call will still

00:10:15.696 --> 00:10:16.866 A:middle
be called when we exit the

00:10:16.866 --> 00:10:17.416 A:middle
current scope.

00:10:18.696 --> 00:10:21.396 A:middle
So second, for efficiency, avoid

00:10:21.396 --> 00:10:22.936 A:middle
logging identical data in both

00:10:23.006 --> 00:10:25.146 A:middle
the begin and end trace points

00:10:25.326 --> 00:10:26.566 A:middle
and log it in the first point

00:10:26.566 --> 00:10:27.306 A:middle
it's available.

00:10:27.956 --> 00:10:29.396 A:middle
This avoids that duplicate work

00:10:29.766 --> 00:10:31.266 A:middle
and it gives Instruments a value

00:10:31.266 --> 00:10:32.196 A:middle
as soon as possible.

00:10:32.576 --> 00:10:34.196 A:middle
In this example, we don't need

00:10:34.196 --> 00:10:37.376 A:middle
to repeat the request number or

00:10:37.376 --> 00:10:40.236 A:middle
raw size, and instead of using

00:10:40.236 --> 00:10:41.826 A:middle
the request number to match up

00:10:41.826 --> 00:10:43.306 A:middle
the intervals in case of

00:10:43.306 --> 00:10:45.436 A:middle
overlap, these points could

00:10:45.436 --> 00:10:47.906 A:middle
actually use and generate a

00:10:47.906 --> 00:10:49.966 A:middle
unique Signpost ID for this log

00:10:49.966 --> 00:10:51.876 A:middle
handle per interval pair.

00:10:53.126 --> 00:10:55.196 A:middle
So third, avoid doing

00:10:55.196 --> 00:10:57.786 A:middle
unnecessary work when signposts

00:10:57.826 --> 00:10:58.496 A:middle
aren't enabled.

00:10:59.366 --> 00:11:00.696 A:middle
If your log handle is configured

00:10:59.366 --> 00:11:00.696 A:middle
If your log handle is configured

00:11:00.696 --> 00:11:01.746 A:middle
to use one of the dynamic

00:11:01.746 --> 00:11:03.326 A:middle
tracing categories, then the

00:11:03.366 --> 00:11:04.716 A:middle
signposts enabled property will

00:11:04.716 --> 00:11:05.536 A:middle
indicate whether or not

00:11:05.536 --> 00:11:06.536 A:middle
Instruments is recording at the

00:11:06.536 --> 00:11:08.466 A:middle
time, which means it's a great

00:11:08.466 --> 00:11:11.126 A:middle
way to put your expensive data

00:11:11.206 --> 00:11:13.026 A:middle
computation behind that

00:11:13.326 --> 00:11:15.666 A:middle
OSSignpost-enabled check.

00:11:16.656 --> 00:11:19.506 A:middle
Fourth, only trace data that you

00:11:19.506 --> 00:11:20.516 A:middle
actually need for your tools.

00:11:21.436 --> 00:11:22.266 A:middle
Think about your guard

00:11:22.266 --> 00:11:23.406 A:middle
statements and preconditions,

00:11:23.966 --> 00:11:25.096 A:middle
because sometimes you'll want to

00:11:25.096 --> 00:11:26.686 A:middle
trace these to include the short

00:11:26.686 --> 00:11:26.996 A:middle
intervals.

00:11:27.526 --> 00:11:28.936 A:middle
For example, if you've got a

00:11:28.936 --> 00:11:30.466 A:middle
method and you want to see the

00:11:30.466 --> 00:11:31.756 A:middle
difference between a cash hit

00:11:31.756 --> 00:11:32.636 A:middle
and a cash miss.

00:11:33.696 --> 00:11:34.766 A:middle
But other times these early

00:11:34.766 --> 00:11:36.366 A:middle
returns will be uninteresting.

00:11:36.926 --> 00:11:39.156 A:middle
And for these cases, consider

00:11:39.156 --> 00:11:41.146 A:middle
moving the signpost after the

00:11:41.146 --> 00:11:42.846 A:middle
preconditions to reduce the

00:11:42.846 --> 00:11:44.976 A:middle
amount of data you send to the

00:11:44.976 --> 00:11:45.756 A:middle
signpost system.

00:11:46.896 --> 00:11:48.466 A:middle
Now with all these tips, it's

00:11:48.466 --> 00:11:50.126 A:middle
important to remember that trace

00:11:50.166 --> 00:11:51.866 A:middle
points are really the basis for

00:11:51.866 --> 00:11:52.836 A:middle
all of the tools that you build

00:11:52.836 --> 00:11:53.466 A:middle
on top.

00:11:53.726 --> 00:11:54.856 A:middle
And most of the time they'll be

00:11:54.916 --> 00:11:56.546 A:middle
present in your production code.

00:11:56.546 --> 00:11:57.996 A:middle
So that's why it's important to

00:11:57.996 --> 00:11:59.526 A:middle
think about performance and

00:11:59.526 --> 00:12:00.706 A:middle
maintainability of your trace

00:11:59.526 --> 00:12:00.706 A:middle
maintainability of your trace

00:12:00.756 --> 00:12:01.106 A:middle
points.

00:12:01.916 --> 00:12:03.246 A:middle
And since they're at the core,

00:12:03.576 --> 00:12:05.076 A:middle
changes to your signpost calls

00:12:05.076 --> 00:12:06.116 A:middle
might result in needing to

00:12:06.116 --> 00:12:07.286 A:middle
change the tools that you build

00:12:07.286 --> 00:12:07.756 A:middle
on top.

00:12:08.386 --> 00:12:10.546 A:middle
So to keep your trace points

00:12:10.546 --> 00:12:12.196 A:middle
stable, avoid tracing

00:12:12.196 --> 00:12:14.126 A:middle
implementation details and try

00:12:14.126 --> 00:12:15.576 A:middle
to add your OSSignpost calls

00:12:16.166 --> 00:12:17.516 A:middle
closer to the API layer when

00:12:17.516 --> 00:12:18.006 A:middle
possible.

00:12:18.986 --> 00:12:20.066 A:middle
Now moving your trace points

00:12:20.066 --> 00:12:21.216 A:middle
around your code base isn't a

00:12:21.216 --> 00:12:21.706 A:middle
problem.

00:12:21.706 --> 00:12:22.776 A:middle
Now you don't need to worry

00:12:22.776 --> 00:12:24.206 A:middle
about compiler optimizations

00:12:24.206 --> 00:12:25.376 A:middle
like inlining that might move

00:12:25.376 --> 00:12:25.896 A:middle
them for you.

00:12:26.886 --> 00:12:28.616 A:middle
The things that you need to make

00:12:28.616 --> 00:12:31.496 A:middle
sure don't change are the static

00:12:31.496 --> 00:12:34.606 A:middle
strings, specifically I mean the

00:12:34.816 --> 00:12:37.216 A:middle
subsystem, the category, the

00:12:37.216 --> 00:12:39.266 A:middle
signpost name or the format

00:12:39.266 --> 00:12:39.546 A:middle
string.

00:12:39.786 --> 00:12:41.096 A:middle
If you change any of these,

00:12:41.186 --> 00:12:41.926 A:middle
you'll need to remember to

00:12:41.926 --> 00:12:43.276 A:middle
update your Instruments package

00:12:43.276 --> 00:12:43.536 A:middle
as well.

00:12:44.596 --> 00:12:46.326 A:middle
So with that, let's move on to

00:12:46.326 --> 00:12:48.266 A:middle
talking about modeling and

00:12:48.266 --> 00:12:50.386 A:middle
adding structure to your data

00:12:50.386 --> 00:12:50.976 A:middle
within Instruments.

00:12:53.166 --> 00:12:54.416 A:middle
Instruments' architecture is

00:12:54.466 --> 00:12:55.786 A:middle
based on everything being stored

00:12:55.786 --> 00:12:56.336 A:middle
in tables.

00:12:56.896 --> 00:12:57.986 A:middle
And schemas define the

00:12:57.986 --> 00:12:59.506 A:middle
structures of those tables, all

00:12:59.506 --> 00:13:00.236 A:middle
of which are measured by

00:12:59.506 --> 00:13:00.236 A:middle
of which are measured by

00:13:00.236 --> 00:13:01.106 A:middle
Instruments instant analysis

00:13:01.106 --> 00:13:01.326 A:middle
core.

00:13:01.916 --> 00:13:03.996 A:middle
For more in-depth intro to

00:13:03.996 --> 00:13:05.466 A:middle
Instruments architecture, I'd

00:13:05.506 --> 00:13:07.046 A:middle
recommend the Creating Custom

00:13:07.046 --> 00:13:08.476 A:middle
Instruments talk from 2018.

00:13:08.726 --> 00:13:09.816 A:middle
For now though, let's look at

00:13:09.816 --> 00:13:11.276 A:middle
where modeling fits into

00:13:11.276 --> 00:13:12.946 A:middle
creating a profiling experience.

00:13:13.586 --> 00:13:15.846 A:middle
On the left, we've covered

00:13:15.846 --> 00:13:17.076 A:middle
OSSignpost which is one of the

00:13:17.076 --> 00:13:18.326 A:middle
main data sources that

00:13:18.326 --> 00:13:19.316 A:middle
Instruments records from.

00:13:20.076 --> 00:13:21.056 A:middle
This data is filled in the

00:13:21.056 --> 00:13:22.626 A:middle
tables with the pre-defined

00:13:22.626 --> 00:13:24.016 A:middle
schema for use by your Custom

00:13:24.016 --> 00:13:24.486 A:middle
Instruments.

00:13:26.156 --> 00:13:27.426 A:middle
Modeling is that next phase in

00:13:27.426 --> 00:13:27.906 A:middle
the middle.

00:13:28.006 --> 00:13:29.946 A:middle
A modeler observes data from one

00:13:29.946 --> 00:13:31.956 A:middle
or more input tables, reasons

00:13:31.956 --> 00:13:34.596 A:middle
about it and then emits data to

00:13:34.596 --> 00:13:36.026 A:middle
one or more output tables of

00:13:36.026 --> 00:13:36.926 A:middle
your specification.

00:13:38.146 --> 00:13:38.986 A:middle
The modeler is where your

00:13:38.986 --> 00:13:40.696 A:middle
domain-specific logic resides,

00:13:41.196 --> 00:13:42.486 A:middle
and the schemas of the output

00:13:42.486 --> 00:13:45.106 A:middle
tables are yours to specify

00:13:45.106 --> 00:13:46.956 A:middle
which types and formatters to

00:13:46.956 --> 00:13:47.626 A:middle
apply to your data.

00:13:49.406 --> 00:13:50.626 A:middle
The final step on the right is

00:13:50.626 --> 00:13:52.606 A:middle
visualization which is described

00:13:52.606 --> 00:13:54.376 A:middle
in XML to the standard UI in

00:13:54.376 --> 00:13:54.956 A:middle
Instruments.

00:13:55.456 --> 00:13:56.886 A:middle
It's where you specify how to

00:13:56.946 --> 00:13:58.116 A:middle
graph and display the data in

00:13:58.116 --> 00:13:59.186 A:middle
your modeler's output tables.

00:13:59.886 --> 00:14:01.156 A:middle
Things like which columns to

00:13:59.886 --> 00:14:01.156 A:middle
Things like which columns to

00:14:01.156 --> 00:14:02.436 A:middle
plot and uses the value.

00:14:02.436 --> 00:14:03.836 A:middle
Or which columns to use for

00:14:03.836 --> 00:14:04.526 A:middle
labels in color.

00:14:05.596 --> 00:14:06.716 A:middle
Since all of the custom

00:14:06.716 --> 00:14:07.966 A:middle
instrument's visualization is

00:14:08.046 --> 00:14:10.086 A:middle
based on your schemas and your

00:14:10.086 --> 00:14:12.016 A:middle
modelers' output, it's important

00:14:12.016 --> 00:14:13.606 A:middle
to talk through that process of

00:14:13.606 --> 00:14:15.546 A:middle
checking that your OSSignpost

00:14:15.546 --> 00:14:17.486 A:middle
trace point are good, and then

00:14:17.656 --> 00:14:19.066 A:middle
how to get this data into your

00:14:19.066 --> 00:14:19.886 A:middle
custom-defined schema.

00:14:23.056 --> 00:14:24.216 A:middle
So all data in a custom

00:14:24.216 --> 00:14:25.406 A:middle
instrument must be stored in

00:14:25.406 --> 00:14:27.326 A:middle
tables that handle data in one

00:14:27.326 --> 00:14:27.986 A:middle
of two ways.

00:14:28.836 --> 00:14:30.266 A:middle
Point schemas have a timestamp

00:14:30.266 --> 00:14:32.766 A:middle
column, and interval schemas

00:14:32.866 --> 00:14:34.216 A:middle
have both a timestamp and a

00:14:34.216 --> 00:14:34.866 A:middle
duration column.

00:14:35.706 --> 00:14:37.246 A:middle
This means you'll need to define

00:14:37.246 --> 00:14:38.666 A:middle
at least one pointer interval

00:14:38.666 --> 00:14:40.396 A:middle
schema and then give names and

00:14:40.396 --> 00:14:41.186 A:middle
types to the rest of the

00:14:41.186 --> 00:14:41.566 A:middle
columns.

00:14:42.766 --> 00:14:44.226 A:middle
Now the data will be filled in

00:14:44.536 --> 00:14:46.766 A:middle
by modeling rules that operate

00:14:46.766 --> 00:14:47.396 A:middle
on the input data.

00:14:47.396 --> 00:14:49.006 A:middle
And these rules are expressed in

00:14:49.006 --> 00:14:49.756 A:middle
Eclipse language.

00:14:50.446 --> 00:14:51.306 A:middle
The good news is that

00:14:51.516 --> 00:14:53.616 A:middle
Instruments provides a few

00:14:53.616 --> 00:14:55.546 A:middle
schemas that will auto-generate

00:14:55.546 --> 00:14:56.016 A:middle
modelers.

00:14:56.486 --> 00:14:57.716 A:middle
So you don't have to jump into

00:14:57.716 --> 00:14:58.946 A:middle
writing Eclipse code until you

00:14:58.946 --> 00:14:59.276 A:middle
want to.

00:15:00.616 --> 00:15:02.466 A:middle
In fact, if you're just starting

00:15:02.466 --> 00:15:03.386 A:middle
and you want to make sure that

00:15:03.386 --> 00:15:05.086 A:middle
your data's correct, Instruments

00:15:05.086 --> 00:15:06.626 A:middle
provides a built-in OSSignpost

00:15:06.626 --> 00:15:08.606 A:middle
tool in the library that's great

00:15:08.606 --> 00:15:10.196 A:middle
for recording and checking that

00:15:10.196 --> 00:15:12.046 A:middle
your OSSignpost intervals look

00:15:12.146 --> 00:15:12.586 A:middle
reasonable.

00:15:12.586 --> 00:15:14.316 A:middle
And the inspector can help you

00:15:14.316 --> 00:15:15.526 A:middle
verify that the raw data is

00:15:15.526 --> 00:15:16.656 A:middle
exactly what you expect.

00:15:17.766 --> 00:15:19.136 A:middle
Now once you've checked your

00:15:19.266 --> 00:15:21.096 A:middle
data, a new instruments target

00:15:21.576 --> 00:15:22.616 A:middle
is a great way to start for

00:15:22.616 --> 00:15:23.266 A:middle
building your own tool.

00:15:23.266 --> 00:15:25.506 A:middle
With Xcode's built-in XML

00:15:25.506 --> 00:15:27.506 A:middle
snippets for custom instruments,

00:15:27.876 --> 00:15:29.776 A:middle
you're only a few elements away

00:15:30.006 --> 00:15:31.336 A:middle
from an automatic modeler and an

00:15:31.436 --> 00:15:32.586 A:middle
instrument in the library.

00:15:32.586 --> 00:15:34.076 A:middle
And the best way to see what

00:15:34.076 --> 00:15:35.466 A:middle
this looks like is with a demo.

00:15:35.466 --> 00:15:37.406 A:middle
And for that, I'd like to invite

00:15:37.586 --> 00:15:38.936 A:middle
up Kasper.

00:15:39.516 --> 00:15:44.546 A:middle
[ Applause ]

00:15:45.046 --> 00:15:45.546 A:middle
&gt;&gt; Thank you, Daniel.

00:15:45.546 --> 00:15:46.326 A:middle
And hello, everyone.

00:15:49.046 --> 00:15:50.366 A:middle
Our Solar System application on

00:15:50.366 --> 00:15:51.816 A:middle
the Mac is dealing with a large

00:15:51.816 --> 00:15:53.866 A:middle
amount of data about planets,

00:15:54.366 --> 00:15:56.386 A:middle
images, videos and binary data.

00:15:57.116 --> 00:15:58.916 A:middle
In order to optimize this usage,

00:15:59.126 --> 00:16:00.626 A:middle
I built a framework called solar

00:15:59.126 --> 00:16:00.626 A:middle
I built a framework called solar

00:16:00.626 --> 00:16:02.206 A:middle
compression that uses samples

00:16:02.206 --> 00:16:03.546 A:middle
compression library to

00:16:03.546 --> 00:16:05.296 A:middle
efficiently encode and decode

00:16:05.296 --> 00:16:06.126 A:middle
data from the disk.

00:16:07.166 --> 00:16:08.246 A:middle
Now I want to build

00:16:08.246 --> 00:16:09.616 A:middle
instrumentation for my framework

00:16:09.896 --> 00:16:11.006 A:middle
to provide insights to the

00:16:11.006 --> 00:16:11.816 A:middle
future users.

00:16:13.046 --> 00:16:14.206 A:middle
We have two concepts that are

00:16:14.206 --> 00:16:15.616 A:middle
worth tracking and presenting

00:16:15.616 --> 00:16:16.146 A:middle
visually.

00:16:16.626 --> 00:16:18.816 A:middle
Firstly, CompressionManager is

00:16:18.816 --> 00:16:19.886 A:middle
an object that coordinates

00:16:19.886 --> 00:16:20.816 A:middle
compression tasks.

00:16:21.476 --> 00:16:22.596 A:middle
It's created with a number of

00:16:22.646 --> 00:16:24.266 A:middle
channels which specifies how

00:16:24.266 --> 00:16:25.816 A:middle
many tasks can be executed

00:16:25.816 --> 00:16:26.396 A:middle
concurrently.

00:16:27.606 --> 00:16:28.986 A:middle
Secondly, I would like to

00:16:28.986 --> 00:16:30.436 A:middle
measure how well compression did

00:16:30.436 --> 00:16:32.086 A:middle
for specific file types and

00:16:32.086 --> 00:16:33.626 A:middle
algorithms by capturing

00:16:33.626 --> 00:16:34.516 A:middle
compression ratio.

00:16:35.296 --> 00:16:37.166 A:middle
By examining this, users can

00:16:37.166 --> 00:16:38.356 A:middle
decide whether it's worth it to

00:16:38.356 --> 00:16:39.156 A:middle
compress their data.

00:16:39.156 --> 00:16:41.916 A:middle
I wrote intervals that represent

00:16:41.916 --> 00:16:43.636 A:middle
this concept of my framework in

00:16:43.636 --> 00:16:45.836 A:middle
OSSignpost API, so let's jump to

00:16:45.836 --> 00:16:46.926 A:middle
the CompressionManager Swift

00:16:46.926 --> 00:16:47.876 A:middle
file to take a look.

00:16:49.216 --> 00:16:50.656 A:middle
Firstly, let's take a look at

00:16:50.656 --> 00:16:51.306 A:middle
the log handle.

00:16:51.776 --> 00:16:53.156 A:middle
My log handle specifies my

00:16:53.156 --> 00:16:54.786 A:middle
framework's bundle identifier as

00:16:54.786 --> 00:16:56.906 A:middle
a subsystem and my class name as

00:16:56.906 --> 00:16:57.666 A:middle
a category.

00:16:59.296 --> 00:17:01.356 A:middle
Compress and decompress are part

00:16:59.296 --> 00:17:01.356 A:middle
Compress and decompress are part

00:17:01.356 --> 00:17:02.566 A:middle
of the public interface of

00:17:02.566 --> 00:17:03.516 A:middle
compression manager.

00:17:04.626 --> 00:17:05.965 A:middle
They both start by creating

00:17:05.965 --> 00:17:07.536 A:middle
compression work item instance

00:17:07.665 --> 00:17:08.976 A:middle
which encapsulates information

00:17:08.976 --> 00:17:10.415 A:middle
about certain compression tasks.

00:17:11.236 --> 00:17:12.816 A:middle
Next, they call into private

00:17:12.816 --> 00:17:14.026 A:middle
SubmitWorkItemMethod.

00:17:15.796 --> 00:17:17.156 A:middle
Because compression channels can

00:17:17.156 --> 00:17:18.705 A:middle
be busy with work, there might

00:17:18.705 --> 00:17:20.486 A:middle
be significant time between

00:17:20.486 --> 00:17:22.185 A:middle
compression item creation and

00:17:22.185 --> 00:17:23.215 A:middle
execution on the channel.

00:17:23.836 --> 00:17:24.996 A:middle
And this is the perfect place to

00:17:24.996 --> 00:17:26.175 A:middle
start measuring this delay.

00:17:27.236 --> 00:17:28.376 A:middle
We'll do it by calling our

00:17:28.376 --> 00:17:30.346 A:middle
signpost of type begin with

00:17:30.346 --> 00:17:31.576 A:middle
CompressionItemWait name.

00:17:33.026 --> 00:17:34.466 A:middle
Next, we can see our guard

00:17:34.466 --> 00:17:36.136 A:middle
condition here which ensures

00:17:36.136 --> 00:17:37.966 A:middle
that source file exists before

00:17:37.966 --> 00:17:38.976 A:middle
we proceed any further.

00:17:39.866 --> 00:17:41.066 A:middle
Following Daniel's advice, I

00:17:41.066 --> 00:17:42.366 A:middle
will move it to the top of the

00:17:42.366 --> 00:17:43.856 A:middle
function to ensure that my

00:17:43.856 --> 00:17:45.246 A:middle
intervals are always closed.

00:17:46.686 --> 00:17:47.926 A:middle
Next, we have

00:17:48.016 --> 00:17:50.216 A:middle
ExecuteWorkItemMethod which is

00:17:50.216 --> 00:17:51.866 A:middle
called when the compression task

00:17:51.866 --> 00:17:53.136 A:middle
is ready to be executed on the

00:17:53.136 --> 00:17:53.486 A:middle
channel.

00:17:53.776 --> 00:17:56.486 A:middle
At first we need to indicate end

00:17:56.486 --> 00:17:58.256 A:middle
of the wait time for the item by

00:17:58.256 --> 00:17:59.846 A:middle
calling our signpost of type end

00:18:00.286 --> 00:18:01.466 A:middle
with the same name as before.

00:18:02.046 --> 00:18:04.726 A:middle
Next, we indicate beginning of

00:18:04.726 --> 00:18:05.936 A:middle
the compression with

00:18:05.936 --> 00:18:07.396 A:middle
CompressionExecution signpost.

00:18:08.256 --> 00:18:09.606 A:middle
In the metadata, we have such

00:18:09.606 --> 00:18:11.466 A:middle
things like algorithm, the kind

00:18:11.466 --> 00:18:13.876 A:middle
of operation, information about

00:18:13.876 --> 00:18:16.306 A:middle
the source, destination, channel

00:18:16.306 --> 00:18:17.156 A:middle
and calling thread.

00:18:18.346 --> 00:18:20.236 A:middle
As we learned before, OSSignpost

00:18:20.236 --> 00:18:22.146 A:middle
implicitly records several

00:18:22.146 --> 00:18:24.386 A:middle
parameters including thread so

00:18:24.386 --> 00:18:25.616 A:middle
you are safe to remove the

00:18:25.706 --> 00:18:25.966 A:middle
thread now.

00:18:31.456 --> 00:18:33.216 A:middle
Next, we create destination file

00:18:33.766 --> 00:18:36.266 A:middle
and synchronously execute

00:18:36.316 --> 00:18:37.326 A:middle
compression operation.

00:18:37.806 --> 00:18:39.846 A:middle
After it's finished, we log it

00:18:39.846 --> 00:18:41.436 A:middle
and attach destination file

00:18:41.436 --> 00:18:41.726 A:middle
size.

00:18:42.616 --> 00:18:43.686 A:middle
This is another place where I

00:18:43.686 --> 00:18:44.826 A:middle
can improve on my signpost

00:18:44.826 --> 00:18:45.456 A:middle
invocations.

00:18:46.026 --> 00:18:46.986 A:middle
You can notice that

00:18:46.986 --> 00:18:48.606 A:middle
StartCompressionMethod over here

00:18:48.806 --> 00:18:49.676 A:middle
is a throwing one.

00:18:50.206 --> 00:18:51.706 A:middle
And if it does throw an error,

00:18:52.126 --> 00:18:53.326 A:middle
the signpost invocation here

00:18:53.326 --> 00:18:54.086 A:middle
will not be called.

00:18:55.066 --> 00:18:56.196 A:middle
To prevent this from happening,

00:18:56.466 --> 00:18:58.006 A:middle
I can introduce the defer block

00:18:58.006 --> 00:19:02.146 A:middle
over here and move my code to be

00:18:58.006 --> 00:19:02.146 A:middle
over here and move my code to be

00:19:02.146 --> 00:19:04.146 A:middle
sure that the intervals are

00:19:04.146 --> 00:19:04.786 A:middle
always closed.

00:19:07.656 --> 00:19:09.676 A:middle
Now let's see our signpost in

00:19:09.676 --> 00:19:11.446 A:middle
Instruments by using Xcode's

00:19:11.506 --> 00:19:11.956 A:middle
Profile action.

00:19:19.416 --> 00:19:20.276 A:middle
Let's start with a blank

00:19:20.326 --> 00:19:23.396 A:middle
template, add our signpost

00:19:23.396 --> 00:19:26.656 A:middle
instrument to it and record for

00:19:26.786 --> 00:19:27.966 A:middle
just a few seconds.

00:19:32.366 --> 00:19:33.576 A:middle
We can now examine the data.

00:19:33.786 --> 00:19:35.876 A:middle
I will expand our signpost

00:19:35.876 --> 00:19:37.256 A:middle
instrument to see all of the

00:19:37.256 --> 00:19:38.306 A:middle
recorded subsystems.

00:19:39.856 --> 00:19:41.646 A:middle
Here's our Solar Compression

00:19:41.646 --> 00:19:41.866 A:middle
one.

00:19:42.046 --> 00:19:44.166 A:middle
I can extend it further to see

00:19:44.166 --> 00:19:45.816 A:middle
my Compression Manager category.

00:19:47.056 --> 00:19:48.846 A:middle
Now I can resize this track to

00:19:48.846 --> 00:19:50.406 A:middle
fit all of the contained graphs

00:19:50.456 --> 00:19:51.466 A:middle
by using Control-Z.

00:19:52.896 --> 00:19:54.346 A:middle
Let's pinch to zoom to examine

00:19:54.346 --> 00:19:55.456 A:middle
the data in more detail.

00:19:56.116 --> 00:19:58.826 A:middle
On the top we have all of the

00:19:58.826 --> 00:20:00.556 A:middle
Compression Execution signposts.

00:19:58.826 --> 00:20:00.556 A:middle
Compression Execution signposts.

00:20:01.416 --> 00:20:02.656 A:middle
And on the bottom we see all of

00:20:02.656 --> 00:20:03.926 A:middle
the intervals for the waiting

00:20:03.926 --> 00:20:04.396 A:middle
tasks.

00:20:04.956 --> 00:20:06.676 A:middle
And we can notice some patterns

00:20:06.676 --> 00:20:07.136 A:middle
over here.

00:20:08.466 --> 00:20:10.366 A:middle
For example, at most two tasks

00:20:10.436 --> 00:20:11.726 A:middle
are executing at once, so

00:20:12.386 --> 00:20:14.086 A:middle
probably application code is

00:20:14.086 --> 00:20:15.436 A:middle
using two compression channels.

00:20:16.886 --> 00:20:19.206 A:middle
Also we can see some spikes over

00:20:19.286 --> 00:20:21.396 A:middle
here that indicate that a lot of

00:20:21.396 --> 00:20:22.516 A:middle
tasks are waiting to be

00:20:22.516 --> 00:20:22.946 A:middle
compressed.

00:20:25.446 --> 00:20:27.656 A:middle
OSSignpost is a great tool for

00:20:27.656 --> 00:20:29.276 A:middle
analysis of your own signposts,

00:20:29.546 --> 00:20:30.656 A:middle
but usually doesn't provide

00:20:30.656 --> 00:20:32.666 A:middle
enough context for analyzing

00:20:32.666 --> 00:20:33.506 A:middle
them by your framework's

00:20:33.506 --> 00:20:33.936 A:middle
audience.

00:20:35.076 --> 00:20:36.926 A:middle
To improve on this, I built

00:20:36.926 --> 00:20:39.756 A:middle
Solar Compression instrument

00:20:39.976 --> 00:20:41.426 A:middle
that uses custom instruments.

00:20:42.366 --> 00:20:43.916 A:middle
But putting these two signposts

00:20:44.156 --> 00:20:45.986 A:middle
into two separate tables and

00:20:45.986 --> 00:20:47.136 A:middle
adjusting instrument-standard

00:20:47.186 --> 00:20:48.996 A:middle
UI, I managed to improve on our

00:20:48.996 --> 00:20:49.776 A:middle
visualization.

00:20:50.296 --> 00:20:51.536 A:middle
Let's open trace document

00:20:51.656 --> 00:20:52.946 A:middle
containing this instrument now.

00:20:59.046 --> 00:21:00.616 A:middle
On the bottom line we see all of

00:20:59.046 --> 00:21:00.616 A:middle
On the bottom line we see all of

00:21:00.616 --> 00:21:01.976 A:middle
the waiting tasks which are

00:21:01.976 --> 00:21:03.276 A:middle
represented similarly to the

00:21:03.276 --> 00:21:04.306 A:middle
OSSignpost instrument.

00:21:07.316 --> 00:21:08.926 A:middle
On the top we see all of the

00:21:08.926 --> 00:21:10.536 A:middle
execution intervals now

00:21:10.536 --> 00:21:12.286 A:middle
separated by a channel so we can

00:21:12.286 --> 00:21:13.616 A:middle
indeed see that there are two

00:21:13.616 --> 00:21:14.566 A:middle
channels available.

00:21:16.216 --> 00:21:17.956 A:middle
On the bottom over here I see

00:21:17.956 --> 00:21:19.296 A:middle
all of the compression tasks

00:21:19.536 --> 00:21:20.416 A:middle
with information on the

00:21:20.416 --> 00:21:22.596 A:middle
interval, source path, file

00:21:22.596 --> 00:21:24.326 A:middle
sizes, compression ratio, et

00:21:24.326 --> 00:21:24.666 A:middle
cetera.

00:21:25.806 --> 00:21:27.046 A:middle
There's one task that brings my

00:21:27.046 --> 00:21:27.596 A:middle
attention.

00:21:27.886 --> 00:21:29.326 A:middle
It's pretty long and it's

00:21:29.376 --> 00:21:31.356 A:middle
colored in red, which means that

00:21:31.356 --> 00:21:32.646 A:middle
the compression for this ratio

00:21:32.646 --> 00:21:34.676 A:middle
for this task was slow.

00:21:34.676 --> 00:21:35.786 A:middle
To easily see what kind of task

00:21:35.786 --> 00:21:37.506 A:middle
it is, I can switch to active

00:21:37.506 --> 00:21:40.336 A:middle
tasks detail which is set up to

00:21:40.336 --> 00:21:41.896 A:middle
only show intervals that are

00:21:41.896 --> 00:21:43.476 A:middle
intersecting my inspection head.

00:21:43.476 --> 00:21:45.876 A:middle
I can move my inspection head

00:21:45.876 --> 00:21:48.796 A:middle
and analyze a task.

00:21:48.796 --> 00:21:50.076 A:middle
It seems that we are trying to

00:21:50.076 --> 00:21:52.066 A:middle
compress zip archive and the

00:21:52.066 --> 00:21:53.986 A:middle
file size decreased by a bit

00:21:53.986 --> 00:21:54.976 A:middle
over 1%.

00:21:55.606 --> 00:21:57.016 A:middle
That doesn't seem much and maybe

00:21:57.016 --> 00:21:58.036 A:middle
you shouldn't be compressing it

00:21:58.036 --> 00:21:58.326 A:middle
at all.

00:22:00.546 --> 00:22:02.306 A:middle
Next, let's see task summary

00:22:02.306 --> 00:22:03.726 A:middle
detail which aggregates all of

00:22:03.726 --> 00:22:04.766 A:middle
the compression tasks.

00:22:05.286 --> 00:22:06.906 A:middle
It provides three aggregation

00:22:06.906 --> 00:22:09.426 A:middle
levels: compression kind, source

00:22:09.426 --> 00:22:11.046 A:middle
extension and algorithm.

00:22:12.286 --> 00:22:13.666 A:middle
On the right we see different

00:22:13.666 --> 00:22:15.406 A:middle
statistical information such as

00:22:15.496 --> 00:22:16.786 A:middle
average compression ratio,

00:22:17.086 --> 00:22:19.586 A:middle
duration or total saved space.

00:22:20.556 --> 00:22:22.406 A:middle
This detail is very useful for

00:22:22.406 --> 00:22:23.516 A:middle
comparing between different

00:22:23.516 --> 00:22:25.206 A:middle
algorithms or looking at how

00:22:25.206 --> 00:22:27.026 A:middle
compression ratio changes along

00:22:27.026 --> 00:22:27.786 A:middle
with the file type.

00:22:28.736 --> 00:22:30.556 A:middle
For example, we can see that our

00:22:30.556 --> 00:22:33.246 A:middle
JPEG file size decreased by on

00:22:33.246 --> 00:22:35.986 A:middle
average by 34% which seems

00:22:35.986 --> 00:22:37.026 A:middle
pretty good for already

00:22:37.026 --> 00:22:38.066 A:middle
heavily-compressed file.

00:22:38.066 --> 00:22:40.966 A:middle
Now let's take a look at how it

00:22:40.966 --> 00:22:42.836 A:middle
all looks in the Instrument

00:22:42.836 --> 00:22:43.376 A:middle
Inspector.

00:22:47.236 --> 00:22:48.996 A:middle
We have OSSignpost table over

00:22:48.996 --> 00:22:51.356 A:middle
here which is a point schema.

00:22:51.946 --> 00:22:54.286 A:middle
It looks at all of our begin and

00:22:54.286 --> 00:22:54.986 A:middle
end events.

00:22:56.356 --> 00:22:58.166 A:middle
We also have two tables for our

00:22:58.166 --> 00:22:59.506 A:middle
signposts.

00:23:00.256 --> 00:23:02.156 A:middle
Here is our execution table.

00:23:02.446 --> 00:23:03.966 A:middle
It contains all of the data

00:23:03.966 --> 00:23:05.826 A:middle
about tasks that we logged, but

00:23:05.826 --> 00:23:07.396 A:middle
now it's formatted according to

00:23:07.396 --> 00:23:08.736 A:middle
the engineering types that we

00:23:08.736 --> 00:23:09.126 A:middle
assigned.

00:23:09.696 --> 00:23:13.296 A:middle
On the right over here we can

00:23:13.296 --> 00:23:14.816 A:middle
see that this table is directly

00:23:14.816 --> 00:23:15.866 A:middle
consumed by the UI.

00:23:19.406 --> 00:23:20.406 A:middle
I'm pretty happy about my

00:23:20.406 --> 00:23:21.306 A:middle
instruments so far.

00:23:21.896 --> 00:23:22.976 A:middle
One thing I would like to

00:23:22.976 --> 00:23:24.556 A:middle
improve on is how the waiting

00:23:24.556 --> 00:23:25.746 A:middle
tasks are represented.

00:23:26.516 --> 00:23:27.736 A:middle
Instead of seeing specific

00:23:27.736 --> 00:23:29.166 A:middle
intervals, I would like to have

00:23:29.286 --> 00:23:31.396 A:middle
some way of summarizing them to

00:23:31.496 --> 00:23:32.946 A:middle
clearly point out the areas of

00:23:33.036 --> 00:23:33.536 A:middle
higher load.

00:23:34.396 --> 00:23:35.366 A:middle
I think that Daniel might have

00:23:35.366 --> 00:23:36.746 A:middle
some ideas on how to achieve it.

00:23:37.426 --> 00:23:37.796 A:middle
Daniel?

00:23:41.516 --> 00:23:45.796 A:middle
[ Applause ]

00:23:46.296 --> 00:23:46.946 A:middle
&gt;&gt; Thanks, Kasper.

00:23:46.946 --> 00:23:48.996 A:middle
As Kasper showed, the OSSignpost

00:23:48.996 --> 00:23:50.276 A:middle
instrument in the library and

00:23:50.476 --> 00:23:52.316 A:middle
the Inspector are great ways to

00:23:52.316 --> 00:23:54.006 A:middle
visualize your raw data and to

00:23:54.006 --> 00:23:55.246 A:middle
check that instrument sees the

00:23:55.246 --> 00:23:56.046 A:middle
data you expect.

00:23:56.646 --> 00:23:58.496 A:middle
And even without diving into

00:23:58.496 --> 00:23:59.496 A:middle
writing a custom Eclipse

00:23:59.496 --> 00:24:01.066 A:middle
modeler, Kasper was able to

00:23:59.496 --> 00:24:01.066 A:middle
modeler, Kasper was able to

00:24:01.116 --> 00:24:02.126 A:middle
present an instrument that

00:24:02.126 --> 00:24:03.306 A:middle
presented his data in a more

00:24:03.306 --> 00:24:04.896 A:middle
meaningful way using his

00:24:04.976 --> 00:24:05.986 A:middle
framework's compression

00:24:05.986 --> 00:24:06.646 A:middle
concepts.

00:24:07.066 --> 00:24:08.586 A:middle
There were just four trace

00:24:08.586 --> 00:24:10.686 A:middle
points and two OSSignpost

00:24:10.686 --> 00:24:11.486 A:middle
interval schemas.

00:24:12.336 --> 00:24:13.906 A:middle
That said, it wasn't quite the

00:24:13.906 --> 00:24:15.476 A:middle
profiling experience he wanted

00:24:15.476 --> 00:24:15.846 A:middle
to create.

00:24:16.596 --> 00:24:18.396 A:middle
Now custom modelers are a great

00:24:18.396 --> 00:24:19.736 A:middle
way for tailoring that

00:24:19.736 --> 00:24:20.406 A:middle
experience.

00:24:20.826 --> 00:24:22.406 A:middle
They all you to fuse data for

00:24:22.406 --> 00:24:23.926 A:middle
multiple log handles and even

00:24:23.926 --> 00:24:25.296 A:middle
use data from built-in tables.

00:24:25.936 --> 00:24:27.236 A:middle
They enable you to embed more

00:24:27.356 --> 00:24:29.326 A:middle
complex logic, to maintain

00:24:29.326 --> 00:24:31.076 A:middle
state, and the reason about the

00:24:31.076 --> 00:24:32.526 A:middle
order of events.

00:24:32.886 --> 00:24:33.996 A:middle
Writing your own custom modeler

00:24:33.996 --> 00:24:35.306 A:middle
can also be useful for some of

00:24:35.306 --> 00:24:37.416 A:middle
the more custom graphing and

00:24:37.506 --> 00:24:38.576 A:middle
detailed use schemas.

00:24:39.206 --> 00:24:40.826 A:middle
The point schema, interval

00:24:40.826 --> 00:24:42.456 A:middle
schema and modeler tags are a

00:24:42.456 --> 00:24:44.086 A:middle
great way to get started, but

00:24:44.086 --> 00:24:45.016 A:middle
it's a deep subject we don't

00:24:45.016 --> 00:24:45.886 A:middle
have time to cover in this

00:24:45.886 --> 00:24:46.206 A:middle
session.

00:24:46.526 --> 00:24:48.046 A:middle
For more on custom modeling

00:24:48.046 --> 00:24:50.046 A:middle
though, the 2019 Modeling and

00:24:50.046 --> 00:24:51.606 A:middle
Custom Instruments talk goes

00:24:51.606 --> 00:24:52.926 A:middle
into a lot more depth and it

00:24:52.926 --> 00:24:53.826 A:middle
comes with sample code.

00:24:54.666 --> 00:24:56.246 A:middle
So let's move on to talking

00:24:56.246 --> 00:24:58.826 A:middle
about the UI part of a profiling

00:24:58.826 --> 00:25:01.056 A:middle
experience, visualization.

00:24:58.826 --> 00:25:01.056 A:middle
experience, visualization.

00:25:02.426 --> 00:25:03.736 A:middle
Visualization is all about the

00:25:03.736 --> 00:25:06.106 A:middle
chance for you as the author to

00:25:06.106 --> 00:25:07.076 A:middle
tell your story to the

00:25:07.076 --> 00:25:08.076 A:middle
developers who will use your

00:25:08.076 --> 00:25:08.336 A:middle
code.

00:25:08.336 --> 00:25:10.386 A:middle
And the most important principle

00:25:10.386 --> 00:25:12.896 A:middle
to remember is that data is not

00:25:12.896 --> 00:25:14.286 A:middle
the same thing as a story.

00:25:15.216 --> 00:25:17.326 A:middle
Just as Kasper showed by looking

00:25:17.326 --> 00:25:18.726 A:middle
at the built-in OSSignpost

00:25:18.726 --> 00:25:20.876 A:middle
graphs, raw intervals are only

00:25:20.876 --> 00:25:21.866 A:middle
good at conveying meaning to

00:25:21.866 --> 00:25:22.356 A:middle
their author.

00:25:23.356 --> 00:25:25.106 A:middle
Users of your tool aren't going

00:25:25.106 --> 00:25:26.616 A:middle
to intuitively know whether a

00:25:26.616 --> 00:25:28.896 A:middle
gap in the timeline is good or

00:25:28.896 --> 00:25:31.066 A:middle
bad or what processing phase was

00:25:31.106 --> 00:25:32.126 A:middle
supposed to come next but

00:25:32.126 --> 00:25:32.536 A:middle
didn't.

00:25:33.606 --> 00:25:34.366 A:middle
As the developer of an

00:25:34.366 --> 00:25:35.966 A:middle
instruments package, you get to

00:25:35.966 --> 00:25:37.416 A:middle
go beyond just building

00:25:37.416 --> 00:25:38.816 A:middle
visualization showing what

00:25:38.816 --> 00:25:39.326 A:middle
happened.

00:25:39.946 --> 00:25:41.406 A:middle
You get to teach and diagnose.

00:25:41.926 --> 00:25:43.136 A:middle
You get to help your users find

00:25:43.136 --> 00:25:44.186 A:middle
problems even when you're not

00:25:44.186 --> 00:25:44.416 A:middle
there.

00:25:45.756 --> 00:25:47.236 A:middle
And visualization isn't just

00:25:47.236 --> 00:25:48.046 A:middle
about the graph either.

00:25:48.546 --> 00:25:49.606 A:middle
Sometimes the best way to

00:25:49.606 --> 00:25:51.466 A:middle
communicate a problem is with a

00:25:51.466 --> 00:25:53.126 A:middle
right set of statistical data or

00:25:53.126 --> 00:25:55.136 A:middle
with a well-crafted textual

00:25:55.136 --> 00:25:56.676 A:middle
narrative of exactly what went

00:25:56.676 --> 00:25:56.976 A:middle
wrong.

00:25:58.256 --> 00:26:00.196 A:middle
The reason that graphing is so

00:25:58.256 --> 00:26:00.196 A:middle
The reason that graphing is so

00:26:00.196 --> 00:26:01.876 A:middle
important though is that most of

00:26:01.876 --> 00:26:02.826 A:middle
the time it's the user's

00:26:02.826 --> 00:26:03.436 A:middle
starting point.

00:26:03.816 --> 00:26:04.886 A:middle
It's the first page to your

00:26:04.886 --> 00:26:05.516 A:middle
story's book.

00:26:06.636 --> 00:26:08.216 A:middle
Visualization should help others

00:26:08.216 --> 00:26:10.266 A:middle
learn, understand and debug, and

00:26:10.266 --> 00:26:11.906 A:middle
the selfish motivation is that

00:26:11.976 --> 00:26:13.656 A:middle
good tools also speed up triage.

00:26:14.306 --> 00:26:15.006 A:middle
That's the goal of

00:26:15.006 --> 00:26:16.836 A:middle
visualization, making problems

00:26:16.836 --> 00:26:17.266 A:middle
apparent.

00:26:17.986 --> 00:26:19.206 A:middle
Graphs are the first summary

00:26:19.206 --> 00:26:20.476 A:middle
that you'll see and they should

00:26:20.476 --> 00:26:21.546 A:middle
draw your eyes to areas of

00:26:21.546 --> 00:26:22.036 A:middle
importance.

00:26:22.646 --> 00:26:23.896 A:middle
And once you've started digging

00:26:23.896 --> 00:26:25.406 A:middle
in, that's where detail views

00:26:25.406 --> 00:26:27.206 A:middle
and metrics should be centered

00:26:27.206 --> 00:26:28.736 A:middle
around those core concepts in

00:26:28.736 --> 00:26:29.806 A:middle
your code.

00:26:29.986 --> 00:26:31.456 A:middle
Now since Instruments deals with

00:26:31.926 --> 00:26:33.086 A:middle
two types of time-ordered data,

00:26:33.316 --> 00:26:34.756 A:middle
points and intervals, I want to

00:26:34.756 --> 00:26:35.976 A:middle
talk through ways of displaying

00:26:35.976 --> 00:26:36.886 A:middle
both.

00:26:37.856 --> 00:26:40.106 A:middle
To summarize .events, it helps

00:26:40.106 --> 00:26:41.566 A:middle
to evaluate their importance.

00:26:42.076 --> 00:26:43.766 A:middle
If they're all relatively equal,

00:26:44.006 --> 00:26:45.596 A:middle
then a histogram is a really

00:26:45.596 --> 00:26:46.926 A:middle
great way to show the density of

00:26:46.926 --> 00:26:48.156 A:middle
events on a timeline.

00:26:48.726 --> 00:26:50.346 A:middle
The taller bars immediately

00:26:50.346 --> 00:26:51.556 A:middle
convey at a quick glance where

00:26:51.556 --> 00:26:52.936 A:middle
to start and where to zoom in.

00:26:53.416 --> 00:26:54.656 A:middle
And for custom instruments, the

00:26:54.656 --> 00:26:55.706 A:middle
graphing behavior is easy to

00:26:55.706 --> 00:26:56.276 A:middle
customize.

00:26:57.076 --> 00:26:58.466 A:middle
The histogram element allows you

00:26:58.466 --> 00:26:59.716 A:middle
to specify the width of each

00:26:59.716 --> 00:27:01.626 A:middle
time bucket and there's a best

00:26:59.716 --> 00:27:01.626 A:middle
time bucket and there's a best

00:27:01.626 --> 00:27:03.286 A:middle
for resolution element that lets

00:27:03.286 --> 00:27:04.306 A:middle
you use a histogram when the

00:27:04.306 --> 00:27:06.406 A:middle
user zooms out and then swap for

00:27:06.406 --> 00:27:08.286 A:middle
a plot of the individual events

00:27:08.426 --> 00:27:10.826 A:middle
when the user zooms in.

00:27:12.036 --> 00:27:14.236 A:middle
Now, when .events vary in

00:27:14.266 --> 00:27:15.956 A:middle
importance, it's sometimes

00:27:15.956 --> 00:27:17.346 A:middle
helpful to dedicate a lane to

00:27:17.346 --> 00:27:18.896 A:middle
the critical events.

00:27:19.946 --> 00:27:21.546 A:middle
Multiple graphs and detail views

00:27:21.656 --> 00:27:22.986 A:middle
can reference data from the same

00:27:22.986 --> 00:27:24.916 A:middle
table, so specifying the top

00:27:24.916 --> 00:27:26.696 A:middle
plot just means describing to

00:27:26.696 --> 00:27:28.226 A:middle
Instruments how to slice and

00:27:28.226 --> 00:27:29.756 A:middle
choose which values to display

00:27:29.756 --> 00:27:30.306 A:middle
from the table.

00:27:30.736 --> 00:27:32.306 A:middle
Now both of these can be

00:27:32.306 --> 00:27:34.066 A:middle
accomplished purely in XML and

00:27:34.066 --> 00:27:35.006 A:middle
without a custom modeler.

00:27:37.216 --> 00:27:38.786 A:middle
Tabular summaries of either

00:27:38.826 --> 00:27:40.406 A:middle
point or interval data are your

00:27:40.406 --> 00:27:41.756 A:middle
opportunity to define what

00:27:41.756 --> 00:27:42.596 A:middle
metrics are important.

00:27:43.486 --> 00:27:45.116 A:middle
Within aggregation detail view,

00:27:45.266 --> 00:27:46.656 A:middle
there are functions like Min,

00:27:46.656 --> 00:27:48.026 A:middle
Max, Average and Standard

00:27:48.026 --> 00:27:50.016 A:middle
Deviation for combining values.

00:27:50.746 --> 00:27:52.256 A:middle
And new users will look to these

00:27:52.296 --> 00:27:54.456 A:middle
summaries that you provide for

00:27:54.456 --> 00:27:56.366 A:middle
guidance on what's important and

00:27:56.366 --> 00:27:57.246 A:middle
what to optimize.

00:27:57.936 --> 00:27:59.696 A:middle
So even display attributes like

00:28:00.246 --> 00:28:01.456 A:middle
what the title of the columns

00:28:01.456 --> 00:28:03.026 A:middle
are or what order they appear in

00:28:03.336 --> 00:28:03.876 A:middle
really matter.

00:28:04.536 --> 00:28:07.356 A:middle
Now when users dig further into

00:28:07.356 --> 00:28:08.856 A:middle
the details, the narrative

00:28:08.856 --> 00:28:10.586 A:middle
engineering type is a great way

00:28:10.766 --> 00:28:11.896 A:middle
to explain what's going on.

00:28:12.576 --> 00:28:14.156 A:middle
It allows you to use natural

00:28:14.156 --> 00:28:15.196 A:middle
language and other type

00:28:15.256 --> 00:28:17.616 A:middle
formatters to explain runtime

00:28:17.616 --> 00:28:18.536 A:middle
behavior in a way that's

00:28:18.536 --> 00:28:19.076 A:middle
approachable.

00:28:19.706 --> 00:28:21.806 A:middle
These views are a great way to

00:28:21.806 --> 00:28:23.626 A:middle
tell users what was expected to

00:28:23.626 --> 00:28:25.936 A:middle
happen and didn't, or when

00:28:25.936 --> 00:28:27.116 A:middle
something interesting happened

00:28:27.116 --> 00:28:27.876 A:middle
that they might want to

00:28:27.876 --> 00:28:28.676 A:middle
investigate further.

00:28:30.046 --> 00:28:31.976 A:middle
So plotting interval data can be

00:28:31.976 --> 00:28:32.536 A:middle
a bit trickier.

00:28:33.736 --> 00:28:35.816 A:middle
Unlike points, intervals won't

00:28:35.816 --> 00:28:36.816 A:middle
usually fit within a single

00:28:36.816 --> 00:28:37.936 A:middle
vertical space because of

00:28:37.936 --> 00:28:38.336 A:middle
overlap.

00:28:38.766 --> 00:28:41.566 A:middle
If you can plan for a fixed or

00:28:41.566 --> 00:28:42.776 A:middle
bounded number of overlapping

00:28:42.776 --> 00:28:44.306 A:middle
intervals, there are two ways to

00:28:44.306 --> 00:28:46.176 A:middle
split a lane into multiple

00:28:46.176 --> 00:28:47.376 A:middle
visual areas vertically.

00:28:48.286 --> 00:28:49.996 A:middle
Qualified plots are useful for

00:28:49.996 --> 00:28:51.296 A:middle
splitting lanes into multiple

00:28:51.296 --> 00:28:52.496 A:middle
spaces with a single title,

00:28:53.236 --> 00:28:55.476 A:middle
while instance plots are useful

00:28:55.476 --> 00:28:56.686 A:middle
for each getting their own

00:28:56.686 --> 00:28:57.026 A:middle
title.

00:28:57.026 --> 00:29:00.056 A:middle
Now the OSSignpost tool uses

00:28:57.026 --> 00:29:00.056 A:middle
Now the OSSignpost tool uses

00:29:00.056 --> 00:29:00.916 A:middle
both of these techniques

00:29:00.916 --> 00:29:02.436 A:middle
together, but it only works well

00:29:02.436 --> 00:29:04.046 A:middle
when there is a limited number

00:29:04.046 --> 00:29:05.106 A:middle
of overlapping intervals to

00:29:05.106 --> 00:29:05.446 A:middle
display.

00:29:06.416 --> 00:29:07.226 A:middle
When there are a lot,

00:29:08.126 --> 00:29:09.986 A:middle
hierarchies, new in Instruments

00:29:09.986 --> 00:29:11.446 A:middle
11, may be the way to go.

00:29:12.456 --> 00:29:13.576 A:middle
Separating trace data into

00:29:13.576 --> 00:29:15.776 A:middle
nested tracks makes it easier to

00:29:15.866 --> 00:29:18.206 A:middle
filter, to find and even pin

00:29:18.206 --> 00:29:19.146 A:middle
just what you're looking for,

00:29:19.706 --> 00:29:20.776 A:middle
especially when the number of

00:29:20.776 --> 00:29:22.236 A:middle
graphing contexts is large.

00:29:23.176 --> 00:29:24.766 A:middle
But whether or not you provide a

00:29:24.766 --> 00:29:25.786 A:middle
hierarchy of tracks, it's

00:29:25.786 --> 00:29:26.906 A:middle
important to plan for

00:29:26.906 --> 00:29:28.256 A:middle
summarizing your interval data

00:29:28.846 --> 00:29:30.516 A:middle
either at each level of your

00:29:30.516 --> 00:29:32.386 A:middle
hierarchy or as the primary

00:29:32.386 --> 00:29:33.276 A:middle
graph of your instrument.

00:29:33.736 --> 00:29:36.986 A:middle
For simple interval data, it

00:29:36.986 --> 00:29:38.016 A:middle
might be tempting to apply the

00:29:38.016 --> 00:29:39.636 A:middle
same solution as for points,

00:29:40.086 --> 00:29:41.186 A:middle
using a histogram element.

00:29:42.386 --> 00:29:43.706 A:middle
However, this only works well if

00:29:43.706 --> 00:29:44.846 A:middle
you have short intervals as the

00:29:44.846 --> 00:29:46.876 A:middle
histogram element aggregates by

00:29:46.936 --> 00:29:48.106 A:middle
start time.

00:29:48.336 --> 00:29:49.846 A:middle
With longer intervals, this can

00:29:49.846 --> 00:29:52.276 A:middle
cause a left-sided skew and it

00:29:52.276 --> 00:29:53.346 A:middle
produces very large values.

00:29:54.836 --> 00:29:56.006 A:middle
More importantly, when you graph

00:29:56.056 --> 00:29:59.046 A:middle
things that have duration, don't

00:29:59.046 --> 00:30:01.006 A:middle
graph time on the Y axis as it's

00:29:59.046 --> 00:30:01.006 A:middle
graph time on the Y axis as it's

00:30:01.406 --> 00:30:02.546 A:middle
already the X axis.

00:30:03.446 --> 00:30:05.206 A:middle
Metrics like percent utilization

00:30:05.206 --> 00:30:06.246 A:middle
are better for displaying this

00:30:06.296 --> 00:30:08.296 A:middle
kind of data.

00:30:08.756 --> 00:30:10.606 A:middle
Now in more real-world usage,

00:30:10.696 --> 00:30:11.866 A:middle
intervals overlap a lot more,

00:30:12.386 --> 00:30:13.646 A:middle
and so I want to show three

00:30:13.646 --> 00:30:16.136 A:middle
examples of summary graphs and

00:30:16.136 --> 00:30:17.806 A:middle
how the represented concept in

00:30:17.806 --> 00:30:18.826 A:middle
your framework and usage

00:30:18.826 --> 00:30:20.686 A:middle
patterns that you want can

00:30:20.686 --> 00:30:22.036 A:middle
impact your table schemas and

00:30:22.066 --> 00:30:23.376 A:middle
held determine the presentation

00:30:23.376 --> 00:30:23.676 A:middle
style.

00:30:25.126 --> 00:30:26.586 A:middle
So for some scenarios,

00:30:26.746 --> 00:30:28.566 A:middle
persistent overlap indicates

00:30:28.686 --> 00:30:29.966 A:middle
high resource utilization.

00:30:30.606 --> 00:30:31.816 A:middle
And for this kind of data, a

00:30:31.816 --> 00:30:33.326 A:middle
quantized load average is a good

00:30:33.326 --> 00:30:35.036 A:middle
way to visualize it, even

00:30:35.036 --> 00:30:36.216 A:middle
coloring some extreme values.

00:30:37.316 --> 00:30:39.026 A:middle
Now Eclipse modelers and

00:30:39.026 --> 00:30:39.736 A:middle
Instruments are great at

00:30:39.736 --> 00:30:40.836 A:middle
maintaining state and fusing

00:30:40.836 --> 00:30:42.396 A:middle
data, so combining that

00:30:42.396 --> 00:30:44.516 A:middle
OSSignpost event stream with the

00:30:44.516 --> 00:30:46.306 A:middle
input from an internal timer

00:30:46.306 --> 00:30:48.676 A:middle
tag, a modeler can calculate and

00:30:48.676 --> 00:30:50.346 A:middle
emit a quantized utilization

00:30:50.346 --> 00:30:51.666 A:middle
average when a timer signal

00:30:51.666 --> 00:30:51.966 A:middle
arrives.

00:30:52.486 --> 00:30:53.896 A:middle
Now the output table of a

00:30:53.896 --> 00:30:55.956 A:middle
modeler might look like this,

00:30:55.956 --> 00:30:57.166 A:middle
expressing just four columns of

00:30:57.166 --> 00:30:58.926 A:middle
data to draw the plot that you

00:30:58.926 --> 00:31:01.146 A:middle
see, including a utilization

00:30:58.926 --> 00:31:01.146 A:middle
see, including a utilization

00:31:01.146 --> 00:31:02.706 A:middle
column for determining the

00:31:02.706 --> 00:31:04.886 A:middle
plot's value and a severity

00:31:04.886 --> 00:31:06.106 A:middle
column for determining color.

00:31:06.656 --> 00:31:09.966 A:middle
Now for other scenarios, lots of

00:31:10.006 --> 00:31:10.996 A:middle
quickly running intervals might

00:31:11.026 --> 00:31:12.236 A:middle
be more important because they

00:31:12.236 --> 00:31:13.786 A:middle
represent inefficient use of

00:31:13.786 --> 00:31:14.286 A:middle
your framework.

00:31:15.316 --> 00:31:16.796 A:middle
Looking at the same data as the

00:31:16.796 --> 00:31:19.056 A:middle
last example, a better graph

00:31:19.116 --> 00:31:20.486 A:middle
might be based on the modeler

00:31:20.486 --> 00:31:21.956 A:middle
counting the number of unique

00:31:21.956 --> 00:31:23.656 A:middle
intervals seen within a specific

00:31:23.656 --> 00:31:24.236 A:middle
time period.

00:31:24.986 --> 00:31:26.796 A:middle
Now the modeler's output table

00:31:26.796 --> 00:31:27.806 A:middle
would look very similar to the

00:31:27.806 --> 00:31:30.616 A:middle
last, but the user's eye is

00:31:30.646 --> 00:31:32.156 A:middle
immediately drawn to a very

00:31:32.266 --> 00:31:33.516 A:middle
different area of the timeline

00:31:33.876 --> 00:31:34.906 A:middle
which helps with zooming in and

00:31:34.906 --> 00:31:36.066 A:middle
investigating the cause of these

00:31:36.066 --> 00:31:36.636 A:middle
short intervals.

00:31:37.246 --> 00:31:39.506 A:middle
And both of the first two

00:31:39.506 --> 00:31:41.576 A:middle
examples summarize the data into

00:31:41.576 --> 00:31:42.796 A:middle
10-millisecond groups.

00:31:43.006 --> 00:31:45.096 A:middle
But what if the exact periods of

00:31:45.096 --> 00:31:46.216 A:middle
the overlap are important,

00:31:46.456 --> 00:31:48.346 A:middle
differentiating between one, two

00:31:48.346 --> 00:31:50.356 A:middle
or more concurrent intervals?

00:31:51.396 --> 00:31:52.576 A:middle
Well, instead of quantizing

00:31:52.926 --> 00:31:55.186 A:middle
based on time, a more helpful

00:31:55.186 --> 00:31:58.166 A:middle
graph might categorize these by

00:31:58.166 --> 00:31:59.726 A:middle
degree of overlap and show the

00:31:59.726 --> 00:32:01.076 A:middle
exact durations.

00:31:59.726 --> 00:32:01.076 A:middle
exact durations.

00:32:02.956 --> 00:32:05.136 A:middle
A modeler tracking just the

00:32:05.136 --> 00:32:07.366 A:middle
OSSignpost events could output

00:32:07.366 --> 00:32:08.316 A:middle
an additional table with a

00:32:08.316 --> 00:32:09.226 A:middle
custom interval schema.

00:32:10.436 --> 00:32:12.486 A:middle
And this time, the schema would

00:32:12.486 --> 00:32:13.476 A:middle
be filled in with a variable

00:32:13.476 --> 00:32:14.906 A:middle
duration and a description

00:32:14.906 --> 00:32:16.016 A:middle
column for use as a label.

00:32:17.236 --> 00:32:18.946 A:middle
So all three of these are just

00:32:18.946 --> 00:32:20.926 A:middle
examples but hopefully they help

00:32:20.926 --> 00:32:22.506 A:middle
to show that when it comes to

00:32:22.506 --> 00:32:23.656 A:middle
the presentation of your data,

00:32:24.176 --> 00:32:25.626 A:middle
the concepts matter when you're

00:32:25.626 --> 00:32:26.626 A:middle
designing a graphing schema.

00:32:26.626 --> 00:32:29.096 A:middle
Now for many cases an

00:32:29.096 --> 00:32:30.546 A:middle
automatically generated modeler

00:32:30.766 --> 00:32:31.606 A:middle
will give you the power and

00:32:31.606 --> 00:32:33.116 A:middle
flexibility you need to create

00:32:33.116 --> 00:32:33.986 A:middle
the right experience.

00:32:34.706 --> 00:32:35.876 A:middle
But there will definitely be

00:32:35.876 --> 00:32:37.326 A:middle
times when you want to have more

00:32:37.326 --> 00:32:38.956 A:middle
than one input or output.

00:32:39.506 --> 00:32:40.826 A:middle
And for those cases in some of

00:32:40.826 --> 00:32:42.436 A:middle
the example tables I've showed,

00:32:42.966 --> 00:32:44.816 A:middle
custom modelers can provide that

00:32:44.816 --> 00:32:45.796 A:middle
additional control and

00:32:45.796 --> 00:32:47.466 A:middle
flexibility to express their

00:32:47.466 --> 00:32:50.006 A:middle
concepts visually or textually,

00:32:50.006 --> 00:32:51.886 A:middle
enrich narratives and graphs and

00:32:51.886 --> 00:32:52.206 A:middle
details.

00:32:53.066 --> 00:32:54.526 A:middle
So now I'm excited to hand it

00:32:54.526 --> 00:32:55.646 A:middle
back to Kasper to see what

00:32:55.646 --> 00:32:56.756 A:middle
visualizations he's come up

00:32:57.466 --> 00:32:57.886 A:middle
with.

00:32:58.516 --> 00:33:02.376 A:middle
[ Applause ]

00:32:58.516 --> 00:33:02.376 A:middle
[ Applause ]

00:33:02.876 --> 00:33:03.516 A:middle
&gt;&gt; Thank you, Daniel.

00:33:04.216 --> 00:33:06.226 A:middle
I played around with custom

00:33:06.226 --> 00:33:07.886 A:middle
modelers and managed to improve

00:33:07.886 --> 00:33:09.476 A:middle
on our existing instrumentation.

00:33:10.036 --> 00:33:10.656 A:middle
Let's take a look.

00:33:11.126 --> 00:33:12.876 A:middle
I will start with the Solar

00:33:12.876 --> 00:33:13.996 A:middle
Conversion template that I

00:33:13.996 --> 00:33:14.336 A:middle
crafted.

00:33:18.046 --> 00:33:19.836 A:middle
It now includes a file system

00:33:19.836 --> 00:33:21.526 A:middle
activity instrument to provide

00:33:21.526 --> 00:33:22.796 A:middle
some additional information

00:33:23.026 --> 00:33:24.586 A:middle
about I/O operations overhead

00:33:24.706 --> 00:33:26.106 A:middle
when using compression library.

00:33:27.296 --> 00:33:27.886 A:middle
Let's record.

00:33:30.046 --> 00:33:31.316 A:middle
Now I'm recording in the

00:33:31.316 --> 00:33:33.426 A:middle
windowed mode to reduce the

00:33:33.426 --> 00:33:34.836 A:middle
overhead of the recording.

00:33:36.276 --> 00:33:38.606 A:middle
Instrument is transferring all

00:33:38.606 --> 00:33:40.116 A:middle
the data from the host and

00:33:40.116 --> 00:33:40.936 A:middle
running the modelers.

00:33:46.056 --> 00:33:47.206 A:middle
Let's examine the data now.

00:33:47.846 --> 00:33:50.096 A:middle
I can immediately see that

00:33:50.096 --> 00:33:51.566 A:middle
there's some correlation between

00:33:51.566 --> 00:33:53.436 A:middle
file system activity and my

00:33:53.436 --> 00:33:54.896 A:middle
execution signpost over here.

00:33:55.536 --> 00:33:57.636 A:middle
Let's focus on the longer zip

00:33:57.636 --> 00:33:58.626 A:middle
compression task that we

00:33:58.626 --> 00:33:59.376 A:middle
analyzed before.

00:34:00.466 --> 00:34:01.826 A:middle
It was good to have it colored

00:34:01.826 --> 00:34:03.266 A:middle
on the red to get the user's

00:34:03.266 --> 00:34:03.756 A:middle
attention.

00:34:04.056 --> 00:34:05.446 A:middle
But even better it would be to

00:34:05.486 --> 00:34:06.736 A:middle
provide some additional

00:34:06.736 --> 00:34:08.656 A:middle
information by using narratives.

00:34:09.966 --> 00:34:11.726 A:middle
I wrote modeler to detect low

00:34:11.726 --> 00:34:13.735 A:middle
compression ratio situations and

00:34:13.735 --> 00:34:15.156 A:middle
present some possible solutions.

00:34:15.826 --> 00:34:18.156 A:middle
Let's take a look at the

00:34:18.156 --> 00:34:19.606 A:middle
suggestions detail to take a

00:34:19.606 --> 00:34:20.806 A:middle
look at the output of this

00:34:20.806 --> 00:34:21.505 A:middle
modeler.

00:34:25.295 --> 00:34:27.246 A:middle
This modeler -- and we get one

00:34:27.396 --> 00:34:27.966 A:middle
suggestion.

00:34:28.366 --> 00:34:30.356 A:middle
It's saying that file size for

00:34:30.656 --> 00:34:32.696 A:middle
archive zip deceased by a bit

00:34:32.696 --> 00:34:33.766 A:middle
over 1%.

00:34:34.386 --> 00:34:35.876 A:middle
And compression may not be

00:34:35.876 --> 00:34:37.036 A:middle
necessary for this file.

00:34:38.016 --> 00:34:39.716 A:middle
It's also hinting that if speed

00:34:39.716 --> 00:34:41.335 A:middle
is not an issue, I should try

00:34:41.335 --> 00:34:43.716 A:middle
using LZMA algorithm which may

00:34:43.716 --> 00:34:45.025 A:middle
provide higher compression

00:34:45.025 --> 00:34:45.466 A:middle
ratio.

00:34:46.306 --> 00:34:47.186 A:middle
That seems useful.

00:34:47.186 --> 00:34:49.005 A:middle
I can now try to change the

00:34:49.005 --> 00:34:50.775 A:middle
algorithm, record again and

00:34:50.775 --> 00:34:51.976 A:middle
reevaluate the results.

00:34:54.076 --> 00:34:55.136 A:middle
Let's take a look at how the

00:34:55.136 --> 00:34:56.376 A:middle
waiting tasks are summarized.

00:34:57.005 --> 00:34:58.996 A:middle
I'm calculating average load of

00:34:58.996 --> 00:34:59.886 A:middle
the waiting tasks.

00:35:00.536 --> 00:35:03.376 A:middle
This way users can clearly point

00:35:03.376 --> 00:35:04.776 A:middle
out the areas of higher load.

00:35:05.926 --> 00:35:07.406 A:middle
Let's take a look at this area

00:35:07.406 --> 00:35:08.786 A:middle
which is colored in red.

00:35:10.216 --> 00:35:12.136 A:middle
It seems that a lot of tasks are

00:35:12.136 --> 00:35:13.726 A:middle
waiting on average, but as they

00:35:13.726 --> 00:35:15.236 A:middle
get executed on the channels

00:35:15.236 --> 00:35:16.816 A:middle
here, the number is going down.

00:35:17.976 --> 00:35:19.816 A:middle
Users can analyze areas like

00:35:19.816 --> 00:35:21.906 A:middle
that and if necessary increase

00:35:21.906 --> 00:35:22.886 A:middle
the number of compression

00:35:22.886 --> 00:35:24.286 A:middle
channels to achieve higher level

00:35:24.286 --> 00:35:25.076 A:middle
of concurrency.

00:35:26.576 --> 00:35:28.256 A:middle
Actually, this conclusion would

00:35:28.256 --> 00:35:29.736 A:middle
be a good candidate for another

00:35:29.736 --> 00:35:31.106 A:middle
suggestion in our detail.

00:35:31.106 --> 00:35:34.136 A:middle
Now let's take a look at how it

00:35:34.136 --> 00:35:36.146 A:middle
all plays out in Instrument

00:35:36.146 --> 00:35:36.656 A:middle
Inspector.

00:35:37.776 --> 00:35:39.006 A:middle
Let's search for our Solar

00:35:39.006 --> 00:35:42.096 A:middle
Compression execution table and

00:35:42.186 --> 00:35:43.076 A:middle
take a look at the binding

00:35:43.076 --> 00:35:43.596 A:middle
solution.

00:35:46.076 --> 00:35:49.006 A:middle
OSSignpost point schema data is

00:35:49.066 --> 00:35:51.656 A:middle
transferred by OSSignpost

00:35:51.656 --> 00:35:53.616 A:middle
auto-generated modeler into our

00:35:53.616 --> 00:35:55.006 A:middle
Solar Compression execution

00:35:55.006 --> 00:35:55.416 A:middle
table.

00:35:56.056 --> 00:35:57.686 A:middle
It's right here as we saw before

00:35:57.686 --> 00:35:58.846 A:middle
consumed by the UI.

00:35:59.546 --> 00:36:01.056 A:middle
We also have this new entity

00:35:59.546 --> 00:36:01.056 A:middle
We also have this new entity

00:36:01.056 --> 00:36:02.176 A:middle
over here which is our

00:36:02.176 --> 00:36:03.136 A:middle
suggestions modeler.

00:36:03.596 --> 00:36:05.196 A:middle
It's transferring intervals from

00:36:05.196 --> 00:36:07.206 A:middle
the compression execution table

00:36:07.796 --> 00:36:10.336 A:middle
into the suggestions in the

00:36:10.336 --> 00:36:11.946 A:middle
point schema which is later

00:36:12.146 --> 00:36:15.516 A:middle
driving the narrative detail.

00:36:15.676 --> 00:36:17.476 A:middle
Now I'm happy about how this

00:36:17.476 --> 00:36:19.046 A:middle
Instruments conveys the concepts

00:36:19.046 --> 00:36:20.856 A:middle
of my library and I feel that we

00:36:20.856 --> 00:36:21.786 A:middle
are ready to ship it to our

00:36:21.786 --> 00:36:22.246 A:middle
users.

00:36:22.896 --> 00:36:23.886 A:middle
Let's go back to the slides.

00:36:28.516 --> 00:36:32.776 A:middle
[ Applause ]

00:36:33.276 --> 00:36:34.396 A:middle
Creating great profiling

00:36:34.396 --> 00:36:36.186 A:middle
experience is about giving your

00:36:36.186 --> 00:36:37.466 A:middle
users a path to explore.

00:36:38.426 --> 00:36:39.956 A:middle
They should start with a useful

00:36:39.956 --> 00:36:41.376 A:middle
template which is set up to

00:36:41.376 --> 00:36:42.726 A:middle
provide necessary instruments

00:36:42.726 --> 00:36:43.766 A:middle
for looking at the issue.

00:36:44.646 --> 00:36:46.216 A:middle
Remember that if your code is

00:36:46.216 --> 00:36:47.756 A:middle
sensitive to information that is

00:36:47.756 --> 00:36:49.406 A:middle
exposed by other instrumentation

00:36:49.756 --> 00:36:51.766 A:middle
such as sampling, system tracing

00:36:51.966 --> 00:36:53.986 A:middle
or priority activity, you should

00:36:53.986 --> 00:36:55.226 A:middle
include this in your template.

00:36:56.326 --> 00:36:57.696 A:middle
When analyzing the recording,

00:36:58.016 --> 00:36:59.436 A:middle
top-level graphs should quickly

00:36:59.436 --> 00:37:01.316 A:middle
draw user attention to where the

00:36:59.436 --> 00:37:01.316 A:middle
draw user attention to where the

00:37:01.316 --> 00:37:02.556 A:middle
problems might be in the

00:37:02.556 --> 00:37:03.416 A:middle
execution timeline.

00:37:03.976 --> 00:37:05.916 A:middle
And details should lead them to

00:37:05.916 --> 00:37:07.126 A:middle
the main cause of the issue,

00:37:07.466 --> 00:37:08.636 A:middle
often providing meaningful

00:37:08.636 --> 00:37:09.076 A:middle
hints.

00:37:09.636 --> 00:37:12.016 A:middle
To help you develop even better

00:37:12.016 --> 00:37:13.806 A:middle
profiling experience, this year

00:37:13.806 --> 00:37:14.896 A:middle
we've introduced two new

00:37:14.896 --> 00:37:16.396 A:middle
features in Instruments, the

00:37:16.396 --> 00:37:17.686 A:middle
first of which is the concept of

00:37:17.686 --> 00:37:18.746 A:middle
hierarchical tracks.

00:37:19.666 --> 00:37:21.666 A:middle
One example is OSSignpost

00:37:21.666 --> 00:37:23.316 A:middle
instrument visible here which

00:37:23.316 --> 00:37:25.546 A:middle
exposes underlying subsystem and

00:37:25.546 --> 00:37:27.126 A:middle
category name space through the

00:37:27.196 --> 00:37:27.716 A:middle
hierarchy.

00:37:29.176 --> 00:37:31.056 A:middle
Hierarchies are part of custom

00:37:31.056 --> 00:37:32.616 A:middle
instruments and any hierarchy

00:37:32.616 --> 00:37:34.026 A:middle
that you saw today can be

00:37:34.026 --> 00:37:35.486 A:middle
created by your own instrument.

00:37:37.296 --> 00:37:38.856 A:middle
We also have a new way of

00:37:38.856 --> 00:37:40.056 A:middle
customizing your profiling

00:37:40.056 --> 00:37:41.846 A:middle
workflow through creating custom

00:37:41.846 --> 00:37:42.626 A:middle
track scopes.

00:37:43.996 --> 00:37:45.176 A:middle
These allow you to take a look

00:37:45.176 --> 00:37:46.536 A:middle
at data gathered in your trace

00:37:46.536 --> 00:37:47.826 A:middle
document from different

00:37:47.826 --> 00:37:49.596 A:middle
perspectives by applying track

00:37:49.596 --> 00:37:51.476 A:middle
filters or choosing different

00:37:51.476 --> 00:37:52.766 A:middle
track branches for each scope.

00:37:54.176 --> 00:37:55.756 A:middle
If I'm only interested in seeing

00:37:55.756 --> 00:37:57.496 A:middle
system calls and signposts for

00:37:57.496 --> 00:37:59.336 A:middle
compression library, or

00:37:59.336 --> 00:38:01.926 A:middle
analyzing virtual memory impact

00:37:59.336 --> 00:38:01.926 A:middle
analyzing virtual memory impact

00:38:01.926 --> 00:38:03.836 A:middle
of the application, I can create

00:38:03.836 --> 00:38:05.406 A:middle
scopes that filter out other

00:38:05.406 --> 00:38:07.166 A:middle
tracks and keep coming back to

00:38:07.166 --> 00:38:07.426 A:middle
them.

00:38:08.816 --> 00:38:10.476 A:middle
Like here I can save them in my

00:38:10.476 --> 00:38:12.296 A:middle
template to share with my team

00:38:12.516 --> 00:38:14.246 A:middle
or instrument audience.

00:38:15.616 --> 00:38:16.796 A:middle
Tools in the form of

00:38:16.846 --> 00:38:18.376 A:middle
instrumentation are a way to

00:38:18.376 --> 00:38:19.836 A:middle
take experience of interacting

00:38:19.836 --> 00:38:21.556 A:middle
with your framework from good to

00:38:21.556 --> 00:38:23.156 A:middle
great and from unknown to

00:38:23.156 --> 00:38:23.726 A:middle
trusted.

00:38:24.676 --> 00:38:26.036 A:middle
They are your opportunity to

00:38:26.096 --> 00:38:27.466 A:middle
tell stories about concepts

00:38:27.466 --> 00:38:28.576 A:middle
existing in your framework.

00:38:29.766 --> 00:38:31.466 A:middle
They should educate people and

00:38:31.466 --> 00:38:32.956 A:middle
help catch easy mistakes.

00:38:34.056 --> 00:38:35.746 A:middle
Whenever clients get performance

00:38:35.746 --> 00:38:37.566 A:middle
debugging issues, they should

00:38:37.566 --> 00:38:39.076 A:middle
turn to tools to see the answer.

00:38:39.426 --> 00:38:41.166 A:middle
And this interaction will

00:38:41.166 --> 00:38:42.676 A:middle
increase their confidence and

00:38:42.676 --> 00:38:43.646 A:middle
trust in your library.

00:38:44.306 --> 00:38:46.636 A:middle
To learn more about Custom

00:38:46.636 --> 00:38:48.016 A:middle
Instruments, please visit

00:38:48.016 --> 00:38:49.206 A:middle
Instruments Developer Help.

00:38:49.956 --> 00:38:51.106 A:middle
We also recommend looking at

00:38:51.106 --> 00:38:52.056 A:middle
these other sessions.

00:38:52.836 --> 00:38:54.086 A:middle
Thank you and have a great rest

00:38:54.086 --> 00:38:54.706 A:middle
of the conference.

00:38:55.516 --> 00:38:58.500 A:middle
[ Applause ]
