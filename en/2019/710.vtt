WEBVTT

00:00:01.176 --> 00:00:04.500 A:middle
[ Music ]

00:00:10.516 --> 00:00:14.996 A:middle
[ Applause ]

00:00:15.496 --> 00:00:16.876 A:middle
&gt;&gt; Good afternoon, ladies and

00:00:16.876 --> 00:00:17.416 A:middle
gentlemen.

00:00:18.106 --> 00:00:19.306 A:middle
Welcome to the Filesystem

00:00:19.306 --> 00:00:19.746 A:middle
session.

00:00:20.666 --> 00:00:22.556 A:middle
In this session, we're going to

00:00:22.556 --> 00:00:24.696 A:middle
cover several topics related to

00:00:24.696 --> 00:00:25.676 A:middle
the filesystems.

00:00:25.866 --> 00:00:27.946 A:middle
First, we're going to have a

00:00:27.946 --> 00:00:30.306 A:middle
look at the role a filesystem

00:00:30.376 --> 00:00:33.106 A:middle
plays in protecting system

00:00:33.106 --> 00:00:34.616 A:middle
software on macOS.

00:00:36.336 --> 00:00:38.876 A:middle
We're going to describe how

00:00:38.876 --> 00:00:41.366 A:middle
volume replication works in

00:00:41.416 --> 00:00:41.766 A:middle
APFS.

00:00:42.636 --> 00:00:45.426 A:middle
And finally, we are going to

00:00:45.946 --> 00:00:47.936 A:middle
talk about the new and very

00:00:47.936 --> 00:00:49.566 A:middle
exciting feature coming to the

00:00:49.566 --> 00:00:52.736 A:middle
devices running iOS and iPadOS,

00:00:53.376 --> 00:00:55.516 A:middle
the access to the external files

00:00:55.916 --> 00:00:57.326 A:middle
on the external media.

00:00:57.846 --> 00:01:03.146 A:middle
But before we start, let's rehab

00:00:57.846 --> 00:01:03.146 A:middle
But before we start, let's rehab

00:01:03.706 --> 00:01:06.166 A:middle
what happened to APFS recently.

00:01:06.536 --> 00:01:09.426 A:middle
APFS has been the default

00:01:09.546 --> 00:01:12.556 A:middle
filesystem it -- on iOS and tvOS

00:01:12.556 --> 00:01:17.766 A:middle
since 10.3 and on macOS since

00:01:17.846 --> 00:01:18.736 A:middle
High Sierra.

00:01:22.576 --> 00:01:24.316 A:middle
One of the features which APFS

00:01:24.316 --> 00:01:28.126 A:middle
introduced is a built-in volume

00:01:28.126 --> 00:01:28.546 A:middle
manager.

00:01:30.436 --> 00:01:32.506 A:middle
The concept of a volume is not

00:01:32.506 --> 00:01:33.836 A:middle
new to APFS.

00:01:34.326 --> 00:01:36.626 A:middle
They existed in HFS Plus.

00:01:37.876 --> 00:01:41.206 A:middle
The HFS Plus volume is a

00:01:41.206 --> 00:01:43.706 A:middle
one-to-one map to -- on this

00:01:43.836 --> 00:01:44.336 A:middle
partition.

00:01:45.006 --> 00:01:48.136 A:middle
And it occupies contiguous range

00:01:48.136 --> 00:01:49.426 A:middle
of blocks on disk.

00:01:50.756 --> 00:01:52.236 A:middle
Because of this one-to-one

00:01:52.236 --> 00:01:55.736 A:middle
mapping to partition and HFS

00:01:55.736 --> 00:01:57.666 A:middle
Plus volumes cannot be added

00:01:58.146 --> 00:01:58.756 A:middle
easily.

00:01:59.106 --> 00:02:02.266 A:middle
In order to add a new volume to

00:01:59.106 --> 00:02:02.266 A:middle
In order to add a new volume to

00:02:02.266 --> 00:02:05.576 A:middle
partitioned disk, you need first

00:02:05.576 --> 00:02:08.156 A:middle
to shrink the existing volume.

00:02:08.395 --> 00:02:10.526 A:middle
And then you can add a new

00:02:11.636 --> 00:02:12.346 A:middle
volume.

00:02:12.346 --> 00:02:14.386 A:middle
APFS volumes are a lot more

00:02:14.386 --> 00:02:17.496 A:middle
flexible because they share

00:02:17.816 --> 00:02:19.466 A:middle
their own disk partition space

00:02:20.256 --> 00:02:21.506 A:middle
with their siblings.

00:02:22.816 --> 00:02:26.486 A:middle
And that flexibility allows

00:02:27.406 --> 00:02:30.686 A:middle
higher levels of a system to

00:02:31.766 --> 00:02:33.386 A:middle
implement features which would

00:02:33.386 --> 00:02:35.546 A:middle
not otherwise be possible to

00:02:35.546 --> 00:02:37.776 A:middle
implement with the old-style

00:02:37.776 --> 00:02:38.316 A:middle
volumes.

00:02:39.876 --> 00:02:41.966 A:middle
One of us -- one of the features

00:02:42.006 --> 00:02:44.426 A:middle
which we'll implement is

00:02:44.816 --> 00:02:47.236 A:middle
protecting system software from

00:02:47.466 --> 00:02:49.806 A:middle
malicious or accidental updates.

00:02:52.716 --> 00:02:54.626 A:middle
You may remember back in the

00:02:54.816 --> 00:02:57.376 A:middle
macOS El Capitan days, we

00:02:57.376 --> 00:03:00.846 A:middle
introduced the concept of system

00:02:57.376 --> 00:03:00.846 A:middle
introduced the concept of system

00:03:00.846 --> 00:03:01.966 A:middle
integrity protection.

00:03:03.596 --> 00:03:08.126 A:middle
It was used to control access to

00:03:08.436 --> 00:03:10.926 A:middle
a part of the directory

00:03:11.006 --> 00:03:11.656 A:middle
hierarchy.

00:03:12.816 --> 00:03:14.556 A:middle
Some directories would be write

00:03:14.836 --> 00:03:16.716 A:middle
protected, while changes would

00:03:16.716 --> 00:03:18.566 A:middle
be allowed in the other parts of

00:03:18.566 --> 00:03:19.816 A:middle
the filesystems.

00:03:20.466 --> 00:03:23.036 A:middle
This year, we're taking this one

00:03:23.036 --> 00:03:23.616 A:middle
step further.

00:03:23.616 --> 00:03:27.406 A:middle
We're making entire root

00:03:27.586 --> 00:03:29.306 A:middle
filesystem read-only.

00:03:30.516 --> 00:03:35.936 A:middle
[ Cheering and Applause ]

00:03:36.436 --> 00:03:38.796 A:middle
Obviously, a system where you

00:03:38.846 --> 00:03:41.176 A:middle
cannot install new software or

00:03:41.176 --> 00:03:43.906 A:middle
where user cannot save the data

00:03:43.906 --> 00:03:45.536 A:middle
is not particularly useful.

00:03:47.996 --> 00:03:49.346 A:middle
In order to understand how we

00:03:49.346 --> 00:03:50.666 A:middle
can reconcile those two

00:03:50.666 --> 00:03:53.516 A:middle
conflicting goals, read-only and

00:03:53.516 --> 00:03:54.916 A:middle
writeable at the same time,

00:03:55.606 --> 00:03:57.186 A:middle
let's look at what's happening

00:03:57.276 --> 00:03:59.026 A:middle
when we upgrade from macOS

00:03:59.266 --> 00:04:01.166 A:middle
Mojave to macOS Catalina.

00:03:59.266 --> 00:04:01.166 A:middle
Mojave to macOS Catalina.

00:04:01.706 --> 00:04:06.196 A:middle
A typical container on macOS

00:04:06.196 --> 00:04:08.596 A:middle
Mojave will have one main

00:04:08.596 --> 00:04:11.906 A:middle
volume, and few service volumes.

00:04:11.906 --> 00:04:13.996 A:middle
For example, VM.

00:04:14.406 --> 00:04:17.146 A:middle
The main volume is used to store

00:04:17.146 --> 00:04:19.946 A:middle
both user's data and system

00:04:19.946 --> 00:04:20.736 A:middle
software.

00:04:22.436 --> 00:04:24.436 A:middle
When we start upgrade--

00:04:30.126 --> 00:04:32.036 A:middle
When we start the upgrade to

00:04:32.426 --> 00:04:36.566 A:middle
macOS Catalina, we first change

00:04:36.566 --> 00:04:38.596 A:middle
the role of the main volume and

00:04:38.596 --> 00:04:40.286 A:middle
mark it as data volume.

00:04:41.776 --> 00:04:44.956 A:middle
We then can prune some parts of

00:04:44.956 --> 00:04:46.806 A:middle
the directive hierarchy which

00:04:46.806 --> 00:04:48.946 A:middle
contains only system software.

00:04:50.426 --> 00:04:53.986 A:middle
Once this is done, we can move

00:04:54.206 --> 00:04:56.216 A:middle
to the next stage where we

00:04:56.216 --> 00:04:58.696 A:middle
create a new empty volume, which

00:04:58.696 --> 00:05:01.186 A:middle
will be used only to store

00:04:58.696 --> 00:05:01.186 A:middle
will be used only to store

00:05:01.186 --> 00:05:02.456 A:middle
system software.

00:05:02.666 --> 00:05:05.396 A:middle
We'll populate that volume with

00:05:05.396 --> 00:05:06.406 A:middle
the system content.

00:05:06.986 --> 00:05:09.026 A:middle
And once this process is done,

00:05:09.836 --> 00:05:10.976 A:middle
we can declare victory on the

00:05:10.976 --> 00:05:11.706 A:middle
protection front.

00:05:12.056 --> 00:05:13.056 A:middle
We are read-only.

00:05:13.056 --> 00:05:13.696 A:middle
We're protected.

00:05:14.016 --> 00:05:16.976 A:middle
It's good, but it's not enough.

00:05:19.256 --> 00:05:21.846 A:middle
We still need to somehow tie the

00:05:21.846 --> 00:05:24.866 A:middle
new system content with the user

00:05:24.866 --> 00:05:25.406 A:middle
content.

00:05:25.866 --> 00:05:27.896 A:middle
And for that, we introduce the

00:05:27.896 --> 00:05:29.286 A:middle
concept of a volume group.

00:05:30.046 --> 00:05:32.626 A:middle
A volume group is one data

00:05:32.626 --> 00:05:34.846 A:middle
volume and one system volume.

00:05:35.196 --> 00:05:36.586 A:middle
And they treat it as it as a

00:05:36.586 --> 00:05:37.616 A:middle
single entity.

00:05:38.746 --> 00:05:42.046 A:middle
The UI present it as a single

00:05:42.046 --> 00:05:42.496 A:middle
disk.

00:05:43.126 --> 00:05:45.036 A:middle
They share encryption state.

00:05:45.796 --> 00:05:48.016 A:middle
If your volumes are encrypted,

00:05:48.016 --> 00:05:50.086 A:middle
then the same password can be

00:05:50.086 --> 00:05:51.766 A:middle
used to unlock both volumes.

00:05:52.566 --> 00:05:55.516 A:middle
Almost everything looks as a

00:05:55.516 --> 00:05:58.726 A:middle
single unified entity.

00:05:59.936 --> 00:06:01.556 A:middle
There is one thing which is

00:05:59.936 --> 00:06:01.556 A:middle
There is one thing which is

00:06:01.556 --> 00:06:01.946 A:middle
missing.

00:06:02.186 --> 00:06:04.326 A:middle
We still need to somehow provide

00:06:04.326 --> 00:06:05.816 A:middle
an illusion of a single

00:06:05.946 --> 00:06:07.066 A:middle
directory hierarchy.

00:06:08.026 --> 00:06:10.916 A:middle
Traditionally, it was done by

00:06:11.406 --> 00:06:14.666 A:middle
mounting filesystems on top of

00:06:14.666 --> 00:06:16.056 A:middle
directories in the root

00:06:16.056 --> 00:06:16.866 A:middle
filesystem.

00:06:18.226 --> 00:06:20.266 A:middle
With a number of crossing

00:06:20.266 --> 00:06:21.636 A:middle
points, which we need to

00:06:21.636 --> 00:06:24.946 A:middle
introduce, and the number of

00:06:25.026 --> 00:06:26.246 A:middle
volumes which are required in

00:06:26.246 --> 00:06:28.176 A:middle
the filesystem, that approach

00:06:28.246 --> 00:06:29.426 A:middle
becomes rather expensive.

00:06:29.916 --> 00:06:32.296 A:middle
So to deal with this, we

00:06:32.296 --> 00:06:34.426 A:middle
introduced a new concept called

00:06:34.426 --> 00:06:34.926 A:middle
Firmlink.

00:06:35.416 --> 00:06:39.316 A:middle
The Firmlink is a new filesystem

00:06:39.316 --> 00:06:39.616 A:middle
object.

00:06:40.776 --> 00:06:42.316 A:middle
It's similar to Symlink.

00:06:42.876 --> 00:06:46.136 A:middle
But unlike Symlink, Firmlink

00:06:46.526 --> 00:06:50.426 A:middle
support backwards and forwards

00:06:51.046 --> 00:06:53.326 A:middle
path reversals, which is

00:06:53.936 --> 00:06:55.956 A:middle
consistent in its

00:06:56.126 --> 00:06:57.246 A:middle
representation.

00:06:58.036 --> 00:07:00.326 A:middle
And that consistency is rather

00:06:58.036 --> 00:07:00.326 A:middle
And that consistency is rather

00:07:00.326 --> 00:07:00.886 A:middle
important.

00:07:00.926 --> 00:07:02.476 A:middle
If you ever had to deal with an

00:07:02.476 --> 00:07:04.966 A:middle
application, which absolutely

00:07:04.966 --> 00:07:06.936 A:middle
insists it has to live in a

00:07:06.936 --> 00:07:08.416 A:middle
particular directory, for

00:07:08.416 --> 00:07:09.686 A:middle
example, such as applications.

00:07:10.096 --> 00:07:12.066 A:middle
You know that you have to be

00:07:12.096 --> 00:07:15.096 A:middle
able to walk both from the top

00:07:15.096 --> 00:07:16.676 A:middle
of a filesystem from the road

00:07:16.676 --> 00:07:18.586 A:middle
down to the leaves and backwards

00:07:18.586 --> 00:07:21.186 A:middle
and get the same path.

00:07:21.736 --> 00:07:22.976 A:middle
We can do that with Firmlinks.

00:07:29.216 --> 00:07:34.116 A:middle
The Firmlinks are a traversal

00:07:34.116 --> 00:07:36.436 A:middle
point from a directory on the

00:07:36.436 --> 00:07:40.036 A:middle
system volume to a directory on

00:07:40.036 --> 00:07:40.866 A:middle
the data volume.

00:07:42.246 --> 00:07:43.876 A:middle
They only have one-to-one

00:07:43.876 --> 00:07:44.326 A:middle
mapping.

00:07:44.326 --> 00:07:44.916 A:middle
One source.

00:07:45.036 --> 00:07:45.716 A:middle
One target.

00:07:47.066 --> 00:07:48.896 A:middle
You cannot use a Firmlink to

00:07:48.896 --> 00:07:50.656 A:middle
cross a boundary of a volume

00:07:50.656 --> 00:07:50.976 A:middle
group.

00:07:54.256 --> 00:07:56.116 A:middle
The Firmlinks are rather

00:07:56.116 --> 00:07:57.666 A:middle
transparent to the user and the

00:07:57.666 --> 00:07:58.336 A:middle
application.

00:07:58.726 --> 00:08:00.436 A:middle
They are created by the install

00:07:58.726 --> 00:08:00.436 A:middle
They are created by the install

00:08:00.436 --> 00:08:01.426 A:middle
at the installation time.

00:08:01.946 --> 00:08:03.666 A:middle
And they are not supposed to be

00:08:03.756 --> 00:08:03.976 A:middle
noticed.

00:08:08.256 --> 00:08:10.246 A:middle
Once we get this new tool, we

00:08:10.246 --> 00:08:13.066 A:middle
can use it to stitch up volumes

00:08:13.066 --> 00:08:13.426 A:middle
together.

00:08:13.426 --> 00:08:16.296 A:middle
The installer will create entry

00:08:16.296 --> 00:08:16.976 A:middle
on the system volume.

00:08:22.426 --> 00:08:24.446 A:middle
And point them to the

00:08:24.446 --> 00:08:26.576 A:middle
corresponding volumes on the

00:08:26.926 --> 00:08:27.976 A:middle
data volume.

00:08:31.576 --> 00:08:34.346 A:middle
And once it's done, we have a

00:08:34.346 --> 00:08:36.976 A:middle
unified directory hierarchy.

00:08:37.686 --> 00:08:40.155 A:middle
We can reboot, mount root as

00:08:40.155 --> 00:08:42.006 A:middle
read-only, and enjoy the

00:08:42.006 --> 00:08:42.976 A:middle
protection which it gives us.

00:08:49.686 --> 00:08:50.726 A:middle
Life is good.

00:08:51.446 --> 00:08:52.496 A:middle
Everything's protected.

00:08:53.066 --> 00:08:53.986 A:middle
Everything's running.

00:08:54.726 --> 00:08:56.556 A:middle
But you still have to remember

00:08:58.026 --> 00:09:00.016 A:middle
that the volumes are split

00:08:58.026 --> 00:09:00.016 A:middle
that the volumes are split

00:09:00.016 --> 00:09:01.356 A:middle
during the install process.

00:09:01.726 --> 00:09:03.446 A:middle
There is no way to avoid it.

00:09:03.786 --> 00:09:04.516 A:middle
It will happen.

00:09:05.116 --> 00:09:09.626 A:middle
In the developer's preview, we

00:09:09.626 --> 00:09:12.166 A:middle
elected to leave the root

00:09:12.296 --> 00:09:14.606 A:middle
filesystem writeable to make it

00:09:14.606 --> 00:09:16.006 A:middle
easier for you to test your

00:09:16.006 --> 00:09:16.736 A:middle
application.

00:09:17.596 --> 00:09:19.026 A:middle
If you want to mimic your

00:09:19.026 --> 00:09:21.796 A:middle
behavior, which will be

00:09:22.966 --> 00:09:24.636 A:middle
implemented in the future, you

00:09:24.636 --> 00:09:26.586 A:middle
can create a special file in the

00:09:26.586 --> 00:09:30.026 A:middle
root directory and on reboot,

00:09:30.026 --> 00:09:31.666 A:middle
your volumes will be mounted

00:09:31.666 --> 00:09:32.256 A:middle
read-only.

00:09:33.506 --> 00:09:35.066 A:middle
That will change in the next

00:09:35.066 --> 00:09:37.786 A:middle
build over next seed.

00:09:42.256 --> 00:09:45.496 A:middle
In the release build, you would

00:09:45.496 --> 00:09:48.196 A:middle
still be able to mount root

00:09:48.196 --> 00:09:51.516 A:middle
filesystem as read-write if you

00:09:51.516 --> 00:09:52.886 A:middle
disable system integrity

00:09:52.886 --> 00:09:53.426 A:middle
protection.

00:09:54.896 --> 00:09:57.196 A:middle
But this is not a persistent

00:09:57.196 --> 00:09:57.616 A:middle
change.

00:09:58.016 --> 00:10:00.566 A:middle
On the reboot, it will revert

00:09:58.016 --> 00:10:00.566 A:middle
On the reboot, it will revert

00:10:00.566 --> 00:10:03.296 A:middle
back to read-only state.

00:10:03.866 --> 00:10:06.216 A:middle
You can remount it read-only,

00:10:06.216 --> 00:10:07.806 A:middle
read-write again.

00:10:08.886 --> 00:10:10.116 A:middle
And again, it will revert to the

00:10:10.116 --> 00:10:11.686 A:middle
same state on reboot.

00:10:13.306 --> 00:10:14.906 A:middle
As you can imagine, this is

00:10:14.906 --> 00:10:17.366 A:middle
rather big change in the way

00:10:17.516 --> 00:10:20.016 A:middle
macOS shapes and installs.

00:10:20.886 --> 00:10:23.066 A:middle
And it could catch some

00:10:23.066 --> 00:10:23.986 A:middle
applications.

00:10:24.816 --> 00:10:25.806 A:middle
If, for example, your

00:10:25.806 --> 00:10:27.946 A:middle
application uses a complex

00:10:27.946 --> 00:10:30.536 A:middle
layout on the filesystem or

00:10:30.736 --> 00:10:32.666 A:middle
comes with the installer

00:10:32.666 --> 00:10:35.576 A:middle
package, make sure it works on

00:10:35.576 --> 00:10:38.606 A:middle
the new read-only root

00:10:38.606 --> 00:10:38.976 A:middle
partition.

00:10:42.046 --> 00:10:43.376 A:middle
If you're writing a backup

00:10:43.376 --> 00:10:47.246 A:middle
utility, which cares about inode

00:10:47.246 --> 00:10:49.996 A:middle
numbers, filesystem IDs, and the

00:10:49.996 --> 00:10:52.286 A:middle
like, make sure that you test

00:10:52.286 --> 00:10:53.896 A:middle
it, because the assumptions you

00:10:53.896 --> 00:10:56.406 A:middle
may had previously may not be

00:10:56.406 --> 00:10:56.836 A:middle
true.

00:10:57.276 --> 00:10:59.796 A:middle
So the bottom line is test,

00:10:59.976 --> 00:11:01.006 A:middle
test, test.

00:10:59.976 --> 00:11:01.006 A:middle
test, test.

00:11:01.946 --> 00:11:03.846 A:middle
And next, I will hand over to

00:11:03.846 --> 00:11:05.856 A:middle
Jon Becker to talk about volume

00:11:05.856 --> 00:11:06.426 A:middle
replication.

00:11:08.516 --> 00:11:12.500 A:middle
[ Applause ]

00:11:16.166 --> 00:11:16.976 A:middle
&gt;&gt; Thank you, Max.

00:11:19.046 --> 00:11:19.576 A:middle
Good afternoon.

00:11:20.436 --> 00:11:21.556 A:middle
My name is Jon, and I'm going to

00:11:21.556 --> 00:11:22.646 A:middle
be talking about volume

00:11:22.646 --> 00:11:24.326 A:middle
replication with APFS.

00:11:24.836 --> 00:11:26.306 A:middle
So let's dive right in.

00:11:26.796 --> 00:11:28.276 A:middle
What is volume replication?

00:11:29.296 --> 00:11:31.256 A:middle
Well, the basic idea is pretty

00:11:31.256 --> 00:11:31.606 A:middle
simple.

00:11:31.606 --> 00:11:33.766 A:middle
We'd want to copy one volume to

00:11:33.766 --> 00:11:34.296 A:middle
another volume.

00:11:35.366 --> 00:11:36.026 A:middle
Sounds simple.

00:11:36.936 --> 00:11:39.536 A:middle
But the important aspect of this

00:11:39.806 --> 00:11:41.286 A:middle
is that we want the fidelity of

00:11:41.286 --> 00:11:42.446 A:middle
this copy to be as high as

00:11:42.486 --> 00:11:42.966 A:middle
possible.

00:11:43.756 --> 00:11:45.946 A:middle
In general, it's not sufficient

00:11:45.946 --> 00:11:47.586 A:middle
to just be doing file-by-file

00:11:47.586 --> 00:11:48.016 A:middle
copies.

00:11:48.306 --> 00:11:51.516 A:middle
We want to be copying all volume

00:11:51.516 --> 00:11:52.046 A:middle
content.

00:11:52.456 --> 00:11:55.136 A:middle
All data, all metadata, volume

00:11:55.136 --> 00:11:56.036 A:middle
attributes.

00:11:56.326 --> 00:11:58.056 A:middle
If the source volume contains a

00:11:58.056 --> 00:12:00.126 A:middle
bootable OS, we want to be

00:11:58.056 --> 00:12:00.126 A:middle
bootable OS, we want to be

00:12:00.126 --> 00:12:01.666 A:middle
copying the metadata that makes

00:12:01.666 --> 00:12:03.356 A:middle
that volume bootable so that the

00:12:03.396 --> 00:12:05.746 A:middle
target of our copy will also be

00:12:05.746 --> 00:12:06.086 A:middle
bootable.

00:12:06.086 --> 00:12:08.156 A:middle
Now I'm going to be talking

00:12:08.156 --> 00:12:10.586 A:middle
about replication in the context

00:12:10.586 --> 00:12:12.346 A:middle
of the Apple Software Restore

00:12:12.346 --> 00:12:14.186 A:middle
command line utility, or ASR.

00:12:14.186 --> 00:12:16.756 A:middle
ASR has been around for a very

00:12:16.756 --> 00:12:17.486 A:middle
long time.

00:12:17.486 --> 00:12:18.856 A:middle
Many of you may be familiar with

00:12:19.276 --> 00:12:19.406 A:middle
it.

00:12:19.406 --> 00:12:20.906 A:middle
And its primary function is to

00:12:20.906 --> 00:12:22.266 A:middle
do volume replication.

00:12:23.646 --> 00:12:25.206 A:middle
Now, with ASR, it's very common

00:12:25.206 --> 00:12:26.606 A:middle
for the source of our

00:12:26.606 --> 00:12:29.096 A:middle
replication to be a disk image.

00:12:29.096 --> 00:12:30.986 A:middle
And in that context, we often

00:12:30.986 --> 00:12:33.216 A:middle
refer to the procedure of doing

00:12:33.216 --> 00:12:34.786 A:middle
this replication to occur -- to

00:12:34.786 --> 00:12:37.656 A:middle
a target volume as restoring,

00:12:38.056 --> 00:12:39.186 A:middle
hence the name Apple Software

00:12:39.216 --> 00:12:39.786 A:middle
Restore.

00:12:40.156 --> 00:12:41.966 A:middle
But you'll hear me use the terms

00:12:42.026 --> 00:12:44.026 A:middle
restoring and replicating pretty

00:12:44.026 --> 00:12:45.036 A:middle
much interchangeably.

00:12:46.696 --> 00:12:50.796 A:middle
So who wants this?

00:12:50.796 --> 00:12:52.336 A:middle
Who needs this functionality?

00:12:53.576 --> 00:12:56.186 A:middle
Well, if you are in education or

00:12:56.186 --> 00:12:58.436 A:middle
Enterprise IT, if you do things

00:12:58.436 --> 00:13:00.866 A:middle
like set up large labs with lots

00:12:58.436 --> 00:13:00.866 A:middle
like set up large labs with lots

00:13:00.866 --> 00:13:02.636 A:middle
of machines, or if you write

00:13:02.636 --> 00:13:04.156 A:middle
backup utilities, then

00:13:04.156 --> 00:13:06.166 A:middle
replication is a function that

00:13:06.206 --> 00:13:08.526 A:middle
you probably need or want to use

00:13:08.526 --> 00:13:09.576 A:middle
with some regularity.

00:13:10.296 --> 00:13:12.816 A:middle
As we'll see, some of the new

00:13:12.816 --> 00:13:14.496 A:middle
features of APFS present a

00:13:14.526 --> 00:13:15.756 A:middle
challenge for how we can do

00:13:15.756 --> 00:13:16.396 A:middle
replication.

00:13:17.536 --> 00:13:19.406 A:middle
On the other hand, as well also

00:13:19.406 --> 00:13:21.486 A:middle
see, these new features also

00:13:21.486 --> 00:13:23.586 A:middle
present an opportunity to make

00:13:23.586 --> 00:13:25.596 A:middle
replication a more powerful and

00:13:25.596 --> 00:13:26.656 A:middle
flexible operation.

00:13:27.706 --> 00:13:29.416 A:middle
So I want to back up for just a

00:13:29.416 --> 00:13:32.096 A:middle
second and talk about how

00:13:32.096 --> 00:13:33.446 A:middle
replication has looked in the

00:13:33.446 --> 00:13:35.066 A:middle
past prior to APFS.

00:13:35.566 --> 00:13:37.596 A:middle
Now as Max demonstrated before,

00:13:38.136 --> 00:13:40.886 A:middle
with previous filesystems, like

00:13:41.636 --> 00:13:43.656 A:middle
HFS Plus, the filesystem, or I

00:13:43.656 --> 00:13:45.176 A:middle
should say the volume, is in a

00:13:45.176 --> 00:13:46.706 A:middle
one-to-one relationship with the

00:13:46.706 --> 00:13:48.056 A:middle
partition that contains it.

00:13:48.536 --> 00:13:49.896 A:middle
And what that means is that the

00:13:49.896 --> 00:13:52.076 A:middle
volume is backed by a contiguous

00:13:52.126 --> 00:13:52.936 A:middle
block device.

00:13:53.496 --> 00:13:55.886 A:middle
So replicating can really

00:13:55.886 --> 00:13:58.366 A:middle
involve just doing a block copy

00:13:58.846 --> 00:14:00.256 A:middle
of the entire partition.

00:13:58.846 --> 00:14:00.256 A:middle
of the entire partition.

00:14:00.896 --> 00:14:04.476 A:middle
Of course, if we're copying the

00:14:04.476 --> 00:14:06.986 A:middle
entire block device, we are

00:14:06.986 --> 00:14:08.416 A:middle
copying all of the filesystem

00:14:08.416 --> 00:14:09.556 A:middle
information in that volume.

00:14:09.556 --> 00:14:11.386 A:middle
Now there may be some

00:14:11.386 --> 00:14:12.866 A:middle
complications like as in this

00:14:12.866 --> 00:14:13.436 A:middle
diagram.

00:14:13.766 --> 00:14:15.256 A:middle
We have the source and target

00:14:15.256 --> 00:14:16.466 A:middle
partition not being the same

00:14:16.466 --> 00:14:16.826 A:middle
size.

00:14:17.066 --> 00:14:18.066 A:middle
But there are ways that we can

00:14:18.066 --> 00:14:18.686 A:middle
fix that up.

00:14:18.686 --> 00:14:20.856 A:middle
And so by and large, block

00:14:20.856 --> 00:14:23.546 A:middle
copying is a very effective and

00:14:23.546 --> 00:14:25.006 A:middle
relatively simple way of doing

00:14:25.006 --> 00:14:25.656 A:middle
replication.

00:14:26.636 --> 00:14:30.236 A:middle
But of course, with APFS, there

00:14:30.236 --> 00:14:31.256 A:middle
are some new features that

00:14:31.256 --> 00:14:31.976 A:middle
complicate this picture.

00:14:34.416 --> 00:14:36.626 A:middle
So APFS, as Max told you, has

00:14:36.726 --> 00:14:38.156 A:middle
some features, like volume

00:14:38.156 --> 00:14:39.336 A:middle
management and space sharing.

00:14:39.336 --> 00:14:42.886 A:middle
And as we can see, if we take a

00:14:42.886 --> 00:14:44.766 A:middle
look at Volume 1 in the diagram

00:14:44.766 --> 00:14:46.556 A:middle
here, it's spread out around its

00:14:46.556 --> 00:14:47.536 A:middle
container partition.

00:14:47.836 --> 00:14:49.326 A:middle
And so it is not a contiguous

00:14:49.326 --> 00:14:49.966 A:middle
block device.

00:14:51.166 --> 00:14:52.536 A:middle
And it may be -- its data may be

00:14:52.536 --> 00:14:56.216 A:middle
interspersed with the data for

00:14:56.216 --> 00:14:57.306 A:middle
another volume in the same

00:14:57.306 --> 00:14:59.036 A:middle
container, like Volume 2 in this

00:14:59.036 --> 00:14:59.396 A:middle
example.

00:15:00.616 --> 00:15:02.076 A:middle
Furthermore, we of course care

00:15:02.076 --> 00:15:03.496 A:middle
about security and privacy.

00:15:04.116 --> 00:15:05.096 A:middle
And so we have to think about

00:15:05.096 --> 00:15:05.736 A:middle
encryption.

00:15:06.556 --> 00:15:08.356 A:middle
Now with APFS, encryption is

00:15:08.356 --> 00:15:10.016 A:middle
done at the filesystem level.

00:15:10.526 --> 00:15:12.996 A:middle
And what's more, on Macs that

00:15:12.996 --> 00:15:15.736 A:middle
have the T2 security chip for

00:15:16.286 --> 00:15:18.276 A:middle
internal storage devices, that

00:15:18.276 --> 00:15:19.686 A:middle
encryption is on all the time.

00:15:20.396 --> 00:15:22.316 A:middle
And it is tied directly to the

00:15:22.316 --> 00:15:23.926 A:middle
hardware, meaning that it is

00:15:23.926 --> 00:15:26.516 A:middle
specific to that storage device

00:15:26.556 --> 00:15:27.316 A:middle
in that Mac.

00:15:28.106 --> 00:15:29.366 A:middle
And so if we would try to copy

00:15:29.366 --> 00:15:31.346 A:middle
the blocks for that volume and

00:15:31.346 --> 00:15:32.236 A:middle
take them somewhere else, they

00:15:32.236 --> 00:15:33.176 A:middle
won't be decryptable.

00:15:34.206 --> 00:15:36.166 A:middle
So the upshot here is block

00:15:36.166 --> 00:15:37.456 A:middle
copies are really not a possible

00:15:37.456 --> 00:15:39.486 A:middle
way to do replication with APFS

00:15:39.486 --> 00:15:39.986 A:middle
volumes.

00:15:40.566 --> 00:15:44.136 A:middle
So how do we reconcile this with

00:15:44.136 --> 00:15:46.906 A:middle
the needs that we have?

00:15:47.106 --> 00:15:48.846 A:middle
Well, new with macOS Catalina

00:15:48.946 --> 00:15:51.116 A:middle
we're introducing APFS volume

00:15:51.116 --> 00:15:52.846 A:middle
replication with ASR.

00:15:53.576 --> 00:15:55.176 A:middle
ASR and APFS.

00:15:56.176 --> 00:15:57.086 A:middle
Yeah, thank you.

00:15:57.086 --> 00:15:58.756 A:middle
ASR and APFS are tightly

00:15:58.756 --> 00:15:59.336 A:middle
integrated.

00:15:59.566 --> 00:16:02.296 A:middle
And ASR can have APFS generate a

00:15:59.566 --> 00:16:02.296 A:middle
And ASR can have APFS generate a

00:16:02.296 --> 00:16:03.966 A:middle
stream from the source volume.

00:16:03.966 --> 00:16:05.336 A:middle
And that stream then gets

00:16:05.336 --> 00:16:06.506 A:middle
written to the target volume.

00:16:07.066 --> 00:16:10.266 A:middle
Now because APFS is generating

00:16:10.266 --> 00:16:11.636 A:middle
this stream, it knows where it

00:16:11.636 --> 00:16:13.126 A:middle
needs to read the parts of the

00:16:13.126 --> 00:16:13.856 A:middle
source volume.

00:16:15.276 --> 00:16:16.626 A:middle
And so it's not a problem that

00:16:16.626 --> 00:16:17.646 A:middle
that source volume is not a

00:16:17.646 --> 00:16:18.976 A:middle
contiguous block device.

00:16:22.376 --> 00:16:24.276 A:middle
As far as encryption goes, if

00:16:24.276 --> 00:16:25.376 A:middle
the source of volume is

00:16:25.376 --> 00:16:28.606 A:middle
encrypted, then it will be --

00:16:28.756 --> 00:16:30.366 A:middle
the data from it will be

00:16:30.366 --> 00:16:32.106 A:middle
decrypted on the fly as the

00:16:32.106 --> 00:16:33.116 A:middle
stream is generated.

00:16:33.776 --> 00:16:34.996 A:middle
And of course, if the source

00:16:34.996 --> 00:16:35.786 A:middle
volume is protected by

00:16:35.786 --> 00:16:37.516 A:middle
FileVault, then it does need to

00:16:37.516 --> 00:16:39.276 A:middle
be unlocked by user action prior

00:16:39.276 --> 00:16:40.366 A:middle
to this replication taking

00:16:40.366 --> 00:16:40.766 A:middle
place.

00:16:41.536 --> 00:16:43.726 A:middle
If the target volume is itself

00:16:43.726 --> 00:16:45.976 A:middle
encrypted then the data is in --

00:16:45.976 --> 00:16:47.776 A:middle
or the data is encrypted as it

00:16:47.776 --> 00:16:49.066 A:middle
is written from the stream to

00:16:49.066 --> 00:16:49.926 A:middle
the target volume.

00:16:50.356 --> 00:16:52.616 A:middle
And so in this case, that data

00:16:52.616 --> 00:16:54.286 A:middle
is encrypted from the get go by

00:16:54.286 --> 00:16:55.476 A:middle
the time it hits the target

00:16:55.476 --> 00:16:55.836 A:middle
volume.

00:16:56.546 --> 00:16:59.606 A:middle
Okay? One other nice feature of

00:16:59.606 --> 00:17:01.766 A:middle
this replication is that as the

00:16:59.606 --> 00:17:01.766 A:middle
this replication is that as the

00:17:01.766 --> 00:17:03.466 A:middle
stream is generated, the volume

00:17:03.466 --> 00:17:05.636 A:middle
data is defragmented on the fly.

00:17:05.636 --> 00:17:07.705 A:middle
The metadata is compacted, and

00:17:07.705 --> 00:17:09.486 A:middle
so the resulting stream, and

00:17:09.486 --> 00:17:10.935 A:middle
therefore, the resulting target

00:17:10.935 --> 00:17:11.915 A:middle
volume, are very nicely

00:17:11.915 --> 00:17:12.465 A:middle
optimized.

00:17:12.766 --> 00:17:17.066 A:middle
This can be a great way to do --

00:17:17.066 --> 00:17:18.896 A:middle
to master images, for example.

00:17:19.856 --> 00:17:20.986 A:middle
If you're mastering an image,

00:17:21.266 --> 00:17:22.445 A:middle
and your final step is to do a

00:17:22.445 --> 00:17:24.126 A:middle
replication operation, then your

00:17:24.126 --> 00:17:25.435 A:middle
image volume will be very nicely

00:17:25.435 --> 00:17:25.976 A:middle
optimized.

00:17:30.076 --> 00:17:31.436 A:middle
So when we do restores,

00:17:32.736 --> 00:17:34.596 A:middle
replication, however you want to

00:17:34.596 --> 00:17:36.036 A:middle
say it, there are a number of

00:17:36.036 --> 00:17:37.376 A:middle
options that we can use.

00:17:37.696 --> 00:17:39.016 A:middle
I just want to call out a couple

00:17:39.086 --> 00:17:39.676 A:middle
of them.

00:17:39.826 --> 00:17:41.306 A:middle
The first one is really very

00:17:41.306 --> 00:17:43.246 A:middle
much like restores as we're used

00:17:43.246 --> 00:17:43.456 A:middle
to.

00:17:43.916 --> 00:17:46.076 A:middle
We can specify a source volume.

00:17:46.306 --> 00:17:48.276 A:middle
You can specify a target volume.

00:17:48.866 --> 00:17:50.546 A:middle
And the idea is that the target

00:17:50.546 --> 00:17:52.396 A:middle
volume will be completely erased

00:17:52.396 --> 00:17:53.206 A:middle
and replaced.

00:17:53.436 --> 00:17:55.086 A:middle
Or its contents replaced by the

00:17:55.086 --> 00:17:56.166 A:middle
contents of the source volume.

00:17:56.396 --> 00:17:58.456 A:middle
Now in this case, we will have

00:17:58.456 --> 00:18:00.646 A:middle
Volume 2 be our target volume.

00:17:58.456 --> 00:18:00.646 A:middle
Volume 2 be our target volume.

00:18:00.646 --> 00:18:01.696 A:middle
And so our restore would look

00:18:01.696 --> 00:18:02.526 A:middle
something like this.

00:18:02.716 --> 00:18:03.806 A:middle
You would see a sample command

00:18:03.806 --> 00:18:04.446 A:middle
line right here.

00:18:05.526 --> 00:18:08.056 A:middle
And the result is Volume 2's

00:18:08.056 --> 00:18:09.546 A:middle
contents are erased, replaced by

00:18:09.966 --> 00:18:11.016 A:middle
the contents of the source

00:18:11.016 --> 00:18:11.316 A:middle
volume.

00:18:11.316 --> 00:18:12.306 A:middle
So the restored volume and

00:18:12.306 --> 00:18:14.526 A:middle
source volume are the same.

00:18:14.526 --> 00:18:15.666 A:middle
Notice, by the way, that in this

00:18:15.666 --> 00:18:17.666 A:middle
example, the target container

00:18:17.666 --> 00:18:18.986 A:middle
also has another volume in it.

00:18:19.076 --> 00:18:20.836 A:middle
And that volume is left alone.

00:18:20.836 --> 00:18:21.976 A:middle
Its contents are preserved.

00:18:22.206 --> 00:18:23.926 A:middle
It does not form in any way a

00:18:24.016 --> 00:18:25.176 A:middle
part of the replication

00:18:25.176 --> 00:18:25.726 A:middle
operation.

00:18:26.766 --> 00:18:28.566 A:middle
But there's another option that

00:18:28.566 --> 00:18:30.816 A:middle
we have, which is instead of

00:18:30.876 --> 00:18:32.346 A:middle
having to specify a target

00:18:32.346 --> 00:18:35.366 A:middle
volume and erase that, we can

00:18:35.366 --> 00:18:37.796 A:middle
instead generate a brand-new

00:18:37.796 --> 00:18:39.416 A:middle
volume to be the target on the

00:18:39.416 --> 00:18:39.736 A:middle
fly.

00:18:40.146 --> 00:18:42.596 A:middle
And we do this by specifying the

00:18:42.596 --> 00:18:44.516 A:middle
entire container as the target.

00:18:44.956 --> 00:18:46.646 A:middle
And this tells ASR that what we

00:18:46.646 --> 00:18:48.446 A:middle
really want is to generate a

00:18:48.446 --> 00:18:49.856 A:middle
brand-new volume and restore to

00:18:49.856 --> 00:18:50.356 A:middle
that.

00:18:50.416 --> 00:18:51.346 A:middle
You can see another sample

00:18:51.346 --> 00:18:51.866 A:middle
command line.

00:18:51.866 --> 00:18:53.706 A:middle
And the result is a new volume

00:18:53.706 --> 00:18:55.766 A:middle
is created and restored to.

00:18:56.026 --> 00:18:57.306 A:middle
So in this case, Volume 1 and

00:18:57.306 --> 00:18:57.976 A:middle
Volume 2 are both left alone.

00:19:02.186 --> 00:19:03.836 A:middle
Now I want to step away for just

00:19:03.836 --> 00:19:05.386 A:middle
a second from replication.

00:19:06.116 --> 00:19:07.696 A:middle
And I want to talk about

00:19:08.086 --> 00:19:09.726 A:middle
snapshots in APFS.

00:19:10.176 --> 00:19:12.016 A:middle
So a snapshot is just a

00:19:12.056 --> 00:19:13.706 A:middle
point-in-time capture of all

00:19:13.706 --> 00:19:14.496 A:middle
volume state.

00:19:15.256 --> 00:19:16.466 A:middle
So for example, we may have a

00:19:16.466 --> 00:19:17.886 A:middle
volume with a number of files on

00:19:17.886 --> 00:19:17.986 A:middle
it.

00:19:18.266 --> 00:19:19.986 A:middle
We can take a snapshot of that

00:19:19.986 --> 00:19:20.416 A:middle
volume.

00:19:21.126 --> 00:19:24.366 A:middle
And the result is a capture, a

00:19:24.366 --> 00:19:25.706 A:middle
freeze frame, of what that

00:19:25.706 --> 00:19:27.226 A:middle
volume looks like at the time

00:19:27.226 --> 00:19:28.366 A:middle
that the snapshot is taken.

00:19:28.676 --> 00:19:30.146 A:middle
If we make subsequent changes to

00:19:30.146 --> 00:19:31.666 A:middle
the volume, like for example,

00:19:31.756 --> 00:19:33.696 A:middle
deleting a file or adding some

00:19:33.696 --> 00:19:36.576 A:middle
new files, the snapshot is still

00:19:36.576 --> 00:19:38.796 A:middle
encompassing all of the state

00:19:38.796 --> 00:19:40.196 A:middle
that existed at the time it was

00:19:40.196 --> 00:19:40.686 A:middle
created.

00:19:41.816 --> 00:19:43.456 A:middle
So in this case, if we look at

00:19:43.456 --> 00:19:45.276 A:middle
the live volume, it appears that

00:19:45.276 --> 00:19:46.806 A:middle
that file that was deleted is

00:19:46.806 --> 00:19:47.466 A:middle
not there.

00:19:47.796 --> 00:19:49.016 A:middle
But in some sense, it is still

00:19:49.016 --> 00:19:50.336 A:middle
there because it's part of that

00:19:50.336 --> 00:19:50.886 A:middle
snapshot.

00:19:52.016 --> 00:19:53.276 A:middle
So you might wonder, "Well, what

00:19:53.276 --> 00:19:53.996 A:middle
does this have to do with

00:19:53.996 --> 00:19:54.656 A:middle
replication?"

00:19:55.416 --> 00:19:57.156 A:middle
Well, once again, new with macOS

00:19:57.156 --> 00:19:59.386 A:middle
Catalina, we can now do

00:20:00.486 --> 00:20:02.796 A:middle
restores, replication of

00:20:02.796 --> 00:20:03.466 A:middle
snapshots.

00:20:04.596 --> 00:20:05.976 A:middle
So to understand what that means

00:20:05.976 --> 00:20:06.043 A:middle
--

00:20:06.043 --> 00:20:07.096 A:middle
[ Applause ]

00:20:07.096 --> 00:20:07.346 A:middle
Thank you.

00:20:09.056 --> 00:20:10.236 A:middle
To understand what that means,

00:20:10.236 --> 00:20:11.846 A:middle
consider this volume here on the

00:20:11.846 --> 00:20:12.236 A:middle
left.

00:20:12.236 --> 00:20:14.116 A:middle
It has two snapshots in it, Snap

00:20:14.116 --> 00:20:14.876 A:middle
1 and Snap 2.

00:20:15.436 --> 00:20:16.596 A:middle
They contain some files in

00:20:16.596 --> 00:20:17.826 A:middle
common, the yellow ones, some

00:20:17.826 --> 00:20:19.926 A:middle
files that are in one snapshot

00:20:19.926 --> 00:20:21.066 A:middle
and not the other, some files

00:20:21.066 --> 00:20:22.066 A:middle
that are in the other and not

00:20:22.066 --> 00:20:23.446 A:middle
the one, and a file that's not

00:20:23.446 --> 00:20:24.286 A:middle
an either snapshot.

00:20:24.886 --> 00:20:30.416 A:middle
I can restore this volume to a

00:20:30.416 --> 00:20:32.176 A:middle
target volume over here on the

00:20:32.276 --> 00:20:32.646 A:middle
right.

00:20:32.646 --> 00:20:33.626 A:middle
It's currently empty.

00:20:34.376 --> 00:20:35.536 A:middle
And the idea there, of course,

00:20:35.536 --> 00:20:37.326 A:middle
is that at the end of that

00:20:37.326 --> 00:20:39.086 A:middle
restore, the target volume looks

00:20:39.086 --> 00:20:39.836 A:middle
like the source volume.

00:20:40.036 --> 00:20:42.456 A:middle
But instead of restoring the

00:20:42.456 --> 00:20:44.356 A:middle
sort -- the live version of the

00:20:44.356 --> 00:20:45.526 A:middle
source volume the way it

00:20:45.526 --> 00:20:47.006 A:middle
currently looks, I can instead

00:20:47.006 --> 00:20:48.236 A:middle
restore a snapshot.

00:20:48.526 --> 00:20:49.716 A:middle
So if, for example, I want to

00:20:49.716 --> 00:20:53.296 A:middle
restore Snap 1, I can specify

00:20:53.456 --> 00:20:54.486 A:middle
that's the snapshot I want to

00:20:54.486 --> 00:20:54.946 A:middle
restore.

00:20:55.966 --> 00:20:58.436 A:middle
And the result is that my target

00:20:58.436 --> 00:20:59.996 A:middle
now looks like Snap 1.

00:21:00.726 --> 00:21:02.546 A:middle
And notice in particular that

00:21:02.546 --> 00:21:03.836 A:middle
those two files, which were

00:21:03.836 --> 00:21:05.646 A:middle
deleted from the source volume,

00:21:05.646 --> 00:21:07.026 A:middle
have come back to life in the

00:21:07.026 --> 00:21:07.676 A:middle
target volume.

00:21:10.216 --> 00:21:12.336 A:middle
Having done that, maybe I want

00:21:12.336 --> 00:21:13.556 A:middle
to add some new files to my

00:21:13.556 --> 00:21:14.326 A:middle
target volume.

00:21:14.696 --> 00:21:17.306 A:middle
But then, maybe now I want to

00:21:17.306 --> 00:21:19.756 A:middle
restore Snap 2 to that target

00:21:19.756 --> 00:21:20.056 A:middle
volume.

00:21:20.586 --> 00:21:23.366 A:middle
And of course, again, the idea

00:21:23.366 --> 00:21:24.306 A:middle
is that at the end of that

00:21:24.306 --> 00:21:25.596 A:middle
operation, the live target

00:21:25.596 --> 00:21:27.366 A:middle
volume should look like Snap 2

00:21:27.366 --> 00:21:28.246 A:middle
from the source volume.

00:21:29.276 --> 00:21:31.756 A:middle
But notice that both the source

00:21:31.756 --> 00:21:33.206 A:middle
volume and the target volume

00:21:33.386 --> 00:21:35.216 A:middle
already have Snap 1 on them.

00:21:35.456 --> 00:21:37.726 A:middle
Wouldn't it be great, if instead

00:21:37.726 --> 00:21:39.436 A:middle
of having to copy all of Snap 2,

00:21:39.436 --> 00:21:40.636 A:middle
I could just copy the things

00:21:40.636 --> 00:21:42.336 A:middle
that are different between Snap

00:21:42.336 --> 00:21:43.096 A:middle
1 and Snap 2?

00:21:44.036 --> 00:21:44.836 A:middle
Well, indeed I can.

00:21:45.076 --> 00:21:46.456 A:middle
We call that difference between

00:21:46.456 --> 00:21:48.296 A:middle
two snapshots a snapshot delta.

00:21:49.076 --> 00:21:51.646 A:middle
And the idea is when I restore a

00:21:51.646 --> 00:21:53.906 A:middle
snapshot delta, I'm specifying

00:21:53.906 --> 00:21:55.016 A:middle
the two snapshots whose

00:21:55.016 --> 00:21:57.466 A:middle
difference I want to take.

00:21:57.676 --> 00:21:58.806 A:middle
I perform the restore.

00:21:59.486 --> 00:22:00.506 A:middle
And of course at the end, the

00:21:59.486 --> 00:22:00.506 A:middle
And of course at the end, the

00:22:00.506 --> 00:22:02.146 A:middle
live target volume looks like

00:22:02.886 --> 00:22:04.296 A:middle
Snap 2 from the source.

00:22:04.556 --> 00:22:05.716 A:middle
But there's three things that I

00:22:05.716 --> 00:22:07.796 A:middle
want you to notice about this

00:22:07.796 --> 00:22:08.386 A:middle
target volume.

00:22:08.386 --> 00:22:10.986 A:middle
Number one, all of those files

00:22:10.986 --> 00:22:11.926 A:middle
which were not part of the

00:22:11.926 --> 00:22:13.306 A:middle
snapshot on the target have been

00:22:13.306 --> 00:22:13.826 A:middle
discarded.

00:22:15.156 --> 00:22:17.286 A:middle
Number two, the files which were

00:22:17.286 --> 00:22:20.416 A:middle
in Snap 1 but not in Snap 2 have

00:22:20.456 --> 00:22:22.306 A:middle
been discarded from the live

00:22:22.306 --> 00:22:23.146 A:middle
target volume.

00:22:23.146 --> 00:22:24.556 A:middle
They, of course, still exist in

00:22:24.556 --> 00:22:25.946 A:middle
Snap 1 on the target volume.

00:22:26.966 --> 00:22:28.416 A:middle
And number three, the only

00:22:28.416 --> 00:22:30.026 A:middle
things that we needed to copy

00:22:30.566 --> 00:22:31.656 A:middle
were those files that were part

00:22:31.656 --> 00:22:33.536 A:middle
of Snap 2 and not part of Snap

00:22:33.536 --> 00:22:33.836 A:middle
1.

00:22:35.246 --> 00:22:37.096 A:middle
Okay? Now this is a really

00:22:37.096 --> 00:22:38.026 A:middle
powerful feature.

00:22:38.026 --> 00:22:39.746 A:middle
It's a great way to do

00:22:39.746 --> 00:22:40.856 A:middle
incremental releases.

00:22:41.046 --> 00:22:42.846 A:middle
Imagine that you are updating a

00:22:42.846 --> 00:22:44.446 A:middle
lab filled with 100 machines.

00:22:44.446 --> 00:22:45.856 A:middle
You can save a lot of time, a

00:22:45.856 --> 00:22:47.566 A:middle
lot of network bandwidth, if

00:22:47.566 --> 00:22:48.636 A:middle
you're only copying the

00:22:48.636 --> 00:22:49.816 A:middle
difference between a couple of

00:22:49.816 --> 00:22:51.696 A:middle
snapshots on your source image.

00:22:55.146 --> 00:22:56.076 A:middle
So that's what I had to say

00:22:56.076 --> 00:22:57.146 A:middle
about replication.

00:22:57.326 --> 00:22:58.496 A:middle
Take home points here.

00:22:59.126 --> 00:23:02.556 A:middle
A more sophisticated filesystem

00:22:59.126 --> 00:23:02.556 A:middle
A more sophisticated filesystem

00:23:02.556 --> 00:23:03.776 A:middle
requires more sophisticated

00:23:03.776 --> 00:23:04.646 A:middle
mechanisms for doing

00:23:04.646 --> 00:23:04.976 A:middle
replication.

00:23:10.046 --> 00:23:11.066 A:middle
APFS volume replication is

00:23:11.066 --> 00:23:12.986 A:middle
really best done using ASR

00:23:12.986 --> 00:23:14.636 A:middle
because it provides the highest

00:23:14.736 --> 00:23:15.986 A:middle
fidelity of copies.

00:23:16.346 --> 00:23:17.616 A:middle
And it handles the encryption as

00:23:17.616 --> 00:23:18.146 A:middle
necessary.

00:23:18.596 --> 00:23:20.746 A:middle
And finally, we can now restore

00:23:20.746 --> 00:23:22.686 A:middle
snapshots in snapshot deltas

00:23:22.736 --> 00:23:23.506 A:middle
using ASR.

00:23:24.196 --> 00:23:25.586 A:middle
And with that, I'm going to turn

00:23:25.586 --> 00:23:26.716 A:middle
it over to Bill, who will talk

00:23:26.716 --> 00:23:28.166 A:middle
about external file access for

00:23:28.166 --> 00:23:28.606 A:middle
iOS.

00:23:28.666 --> 00:23:28.976 A:middle
Thank you.

00:23:29.516 --> 00:23:34.376 A:middle
[ Applause ]

00:23:34.876 --> 00:23:35.396 A:middle
&gt;&gt; Thank you, John.

00:23:36.006 --> 00:23:37.046 A:middle
Good afternoon.

00:23:37.856 --> 00:23:40.196 A:middle
You may recall two years ago, we

00:23:40.196 --> 00:23:42.276 A:middle
introduced Files app and a new

00:23:42.276 --> 00:23:43.316 A:middle
file provider, API.

00:23:44.396 --> 00:23:45.726 A:middle
Together, they offer an

00:23:45.726 --> 00:23:47.106 A:middle
excellent experience for

00:23:47.106 --> 00:23:48.376 A:middle
Cloud-based documents.

00:23:49.576 --> 00:23:51.146 A:middle
This year, we thought we could

00:23:51.146 --> 00:23:51.516 A:middle
do more.

00:23:52.706 --> 00:23:54.186 A:middle
So this year, we're happy to

00:23:54.186 --> 00:23:57.296 A:middle
announce support on iOS for

00:23:57.296 --> 00:23:59.916 A:middle
accessing files on network

00:23:59.916 --> 00:24:03.106 A:middle
shares and on USB storage.

00:23:59.916 --> 00:24:03.106 A:middle
shares and on USB storage.

00:24:04.516 --> 00:24:08.500 A:middle
[ Cheering and Applause ]

00:24:10.926 --> 00:24:13.546 A:middle
For USB storage, we support

00:24:13.546 --> 00:24:15.936 A:middle
everything from compact flash

00:24:16.216 --> 00:24:19.766 A:middle
and CF and cards and sticks, up

00:24:19.866 --> 00:24:21.466 A:middle
through USB raid boxes.

00:24:22.906 --> 00:24:23.726 A:middle
We support a number of

00:24:23.726 --> 00:24:24.616 A:middle
filesystems.

00:24:25.026 --> 00:24:27.576 A:middle
We support unencrypted APFS,

00:24:28.766 --> 00:24:32.356 A:middle
unencrypted HFS Plus, and we

00:24:32.356 --> 00:24:34.976 A:middle
support FAT and ExFAT.

00:24:35.516 --> 00:24:39.086 A:middle
[ Applause ]

00:24:39.586 --> 00:24:41.926 A:middle
This feature is available on all

00:24:41.926 --> 00:24:44.126 A:middle
iOS and iPadOS devices.

00:24:44.976 --> 00:24:47.296 A:middle
It's available on iPad Pro with

00:24:47.296 --> 00:24:47.936 A:middle
USB-C.

00:24:48.726 --> 00:24:50.586 A:middle
And for lightning devices, it's

00:24:50.586 --> 00:24:51.856 A:middle
available with the appropriate

00:24:51.956 --> 00:24:52.666 A:middle
adapters.

00:24:56.746 --> 00:24:59.156 A:middle
Moving on for network shares, we

00:24:59.156 --> 00:25:02.416 A:middle
support connecting to SMB 3.0

00:24:59.156 --> 00:25:02.416 A:middle
support connecting to SMB 3.0

00:25:02.416 --> 00:25:02.966 A:middle
servers.

00:25:05.476 --> 00:25:06.886 A:middle
We support connecting over

00:25:06.886 --> 00:25:09.916 A:middle
Wi-Fi, over cellular, and over

00:25:09.916 --> 00:25:10.346 A:middle
Ethernet.

00:25:11.426 --> 00:25:12.616 A:middle
There are a lot of exciting

00:25:12.616 --> 00:25:13.346 A:middle
features here.

00:25:13.346 --> 00:25:15.266 A:middle
But one that we wanted to call

00:25:15.266 --> 00:25:18.186 A:middle
out is for our iOS devices,

00:25:18.186 --> 00:25:19.306 A:middle
iPadOS devices.

00:25:19.626 --> 00:25:21.786 A:middle
We're supporting search using

00:25:21.786 --> 00:25:23.166 A:middle
the Windows Search Protocol.

00:25:24.446 --> 00:25:26.156 A:middle
So all these devices can search

00:25:26.156 --> 00:25:27.766 A:middle
your SMB server if it supports

00:25:28.536 --> 00:25:29.636 A:middle
the WSP protocol.

00:25:30.896 --> 00:25:32.926 A:middle
We're also really excited to

00:25:32.926 --> 00:25:34.266 A:middle
announce that that that includes

00:25:34.546 --> 00:25:36.196 A:middle
the SMB server and macOS

00:25:36.196 --> 00:25:36.636 A:middle
Catalina.

00:25:41.526 --> 00:25:43.186 A:middle
Before going on, I wanted to

00:25:43.186 --> 00:25:44.486 A:middle
talk a moment about security.

00:25:45.296 --> 00:25:47.126 A:middle
Security is a feature users have

00:25:47.126 --> 00:25:48.966 A:middle
come to expect from iOS.

00:25:49.856 --> 00:25:51.956 A:middle
Two of the tools we have used to

00:25:51.956 --> 00:25:54.366 A:middle
help deliver this security are

00:25:54.706 --> 00:25:56.806 A:middle
process separation and privilege

00:25:56.806 --> 00:25:57.436 A:middle
separation.

00:25:57.986 --> 00:26:00.196 A:middle
In developing this feature,

00:25:57.986 --> 00:26:00.196 A:middle
In developing this feature,

00:26:00.296 --> 00:26:01.446 A:middle
we've kept this in mind and

00:26:01.446 --> 00:26:02.636 A:middle
incorporated them from the

00:26:02.636 --> 00:26:03.206 A:middle
ground up.

00:26:04.446 --> 00:26:06.756 A:middle
So for all of our volumes and

00:26:06.756 --> 00:26:08.306 A:middle
shares, the filesystem

00:26:08.306 --> 00:26:10.586 A:middle
manipulations happen not on the

00:26:10.636 --> 00:26:12.466 A:middle
kernel but in a dedicated

00:26:12.496 --> 00:26:13.456 A:middle
process space.

00:26:14.226 --> 00:26:16.906 A:middle
This separation helps us deliver

00:26:17.126 --> 00:26:19.116 A:middle
the security iOS users have come

00:26:19.116 --> 00:26:19.746 A:middle
to expect.

00:26:22.616 --> 00:26:23.976 A:middle
Now, let's see it in an action.

00:26:27.196 --> 00:26:28.976 A:middle
All right, I have an iPad.

00:26:35.206 --> 00:26:37.166 A:middle
And I don't know if -- you

00:26:37.166 --> 00:26:37.936 A:middle
probably can't see it.

00:26:37.936 --> 00:26:38.896 A:middle
But I have a USB stick

00:26:38.896 --> 00:26:39.326 A:middle
connected.

00:26:40.546 --> 00:26:41.566 A:middle
And I have mail.

00:26:42.266 --> 00:26:46.356 A:middle
And in files, on the left, you

00:26:46.356 --> 00:26:48.066 A:middle
can see the locations.

00:26:48.676 --> 00:26:49.786 A:middle
iCloud Drive.

00:26:50.316 --> 00:26:51.676 A:middle
If we had a third-party Cloud

00:26:51.676 --> 00:26:52.756 A:middle
provider, they would be listed

00:26:52.756 --> 00:26:53.486 A:middle
there as well.

00:26:53.486 --> 00:26:56.546 A:middle
And we see a destination for our

00:26:56.546 --> 00:26:57.336 A:middle
USB device.

00:26:57.926 --> 00:27:01.316 A:middle
When we select it, we see our

00:26:57.926 --> 00:27:01.316 A:middle
When we select it, we see our

00:27:01.506 --> 00:27:04.146 A:middle
photos, our documents, all the

00:27:04.146 --> 00:27:05.906 A:middle
files and directories on there.

00:27:06.516 --> 00:27:10.866 A:middle
And we can manipulate them just

00:27:10.866 --> 00:27:13.006 A:middle
like any other file in Files

00:27:13.006 --> 00:27:13.246 A:middle
app.

00:27:13.246 --> 00:27:16.516 A:middle
So to copy one, you just select

00:27:16.516 --> 00:27:18.846 A:middle
it, get it ready for drag and

00:27:18.846 --> 00:27:21.316 A:middle
drop, pick your destination,

00:27:21.986 --> 00:27:23.966 A:middle
drag it, and drop it.

00:27:24.436 --> 00:27:25.356 A:middle
And you can see it's already in

00:27:25.356 --> 00:27:25.916 A:middle
the folder now.

00:27:28.826 --> 00:27:30.016 A:middle
Another thing we like to do with

00:27:30.016 --> 00:27:33.266 A:middle
devices is let's copy photos

00:27:33.766 --> 00:27:35.016 A:middle
onto them.

00:27:35.226 --> 00:27:37.136 A:middle
Photos, I have a picture a

00:27:37.136 --> 00:27:38.196 A:middle
friend took in India of

00:27:38.236 --> 00:27:38.726 A:middle
tomatoes.

00:27:40.366 --> 00:27:43.146 A:middle
Let's save it to the USB.

00:27:43.406 --> 00:27:44.986 A:middle
To do that, we just select the

00:27:44.986 --> 00:27:50.156 A:middle
document, go to Share, go down

00:27:50.156 --> 00:27:52.196 A:middle
the list to save to Files.

00:27:53.056 --> 00:27:55.106 A:middle
You can see, as a destination,

00:27:55.106 --> 00:27:56.836 A:middle
we have the USB stick listed.

00:27:57.436 --> 00:27:59.226 A:middle
We just select it.

00:27:59.226 --> 00:27:59.986 A:middle
It already is.

00:28:00.036 --> 00:28:00.806 A:middle
We hit save.

00:28:01.496 --> 00:28:02.856 A:middle
And it's copied.

00:28:03.516 --> 00:28:08.666 A:middle
[ Cheering and Applause ]

00:28:09.166 --> 00:28:10.906 A:middle
I expect many of you are

00:28:10.906 --> 00:28:12.176 A:middle
application developers.

00:28:12.226 --> 00:28:13.216 A:middle
And you're wondering how your

00:28:13.216 --> 00:28:14.646 A:middle
application can take advantage

00:28:14.646 --> 00:28:15.026 A:middle
of this.

00:28:15.946 --> 00:28:17.776 A:middle
This feature is available to any

00:28:17.776 --> 00:28:19.556 A:middle
and all applications linked on

00:28:19.616 --> 00:28:21.266 A:middle
or after iOS 13.

00:28:22.326 --> 00:28:23.706 A:middle
So rebuild your application.

00:28:24.116 --> 00:28:25.166 A:middle
And you can take advantage.

00:28:26.626 --> 00:28:28.636 A:middle
To see that in action, let's

00:28:28.636 --> 00:28:29.356 A:middle
look at Numbers.

00:28:29.986 --> 00:28:32.926 A:middle
When I open up Numbers, it's

00:28:32.926 --> 00:28:34.146 A:middle
start -- it's starting with my

00:28:34.146 --> 00:28:34.796 A:middle
iCloud Drive.

00:28:35.966 --> 00:28:37.136 A:middle
The USB is listed as a

00:28:37.136 --> 00:28:37.736 A:middle
destination.

00:28:38.396 --> 00:28:39.976 A:middle
We select it.

00:28:43.166 --> 00:28:44.446 A:middle
And there, we can see all of our

00:28:44.446 --> 00:28:45.066 A:middle
documents.

00:28:45.146 --> 00:28:47.846 A:middle
We can see our photos dimmed

00:28:48.056 --> 00:28:48.966 A:middle
because they're not Numbers

00:28:48.966 --> 00:28:49.596 A:middle
documents.

00:28:49.876 --> 00:28:51.586 A:middle
And then we see that we've had

00:28:51.896 --> 00:28:53.836 A:middle
two Numbers documents on this

00:28:53.836 --> 00:28:54.126 A:middle
drive.

00:28:55.266 --> 00:28:56.806 A:middle
Let's open one of them.

00:28:56.806 --> 00:28:59.186 A:middle
It's a loan comparison comparing

00:28:59.186 --> 00:29:00.616 A:middle
two different loan amounts and

00:28:59.186 --> 00:29:00.616 A:middle
two different loan amounts and

00:29:00.616 --> 00:29:01.656 A:middle
two different interest rates.

00:29:02.836 --> 00:29:03.976 A:middle
Just for comparison, let's see

00:29:03.976 --> 00:29:04.546 A:middle
what happens if we raise the

00:29:04.546 --> 00:29:04.966 A:middle
interest rate.

00:29:09.156 --> 00:29:09.246 A:middle
No. Oh.

00:29:10.016 --> 00:29:11.056 A:middle
[ Laughter ]

00:29:11.056 --> 00:29:11.976 A:middle
Set it to 20, not 200.

00:29:18.046 --> 00:29:21.856 A:middle
Oh, no. Well, that's crazy.

00:29:22.508 --> 00:29:24.508 A:middle
[ Laughter ]

00:29:27.056 --> 00:29:28.926 A:middle
And you can see on the -- see

00:29:28.926 --> 00:29:30.676 A:middle
live the interest rate amounts

00:29:30.676 --> 00:29:30.956 A:middle
changing.

00:29:38.396 --> 00:29:40.456 A:middle
So what does this mean for you

00:29:41.446 --> 00:29:42.246 A:middle
as developers?

00:29:43.306 --> 00:29:46.546 A:middle
As I said, it's available if

00:29:46.546 --> 00:29:47.966 A:middle
you're linked on or after iOS

00:29:47.966 --> 00:29:48.526 A:middle
13.

00:29:48.686 --> 00:29:50.466 A:middle
So rebuild your application and

00:29:50.466 --> 00:29:50.586 A:middle
test.

00:29:55.346 --> 00:29:56.726 A:middle
We're adding five different

00:29:56.726 --> 00:29:58.956 A:middle
filesystem types to iOS.

00:29:59.836 --> 00:30:01.636 A:middle
These filesystems act slightly

00:29:59.836 --> 00:30:01.636 A:middle
These filesystems act slightly

00:30:01.636 --> 00:30:03.876 A:middle
differently than APFS on the

00:30:03.876 --> 00:30:05.216 A:middle
internal flash storage.

00:30:07.216 --> 00:30:09.836 A:middle
One difference is iOS has always

00:30:09.836 --> 00:30:11.896 A:middle
had case-sensitive filesystems.

00:30:12.796 --> 00:30:14.076 A:middle
FAT and ExFAT are

00:30:14.366 --> 00:30:15.636 A:middle
case-insensitive.

00:30:16.716 --> 00:30:18.816 A:middle
And HFS and APFS can be

00:30:18.816 --> 00:30:19.996 A:middle
configured either way.

00:30:21.636 --> 00:30:24.056 A:middle
The Clone System call may not

00:30:24.056 --> 00:30:24.876 A:middle
always be available.

00:30:26.246 --> 00:30:28.206 A:middle
So as these differences are --

00:30:28.326 --> 00:30:29.386 A:middle
if these are differences are

00:30:29.386 --> 00:30:30.926 A:middle
important to you or as they are,

00:30:31.646 --> 00:30:32.896 A:middle
please pay attention to volume

00:30:32.896 --> 00:30:33.676 A:middle
capabilities.

00:30:34.656 --> 00:30:37.106 A:middle
There are two different APIs or

00:30:37.106 --> 00:30:38.426 A:middle
a couple of APIs that can get

00:30:38.426 --> 00:30:38.966 A:middle
them for you.

00:30:39.746 --> 00:30:41.826 A:middle
One I wanted to call out are the

00:30:41.826 --> 00:30:44.406 A:middle
resourceValues in NSURL.

00:30:45.576 --> 00:30:47.726 A:middle
These can give you parameters

00:30:47.726 --> 00:30:48.676 A:middle
for the filesystem you're

00:30:48.676 --> 00:30:48.976 A:middle
working with.

00:30:52.296 --> 00:30:53.756 A:middle
Another important point is file

00:30:54.176 --> 00:30:58.006 A:middle
movement may take time.

00:30:58.186 --> 00:31:00.006 A:middle
So please put your temporary

00:30:58.186 --> 00:31:00.006 A:middle
So please put your temporary

00:31:00.006 --> 00:31:02.066 A:middle
files near your working files.

00:31:02.696 --> 00:31:05.226 A:middle
If you don't, right, this is

00:31:05.226 --> 00:31:05.676 A:middle
helpful.

00:31:06.586 --> 00:31:09.706 A:middle
Because Save-Save uses a rename

00:31:09.946 --> 00:31:12.136 A:middle
at the very end so that a user

00:31:12.136 --> 00:31:13.496 A:middle
always sees a good file.

00:31:13.666 --> 00:31:15.456 A:middle
They either see the document

00:31:15.456 --> 00:31:17.216 A:middle
that they started with, or they

00:31:17.276 --> 00:31:18.046 A:middle
see the new save.

00:31:19.356 --> 00:31:20.586 A:middle
For this to work, we need that

00:31:20.586 --> 00:31:21.146 A:middle
rename.

00:31:21.496 --> 00:31:22.466 A:middle
And that only works if they're

00:31:22.466 --> 00:31:23.936 A:middle
both on the same filesystem.

00:31:25.466 --> 00:31:26.806 A:middle
Also, if you're not careful

00:31:26.806 --> 00:31:28.036 A:middle
about your temporary files, they

00:31:28.036 --> 00:31:29.986 A:middle
may end up in your container on

00:31:29.986 --> 00:31:31.116 A:middle
the internal storage.

00:31:31.766 --> 00:31:32.686 A:middle
And that's going to lead to a

00:31:32.686 --> 00:31:33.976 A:middle
lot of unnecessary IO.

00:31:38.016 --> 00:31:39.416 A:middle
File Manager can help you with

00:31:39.416 --> 00:31:39.786 A:middle
this.

00:31:40.286 --> 00:31:42.796 A:middle
If you ask for a URL for the

00:31:42.796 --> 00:31:44.496 A:middle
itemReplacementDirectory

00:31:44.766 --> 00:31:46.456 A:middle
appropriate for your documents,

00:31:46.706 --> 00:31:48.106 A:middle
it will give you a temporary

00:31:48.106 --> 00:31:49.286 A:middle
directory on the same

00:31:49.286 --> 00:31:49.976 A:middle
filesystem.

00:31:55.406 --> 00:31:56.856 A:middle
Another thing is that external

00:31:56.856 --> 00:31:58.016 A:middle
devices can go away.

00:31:59.416 --> 00:32:01.206 A:middle
A network can go out of range.

00:31:59.416 --> 00:32:01.206 A:middle
A network can go out of range.

00:32:02.226 --> 00:32:03.876 A:middle
A file server can go down.

00:32:04.486 --> 00:32:05.826 A:middle
A CAT can disconnect a cable.

00:32:07.236 --> 00:32:08.556 A:middle
These things can happen.

00:32:08.916 --> 00:32:10.106 A:middle
And your application needs to be

00:32:10.106 --> 00:32:12.126 A:middle
robust in face of it.

00:32:12.666 --> 00:32:13.886 A:middle
One thing I especially wanted to

00:32:13.886 --> 00:32:16.056 A:middle
point out is mmap can be

00:32:16.056 --> 00:32:16.656 A:middle
dangerous.

00:32:17.366 --> 00:32:18.666 A:middle
It can be really powerful.

00:32:18.986 --> 00:32:20.826 A:middle
But if the file goes away, the

00:32:20.826 --> 00:32:22.096 A:middle
only way the kernel can tell you

00:32:22.096 --> 00:32:23.666 A:middle
that is with a BUS error.

00:32:25.536 --> 00:32:28.586 A:middle
So one thing, if you're using

00:32:28.646 --> 00:32:31.066 A:middle
NSData, there is a hint you can

00:32:31.066 --> 00:32:33.606 A:middle
give NSData and say mmap this

00:32:33.636 --> 00:32:34.966 A:middle
data from a file if it's safe.

00:32:40.086 --> 00:32:41.346 A:middle
The last point is that external

00:32:41.346 --> 00:32:42.796 A:middle
devices, all of them, have

00:32:42.886 --> 00:32:44.626 A:middle
higher latencies than APFS on

00:32:44.666 --> 00:32:46.376 A:middle
the internal flash storage.

00:32:47.566 --> 00:32:50.236 A:middle
So if you're doing sizable IO,

00:32:50.236 --> 00:32:53.226 A:middle
please keep multiple operations

00:32:53.396 --> 00:32:53.976 A:middle
in-flight at once.

00:32:58.336 --> 00:33:00.206 A:middle
So to summarize today's talk,

00:32:58.336 --> 00:33:00.206 A:middle
So to summarize today's talk,

00:33:01.696 --> 00:33:03.116 A:middle
Max talked to us about how we're

00:33:03.116 --> 00:33:06.086 A:middle
making the root volume read-only

00:33:06.456 --> 00:33:07.376 A:middle
for enhanced security.

00:33:08.046 --> 00:33:12.296 A:middle
John talked to us about ASR and

00:33:12.296 --> 00:33:14.246 A:middle
how you can use ASR to replicate

00:33:14.246 --> 00:33:16.016 A:middle
volumes, including snapshot

00:33:16.016 --> 00:33:16.506 A:middle
deltas.

00:33:17.106 --> 00:33:19.926 A:middle
And I talked to you about how

00:33:19.926 --> 00:33:20.846 A:middle
we're adding support for

00:33:20.846 --> 00:33:22.856 A:middle
external files to iOS and iPadOS

00:33:22.856 --> 00:33:25.206 A:middle
and how that will let you access

00:33:25.546 --> 00:33:27.856 A:middle
files on USB storage and network

00:33:27.856 --> 00:33:28.316 A:middle
shares.

00:33:30.346 --> 00:33:32.356 A:middle
For more information, we have a

00:33:32.356 --> 00:33:34.126 A:middle
lab after this session.

00:33:34.726 --> 00:33:37.286 A:middle
And tomorrow, there's a talk,

00:33:38.906 --> 00:33:40.656 A:middle
Combine and Advances in

00:33:40.696 --> 00:33:41.866 A:middle
Foundation, where they're going

00:33:41.866 --> 00:33:43.456 A:middle
to talk more about what you can

00:33:43.456 --> 00:33:45.396 A:middle
do with Foundation on external

00:33:45.396 --> 00:33:45.736 A:middle
media.

00:33:45.876 --> 00:33:48.046 A:middle
And there's also a video

00:33:48.046 --> 00:33:50.926 A:middle
session, What's New in File

00:33:50.926 --> 00:33:52.606 A:middle
Management and Quick Look, that

00:33:52.746 --> 00:33:53.996 A:middle
will talk more about the UI

00:33:53.996 --> 00:33:55.756 A:middle
document aspects of this talk.

00:33:57.126 --> 00:33:57.406 A:middle
Thank you.

00:33:58.516 --> 00:34:04.500 A:middle
[ Applause ]
