WEBVTT

00:00:01.516 --> 00:00:04.500 A:middle
[ Music ]

00:00:09.516 --> 00:00:12.026 A:middle
[ Applause ]

00:00:12.526 --> 00:00:13.886 A:middle
&gt;&gt; Good afternoon, everyone, and

00:00:14.056 --> 00:00:15.106 A:middle
thanks for joining us today.

00:00:16.065 --> 00:00:17.416 A:middle
I'm Garrett, and I work on the

00:00:17.416 --> 00:00:18.656 A:middle
Trust and Execution Team here at

00:00:18.656 --> 00:00:20.236 A:middle
Apple and today we're here to

00:00:20.236 --> 00:00:21.756 A:middle
talk All About Notarization.

00:00:22.276 --> 00:00:25.066 A:middle
Here's a quick agenda for the

00:00:25.066 --> 00:00:25.346 A:middle
talk.

00:00:25.346 --> 00:00:26.516 A:middle
We're going to start with a

00:00:26.516 --> 00:00:27.656 A:middle
brief overview of what

00:00:27.656 --> 00:00:29.046 A:middle
notarization is and some of the

00:00:29.046 --> 00:00:30.006 A:middle
benefits that it provides.

00:00:30.986 --> 00:00:31.776 A:middle
Then we're going to talk about

00:00:31.776 --> 00:00:33.076 A:middle
the application requirements to

00:00:33.076 --> 00:00:34.466 A:middle
get your software notarized.

00:00:35.336 --> 00:00:36.256 A:middle
And then finally we'll run

00:00:36.256 --> 00:00:38.156 A:middle
through the workflows and tools

00:00:38.226 --> 00:00:40.086 A:middle
you'll need to use to notarize

00:00:40.086 --> 00:00:40.656 A:middle
your software.

00:00:40.656 --> 00:00:44.666 A:middle
So let's get started.

00:00:45.196 --> 00:00:46.746 A:middle
What exactly is notarization?

00:00:47.666 --> 00:00:50.136 A:middle
Well, it's a process that we

00:00:50.136 --> 00:00:52.356 A:middle
introduced last year at WWDC to

00:00:52.746 --> 00:00:54.106 A:middle
help identify and block

00:00:54.366 --> 00:00:56.086 A:middle
malicious software prior to

00:00:56.086 --> 00:00:56.666 A:middle
distribution.

00:00:57.326 --> 00:00:59.346 A:middle
Now it's an extension of the

00:00:59.346 --> 00:01:00.906 A:middle
Developer ID Program, which

00:00:59.346 --> 00:01:00.906 A:middle
Developer ID Program, which

00:01:00.906 --> 00:01:01.676 A:middle
means that you don't need to

00:01:01.676 --> 00:01:02.936 A:middle
register for anything different

00:01:03.586 --> 00:01:04.796 A:middle
or use different certificates

00:01:05.786 --> 00:01:07.236 A:middle
which also means that you stay

00:01:07.236 --> 00:01:08.986 A:middle
in control of signing and

00:01:08.986 --> 00:01:10.366 A:middle
distribution of your software

00:01:10.696 --> 00:01:11.736 A:middle
just like you did before

00:01:11.736 --> 00:01:12.886 A:middle
notarization was introduced.

00:01:15.606 --> 00:01:17.396 A:middle
The key to this is the Notary

00:01:17.396 --> 00:01:19.826 A:middle
Service which performs automated

00:01:19.826 --> 00:01:22.136 A:middle
security checks on Developer ID

00:01:22.136 --> 00:01:22.966 A:middle
signed content.

00:01:23.546 --> 00:01:25.816 A:middle
So let's run through a little

00:01:25.816 --> 00:01:26.926 A:middle
bit about what the workflow

00:01:26.926 --> 00:01:28.426 A:middle
looks like when you need to

00:01:28.426 --> 00:01:29.646 A:middle
start notarizing your software

00:01:29.646 --> 00:01:30.306 A:middle
for the first time.

00:01:32.216 --> 00:01:33.816 A:middle
Here's a diagram that talks a

00:01:33.816 --> 00:01:34.706 A:middle
little bit about what the

00:01:34.706 --> 00:01:35.696 A:middle
development workflow can look

00:01:35.696 --> 00:01:37.636 A:middle
like and local development

00:01:37.866 --> 00:01:39.266 A:middle
remains completely unchanged.

00:01:39.966 --> 00:01:41.366 A:middle
You build and sign at your desk

00:01:41.576 --> 00:01:42.656 A:middle
using your Apple Developer

00:01:42.656 --> 00:01:44.526 A:middle
Certificates until you have a

00:01:44.526 --> 00:01:45.236 A:middle
release candidate.

00:01:45.776 --> 00:01:48.816 A:middle
At that point you sign the

00:01:48.816 --> 00:01:50.196 A:middle
software with your Developer ID

00:01:50.196 --> 00:01:52.166 A:middle
Certificate, and you can send a

00:01:52.166 --> 00:01:53.486 A:middle
copy of it to the Apple Notary

00:01:53.486 --> 00:01:55.536 A:middle
Service for notarization.

00:01:56.726 --> 00:01:58.376 A:middle
When notarization is complete

00:01:58.506 --> 00:02:00.346 A:middle
and successful, the Notary

00:01:58.506 --> 00:02:00.346 A:middle
and successful, the Notary

00:02:00.346 --> 00:02:02.076 A:middle
Service can send back a ticket

00:02:02.846 --> 00:02:03.726 A:middle
which you staple to your

00:02:03.726 --> 00:02:05.696 A:middle
software prior to distribution

00:02:06.266 --> 00:02:09.045 A:middle
and once it's stapled, the

00:02:09.045 --> 00:02:09.806 A:middle
software is ready for

00:02:09.806 --> 00:02:11.396 A:middle
distribution just like you did

00:02:11.396 --> 00:02:11.746 A:middle
before.

00:02:14.066 --> 00:02:15.746 A:middle
Now it's worth calling out that

00:02:16.046 --> 00:02:17.256 A:middle
this workflow didn't change at

00:02:17.256 --> 00:02:18.326 A:middle
all from last year, so this is

00:02:18.326 --> 00:02:19.296 A:middle
just a bit of a refresher.

00:02:19.946 --> 00:02:22.816 A:middle
Now what we didn't talk about

00:02:22.816 --> 00:02:24.446 A:middle
last year was what happens when

00:02:24.446 --> 00:02:25.776 A:middle
someone downloads your software

00:02:25.776 --> 00:02:26.996 A:middle
and uses it for the first time.

00:02:28.426 --> 00:02:29.406 A:middle
So when a user downloads your

00:02:29.406 --> 00:02:30.426 A:middle
stapled software and

00:02:31.006 --> 00:02:32.096 A:middle
double-click it to launch it,

00:02:32.556 --> 00:02:33.986 A:middle
the gatekeeper will perform a

00:02:33.986 --> 00:02:34.716 A:middle
verification.

00:02:35.966 --> 00:02:37.616 A:middle
It'll check the local ticket and

00:02:37.616 --> 00:02:38.706 A:middle
it will also reach out to the

00:02:38.706 --> 00:02:41.066 A:middle
Notary Service via CloudKit to

00:02:41.066 --> 00:02:42.006 A:middle
check for a ticket also.

00:02:42.886 --> 00:02:44.246 A:middle
As long as the ticket checks out

00:02:44.246 --> 00:02:45.456 A:middle
and the ticket matches the

00:02:45.456 --> 00:02:47.586 A:middle
content of your app, gatekeeper

00:02:47.586 --> 00:02:48.696 A:middle
will allow the application and

00:02:49.096 --> 00:02:50.076 A:middle
the user will see the normal

00:02:50.076 --> 00:02:50.876 A:middle
first launch prompt.

00:02:52.096 --> 00:02:53.746 A:middle
Now I want to remind everyone

00:02:54.296 --> 00:02:56.466 A:middle
that notarization is not an app

00:02:56.466 --> 00:02:56.746 A:middle
review.

00:02:57.706 --> 00:02:59.186 A:middle
The Notary Service performs a

00:02:59.186 --> 00:03:00.386 A:middle
set of automated security

00:02:59.186 --> 00:03:00.386 A:middle
set of automated security

00:03:01.246 --> 00:03:01.366 A:middle
checks.

00:03:03.016 --> 00:03:05.866 A:middle
Now last year we made a goal to

00:03:05.866 --> 00:03:07.276 A:middle
get most responses back from the

00:03:07.276 --> 00:03:08.586 A:middle
Notary Service within an hour

00:03:10.026 --> 00:03:11.026 A:middle
and it actually turns out that

00:03:11.026 --> 00:03:13.616 A:middle
over the last year 99% of

00:03:13.616 --> 00:03:15.306 A:middle
submissions have had an answer

00:03:15.306 --> 00:03:17.376 A:middle
back within 15 minutes.

00:03:18.636 --> 00:03:20.486 A:middle
Also, the status of the Notary

00:03:20.486 --> 00:03:22.046 A:middle
Service is now on Apple's public

00:03:22.046 --> 00:03:22.816 A:middle
status page.

00:03:23.326 --> 00:03:24.626 A:middle
So you can easily check to see

00:03:24.626 --> 00:03:25.936 A:middle
if there any service problems

00:03:26.246 --> 00:03:27.686 A:middle
that would cause problems.

00:03:28.246 --> 00:03:31.456 A:middle
Now what are the benefits to

00:03:31.456 --> 00:03:32.066 A:middle
notarization?

00:03:32.866 --> 00:03:34.566 A:middle
Well, there are many of them.

00:03:34.666 --> 00:03:35.786 A:middle
So I'm just going to highlight a

00:03:35.786 --> 00:03:37.476 A:middle
few of them today.

00:03:37.586 --> 00:03:39.236 A:middle
First the Notary Service can

00:03:39.236 --> 00:03:40.636 A:middle
help prevent you from

00:03:40.636 --> 00:03:41.566 A:middle
inadvertently shipping a

00:03:41.566 --> 00:03:42.566 A:middle
malicious dependency.

00:03:44.476 --> 00:03:47.366 A:middle
Second, apps with a hardened

00:03:47.496 --> 00:03:49.476 A:middle
runtime are more secure by

00:03:49.476 --> 00:03:50.986 A:middle
default, and we'll talk a little

00:03:50.986 --> 00:03:51.726 A:middle
more about that later.

00:03:52.256 --> 00:03:53.636 A:middle
That can help prevent your app

00:03:53.636 --> 00:03:55.166 A:middle
from being abused by attackers.

00:03:59.106 --> 00:04:00.906 A:middle
Third, users are more likely to

00:03:59.106 --> 00:04:00.906 A:middle
Third, users are more likely to

00:04:00.906 --> 00:04:02.456 A:middle
download and try new software

00:04:02.786 --> 00:04:04.066 A:middle
knowing that Apple has scanned

00:04:04.066 --> 00:04:05.526 A:middle
it for known security issues.

00:04:06.076 --> 00:04:10.666 A:middle
And finally, notarization also

00:04:10.666 --> 00:04:11.806 A:middle
provides an audit trail of

00:04:11.806 --> 00:04:13.096 A:middle
software notarized by your

00:04:13.096 --> 00:04:14.706 A:middle
developer ID account that you

00:04:14.706 --> 00:04:15.896 A:middle
can use to check the submission

00:04:15.896 --> 00:04:17.245 A:middle
history and ensure that software

00:04:17.245 --> 00:04:18.026 A:middle
hasn't been released that you

00:04:18.026 --> 00:04:20.315 A:middle
didn't intend to release from

00:04:20.315 --> 00:04:20.886 A:middle
your account.

00:04:21.625 --> 00:04:23.386 A:middle
So that's a little bit of an

00:04:23.386 --> 00:04:24.556 A:middle
overview of notarization.

00:04:24.926 --> 00:04:26.096 A:middle
Now let's bring up Robert to

00:04:26.096 --> 00:04:27.116 A:middle
talk about the application

00:04:27.116 --> 00:04:28.456 A:middle
requirements to notarize your

00:04:28.456 --> 00:04:28.936 A:middle
software.

00:04:29.966 --> 00:04:30.976 A:middle
Robert.

00:04:32.516 --> 00:04:36.500 A:middle
[ Applause ]

00:04:38.326 --> 00:04:40.016 A:middle
&gt;&gt; So to start I want to say

00:04:40.016 --> 00:04:41.846 A:middle
that for any of the software

00:04:41.846 --> 00:04:43.536 A:middle
that you previously distributed

00:04:43.666 --> 00:04:44.716 A:middle
it doesn't have to meet any new

00:04:44.716 --> 00:04:45.246 A:middle
requirements.

00:04:45.246 --> 00:04:47.876 A:middle
You can submit your existing

00:04:47.926 --> 00:04:48.896 A:middle
distributed software for

00:04:48.896 --> 00:04:50.766 A:middle
notarization as is without

00:04:50.766 --> 00:04:53.256 A:middle
change, but for new software you

00:04:53.256 --> 00:04:54.646 A:middle
need to make sure that it meets

00:04:54.646 --> 00:04:56.186 A:middle
a few security requirements.

00:04:56.246 --> 00:04:57.736 A:middle
In particular, it has to be

00:04:57.736 --> 00:04:59.286 A:middle
completely and correctly signed

00:04:59.696 --> 00:05:00.616 A:middle
and it needs to adopt the

00:04:59.696 --> 00:05:00.616 A:middle
and it needs to adopt the

00:05:00.616 --> 00:05:02.486 A:middle
hardened runtime.

00:05:02.486 --> 00:05:03.686 A:middle
And by new software I mean

00:05:03.686 --> 00:05:05.816 A:middle
software signed on or after June

00:05:05.856 --> 00:05:07.696 A:middle
1st of 2019.

00:05:08.806 --> 00:05:10.436 A:middle
So we're going to go into detail

00:05:10.436 --> 00:05:11.916 A:middle
on what we mean by both of those

00:05:11.916 --> 00:05:13.336 A:middle
things, but the correct signing

00:05:13.336 --> 00:05:15.276 A:middle
and the hardened runtime.

00:05:15.606 --> 00:05:19.716 A:middle
So first when you, to completely

00:05:19.716 --> 00:05:20.836 A:middle
sign everything you need to sign

00:05:20.836 --> 00:05:21.236 A:middle
everything.

00:05:21.236 --> 00:05:22.556 A:middle
That means bundles, Macho-Os,

00:05:22.586 --> 00:05:24.496 A:middle
installer packages wherever they

00:05:24.496 --> 00:05:26.546 A:middle
are or whether you have Mach-Os

00:05:26.546 --> 00:05:28.086 A:middle
in your installer packages,

00:05:28.086 --> 00:05:29.576 A:middle
installer packages in your

00:05:30.036 --> 00:05:31.456 A:middle
bundles, anywhere that they're

00:05:31.456 --> 00:05:33.306 A:middle
found in any place within your

00:05:33.306 --> 00:05:34.876 A:middle
product they need to be signed,

00:05:34.906 --> 00:05:36.516 A:middle
they need to be signed

00:05:36.516 --> 00:05:36.856 A:middle
correctly.

00:05:38.166 --> 00:05:39.936 A:middle
So to sign correctly that means

00:05:40.026 --> 00:05:42.756 A:middle
you have to sign bundles,

00:05:42.756 --> 00:05:45.346 A:middle
Macho-Os and code, and I'll talk

00:05:45.346 --> 00:05:46.456 A:middle
more about code in a second,

00:05:46.456 --> 00:05:49.646 A:middle
with your developer ID

00:05:49.646 --> 00:05:51.206 A:middle
application certificate and be

00:05:51.206 --> 00:05:52.286 A:middle
sure to include a secure

00:05:52.286 --> 00:05:52.876 A:middle
timestamp.

00:05:54.176 --> 00:05:56.056 A:middle
For executables they need to opt

00:05:56.056 --> 00:05:57.526 A:middle
into the hardened runtime.

00:05:57.526 --> 00:05:58.836 A:middle
You don't need to opt into the

00:05:58.836 --> 00:06:00.196 A:middle
hardened runtime for dylibs or

00:05:58.836 --> 00:06:00.196 A:middle
hardened runtime for dylibs or

00:06:00.196 --> 00:06:01.556 A:middle
frameworks or bundles just for

00:06:01.556 --> 00:06:02.196 A:middle
executables.

00:06:03.546 --> 00:06:05.386 A:middle
For installer packages you need

00:06:05.386 --> 00:06:07.516 A:middle
to sign them with your Developer

00:06:07.516 --> 00:06:09.316 A:middle
ID Installer Certificate and

00:06:09.316 --> 00:06:10.726 A:middle
this is different from your

00:06:10.726 --> 00:06:11.856 A:middle
Developer ID Application

00:06:11.856 --> 00:06:12.906 A:middle
Certificate so be careful.

00:06:14.236 --> 00:06:16.036 A:middle
Also, if you choose to sign your

00:06:16.036 --> 00:06:17.926 A:middle
disk images to avoid gatekeeper

00:06:17.926 --> 00:06:20.306 A:middle
path randomization, those must

00:06:20.306 --> 00:06:21.686 A:middle
be signed with your Developer ID

00:06:21.686 --> 00:06:23.086 A:middle
Application Certificate and

00:06:23.086 --> 00:06:24.346 A:middle
include a secure timestamp.

00:06:24.886 --> 00:06:27.926 A:middle
So if you're using Xcode for

00:06:27.926 --> 00:06:29.266 A:middle
building your package, your

00:06:29.266 --> 00:06:29.986 A:middle
software, this is easy.

00:06:29.986 --> 00:06:32.796 A:middle
If you turn on automatic code

00:06:32.796 --> 00:06:34.396 A:middle
signing, Xcode does all of this

00:06:34.396 --> 00:06:36.436 A:middle
for you, but you have to be

00:06:36.436 --> 00:06:37.016 A:middle
careful.

00:06:37.016 --> 00:06:39.586 A:middle
If you use script build phases

00:06:39.586 --> 00:06:41.666 A:middle
or copy build phases, those

00:06:41.776 --> 00:06:43.486 A:middle
might be introducing new code

00:06:43.486 --> 00:06:46.656 A:middle
into your software that Xcode

00:06:46.656 --> 00:06:48.026 A:middle
doesn't know about and then you

00:06:48.026 --> 00:06:49.206 A:middle
have to make sure that those get

00:06:49.496 --> 00:06:50.596 A:middle
correctly signed.

00:06:51.206 --> 00:06:55.176 A:middle
So I mentioned code files.

00:06:55.576 --> 00:06:57.936 A:middle
So when we introduced code

00:06:57.936 --> 00:06:59.856 A:middle
signing a number of years ago,

00:06:59.856 --> 00:07:01.476 A:middle
we documented in the technote

00:06:59.856 --> 00:07:01.476 A:middle
we documented in the technote

00:07:01.476 --> 00:07:02.946 A:middle
that these things called code

00:07:02.946 --> 00:07:03.396 A:middle
places.

00:07:03.706 --> 00:07:05.336 A:middle
So any files found in any of

00:07:05.336 --> 00:07:06.706 A:middle
these places within their bundle

00:07:06.706 --> 00:07:08.126 A:middle
are considered code by the code

00:07:08.126 --> 00:07:09.576 A:middle
signing infrastructure and that

00:07:09.576 --> 00:07:10.646 A:middle
means they need to have an

00:07:10.646 --> 00:07:11.726 A:middle
attached signature.

00:07:12.246 --> 00:07:15.726 A:middle
Mach-Os are the best for this.

00:07:15.726 --> 00:07:16.966 A:middle
You can embed the signature

00:07:16.966 --> 00:07:18.726 A:middle
inside of any Mach-Os that you

00:07:18.726 --> 00:07:19.906 A:middle
put in these places as well as

00:07:19.906 --> 00:07:21.536 A:middle
for bundles, but if you put

00:07:21.536 --> 00:07:23.416 A:middle
other types of files such as

00:07:23.666 --> 00:07:27.536 A:middle
JPEGs or raw binary files, those

00:07:27.536 --> 00:07:30.116 A:middle
have to be signed as well, but

00:07:30.116 --> 00:07:31.486 A:middle
they don't get attached

00:07:31.486 --> 00:07:32.826 A:middle
signature instead the signature

00:07:32.826 --> 00:07:34.806 A:middle
ends up as an extended

00:07:34.806 --> 00:07:35.386 A:middle
attribute.

00:07:35.826 --> 00:07:36.706 A:middle
And that means that you have to

00:07:36.706 --> 00:07:37.886 A:middle
be careful when you're packaging

00:07:37.886 --> 00:07:39.056 A:middle
up your code to make sure that

00:07:39.056 --> 00:07:40.756 A:middle
that extended attribute stays

00:07:40.756 --> 00:07:41.326 A:middle
within those.

00:07:41.786 --> 00:07:43.316 A:middle
To avoid having to be too

00:07:43.316 --> 00:07:44.686 A:middle
careful with that we recommend

00:07:44.686 --> 00:07:46.236 A:middle
that you put anything that isn't

00:07:46.236 --> 00:07:47.786 A:middle
a Macho-O or a bundle containing

00:07:47.786 --> 00:07:49.406 A:middle
a Macho-O in a place other than

00:07:49.406 --> 00:07:50.986 A:middle
any of these places when you're

00:07:50.986 --> 00:07:51.946 A:middle
structuring your app.

00:07:52.646 --> 00:07:55.676 A:middle
So to get singing right when

00:07:55.676 --> 00:07:56.976 A:middle
you're doing it outside of

00:07:56.976 --> 00:07:58.976 A:middle
Xcode, we recommend what we call

00:07:58.976 --> 00:08:00.206 A:middle
inside-out code signing.

00:07:58.976 --> 00:08:00.206 A:middle
inside-out code signing.

00:08:00.486 --> 00:08:02.016 A:middle
That means you sign the most

00:08:02.016 --> 00:08:05.096 A:middle
deeply nested bundle or piece of

00:08:05.096 --> 00:08:07.826 A:middle
code within your app first.

00:08:08.366 --> 00:08:10.216 A:middle
In this case, it would be the

00:08:10.216 --> 00:08:11.876 A:middle
updater.app inside of the

00:08:11.876 --> 00:08:13.596 A:middle
Sparkle framework inside of the

00:08:13.596 --> 00:08:17.116 A:middle
Watching Grass Grow app and then

00:08:17.116 --> 00:08:18.656 A:middle
you move up a level and sign

00:08:18.656 --> 00:08:20.686 A:middle
each of the things individually.

00:08:20.926 --> 00:08:21.966 A:middle
Note that when you sign the

00:08:21.966 --> 00:08:24.046 A:middle
Sparkle framework by itself or

00:08:24.046 --> 00:08:25.456 A:middle
the Sparkle framework that grabs

00:08:25.456 --> 00:08:27.356 A:middle
the Sparkle main executable as

00:08:27.356 --> 00:08:28.696 A:middle
well as signing the updater.app

00:08:28.696 --> 00:08:29.086 A:middle
together.

00:08:29.086 --> 00:08:31.696 A:middle
And note you need to go

00:08:31.856 --> 00:08:32.966 A:middle
individually to watch Grass

00:08:32.966 --> 00:08:35.846 A:middle
Grow, savergrowgrass.dylib and

00:08:35.846 --> 00:08:36.976 A:middle
Watching Grass Grow Helper.

00:08:38.015 --> 00:08:39.515 A:middle
And finally, after you've signed

00:08:39.515 --> 00:08:40.756 A:middle
all of those you sign everything

00:08:40.756 --> 00:08:42.446 A:middle
together at the top bundle and

00:08:42.446 --> 00:08:44.285 A:middle
again this will sign the main

00:08:44.285 --> 00:08:45.846 A:middle
executable your bundle as

00:08:45.846 --> 00:08:47.786 A:middle
indicated by your Info.plist.

00:08:48.996 --> 00:08:51.326 A:middle
Some of you use the -- Deep Flag

00:08:51.326 --> 00:08:52.626 A:middle
in your custom workflows, but

00:08:52.626 --> 00:08:54.406 A:middle
you need to be careful.

00:08:54.586 --> 00:08:56.626 A:middle
The -- Deep Flag only looks for

00:08:56.626 --> 00:08:58.716 A:middle
code in code places and in this

00:08:58.716 --> 00:09:02.226 A:middle
case the Grow Grass dylib the

00:08:58.716 --> 00:09:02.226 A:middle
case the Grow Grass dylib the

00:09:02.226 --> 00:09:04.076 A:middle
Watching Grass Grow Saver and

00:09:04.076 --> 00:09:06.356 A:middle
the updater.app wouldn't be

00:09:06.356 --> 00:09:07.326 A:middle
found as code.

00:09:07.326 --> 00:09:08.176 A:middle
They would be signed in as

00:09:08.176 --> 00:09:09.876 A:middle
resources, but they wouldn't be

00:09:09.876 --> 00:09:10.986 A:middle
signed as code and, therefore,

00:09:10.986 --> 00:09:12.566 A:middle
they would be rejected by the

00:09:12.566 --> 00:09:13.846 A:middle
notarization unless you took the

00:09:13.846 --> 00:09:15.266 A:middle
extra steps to do the inside out

00:09:15.266 --> 00:09:15.576 A:middle
signing.

00:09:16.756 --> 00:09:19.856 A:middle
And see Technote 2206 for more

00:09:19.856 --> 00:09:20.976 A:middle
information on inside out

00:09:20.976 --> 00:09:24.036 A:middle
signing and code places after

00:09:24.186 --> 00:09:24.686 A:middle
the talk.

00:09:26.226 --> 00:09:27.796 A:middle
So once you've completely and

00:09:27.796 --> 00:09:29.296 A:middle
correctly signed your bundle,

00:09:29.296 --> 00:09:30.996 A:middle
your software, you have to make

00:09:30.996 --> 00:09:32.046 A:middle
sure that you don't invalidate

00:09:32.046 --> 00:09:32.676 A:middle
your signature.

00:09:32.886 --> 00:09:33.786 A:middle
That means you should never be

00:09:33.786 --> 00:09:35.396 A:middle
changing files in your bundle

00:09:35.396 --> 00:09:36.856 A:middle
except during installation or

00:09:36.856 --> 00:09:38.856 A:middle
update and when you update make

00:09:38.856 --> 00:09:40.586 A:middle
sure what is the result of that

00:09:40.586 --> 00:09:42.526 A:middle
update is correctly signed and

00:09:42.606 --> 00:09:44.556 A:middle
notarized on your customer

00:09:44.556 --> 00:09:44.916 A:middle
system.

00:09:44.916 --> 00:09:48.356 A:middle
So now we're going to dig deeper

00:09:48.356 --> 00:09:49.306 A:middle
into the hardened runtime.

00:09:49.306 --> 00:09:50.476 A:middle
We introduced the hardened

00:09:50.476 --> 00:09:53.696 A:middle
runtime last year at WWDC and

00:09:53.696 --> 00:09:55.166 A:middle
now we're going to give a bit

00:09:55.166 --> 00:09:57.076 A:middle
more detail to discuss its

00:09:57.126 --> 00:09:59.316 A:middle
benefits and configuration.

00:09:59.776 --> 00:10:03.346 A:middle
So the hardened runtime extends

00:09:59.776 --> 00:10:03.346 A:middle
So the hardened runtime extends

00:10:03.346 --> 00:10:04.676 A:middle
many of the system integrity

00:10:04.676 --> 00:10:06.526 A:middle
protections that we have on

00:10:06.526 --> 00:10:08.286 A:middle
macOS to your app.

00:10:08.696 --> 00:10:10.376 A:middle
This means Runtime Code Signing

00:10:10.376 --> 00:10:12.296 A:middle
Enforcement, library validation,

00:10:12.646 --> 00:10:13.906 A:middle
DYLD environment variable

00:10:13.906 --> 00:10:15.226 A:middle
protection and debugging

00:10:15.226 --> 00:10:15.716 A:middle
protection.

00:10:16.146 --> 00:10:17.126 A:middle
Note that all of these

00:10:17.206 --> 00:10:19.056 A:middle
protections are owned by default

00:10:19.056 --> 00:10:21.266 A:middle
and not configurable on iOS but

00:10:21.266 --> 00:10:22.896 A:middle
on a macOS that are configurable

00:10:22.896 --> 00:10:24.216 A:middle
via entitlements that any

00:10:24.216 --> 00:10:25.656 A:middle
developer can set.

00:10:26.106 --> 00:10:29.306 A:middle
So if you're using Xcode,

00:10:29.306 --> 00:10:30.896 A:middle
adopting the hardened runtime is

00:10:30.926 --> 00:10:31.276 A:middle
easy.

00:10:31.466 --> 00:10:32.376 A:middle
Just go to the signing and

00:10:32.376 --> 00:10:34.096 A:middle
capabilities tab and make sure

00:10:34.096 --> 00:10:36.356 A:middle
that the runtime capability is

00:10:36.386 --> 00:10:38.026 A:middle
present on your target.

00:10:40.226 --> 00:10:41.886 A:middle
Then you can select which

00:10:41.886 --> 00:10:42.866 A:middle
entitlements you need to

00:10:42.866 --> 00:10:44.566 A:middle
configure the hardened runtime

00:10:44.566 --> 00:10:46.226 A:middle
on your project using the

00:10:46.226 --> 00:10:47.146 A:middle
checkboxes provided.

00:10:47.856 --> 00:10:51.166 A:middle
If you're using a custom

00:10:51.166 --> 00:10:52.836 A:middle
workflow outside Xcode, you can

00:10:52.836 --> 00:10:54.126 A:middle
use the codesign command to

00:10:54.126 --> 00:10:55.576 A:middle
adopt the hardened runtime and

00:10:55.576 --> 00:10:57.426 A:middle
to do that use the option

00:10:57.426 --> 00:11:00.416 A:middle
runtime command to codesign and

00:10:57.426 --> 00:11:00.416 A:middle
runtime command to codesign and

00:11:00.416 --> 00:11:02.176 A:middle
make sure you use the timestamp

00:11:02.176 --> 00:11:03.906 A:middle
option as well to ensure that

00:11:03.906 --> 00:11:06.126 A:middle
there is a secure timestamp on

00:11:06.126 --> 00:11:06.876 A:middle
your application.

00:11:07.466 --> 00:11:11.076 A:middle
To verify that you have adopted

00:11:11.076 --> 00:11:12.316 A:middle
the hardened runtime correctly

00:11:12.616 --> 00:11:14.136 A:middle
use the display option to

00:11:14.136 --> 00:11:15.526 A:middle
codesign with the verbosity

00:11:15.526 --> 00:11:17.636 A:middle
level of 2 and look for the

00:11:17.636 --> 00:11:19.366 A:middle
runtime word in the flag

00:11:19.366 --> 00:11:19.836 A:middle
section.

00:11:20.466 --> 00:11:21.566 A:middle
Also note that the hardened

00:11:21.596 --> 00:11:22.346 A:middle
runtime is versioned.

00:11:22.796 --> 00:11:24.076 A:middle
When you sign with the hardened

00:11:24.076 --> 00:11:26.046 A:middle
runtime, we record what version

00:11:26.136 --> 00:11:27.706 A:middle
you were signing with so that

00:11:27.706 --> 00:11:29.496 A:middle
when, if we were to add

00:11:29.496 --> 00:11:30.476 A:middle
additional protections to

00:11:30.476 --> 00:11:31.656 A:middle
hardened runtime in the future,

00:11:31.866 --> 00:11:33.366 A:middle
we'll ensure that only the ones

00:11:33.366 --> 00:11:34.456 A:middle
that your app has been tested

00:11:34.456 --> 00:11:35.636 A:middle
with get applied on future

00:11:35.636 --> 00:11:35.976 A:middle
systems.

00:11:39.386 --> 00:11:41.036 A:middle
So what is Runtime Code Signing

00:11:41.036 --> 00:11:41.556 A:middle
Enforcement?

00:11:42.186 --> 00:11:43.546 A:middle
It prevents creation of

00:11:43.546 --> 00:11:44.906 A:middle
executable memory without an

00:11:44.906 --> 00:11:47.056 A:middle
associated code signature within

00:11:47.056 --> 00:11:51.016 A:middle
your process and it does this by

00:11:51.016 --> 00:11:52.556 A:middle
ensuring first that all bytes

00:11:52.556 --> 00:11:54.196 A:middle
mapped into your process match

00:11:54.196 --> 00:11:55.666 A:middle
their associated code signature

00:11:55.666 --> 00:11:57.146 A:middle
when they're read from disk and

00:11:57.146 --> 00:11:58.266 A:middle
this includes not just

00:11:58.266 --> 00:11:59.256 A:middle
executable regions of your

00:11:59.256 --> 00:12:00.976 A:middle
Mach-O but also the

00:11:59.256 --> 00:12:00.976 A:middle
Mach-O but also the

00:12:00.976 --> 00:12:02.436 A:middle
non-executable mappings like

00:12:02.436 --> 00:12:03.476 A:middle
your read-only sections.

00:12:05.476 --> 00:12:07.316 A:middle
And we prevent execution for

00:12:07.316 --> 00:12:08.866 A:middle
modified memory that doesn't

00:12:08.866 --> 00:12:09.786 A:middle
match its signature.

00:12:10.456 --> 00:12:12.886 A:middle
So by verifying that the memory

00:12:12.976 --> 00:12:14.496 A:middle
is, the memory that we're

00:12:14.496 --> 00:12:15.866 A:middle
reading from disk is correct as

00:12:15.866 --> 00:12:17.176 A:middle
it's coming in and making sure

00:12:17.176 --> 00:12:18.186 A:middle
that we can't change it we

00:12:18.186 --> 00:12:19.436 A:middle
ensure the integrity of your

00:12:19.436 --> 00:12:20.386 A:middle
process as it's running.

00:12:22.546 --> 00:12:24.116 A:middle
Now one of the challenges that

00:12:24.116 --> 00:12:25.336 A:middle
can come up with working with

00:12:25.336 --> 00:12:26.546 A:middle
the Runtime Code Signing

00:12:26.546 --> 00:12:28.446 A:middle
Enforcement is if your code uses

00:12:28.446 --> 00:12:31.066 A:middle
JIT to make non-native code run

00:12:31.066 --> 00:12:31.896 A:middle
fast within your app.

00:12:32.526 --> 00:12:33.986 A:middle
To do this we recommend that you

00:12:33.986 --> 00:12:35.486 A:middle
use the allow JIT entitlement

00:12:35.886 --> 00:12:37.946 A:middle
and then use the MAP-JIT flat

00:12:37.946 --> 00:12:39.306 A:middle
when allocating your

00:12:39.306 --> 00:12:40.926 A:middle
Read/Write/Execute memory that

00:12:40.926 --> 00:12:42.976 A:middle
you're compiling the code into.

00:12:43.276 --> 00:12:45.096 A:middle
This allows us to keep the rest

00:12:45.096 --> 00:12:46.266 A:middle
of the protections on all of

00:12:46.266 --> 00:12:47.586 A:middle
your other memory within the

00:12:47.586 --> 00:12:49.486 A:middle
system while giving you this

00:12:49.486 --> 00:12:51.506 A:middle
scratch space memory to do what

00:12:51.506 --> 00:12:52.996 A:middle
you need with respect to JIT.

00:12:54.026 --> 00:12:57.586 A:middle
If you can't adopt the MAP-JIT

00:12:57.586 --> 00:12:58.686 A:middle
flag because you don't have

00:12:58.776 --> 00:13:01.036 A:middle
source code access to your JIT

00:12:58.776 --> 00:13:01.036 A:middle
source code access to your JIT

00:13:01.036 --> 00:13:01.506 A:middle
engine.

00:13:01.756 --> 00:13:02.256 A:middle
You can use the

00:13:02.256 --> 00:13:03.836 A:middle
allow-unsigned-executive-memory

00:13:03.836 --> 00:13:04.466 A:middle
entitlement.

00:13:04.936 --> 00:13:06.906 A:middle
This will lower the security

00:13:06.906 --> 00:13:09.126 A:middle
predictions provided by Runtime

00:13:09.126 --> 00:13:11.796 A:middle
Code Signing Enforcement to just

00:13:11.796 --> 00:13:13.396 A:middle
verifying that for every piece

00:13:13.396 --> 00:13:14.556 A:middle
of memory that does have a code

00:13:14.556 --> 00:13:16.686 A:middle
signature associated all of the

00:13:16.686 --> 00:13:17.976 A:middle
bytes that you read from disk

00:13:18.216 --> 00:13:20.586 A:middle
are, in fact, match that, but it

00:13:20.586 --> 00:13:23.366 A:middle
allows modification to any of

00:13:23.366 --> 00:13:25.256 A:middle
your memory inside your process

00:13:25.426 --> 00:13:27.976 A:middle
and allows the creation of

00:13:28.476 --> 00:13:29.886 A:middle
unsigned executable regions.

00:13:32.606 --> 00:13:33.446 A:middle
Another thing that we've seen

00:13:33.446 --> 00:13:34.636 A:middle
some developers having

00:13:34.636 --> 00:13:36.746 A:middle
challenges with is if they

00:13:36.746 --> 00:13:39.086 A:middle
attempt to patch some system

00:13:39.086 --> 00:13:40.066 A:middle
frameworks that they've loaded

00:13:40.066 --> 00:13:42.366 A:middle
in after they have adopted the

00:13:42.366 --> 00:13:43.106 A:middle
hardened runtime.

00:13:43.866 --> 00:13:45.656 A:middle
We don't recommend that you do

00:13:45.656 --> 00:13:46.776 A:middle
this and you should see whether

00:13:46.776 --> 00:13:47.666 A:middle
any of the hardened runtime

00:13:47.736 --> 00:13:49.396 A:middle
features actually make the,

00:13:49.686 --> 00:13:50.856 A:middle
solve the reasons why you're

00:13:50.856 --> 00:13:51.846 A:middle
doing this.

00:13:51.966 --> 00:13:53.336 A:middle
But if you need to the

00:13:53.336 --> 00:13:54.916 A:middle
allow-unsigned-executable-memory

00:13:54.916 --> 00:13:56.676 A:middle
entitlement will do what you

00:13:56.676 --> 00:13:58.166 A:middle
need to allow you to modify

00:13:58.166 --> 00:13:59.646 A:middle
those memory pages that you've

00:13:59.646 --> 00:14:00.636 A:middle
mapped in.

00:13:59.646 --> 00:14:00.636 A:middle
mapped in.

00:14:01.606 --> 00:14:04.046 A:middle
So another thing that we've seen

00:14:04.046 --> 00:14:05.616 A:middle
come up with respect to Runtime

00:14:05.616 --> 00:14:07.986 A:middle
Code Signing Enforcement is some

00:14:07.986 --> 00:14:09.796 A:middle
people have seen crashes while

00:14:09.796 --> 00:14:11.486 A:middle
they're updating their app.

00:14:11.916 --> 00:14:13.806 A:middle
This is because code signatures

00:14:13.806 --> 00:14:16.066 A:middle
are latched to files on first

00:14:16.066 --> 00:14:17.966 A:middle
use in the kernel and that means

00:14:17.966 --> 00:14:20.206 A:middle
if you modify a file that has

00:14:20.206 --> 00:14:23.006 A:middle
been run and was signed, then it

00:14:23.006 --> 00:14:23.986 A:middle
will no longer match the

00:14:23.986 --> 00:14:25.076 A:middle
signature that's sitting in the

00:14:25.076 --> 00:14:26.506 A:middle
kernel and you'll see a code

00:14:26.506 --> 00:14:27.816 A:middle
signature violation.

00:14:28.626 --> 00:14:30.216 A:middle
What we recommend instead is

00:14:30.216 --> 00:14:31.916 A:middle
that instead of modifying

00:14:31.916 --> 00:14:33.146 A:middle
existing files on disk you

00:14:33.146 --> 00:14:35.626 A:middle
always create a new file with

00:14:35.656 --> 00:14:37.306 A:middle
the updated changes and move the

00:14:37.306 --> 00:14:38.376 A:middle
old file out of the way.

00:14:38.696 --> 00:14:40.326 A:middle
This will ensure that the new

00:14:40.326 --> 00:14:42.056 A:middle
file on its first use gets its

00:14:42.056 --> 00:14:44.366 A:middle
code signature without causing

00:14:44.366 --> 00:14:45.476 A:middle
the code signature violations

00:14:45.476 --> 00:14:45.976 A:middle
that you're seeing.

00:14:48.746 --> 00:14:49.796 A:middle
So next we'll talk about library

00:14:49.796 --> 00:14:50.226 A:middle
validation.

00:14:52.746 --> 00:14:54.156 A:middle
So library validation protects

00:14:54.156 --> 00:14:55.586 A:middle
your app from code injection and

00:14:55.586 --> 00:14:57.746 A:middle
dylib hijacking by making sure

00:14:57.746 --> 00:14:59.376 A:middle
that your app only loads

00:14:59.376 --> 00:15:01.146 A:middle
codesigned by your team or

00:14:59.376 --> 00:15:01.146 A:middle
codesigned by your team or

00:15:01.146 --> 00:15:01.806 A:middle
signed by Apple.

00:15:01.806 --> 00:15:03.626 A:middle
And some of you might ask, why

00:15:03.626 --> 00:15:05.436 A:middle
does it need to load codesigned

00:15:05.436 --> 00:15:05.896 A:middle
by Apple?

00:15:06.036 --> 00:15:07.326 A:middle
Well, remember that all the

00:15:07.326 --> 00:15:08.906 A:middle
frameworks and libraries that

00:15:08.906 --> 00:15:09.676 A:middle
you're loading from the

00:15:09.676 --> 00:15:10.806 A:middle
operating system are Apple

00:15:10.806 --> 00:15:11.156 A:middle
signed.

00:15:11.156 --> 00:15:12.486 A:middle
So you have to be able to call

00:15:12.486 --> 00:15:14.616 A:middle
those and load them into your

00:15:14.616 --> 00:15:15.076 A:middle
process.

00:15:16.166 --> 00:15:17.956 A:middle
Note that library validation

00:15:18.056 --> 00:15:19.746 A:middle
prevents the loading of unsigned

00:15:19.746 --> 00:15:21.106 A:middle
and adhoc signed code.

00:15:21.706 --> 00:15:23.086 A:middle
So be careful during your

00:15:23.086 --> 00:15:23.946 A:middle
development process.

00:15:23.946 --> 00:15:25.396 A:middle
Make sure that you use Apple

00:15:25.396 --> 00:15:26.716 A:middle
development certificates rather

00:15:26.716 --> 00:15:28.416 A:middle
than turning off code signing or

00:15:28.646 --> 00:15:30.416 A:middle
just using adhoc signing.

00:15:33.946 --> 00:15:35.926 A:middle
So library validation can cause

00:15:35.926 --> 00:15:38.806 A:middle
challenges for apps that have an

00:15:39.066 --> 00:15:40.256 A:middle
in process plug-in or an

00:15:40.256 --> 00:15:40.856 A:middle
ecosystem.

00:15:41.536 --> 00:15:42.606 A:middle
We recommend that you consider

00:15:42.606 --> 00:15:44.546 A:middle
moving to an out of process

00:15:44.546 --> 00:15:46.056 A:middle
plug-in model so that you don't

00:15:46.306 --> 00:15:48.036 A:middle
have to load unknown third-party

00:15:48.036 --> 00:15:50.746 A:middle
code into your app but if you

00:15:50.746 --> 00:15:52.266 A:middle
can't, you can use the

00:15:52.266 --> 00:15:53.466 A:middle
disable-library-validation

00:15:53.466 --> 00:15:55.206 A:middle
entitlement and this will allow

00:15:55.206 --> 00:15:56.896 A:middle
loading of unsigned and adhoc

00:15:56.896 --> 00:15:57.746 A:middle
sign plug-ins.

00:15:57.926 --> 00:15:59.336 A:middle
And note you can take this by

00:15:59.336 --> 00:16:01.756 A:middle
itself without taking any of the

00:15:59.336 --> 00:16:01.756 A:middle
itself without taking any of the

00:16:01.996 --> 00:16:02.986 A:middle
runtime code and sort

00:16:02.986 --> 00:16:04.796 A:middle
enforcement related entitlements

00:16:05.036 --> 00:16:05.486 A:middle
by having

00:16:05.486 --> 00:16:06.936 A:middle
disable-library-validation on

00:16:07.176 --> 00:16:08.606 A:middle
when the system sees that you're

00:16:08.606 --> 00:16:10.906 A:middle
loading a adhoc signed or an

00:16:10.906 --> 00:16:12.446 A:middle
unsigned plug-in, it will lower

00:16:12.446 --> 00:16:14.726 A:middle
the security of your process to

00:16:14.726 --> 00:16:15.966 A:middle
allow that because you've said

00:16:15.966 --> 00:16:17.686 A:middle
you want to load unsigned

00:16:17.686 --> 00:16:18.666 A:middle
plug-ins.

00:16:20.096 --> 00:16:22.536 A:middle
So next is DYLD environment

00:16:22.536 --> 00:16:23.306 A:middle
variable protection.

00:16:23.816 --> 00:16:26.256 A:middle
DYLD environment variables can

00:16:26.256 --> 00:16:27.826 A:middle
be very useful during your

00:16:27.826 --> 00:16:29.976 A:middle
development process to load

00:16:29.976 --> 00:16:31.716 A:middle
debug libraries into your app

00:16:31.806 --> 00:16:34.756 A:middle
while you're testing or to use

00:16:34.756 --> 00:16:35.746 A:middle
libraries that are, or

00:16:35.816 --> 00:16:36.856 A:middle
frameworks that you're building

00:16:36.856 --> 00:16:38.176 A:middle
that are in development but

00:16:38.176 --> 00:16:39.386 A:middle
aren't quite ready to be built

00:16:39.386 --> 00:16:40.536 A:middle
into your app just to test them,

00:16:40.956 --> 00:16:42.626 A:middle
but they can be dangerous

00:16:42.676 --> 00:16:43.766 A:middle
because everything that you can

00:16:43.766 --> 00:16:44.626 A:middle
do during your building and

00:16:44.626 --> 00:16:46.316 A:middle
testing process an attacker can

00:16:46.316 --> 00:16:48.996 A:middle
do on a customer system to take

00:16:48.996 --> 00:16:51.176 A:middle
advantage of privileges or data

00:16:51.176 --> 00:16:52.256 A:middle
that's available to your app.

00:16:53.466 --> 00:16:54.656 A:middle
So because of this the hardened

00:16:54.656 --> 00:16:56.276 A:middle
runtime blocks these variables

00:16:56.276 --> 00:16:57.736 A:middle
by default when you ship with

00:16:57.736 --> 00:16:57.826 A:middle
it.

00:16:58.656 --> 00:17:00.026 A:middle
If you need to use DYLD

00:16:58.656 --> 00:17:00.026 A:middle
If you need to use DYLD

00:17:00.026 --> 00:17:01.916 A:middle
environment variables during

00:17:01.916 --> 00:17:03.806 A:middle
your debugging process, you can

00:17:03.806 --> 00:17:04.776 A:middle
use the get-task-allow

00:17:04.776 --> 00:17:06.256 A:middle
entitlement on your debug build

00:17:06.586 --> 00:17:07.866 A:middle
and note that Xcode

00:17:07.866 --> 00:17:09.236 A:middle
automatically puts this on for

00:17:09.236 --> 00:17:10.906 A:middle
you when you build for debug and

00:17:10.906 --> 00:17:11.796 A:middle
takes it off for you

00:17:11.796 --> 00:17:14.236 A:middle
automatically when you build for

00:17:14.236 --> 00:17:14.656 A:middle
release.

00:17:15.296 --> 00:17:16.945 A:middle
Note though that if you're using

00:17:16.945 --> 00:17:18.906 A:middle
a custom workflow, the notary

00:17:18.945 --> 00:17:20.336 A:middle
service in most cases doesn't

00:17:20.425 --> 00:17:21.596 A:middle
accept binaries with the

00:17:21.596 --> 00:17:22.776 A:middle
get-task-allow entitlement.

00:17:22.776 --> 00:17:23.705 A:middle
So make sure you take this

00:17:23.705 --> 00:17:25.806 A:middle
entitlement off before you ship

00:17:25.965 --> 00:17:27.876 A:middle
your release build to the Notary

00:17:27.876 --> 00:17:28.266 A:middle
Service.

00:17:30.246 --> 00:17:33.626 A:middle
So in a few cases, we have seen

00:17:33.626 --> 00:17:37.066 A:middle
developers needed to use the

00:17:37.066 --> 00:17:39.326 A:middle
DYLD environment variables when

00:17:39.326 --> 00:17:40.696 A:middle
they ship their app to customers

00:17:41.406 --> 00:17:42.886 A:middle
and, again, we don't recommend

00:17:42.886 --> 00:17:43.376 A:middle
you do this.

00:17:43.376 --> 00:17:45.936 A:middle
This can be very dangerous for

00:17:45.936 --> 00:17:47.136 A:middle
taking advantage of your app on

00:17:47.136 --> 00:17:48.716 A:middle
customer systems, but if you

00:17:48.716 --> 00:17:50.256 A:middle
need to there is an entitlement

00:17:50.306 --> 00:17:50.556 A:middle
to

00:17:50.556 --> 00:17:52.926 A:middle
allow-DYLD-environment-variables

00:17:52.926 --> 00:17:54.076 A:middle
which will allow these to be

00:17:54.076 --> 00:17:55.276 A:middle
used and is accepted by the

00:17:55.276 --> 00:17:55.926 A:middle
Notary Service.

00:17:56.386 --> 00:17:59.506 A:middle
Next is debugging protection.

00:18:00.036 --> 00:18:03.916 A:middle
So we all know that debuggers

00:18:03.916 --> 00:18:05.956 A:middle
allow developers to inspect the

00:18:05.956 --> 00:18:07.596 A:middle
state of registers and memory

00:18:07.916 --> 00:18:09.466 A:middle
and modify process memory.

00:18:09.906 --> 00:18:11.606 A:middle
That means they allow hackers to

00:18:12.476 --> 00:18:14.266 A:middle
steal sensitive user data and

00:18:14.266 --> 00:18:15.306 A:middle
inject malicious code.

00:18:16.006 --> 00:18:17.146 A:middle
So by default the hardened

00:18:17.196 --> 00:18:19.096 A:middle
runtime doesn't allow debugging

00:18:19.096 --> 00:18:21.746 A:middle
of hardened processes, but if

00:18:21.746 --> 00:18:24.186 A:middle
you need to use the debugger

00:18:24.186 --> 00:18:25.666 A:middle
during your development flow,

00:18:25.666 --> 00:18:26.986 A:middle
again, the get-task-allow

00:18:26.986 --> 00:18:28.646 A:middle
entitlement is what you need.

00:18:28.646 --> 00:18:30.216 A:middle
Along with DYLD environment

00:18:30.216 --> 00:18:31.376 A:middle
variables the get-task-allow

00:18:31.376 --> 00:18:33.496 A:middle
entitlements allows your app to

00:18:33.496 --> 00:18:34.036 A:middle
be debugged.

00:18:35.226 --> 00:18:37.456 A:middle
But be careful if you do all of

00:18:37.456 --> 00:18:38.856 A:middle
your testing with the debugger

00:18:38.856 --> 00:18:39.426 A:middle
attached.

00:18:39.426 --> 00:18:40.996 A:middle
This will mask some of the other

00:18:41.086 --> 00:18:42.536 A:middle
hardened runtime related issues

00:18:42.536 --> 00:18:43.556 A:middle
that you could run into

00:18:43.556 --> 00:18:45.126 A:middle
especially around Runtime Code

00:18:45.126 --> 00:18:45.866 A:middle
Signing Enforcement.

00:18:46.066 --> 00:18:47.426 A:middle
Basically, once the debugger

00:18:47.426 --> 00:18:49.936 A:middle
attaches, we can't force code

00:18:49.936 --> 00:18:51.036 A:middle
signing enforcement anymore

00:18:51.656 --> 00:18:53.266 A:middle
because debuggers like setting a

00:18:53.266 --> 00:18:54.886 A:middle
breakpoint automatically change

00:18:54.886 --> 00:18:57.086 A:middle
your data within your process

00:18:57.086 --> 00:18:58.256 A:middle
and they would just crash

00:18:58.256 --> 00:18:59.616 A:middle
immediately if we continue to

00:18:59.616 --> 00:19:00.146 A:middle
enforce that.

00:18:59.616 --> 00:19:00.146 A:middle
enforce that.

00:19:00.606 --> 00:19:01.956 A:middle
So make sure you test a release

00:19:01.956 --> 00:19:03.376 A:middle
build to see what other effects

00:19:03.666 --> 00:19:04.626 A:middle
the Runtime Code Signing

00:19:04.626 --> 00:19:07.216 A:middle
Enforcement might have and then

00:19:07.216 --> 00:19:08.806 A:middle
if you need to make a debug

00:19:08.806 --> 00:19:10.676 A:middle
build without get-test-allow

00:19:10.676 --> 00:19:12.176 A:middle
through Xcode, you can use the

00:19:12.176 --> 00:19:13.716 A:middle
CODE-SIGN-IN-INJECT-BASE-

00:19:13.716 --> 00:19:15.476 A:middle
ENTITLEMENTS=NO option in your

00:19:15.476 --> 00:19:17.186 A:middle
Xcode project to get all of your

00:19:17.186 --> 00:19:18.336 A:middle
debug settings except

00:19:18.336 --> 00:19:18.856 A:middle
get-task-allow.

00:19:21.216 --> 00:19:23.526 A:middle
So this can be a challenge also

00:19:23.526 --> 00:19:26.006 A:middle
in the plug-in ecosystem because

00:19:26.456 --> 00:19:27.926 A:middle
plug-in developers need to debug

00:19:27.926 --> 00:19:29.696 A:middle
their plug-ins within the app

00:19:29.806 --> 00:19:30.716 A:middle
that they're going to load.

00:19:31.436 --> 00:19:32.426 A:middle
So, again, we recommend

00:19:32.586 --> 00:19:34.046 A:middle
considering out of process

00:19:34.046 --> 00:19:36.576 A:middle
plug-in model or consider

00:19:36.576 --> 00:19:38.656 A:middle
shipping a debug version to,

00:19:39.186 --> 00:19:40.486 A:middle
yeah, debug version of your app

00:19:40.486 --> 00:19:41.886 A:middle
to register plug-in developers

00:19:42.096 --> 00:19:44.126 A:middle
so that they have the power to

00:19:44.126 --> 00:19:45.416 A:middle
debug, but you don't ship that

00:19:45.416 --> 00:19:48.166 A:middle
to all of your customers, but if

00:19:48.166 --> 00:19:50.776 A:middle
absolutely necessary, the Notary

00:19:50.776 --> 00:19:51.826 A:middle
Service will accept the

00:19:51.826 --> 00:19:53.446 A:middle
combination of get-task-allow

00:19:53.446 --> 00:19:54.626 A:middle
entitlement and the

00:19:54.626 --> 00:19:55.976 A:middle
disable-library-validation

00:19:55.976 --> 00:19:57.186 A:middle
entitlement to allow this

00:19:57.186 --> 00:19:57.616 A:middle
workflow.

00:20:00.816 --> 00:20:02.396 A:middle
So we'll talk briefly about

00:20:02.396 --> 00:20:03.706 A:middle
protected resource access.

00:20:05.036 --> 00:20:07.286 A:middle
So we all know that your

00:20:07.286 --> 00:20:08.406 A:middle
customers use their Macs to

00:20:08.406 --> 00:20:10.946 A:middle
store tons of information about

00:20:10.946 --> 00:20:13.526 A:middle
their lives and the Macs have

00:20:13.526 --> 00:20:15.526 A:middle
access to sensors that are

00:20:15.526 --> 00:20:16.846 A:middle
security sensitive.

00:20:17.746 --> 00:20:19.136 A:middle
In order to or once you've

00:20:19.166 --> 00:20:20.376 A:middle
adopted the hardened runtime,

00:20:20.696 --> 00:20:21.936 A:middle
your app needs to declare its

00:20:21.936 --> 00:20:23.626 A:middle
intent to access any of these

00:20:23.626 --> 00:20:24.626 A:middle
protected resources.

00:20:25.696 --> 00:20:27.696 A:middle
So we mentioned all of last

00:20:27.696 --> 00:20:30.516 A:middle
year, but if you need to access

00:20:30.516 --> 00:20:32.616 A:middle
any of these resources you need

00:20:32.616 --> 00:20:34.416 A:middle
to take the entitlement on your

00:20:34.416 --> 00:20:37.716 A:middle
main bundle and then declare the

00:20:37.716 --> 00:20:39.786 A:middle
usage string that is associated

00:20:39.786 --> 00:20:41.016 A:middle
with the entitlement so that

00:20:41.016 --> 00:20:43.016 A:middle
when your app attempts to access

00:20:43.016 --> 00:20:44.786 A:middle
one of these resources, the

00:20:44.786 --> 00:20:46.086 A:middle
system can provide a dialogue

00:20:46.086 --> 00:20:47.586 A:middle
saying, oh, this is why I need

00:20:47.636 --> 00:20:49.396 A:middle
to have access to this resource

00:20:49.396 --> 00:20:50.586 A:middle
so that you can collect the

00:20:50.586 --> 00:20:51.396 A:middle
user's consent.

00:20:52.656 --> 00:20:54.826 A:middle
So some recommendations a

00:20:54.826 --> 00:20:55.836 A:middle
summary of this section.

00:20:55.956 --> 00:20:57.566 A:middle
Take only the entitlements you

00:20:57.566 --> 00:20:57.856 A:middle
need.

00:20:57.986 --> 00:20:59.786 A:middle
The entitlements turn off

00:20:59.786 --> 00:21:00.996 A:middle
security provided by the

00:20:59.786 --> 00:21:00.996 A:middle
security provided by the

00:21:00.996 --> 00:21:02.566 A:middle
hardened runtime and they can be

00:21:02.566 --> 00:21:04.176 A:middle
inspected by anyone looking at

00:21:04.176 --> 00:21:05.936 A:middle
your app to try to see what

00:21:06.256 --> 00:21:07.476 A:middle
kinds of things they can do with

00:21:07.476 --> 00:21:09.006 A:middle
it once it's shipped to

00:21:09.006 --> 00:21:09.526 A:middle
customers.

00:21:09.746 --> 00:21:11.106 A:middle
So be careful, take only what

00:21:11.106 --> 00:21:12.596 A:middle
you need, put the entitlements

00:21:12.596 --> 00:21:14.186 A:middle
only on the processes that need

00:21:14.186 --> 00:21:14.416 A:middle
them.

00:21:14.416 --> 00:21:17.066 A:middle
If you have multiple processes,

00:21:17.066 --> 00:21:18.526 A:middle
multiple executables within your

00:21:18.526 --> 00:21:20.276 A:middle
app, it's unlikely that all of

00:21:20.276 --> 00:21:21.536 A:middle
them need the same protections.

00:21:21.536 --> 00:21:22.656 A:middle
You probably aren't doing JIT in

00:21:22.656 --> 00:21:23.446 A:middle
every process.

00:21:23.446 --> 00:21:24.276 A:middle
You probably aren't loading

00:21:24.276 --> 00:21:25.536 A:middle
plug-ins into every process.

00:21:25.806 --> 00:21:27.306 A:middle
So take only the ones you need

00:21:27.306 --> 00:21:28.806 A:middle
in the processes that need them

00:21:29.726 --> 00:21:31.306 A:middle
and when you're declaring

00:21:31.306 --> 00:21:32.866 A:middle
resource access make sure that

00:21:32.866 --> 00:21:34.266 A:middle
those entitlements are only on

00:21:34.266 --> 00:21:35.696 A:middle
the main bundle of your app.

00:21:36.046 --> 00:21:38.686 A:middle
Those getting inherited by any

00:21:38.686 --> 00:21:41.206 A:middle
other executables within your

00:21:41.206 --> 00:21:42.516 A:middle
bundles, they don't need to be

00:21:42.596 --> 00:21:43.346 A:middle
all around.

00:21:43.416 --> 00:21:44.276 A:middle
Just on the main bundle.

00:21:44.716 --> 00:21:46.496 A:middle
Now I'm going to hand it back to

00:21:46.496 --> 00:21:48.686 A:middle
Garrett to go over what you need

00:21:48.686 --> 00:21:50.426 A:middle
to do to actually submit for

00:21:50.426 --> 00:21:50.976 A:middle
notarization.

00:21:51.516 --> 00:21:57.206 A:middle
[ Applause ]

00:21:57.706 --> 00:21:58.196 A:middle
&gt;&gt; Thanks, Robert.

00:21:59.036 --> 00:22:00.066 A:middle
So now you know everything to

00:21:59.036 --> 00:22:00.066 A:middle
So now you know everything to

00:22:00.066 --> 00:22:00.886 A:middle
think about while you're

00:22:00.886 --> 00:22:02.046 A:middle
building and designing your

00:22:02.046 --> 00:22:03.486 A:middle
application to get it ready to

00:22:03.486 --> 00:22:05.516 A:middle
be notarized, but how do you

00:22:05.516 --> 00:22:06.856 A:middle
actually submit it to the Notary

00:22:06.856 --> 00:22:07.376 A:middle
Service?

00:22:08.356 --> 00:22:11.276 A:middle
Well, let's talk a little about

00:22:11.276 --> 00:22:12.846 A:middle
the notarization workflow and

00:22:12.846 --> 00:22:13.926 A:middle
regardless of whether you're

00:22:13.926 --> 00:22:15.166 A:middle
using Xcode or have a

00:22:15.166 --> 00:22:17.276 A:middle
custom-built workflow, the rough

00:22:17.406 --> 00:22:18.786 A:middle
workflow is about the same.

00:22:19.866 --> 00:22:20.776 A:middle
You submit the app for

00:22:20.776 --> 00:22:22.886 A:middle
notarization, you check the

00:22:23.116 --> 00:22:25.036 A:middle
status of the Notary Service.

00:22:25.336 --> 00:22:26.836 A:middle
Once notarization is complete,

00:22:27.256 --> 00:22:28.936 A:middle
you can staple a ticket and then

00:22:28.936 --> 00:22:29.846 A:middle
when you're done you might want

00:22:29.846 --> 00:22:31.276 A:middle
to verify that the stapling and

00:22:31.276 --> 00:22:32.606 A:middle
notarization were successful.

00:22:32.606 --> 00:22:35.516 A:middle
Before we talk a little bit more

00:22:35.516 --> 00:22:36.946 A:middle
about this we should talk about

00:22:37.176 --> 00:22:39.636 A:middle
what and when to submit and at a

00:22:39.636 --> 00:22:40.926 A:middle
minimum you should be submitting

00:22:40.926 --> 00:22:41.776 A:middle
all the software that you

00:22:41.776 --> 00:22:45.286 A:middle
distribute, but really it's okay

00:22:45.286 --> 00:22:46.616 A:middle
to upload more regularly so

00:22:46.616 --> 00:22:47.806 A:middle
anything that runs outside of a

00:22:47.806 --> 00:22:49.586 A:middle
developer's machine feel free to

00:22:49.586 --> 00:22:50.676 A:middle
upload as a Notary Service.

00:22:51.076 --> 00:22:52.056 A:middle
You probably don't need to

00:22:52.056 --> 00:22:54.126 A:middle
upload every CI build though and

00:22:56.456 --> 00:22:58.266 A:middle
anyone on the team can submit

00:22:58.266 --> 00:22:59.766 A:middle
process submit software for

00:22:59.766 --> 00:23:00.386 A:middle
notarization.

00:22:59.766 --> 00:23:00.386 A:middle
notarization.

00:23:00.926 --> 00:23:02.546 A:middle
This has changed from last year

00:23:02.876 --> 00:23:03.966 A:middle
when it used to be restricted to

00:23:03.966 --> 00:23:04.706 A:middle
certain roles.

00:23:07.076 --> 00:23:08.606 A:middle
So now you're ready to submit to

00:23:08.606 --> 00:23:09.366 A:middle
the Notary Service.

00:23:09.646 --> 00:23:11.596 A:middle
Well, if you use Xcode, it's

00:23:11.596 --> 00:23:12.896 A:middle
quite easy and it's built into

00:23:12.896 --> 00:23:13.966 A:middle
the archive and distribution

00:23:13.966 --> 00:23:14.356 A:middle
workflow.

00:23:14.946 --> 00:23:16.136 A:middle
So once you build an archive,

00:23:16.176 --> 00:23:17.306 A:middle
you can open up the Xcode

00:23:17.306 --> 00:23:18.486 A:middle
organizer like you see here and

00:23:19.306 --> 00:23:20.506 A:middle
you can select distribute app

00:23:20.566 --> 00:23:21.536 A:middle
just like you did before with

00:23:21.536 --> 00:23:22.236 A:middle
Developer ID.

00:23:23.566 --> 00:23:27.246 A:middle
Select Developer ID and then use

00:23:27.246 --> 00:23:28.536 A:middle
the upload option to submit a

00:23:28.536 --> 00:23:29.836 A:middle
copy to the Notary Service.

00:23:30.346 --> 00:23:33.306 A:middle
You'll see a progress bar during

00:23:33.306 --> 00:23:35.626 A:middle
the upload and after everything

00:23:35.626 --> 00:23:37.126 A:middle
is complete, you'll get dropped

00:23:37.126 --> 00:23:38.586 A:middle
back into the organizer and

00:23:38.586 --> 00:23:39.956 A:middle
you'll notice that the status

00:23:40.086 --> 00:23:41.566 A:middle
has changed to processing.

00:23:42.186 --> 00:23:46.216 A:middle
Once the Notary Service is

00:23:46.216 --> 00:23:48.386 A:middle
complete, you're going to push

00:23:48.386 --> 00:23:51.056 A:middle
notification to Xcode and when

00:23:51.056 --> 00:23:52.306 A:middle
you come back to the organizer,

00:23:52.656 --> 00:23:53.706 A:middle
you'll note that the status is

00:23:53.706 --> 00:23:55.856 A:middle
changed to ready distribute and

00:23:55.856 --> 00:23:57.446 A:middle
in the lower right corner, the

00:23:57.446 --> 00:23:59.426 A:middle
export notarized app is now

00:23:59.426 --> 00:23:59.826 A:middle
available.

00:24:01.276 --> 00:24:02.586 A:middle
When you click export notarized

00:24:02.586 --> 00:24:04.216 A:middle
app, Xcode will take care of

00:24:04.216 --> 00:24:06.496 A:middle
stapling the app for you and

00:24:06.496 --> 00:24:07.796 A:middle
what you get is completely ready

00:24:07.796 --> 00:24:08.496 A:middle
for distribution.

00:24:09.926 --> 00:24:10.766 A:middle
Now we'll talk a little more

00:24:10.766 --> 00:24:12.026 A:middle
about how you can verify that

00:24:12.026 --> 00:24:13.696 A:middle
yourself later because that's a

00:24:13.696 --> 00:24:15.086 A:middle
shared workflow between custom

00:24:15.086 --> 00:24:16.476 A:middle
workflows and Xcode.

00:24:17.766 --> 00:24:20.636 A:middle
Now, if you don't use Xcode,

00:24:21.266 --> 00:24:23.496 A:middle
submitting with custom workflows

00:24:23.556 --> 00:24:24.316 A:middle
is equally easy.

00:24:24.956 --> 00:24:25.586 A:middle
The first thing you need to

00:24:25.586 --> 00:24:27.176 A:middle
think about is what you want to

00:24:27.176 --> 00:24:28.296 A:middle
submit to the Notary Service.

00:24:29.266 --> 00:24:31.146 A:middle
Now the Notary Service accepts 3

00:24:31.146 --> 00:24:33.466 A:middle
main formats; disk images,

00:24:33.726 --> 00:24:35.656 A:middle
installer packages and zip

00:24:35.656 --> 00:24:36.266 A:middle
archives.

00:24:36.946 --> 00:24:38.466 A:middle
So if your build output is

00:24:38.466 --> 00:24:39.996 A:middle
anything but one of these 3,

00:24:40.526 --> 00:24:41.706 A:middle
you'll need to convert it to one

00:24:41.706 --> 00:24:42.956 A:middle
of these 3 formats before you

00:24:42.956 --> 00:24:44.136 A:middle
send it to the Notary Service.

00:24:44.666 --> 00:24:47.676 A:middle
And remember that when you're

00:24:47.676 --> 00:24:49.196 A:middle
creating a zip archive it's

00:24:49.196 --> 00:24:51.026 A:middle
important to include macOS

00:24:51.026 --> 00:24:52.896 A:middle
specific metadata like extended

00:24:52.896 --> 00:24:53.536 A:middle
attributes.

00:24:54.126 --> 00:24:55.136 A:middle
If you don't know what tools to

00:24:55.136 --> 00:24:56.456 A:middle
use, there is support in ditto

00:24:56.456 --> 00:24:57.636 A:middle
and Archive Utility built into

00:24:57.636 --> 00:24:58.476 A:middle
the operating system.

00:25:01.776 --> 00:25:03.726 A:middle
Now one other thing to think

00:25:03.726 --> 00:25:05.496 A:middle
about is if you actually have a

00:25:05.496 --> 00:25:07.266 A:middle
custom installer and custom

00:25:07.266 --> 00:25:08.356 A:middle
installers can be a little bit

00:25:08.356 --> 00:25:10.116 A:middle
trickier if they pull down

00:25:10.116 --> 00:25:11.386 A:middle
content from the Internet as

00:25:11.386 --> 00:25:13.556 A:middle
part of their installation or if

00:25:13.556 --> 00:25:14.806 A:middle
you use custom packaging

00:25:14.856 --> 00:25:15.436 A:middle
formats.

00:25:16.366 --> 00:25:17.366 A:middle
And if you have a custom

00:25:17.366 --> 00:25:18.956 A:middle
installer that does one of these

00:25:18.956 --> 00:25:20.716 A:middle
things, you may need to perform

00:25:20.806 --> 00:25:23.436 A:middle
2-step notarization where you

00:25:23.436 --> 00:25:24.916 A:middle
actually take all the content as

00:25:24.916 --> 00:25:26.376 A:middle
it's going to arrive on disk,

00:25:26.716 --> 00:25:28.136 A:middle
submit that for notarization

00:25:28.136 --> 00:25:29.286 A:middle
using one of the 3 supported

00:25:29.286 --> 00:25:31.836 A:middle
formats, staple it up and then

00:25:31.836 --> 00:25:33.166 A:middle
you submit your custom installer

00:25:33.166 --> 00:25:33.736 A:middle
app separately.

00:25:34.346 --> 00:25:37.206 A:middle
So now that you know what you

00:25:37.206 --> 00:25:38.066 A:middle
want to submit to the Notary

00:25:38.066 --> 00:25:40.026 A:middle
Service, how do you actually do

00:25:40.386 --> 00:25:40.453 A:middle
it?

00:25:40.516 --> 00:25:42.606 A:middle
Well, Xcode 10 and newer

00:25:43.106 --> 00:25:44.336 A:middle
contains a command line tool

00:25:44.336 --> 00:25:45.646 A:middle
called altool that's generally

00:25:45.646 --> 00:25:46.566 A:middle
used for interacting with the

00:25:46.566 --> 00:25:47.336 A:middle
Notary Service.

00:25:47.906 --> 00:25:49.066 A:middle
If you do have multiple versions

00:25:49.066 --> 00:25:50.026 A:middle
of Xcode, you'll want to use

00:25:50.026 --> 00:25:51.186 A:middle
Xcode select to make sure that

00:25:51.186 --> 00:25:52.506 A:middle
you've selected Xcode 10 or

00:25:52.506 --> 00:25:54.546 A:middle
later and then you can use

00:25:54.726 --> 00:25:56.666 A:middle
altool with the notarize-app

00:25:57.106 --> 00:25:57.506 A:middle
command.

00:25:58.496 --> 00:25:59.806 A:middle
With that you'll need to pass in

00:25:59.806 --> 00:26:02.146 A:middle
the primary bundle ID along with

00:25:59.806 --> 00:26:02.146 A:middle
the primary bundle ID along with

00:26:02.496 --> 00:26:03.656 A:middle
the file that you want upload.

00:26:04.726 --> 00:26:05.916 A:middle
You will need to authenticate

00:26:05.916 --> 00:26:08.056 A:middle
with your Apple ID, but if you

00:26:08.056 --> 00:26:09.096 A:middle
look at the main page you'll see

00:26:09.096 --> 00:26:10.046 A:middle
the options for using the

00:26:10.046 --> 00:26:11.256 A:middle
keychain or environment

00:26:11.256 --> 00:26:12.476 A:middle
variables so you don't need to

00:26:12.476 --> 00:26:13.446 A:middle
always type in your password.

00:26:14.006 --> 00:26:16.736 A:middle
When notarization upload is

00:26:16.736 --> 00:26:18.236 A:middle
complete, you'll get a

00:26:18.236 --> 00:26:19.186 A:middle
RequestUUID.

00:26:20.066 --> 00:26:21.906 A:middle
This is a UUID that represents

00:26:22.096 --> 00:26:24.206 A:middle
your submission, which you can

00:26:24.206 --> 00:26:26.526 A:middle
turn around and use with the

00:26:26.526 --> 00:26:28.636 A:middle
notarization-info command also

00:26:28.636 --> 00:26:30.576 A:middle
as part of altool to check on

00:26:30.576 --> 00:26:32.886 A:middle
the status of processing and

00:26:32.886 --> 00:26:34.006 A:middle
this is how you can find out

00:26:34.286 --> 00:26:35.686 A:middle
when your notarization is

00:26:35.686 --> 00:26:38.346 A:middle
complete and what the status

00:26:38.346 --> 00:26:38.646 A:middle
was.

00:26:39.766 --> 00:26:40.656 A:middle
Here's an example of a

00:26:40.656 --> 00:26:43.566 A:middle
successful notarization and one

00:26:43.566 --> 00:26:44.916 A:middle
important thing in here is the

00:26:44.916 --> 00:26:46.026 A:middle
log file URL.

00:26:46.676 --> 00:26:47.446 A:middle
Regardless of whether

00:26:47.446 --> 00:26:49.166 A:middle
notarization was successful or

00:26:49.166 --> 00:26:51.116 A:middle
had issues you can take a look

00:26:51.116 --> 00:26:52.556 A:middle
inside of the log file URL to

00:26:52.556 --> 00:26:53.416 A:middle
learn a little bit more.

00:26:53.416 --> 00:26:56.676 A:middle
Now the log file URLs are not

00:26:56.676 --> 00:26:57.376 A:middle
long-lived.

00:26:58.286 --> 00:26:59.656 A:middle
They only work for about a day.

00:27:00.266 --> 00:27:01.446 A:middle
So really you probably want to

00:27:01.446 --> 00:27:02.636 A:middle
pass around a new UID and

00:27:03.076 --> 00:27:04.456 A:middle
whatever you call notarization

00:27:04.456 --> 00:27:06.286 A:middle
info you'll get a new log file

00:27:06.286 --> 00:27:06.526 A:middle
URL.

00:27:09.786 --> 00:27:11.646 A:middle
Here's an example JSON log from

00:27:11.646 --> 00:27:12.806 A:middle
a successful processing.

00:27:13.726 --> 00:27:15.386 A:middle
Notice that the status was

00:27:15.386 --> 00:27:15.896 A:middle
accepted.

00:27:16.906 --> 00:27:18.906 A:middle
Now if this had failed, the

00:27:18.906 --> 00:27:19.796 A:middle
thing that you really want to

00:27:19.796 --> 00:27:21.596 A:middle
look at here is the issues

00:27:21.656 --> 00:27:21.856 A:middle
array.

00:27:22.786 --> 00:27:23.686 A:middle
And in a successful

00:27:23.686 --> 00:27:24.486 A:middle
notarization, this will

00:27:24.486 --> 00:27:25.286 A:middle
generally be empty.

00:27:26.186 --> 00:27:27.906 A:middle
But if something failed, there

00:27:27.906 --> 00:27:29.566 A:middle
will be object in here and each

00:27:29.566 --> 00:27:31.116 A:middle
one represents some failure

00:27:31.316 --> 00:27:32.166 A:middle
during notarization.

00:27:32.166 --> 00:27:33.976 A:middle
It will indicate things like

00:27:34.176 --> 00:27:35.236 A:middle
which binary may not have

00:27:35.236 --> 00:27:37.586 A:middle
adopted the hardened runtime or

00:27:37.886 --> 00:27:38.916 A:middle
if something wasn't signed

00:27:38.916 --> 00:27:39.396 A:middle
properly.

00:27:40.356 --> 00:27:41.696 A:middle
So this will be the key if

00:27:41.696 --> 00:27:42.576 A:middle
anything was rejected.

00:27:43.086 --> 00:27:45.866 A:middle
If it was successful, you'll

00:27:45.866 --> 00:27:47.166 A:middle
probably want to look in the

00:27:47.166 --> 00:27:49.176 A:middle
ticket contents especially if

00:27:49.176 --> 00:27:50.166 A:middle
you do anything interesting

00:27:50.166 --> 00:27:51.316 A:middle
around how you package your

00:27:51.316 --> 00:27:51.806 A:middle
software.

00:27:52.656 --> 00:27:54.136 A:middle
The ticket content should list

00:27:54.136 --> 00:27:55.936 A:middle
every binary that was discovered

00:27:55.936 --> 00:27:57.816 A:middle
by the Notary Service and,

00:27:57.816 --> 00:27:59.116 A:middle
therefore, every binary whose

00:27:59.116 --> 00:28:00.816 A:middle
information is included in the

00:27:59.116 --> 00:28:00.816 A:middle
information is included in the

00:28:00.816 --> 00:28:01.826 A:middle
ticket that you'll staple.

00:28:02.826 --> 00:28:03.906 A:middle
So if you notice that anything

00:28:03.906 --> 00:28:04.836 A:middle
is missing in the ticket

00:28:04.836 --> 00:28:07.386 A:middle
contents, you may need to try to

00:28:07.576 --> 00:28:08.896 A:middle
figure out what went wrong and

00:28:08.896 --> 00:28:09.436 A:middle
try it again.

00:28:10.476 --> 00:28:12.896 A:middle
Now regardless of whether you

00:28:12.896 --> 00:28:14.966 A:middle
use Xcode or altool when the

00:28:14.966 --> 00:28:16.006 A:middle
Notary Service is done

00:28:16.006 --> 00:28:18.166 A:middle
processing a submission, you'll

00:28:18.166 --> 00:28:18.716 A:middle
get an email.

00:28:19.536 --> 00:28:20.746 A:middle
Here's an example of a success

00:28:20.746 --> 00:28:22.646 A:middle
email indicating that this

00:28:22.646 --> 00:28:24.286 A:middle
software is ready for stapling.

00:28:24.876 --> 00:28:27.586 A:middle
Which brings us to the next

00:28:28.336 --> 00:28:28.466 A:middle
step.

00:28:30.046 --> 00:28:32.106 A:middle
Stapling uses a tool also built

00:28:32.106 --> 00:28:33.946 A:middle
into Xcode 10 and newer called

00:28:34.176 --> 00:28:34.606 A:middle
Stapler.

00:28:35.416 --> 00:28:36.506 A:middle
Here you can see an example

00:28:36.506 --> 00:28:38.116 A:middle
invocation of stapler with a

00:28:38.116 --> 00:28:40.536 A:middle
staple command that can be used

00:28:40.536 --> 00:28:42.626 A:middle
to staple directly to a package

00:28:42.896 --> 00:28:43.726 A:middle
or a disk image.

00:28:44.206 --> 00:28:46.496 A:middle
Now note that you can't staple

00:28:46.496 --> 00:28:48.156 A:middle
directly to zip files so you'll

00:28:48.156 --> 00:28:49.636 A:middle
need to unpack the zip file,

00:28:50.026 --> 00:28:51.376 A:middle
staple the contents of the zip

00:28:51.376 --> 00:28:53.126 A:middle
file and then you can package it

00:28:53.126 --> 00:28:54.156 A:middle
back up for distribution.

00:28:54.756 --> 00:28:59.226 A:middle
And note that stapling of

00:28:59.356 --> 00:29:01.856 A:middle
command line tools and libraries

00:28:59.356 --> 00:29:01.856 A:middle
command line tools and libraries

00:29:01.916 --> 00:29:03.966 A:middle
is not supported right now even

00:29:03.966 --> 00:29:05.386 A:middle
though these items still can and

00:29:05.386 --> 00:29:06.336 A:middle
should be notarized.

00:29:10.336 --> 00:29:12.326 A:middle
Now, after you staple the next

00:29:12.326 --> 00:29:13.326 A:middle
step is to verify that

00:29:13.326 --> 00:29:14.226 A:middle
everything was successfully

00:29:14.226 --> 00:29:16.586 A:middle
notarized and this step varies a

00:29:16.586 --> 00:29:17.756 A:middle
little bit based on what you

00:29:17.756 --> 00:29:19.546 A:middle
want to verify, but the first

00:29:19.546 --> 00:29:20.086 A:middle
thing is simple.

00:29:20.086 --> 00:29:21.226 A:middle
If you really just want to check

00:29:21.226 --> 00:29:22.506 A:middle
that something has been stapled,

00:29:23.136 --> 00:29:24.176 A:middle
you can use the Stapler tool

00:29:24.176 --> 00:29:24.496 A:middle
again.

00:29:25.106 --> 00:29:26.706 A:middle
Here you can see the stapler

00:29:26.706 --> 00:29:28.546 A:middle
tool with the validate command

00:29:29.046 --> 00:29:30.096 A:middle
to check that an item has been

00:29:30.286 --> 00:29:33.566 A:middle
properly stapled, but what about

00:29:33.566 --> 00:29:34.326 A:middle
if you want to verify

00:29:34.326 --> 00:29:36.146 A:middle
notarization on something that

00:29:36.596 --> 00:29:38.636 A:middle
you didn't put up for stapling

00:29:38.816 --> 00:29:39.736 A:middle
or that you didn't staple

00:29:39.736 --> 00:29:40.146 A:middle
yourself?

00:29:40.706 --> 00:29:41.376 A:middle
Well, then you will want to

00:29:41.376 --> 00:29:43.586 A:middle
generally use the SPCTL command,

00:29:44.026 --> 00:29:45.716 A:middle
which is a tool built into macOS

00:29:46.616 --> 00:29:47.766 A:middle
that runs gatekeeper

00:29:47.766 --> 00:29:48.396 A:middle
assessments.

00:29:48.936 --> 00:29:51.696 A:middle
And this does vary slightly

00:29:51.696 --> 00:29:53.246 A:middle
based on what you want to check

00:29:53.246 --> 00:29:55.006 A:middle
for notarization, but if you

00:29:55.006 --> 00:29:56.416 A:middle
want to check an application

00:29:56.416 --> 00:29:58.856 A:middle
bundle, you can use the SPCTL

00:29:58.856 --> 00:30:01.466 A:middle
command with the assess option

00:29:58.856 --> 00:30:01.466 A:middle
command with the assess option

00:30:02.316 --> 00:30:04.666 A:middle
and the verbose output and path

00:30:04.826 --> 00:30:06.026 A:middle
to the app to the application.

00:30:07.296 --> 00:30:08.786 A:middle
The source will tell you whether

00:30:08.786 --> 00:30:09.756 A:middle
or not it was notarized.

00:30:10.656 --> 00:30:11.956 A:middle
Notarized Developer ID means

00:30:11.956 --> 00:30:12.786 A:middle
that it was successfully

00:30:12.786 --> 00:30:13.986 A:middle
notarized and if it shows

00:30:13.986 --> 00:30:15.706 A:middle
anything else, that mean that it

00:30:15.706 --> 00:30:16.566 A:middle
wasn't notarized.

00:30:17.036 --> 00:30:20.086 A:middle
If instead you want to check an

00:30:20.086 --> 00:30:21.046 A:middle
installer package for

00:30:21.046 --> 00:30:24.616 A:middle
notarization, you can use the

00:30:24.616 --> 00:30:26.446 A:middle
SPCTL command just like before

00:30:26.446 --> 00:30:27.806 A:middle
but with the additional type

00:30:27.866 --> 00:30:29.666 A:middle
option and passing that it's an

00:30:29.666 --> 00:30:30.176 A:middle
install.

00:30:31.446 --> 00:30:32.436 A:middle
Again, this will show you the

00:30:32.436 --> 00:30:33.976 A:middle
source and if it was

00:30:33.976 --> 00:30:35.066 A:middle
successfully notarized, you'll

00:30:35.066 --> 00:30:37.186 A:middle
see notarized developer ID.

00:30:39.856 --> 00:30:42.586 A:middle
Next what if you want to check

00:30:42.586 --> 00:30:44.766 A:middle
notarization on a signed disk

00:30:44.766 --> 00:30:45.186 A:middle
image?

00:30:46.796 --> 00:30:48.206 A:middle
Well, you can use a fairly

00:30:48.206 --> 00:30:49.766 A:middle
similar command except now you

00:30:49.766 --> 00:30:52.186 A:middle
want to use the type open and

00:30:52.186 --> 00:30:53.846 A:middle
you need to pass in the context

00:30:54.346 --> 00:30:55.596 A:middle
that's listed here on the slide.

00:30:56.726 --> 00:30:57.866 A:middle
That will show you the same

00:30:57.866 --> 00:31:00.366 A:middle
output as before and if it says

00:30:57.866 --> 00:31:00.366 A:middle
output as before and if it says

00:31:00.366 --> 00:31:01.586 A:middle
notarized Developer ID,

00:31:01.946 --> 00:31:03.146 A:middle
notarization was successful for

00:31:03.146 --> 00:31:03.966 A:middle
that signed disk image.

00:31:05.546 --> 00:31:06.246 A:middle
If you want to check

00:31:06.246 --> 00:31:08.006 A:middle
notarization status of anything

00:31:08.006 --> 00:31:09.736 A:middle
else, you'll need to fall back

00:31:09.736 --> 00:31:11.766 A:middle
to using the codesign command.

00:31:13.456 --> 00:31:14.726 A:middle
Here's an example of using the

00:31:14.726 --> 00:31:17.126 A:middle
codesign command with the verify

00:31:17.126 --> 00:31:21.316 A:middle
function verbose output testing

00:31:21.316 --> 00:31:22.706 A:middle
a very specific requirement

00:31:23.226 --> 00:31:25.306 A:middle
notarized and then a path to the

00:31:25.306 --> 00:31:26.376 A:middle
binary or the thing that you're

00:31:26.376 --> 00:31:29.086 A:middle
trying to check and the third

00:31:29.086 --> 00:31:30.126 A:middle
line of the output will say

00:31:30.126 --> 00:31:31.896 A:middle
explicit requirements satisfied

00:31:32.276 --> 00:31:33.206 A:middle
indicating that the test

00:31:33.206 --> 00:31:34.506 A:middle
requirement you passed in on the

00:31:34.506 --> 00:31:35.976 A:middle
command line was successfully

00:31:35.976 --> 00:31:37.586 A:middle
satisfied, which in this case

00:31:37.586 --> 00:31:39.406 A:middle
means the binary was notarized.

00:31:40.536 --> 00:31:42.366 A:middle
If it says that the explicit

00:31:42.366 --> 00:31:44.126 A:middle
requirement failed, that means

00:31:44.126 --> 00:31:45.386 A:middle
the binary wasn't successfully

00:31:45.386 --> 00:31:45.936 A:middle
notarized.

00:31:49.136 --> 00:31:50.056 A:middle
So that's everything about

00:31:50.266 --> 00:31:51.366 A:middle
verifying notarization.

00:31:51.816 --> 00:31:53.176 A:middle
I want to jump back and hit on

00:31:53.176 --> 00:31:55.586 A:middle
one other usage of altool that I

00:31:55.586 --> 00:31:56.636 A:middle
mentioned very early in the

00:31:56.636 --> 00:31:57.226 A:middle
presentation.

00:31:58.636 --> 00:32:00.386 A:middle
Altool is also able to give you

00:31:58.636 --> 00:32:00.386 A:middle
Altool is also able to give you

00:32:00.386 --> 00:32:02.506 A:middle
a notarization history using the

00:32:02.506 --> 00:32:04.646 A:middle
notarization history command of

00:32:04.646 --> 00:32:06.006 A:middle
all of the software that's been

00:32:06.006 --> 00:32:07.706 A:middle
submitted for notarization on

00:32:07.706 --> 00:32:08.226 A:middle
your account.

00:32:09.406 --> 00:32:10.446 A:middle
Here you can see an example of

00:32:10.446 --> 00:32:12.146 A:middle
the command and an example of

00:32:12.146 --> 00:32:12.576 A:middle
the output.

00:32:13.156 --> 00:32:14.546 A:middle
It also accepts pagination so

00:32:14.546 --> 00:32:15.776 A:middle
that you can paginate through

00:32:15.776 --> 00:32:16.716 A:middle
all of the submissions that have

00:32:16.716 --> 00:32:16.976 A:middle
been made.

00:32:20.046 --> 00:32:21.056 A:middle
I know that that was a lot of

00:32:21.056 --> 00:32:22.386 A:middle
information to digest in one

00:32:22.806 --> 00:32:26.316 A:middle
short talk, but there's a few

00:32:26.316 --> 00:32:27.346 A:middle
important things that I really

00:32:27.346 --> 00:32:28.356 A:middle
want you to take away from this

00:32:28.356 --> 00:32:28.856 A:middle
conversation.

00:32:29.776 --> 00:32:31.916 A:middle
First, it's really important to

00:32:31.916 --> 00:32:33.896 A:middle
sign your software properly

00:32:34.286 --> 00:32:35.786 A:middle
using inside-out code signing.

00:32:36.576 --> 00:32:37.846 A:middle
This is important not just so

00:32:37.846 --> 00:32:39.286 A:middle
that gatekeeper can verify your

00:32:39.286 --> 00:32:40.326 A:middle
software hasn't been tempered

00:32:40.326 --> 00:32:42.746 A:middle
with but also for notarization.

00:32:45.816 --> 00:32:48.036 A:middle
Second, don't take hardened

00:32:48.036 --> 00:32:49.576 A:middle
runtime entitlements that you

00:32:49.576 --> 00:32:50.126 A:middle
don't need.

00:32:50.866 --> 00:32:52.266 A:middle
Think about the benefit that the

00:32:52.266 --> 00:32:53.336 A:middle
hardened runtime provides to

00:32:53.336 --> 00:32:55.206 A:middle
your app and your users and

00:32:55.206 --> 00:32:56.546 A:middle
remember that every entitlement

00:32:56.546 --> 00:32:58.476 A:middle
you take reduces the security of

00:32:58.476 --> 00:32:59.246 A:middle
your application.

00:32:59.746 --> 00:33:01.216 A:middle
So only take those that you

00:32:59.746 --> 00:33:01.216 A:middle
So only take those that you

00:33:01.766 --> 00:33:01.866 A:middle
need.

00:33:03.646 --> 00:33:05.996 A:middle
Finally notarize and staple all

00:33:05.996 --> 00:33:07.166 A:middle
the software that you distribute

00:33:07.566 --> 00:33:09.386 A:middle
so that it passes gatekeeper in

00:33:09.386 --> 00:33:10.146 A:middle
macOS Catalina.

00:33:13.516 --> 00:33:15.296 A:middle
Thanks for attending, and if

00:33:15.296 --> 00:33:16.086 A:middle
you're interested in talking

00:33:16.086 --> 00:33:17.536 A:middle
more about notarization, please

00:33:17.536 --> 00:33:18.796 A:middle
come to the notarization lab

00:33:18.796 --> 00:33:19.596 A:middle
that's going to be following

00:33:19.596 --> 00:33:20.736 A:middle
this session immediately at 4

00:33:20.736 --> 00:33:21.096 A:middle
o'clock.

00:33:21.586 --> 00:33:23.076 A:middle
Also, there are a couple of

00:33:23.076 --> 00:33:24.666 A:middle
other labs running throughout

00:33:24.666 --> 00:33:25.856 A:middle
the week where we can talk more

00:33:25.856 --> 00:33:27.496 A:middle
about security, notarization and

00:33:27.496 --> 00:33:27.726 A:middle
signing.

00:33:28.516 --> 00:33:28.976 A:middle
So thank you.

00:33:29.516 --> 00:33:36.500 A:middle
[ Applause ]
